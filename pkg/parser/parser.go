// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
	log "github.com/sirupsen/logrus"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "RawSource",
			pos:  position{line: 17, col: 1, offset: 336},
			expr: &actionExpr{
				pos: position{line: 17, col: 14, offset: 349},
				run: (*parser).callonRawSource1,
				expr: &labeledExpr{
					pos:   position{line: 17, col: 14, offset: 349},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 17, col: 20, offset: 355},
						expr: &choiceExpr{
							pos: position{line: 17, col: 21, offset: 356},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 17, col: 21, offset: 356},
									name: "AttributeDeclaration",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 44, offset: 379},
									name: "RawSection",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 57, offset: 392},
									name: "FileInclusion",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 73, offset: 408},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawSection",
			pos:  position{line: 22, col: 1, offset: 553},
			expr: &actionExpr{
				pos: position{line: 23, col: 5, offset: 572},
				run: (*parser).callonRawSection1,
				expr: &seqExpr{
					pos: position{line: 23, col: 5, offset: 572},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 23, col: 5, offset: 572},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 23, col: 12, offset: 579},
								run: (*parser).callonRawSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 23, col: 12, offset: 579},
									expr: &litMatcher{
										pos:        position{line: 23, col: 13, offset: 580},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 27, col: 5, offset: 671},
							run: (*parser).callonRawSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 31, col: 5, offset: 823},
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 5, offset: 823},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 31, col: 12, offset: 830},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 19, offset: 837},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 31, col: 36, offset: 854},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 35, col: 1, offset: 924},
			expr: &actionExpr{
				pos: position{line: 35, col: 20, offset: 943},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 35, col: 20, offset: 943},
					expr: &charClassMatcher{
						pos:        position{line: 35, col: 20, offset: 943},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 39, col: 1, offset: 990},
			expr: &actionExpr{
				pos: position{line: 39, col: 12, offset: 1001},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 39, col: 12, offset: 1001},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 39, col: 12, offset: 1001},
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 13, offset: 1002},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 39, col: 17, offset: 1006},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 39, col: 26, offset: 1015},
								run: (*parser).callonRawLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 39, col: 26, offset: 1015},
									expr: &charClassMatcher{
										pos:        position{line: 39, col: 26, offset: 1015},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 41, col: 8, offset: 1070},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawDocument",
			pos:  position{line: 48, col: 1, offset: 1349},
			expr: &actionExpr{
				pos: position{line: 48, col: 16, offset: 1364},
				run: (*parser).callonRawDocument1,
				expr: &seqExpr{
					pos: position{line: 48, col: 16, offset: 1364},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 48, col: 16, offset: 1364},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 48, col: 29, offset: 1377},
								expr: &ruleRefExpr{
									pos:  position{line: 48, col: 29, offset: 1377},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 48, col: 43, offset: 1391},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 51, offset: 1399},
								name: "RawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 62, offset: 1410},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawBlocks",
			pos:  position{line: 55, col: 1, offset: 1599},
			expr: &actionExpr{
				pos: position{line: 55, col: 14, offset: 1612},
				run: (*parser).callonRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 55, col: 14, offset: 1612},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 55, col: 14, offset: 1612},
							expr: &ruleRefExpr{
								pos:  position{line: 55, col: 14, offset: 1612},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 23, offset: 1621},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 55, col: 31, offset: 1629},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 31, offset: 1629},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 48, offset: 1646},
							label: "blocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 55, col: 56, offset: 1654},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 56, offset: 1654},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 64, col: 1, offset: 1906},
			expr: &actionExpr{
				pos: position{line: 65, col: 9, offset: 1935},
				run: (*parser).callonDocumentRawBlock1,
				expr: &labeledExpr{
					pos:   position{line: 65, col: 9, offset: 1935},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 65, col: 16, offset: 1942},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 65, col: 16, offset: 1942},
								name: "LabeledListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 66, col: 11, offset: 2007},
								name: "SimpleRawParagraph",
							},
							&ruleRefExpr{
								pos:  position{line: 67, col: 11, offset: 2036},
								name: "BlankLine",
							},
							&ruleRefExpr{
								pos:  position{line: 68, col: 11, offset: 2088},
								name: "Section",
							},
							&ruleRefExpr{
								pos:  position{line: 69, col: 11, offset: 2106},
								name: "DelimitedBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 70, col: 11, offset: 2131},
								name: "ImageBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 71, col: 11, offset: 2152},
								name: "SingleLineComment",
							},
							&ruleRefExpr{
								pos:  position{line: 72, col: 11, offset: 2180},
								name: "Table",
							},
							&ruleRefExpr{
								pos:  position{line: 73, col: 11, offset: 2196},
								name: "ThematicBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 74, col: 11, offset: 2220},
								name: "OrderedListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 75, col: 11, offset: 2246},
								name: "UnorderedListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 76, col: 11, offset: 2275},
								name: "CalloutListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 77, col: 11, offset: 2301},
								name: "ContinuedListItemElement",
							},
							&ruleRefExpr{
								pos:  position{line: 78, col: 11, offset: 2336},
								name: "LiteralBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 79, col: 11, offset: 2360},
								name: "AttributeDeclaration",
							},
							&ruleRefExpr{
								pos:  position{line: 80, col: 11, offset: 2392},
								name: "AttributeReset",
							},
							&ruleRefExpr{
								pos:  position{line: 81, col: 11, offset: 2418},
								name: "TableOfContentsPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 82, col: 11, offset: 2455},
								name: "UserMacroBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 83, col: 11, offset: 2480},
								name: "RawParagraph",
							},
							&ruleRefExpr{
								pos:  position{line: 84, col: 11, offset: 2503},
								name: "StandaloneAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 92, col: 1, offset: 2712},
			expr: &ruleRefExpr{
				pos:  position{line: 92, col: 16, offset: 2727},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 94, col: 1, offset: 2745},
			expr: &actionExpr{
				pos: position{line: 94, col: 20, offset: 2764},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 94, col: 20, offset: 2764},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 94, col: 20, offset: 2764},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 94, col: 41, offset: 2785},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 94, col: 49, offset: 2793},
								expr: &ruleRefExpr{
									pos:  position{line: 94, col: 50, offset: 2794},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 75, offset: 2819},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 98, col: 1, offset: 2899},
			expr: &seqExpr{
				pos: position{line: 98, col: 26, offset: 2924},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 98, col: 26, offset: 2924},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 98, col: 32, offset: 2930},
						expr: &ruleRefExpr{
							pos:  position{line: 98, col: 32, offset: 2930},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 39, offset: 2937},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 100, col: 1, offset: 2942},
			expr: &actionExpr{
				pos: position{line: 100, col: 27, offset: 2968},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 100, col: 27, offset: 2968},
					expr: &oneOrMoreExpr{
						pos: position{line: 100, col: 28, offset: 2969},
						expr: &seqExpr{
							pos: position{line: 100, col: 29, offset: 2970},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 100, col: 29, offset: 2970},
									expr: &ruleRefExpr{
										pos:  position{line: 100, col: 30, offset: 2971},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 100, col: 51, offset: 2992,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 107, col: 1, offset: 3158},
			expr: &actionExpr{
				pos: position{line: 107, col: 19, offset: 3176},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 107, col: 19, offset: 3176},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 107, col: 19, offset: 3176},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 107, col: 23, offset: 3180},
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 23, offset: 3180},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 30, offset: 3187},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 37, offset: 3194},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 52, offset: 3209},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 107, col: 56, offset: 3213},
								expr: &ruleRefExpr{
									pos:  position{line: 107, col: 56, offset: 3213},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 74, offset: 3231},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 9, offset: 3243},
							expr: &choiceExpr{
								pos: position{line: 108, col: 10, offset: 3244},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 108, col: 10, offset: 3244},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 108, col: 10, offset: 3244},
												expr: &ruleRefExpr{
													pos:  position{line: 108, col: 10, offset: 3244},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 108, col: 17, offset: 3251},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 108, col: 37, offset: 3271},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 109, col: 9, offset: 3294},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 109, col: 18, offset: 3303},
								expr: &ruleRefExpr{
									pos:  position{line: 109, col: 18, offset: 3303},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 9, offset: 3330},
							expr: &choiceExpr{
								pos: position{line: 110, col: 10, offset: 3331},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 110, col: 10, offset: 3331},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 110, col: 10, offset: 3331},
												expr: &ruleRefExpr{
													pos:  position{line: 110, col: 10, offset: 3331},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 110, col: 17, offset: 3338},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 110, col: 37, offset: 3358},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 9, offset: 3381},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 111, col: 19, offset: 3391},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 19, offset: 3391},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 115, col: 1, offset: 3492},
			expr: &choiceExpr{
				pos: position{line: 115, col: 20, offset: 3511},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 115, col: 20, offset: 3511},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 115, col: 48, offset: 3539},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 117, col: 1, offset: 3569},
			expr: &actionExpr{
				pos: position{line: 117, col: 30, offset: 3598},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 117, col: 30, offset: 3598},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 117, col: 30, offset: 3598},
							expr: &ruleRefExpr{
								pos:  position{line: 117, col: 30, offset: 3598},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 117, col: 37, offset: 3605},
							expr: &litMatcher{
								pos:        position{line: 117, col: 38, offset: 3606},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 117, col: 42, offset: 3610},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 117, col: 51, offset: 3619},
								expr: &ruleRefExpr{
									pos:  position{line: 117, col: 51, offset: 3619},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 117, col: 68, offset: 3636},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 121, col: 1, offset: 3706},
			expr: &actionExpr{
				pos: position{line: 121, col: 33, offset: 3738},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 121, col: 33, offset: 3738},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 33, offset: 3738},
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 33, offset: 3738},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 121, col: 40, offset: 3745},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 121, col: 51, offset: 3756},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 59, offset: 3764},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 75, offset: 3780},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 125, col: 1, offset: 3859},
			expr: &actionExpr{
				pos: position{line: 125, col: 19, offset: 3877},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 125, col: 19, offset: 3877},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 19, offset: 3877},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 19, offset: 3877},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 26, offset: 3884},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 36, offset: 3894},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 56, offset: 3914},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 125, col: 62, offset: 3920},
								expr: &ruleRefExpr{
									pos:  position{line: 125, col: 63, offset: 3921},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 85, offset: 3943},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 85, offset: 3943},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 125, col: 92, offset: 3950},
							expr: &litMatcher{
								pos:        position{line: 125, col: 92, offset: 3950},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 97, offset: 3955},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 97, offset: 3955},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 130, col: 1, offset: 4100},
			expr: &actionExpr{
				pos: position{line: 130, col: 23, offset: 4122},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 130, col: 23, offset: 4122},
					expr: &charClassMatcher{
						pos:        position{line: 130, col: 23, offset: 4122},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 134, col: 1, offset: 4169},
			expr: &actionExpr{
				pos: position{line: 134, col: 24, offset: 4192},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 134, col: 24, offset: 4192},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 134, col: 24, offset: 4192},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 134, col: 28, offset: 4196},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 134, col: 35, offset: 4203},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 134, col: 36, offset: 4204},
									expr: &charClassMatcher{
										pos:        position{line: 134, col: 36, offset: 4204},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 136, col: 4, offset: 4251},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 142, col: 1, offset: 4412},
			expr: &actionExpr{
				pos: position{line: 142, col: 21, offset: 4432},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 142, col: 21, offset: 4432},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 142, col: 21, offset: 4432},
							expr: &ruleRefExpr{
								pos:  position{line: 142, col: 21, offset: 4432},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 142, col: 28, offset: 4439},
							expr: &litMatcher{
								pos:        position{line: 142, col: 29, offset: 4440},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 142, col: 33, offset: 4444},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 143, col: 9, offset: 4463},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 143, col: 10, offset: 4464},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 143, col: 10, offset: 4464},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 143, col: 10, offset: 4464},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 143, col: 21, offset: 4475},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 143, col: 45, offset: 4499},
													expr: &litMatcher{
														pos:        position{line: 143, col: 45, offset: 4499},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 143, col: 50, offset: 4504},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 143, col: 58, offset: 4512},
														expr: &ruleRefExpr{
															pos:  position{line: 143, col: 59, offset: 4513},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 143, col: 82, offset: 4536},
													expr: &litMatcher{
														pos:        position{line: 143, col: 82, offset: 4536},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 143, col: 87, offset: 4541},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 143, col: 97, offset: 4551},
														expr: &ruleRefExpr{
															pos:  position{line: 143, col: 98, offset: 4552},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 145, col: 15, offset: 4669},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 145, col: 15, offset: 4669},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 145, col: 15, offset: 4669},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 145, col: 24, offset: 4678},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 145, col: 46, offset: 4700},
													expr: &litMatcher{
														pos:        position{line: 145, col: 46, offset: 4700},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 145, col: 51, offset: 4705},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 145, col: 61, offset: 4715},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 62, offset: 4716},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 13, offset: 4825},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 152, col: 1, offset: 4955},
			expr: &choiceExpr{
				pos: position{line: 152, col: 27, offset: 4981},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 152, col: 27, offset: 4981},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 152, col: 27, offset: 4981},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 152, col: 27, offset: 4981},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 152, col: 32, offset: 4986},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 152, col: 39, offset: 4993},
									expr: &charClassMatcher{
										pos:        position{line: 152, col: 39, offset: 4993},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 154, col: 5, offset: 5041},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 154, col: 5, offset: 5041},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 154, col: 5, offset: 5041},
									expr: &litMatcher{
										pos:        position{line: 154, col: 5, offset: 5041},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 11, offset: 5047},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 154, col: 18, offset: 5054},
									expr: &charClassMatcher{
										pos:        position{line: 154, col: 18, offset: 5054},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 154, col: 29, offset: 5065},
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 29, offset: 5065},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 154, col: 36, offset: 5072},
									expr: &litMatcher{
										pos:        position{line: 154, col: 37, offset: 5073},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 158, col: 1, offset: 5113},
			expr: &actionExpr{
				pos: position{line: 158, col: 25, offset: 5137},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 158, col: 25, offset: 5137},
					expr: &charClassMatcher{
						pos:        position{line: 158, col: 25, offset: 5137},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 162, col: 1, offset: 5183},
			expr: &actionExpr{
				pos: position{line: 162, col: 27, offset: 5209},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 162, col: 27, offset: 5209},
					expr: &charClassMatcher{
						pos:        position{line: 162, col: 27, offset: 5209},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 169, col: 1, offset: 5362},
			expr: &actionExpr{
				pos: position{line: 169, col: 25, offset: 5386},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 169, col: 25, offset: 5386},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 169, col: 25, offset: 5386},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 169, col: 29, offset: 5390},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 169, col: 35, offset: 5396},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 169, col: 50, offset: 5411},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 9, offset: 5424},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 170, col: 15, offset: 5430},
								expr: &ruleRefExpr{
									pos:  position{line: 170, col: 16, offset: 5431},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 170, col: 44, offset: 5459},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 177, col: 1, offset: 5732},
			expr: &actionExpr{
				pos: position{line: 177, col: 18, offset: 5749},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 177, col: 18, offset: 5749},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 177, col: 18, offset: 5749},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 177, col: 28, offset: 5759},
							expr: &charClassMatcher{
								pos:        position{line: 177, col: 29, offset: 5760},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 181, col: 1, offset: 5808},
			expr: &actionExpr{
				pos: position{line: 181, col: 30, offset: 5837},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 181, col: 30, offset: 5837},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 181, col: 30, offset: 5837},
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 30, offset: 5837},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 181, col: 37, offset: 5844},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 181, col: 46, offset: 5853},
								expr: &choiceExpr{
									pos: position{line: 182, col: 5, offset: 5859},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 182, col: 6, offset: 5860},
											run: (*parser).callonAttributeDeclarationValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 182, col: 6, offset: 5860},
												expr: &charClassMatcher{
													pos:        position{line: 182, col: 6, offset: 5860},
													val:        "[^\\r\\n{]",
													chars:      []rune{'\r', '\n', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 185, col: 5, offset: 5939},
											name: "AttributeSubstitution",
										},
										&actionExpr{
											pos: position{line: 186, col: 6, offset: 5968},
											run: (*parser).callonAttributeDeclarationValue12,
											expr: &litMatcher{
												pos:        position{line: 186, col: 6, offset: 5968},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 193, col: 1, offset: 6135},
			expr: &choiceExpr{
				pos: position{line: 193, col: 19, offset: 6153},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 193, col: 19, offset: 6153},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 193, col: 19, offset: 6153},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 193, col: 19, offset: 6153},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 193, col: 24, offset: 6158},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 30, offset: 6164},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 193, col: 45, offset: 6179},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 193, col: 49, offset: 6183},
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 49, offset: 6183},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 193, col: 56, offset: 6190},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 195, col: 5, offset: 6250},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 195, col: 5, offset: 6250},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 195, col: 5, offset: 6250},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 195, col: 9, offset: 6254},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 195, col: 15, offset: 6260},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 195, col: 30, offset: 6275},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 195, col: 35, offset: 6280},
									expr: &ruleRefExpr{
										pos:  position{line: 195, col: 35, offset: 6280},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 195, col: 42, offset: 6287},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 199, col: 1, offset: 6346},
			expr: &choiceExpr{
				pos: position{line: 199, col: 26, offset: 6371},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 199, col: 26, offset: 6371},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 39, offset: 6384},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 201, col: 1, offset: 6393},
			expr: &actionExpr{
				pos: position{line: 201, col: 12, offset: 6404},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 201, col: 12, offset: 6404},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 201, col: 12, offset: 6404},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 201, col: 16, offset: 6408},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 21, offset: 6413},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 201, col: 35, offset: 6427},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 205, col: 1, offset: 6493},
			expr: &choiceExpr{
				pos: position{line: 205, col: 15, offset: 6507},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 205, col: 15, offset: 6507},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 29, offset: 6521},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 43, offset: 6535},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 61, offset: 6553},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 80, offset: 6572},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 98, offset: 6590},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 207, col: 1, offset: 6608},
			expr: &actionExpr{
				pos: position{line: 207, col: 16, offset: 6623},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 207, col: 16, offset: 6623},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 207, col: 16, offset: 6623},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 207, col: 28, offset: 6635},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 33, offset: 6640},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 207, col: 47, offset: 6654},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 211, col: 1, offset: 6730},
			expr: &actionExpr{
				pos: position{line: 211, col: 16, offset: 6745},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 211, col: 16, offset: 6745},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 211, col: 16, offset: 6745},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 211, col: 29, offset: 6758},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 211, col: 34, offset: 6763},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 211, col: 48, offset: 6777},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 215, col: 1, offset: 6852},
			expr: &actionExpr{
				pos: position{line: 215, col: 20, offset: 6871},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 215, col: 20, offset: 6871},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 215, col: 20, offset: 6871},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 215, col: 32, offset: 6883},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 37, offset: 6888},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 215, col: 51, offset: 6902},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 215, col: 55, offset: 6906},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 215, col: 61, offset: 6912},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 215, col: 70, offset: 6921},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 219, col: 1, offset: 6999},
			expr: &actionExpr{
				pos: position{line: 219, col: 21, offset: 7019},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 219, col: 21, offset: 7019},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 219, col: 21, offset: 7019},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 219, col: 34, offset: 7032},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 39, offset: 7037},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 219, col: 53, offset: 7051},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 219, col: 57, offset: 7055},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 219, col: 63, offset: 7061},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 219, col: 72, offset: 7070},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 223, col: 1, offset: 7147},
			expr: &actionExpr{
				pos: position{line: 223, col: 20, offset: 7166},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 223, col: 20, offset: 7166},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 223, col: 20, offset: 7166},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 223, col: 32, offset: 7178},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 37, offset: 7183},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 223, col: 51, offset: 7197},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 223, col: 55, offset: 7201},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 223, col: 60, offset: 7206},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 223, col: 60, offset: 7206},
									expr: &charClassMatcher{
										pos:        position{line: 223, col: 60, offset: 7206},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 223, col: 108, offset: 7254},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 227, col: 1, offset: 7336},
			expr: &actionExpr{
				pos: position{line: 227, col: 21, offset: 7356},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 227, col: 21, offset: 7356},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 227, col: 21, offset: 7356},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 227, col: 34, offset: 7369},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 39, offset: 7374},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 227, col: 53, offset: 7388},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 227, col: 57, offset: 7392},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 227, col: 62, offset: 7397},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 227, col: 62, offset: 7397},
									expr: &charClassMatcher{
										pos:        position{line: 227, col: 62, offset: 7397},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 227, col: 110, offset: 7445},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 231, col: 1, offset: 7526},
			expr: &actionExpr{
				pos: position{line: 231, col: 20, offset: 7545},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 231, col: 20, offset: 7545},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 231, col: 20, offset: 7545},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 231, col: 25, offset: 7550},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 29, offset: 7554},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 231, col: 33, offset: 7558},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 231, col: 38, offset: 7563},
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 38, offset: 7563},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeKey",
			pos:  position{line: 235, col: 1, offset: 7702},
			expr: &actionExpr{
				pos: position{line: 235, col: 27, offset: 7728},
				run: (*parser).callonStandaloneAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 235, col: 27, offset: 7728},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 235, col: 27, offset: 7728},
							expr: &litMatcher{
								pos:        position{line: 235, col: 28, offset: 7729},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 235, col: 36, offset: 7737},
							expr: &litMatcher{
								pos:        position{line: 235, col: 37, offset: 7738},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 235, col: 45, offset: 7746},
							expr: &litMatcher{
								pos:        position{line: 235, col: 46, offset: 7747},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 235, col: 56, offset: 7757},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 61, offset: 7762},
								name: "NamedAttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 235, col: 80, offset: 7781},
							expr: &seqExpr{
								pos: position{line: 235, col: 81, offset: 7782},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 235, col: 81, offset: 7782},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 235, col: 85, offset: 7786},
										expr: &ruleRefExpr{
											pos:  position{line: 235, col: 85, offset: 7786},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 242, col: 1, offset: 7996},
			expr: &actionExpr{
				pos: position{line: 243, col: 5, offset: 8020},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 243, col: 5, offset: 8020},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 243, col: 16, offset: 8031},
						expr: &choiceExpr{
							pos: position{line: 245, col: 9, offset: 8098},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 245, col: 10, offset: 8099},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 245, col: 10, offset: 8099},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 245, col: 10, offset: 8099},
												label: "anchor",
												expr: &ruleRefExpr{
													pos:  position{line: 245, col: 18, offset: 8107},
													name: "ShortHandAnchor",
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 245, col: 35, offset: 8124},
												expr: &seqExpr{
													pos: position{line: 245, col: 36, offset: 8125},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 245, col: 36, offset: 8125},
															expr: &ruleRefExpr{
																pos:  position{line: 245, col: 36, offset: 8125},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 245, col: 43, offset: 8132},
															name: "Newline",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 249, col: 12, offset: 8252},
									run: (*parser).callonBlockAttributes14,
									expr: &seqExpr{
										pos: position{line: 249, col: 12, offset: 8252},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 249, col: 12, offset: 8252},
												label: "title",
												expr: &ruleRefExpr{
													pos:  position{line: 249, col: 19, offset: 8259},
													name: "ShortHandTitle",
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 249, col: 35, offset: 8275},
												expr: &seqExpr{
													pos: position{line: 249, col: 36, offset: 8276},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 249, col: 36, offset: 8276},
															expr: &ruleRefExpr{
																pos:  position{line: 249, col: 36, offset: 8276},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 249, col: 43, offset: 8283},
															name: "Newline",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 253, col: 12, offset: 8373},
									run: (*parser).callonBlockAttributes23,
									expr: &seqExpr{
										pos: position{line: 253, col: 12, offset: 8373},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 253, col: 12, offset: 8373},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 253, col: 24, offset: 8385},
													name: "LongHandAttributes",
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 253, col: 44, offset: 8405},
												expr: &seqExpr{
													pos: position{line: 253, col: 45, offset: 8406},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 253, col: 45, offset: 8406},
															expr: &ruleRefExpr{
																pos:  position{line: 253, col: 45, offset: 8406},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 253, col: 52, offset: 8413},
															name: "Newline",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 260, col: 1, offset: 8553},
			expr: &actionExpr{
				pos: position{line: 261, col: 5, offset: 8577},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 261, col: 5, offset: 8577},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 261, col: 5, offset: 8577},
							run: (*parser).callonInlineAttributes3,
						},
						&litMatcher{
							pos:        position{line: 264, col: 5, offset: 8628},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 265, col: 5, offset: 8636},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 265, col: 16, offset: 8647},
								expr: &choiceExpr{
									pos: position{line: 265, col: 17, offset: 8648},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 265, col: 17, offset: 8648},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 265, col: 37, offset: 8668},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 266, col: 5, offset: 8689},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 271, col: 1, offset: 8823},
			expr: &actionExpr{
				pos: position{line: 271, col: 25, offset: 8847},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 271, col: 25, offset: 8847},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 271, col: 25, offset: 8847},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 271, col: 37, offset: 8859},
								name: "BlockAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 271, col: 54, offset: 8876},
							expr: &ruleRefExpr{
								pos:  position{line: 271, col: 54, offset: 8876},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAnchor",
			pos:  position{line: 276, col: 1, offset: 8969},
			expr: &actionExpr{
				pos: position{line: 277, col: 4, offset: 8991},
				run: (*parser).callonShortHandAnchor1,
				expr: &seqExpr{
					pos: position{line: 277, col: 4, offset: 8991},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 277, col: 4, offset: 8991},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 278, col: 5, offset: 9001},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 279, col: 9, offset: 9014},
								run: (*parser).callonShortHandAnchor5,
								expr: &labeledExpr{
									pos:   position{line: 279, col: 9, offset: 9014},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 279, col: 18, offset: 9023},
										expr: &choiceExpr{
											pos: position{line: 280, col: 13, offset: 9037},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 280, col: 14, offset: 9038},
													run: (*parser).callonShortHandAnchor9,
													expr: &oneOrMoreExpr{
														pos: position{line: 280, col: 14, offset: 9038},
														expr: &charClassMatcher{
															pos:        position{line: 280, col: 14, offset: 9038},
															val:        "[^=\\r\\n\\uFFFD{\\]]",
															chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 283, col: 13, offset: 9205},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 284, col: 13, offset: 9238},
													name: "AttrSub",
												},
												&actionExpr{
													pos: position{line: 285, col: 14, offset: 9261},
													run: (*parser).callonShortHandAnchor14,
													expr: &litMatcher{
														pos:        position{line: 285, col: 14, offset: 9261},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 291, col: 5, offset: 9447},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandTitle",
			pos:  position{line: 296, col: 1, offset: 9548},
			expr: &actionExpr{
				pos: position{line: 296, col: 19, offset: 9566},
				run: (*parser).callonShortHandTitle1,
				expr: &seqExpr{
					pos: position{line: 296, col: 19, offset: 9566},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 296, col: 19, offset: 9566},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 296, col: 23, offset: 9570},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 297, col: 5, offset: 9582},
								run: (*parser).callonShortHandTitle5,
								expr: &seqExpr{
									pos: position{line: 297, col: 5, offset: 9582},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 297, col: 5, offset: 9582},
											expr: &charClassMatcher{
												pos:        position{line: 297, col: 6, offset: 9583},
												val:        "[. ]",
												chars:      []rune{'.', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 298, col: 5, offset: 9695},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 298, col: 14, offset: 9704},
												expr: &choiceExpr{
													pos: position{line: 299, col: 9, offset: 9714},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 299, col: 10, offset: 9715},
															run: (*parser).callonShortHandTitle12,
															expr: &oneOrMoreExpr{
																pos: position{line: 299, col: 10, offset: 9715},
																expr: &charClassMatcher{
																	pos:        position{line: 299, col: 10, offset: 9715},
																	val:        "[^\\r\\n\\uFFFD{]",
																	chars:      []rune{'\r', '\n', '�', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 302, col: 9, offset: 9813},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 303, col: 9, offset: 9842},
															name: "AttrSub",
														},
														&actionExpr{
															pos: position{line: 304, col: 10, offset: 9861},
															run: (*parser).callonShortHandTitle17,
															expr: &litMatcher{
																pos:        position{line: 304, col: 10, offset: 9861},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 315, col: 1, offset: 10261},
			expr: &actionExpr{
				pos: position{line: 316, col: 5, offset: 10287},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 316, col: 5, offset: 10287},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 316, col: 5, offset: 10287},
							run: (*parser).callonLongHandAttributes3,
						},
						&litMatcher{
							pos:        position{line: 319, col: 5, offset: 10338},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 321, col: 5, offset: 10404},
							label: "firstPositionalAttribute",
							expr: &zeroOrOneExpr{
								pos: position{line: 321, col: 30, offset: 10429},
								expr: &ruleRefExpr{
									pos:  position{line: 321, col: 31, offset: 10430},
									name: "FirstPositionalAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 5, offset: 10461},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 322, col: 21, offset: 10477},
								expr: &choiceExpr{
									pos: position{line: 322, col: 22, offset: 10478},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 322, col: 22, offset: 10478},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 322, col: 44, offset: 10500},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 323, col: 5, offset: 10521},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttribute",
			pos:  position{line: 334, col: 1, offset: 10978},
			expr: &actionExpr{
				pos: position{line: 335, col: 5, offset: 11011},
				run: (*parser).callonFirstPositionalAttribute1,
				expr: &seqExpr{
					pos: position{line: 335, col: 5, offset: 11011},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 335, col: 5, offset: 11011},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 335, col: 10, offset: 11016},
								expr: &ruleRefExpr{
									pos:  position{line: 336, col: 9, offset: 11026},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 5, offset: 11056},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 338, col: 12, offset: 11063},
								expr: &choiceExpr{
									pos: position{line: 339, col: 9, offset: 11074},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 339, col: 9, offset: 11074},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 340, col: 11, offset: 11106},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 341, col: 11, offset: 11141},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 342, col: 8, offset: 11174},
							expr: &seqExpr{
								pos: position{line: 342, col: 9, offset: 11175},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 342, col: 9, offset: 11175},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 342, col: 13, offset: 11179},
										expr: &ruleRefExpr{
											pos:  position{line: 342, col: 13, offset: 11179},
											name: "Space",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 343, col: 5, offset: 11193},
							run: (*parser).callonFirstPositionalAttribute17,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 357, col: 1, offset: 11550},
			expr: &actionExpr{
				pos: position{line: 357, col: 25, offset: 11574},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 357, col: 25, offset: 11574},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 25, offset: 11574},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 357, col: 29, offset: 11578},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 33, offset: 11582},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 365, col: 1, offset: 11745},
			expr: &actionExpr{
				pos: position{line: 365, col: 23, offset: 11767},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 365, col: 23, offset: 11767},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 365, col: 30, offset: 11774},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 374, col: 1, offset: 11992},
			expr: &actionExpr{
				pos: position{line: 374, col: 30, offset: 12021},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 374, col: 30, offset: 12021},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 374, col: 30, offset: 12021},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 374, col: 34, offset: 12025},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 40, offset: 12031},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 379, col: 1, offset: 12145},
			expr: &actionExpr{
				pos: position{line: 379, col: 29, offset: 12173},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 379, col: 29, offset: 12173},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 379, col: 29, offset: 12173},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 379, col: 33, offset: 12177},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 379, col: 41, offset: 12185},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 384, col: 1, offset: 12290},
			expr: &choiceExpr{
				pos: position{line: 385, col: 5, offset: 12322},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 385, col: 5, offset: 12322},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 386, col: 7, offset: 12356},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 387, col: 7, offset: 12390},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 387, col: 7, offset: 12390},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 387, col: 7, offset: 12390},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 387, col: 16, offset: 12399},
										expr: &choiceExpr{
											pos: position{line: 390, col: 5, offset: 12569},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 390, col: 6, offset: 12570},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 390, col: 6, offset: 12570},
														expr: &charClassMatcher{
															pos:        position{line: 390, col: 6, offset: 12570},
															val:        "[^,=.%# \\r\\n\\uFFFD{\\]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 393, col: 5, offset: 12664},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 394, col: 5, offset: 12689},
													name: "AttrSub",
												},
												&actionExpr{
													pos: position{line: 395, col: 6, offset: 12704},
													run: (*parser).callonShortHandAttributeValue14,
													expr: &litMatcher{
														pos:        position{line: 395, col: 6, offset: 12704},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 397, col: 10, offset: 12774},
									expr: &charClassMatcher{
										pos:        position{line: 397, col: 11, offset: 12775},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 401, col: 1, offset: 12851},
			expr: &choiceExpr{
				pos: position{line: 401, col: 24, offset: 12874},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 402, col: 5, offset: 12880},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 402, col: 5, offset: 12880},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 402, col: 5, offset: 12880},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 402, col: 12, offset: 12887},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 402, col: 29, offset: 12904},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 402, col: 29, offset: 12904},
											expr: &seqExpr{
												pos: position{line: 402, col: 30, offset: 12905},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 402, col: 30, offset: 12905},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 402, col: 34, offset: 12909},
														expr: &ruleRefExpr{
															pos:  position{line: 402, col: 34, offset: 12909},
															name: "Space",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 402, col: 45, offset: 12920},
											expr: &litMatcher{
												pos:        position{line: 402, col: 46, offset: 12921},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 411, col: 6, offset: 13172},
						run: (*parser).callonPositionalAttribute14,
						expr: &seqExpr{
							pos: position{line: 411, col: 6, offset: 13172},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 411, col: 6, offset: 13172},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 411, col: 13, offset: 13179},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 411, col: 13, offset: 13179},
												expr: &ruleRefExpr{
													pos:  position{line: 411, col: 13, offset: 13179},
													name: "Space",
												},
											},
											&choiceExpr{
												pos: position{line: 411, col: 21, offset: 13187},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 411, col: 22, offset: 13188},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 411, col: 22, offset: 13188},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 411, col: 26, offset: 13192},
																expr: &ruleRefExpr{
																	pos:  position{line: 411, col: 26, offset: 13192},
																	name: "Space",
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 411, col: 36, offset: 13202},
														expr: &litMatcher{
															pos:        position{line: 411, col: 37, offset: 13203},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 412, col: 5, offset: 13213},
									run: (*parser).callonPositionalAttribute27,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 427, col: 1, offset: 13648},
			expr: &actionExpr{
				pos: position{line: 427, col: 19, offset: 13666},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 427, col: 19, offset: 13666},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 427, col: 19, offset: 13666},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 24, offset: 13671},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 427, col: 43, offset: 13690},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 427, col: 47, offset: 13694},
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 47, offset: 13694},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 427, col: 54, offset: 13701},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 61, offset: 13708},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 427, col: 77, offset: 13724},
							expr: &seqExpr{
								pos: position{line: 427, col: 78, offset: 13725},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 427, col: 78, offset: 13725},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 427, col: 82, offset: 13729},
										expr: &ruleRefExpr{
											pos:  position{line: 427, col: 82, offset: 13729},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 436, col: 1, offset: 14042},
			expr: &actionExpr{
				pos: position{line: 436, col: 22, offset: 14063},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 436, col: 22, offset: 14063},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 436, col: 22, offset: 14063},
							expr: &ruleRefExpr{
								pos:  position{line: 436, col: 23, offset: 14064},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 436, col: 29, offset: 14070},
							expr: &charClassMatcher{
								pos:        position{line: 436, col: 29, offset: 14070},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 436, col: 42, offset: 14083},
							expr: &ruleRefExpr{
								pos:  position{line: 436, col: 42, offset: 14083},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 440, col: 1, offset: 14145},
			expr: &actionExpr{
				pos: position{line: 441, col: 5, offset: 14168},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 441, col: 5, offset: 14168},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 441, col: 5, offset: 14168},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 442, col: 9, offset: 14184},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 442, col: 9, offset: 14184},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 443, col: 11, offset: 14222},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 444, col: 11, offset: 14260},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 446, col: 5, offset: 14294},
							expr: &notExpr{
								pos: position{line: 446, col: 7, offset: 14296},
								expr: &seqExpr{
									pos: position{line: 446, col: 9, offset: 14298},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 446, col: 9, offset: 14298},
											expr: &ruleRefExpr{
												pos:  position{line: 446, col: 9, offset: 14298},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 446, col: 16, offset: 14305},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 450, col: 1, offset: 14346},
			expr: &actionExpr{
				pos: position{line: 451, col: 5, offset: 14381},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 451, col: 5, offset: 14381},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 451, col: 5, offset: 14381},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 452, col: 5, offset: 14390},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 452, col: 14, offset: 14399},
								expr: &choiceExpr{
									pos: position{line: 453, col: 9, offset: 14409},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 453, col: 10, offset: 14410},
											run: (*parser).callonSingleQuotedAttributeValue7,
											expr: &oneOrMoreExpr{
												pos: position{line: 453, col: 10, offset: 14410},
												expr: &charClassMatcher{
													pos:        position{line: 453, col: 10, offset: 14410},
													val:        "[^'\\r\\n\\uFFFD\\\\{]",
													chars:      []rune{'\'', '\r', '\n', '�', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 456, col: 11, offset: 14556},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 457, col: 11, offset: 14585},
											name: "AttrSub",
										},
										&choiceExpr{
											pos: position{line: 458, col: 12, offset: 14604},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 458, col: 12, offset: 14604},
													run: (*parser).callonSingleQuotedAttributeValue13,
													expr: &litMatcher{
														pos:        position{line: 458, col: 12, offset: 14604},
														val:        "\\'",
														ignoreCase: false,
														want:       "\"\\\\'\"",
													},
												},
												&litMatcher{
													pos:        position{line: 461, col: 11, offset: 14696},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 461, col: 17, offset: 14702},
													run: (*parser).callonSingleQuotedAttributeValue16,
													expr: &litMatcher{
														pos:        position{line: 461, col: 17, offset: 14702},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 465, col: 5, offset: 14791},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 469, col: 1, offset: 14847},
			expr: &actionExpr{
				pos: position{line: 470, col: 5, offset: 14882},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 470, col: 5, offset: 14882},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 470, col: 5, offset: 14882},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 471, col: 5, offset: 14892},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 471, col: 14, offset: 14901},
								expr: &choiceExpr{
									pos: position{line: 472, col: 9, offset: 14911},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 472, col: 10, offset: 14912},
											run: (*parser).callonDoubleQuotedAttributeValue7,
											expr: &oneOrMoreExpr{
												pos: position{line: 472, col: 10, offset: 14912},
												expr: &charClassMatcher{
													pos:        position{line: 472, col: 10, offset: 14912},
													val:        "[^\\r\\n\\uFFFD\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 475, col: 11, offset: 15058},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 476, col: 11, offset: 15087},
											name: "AttrSub",
										},
										&choiceExpr{
											pos: position{line: 477, col: 12, offset: 15106},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 477, col: 12, offset: 15106},
													run: (*parser).callonDoubleQuotedAttributeValue13,
													expr: &litMatcher{
														pos:        position{line: 477, col: 12, offset: 15106},
														val:        "\\\"",
														ignoreCase: false,
														want:       "\"\\\\\\\"\"",
													},
												},
												&litMatcher{
													pos:        position{line: 480, col: 11, offset: 15198},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 480, col: 17, offset: 15204},
													run: (*parser).callonDoubleQuotedAttributeValue16,
													expr: &litMatcher{
														pos:        position{line: 480, col: 17, offset: 15204},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 484, col: 5, offset: 15293},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 489, col: 1, offset: 15428},
			expr: &actionExpr{
				pos: position{line: 490, col: 5, offset: 15459},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 490, col: 5, offset: 15459},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 490, col: 5, offset: 15459},
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 6, offset: 15460},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 491, col: 5, offset: 15470},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 491, col: 14, offset: 15479},
								expr: &choiceExpr{
									pos: position{line: 492, col: 9, offset: 15489},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 492, col: 10, offset: 15490},
											run: (*parser).callonUnquotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 492, col: 10, offset: 15490},
												expr: &charClassMatcher{
													pos:        position{line: 492, col: 10, offset: 15490},
													val:        "[^,=\\r\\n\\uFFFD{\\]]",
													chars:      []rune{',', '=', '\r', '\n', '�', '{', ']'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 495, col: 11, offset: 15592},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 496, col: 11, offset: 15621},
											name: "AttrSub",
										},
										&actionExpr{
											pos: position{line: 497, col: 12, offset: 15640},
											run: (*parser).callonUnquotedAttributeValue13,
											expr: &litMatcher{
												pos:        position{line: 497, col: 12, offset: 15640},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 501, col: 5, offset: 15728},
							run: (*parser).callonUnquotedAttributeValue15,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 512, col: 1, offset: 16029},
			expr: &actionExpr{
				pos: position{line: 512, col: 12, offset: 16040},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 512, col: 12, offset: 16040},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 512, col: 12, offset: 16040},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 512, col: 23, offset: 16051},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 24, offset: 16052},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 513, col: 5, offset: 16074},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 513, col: 12, offset: 16081},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 513, col: 12, offset: 16081},
									expr: &litMatcher{
										pos:        position{line: 513, col: 13, offset: 16082},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 517, col: 5, offset: 16173},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 521, col: 5, offset: 16325},
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 5, offset: 16325},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 521, col: 12, offset: 16332},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 19, offset: 16339},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 521, col: 34, offset: 16354},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 521, col: 38, offset: 16358},
								expr: &ruleRefExpr{
									pos:  position{line: 521, col: 38, offset: 16358},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 521, col: 56, offset: 16376},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 525, col: 1, offset: 16482},
			expr: &actionExpr{
				pos: position{line: 525, col: 18, offset: 16499},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 525, col: 18, offset: 16499},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 525, col: 27, offset: 16508},
						expr: &seqExpr{
							pos: position{line: 525, col: 28, offset: 16509},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 525, col: 28, offset: 16509},
									expr: &ruleRefExpr{
										pos:  position{line: 525, col: 29, offset: 16510},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 525, col: 37, offset: 16518},
									expr: &ruleRefExpr{
										pos:  position{line: 525, col: 38, offset: 16519},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 525, col: 54, offset: 16535},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 529, col: 1, offset: 16656},
			expr: &actionExpr{
				pos: position{line: 529, col: 17, offset: 16672},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 529, col: 17, offset: 16672},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 529, col: 26, offset: 16681},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 529, col: 26, offset: 16681},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 530, col: 11, offset: 16696},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 531, col: 11, offset: 16741},
								expr: &ruleRefExpr{
									pos:  position{line: 531, col: 11, offset: 16741},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 532, col: 11, offset: 16759},
								name: "ElementPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 533, col: 11, offset: 16788},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 540, col: 1, offset: 16939},
			expr: &seqExpr{
				pos: position{line: 540, col: 31, offset: 16969},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 540, col: 31, offset: 16969},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 540, col: 41, offset: 16979},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 545, col: 1, offset: 17090},
			expr: &actionExpr{
				pos: position{line: 545, col: 19, offset: 17108},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 545, col: 19, offset: 17108},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 545, col: 19, offset: 17108},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 25, offset: 17114},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 545, col: 40, offset: 17129},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 545, col: 45, offset: 17134},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 52, offset: 17141},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 545, col: 68, offset: 17157},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 86, offset: 17175},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 549, col: 1, offset: 17298},
			expr: &actionExpr{
				pos: position{line: 549, col: 20, offset: 17317},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 549, col: 20, offset: 17317},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 549, col: 20, offset: 17317},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 26, offset: 17323},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 549, col: 41, offset: 17338},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 549, col: 45, offset: 17342},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 52, offset: 17349},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 549, col: 68, offset: 17365},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 86, offset: 17383},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 553, col: 1, offset: 17507},
			expr: &actionExpr{
				pos: position{line: 553, col: 18, offset: 17524},
				run: (*parser).callonUserMacroName1,
				expr: &seqExpr{
					pos: position{line: 553, col: 18, offset: 17524},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 553, col: 18, offset: 17524},
							expr: &litMatcher{
								pos:        position{line: 553, col: 19, offset: 17525},
								val:        "include",
								ignoreCase: false,
								want:       "\"include\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 553, col: 30, offset: 17536},
							expr: &charClassMatcher{
								pos:        position{line: 553, col: 30, offset: 17536},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 557, col: 1, offset: 17585},
			expr: &actionExpr{
				pos: position{line: 557, col: 19, offset: 17603},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 557, col: 19, offset: 17603},
					expr: &charClassMatcher{
						pos:        position{line: 557, col: 19, offset: 17603},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 564, col: 1, offset: 17762},
			expr: &actionExpr{
				pos: position{line: 565, col: 5, offset: 17784},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 565, col: 5, offset: 17784},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 565, col: 5, offset: 17784},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 566, col: 9, offset: 17799},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 566, col: 9, offset: 17799},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 566, col: 9, offset: 17799},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 567, col: 9, offset: 17820},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 567, col: 15, offset: 17826},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 568, col: 9, offset: 17849},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 568, col: 27, offset: 17867},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 572, col: 5, offset: 18027},
							expr: &ruleRefExpr{
								pos:  position{line: 572, col: 5, offset: 18027},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 572, col: 12, offset: 18034},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 576, col: 1, offset: 18094},
			expr: &ruleRefExpr{
				pos:  position{line: 576, col: 26, offset: 18119},
				name: "LongHandAttributes",
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 579, col: 1, offset: 18159},
			expr: &actionExpr{
				pos: position{line: 579, col: 15, offset: 18173},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 579, col: 15, offset: 18173},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 579, col: 15, offset: 18173},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 579, col: 22, offset: 18180},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 579, col: 22, offset: 18180},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 580, col: 11, offset: 18210},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 581, col: 11, offset: 18236},
										name: "SingleLineRange",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 582, col: 11, offset: 18263},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 586, col: 1, offset: 18345},
			expr: &actionExpr{
				pos: position{line: 586, col: 23, offset: 18367},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 586, col: 23, offset: 18367},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 586, col: 23, offset: 18367},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 586, col: 30, offset: 18374},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 586, col: 30, offset: 18374},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 586, col: 47, offset: 18391},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 587, col: 5, offset: 18413},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 587, col: 12, offset: 18420},
								expr: &actionExpr{
									pos: position{line: 588, col: 9, offset: 18430},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 588, col: 9, offset: 18430},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 588, col: 10, offset: 18431},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 588, col: 10, offset: 18431},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 588, col: 16, offset: 18437},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 589, col: 9, offset: 18548},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 589, col: 16, offset: 18555},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 589, col: 16, offset: 18555},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 589, col: 33, offset: 18572},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 595, col: 1, offset: 18714},
			expr: &actionExpr{
				pos: position{line: 595, col: 19, offset: 18732},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 595, col: 19, offset: 18732},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 595, col: 19, offset: 18732},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 26, offset: 18739},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 595, col: 34, offset: 18747},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 595, col: 39, offset: 18752},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 44, offset: 18757},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 599, col: 1, offset: 18845},
			expr: &actionExpr{
				pos: position{line: 599, col: 20, offset: 18864},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 599, col: 20, offset: 18864},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 599, col: 32, offset: 18876},
						name: "Number",
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 604, col: 1, offset: 18991},
			expr: &actionExpr{
				pos: position{line: 604, col: 14, offset: 19004},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 604, col: 14, offset: 19004},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 604, col: 14, offset: 19004},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 604, col: 21, offset: 19011},
								name: "MultipleTagRanges",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 604, col: 40, offset: 19030},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 608, col: 1, offset: 19112},
			expr: &actionExpr{
				pos: position{line: 608, col: 22, offset: 19133},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 608, col: 22, offset: 19133},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 608, col: 22, offset: 19133},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 29, offset: 19140},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 609, col: 5, offset: 19154},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 609, col: 12, offset: 19161},
								expr: &actionExpr{
									pos: position{line: 610, col: 9, offset: 19171},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 610, col: 9, offset: 19171},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 610, col: 10, offset: 19172},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 610, col: 10, offset: 19172},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 610, col: 16, offset: 19178},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 611, col: 9, offset: 19289},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 611, col: 16, offset: 19296},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 617, col: 1, offset: 19431},
			expr: &choiceExpr{
				pos: position{line: 617, col: 13, offset: 19443},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 617, col: 13, offset: 19443},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 617, col: 13, offset: 19443},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 617, col: 18, offset: 19448},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 617, col: 18, offset: 19448},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 617, col: 30, offset: 19460},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 619, col: 5, offset: 19528},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 619, col: 5, offset: 19528},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 619, col: 5, offset: 19528},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 619, col: 9, offset: 19532},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 619, col: 14, offset: 19537},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 619, col: 14, offset: 19537},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 619, col: 26, offset: 19549},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 623, col: 1, offset: 19617},
			expr: &actionExpr{
				pos: position{line: 623, col: 16, offset: 19632},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 623, col: 16, offset: 19632},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 623, col: 16, offset: 19632},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 623, col: 23, offset: 19639},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 623, col: 23, offset: 19639},
									expr: &litMatcher{
										pos:        position{line: 623, col: 24, offset: 19640},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 626, col: 5, offset: 19694},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 636, col: 1, offset: 19988},
			expr: &actionExpr{
				pos: position{line: 636, col: 21, offset: 20008},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 636, col: 21, offset: 20008},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 636, col: 21, offset: 20008},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 636, col: 29, offset: 20016},
								expr: &choiceExpr{
									pos: position{line: 636, col: 30, offset: 20017},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 636, col: 30, offset: 20017},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 636, col: 53, offset: 20040},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 636, col: 74, offset: 20061},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 636, col: 74, offset: 20061,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 636, col: 107, offset: 20094},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 640, col: 1, offset: 20165},
			expr: &actionExpr{
				pos: position{line: 640, col: 25, offset: 20189},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 640, col: 25, offset: 20189},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 640, col: 25, offset: 20189},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 640, col: 33, offset: 20197},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 640, col: 38, offset: 20202},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 640, col: 38, offset: 20202},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 640, col: 78, offset: 20242},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 644, col: 1, offset: 20307},
			expr: &actionExpr{
				pos: position{line: 644, col: 23, offset: 20329},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 644, col: 23, offset: 20329},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 644, col: 23, offset: 20329},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 644, col: 31, offset: 20337},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 644, col: 36, offset: 20342},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 644, col: 36, offset: 20342},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 644, col: 76, offset: 20382},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 651, col: 1, offset: 20546},
			expr: &choiceExpr{
				pos: position{line: 651, col: 18, offset: 20563},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 651, col: 18, offset: 20563},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 651, col: 18, offset: 20563},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 27, offset: 20572},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 653, col: 9, offset: 20629},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 653, col: 9, offset: 20629},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 653, col: 15, offset: 20635},
								expr: &ruleRefExpr{
									pos:  position{line: 653, col: 16, offset: 20636},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 657, col: 1, offset: 20728},
			expr: &actionExpr{
				pos: position{line: 657, col: 22, offset: 20749},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 657, col: 22, offset: 20749},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 657, col: 22, offset: 20749},
							expr: &ruleRefExpr{
								pos:  position{line: 657, col: 23, offset: 20750},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 658, col: 5, offset: 20758},
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 6, offset: 20759},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 659, col: 5, offset: 20773},
							expr: &ruleRefExpr{
								pos:  position{line: 659, col: 6, offset: 20774},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 660, col: 5, offset: 20796},
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 6, offset: 20797},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 661, col: 5, offset: 20823},
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 6, offset: 20824},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 662, col: 5, offset: 20852},
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 6, offset: 20853},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 663, col: 5, offset: 20879},
							expr: &ruleRefExpr{
								pos:  position{line: 663, col: 6, offset: 20880},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 664, col: 5, offset: 20905},
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 6, offset: 20906},
								name: "BlockAttributes",
							},
						},
						&notExpr{
							pos: position{line: 665, col: 5, offset: 20926},
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 6, offset: 20927},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 666, col: 5, offset: 20946},
							expr: &ruleRefExpr{
								pos:  position{line: 666, col: 6, offset: 20947},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 667, col: 5, offset: 20974},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 667, col: 11, offset: 20980},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 667, col: 11, offset: 20980},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 667, col: 11, offset: 20980},
											expr: &ruleRefExpr{
												pos:  position{line: 667, col: 11, offset: 20980},
												name: "Space",
											},
										},
										&labeledExpr{
											pos:   position{line: 667, col: 18, offset: 20987},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 667, col: 27, offset: 20996},
												expr: &ruleRefExpr{
													pos:  position{line: 667, col: 28, offset: 20997},
													name: "InlineElement",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 669, col: 12, offset: 21096},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 673, col: 1, offset: 21135},
			expr: &seqExpr{
				pos: position{line: 673, col: 25, offset: 21159},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 673, col: 25, offset: 21159},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 673, col: 29, offset: 21163},
						expr: &ruleRefExpr{
							pos:  position{line: 673, col: 29, offset: 21163},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 673, col: 36, offset: 21170},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 675, col: 1, offset: 21242},
			expr: &actionExpr{
				pos: position{line: 675, col: 29, offset: 21270},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 675, col: 29, offset: 21270},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 675, col: 29, offset: 21270},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 675, col: 50, offset: 21291},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 58, offset: 21299},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 679, col: 1, offset: 21405},
			expr: &actionExpr{
				pos: position{line: 679, col: 29, offset: 21433},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 679, col: 29, offset: 21433},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 679, col: 29, offset: 21433},
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 30, offset: 21434},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 680, col: 5, offset: 21443},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 680, col: 14, offset: 21452},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 680, col: 14, offset: 21452},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 681, col: 11, offset: 21477},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 682, col: 11, offset: 21505},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 683, col: 11, offset: 21521},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 684, col: 11, offset: 21542},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 685, col: 11, offset: 21566},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 686, col: 11, offset: 21593},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 11, offset: 21622},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 688, col: 11, offset: 21649},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 689, col: 11, offset: 21700},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 690, col: 11, offset: 21724},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 691, col: 11, offset: 21756},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 11, offset: 21782},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 693, col: 11, offset: 21819},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 694, col: 11, offset: 21844},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 701, col: 1, offset: 22010},
			expr: &actionExpr{
				pos: position{line: 701, col: 20, offset: 22029},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 701, col: 20, offset: 22029},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 701, col: 20, offset: 22029},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 701, col: 31, offset: 22040},
								expr: &ruleRefExpr{
									pos:  position{line: 701, col: 32, offset: 22041},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 701, col: 50, offset: 22059},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 58, offset: 22067},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 701, col: 81, offset: 22090},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 90, offset: 22099},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 705, col: 1, offset: 22239},
			expr: &actionExpr{
				pos: position{line: 706, col: 5, offset: 22269},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 706, col: 5, offset: 22269},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 706, col: 5, offset: 22269},
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 5, offset: 22269},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 706, col: 12, offset: 22276},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 708, col: 9, offset: 22339},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 708, col: 9, offset: 22339},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 708, col: 9, offset: 22339},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 708, col: 9, offset: 22339},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 708, col: 16, offset: 22346},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 708, col: 16, offset: 22346},
															expr: &litMatcher{
																pos:        position{line: 708, col: 17, offset: 22347},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 712, col: 9, offset: 22447},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 731, col: 11, offset: 23164},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 731, col: 11, offset: 23164},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 731, col: 11, offset: 23164},
													expr: &charClassMatcher{
														pos:        position{line: 731, col: 12, offset: 23165},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 731, col: 20, offset: 23173},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 733, col: 13, offset: 23284},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 733, col: 13, offset: 23284},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 733, col: 14, offset: 23285},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 733, col: 21, offset: 23292},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 735, col: 13, offset: 23406},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 735, col: 13, offset: 23406},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 735, col: 14, offset: 23407},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 735, col: 21, offset: 23414},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 737, col: 13, offset: 23528},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 737, col: 13, offset: 23528},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 737, col: 13, offset: 23528},
													expr: &charClassMatcher{
														pos:        position{line: 737, col: 14, offset: 23529},
														val:        "[ivxdlcm]",
														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 737, col: 26, offset: 23541},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 739, col: 13, offset: 23655},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 739, col: 13, offset: 23655},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 739, col: 13, offset: 23655},
													expr: &charClassMatcher{
														pos:        position{line: 739, col: 14, offset: 23656},
														val:        "[IVXDLCM]",
														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 739, col: 26, offset: 23668},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 741, col: 12, offset: 23781},
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 12, offset: 23781},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 745, col: 1, offset: 23816},
			expr: &actionExpr{
				pos: position{line: 745, col: 27, offset: 23842},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 745, col: 27, offset: 23842},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 745, col: 37, offset: 23852},
						expr: &ruleRefExpr{
							pos:  position{line: 745, col: 37, offset: 23852},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 752, col: 1, offset: 24052},
			expr: &actionExpr{
				pos: position{line: 752, col: 22, offset: 24073},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 752, col: 22, offset: 24073},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 752, col: 22, offset: 24073},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 752, col: 33, offset: 24084},
								expr: &ruleRefExpr{
									pos:  position{line: 752, col: 34, offset: 24085},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 752, col: 52, offset: 24103},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 60, offset: 24111},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 752, col: 85, offset: 24136},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 752, col: 96, offset: 24147},
								expr: &ruleRefExpr{
									pos:  position{line: 752, col: 97, offset: 24148},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 752, col: 127, offset: 24178},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 136, offset: 24187},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 756, col: 1, offset: 24345},
			expr: &actionExpr{
				pos: position{line: 757, col: 5, offset: 24377},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 757, col: 5, offset: 24377},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 757, col: 5, offset: 24377},
							expr: &ruleRefExpr{
								pos:  position{line: 757, col: 5, offset: 24377},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 757, col: 12, offset: 24384},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 757, col: 20, offset: 24392},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 759, col: 9, offset: 24449},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 759, col: 9, offset: 24449},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 759, col: 9, offset: 24449},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 759, col: 16, offset: 24456},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 759, col: 16, offset: 24456},
															expr: &litMatcher{
																pos:        position{line: 759, col: 17, offset: 24457},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 763, col: 9, offset: 24557},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 780, col: 14, offset: 25264},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 780, col: 21, offset: 25271},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 780, col: 22, offset: 25272},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 782, col: 13, offset: 25358},
							expr: &ruleRefExpr{
								pos:  position{line: 782, col: 13, offset: 25358},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 786, col: 1, offset: 25394},
			expr: &actionExpr{
				pos: position{line: 786, col: 32, offset: 25425},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 786, col: 32, offset: 25425},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 786, col: 32, offset: 25425},
							expr: &litMatcher{
								pos:        position{line: 786, col: 33, offset: 25426},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 786, col: 37, offset: 25430},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 787, col: 7, offset: 25444},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 787, col: 7, offset: 25444},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 787, col: 7, offset: 25444},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 788, col: 7, offset: 25489},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 788, col: 7, offset: 25489},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 789, col: 7, offset: 25532},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 789, col: 7, offset: 25532},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 790, col: 7, offset: 25574},
							expr: &ruleRefExpr{
								pos:  position{line: 790, col: 7, offset: 25574},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 794, col: 1, offset: 25616},
			expr: &actionExpr{
				pos: position{line: 794, col: 29, offset: 25644},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 794, col: 29, offset: 25644},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 794, col: 39, offset: 25654},
						expr: &ruleRefExpr{
							pos:  position{line: 794, col: 39, offset: 25654},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 801, col: 1, offset: 25970},
			expr: &actionExpr{
				pos: position{line: 801, col: 20, offset: 25989},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 801, col: 20, offset: 25989},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 801, col: 20, offset: 25989},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 801, col: 31, offset: 26000},
								expr: &ruleRefExpr{
									pos:  position{line: 801, col: 32, offset: 26001},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 801, col: 50, offset: 26019},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 801, col: 56, offset: 26025},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 801, col: 85, offset: 26054},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 801, col: 96, offset: 26065},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 801, col: 122, offset: 26091},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 801, col: 134, offset: 26103},
								expr: &ruleRefExpr{
									pos:  position{line: 801, col: 135, offset: 26104},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 805, col: 1, offset: 26250},
			expr: &seqExpr{
				pos: position{line: 805, col: 26, offset: 26275},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 805, col: 26, offset: 26275},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 805, col: 54, offset: 26303},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 807, col: 1, offset: 26329},
			expr: &choiceExpr{
				pos: position{line: 807, col: 33, offset: 26361},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 807, col: 33, offset: 26361},
						expr: &charClassMatcher{
							pos:        position{line: 807, col: 33, offset: 26361},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 807, col: 45, offset: 26373},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 807, col: 45, offset: 26373},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 807, col: 49, offset: 26377},
								expr: &litMatcher{
									pos:        position{line: 807, col: 50, offset: 26378},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 808, col: 1, offset: 26382},
			expr: &actionExpr{
				pos: position{line: 808, col: 32, offset: 26413},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 808, col: 32, offset: 26413},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 808, col: 42, offset: 26423},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 808, col: 42, offset: 26423},
							expr: &ruleRefExpr{
								pos:  position{line: 808, col: 42, offset: 26423},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 815, col: 1, offset: 26598},
			expr: &actionExpr{
				pos: position{line: 815, col: 24, offset: 26621},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 815, col: 24, offset: 26621},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 815, col: 33, offset: 26630},
						expr: &seqExpr{
							pos: position{line: 815, col: 34, offset: 26631},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 815, col: 34, offset: 26631},
									expr: &ruleRefExpr{
										pos:  position{line: 815, col: 35, offset: 26632},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 815, col: 43, offset: 26640},
									expr: &litMatcher{
										pos:        position{line: 815, col: 44, offset: 26641},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 815, col: 49, offset: 26646},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 819, col: 1, offset: 26743},
			expr: &actionExpr{
				pos: position{line: 819, col: 31, offset: 26773},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 819, col: 31, offset: 26773},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 819, col: 40, offset: 26782},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 819, col: 40, offset: 26782},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 820, col: 11, offset: 26797},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 821, col: 11, offset: 26846},
								expr: &ruleRefExpr{
									pos:  position{line: 821, col: 11, offset: 26846},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 822, col: 11, offset: 26864},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 823, col: 11, offset: 26889},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 824, col: 11, offset: 26918},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 825, col: 11, offset: 26938},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 826, col: 11, offset: 27027},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 827, col: 11, offset: 27048},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 828, col: 11, offset: 27071},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 829, col: 11, offset: 27086},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 830, col: 11, offset: 27111},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 831, col: 11, offset: 27134},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 832, col: 11, offset: 27155},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 833, col: 11, offset: 27182},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 834, col: 11, offset: 27199},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 835, col: 11, offset: 27231},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 839, col: 1, offset: 27270},
			expr: &actionExpr{
				pos: position{line: 840, col: 5, offset: 27303},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 840, col: 5, offset: 27303},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 840, col: 5, offset: 27303},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 840, col: 16, offset: 27314},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 840, col: 16, offset: 27314},
									expr: &litMatcher{
										pos:        position{line: 840, col: 17, offset: 27315},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 843, col: 5, offset: 27373},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 847, col: 6, offset: 27549},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 847, col: 6, offset: 27549},
									expr: &choiceExpr{
										pos: position{line: 847, col: 7, offset: 27550},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 847, col: 7, offset: 27550},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 847, col: 15, offset: 27558},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 847, col: 27, offset: 27570},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 851, col: 1, offset: 27610},
			expr: &actionExpr{
				pos: position{line: 851, col: 31, offset: 27640},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 851, col: 31, offset: 27640},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 851, col: 40, offset: 27649},
						expr: &ruleRefExpr{
							pos:  position{line: 851, col: 41, offset: 27650},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 858, col: 1, offset: 27841},
			expr: &choiceExpr{
				pos: position{line: 858, col: 19, offset: 27859},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 858, col: 19, offset: 27859},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 858, col: 19, offset: 27859},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 860, col: 5, offset: 27897},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 860, col: 5, offset: 27897},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 862, col: 5, offset: 27937},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 862, col: 5, offset: 27937},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 864, col: 5, offset: 27987},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 864, col: 5, offset: 27987},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 866, col: 5, offset: 28033},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 866, col: 5, offset: 28033},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 878, col: 1, offset: 28413},
			expr: &choiceExpr{
				pos: position{line: 880, col: 6, offset: 28464},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 880, col: 6, offset: 28464},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 880, col: 6, offset: 28464},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 880, col: 6, offset: 28464},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 880, col: 17, offset: 28475},
										expr: &ruleRefExpr{
											pos:  position{line: 880, col: 18, offset: 28476},
											name: "BlockAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 880, col: 36, offset: 28494},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 880, col: 39, offset: 28497},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 880, col: 55, offset: 28513},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 880, col: 60, offset: 28518},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 880, col: 66, offset: 28524},
										expr: &choiceExpr{
											pos: position{line: 880, col: 67, offset: 28525},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 880, col: 67, offset: 28525},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 880, col: 87, offset: 28545},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 885, col: 5, offset: 28766},
						run: (*parser).callonRawParagraph15,
						expr: &seqExpr{
							pos: position{line: 885, col: 5, offset: 28766},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 885, col: 5, offset: 28766},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 885, col: 16, offset: 28777},
										expr: &ruleRefExpr{
											pos:  position{line: 885, col: 17, offset: 28778},
											name: "BlockAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 885, col: 35, offset: 28796},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 885, col: 40, offset: 28801},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 885, col: 49, offset: 28810},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 889, col: 5, offset: 28983},
						run: (*parser).callonRawParagraph23,
						expr: &seqExpr{
							pos: position{line: 889, col: 5, offset: 28983},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 889, col: 5, offset: 28983},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 889, col: 16, offset: 28994},
										expr: &ruleRefExpr{
											pos:  position{line: 889, col: 17, offset: 28995},
											name: "BlockAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 889, col: 35, offset: 29013},
									run: (*parser).callonRawParagraph28,
								},
								&labeledExpr{
									pos:   position{line: 892, col: 7, offset: 29191},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 892, col: 15, offset: 29199},
										expr: &ruleRefExpr{
											pos:  position{line: 892, col: 16, offset: 29200},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 896, col: 5, offset: 29366},
						run: (*parser).callonRawParagraph32,
						expr: &seqExpr{
							pos: position{line: 896, col: 5, offset: 29366},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 896, col: 5, offset: 29366},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 896, col: 16, offset: 29377},
										expr: &ruleRefExpr{
											pos:  position{line: 896, col: 17, offset: 29378},
											name: "BlockAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 896, col: 35, offset: 29396},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 896, col: 41, offset: 29402},
										expr: &choiceExpr{
											pos: position{line: 896, col: 42, offset: 29403},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 896, col: 42, offset: 29403},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 896, col: 62, offset: 29423},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 900, col: 1, offset: 29521},
			expr: &oneOrMoreExpr{
				pos: position{line: 900, col: 33, offset: 29553},
				expr: &actionExpr{
					pos: position{line: 900, col: 34, offset: 29554},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 900, col: 34, offset: 29554},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 900, col: 34, offset: 29554},
								expr: &ruleRefExpr{
									pos:  position{line: 900, col: 35, offset: 29555},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 900, col: 45, offset: 29565},
								expr: &litMatcher{
									pos:        position{line: 900, col: 45, offset: 29565},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 900, col: 51, offset: 29571},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 900, col: 60, offset: 29580},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 904, col: 1, offset: 29621},
			expr: &actionExpr{
				pos: position{line: 904, col: 21, offset: 29641},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 904, col: 21, offset: 29641},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 904, col: 21, offset: 29641},
							expr: &ruleRefExpr{
								pos:  position{line: 904, col: 22, offset: 29642},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 905, col: 5, offset: 29662},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 905, col: 14, offset: 29671},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 905, col: 39, offset: 29696},
							name: "EOL",
						},
						&andCodeExpr{
							pos: position{line: 905, col: 43, offset: 29700},
							run: (*parser).callonRawParagraphLine8,
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 915, col: 1, offset: 29935},
			expr: &actionExpr{
				pos: position{line: 915, col: 28, offset: 29962},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 915, col: 28, offset: 29962},
					expr: &charClassMatcher{
						pos:        position{line: 915, col: 28, offset: 29962},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SimpleRawParagraph",
			pos:  position{line: 920, col: 1, offset: 30079},
			expr: &actionExpr{
				pos: position{line: 920, col: 23, offset: 30101},
				run: (*parser).callonSimpleRawParagraph1,
				expr: &seqExpr{
					pos: position{line: 920, col: 23, offset: 30101},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 920, col: 23, offset: 30101},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 920, col: 34, offset: 30112},
								expr: &ruleRefExpr{
									pos:  position{line: 920, col: 35, offset: 30113},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 921, col: 5, offset: 30136},
							run: (*parser).callonSimpleRawParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 924, col: 5, offset: 30248},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 924, col: 16, offset: 30259},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 925, col: 5, offset: 30285},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 925, col: 16, offset: 30296},
								expr: &choiceExpr{
									pos: position{line: 925, col: 17, offset: 30297},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 925, col: 17, offset: 30297},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 925, col: 37, offset: 30317},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 929, col: 1, offset: 30449},
			expr: &actionExpr{
				pos: position{line: 930, col: 5, offset: 30479},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 930, col: 5, offset: 30479},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 930, col: 5, offset: 30479},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 930, col: 14, offset: 30488},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 930, col: 14, offset: 30488},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 930, col: 14, offset: 30488},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 930, col: 23, offset: 30497},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 930, col: 28, offset: 30502},
											expr: &charClassMatcher{
												pos:        position{line: 930, col: 28, offset: 30502},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 930, col: 68, offset: 30542},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 941, col: 1, offset: 30794},
			expr: &choiceExpr{
				pos: position{line: 943, col: 5, offset: 30853},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 943, col: 5, offset: 30853},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 943, col: 5, offset: 30853},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 943, col: 5, offset: 30853},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 943, col: 16, offset: 30864},
										expr: &ruleRefExpr{
											pos:  position{line: 943, col: 17, offset: 30865},
											name: "BlockAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 943, col: 35, offset: 30883},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 943, col: 38, offset: 30886},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 943, col: 54, offset: 30902},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 943, col: 59, offset: 30907},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 943, col: 66, offset: 30914},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 947, col: 5, offset: 31103},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 947, col: 5, offset: 31103},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 947, col: 5, offset: 31103},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 947, col: 16, offset: 31114},
										expr: &ruleRefExpr{
											pos:  position{line: 947, col: 17, offset: 31115},
											name: "BlockAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 947, col: 35, offset: 31133},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 947, col: 42, offset: 31140},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 951, col: 1, offset: 31244},
			expr: &actionExpr{
				pos: position{line: 951, col: 31, offset: 31274},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 951, col: 31, offset: 31274},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 951, col: 31, offset: 31274},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 951, col: 42, offset: 31285},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 951, col: 65, offset: 31308},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 951, col: 76, offset: 31319},
								expr: &actionExpr{
									pos: position{line: 951, col: 77, offset: 31320},
									run: (*parser).callonContinuedRawParagraphLines7,
									expr: &seqExpr{
										pos: position{line: 951, col: 77, offset: 31320},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 951, col: 77, offset: 31320},
												expr: &ruleRefExpr{
													pos:  position{line: 951, col: 78, offset: 31321},
													name: "ListItemContinuation",
												},
											},
											&labeledExpr{
												pos:   position{line: 951, col: 99, offset: 31342},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 951, col: 105, offset: 31348},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 951, col: 105, offset: 31348},
															name: "SingleLineComment",
														},
														&ruleRefExpr{
															pos:  position{line: 951, col: 125, offset: 31368},
															name: "RawParagraphLine",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 959, col: 1, offset: 31610},
			expr: &actionExpr{
				pos: position{line: 959, col: 19, offset: 31628},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 959, col: 19, offset: 31628},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 959, col: 19, offset: 31628},
							expr: &ruleRefExpr{
								pos:  position{line: 959, col: 20, offset: 31629},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 960, col: 5, offset: 31643},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 960, col: 15, offset: 31653},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 960, col: 15, offset: 31653},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 960, col: 15, offset: 31653},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 960, col: 24, offset: 31662},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 962, col: 9, offset: 31754},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 962, col: 9, offset: 31754},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 962, col: 9, offset: 31754},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 962, col: 18, offset: 31763},
														expr: &ruleRefExpr{
															pos:  position{line: 962, col: 19, offset: 31764},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 962, col: 35, offset: 31780},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 968, col: 1, offset: 31897},
			expr: &actionExpr{
				pos: position{line: 969, col: 5, offset: 31920},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 969, col: 5, offset: 31920},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 969, col: 14, offset: 31929},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 969, col: 14, offset: 31929},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 970, col: 11, offset: 31990},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 971, col: 11, offset: 32035},
								expr: &ruleRefExpr{
									pos:  position{line: 971, col: 11, offset: 32035},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 972, col: 11, offset: 32053},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 972, col: 11, offset: 32053},
										expr: &ruleRefExpr{
											pos:  position{line: 972, col: 12, offset: 32054},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 973, col: 13, offset: 32072},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 973, col: 13, offset: 32072},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 974, col: 15, offset: 32099},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 975, col: 15, offset: 32124},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 976, col: 15, offset: 32149},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 977, col: 15, offset: 32176},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 978, col: 15, offset: 32196},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 979, col: 15, offset: 32289},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 980, col: 15, offset: 32319},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 981, col: 15, offset: 32387},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 982, col: 15, offset: 32418},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 983, col: 15, offset: 32439},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 984, col: 15, offset: 32470},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 985, col: 15, offset: 32507},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 986, col: 15, offset: 32537},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 987, col: 15, offset: 32570},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 988, col: 15, offset: 32594},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 989, col: 15, offset: 32627},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 996, col: 1, offset: 32850},
			expr: &actionExpr{
				pos: position{line: 996, col: 14, offset: 32863},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 996, col: 14, offset: 32863},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 996, col: 14, offset: 32863},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 996, col: 20, offset: 32869},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 996, col: 24, offset: 32873},
							expr: &ruleRefExpr{
								pos:  position{line: 996, col: 24, offset: 32873},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 996, col: 31, offset: 32880},
							expr: &ruleRefExpr{
								pos:  position{line: 996, col: 32, offset: 32881},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1003, col: 1, offset: 33165},
			expr: &choiceExpr{
				pos: position{line: 1003, col: 15, offset: 33179},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1003, col: 15, offset: 33179},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1003, col: 41, offset: 33205},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1003, col: 65, offset: 33229},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1005, col: 1, offset: 33248},
			expr: &choiceExpr{
				pos: position{line: 1005, col: 32, offset: 33279},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1005, col: 32, offset: 33279},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1005, col: 32, offset: 33279},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1005, col: 36, offset: 33283},
								expr: &litMatcher{
									pos:        position{line: 1005, col: 37, offset: 33284},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1005, col: 43, offset: 33290},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1005, col: 43, offset: 33290},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1005, col: 47, offset: 33294},
								expr: &litMatcher{
									pos:        position{line: 1005, col: 48, offset: 33295},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1005, col: 54, offset: 33301},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1005, col: 54, offset: 33301},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1005, col: 58, offset: 33305},
								expr: &litMatcher{
									pos:        position{line: 1005, col: 59, offset: 33306},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1005, col: 65, offset: 33312},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1005, col: 65, offset: 33312},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1005, col: 69, offset: 33316},
								expr: &litMatcher{
									pos:        position{line: 1005, col: 70, offset: 33317},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1007, col: 1, offset: 33322},
			expr: &choiceExpr{
				pos: position{line: 1007, col: 34, offset: 33355},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1007, col: 34, offset: 33355},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1007, col: 41, offset: 33362},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1007, col: 48, offset: 33369},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1007, col: 55, offset: 33376},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1007, col: 62, offset: 33383},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1007, col: 68, offset: 33389},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1009, col: 1, offset: 33394},
			expr: &actionExpr{
				pos: position{line: 1009, col: 26, offset: 33419},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1009, col: 26, offset: 33419},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1009, col: 32, offset: 33425},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1009, col: 32, offset: 33425},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1010, col: 15, offset: 33460},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1011, col: 15, offset: 33496},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1012, col: 15, offset: 33532},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1013, col: 15, offset: 33572},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1014, col: 15, offset: 33601},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1015, col: 15, offset: 33632},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1019, col: 1, offset: 33786},
			expr: &choiceExpr{
				pos: position{line: 1019, col: 28, offset: 33813},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1019, col: 28, offset: 33813},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1020, col: 15, offset: 33847},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1021, col: 15, offset: 33883},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1022, col: 15, offset: 33919},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1024, col: 1, offset: 33945},
			expr: &choiceExpr{
				pos: position{line: 1024, col: 22, offset: 33966},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1024, col: 22, offset: 33966},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 15, offset: 33997},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1026, col: 15, offset: 34029},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1027, col: 15, offset: 34061},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 15, offset: 34097},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1029, col: 15, offset: 34133},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1031, col: 1, offset: 34157},
			expr: &choiceExpr{
				pos: position{line: 1031, col: 33, offset: 34189},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1031, col: 33, offset: 34189},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1031, col: 39, offset: 34195},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1031, col: 39, offset: 34195},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1035, col: 1, offset: 34328},
			expr: &actionExpr{
				pos: position{line: 1035, col: 25, offset: 34352},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1035, col: 25, offset: 34352},
					expr: &litMatcher{
						pos:        position{line: 1035, col: 25, offset: 34352},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1039, col: 1, offset: 34393},
			expr: &actionExpr{
				pos: position{line: 1039, col: 25, offset: 34417},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1039, col: 25, offset: 34417},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1039, col: 25, offset: 34417},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1039, col: 30, offset: 34422},
							expr: &litMatcher{
								pos:        position{line: 1039, col: 30, offset: 34422},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1047, col: 1, offset: 34519},
			expr: &choiceExpr{
				pos: position{line: 1047, col: 13, offset: 34531},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1047, col: 13, offset: 34531},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1047, col: 35, offset: 34553},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1049, col: 1, offset: 34620},
			expr: &actionExpr{
				pos: position{line: 1049, col: 24, offset: 34643},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1049, col: 24, offset: 34643},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1049, col: 24, offset: 34643},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1049, col: 35, offset: 34654},
								expr: &ruleRefExpr{
									pos:  position{line: 1049, col: 36, offset: 34655},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1049, col: 57, offset: 34676},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1049, col: 62, offset: 34681},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1049, col: 72, offset: 34691},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1049, col: 101, offset: 34720},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1053, col: 1, offset: 34812},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1053, col: 32, offset: 34843},
				expr: &ruleRefExpr{
					pos:  position{line: 1053, col: 32, offset: 34843},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1055, col: 1, offset: 34874},
			expr: &actionExpr{
				pos: position{line: 1055, col: 31, offset: 34904},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1055, col: 31, offset: 34904},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1055, col: 31, offset: 34904},
							expr: &litMatcher{
								pos:        position{line: 1055, col: 33, offset: 34906},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1055, col: 39, offset: 34912},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1055, col: 48, offset: 34921},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1055, col: 48, offset: 34921},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1056, col: 11, offset: 34936},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1057, col: 11, offset: 34985},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1057, col: 11, offset: 34985},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1057, col: 19, offset: 34993},
												expr: &ruleRefExpr{
													pos:  position{line: 1057, col: 20, offset: 34994},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1058, col: 11, offset: 35012},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1059, col: 11, offset: 35042},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1060, col: 11, offset: 35065},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1061, col: 11, offset: 35086},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1062, col: 11, offset: 35107},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1063, col: 11, offset: 35131},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1064, col: 11, offset: 35155},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1065, col: 11, offset: 35181},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1066, col: 11, offset: 35210},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1070, col: 1, offset: 35277},
			expr: &choiceExpr{
				pos: position{line: 1071, col: 5, offset: 35321},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1071, col: 5, offset: 35321},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1072, col: 7, offset: 35418},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1072, col: 7, offset: 35418},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1072, col: 7, offset: 35418},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1072, col: 12, offset: 35423},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1076, col: 1, offset: 35586},
			expr: &choiceExpr{
				pos: position{line: 1076, col: 24, offset: 35609},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1076, col: 24, offset: 35609},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1076, col: 24, offset: 35609},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1076, col: 24, offset: 35609},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1076, col: 35, offset: 35620},
										expr: &ruleRefExpr{
											pos:  position{line: 1076, col: 36, offset: 35621},
											name: "LongHandAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1076, col: 59, offset: 35644},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1076, col: 59, offset: 35644},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1076, col: 63, offset: 35648},
											expr: &litMatcher{
												pos:        position{line: 1076, col: 64, offset: 35649},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1076, col: 69, offset: 35654},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1076, col: 79, offset: 35664},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1076, col: 108, offset: 35693},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1076, col: 112, offset: 35697},
									expr: &notExpr{
										pos: position{line: 1076, col: 114, offset: 35699},
										expr: &ruleRefExpr{
											pos:  position{line: 1076, col: 115, offset: 35700},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1078, col: 5, offset: 35899},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1078, col: 5, offset: 35899},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1078, col: 5, offset: 35899},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1078, col: 16, offset: 35910},
										expr: &ruleRefExpr{
											pos:  position{line: 1078, col: 17, offset: 35911},
											name: "LongHandAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1078, col: 38, offset: 35932},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1078, col: 42, offset: 35936},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1078, col: 52, offset: 35946},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1078, col: 52, offset: 35946},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1078, col: 56, offset: 35950},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1078, col: 85, offset: 35979},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1082, col: 1, offset: 36190},
			expr: &seqExpr{
				pos: position{line: 1082, col: 32, offset: 36221},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1082, col: 32, offset: 36221},
						expr: &ruleRefExpr{
							pos:  position{line: 1082, col: 33, offset: 36222},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1082, col: 39, offset: 36228},
						expr: &ruleRefExpr{
							pos:  position{line: 1082, col: 39, offset: 36228},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1084, col: 1, offset: 36257},
			expr: &choiceExpr{
				pos: position{line: 1084, col: 31, offset: 36287},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1084, col: 31, offset: 36287},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1085, col: 11, offset: 36302},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1085, col: 11, offset: 36302},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1085, col: 19, offset: 36310},
								expr: &ruleRefExpr{
									pos:  position{line: 1085, col: 20, offset: 36311},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1086, col: 11, offset: 36329},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1087, col: 11, offset: 36359},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1088, col: 11, offset: 36382},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1088, col: 11, offset: 36382},
								expr: &ruleRefExpr{
									pos:  position{line: 1088, col: 11, offset: 36382},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1088, col: 18, offset: 36389},
								expr: &seqExpr{
									pos: position{line: 1088, col: 19, offset: 36390},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1088, col: 19, offset: 36390},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1088, col: 23, offset: 36394},
											expr: &litMatcher{
												pos:        position{line: 1088, col: 24, offset: 36395},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1089, col: 11, offset: 36411},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1090, col: 11, offset: 36432},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1091, col: 11, offset: 36453},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1092, col: 11, offset: 36477},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1093, col: 11, offset: 36501},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1094, col: 11, offset: 36527},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1095, col: 11, offset: 36556},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1097, col: 1, offset: 36594},
			expr: &choiceExpr{
				pos: position{line: 1098, col: 5, offset: 36638},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1098, col: 5, offset: 36638},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1099, col: 7, offset: 36735},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1099, col: 7, offset: 36735},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1099, col: 7, offset: 36735},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1099, col: 11, offset: 36739},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1103, col: 1, offset: 36902},
			expr: &choiceExpr{
				pos: position{line: 1104, col: 5, offset: 36926},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1104, col: 5, offset: 36926},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1104, col: 5, offset: 36926},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1104, col: 5, offset: 36926},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1104, col: 18, offset: 36939},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1104, col: 40, offset: 36961},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1104, col: 45, offset: 36966},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1104, col: 55, offset: 36976},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1104, col: 84, offset: 37005},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1106, col: 9, offset: 37162},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1106, col: 9, offset: 37162},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1106, col: 9, offset: 37162},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 22, offset: 37175},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1106, col: 44, offset: 37197},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1106, col: 49, offset: 37202},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 59, offset: 37212},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1106, col: 88, offset: 37241},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1109, col: 9, offset: 37441},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1109, col: 9, offset: 37441},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1109, col: 9, offset: 37441},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 22, offset: 37454},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1109, col: 44, offset: 37476},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1109, col: 48, offset: 37480},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 58, offset: 37490},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1109, col: 87, offset: 37519},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1117, col: 1, offset: 37727},
			expr: &choiceExpr{
				pos: position{line: 1117, col: 15, offset: 37741},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1117, col: 15, offset: 37741},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1117, col: 39, offset: 37765},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1119, col: 1, offset: 37788},
			expr: &actionExpr{
				pos: position{line: 1119, col: 26, offset: 37813},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1119, col: 26, offset: 37813},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1119, col: 26, offset: 37813},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1119, col: 37, offset: 37824},
								expr: &ruleRefExpr{
									pos:  position{line: 1119, col: 38, offset: 37825},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1119, col: 59, offset: 37846},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1119, col: 64, offset: 37851},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1119, col: 74, offset: 37861},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1119, col: 105, offset: 37892},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1123, col: 1, offset: 38031},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1123, col: 34, offset: 38064},
				expr: &ruleRefExpr{
					pos:  position{line: 1123, col: 34, offset: 38064},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1125, col: 1, offset: 38096},
			expr: &actionExpr{
				pos: position{line: 1125, col: 33, offset: 38128},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1125, col: 33, offset: 38128},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1125, col: 33, offset: 38128},
							expr: &litMatcher{
								pos:        position{line: 1125, col: 35, offset: 38130},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1125, col: 41, offset: 38136},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1125, col: 50, offset: 38145},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1125, col: 50, offset: 38145},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1126, col: 11, offset: 38160},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1127, col: 11, offset: 38209},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1127, col: 11, offset: 38209},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1127, col: 19, offset: 38217},
												expr: &ruleRefExpr{
													pos:  position{line: 1127, col: 20, offset: 38218},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1128, col: 11, offset: 38236},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1129, col: 11, offset: 38268},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1130, col: 11, offset: 38291},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1131, col: 11, offset: 38310},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1132, col: 11, offset: 38331},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1133, col: 11, offset: 38355},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1134, col: 11, offset: 38379},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1135, col: 11, offset: 38405},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1136, col: 11, offset: 38434},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1140, col: 1, offset: 38503},
			expr: &choiceExpr{
				pos: position{line: 1141, col: 5, offset: 38549},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1141, col: 5, offset: 38549},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1142, col: 7, offset: 38648},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1142, col: 7, offset: 38648},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1142, col: 7, offset: 38648},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1142, col: 12, offset: 38653},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1146, col: 1, offset: 38818},
			expr: &choiceExpr{
				pos: position{line: 1146, col: 26, offset: 38843},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1146, col: 26, offset: 38843},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1146, col: 26, offset: 38843},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1146, col: 26, offset: 38843},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1146, col: 37, offset: 38854},
										expr: &ruleRefExpr{
											pos:  position{line: 1146, col: 38, offset: 38855},
											name: "LongHandAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1146, col: 60, offset: 38877},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1146, col: 60, offset: 38877},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1146, col: 64, offset: 38881},
											expr: &litMatcher{
												pos:        position{line: 1146, col: 65, offset: 38882},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1146, col: 70, offset: 38887},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1146, col: 80, offset: 38897},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1146, col: 111, offset: 38928},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1148, col: 5, offset: 39123},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1148, col: 5, offset: 39123},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1148, col: 5, offset: 39123},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1148, col: 16, offset: 39134},
										expr: &ruleRefExpr{
											pos:  position{line: 1148, col: 17, offset: 39135},
											name: "LongHandAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1148, col: 38, offset: 39156},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1148, col: 42, offset: 39160},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1148, col: 52, offset: 39170},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1148, col: 52, offset: 39170},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1148, col: 56, offset: 39174},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1148, col: 87, offset: 39205},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1152, col: 1, offset: 39420},
			expr: &seqExpr{
				pos: position{line: 1152, col: 34, offset: 39453},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1152, col: 34, offset: 39453},
						expr: &ruleRefExpr{
							pos:  position{line: 1152, col: 35, offset: 39454},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1152, col: 41, offset: 39460},
						expr: &ruleRefExpr{
							pos:  position{line: 1152, col: 41, offset: 39460},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1154, col: 1, offset: 39491},
			expr: &choiceExpr{
				pos: position{line: 1154, col: 33, offset: 39523},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1154, col: 33, offset: 39523},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1155, col: 11, offset: 39538},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1155, col: 11, offset: 39538},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1155, col: 19, offset: 39546},
								expr: &ruleRefExpr{
									pos:  position{line: 1155, col: 20, offset: 39547},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1156, col: 11, offset: 39565},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1157, col: 11, offset: 39597},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1158, col: 11, offset: 39620},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1158, col: 11, offset: 39620},
								expr: &ruleRefExpr{
									pos:  position{line: 1158, col: 11, offset: 39620},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1158, col: 18, offset: 39627},
								expr: &seqExpr{
									pos: position{line: 1158, col: 19, offset: 39628},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1158, col: 19, offset: 39628},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1158, col: 23, offset: 39632},
											expr: &litMatcher{
												pos:        position{line: 1158, col: 24, offset: 39633},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1159, col: 11, offset: 39649},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1160, col: 11, offset: 39668},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1161, col: 11, offset: 39689},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1162, col: 11, offset: 39713},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1163, col: 11, offset: 39737},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1164, col: 11, offset: 39763},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1165, col: 11, offset: 39792},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1167, col: 1, offset: 39832},
			expr: &choiceExpr{
				pos: position{line: 1168, col: 5, offset: 39878},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1168, col: 5, offset: 39878},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1169, col: 7, offset: 39977},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1169, col: 7, offset: 39977},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1169, col: 7, offset: 39977},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1169, col: 11, offset: 39981},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1173, col: 1, offset: 40147},
			expr: &choiceExpr{
				pos: position{line: 1174, col: 5, offset: 40173},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1174, col: 5, offset: 40173},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1174, col: 5, offset: 40173},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1174, col: 5, offset: 40173},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1174, col: 18, offset: 40186},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1174, col: 40, offset: 40208},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1174, col: 45, offset: 40213},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1174, col: 55, offset: 40223},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1174, col: 86, offset: 40254},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1176, col: 9, offset: 40411},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1176, col: 9, offset: 40411},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1176, col: 9, offset: 40411},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 22, offset: 40424},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1176, col: 44, offset: 40446},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1176, col: 49, offset: 40451},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 59, offset: 40461},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1176, col: 90, offset: 40492},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1179, col: 9, offset: 40692},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1179, col: 9, offset: 40692},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1179, col: 9, offset: 40692},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1179, col: 22, offset: 40705},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1179, col: 44, offset: 40727},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1179, col: 48, offset: 40731},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1179, col: 58, offset: 40741},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1179, col: 89, offset: 40772},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1186, col: 1, offset: 40982},
			expr: &choiceExpr{
				pos: position{line: 1186, col: 18, offset: 40999},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1186, col: 18, offset: 40999},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1186, col: 45, offset: 41026},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1188, col: 1, offset: 41052},
			expr: &actionExpr{
				pos: position{line: 1188, col: 29, offset: 41080},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1188, col: 29, offset: 41080},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1188, col: 29, offset: 41080},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1188, col: 40, offset: 41091},
								expr: &ruleRefExpr{
									pos:  position{line: 1188, col: 41, offset: 41092},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1188, col: 62, offset: 41113},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1188, col: 67, offset: 41118},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1188, col: 77, offset: 41128},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1188, col: 111, offset: 41162},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1192, col: 1, offset: 41304},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1192, col: 37, offset: 41340},
				expr: &ruleRefExpr{
					pos:  position{line: 1192, col: 37, offset: 41340},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1194, col: 1, offset: 41407},
			expr: &actionExpr{
				pos: position{line: 1194, col: 36, offset: 41442},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1194, col: 36, offset: 41442},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1194, col: 36, offset: 41442},
							expr: &litMatcher{
								pos:        position{line: 1194, col: 38, offset: 41444},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1194, col: 44, offset: 41450},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1194, col: 53, offset: 41459},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1194, col: 53, offset: 41459},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1195, col: 11, offset: 41474},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1196, col: 11, offset: 41523},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1196, col: 11, offset: 41523},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1196, col: 19, offset: 41531},
												expr: &ruleRefExpr{
													pos:  position{line: 1196, col: 20, offset: 41532},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1197, col: 11, offset: 41550},
										name: "QuotedString",
									},
									&actionExpr{
										pos: position{line: 1198, col: 11, offset: 41573},
										run: (*parser).callonDoubleQuoteMonospaceTextElement14,
										expr: &ruleRefExpr{
											pos:  position{line: 1198, col: 11, offset: 41573},
											name: "Apostrophe",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1202, col: 11, offset: 41757},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1203, col: 11, offset: 41792},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1204, col: 11, offset: 41811},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1205, col: 11, offset: 41832},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1206, col: 11, offset: 41853},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1207, col: 11, offset: 41877},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1208, col: 11, offset: 41903},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1209, col: 11, offset: 41932},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1213, col: 1, offset: 42004},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 5, offset: 42053},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1214, col: 5, offset: 42053},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1215, col: 7, offset: 42155},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1215, col: 7, offset: 42155},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1215, col: 7, offset: 42155},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1215, col: 12, offset: 42160},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1219, col: 1, offset: 42328},
			expr: &choiceExpr{
				pos: position{line: 1219, col: 29, offset: 42356},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1219, col: 29, offset: 42356},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1219, col: 29, offset: 42356},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1219, col: 29, offset: 42356},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1219, col: 40, offset: 42367},
										expr: &ruleRefExpr{
											pos:  position{line: 1219, col: 41, offset: 42368},
											name: "LongHandAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1219, col: 63, offset: 42390},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1219, col: 63, offset: 42390},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1219, col: 67, offset: 42394},
											expr: &litMatcher{
												pos:        position{line: 1219, col: 68, offset: 42395},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1219, col: 73, offset: 42400},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1219, col: 83, offset: 42410},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1219, col: 117, offset: 42444},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1221, col: 5, offset: 42642},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1221, col: 5, offset: 42642},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1221, col: 5, offset: 42642},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1221, col: 16, offset: 42653},
										expr: &ruleRefExpr{
											pos:  position{line: 1221, col: 17, offset: 42654},
											name: "LongHandAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1221, col: 38, offset: 42675},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1221, col: 42, offset: 42679},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1221, col: 52, offset: 42689},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1221, col: 52, offset: 42689},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1221, col: 56, offset: 42693},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1221, col: 90, offset: 42727},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1225, col: 1, offset: 42946},
			expr: &seqExpr{
				pos: position{line: 1225, col: 37, offset: 42982},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1225, col: 37, offset: 42982},
						expr: &ruleRefExpr{
							pos:  position{line: 1225, col: 38, offset: 42983},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1225, col: 44, offset: 42989},
						expr: &ruleRefExpr{
							pos:  position{line: 1225, col: 44, offset: 42989},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1227, col: 1, offset: 43023},
			expr: &choiceExpr{
				pos: position{line: 1227, col: 37, offset: 43059},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1227, col: 37, offset: 43059},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1228, col: 11, offset: 43074},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1228, col: 11, offset: 43074},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1228, col: 19, offset: 43082},
								expr: &ruleRefExpr{
									pos:  position{line: 1228, col: 20, offset: 43083},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1229, col: 11, offset: 43101},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 11, offset: 43136},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1231, col: 11, offset: 43159},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1231, col: 11, offset: 43159},
								expr: &ruleRefExpr{
									pos:  position{line: 1231, col: 11, offset: 43159},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1231, col: 18, offset: 43166},
								expr: &seqExpr{
									pos: position{line: 1231, col: 19, offset: 43167},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1231, col: 19, offset: 43167},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1231, col: 23, offset: 43171},
											expr: &litMatcher{
												pos:        position{line: 1231, col: 24, offset: 43172},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1232, col: 11, offset: 43300},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1233, col: 11, offset: 43319},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1234, col: 11, offset: 43340},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1235, col: 11, offset: 43361},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1236, col: 11, offset: 43385},
						name: "SuperscriptText",
					},
					&actionExpr{
						pos: position{line: 1237, col: 11, offset: 43411},
						run: (*parser).callonSingleQuoteMonospaceTextElement22,
						expr: &ruleRefExpr{
							pos:  position{line: 1237, col: 11, offset: 43411},
							name: "Apostrophe",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1241, col: 11, offset: 43552},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1242, col: 11, offset: 43581},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1244, col: 1, offset: 43624},
			expr: &choiceExpr{
				pos: position{line: 1245, col: 5, offset: 43673},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1245, col: 5, offset: 43673},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1246, col: 7, offset: 43775},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1246, col: 7, offset: 43775},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1246, col: 7, offset: 43775},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1246, col: 11, offset: 43779},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1250, col: 1, offset: 43948},
			expr: &choiceExpr{
				pos: position{line: 1251, col: 5, offset: 43977},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1251, col: 5, offset: 43977},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1251, col: 5, offset: 43977},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1251, col: 5, offset: 43977},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1251, col: 18, offset: 43990},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1251, col: 40, offset: 44012},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1251, col: 45, offset: 44017},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1251, col: 55, offset: 44027},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1251, col: 89, offset: 44061},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1253, col: 9, offset: 44218},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1253, col: 9, offset: 44218},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1253, col: 9, offset: 44218},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1253, col: 22, offset: 44231},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1253, col: 44, offset: 44253},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1253, col: 49, offset: 44258},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1253, col: 59, offset: 44268},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1253, col: 93, offset: 44302},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1256, col: 9, offset: 44502},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1256, col: 9, offset: 44502},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1256, col: 9, offset: 44502},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1256, col: 22, offset: 44515},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1256, col: 44, offset: 44537},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1256, col: 48, offset: 44541},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1256, col: 58, offset: 44551},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1256, col: 92, offset: 44585},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1264, col: 1, offset: 44910},
			expr: &choiceExpr{
				pos: position{line: 1264, col: 17, offset: 44926},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1264, col: 17, offset: 44926},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1264, col: 38, offset: 44947},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1266, col: 1, offset: 44967},
			expr: &actionExpr{
				pos: position{line: 1266, col: 23, offset: 44989},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1266, col: 23, offset: 44989},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1266, col: 23, offset: 44989},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1266, col: 46, offset: 45012},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1266, col: 55, offset: 45021},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1266, col: 82, offset: 45048},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1270, col: 1, offset: 45152},
			expr: &actionExpr{
				pos: position{line: 1270, col: 31, offset: 45182},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1270, col: 31, offset: 45182},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1270, col: 41, offset: 45192},
						expr: &ruleRefExpr{
							pos:  position{line: 1270, col: 41, offset: 45192},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1274, col: 1, offset: 45270},
			expr: &seqExpr{
				pos: position{line: 1274, col: 27, offset: 45296},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1274, col: 27, offset: 45296},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1274, col: 32, offset: 45301},
						expr: &charClassMatcher{
							pos:        position{line: 1274, col: 33, offset: 45302},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1276, col: 1, offset: 45313},
			expr: &litMatcher{
				pos:        position{line: 1276, col: 25, offset: 45337},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1279, col: 1, offset: 45425},
			expr: &actionExpr{
				pos: position{line: 1279, col: 30, offset: 45454},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1279, col: 30, offset: 45454},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1280, col: 9, offset: 45472},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1280, col: 9, offset: 45472},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1280, col: 9, offset: 45472},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1280, col: 19, offset: 45482},
										expr: &ruleRefExpr{
											pos:  position{line: 1280, col: 20, offset: 45483},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1281, col: 11, offset: 45539},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1281, col: 11, offset: 45539},
										expr: &ruleRefExpr{
											pos:  position{line: 1281, col: 11, offset: 45539},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1281, col: 18, offset: 45546},
										expr: &ruleRefExpr{
											pos:  position{line: 1281, col: 19, offset: 45547},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1282, col: 11, offset: 45578},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1282, col: 11, offset: 45578},
										expr: &litMatcher{
											pos:        position{line: 1282, col: 12, offset: 45579},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1282, col: 16, offset: 45583},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1283, col: 11, offset: 45631},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1284, col: 11, offset: 45650},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1285, col: 11, offset: 45671},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1286, col: 11, offset: 45692},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1287, col: 11, offset: 45716},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1288, col: 11, offset: 45742},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1288, col: 11, offset: 45742},
										expr: &litMatcher{
											pos:        position{line: 1288, col: 12, offset: 45743},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1288, col: 17, offset: 45748},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1289, col: 11, offset: 45772},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1290, col: 11, offset: 45801},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1294, col: 1, offset: 45867},
			expr: &choiceExpr{
				pos: position{line: 1294, col: 41, offset: 45907},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1294, col: 41, offset: 45907},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1294, col: 55, offset: 45921},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1294, col: 55, offset: 45921},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1294, col: 55, offset: 45921},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1294, col: 59, offset: 45925},
									expr: &litMatcher{
										pos:        position{line: 1294, col: 60, offset: 45926},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1298, col: 1, offset: 45985},
			expr: &actionExpr{
				pos: position{line: 1298, col: 23, offset: 46007},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1298, col: 23, offset: 46007},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1298, col: 23, offset: 46007},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1298, col: 46, offset: 46030},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1298, col: 55, offset: 46039},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1298, col: 82, offset: 46066},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1302, col: 1, offset: 46170},
			expr: &actionExpr{
				pos: position{line: 1302, col: 31, offset: 46200},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1302, col: 31, offset: 46200},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1302, col: 41, offset: 46210},
						expr: &ruleRefExpr{
							pos:  position{line: 1302, col: 41, offset: 46210},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1307, col: 1, offset: 46370},
			expr: &actionExpr{
				pos: position{line: 1307, col: 30, offset: 46399},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1307, col: 30, offset: 46399},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1308, col: 9, offset: 46417},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1308, col: 9, offset: 46417},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1308, col: 9, offset: 46417},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1308, col: 19, offset: 46427},
										expr: &ruleRefExpr{
											pos:  position{line: 1308, col: 20, offset: 46428},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1309, col: 11, offset: 46484},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1309, col: 11, offset: 46484},
										expr: &ruleRefExpr{
											pos:  position{line: 1309, col: 11, offset: 46484},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1309, col: 18, offset: 46491},
										expr: &ruleRefExpr{
											pos:  position{line: 1309, col: 19, offset: 46492},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1310, col: 11, offset: 46523},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1311, col: 11, offset: 46542},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1312, col: 11, offset: 46563},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1313, col: 11, offset: 46584},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1314, col: 11, offset: 46608},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1315, col: 11, offset: 46634},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1315, col: 11, offset: 46634},
										expr: &litMatcher{
											pos:        position{line: 1315, col: 12, offset: 46635},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1315, col: 18, offset: 46641},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1316, col: 10, offset: 46664},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1317, col: 11, offset: 46693},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1321, col: 1, offset: 46767},
			expr: &seqExpr{
				pos: position{line: 1321, col: 27, offset: 46793},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1321, col: 27, offset: 46793},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1321, col: 33, offset: 46799},
						expr: &charClassMatcher{
							pos:        position{line: 1321, col: 34, offset: 46800},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1323, col: 1, offset: 46811},
			expr: &litMatcher{
				pos:        position{line: 1323, col: 25, offset: 46835},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1325, col: 1, offset: 46842},
			expr: &actionExpr{
				pos: position{line: 1325, col: 41, offset: 46882},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1325, col: 42, offset: 46883},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1325, col: 42, offset: 46883},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1325, col: 56, offset: 46897},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1325, col: 56, offset: 46897},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1325, col: 60, offset: 46901},
									expr: &litMatcher{
										pos:        position{line: 1325, col: 61, offset: 46902},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1334, col: 1, offset: 47022},
			expr: &choiceExpr{
				pos: position{line: 1334, col: 15, offset: 47036},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1334, col: 15, offset: 47036},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1334, col: 39, offset: 47060},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1336, col: 1, offset: 47083},
			expr: &actionExpr{
				pos: position{line: 1336, col: 26, offset: 47108},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1336, col: 26, offset: 47108},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1336, col: 26, offset: 47108},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1336, col: 37, offset: 47119},
								expr: &ruleRefExpr{
									pos:  position{line: 1336, col: 38, offset: 47120},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1336, col: 59, offset: 47141},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1336, col: 64, offset: 47146},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1336, col: 74, offset: 47156},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1336, col: 105, offset: 47187},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1340, col: 1, offset: 47326},
			expr: &seqExpr{
				pos: position{line: 1340, col: 34, offset: 47359},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1340, col: 34, offset: 47359},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1340, col: 63, offset: 47388},
						expr: &seqExpr{
							pos: position{line: 1340, col: 64, offset: 47389},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1340, col: 64, offset: 47389},
									expr: &litMatcher{
										pos:        position{line: 1340, col: 66, offset: 47391},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1340, col: 73, offset: 47398},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1340, col: 73, offset: 47398},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1340, col: 81, offset: 47406},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1342, col: 1, offset: 47473},
			expr: &choiceExpr{
				pos: position{line: 1342, col: 33, offset: 47505},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1342, col: 33, offset: 47505},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1343, col: 11, offset: 47520},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1344, col: 11, offset: 47552},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1344, col: 11, offset: 47552},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1344, col: 19, offset: 47560},
								expr: &ruleRefExpr{
									pos:  position{line: 1344, col: 20, offset: 47561},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1345, col: 11, offset: 47579},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1346, col: 11, offset: 47602},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1347, col: 11, offset: 47621},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1348, col: 11, offset: 47642},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1349, col: 11, offset: 47666},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1350, col: 11, offset: 47690},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1351, col: 11, offset: 47716},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 11, offset: 47745},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1354, col: 1, offset: 47785},
			expr: &choiceExpr{
				pos: position{line: 1355, col: 5, offset: 47831},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1355, col: 5, offset: 47831},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1356, col: 7, offset: 47930},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1356, col: 7, offset: 47930},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1356, col: 7, offset: 47930},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1356, col: 12, offset: 47935},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1360, col: 1, offset: 48100},
			expr: &choiceExpr{
				pos: position{line: 1360, col: 26, offset: 48125},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1360, col: 26, offset: 48125},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1360, col: 26, offset: 48125},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1360, col: 26, offset: 48125},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1360, col: 37, offset: 48136},
										expr: &ruleRefExpr{
											pos:  position{line: 1360, col: 38, offset: 48137},
											name: "LongHandAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1360, col: 60, offset: 48159},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1360, col: 60, offset: 48159},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1360, col: 64, offset: 48163},
											expr: &litMatcher{
												pos:        position{line: 1360, col: 65, offset: 48164},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1360, col: 70, offset: 48169},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1360, col: 80, offset: 48179},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1360, col: 111, offset: 48210},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1362, col: 5, offset: 48405},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1362, col: 5, offset: 48405},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1362, col: 5, offset: 48405},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1362, col: 16, offset: 48416},
										expr: &ruleRefExpr{
											pos:  position{line: 1362, col: 17, offset: 48417},
											name: "LongHandAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1362, col: 38, offset: 48438},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1362, col: 42, offset: 48442},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1362, col: 52, offset: 48452},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1362, col: 52, offset: 48452},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1362, col: 56, offset: 48456},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1362, col: 87, offset: 48487},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1366, col: 1, offset: 48701},
			expr: &seqExpr{
				pos: position{line: 1366, col: 34, offset: 48734},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1366, col: 34, offset: 48734},
						expr: &ruleRefExpr{
							pos:  position{line: 1366, col: 35, offset: 48735},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1366, col: 41, offset: 48741},
						expr: &ruleRefExpr{
							pos:  position{line: 1366, col: 41, offset: 48741},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1368, col: 1, offset: 48772},
			expr: &choiceExpr{
				pos: position{line: 1368, col: 33, offset: 48804},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1368, col: 33, offset: 48804},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1369, col: 11, offset: 48819},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1370, col: 11, offset: 48851},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1370, col: 11, offset: 48851},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1370, col: 19, offset: 48859},
								expr: &ruleRefExpr{
									pos:  position{line: 1370, col: 20, offset: 48860},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 11, offset: 48878},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1372, col: 11, offset: 48901},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1372, col: 11, offset: 48901},
								expr: &ruleRefExpr{
									pos:  position{line: 1372, col: 11, offset: 48901},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1372, col: 18, offset: 48908},
								expr: &seqExpr{
									pos: position{line: 1372, col: 19, offset: 48909},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1372, col: 19, offset: 48909},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1372, col: 23, offset: 48913},
											expr: &litMatcher{
												pos:        position{line: 1372, col: 24, offset: 48914},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1373, col: 11, offset: 48930},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1374, col: 11, offset: 48949},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1375, col: 11, offset: 48970},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1376, col: 11, offset: 48994},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1377, col: 11, offset: 49018},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1378, col: 11, offset: 49044},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1379, col: 11, offset: 49073},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1381, col: 1, offset: 49113},
			expr: &choiceExpr{
				pos: position{line: 1382, col: 5, offset: 49159},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1382, col: 5, offset: 49159},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1383, col: 7, offset: 49256},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1383, col: 7, offset: 49256},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1383, col: 7, offset: 49256},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1383, col: 11, offset: 49260},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1387, col: 1, offset: 49423},
			expr: &choiceExpr{
				pos: position{line: 1388, col: 5, offset: 49448},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1388, col: 5, offset: 49448},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1388, col: 5, offset: 49448},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1388, col: 5, offset: 49448},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1388, col: 18, offset: 49461},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1388, col: 40, offset: 49483},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1388, col: 45, offset: 49488},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1388, col: 55, offset: 49498},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1388, col: 86, offset: 49529},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1390, col: 9, offset: 49686},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1390, col: 9, offset: 49686},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1390, col: 9, offset: 49686},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1390, col: 22, offset: 49699},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1390, col: 44, offset: 49721},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1390, col: 49, offset: 49726},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1390, col: 59, offset: 49736},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1390, col: 90, offset: 49767},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1393, col: 9, offset: 49967},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1393, col: 9, offset: 49967},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1393, col: 9, offset: 49967},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1393, col: 22, offset: 49980},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1393, col: 44, offset: 50002},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1393, col: 48, offset: 50006},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1393, col: 58, offset: 50016},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1393, col: 89, offset: 50047},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1398, col: 1, offset: 50197},
			expr: &actionExpr{
				pos: position{line: 1398, col: 18, offset: 50214},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1398, col: 18, offset: 50214},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1398, col: 18, offset: 50214},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1398, col: 29, offset: 50225},
								expr: &ruleRefExpr{
									pos:  position{line: 1398, col: 30, offset: 50226},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1398, col: 51, offset: 50247},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1398, col: 55, offset: 50251},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1398, col: 64, offset: 50260},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1398, col: 86, offset: 50282},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1402, col: 1, offset: 50383},
			expr: &choiceExpr{
				pos: position{line: 1402, col: 25, offset: 50407},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1402, col: 25, offset: 50407},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1402, col: 38, offset: 50420},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1404, col: 1, offset: 50439},
			expr: &actionExpr{
				pos: position{line: 1404, col: 21, offset: 50459},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1404, col: 21, offset: 50459},
					expr: &charClassMatcher{
						pos:        position{line: 1404, col: 21, offset: 50459},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1408, col: 1, offset: 50536},
			expr: &actionExpr{
				pos: position{line: 1408, col: 25, offset: 50560},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1408, col: 25, offset: 50560},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1408, col: 25, offset: 50560},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1408, col: 38, offset: 50573},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1408, col: 60, offset: 50595},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1408, col: 64, offset: 50599},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1408, col: 73, offset: 50608},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1408, col: 95, offset: 50630},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1412, col: 1, offset: 50759},
			expr: &actionExpr{
				pos: position{line: 1412, col: 20, offset: 50778},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1412, col: 20, offset: 50778},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1412, col: 20, offset: 50778},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1412, col: 31, offset: 50789},
								expr: &ruleRefExpr{
									pos:  position{line: 1412, col: 32, offset: 50790},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1412, col: 53, offset: 50811},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1412, col: 57, offset: 50815},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1412, col: 66, offset: 50824},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1412, col: 90, offset: 50848},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1416, col: 1, offset: 50951},
			expr: &choiceExpr{
				pos: position{line: 1416, col: 27, offset: 50977},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1416, col: 27, offset: 50977},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1416, col: 40, offset: 50990},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1418, col: 1, offset: 51011},
			expr: &actionExpr{
				pos: position{line: 1418, col: 23, offset: 51033},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1418, col: 23, offset: 51033},
					expr: &charClassMatcher{
						pos:        position{line: 1418, col: 23, offset: 51033},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1422, col: 1, offset: 51110},
			expr: &actionExpr{
				pos: position{line: 1422, col: 27, offset: 51136},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1422, col: 27, offset: 51136},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1422, col: 27, offset: 51136},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1422, col: 40, offset: 51149},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1422, col: 62, offset: 51171},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1422, col: 66, offset: 51175},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1422, col: 75, offset: 51184},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1422, col: 99, offset: 51208},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1429, col: 1, offset: 51450},
			expr: &choiceExpr{
				pos: position{line: 1429, col: 22, offset: 51471},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1429, col: 22, offset: 51471},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1429, col: 46, offset: 51495},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1429, col: 70, offset: 51519},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1431, col: 1, offset: 51537},
			expr: &litMatcher{
				pos:        position{line: 1431, col: 32, offset: 51568},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1433, col: 1, offset: 51573},
			expr: &actionExpr{
				pos: position{line: 1433, col: 26, offset: 51598},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1433, col: 26, offset: 51598},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1433, col: 26, offset: 51598},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1433, col: 54, offset: 51626},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1433, col: 63, offset: 51635},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1433, col: 93, offset: 51665},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1433, col: 121, offset: 51693},
							expr: &ruleRefExpr{
								pos:  position{line: 1433, col: 122, offset: 51694},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1437, col: 1, offset: 51799},
			expr: &choiceExpr{
				pos: position{line: 1437, col: 33, offset: 51831},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1437, col: 34, offset: 51832},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1437, col: 34, offset: 51832},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1437, col: 35, offset: 51833},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1437, col: 35, offset: 51833},
											expr: &ruleRefExpr{
												pos:  position{line: 1437, col: 36, offset: 51834},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1437, col: 64, offset: 51862},
											expr: &ruleRefExpr{
												pos:  position{line: 1437, col: 65, offset: 51863},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1437, col: 71, offset: 51869},
											expr: &ruleRefExpr{
												pos:  position{line: 1437, col: 72, offset: 51870},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1437, col: 80, offset: 51878,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1437, col: 83, offset: 51881},
									expr: &seqExpr{
										pos: position{line: 1437, col: 84, offset: 51882},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1437, col: 84, offset: 51882},
												expr: &seqExpr{
													pos: position{line: 1437, col: 86, offset: 51884},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1437, col: 86, offset: 51884},
															expr: &ruleRefExpr{
																pos:  position{line: 1437, col: 86, offset: 51884},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1437, col: 93, offset: 51891},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1437, col: 122, offset: 51920},
												expr: &ruleRefExpr{
													pos:  position{line: 1437, col: 123, offset: 51921},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1437, col: 151, offset: 51949},
												expr: &ruleRefExpr{
													pos:  position{line: 1437, col: 152, offset: 51950},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1437, col: 160, offset: 51958,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1439, col: 7, offset: 52100},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1439, col: 8, offset: 52101},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1439, col: 8, offset: 52101},
									expr: &ruleRefExpr{
										pos:  position{line: 1439, col: 9, offset: 52102},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1439, col: 15, offset: 52108},
									expr: &ruleRefExpr{
										pos:  position{line: 1439, col: 16, offset: 52109},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1439, col: 24, offset: 52117},
									expr: &ruleRefExpr{
										pos:  position{line: 1439, col: 25, offset: 52118},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1439, col: 53, offset: 52146,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1443, col: 1, offset: 52228},
			expr: &litMatcher{
				pos:        position{line: 1443, col: 32, offset: 52259},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1445, col: 1, offset: 52266},
			expr: &actionExpr{
				pos: position{line: 1445, col: 26, offset: 52291},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1445, col: 26, offset: 52291},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1445, col: 26, offset: 52291},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1445, col: 54, offset: 52319},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1445, col: 63, offset: 52328},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1445, col: 93, offset: 52358},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1445, col: 121, offset: 52386},
							expr: &ruleRefExpr{
								pos:  position{line: 1445, col: 122, offset: 52387},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1449, col: 1, offset: 52492},
			expr: &choiceExpr{
				pos: position{line: 1449, col: 33, offset: 52524},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1449, col: 34, offset: 52525},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1449, col: 34, offset: 52525},
							expr: &seqExpr{
								pos: position{line: 1449, col: 35, offset: 52526},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1449, col: 35, offset: 52526},
										expr: &ruleRefExpr{
											pos:  position{line: 1449, col: 36, offset: 52527},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1449, col: 64, offset: 52555,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1451, col: 7, offset: 52720},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1451, col: 7, offset: 52720},
							expr: &seqExpr{
								pos: position{line: 1451, col: 8, offset: 52721},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1451, col: 8, offset: 52721},
										expr: &ruleRefExpr{
											pos:  position{line: 1451, col: 9, offset: 52722},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1451, col: 15, offset: 52728},
										expr: &ruleRefExpr{
											pos:  position{line: 1451, col: 16, offset: 52729},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1451, col: 24, offset: 52737},
										expr: &ruleRefExpr{
											pos:  position{line: 1451, col: 25, offset: 52738},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1451, col: 53, offset: 52766,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1455, col: 1, offset: 52849},
			expr: &choiceExpr{
				pos: position{line: 1455, col: 21, offset: 52869},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1455, col: 21, offset: 52869},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1455, col: 21, offset: 52869},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1455, col: 21, offset: 52869},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1455, col: 30, offset: 52878},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1455, col: 38, offset: 52886},
										expr: &ruleRefExpr{
											pos:  position{line: 1455, col: 39, offset: 52887},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1455, col: 67, offset: 52915},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1457, col: 5, offset: 53011},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1457, col: 5, offset: 53011},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1457, col: 5, offset: 53011},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1457, col: 15, offset: 53021},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1457, col: 23, offset: 53029},
										expr: &choiceExpr{
											pos: position{line: 1457, col: 24, offset: 53030},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1457, col: 24, offset: 53030},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1457, col: 37, offset: 53043},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1457, col: 65, offset: 53071},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1461, col: 1, offset: 53167},
			expr: &actionExpr{
				pos: position{line: 1461, col: 30, offset: 53196},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1461, col: 30, offset: 53196},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1468, col: 1, offset: 53369},
			expr: &choiceExpr{
				pos: position{line: 1468, col: 19, offset: 53387},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1468, col: 19, offset: 53387},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1468, col: 44, offset: 53412},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1470, col: 1, offset: 53437},
			expr: &choiceExpr{
				pos: position{line: 1470, col: 27, offset: 53463},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1470, col: 27, offset: 53463},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1470, col: 27, offset: 53463},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1470, col: 27, offset: 53463},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1470, col: 32, offset: 53468},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1470, col: 36, offset: 53472},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1470, col: 40, offset: 53476},
									expr: &ruleRefExpr{
										pos:  position{line: 1470, col: 40, offset: 53476},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1470, col: 47, offset: 53483},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1470, col: 51, offset: 53487},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1470, col: 58, offset: 53494},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1470, col: 79, offset: 53515},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1472, col: 5, offset: 53580},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1472, col: 5, offset: 53580},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1472, col: 5, offset: 53580},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1472, col: 10, offset: 53585},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1472, col: 14, offset: 53589},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 1472, col: 18, offset: 53593},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1476, col: 1, offset: 53656},
			expr: &actionExpr{
				pos: position{line: 1476, col: 27, offset: 53682},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1476, col: 27, offset: 53682},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1476, col: 27, offset: 53682},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1476, col: 35, offset: 53690},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1476, col: 40, offset: 53695},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1476, col: 54, offset: 53709},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1476, col: 72, offset: 53727},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1480, col: 1, offset: 53852},
			expr: &oneOrMoreExpr{
				pos: position{line: 1480, col: 24, offset: 53875},
				expr: &choiceExpr{
					pos: position{line: 1481, col: 5, offset: 53881},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 1481, col: 6, offset: 53882},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &seqExpr{
								pos: position{line: 1481, col: 6, offset: 53882},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 1481, col: 6, offset: 53882},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 1481, col: 14, offset: 53890},
										expr: &charClassMatcher{
											pos:        position{line: 1481, col: 14, offset: 53890},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1484, col: 5, offset: 54085},
							name: "AttrSub",
						},
						&actionExpr{
							pos: position{line: 1485, col: 6, offset: 54100},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 1485, col: 6, offset: 54100},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1493, col: 1, offset: 54277},
			expr: &choiceExpr{
				pos: position{line: 1493, col: 9, offset: 54285},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1493, col: 9, offset: 54285},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1493, col: 24, offset: 54300},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1496, col: 1, offset: 54381},
			expr: &actionExpr{
				pos: position{line: 1496, col: 17, offset: 54397},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1496, col: 17, offset: 54397},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1496, col: 17, offset: 54397},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1496, col: 25, offset: 54405},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1496, col: 30, offset: 54410},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1496, col: 40, offset: 54420},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1496, col: 58, offset: 54438},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1500, col: 1, offset: 54551},
			expr: &actionExpr{
				pos: position{line: 1500, col: 17, offset: 54567},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1500, col: 17, offset: 54567},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1500, col: 17, offset: 54567},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1500, col: 22, offset: 54572},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1500, col: 42, offset: 54592},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1500, col: 59, offset: 54609},
								expr: &ruleRefExpr{
									pos:  position{line: 1500, col: 60, offset: 54610},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1507, col: 1, offset: 54807},
			expr: &actionExpr{
				pos: position{line: 1508, col: 5, offset: 54826},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1508, col: 5, offset: 54826},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1508, col: 5, offset: 54826},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1508, col: 16, offset: 54837},
								expr: &ruleRefExpr{
									pos:  position{line: 1508, col: 17, offset: 54838},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1509, col: 5, offset: 54861},
							run: (*parser).callonImageBlock6,
						},
						&litMatcher{
							pos:        position{line: 1513, col: 5, offset: 54994},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1513, col: 15, offset: 55004},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1513, col: 21, offset: 55010},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1513, col: 31, offset: 55020},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1513, col: 49, offset: 55038},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1513, col: 67, offset: 55056},
							expr: &ruleRefExpr{
								pos:  position{line: 1513, col: 67, offset: 55056},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1513, col: 74, offset: 55063},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1518, col: 1, offset: 55278},
			expr: &actionExpr{
				pos: position{line: 1518, col: 16, offset: 55293},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1518, col: 16, offset: 55293},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1518, col: 16, offset: 55293},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1518, col: 25, offset: 55302},
							expr: &litMatcher{
								pos:        position{line: 1518, col: 26, offset: 55303},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1518, col: 30, offset: 55307},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1518, col: 36, offset: 55313},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1518, col: 46, offset: 55323},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1518, col: 64, offset: 55341},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1525, col: 1, offset: 55676},
			expr: &actionExpr{
				pos: position{line: 1525, col: 15, offset: 55690},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1525, col: 15, offset: 55690},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1525, col: 15, offset: 55690},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1525, col: 23, offset: 55698},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1525, col: 29, offset: 55704},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1525, col: 29, offset: 55704},
									expr: &charClassMatcher{
										pos:        position{line: 1525, col: 29, offset: 55704},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1525, col: 73, offset: 55748},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1525, col: 85, offset: 55760},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1532, col: 1, offset: 56032},
			expr: &choiceExpr{
				pos: position{line: 1532, col: 19, offset: 56050},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1532, col: 19, offset: 56050},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1532, col: 19, offset: 56050},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1532, col: 19, offset: 56050},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1532, col: 32, offset: 56063},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1532, col: 41, offset: 56072},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1532, col: 58, offset: 56089},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1534, col: 5, offset: 56157},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1534, col: 5, offset: 56157},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1534, col: 5, offset: 56157},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1534, col: 17, offset: 56169},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1534, col: 22, offset: 56174},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1534, col: 35, offset: 56187},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1534, col: 39, offset: 56191},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1534, col: 47, offset: 56199},
										expr: &ruleRefExpr{
											pos:  position{line: 1534, col: 48, offset: 56200},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1534, col: 66, offset: 56218},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1538, col: 1, offset: 56279},
			expr: &ruleRefExpr{
				pos:  position{line: 1538, col: 16, offset: 56294},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1540, col: 1, offset: 56305},
			expr: &actionExpr{
				pos: position{line: 1540, col: 20, offset: 56324},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1540, col: 20, offset: 56324},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1540, col: 29, offset: 56333},
						expr: &seqExpr{
							pos: position{line: 1540, col: 30, offset: 56334},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1540, col: 30, offset: 56334},
									expr: &litMatcher{
										pos:        position{line: 1540, col: 31, offset: 56335},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1540, col: 35, offset: 56339},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1548, col: 1, offset: 56655},
			expr: &actionExpr{
				pos: position{line: 1548, col: 12, offset: 56666},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1548, col: 12, offset: 56666},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1548, col: 12, offset: 56666},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1548, col: 16, offset: 56670},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1548, col: 21, offset: 56675},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1548, col: 21, offset: 56675},
									expr: &charClassMatcher{
										pos:        position{line: 1548, col: 21, offset: 56675},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1548, col: 69, offset: 56723},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1548, col: 73, offset: 56727},
							expr: &ruleRefExpr{
								pos:  position{line: 1548, col: 73, offset: 56727},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1548, col: 80, offset: 56734},
							expr: &choiceExpr{
								pos: position{line: 1548, col: 82, offset: 56736},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1548, col: 82, offset: 56736},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1548, col: 88, offset: 56742},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1552, col: 1, offset: 56795},
			expr: &actionExpr{
				pos: position{line: 1552, col: 20, offset: 56814},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1552, col: 20, offset: 56814},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1552, col: 20, offset: 56814},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1552, col: 25, offset: 56819},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1552, col: 48, offset: 56842},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1552, col: 61, offset: 56855},
								expr: &ruleRefExpr{
									pos:  position{line: 1552, col: 61, offset: 56855},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1556, col: 1, offset: 56952},
			expr: &actionExpr{
				pos: position{line: 1556, col: 26, offset: 56977},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1556, col: 26, offset: 56977},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1556, col: 26, offset: 56977},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1556, col: 30, offset: 56981},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1556, col: 35, offset: 56986},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1556, col: 35, offset: 56986},
									expr: &charClassMatcher{
										pos:        position{line: 1556, col: 35, offset: 56986},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1556, col: 83, offset: 57034},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1556, col: 87, offset: 57038},
							expr: &ruleRefExpr{
								pos:  position{line: 1556, col: 87, offset: 57038},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1565, col: 1, offset: 57285},
			expr: &actionExpr{
				pos: position{line: 1565, col: 18, offset: 57302},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1565, col: 18, offset: 57302},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1565, col: 19, offset: 57303},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1565, col: 19, offset: 57303},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1565, col: 27, offset: 57311},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1565, col: 37, offset: 57321},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1565, col: 45, offset: 57329},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1565, col: 55, offset: 57339},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1565, col: 63, offset: 57347},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1565, col: 72, offset: 57356},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1575, col: 1, offset: 57606},
			expr: &actionExpr{
				pos: position{line: 1575, col: 19, offset: 57624},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1575, col: 19, offset: 57624},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1575, col: 19, offset: 57624},
							expr: &ruleRefExpr{
								pos:  position{line: 1575, col: 20, offset: 57625},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1576, col: 5, offset: 57713},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1576, col: 12, offset: 57720},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1576, col: 12, offset: 57720},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1577, col: 11, offset: 57743},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1578, col: 11, offset: 57767},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1579, col: 11, offset: 57791},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1580, col: 11, offset: 57812},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1581, col: 11, offset: 57833},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1582, col: 11, offset: 57856},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1583, col: 11, offset: 57883},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1587, col: 1, offset: 57924},
			expr: &choiceExpr{
				pos: position{line: 1587, col: 19, offset: 57942},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1587, col: 19, offset: 57942},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1587, col: 19, offset: 57942},
								expr: &ruleRefExpr{
									pos:  position{line: 1587, col: 21, offset: 57944},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1587, col: 31, offset: 57954},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1588, col: 19, offset: 58025},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1589, col: 19, offset: 58065},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1590, col: 19, offset: 58106},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1591, col: 19, offset: 58147},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1592, col: 19, offset: 58188},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1593, col: 19, offset: 58226},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1594, col: 19, offset: 58266},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1599, col: 1, offset: 58489},
			expr: &actionExpr{
				pos: position{line: 1599, col: 17, offset: 58505},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1599, col: 17, offset: 58505},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1599, col: 17, offset: 58505},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1599, col: 28, offset: 58516},
								expr: &ruleRefExpr{
									pos:  position{line: 1599, col: 29, offset: 58517},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1599, col: 47, offset: 58535},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1599, col: 74, offset: 58562},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 1599, col: 82, offset: 58570},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1599, col: 106, offset: 58594},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1603, col: 1, offset: 58693},
			expr: &seqExpr{
				pos: position{line: 1603, col: 26, offset: 58718},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1603, col: 26, offset: 58718},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1603, col: 33, offset: 58725},
						expr: &ruleRefExpr{
							pos:  position{line: 1603, col: 33, offset: 58725},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1603, col: 40, offset: 58732},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1605, col: 1, offset: 58737},
			expr: &seqExpr{
				pos: position{line: 1605, col: 31, offset: 58767},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1605, col: 31, offset: 58767},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1605, col: 38, offset: 58774},
						expr: &ruleRefExpr{
							pos:  position{line: 1605, col: 38, offset: 58774},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1605, col: 45, offset: 58781},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1607, col: 1, offset: 58786},
			expr: &choiceExpr{
				pos: position{line: 1607, col: 29, offset: 58814},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1607, col: 30, offset: 58815},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1607, col: 30, offset: 58815},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1607, col: 37, offset: 58822},
								expr: &ruleRefExpr{
									pos:  position{line: 1607, col: 37, offset: 58822},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1607, col: 44, offset: 58829},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1607, col: 51, offset: 58836},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1609, col: 1, offset: 58841},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1609, col: 27, offset: 58867},
				expr: &actionExpr{
					pos: position{line: 1610, col: 8, offset: 58876},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1610, col: 8, offset: 58876},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1610, col: 8, offset: 58876},
								expr: &ruleRefExpr{
									pos:  position{line: 1610, col: 9, offset: 58877},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1611, col: 8, offset: 58910},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1611, col: 17, offset: 58919},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1611, col: 17, offset: 58919},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1612, col: 15, offset: 58943},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1613, col: 15, offset: 58968},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1614, col: 15, offset: 58996},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1615, col: 15, offset: 59027},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1616, col: 15, offset: 59060},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1617, col: 15, offset: 59091},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1618, col: 15, offset: 59130},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1619, col: 15, offset: 59157},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1620, col: 15, offset: 59185},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1621, col: 15, offset: 59210},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1622, col: 15, offset: 59235},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1623, col: 15, offset: 59262},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1624, col: 15, offset: 59294},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1625, col: 15, offset: 59325},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1626, col: 15, offset: 59345},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1627, col: 15, offset: 59372},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1628, col: 15, offset: 59400},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1629, col: 15, offset: 59427},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1636, col: 1, offset: 59683},
			expr: &actionExpr{
				pos: position{line: 1636, col: 15, offset: 59697},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1636, col: 15, offset: 59697},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1636, col: 15, offset: 59697},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1636, col: 26, offset: 59708},
								expr: &ruleRefExpr{
									pos:  position{line: 1636, col: 27, offset: 59709},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1637, col: 5, offset: 59732},
							run: (*parser).callonQuoteBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1645, col: 5, offset: 60042},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1645, col: 30, offset: 60067},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1645, col: 39, offset: 60076},
								name: "QuoteBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1645, col: 61, offset: 60098},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1649, col: 1, offset: 60202},
			expr: &seqExpr{
				pos: position{line: 1649, col: 24, offset: 60225},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1649, col: 24, offset: 60225},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1649, col: 31, offset: 60232},
						expr: &ruleRefExpr{
							pos:  position{line: 1649, col: 31, offset: 60232},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1649, col: 38, offset: 60239},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1651, col: 1, offset: 60269},
			expr: &seqExpr{
				pos: position{line: 1651, col: 29, offset: 60297},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1651, col: 29, offset: 60297},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1651, col: 36, offset: 60304},
						expr: &ruleRefExpr{
							pos:  position{line: 1651, col: 36, offset: 60304},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1651, col: 43, offset: 60311},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1653, col: 1, offset: 60341},
			expr: &choiceExpr{
				pos: position{line: 1653, col: 27, offset: 60367},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1653, col: 28, offset: 60368},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1653, col: 28, offset: 60368},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1653, col: 35, offset: 60375},
								expr: &ruleRefExpr{
									pos:  position{line: 1653, col: 35, offset: 60375},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1653, col: 42, offset: 60382},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1653, col: 49, offset: 60389},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlockRawContent",
			pos:  position{line: 1655, col: 1, offset: 60419},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1655, col: 25, offset: 60443},
				expr: &actionExpr{
					pos: position{line: 1656, col: 8, offset: 60452},
					run: (*parser).callonQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1656, col: 8, offset: 60452},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1656, col: 8, offset: 60452},
								expr: &ruleRefExpr{
									pos:  position{line: 1656, col: 9, offset: 60453},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1657, col: 8, offset: 60484},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1657, col: 17, offset: 60493},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1657, col: 17, offset: 60493},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1658, col: 15, offset: 60517},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1659, col: 15, offset: 60542},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1660, col: 15, offset: 60570},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1661, col: 15, offset: 60601},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1662, col: 15, offset: 60634},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1663, col: 15, offset: 60665},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1664, col: 15, offset: 60704},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1665, col: 15, offset: 60731},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1666, col: 15, offset: 60759},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1667, col: 15, offset: 60784},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1668, col: 15, offset: 60811},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1669, col: 15, offset: 60838},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1670, col: 15, offset: 60870},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1671, col: 15, offset: 60901},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1672, col: 15, offset: 60921},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1673, col: 15, offset: 60948},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1674, col: 15, offset: 60976},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1675, col: 15, offset: 61003},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1682, col: 1, offset: 61261},
			expr: &actionExpr{
				pos: position{line: 1682, col: 17, offset: 61277},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1682, col: 17, offset: 61277},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1682, col: 17, offset: 61277},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1682, col: 28, offset: 61288},
								expr: &ruleRefExpr{
									pos:  position{line: 1682, col: 29, offset: 61289},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1682, col: 47, offset: 61307},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1682, col: 74, offset: 61334},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1682, col: 83, offset: 61343},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1682, col: 107, offset: 61367},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1686, col: 1, offset: 61467},
			expr: &seqExpr{
				pos: position{line: 1686, col: 26, offset: 61492},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1686, col: 26, offset: 61492},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1686, col: 33, offset: 61499},
						expr: &ruleRefExpr{
							pos:  position{line: 1686, col: 33, offset: 61499},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1686, col: 40, offset: 61506},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1688, col: 1, offset: 61511},
			expr: &seqExpr{
				pos: position{line: 1688, col: 31, offset: 61541},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1688, col: 31, offset: 61541},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1688, col: 38, offset: 61548},
						expr: &ruleRefExpr{
							pos:  position{line: 1688, col: 38, offset: 61548},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1688, col: 45, offset: 61555},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1690, col: 1, offset: 61560},
			expr: &choiceExpr{
				pos: position{line: 1690, col: 29, offset: 61588},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1690, col: 30, offset: 61589},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1690, col: 30, offset: 61589},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1690, col: 37, offset: 61596},
								expr: &ruleRefExpr{
									pos:  position{line: 1690, col: 37, offset: 61596},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1690, col: 44, offset: 61603},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1690, col: 51, offset: 61610},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1692, col: 1, offset: 61615},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1692, col: 27, offset: 61641},
				expr: &actionExpr{
					pos: position{line: 1693, col: 8, offset: 61650},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1693, col: 8, offset: 61650},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1693, col: 8, offset: 61650},
								expr: &ruleRefExpr{
									pos:  position{line: 1693, col: 9, offset: 61651},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1694, col: 8, offset: 61684},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1694, col: 17, offset: 61693},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1694, col: 17, offset: 61693},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1695, col: 15, offset: 61717},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1696, col: 15, offset: 61742},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1697, col: 15, offset: 61770},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1698, col: 15, offset: 61801},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1699, col: 15, offset: 61834},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1700, col: 15, offset: 61865},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1701, col: 15, offset: 61904},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1702, col: 15, offset: 61931},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1703, col: 15, offset: 61958},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1704, col: 15, offset: 61984},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1705, col: 15, offset: 62011},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1706, col: 15, offset: 62036},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1707, col: 15, offset: 62068},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1708, col: 15, offset: 62099},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1709, col: 15, offset: 62119},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1710, col: 15, offset: 62146},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1711, col: 15, offset: 62174},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1712, col: 15, offset: 62201},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1719, col: 1, offset: 62458},
			expr: &actionExpr{
				pos: position{line: 1719, col: 16, offset: 62473},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1719, col: 16, offset: 62473},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1719, col: 16, offset: 62473},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1719, col: 27, offset: 62484},
								expr: &ruleRefExpr{
									pos:  position{line: 1719, col: 28, offset: 62485},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1719, col: 46, offset: 62503},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1719, col: 72, offset: 62529},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1719, col: 81, offset: 62538},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1719, col: 104, offset: 62561},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1723, col: 1, offset: 62659},
			expr: &seqExpr{
				pos: position{line: 1723, col: 25, offset: 62683},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1723, col: 25, offset: 62683},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1723, col: 31, offset: 62689},
						expr: &ruleRefExpr{
							pos:  position{line: 1723, col: 31, offset: 62689},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1723, col: 38, offset: 62696},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1725, col: 1, offset: 62756},
			expr: &seqExpr{
				pos: position{line: 1725, col: 30, offset: 62785},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1725, col: 30, offset: 62785},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1725, col: 36, offset: 62791},
						expr: &ruleRefExpr{
							pos:  position{line: 1725, col: 36, offset: 62791},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1725, col: 43, offset: 62798},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1727, col: 1, offset: 62803},
			expr: &choiceExpr{
				pos: position{line: 1727, col: 28, offset: 62830},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1727, col: 29, offset: 62831},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1727, col: 29, offset: 62831},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1727, col: 35, offset: 62837},
								expr: &ruleRefExpr{
									pos:  position{line: 1727, col: 35, offset: 62837},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1727, col: 42, offset: 62844},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1727, col: 49, offset: 62851},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1729, col: 1, offset: 62856},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1729, col: 26, offset: 62881},
				expr: &actionExpr{
					pos: position{line: 1729, col: 27, offset: 62882},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1729, col: 27, offset: 62882},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1729, col: 27, offset: 62882},
								expr: &ruleRefExpr{
									pos:  position{line: 1729, col: 28, offset: 62883},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1729, col: 52, offset: 62907},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1729, col: 58, offset: 62913},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1736, col: 1, offset: 63147},
			expr: &actionExpr{
				pos: position{line: 1736, col: 17, offset: 63163},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1736, col: 17, offset: 63163},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1736, col: 17, offset: 63163},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1736, col: 28, offset: 63174},
								expr: &ruleRefExpr{
									pos:  position{line: 1736, col: 29, offset: 63175},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1736, col: 47, offset: 63193},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1736, col: 74, offset: 63220},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1736, col: 83, offset: 63229},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1736, col: 107, offset: 63253},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1740, col: 1, offset: 63353},
			expr: &seqExpr{
				pos: position{line: 1740, col: 26, offset: 63378},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1740, col: 26, offset: 63378},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1740, col: 33, offset: 63385},
						expr: &ruleRefExpr{
							pos:  position{line: 1740, col: 33, offset: 63385},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1740, col: 40, offset: 63392},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1742, col: 1, offset: 63397},
			expr: &seqExpr{
				pos: position{line: 1742, col: 31, offset: 63427},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1742, col: 31, offset: 63427},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1742, col: 38, offset: 63434},
						expr: &ruleRefExpr{
							pos:  position{line: 1742, col: 38, offset: 63434},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1742, col: 45, offset: 63441},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1744, col: 1, offset: 63446},
			expr: &choiceExpr{
				pos: position{line: 1744, col: 29, offset: 63474},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1744, col: 30, offset: 63475},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1744, col: 30, offset: 63475},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1744, col: 37, offset: 63482},
								expr: &ruleRefExpr{
									pos:  position{line: 1744, col: 37, offset: 63482},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1744, col: 44, offset: 63489},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1744, col: 51, offset: 63496},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1746, col: 1, offset: 63501},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1746, col: 27, offset: 63527},
				expr: &actionExpr{
					pos: position{line: 1746, col: 28, offset: 63528},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1746, col: 28, offset: 63528},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1746, col: 28, offset: 63528},
								expr: &ruleRefExpr{
									pos:  position{line: 1746, col: 29, offset: 63529},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1746, col: 54, offset: 63554},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1746, col: 60, offset: 63560},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1753, col: 1, offset: 63792},
			expr: &actionExpr{
				pos: position{line: 1753, col: 15, offset: 63806},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1753, col: 15, offset: 63806},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1753, col: 15, offset: 63806},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1753, col: 26, offset: 63817},
								expr: &ruleRefExpr{
									pos:  position{line: 1753, col: 27, offset: 63818},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1754, col: 5, offset: 63841},
							run: (*parser).callonVerseBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1758, col: 5, offset: 64002},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1758, col: 30, offset: 64027},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1758, col: 39, offset: 64036},
								name: "VerseBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1758, col: 61, offset: 64058},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockRawContent",
			pos:  position{line: 1762, col: 1, offset: 64162},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1762, col: 25, offset: 64186},
				expr: &actionExpr{
					pos: position{line: 1762, col: 26, offset: 64187},
					run: (*parser).callonVerseBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1762, col: 26, offset: 64187},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1762, col: 26, offset: 64187},
								expr: &ruleRefExpr{
									pos:  position{line: 1762, col: 27, offset: 64188},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1762, col: 50, offset: 64211},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1762, col: 56, offset: 64217},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1769, col: 1, offset: 64455},
			expr: &actionExpr{
				pos: position{line: 1769, col: 21, offset: 64475},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1769, col: 21, offset: 64475},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1769, col: 21, offset: 64475},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1769, col: 32, offset: 64486},
								expr: &ruleRefExpr{
									pos:  position{line: 1769, col: 33, offset: 64487},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1769, col: 51, offset: 64505},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1769, col: 82, offset: 64536},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1769, col: 91, offset: 64545},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1769, col: 119, offset: 64573},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1773, col: 1, offset: 64681},
			expr: &seqExpr{
				pos: position{line: 1773, col: 30, offset: 64710},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1773, col: 30, offset: 64710},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1773, col: 37, offset: 64717},
						expr: &ruleRefExpr{
							pos:  position{line: 1773, col: 37, offset: 64717},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1773, col: 44, offset: 64724},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1775, col: 1, offset: 64729},
			expr: &seqExpr{
				pos: position{line: 1775, col: 35, offset: 64763},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1775, col: 35, offset: 64763},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1775, col: 42, offset: 64770},
						expr: &ruleRefExpr{
							pos:  position{line: 1775, col: 42, offset: 64770},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1775, col: 49, offset: 64777},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1777, col: 1, offset: 64782},
			expr: &choiceExpr{
				pos: position{line: 1777, col: 33, offset: 64814},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1777, col: 34, offset: 64815},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1777, col: 34, offset: 64815},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1777, col: 41, offset: 64822},
								expr: &ruleRefExpr{
									pos:  position{line: 1777, col: 41, offset: 64822},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1777, col: 48, offset: 64829},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1777, col: 55, offset: 64836},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1779, col: 1, offset: 64841},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1779, col: 31, offset: 64871},
				expr: &actionExpr{
					pos: position{line: 1779, col: 32, offset: 64872},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1779, col: 32, offset: 64872},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1779, col: 32, offset: 64872},
								expr: &ruleRefExpr{
									pos:  position{line: 1779, col: 33, offset: 64873},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1779, col: 62, offset: 64902},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1779, col: 68, offset: 64908},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1786, col: 1, offset: 65142},
			expr: &seqExpr{
				pos: position{line: 1786, col: 26, offset: 65167},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1786, col: 26, offset: 65167},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1786, col: 33, offset: 65174},
						expr: &ruleRefExpr{
							pos:  position{line: 1786, col: 33, offset: 65174},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1786, col: 40, offset: 65181},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1788, col: 1, offset: 65186},
			expr: &seqExpr{
				pos: position{line: 1788, col: 31, offset: 65216},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1788, col: 31, offset: 65216},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1788, col: 38, offset: 65223},
						expr: &ruleRefExpr{
							pos:  position{line: 1788, col: 38, offset: 65223},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1788, col: 45, offset: 65230},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1790, col: 1, offset: 65235},
			expr: &choiceExpr{
				pos: position{line: 1790, col: 29, offset: 65263},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1790, col: 30, offset: 65264},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1790, col: 30, offset: 65264},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1790, col: 37, offset: 65271},
								expr: &ruleRefExpr{
									pos:  position{line: 1790, col: 37, offset: 65271},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1790, col: 44, offset: 65278},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1790, col: 51, offset: 65285},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1792, col: 1, offset: 65290},
			expr: &actionExpr{
				pos: position{line: 1792, col: 17, offset: 65306},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1792, col: 17, offset: 65306},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1792, col: 17, offset: 65306},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1792, col: 44, offset: 65333},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1792, col: 53, offset: 65342},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1792, col: 78, offset: 65367},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 1796, col: 1, offset: 65460},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1796, col: 27, offset: 65486},
				expr: &actionExpr{
					pos: position{line: 1796, col: 28, offset: 65487},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1796, col: 28, offset: 65487},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1796, col: 28, offset: 65487},
								expr: &ruleRefExpr{
									pos:  position{line: 1796, col: 29, offset: 65488},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1796, col: 54, offset: 65513},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1796, col: 60, offset: 65519},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1800, col: 1, offset: 65557},
			expr: &actionExpr{
				pos: position{line: 1800, col: 22, offset: 65578},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1800, col: 22, offset: 65578},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1800, col: 22, offset: 65578},
							expr: &ruleRefExpr{
								pos:  position{line: 1800, col: 23, offset: 65579},
								name: "CommentBlockDelimiter",
							},
						},
						&litMatcher{
							pos:        position{line: 1800, col: 45, offset: 65601},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1800, col: 50, offset: 65606},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1800, col: 59, offset: 65615},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1800, col: 85, offset: 65641},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1804, col: 1, offset: 65706},
			expr: &actionExpr{
				pos: position{line: 1804, col: 29, offset: 65734},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1804, col: 29, offset: 65734},
					expr: &charClassMatcher{
						pos:        position{line: 1804, col: 29, offset: 65734},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineMacros",
			pos:  position{line: 1812, col: 1, offset: 66023},
			expr: &choiceExpr{
				pos: position{line: 1812, col: 17, offset: 66039},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1812, col: 17, offset: 66039},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1813, col: 19, offset: 66068},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1814, col: 19, offset: 66099},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1815, col: 19, offset: 66123},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1816, col: 19, offset: 66160},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 1817, col: 19, offset: 66194},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1818, col: 19, offset: 66228},
						name: "InlineUserMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1819, col: 19, offset: 66263},
						name: "InlineElementID",
					},
					&ruleRefExpr{
						pos:  position{line: 1820, col: 19, offset: 66297},
						name: "ConcealedIndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 1821, col: 19, offset: 66334},
						name: "IndexTerm",
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 1823, col: 1, offset: 66345},
			expr: &actionExpr{
				pos: position{line: 1823, col: 23, offset: 66367},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 1823, col: 23, offset: 66367},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1823, col: 23, offset: 66367},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 1823, col: 32, offset: 66376},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1823, col: 37, offset: 66381},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1823, col: 37, offset: 66381},
									expr: &charClassMatcher{
										pos:        position{line: 1823, col: 37, offset: 66381},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1823, col: 76, offset: 66420},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthroughSubs",
			pos:  position{line: 1828, col: 1, offset: 66572},
			expr: &seqExpr{
				pos: position{line: 1829, col: 5, offset: 66602},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1829, col: 5, offset: 66602},
						expr: &choiceExpr{
							pos: position{line: 1829, col: 6, offset: 66603},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1829, col: 6, offset: 66603},
									name: "InlinePassthrough",
								},
								&ruleRefExpr{
									pos:  position{line: 1830, col: 11, offset: 66632},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1831, col: 11, offset: 66693},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1832, col: 11, offset: 66722},
									expr: &ruleRefExpr{
										pos:  position{line: 1832, col: 11, offset: 66722},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1833, col: 11, offset: 66740},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1834, col: 11, offset: 66758},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1834, col: 21, offset: 66768},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SpecialCharacterSubs",
			pos:  position{line: 1837, col: 1, offset: 66889},
			expr: &seqExpr{
				pos: position{line: 1838, col: 5, offset: 66918},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1838, col: 5, offset: 66918},
						expr: &choiceExpr{
							pos: position{line: 1838, col: 6, offset: 66919},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1838, col: 6, offset: 66919},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1839, col: 11, offset: 66980},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 1840, col: 11, offset: 67007},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1841, col: 11, offset: 67036},
									expr: &ruleRefExpr{
										pos:  position{line: 1841, col: 11, offset: 67036},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1842, col: 11, offset: 67053},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1843, col: 11, offset: 67071},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1843, col: 21, offset: 67081},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuotedTextSubs",
			pos:  position{line: 1846, col: 1, offset: 67135},
			expr: &seqExpr{
				pos: position{line: 1847, col: 5, offset: 67158},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1847, col: 5, offset: 67158},
						expr: &choiceExpr{
							pos: position{line: 1847, col: 6, offset: 67159},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1847, col: 6, offset: 67159},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1848, col: 11, offset: 67220},
									expr: &ruleRefExpr{
										pos:  position{line: 1848, col: 11, offset: 67220},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1849, col: 11, offset: 67238},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1850, col: 11, offset: 67260},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1851, col: 11, offset: 67283},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1852, col: 11, offset: 67312},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1853, col: 11, offset: 67330},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1853, col: 21, offset: 67340},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "AttributeSubs",
			pos:  position{line: 1856, col: 1, offset: 67398},
			expr: &seqExpr{
				pos: position{line: 1857, col: 5, offset: 67420},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1857, col: 5, offset: 67420},
						expr: &choiceExpr{
							pos: position{line: 1857, col: 6, offset: 67421},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1857, col: 6, offset: 67421},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1858, col: 11, offset: 67482},
									expr: &ruleRefExpr{
										pos:  position{line: 1858, col: 11, offset: 67482},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1859, col: 11, offset: 67500},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1860, col: 11, offset: 67532},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1861, col: 11, offset: 67561},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1862, col: 11, offset: 67579},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1862, col: 21, offset: 67589},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "InlineMacroSubs",
			pos:  position{line: 1865, col: 1, offset: 67643},
			expr: &seqExpr{
				pos: position{line: 1866, col: 5, offset: 67667},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1866, col: 5, offset: 67667},
						expr: &choiceExpr{
							pos: position{line: 1866, col: 6, offset: 67668},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1866, col: 6, offset: 67668},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1867, col: 11, offset: 67729},
									expr: &ruleRefExpr{
										pos:  position{line: 1867, col: 11, offset: 67729},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1868, col: 11, offset: 67747},
									name: "InlineMacros",
								},
								&ruleRefExpr{
									pos:  position{line: 1869, col: 11, offset: 67770},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1870, col: 11, offset: 67799},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1871, col: 11, offset: 67817},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1871, col: 21, offset: 67827},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "MarkdownQuoteMacroSubs",
			pos:  position{line: 1874, col: 1, offset: 67907},
			expr: &actionExpr{
				pos: position{line: 1874, col: 27, offset: 67933},
				run: (*parser).callonMarkdownQuoteMacroSubs1,
				expr: &seqExpr{
					pos: position{line: 1874, col: 27, offset: 67933},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1874, col: 27, offset: 67933},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1874, col: 33, offset: 67939},
								expr: &ruleRefExpr{
									pos:  position{line: 1874, col: 34, offset: 67940},
									name: "MarkdownQuoteLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1874, col: 54, offset: 67960},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteLine",
			pos:  position{line: 1878, col: 1, offset: 68027},
			expr: &actionExpr{
				pos: position{line: 1879, col: 5, offset: 68053},
				run: (*parser).callonMarkdownQuoteLine1,
				expr: &seqExpr{
					pos: position{line: 1879, col: 5, offset: 68053},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1879, col: 5, offset: 68053},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1879, col: 14, offset: 68062},
								expr: &choiceExpr{
									pos: position{line: 1879, col: 15, offset: 68063},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1879, col: 15, offset: 68063},
											name: "InlineWord",
										},
										&oneOrMoreExpr{
											pos: position{line: 1880, col: 11, offset: 68124},
											expr: &ruleRefExpr{
												pos:  position{line: 1880, col: 11, offset: 68124},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1881, col: 11, offset: 68142},
											name: "InlineMacros",
										},
										&ruleRefExpr{
											pos:  position{line: 1882, col: 11, offset: 68165},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1883, col: 11, offset: 68194},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1883, col: 21, offset: 68204},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 1887, col: 1, offset: 68275},
			expr: &actionExpr{
				pos: position{line: 1887, col: 29, offset: 68303},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 1887, col: 29, offset: 68303},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1887, col: 29, offset: 68303},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1887, col: 35, offset: 68309},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1887, col: 43, offset: 68317},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1887, col: 44, offset: 68318},
									expr: &charClassMatcher{
										pos:        position{line: 1887, col: 44, offset: 68318},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1889, col: 8, offset: 68368},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ReplacementSubs",
			pos:  position{line: 1894, col: 1, offset: 68455},
			expr: &seqExpr{
				pos: position{line: 1895, col: 5, offset: 68479},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1895, col: 5, offset: 68479},
						expr: &choiceExpr{
							pos: position{line: 1895, col: 6, offset: 68480},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1895, col: 6, offset: 68480},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1896, col: 11, offset: 68541},
									expr: &ruleRefExpr{
										pos:  position{line: 1896, col: 11, offset: 68541},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1897, col: 11, offset: 68559},
									name: "Symbol",
								},
								&ruleRefExpr{
									pos:  position{line: 1898, col: 11, offset: 68577},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1899, col: 11, offset: 68606},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1900, col: 11, offset: 68624},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1900, col: 21, offset: 68634},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PostReplacementSubs",
			pos:  position{line: 1904, col: 1, offset: 68782},
			expr: &seqExpr{
				pos: position{line: 1904, col: 24, offset: 68805},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1904, col: 24, offset: 68805},
						expr: &choiceExpr{
							pos: position{line: 1905, col: 5, offset: 68811},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1905, col: 5, offset: 68811},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1906, col: 7, offset: 68868},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1907, col: 7, offset: 68893},
									name: "LineBreak",
								},
								&oneOrMoreExpr{
									pos: position{line: 1908, col: 7, offset: 68936},
									expr: &ruleRefExpr{
										pos:  position{line: 1908, col: 7, offset: 68936},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1909, col: 7, offset: 68950},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1910, col: 7, offset: 68964},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1910, col: 17, offset: 68974},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CalloutSubs",
			pos:  position{line: 1913, col: 1, offset: 69031},
			expr: &seqExpr{
				pos: position{line: 1914, col: 5, offset: 69051},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1914, col: 5, offset: 69051},
						expr: &choiceExpr{
							pos: position{line: 1914, col: 6, offset: 69052},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1914, col: 6, offset: 69052},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1915, col: 11, offset: 69113},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1916, col: 11, offset: 69142},
									expr: &ruleRefExpr{
										pos:  position{line: 1916, col: 11, offset: 69142},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1917, col: 11, offset: 69159},
									name: "Callout",
								},
								&ruleRefExpr{
									pos:  position{line: 1918, col: 11, offset: 69177},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1919, col: 11, offset: 69195},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1919, col: 21, offset: 69205},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "NoneSubs",
			pos:  position{line: 1922, col: 1, offset: 69257},
			expr: &seqExpr{
				pos: position{line: 1922, col: 13, offset: 69269},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1922, col: 13, offset: 69269},
						expr: &choiceExpr{
							pos: position{line: 1923, col: 5, offset: 69275},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1923, col: 5, offset: 69275},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 1924, col: 8, offset: 69302},
									run: (*parser).callonNoneSubs5,
									expr: &seqExpr{
										pos: position{line: 1924, col: 8, offset: 69302},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1924, col: 8, offset: 69302},
												expr: &ruleRefExpr{
													pos:  position{line: 1924, col: 9, offset: 69303},
													name: "EOF",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1924, col: 13, offset: 69307},
												expr: &charClassMatcher{
													pos:        position{line: 1924, col: 13, offset: 69307},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1924, col: 22, offset: 69316},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1926, col: 10, offset: 69421},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1931, col: 1, offset: 69614},
			expr: &actionExpr{
				pos: position{line: 1931, col: 10, offset: 69623},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1931, col: 10, offset: 69623},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1931, col: 10, offset: 69623},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1931, col: 21, offset: 69634},
								expr: &ruleRefExpr{
									pos:  position{line: 1931, col: 22, offset: 69635},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1931, col: 40, offset: 69653},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1932, col: 5, offset: 69672},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1932, col: 12, offset: 69679},
								expr: &ruleRefExpr{
									pos:  position{line: 1932, col: 13, offset: 69680},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1933, col: 5, offset: 69702},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1933, col: 11, offset: 69708},
								expr: &ruleRefExpr{
									pos:  position{line: 1933, col: 12, offset: 69709},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1934, col: 6, offset: 69726},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1934, col: 6, offset: 69726},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1934, col: 23, offset: 69743},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1938, col: 1, offset: 69862},
			expr: &seqExpr{
				pos: position{line: 1938, col: 23, offset: 69884},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1938, col: 23, offset: 69884},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1938, col: 27, offset: 69888},
						expr: &ruleRefExpr{
							pos:  position{line: 1938, col: 27, offset: 69888},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1940, col: 1, offset: 69896},
			expr: &seqExpr{
				pos: position{line: 1940, col: 19, offset: 69914},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1940, col: 19, offset: 69914},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1940, col: 26, offset: 69921},
						expr: &ruleRefExpr{
							pos:  position{line: 1940, col: 26, offset: 69921},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1940, col: 33, offset: 69928},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1943, col: 1, offset: 69996},
			expr: &actionExpr{
				pos: position{line: 1943, col: 20, offset: 70015},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1943, col: 20, offset: 70015},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1943, col: 20, offset: 70015},
							expr: &ruleRefExpr{
								pos:  position{line: 1943, col: 21, offset: 70016},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1943, col: 36, offset: 70031},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1943, col: 42, offset: 70037},
								expr: &ruleRefExpr{
									pos:  position{line: 1943, col: 43, offset: 70038},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1943, col: 55, offset: 70050},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1943, col: 59, offset: 70054},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1947, col: 1, offset: 70122},
			expr: &actionExpr{
				pos: position{line: 1947, col: 14, offset: 70135},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1947, col: 14, offset: 70135},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1947, col: 14, offset: 70135},
							expr: &ruleRefExpr{
								pos:  position{line: 1947, col: 15, offset: 70136},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1947, col: 30, offset: 70151},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1947, col: 36, offset: 70157},
								expr: &ruleRefExpr{
									pos:  position{line: 1947, col: 37, offset: 70158},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1947, col: 49, offset: 70170},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1947, col: 53, offset: 70174},
							expr: &ruleRefExpr{
								pos:  position{line: 1947, col: 53, offset: 70174},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1951, col: 1, offset: 70243},
			expr: &actionExpr{
				pos: position{line: 1951, col: 14, offset: 70256},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1951, col: 14, offset: 70256},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1951, col: 14, offset: 70256},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1951, col: 33, offset: 70275},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1951, col: 42, offset: 70284},
								expr: &seqExpr{
									pos: position{line: 1951, col: 43, offset: 70285},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1951, col: 43, offset: 70285},
											expr: &ruleRefExpr{
												pos:  position{line: 1951, col: 44, offset: 70286},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1951, col: 63, offset: 70305},
											expr: &ruleRefExpr{
												pos:  position{line: 1951, col: 64, offset: 70306},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1951, col: 68, offset: 70310},
											expr: &ruleRefExpr{
												pos:  position{line: 1951, col: 68, offset: 70310},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1951, col: 75, offset: 70317},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1951, col: 89, offset: 70331},
											expr: &ruleRefExpr{
												pos:  position{line: 1951, col: 89, offset: 70331},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1958, col: 1, offset: 70657},
			expr: &choiceExpr{
				pos: position{line: 1958, col: 17, offset: 70673},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1958, col: 17, offset: 70673},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1958, col: 49, offset: 70705},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1958, col: 78, offset: 70734},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1960, col: 1, offset: 70770},
			expr: &litMatcher{
				pos:        position{line: 1960, col: 26, offset: 70795},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1963, col: 1, offset: 70867},
			expr: &actionExpr{
				pos: position{line: 1963, col: 31, offset: 70897},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1963, col: 31, offset: 70897},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1963, col: 31, offset: 70897},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1963, col: 42, offset: 70908},
								expr: &ruleRefExpr{
									pos:  position{line: 1963, col: 43, offset: 70909},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1963, col: 61, offset: 70927},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1963, col: 68, offset: 70934},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1968, col: 1, offset: 71164},
			expr: &actionExpr{
				pos: position{line: 1969, col: 5, offset: 71204},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1969, col: 5, offset: 71204},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1969, col: 5, offset: 71204},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1969, col: 16, offset: 71215},
								name: "ParagraphWithHeadingSpacesLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1970, col: 5, offset: 71251},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1970, col: 16, offset: 71262},
								expr: &ruleRefExpr{
									pos:  position{line: 1970, col: 17, offset: 71263},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLine",
			pos:  position{line: 1974, col: 1, offset: 71372},
			expr: &actionExpr{
				pos: position{line: 1974, col: 35, offset: 71406},
				run: (*parser).callonParagraphWithHeadingSpacesLine1,
				expr: &seqExpr{
					pos: position{line: 1974, col: 35, offset: 71406},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1974, col: 35, offset: 71406},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1974, col: 41, offset: 71412},
								run: (*parser).callonParagraphWithHeadingSpacesLine4,
								expr: &seqExpr{
									pos: position{line: 1974, col: 41, offset: 71412},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1974, col: 41, offset: 71412},
											expr: &ruleRefExpr{
												pos:  position{line: 1974, col: 41, offset: 71412},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1974, col: 48, offset: 71419},
											expr: &charClassMatcher{
												pos:        position{line: 1974, col: 48, offset: 71419},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1976, col: 8, offset: 71485},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1981, col: 1, offset: 71625},
			expr: &actionExpr{
				pos: position{line: 1981, col: 39, offset: 71663},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1981, col: 39, offset: 71663},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1981, col: 39, offset: 71663},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1981, col: 50, offset: 71674},
								expr: &ruleRefExpr{
									pos:  position{line: 1981, col: 51, offset: 71675},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1982, col: 9, offset: 71701},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1982, col: 31, offset: 71723},
							expr: &ruleRefExpr{
								pos:  position{line: 1982, col: 31, offset: 71723},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1982, col: 38, offset: 71730},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1982, col: 46, offset: 71738},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1982, col: 53, offset: 71745},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1982, col: 95, offset: 71787},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1982, col: 96, offset: 71788},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1982, col: 96, offset: 71788},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1982, col: 118, offset: 71810},
											expr: &ruleRefExpr{
												pos:  position{line: 1982, col: 118, offset: 71810},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1982, col: 125, offset: 71817},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1982, col: 132, offset: 71824},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1987, col: 1, offset: 71983},
			expr: &actionExpr{
				pos: position{line: 1987, col: 44, offset: 72026},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1987, col: 44, offset: 72026},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1987, col: 50, offset: 72032},
						expr: &ruleRefExpr{
							pos:  position{line: 1987, col: 51, offset: 72033},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1991, col: 1, offset: 72117},
			expr: &actionExpr{
				pos: position{line: 1992, col: 5, offset: 72172},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1992, col: 5, offset: 72172},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1992, col: 5, offset: 72172},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1992, col: 11, offset: 72178},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1992, col: 11, offset: 72178},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1992, col: 11, offset: 72178},
											expr: &ruleRefExpr{
												pos:  position{line: 1992, col: 12, offset: 72179},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1992, col: 34, offset: 72201},
											expr: &charClassMatcher{
												pos:        position{line: 1992, col: 34, offset: 72201},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1994, col: 8, offset: 72267},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1999, col: 1, offset: 72393},
			expr: &actionExpr{
				pos: position{line: 2000, col: 5, offset: 72431},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2000, col: 5, offset: 72431},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2000, col: 5, offset: 72431},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2000, col: 16, offset: 72442},
								expr: &ruleRefExpr{
									pos:  position{line: 2000, col: 17, offset: 72443},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2001, col: 5, offset: 72465},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2004, col: 5, offset: 72576},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 2004, col: 11, offset: 72582},
								expr: &ruleRefExpr{
									pos:  position{line: 2004, col: 12, offset: 72583},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2008, col: 1, offset: 72720},
			expr: &actionExpr{
				pos: position{line: 2008, col: 16, offset: 72735},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2008, col: 16, offset: 72735},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "LiteralParagraphLine",
			pos:  position{line: 2012, col: 1, offset: 72781},
			expr: &actionExpr{
				pos: position{line: 2012, col: 25, offset: 72805},
				run: (*parser).callonLiteralParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 2012, col: 25, offset: 72805},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2012, col: 25, offset: 72805},
							expr: &ruleRefExpr{
								pos:  position{line: 2012, col: 26, offset: 72806},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2012, col: 36, offset: 72816},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2012, col: 45, offset: 72825},
								run: (*parser).callonLiteralParagraphLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2012, col: 45, offset: 72825},
									expr: &charClassMatcher{
										pos:        position{line: 2012, col: 45, offset: 72825},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2014, col: 4, offset: 72883},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2021, col: 1, offset: 73060},
			expr: &actionExpr{
				pos: position{line: 2021, col: 14, offset: 73073},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2021, col: 14, offset: 73073},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2021, col: 14, offset: 73073},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2021, col: 19, offset: 73078},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2021, col: 25, offset: 73084},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2021, col: 43, offset: 73102},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2025, col: 1, offset: 73167},
			expr: &actionExpr{
				pos: position{line: 2025, col: 21, offset: 73187},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2025, col: 21, offset: 73187},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2025, col: 30, offset: 73196},
						expr: &choiceExpr{
							pos: position{line: 2025, col: 31, offset: 73197},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2025, col: 31, offset: 73197},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2025, col: 38, offset: 73204},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2025, col: 53, offset: 73219},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2025, col: 66, offset: 73232},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 2025, col: 74, offset: 73240},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 2025, col: 93, offset: 73259},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2025, col: 114, offset: 73280},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 2025, col: 115, offset: 73281},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2025, col: 115, offset: 73281},
												expr: &litMatcher{
													pos:        position{line: 2025, col: 116, offset: 73282},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2025, col: 121, offset: 73287,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2031, col: 1, offset: 73393},
			expr: &actionExpr{
				pos: position{line: 2031, col: 23, offset: 73415},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2031, col: 23, offset: 73415},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2031, col: 23, offset: 73415},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2031, col: 29, offset: 73421},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2031, col: 36, offset: 73428},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2032, col: 5, offset: 73460},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2032, col: 11, offset: 73466},
								expr: &actionExpr{
									pos: position{line: 2032, col: 12, offset: 73467},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2032, col: 12, offset: 73467},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2032, col: 12, offset: 73467},
												expr: &ruleRefExpr{
													pos:  position{line: 2032, col: 12, offset: 73467},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2032, col: 19, offset: 73474},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2032, col: 23, offset: 73478},
												expr: &ruleRefExpr{
													pos:  position{line: 2032, col: 23, offset: 73478},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2032, col: 30, offset: 73485},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2032, col: 39, offset: 73494},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2033, col: 5, offset: 73552},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2033, col: 11, offset: 73558},
								expr: &actionExpr{
									pos: position{line: 2033, col: 12, offset: 73559},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2033, col: 12, offset: 73559},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2033, col: 12, offset: 73559},
												expr: &ruleRefExpr{
													pos:  position{line: 2033, col: 12, offset: 73559},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2033, col: 19, offset: 73566},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2033, col: 23, offset: 73570},
												expr: &ruleRefExpr{
													pos:  position{line: 2033, col: 23, offset: 73570},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2033, col: 30, offset: 73577},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2033, col: 39, offset: 73586},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2034, col: 5, offset: 73644},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2038, col: 1, offset: 73723},
			expr: &actionExpr{
				pos: position{line: 2038, col: 30, offset: 73752},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2038, col: 30, offset: 73752},
					expr: &choiceExpr{
						pos: position{line: 2038, col: 31, offset: 73753},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2038, col: 31, offset: 73753},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2038, col: 42, offset: 73764},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2045, col: 1, offset: 73913},
			expr: &actionExpr{
				pos: position{line: 2045, col: 14, offset: 73926},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2045, col: 14, offset: 73926},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2045, col: 14, offset: 73926},
							expr: &ruleRefExpr{
								pos:  position{line: 2045, col: 15, offset: 73927},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2045, col: 19, offset: 73931},
							expr: &ruleRefExpr{
								pos:  position{line: 2045, col: 19, offset: 73931},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2045, col: 26, offset: 73938},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2053, col: 1, offset: 74083},
			expr: &choiceExpr{
				pos: position{line: 2053, col: 11, offset: 74093},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2053, col: 11, offset: 74093},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2053, col: 24, offset: 74106},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2053, col: 36, offset: 74118},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2053, col: 48, offset: 74130},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2053, col: 61, offset: 74143},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 2053, col: 72, offset: 74154},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2055, col: 1, offset: 74173},
			expr: &actionExpr{
				pos: position{line: 2055, col: 15, offset: 74187},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2055, col: 15, offset: 74187},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2058, col: 1, offset: 74240},
			expr: &actionExpr{
				pos: position{line: 2058, col: 14, offset: 74253},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2058, col: 14, offset: 74253},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2061, col: 1, offset: 74307},
			expr: &actionExpr{
				pos: position{line: 2061, col: 14, offset: 74320},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2061, col: 14, offset: 74320},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2064, col: 1, offset: 74375},
			expr: &actionExpr{
				pos: position{line: 2064, col: 15, offset: 74389},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2064, col: 15, offset: 74389},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2067, col: 1, offset: 74443},
			expr: &actionExpr{
				pos: position{line: 2067, col: 13, offset: 74455},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2067, col: 13, offset: 74455},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2075, col: 1, offset: 74732},
			expr: &actionExpr{
				pos: position{line: 2075, col: 22, offset: 74753},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2075, col: 22, offset: 74753},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2075, col: 22, offset: 74753},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2075, col: 31, offset: 74762},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2075, col: 35, offset: 74766},
							expr: &charClassMatcher{
								pos:        position{line: 2075, col: 36, offset: 74767},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 2084, col: 1, offset: 75129},
			expr: &choiceExpr{
				pos: position{line: 2084, col: 21, offset: 75149},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2084, col: 21, offset: 75149},
						run: (*parser).callonSpecialCharacter2,
						expr: &ruleRefExpr{
							pos:  position{line: 2084, col: 21, offset: 75149},
							name: "InternalCrossReference",
						},
					},
					&actionExpr{
						pos: position{line: 2087, col: 9, offset: 75312},
						run: (*parser).callonSpecialCharacter4,
						expr: &choiceExpr{
							pos: position{line: 2087, col: 10, offset: 75313},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2087, col: 10, offset: 75313},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&litMatcher{
									pos:        position{line: 2087, col: 16, offset: 75319},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&litMatcher{
									pos:        position{line: 2087, col: 22, offset: 75325},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2094, col: 1, offset: 75503},
			expr: &charClassMatcher{
				pos:        position{line: 2094, col: 13, offset: 75515},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2096, col: 1, offset: 75525},
			expr: &choiceExpr{
				pos: position{line: 2096, col: 16, offset: 75540},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2096, col: 16, offset: 75540},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2096, col: 22, offset: 75546},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2096, col: 28, offset: 75552},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2096, col: 34, offset: 75558},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2096, col: 40, offset: 75564},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2096, col: 46, offset: 75570},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2098, col: 1, offset: 75576},
			expr: &actionExpr{
				pos: position{line: 2098, col: 14, offset: 75589},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2098, col: 14, offset: 75589},
					expr: &charClassMatcher{
						pos:        position{line: 2098, col: 14, offset: 75589},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2102, col: 1, offset: 75635},
			expr: &choiceExpr{
				pos: position{line: 2106, col: 5, offset: 75962},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2106, col: 5, offset: 75962},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2106, col: 5, offset: 75962},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2106, col: 5, offset: 75962},
									expr: &charClassMatcher{
										pos:        position{line: 2106, col: 5, offset: 75962},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2106, col: 15, offset: 75972},
									expr: &choiceExpr{
										pos: position{line: 2106, col: 17, offset: 75974},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2106, col: 17, offset: 75974},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2106, col: 30, offset: 75987},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2108, col: 9, offset: 76057},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2108, col: 9, offset: 76057},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2108, col: 9, offset: 76057},
									expr: &charClassMatcher{
										pos:        position{line: 2108, col: 9, offset: 76057},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2108, col: 19, offset: 76067},
									expr: &seqExpr{
										pos: position{line: 2108, col: 20, offset: 76068},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2108, col: 20, offset: 76068},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2108, col: 27, offset: 76075},
												expr: &charClassMatcher{
													pos:        position{line: 2108, col: 27, offset: 76075},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2112, col: 1, offset: 76162},
			expr: &choiceExpr{
				pos: position{line: 2113, col: 5, offset: 76243},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2113, col: 5, offset: 76243},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2113, col: 5, offset: 76243},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2113, col: 5, offset: 76243},
									expr: &charClassMatcher{
										pos:        position{line: 2113, col: 5, offset: 76243},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2113, col: 19, offset: 76257},
									expr: &choiceExpr{
										pos: position{line: 2113, col: 21, offset: 76259},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2113, col: 21, offset: 76259},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2113, col: 31, offset: 76269},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2115, col: 9, offset: 76338},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2118, col: 1, offset: 76438},
			expr: &actionExpr{
				pos: position{line: 2118, col: 12, offset: 76449},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2118, col: 12, offset: 76449},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2122, col: 1, offset: 76514},
			expr: &actionExpr{
				pos: position{line: 2122, col: 17, offset: 76530},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2122, col: 17, offset: 76530},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2122, col: 22, offset: 76535},
						expr: &choiceExpr{
							pos: position{line: 2122, col: 23, offset: 76536},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2122, col: 23, offset: 76536},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 2122, col: 34, offset: 76547},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2126, col: 1, offset: 76628},
			expr: &actionExpr{
				pos: position{line: 2126, col: 13, offset: 76640},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2126, col: 13, offset: 76640},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2126, col: 13, offset: 76640},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2126, col: 20, offset: 76647},
								expr: &ruleRefExpr{
									pos:  position{line: 2126, col: 21, offset: 76648},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2126, col: 30, offset: 76657},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2126, col: 35, offset: 76662},
								expr: &choiceExpr{
									pos: position{line: 2126, col: 36, offset: 76663},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2126, col: 36, offset: 76663},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2126, col: 47, offset: 76674},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2130, col: 1, offset: 76759},
			expr: &actionExpr{
				pos: position{line: 2130, col: 23, offset: 76781},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2130, col: 23, offset: 76781},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2130, col: 23, offset: 76781},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2130, col: 31, offset: 76789},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 2130, col: 39, offset: 76797},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2130, col: 44, offset: 76802},
								expr: &choiceExpr{
									pos: position{line: 2130, col: 45, offset: 76803},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2130, col: 45, offset: 76803},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2130, col: 56, offset: 76814},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 2134, col: 1, offset: 76899},
			expr: &actionExpr{
				pos: position{line: 2134, col: 13, offset: 76911},
				run: (*parser).callonFilename1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2134, col: 13, offset: 76911},
					expr: &charClassMatcher{
						pos:        position{line: 2134, col: 14, offset: 76912},
						val:        "[^\\r\\n[\\]\\uFFFD ]",
						chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 2138, col: 1, offset: 77034},
			expr: &choiceExpr{
				pos: position{line: 2138, col: 11, offset: 77044},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2138, col: 11, offset: 77044},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2138, col: 23, offset: 77056},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2138, col: 36, offset: 77069},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2138, col: 47, offset: 77080},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2138, col: 58, offset: 77091},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 2140, col: 1, offset: 77102},
			expr: &actionExpr{
				pos: position{line: 2140, col: 7, offset: 77108},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2140, col: 7, offset: 77108},
					expr: &charClassMatcher{
						pos:        position{line: 2140, col: 7, offset: 77108},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 2144, col: 1, offset: 77233},
			expr: &actionExpr{
				pos: position{line: 2144, col: 10, offset: 77242},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 2144, col: 10, offset: 77242},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 2148, col: 1, offset: 77284},
			expr: &actionExpr{
				pos: position{line: 2148, col: 11, offset: 77294},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 2148, col: 11, offset: 77294},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2148, col: 11, offset: 77294},
							expr: &litMatcher{
								pos:        position{line: 2148, col: 11, offset: 77294},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2148, col: 16, offset: 77299},
							expr: &ruleRefExpr{
								pos:  position{line: 2148, col: 16, offset: 77299},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2152, col: 1, offset: 77351},
			expr: &choiceExpr{
				pos: position{line: 2152, col: 10, offset: 77360},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2152, col: 10, offset: 77360},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2152, col: 16, offset: 77366},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2152, col: 16, offset: 77366},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2156, col: 1, offset: 77407},
			expr: &choiceExpr{
				pos: position{line: 2156, col: 12, offset: 77418},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2156, col: 12, offset: 77418},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2156, col: 21, offset: 77427},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2156, col: 28, offset: 77434},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2158, col: 1, offset: 77440},
			expr: &notExpr{
				pos: position{line: 2158, col: 8, offset: 77447},
				expr: &anyMatcher{
					line: 2158, col: 9, offset: 77448,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2160, col: 1, offset: 77451},
			expr: &choiceExpr{
				pos: position{line: 2160, col: 8, offset: 77458},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2160, col: 8, offset: 77458},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2160, col: 18, offset: 77468},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onRawSource1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonRawSource1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource1(stack["lines"])
}

func (c *current) onRawSection4() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonRawSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection4()
}

func (c *current) onRawSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonRawSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection7(stack["level"])
}

func (c *current) onRawSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.(string))
}

func (p *parser) callonRawSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onRawLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine6()
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onRawBlocks1(header, blocks interface{}) (interface{}, error) {
	if header != nil && blocks != nil {
		return append([]interface{}{header}, blocks.([]interface{})...), nil
	} else if blocks != nil {
		return blocks.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawBlocks1(stack["header"], stack["blocks"])
}

func (c *current) onDocumentRawBlock1(block interface{}) (interface{}, error) {
	log.Debugf("new raw block of kind '%T'", block)
	return block, nil
}

func (p *parser) callonDocumentRawBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue8()
}

func (c *current) onAttributeDeclarationValue12() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue12()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onStandaloneAttributeKey1(key interface{}) (interface{}, error) {
	// value is not defined
	return types.NewNamedAttribute(key.(string), nil)
}

func (p *parser) callonStandaloneAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeKey1(stack["key"])
}

func (c *current) onBlockAttributes5(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes14(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes14(stack["title"])
}

func (c *current) onBlockAttributes23(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes23(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes3() error {
	return initPositionalIndex(c)

}

func (p *parser) callonInlineAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes3()
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {

	return attributes, nil
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAnchor9() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor9()
}

func (c *current) onShortHandAnchor14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor14()
}

func (c *current) onShortHandAnchor5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAnchor5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor5(stack["elements"])
}

func (c *current) onShortHandAnchor1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandAnchor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor1(stack["id"])
}

func (c *current) onShortHandTitle12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle12()
}

func (c *current) onShortHandTitle17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle17()
}

func (c *current) onShortHandTitle5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle5(stack["elements"])
}

func (c *current) onShortHandTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonShortHandTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle1(stack["title"])
}

func (c *current) onLongHandAttributes3() error {
	return initPositionalIndex(c)

}

func (p *parser) callonLongHandAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes3()
}

func (c *current) onLongHandAttributes1(firstPositionalAttribute, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttribute != nil {
		attributes = append(attributes, firstPositionalAttribute.([]interface{})...)
	}
	attributes = append(attributes, otherAttributes.([]interface{})...)
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttribute"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttribute17(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttribute17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttribute17(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttribute1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	attrs = append(attrs, extras.([]interface{})...)
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttribute1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	_, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewIDAttribute(id)
}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	i, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewPositionalAttribute(i, value)
}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)
}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)
}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue14()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {

	i, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewPositionalAttribute(i, value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute27(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in which case, `c.text` contains the char sequence of the previous
	// rule that matched)
	v := types.Merge(value)
	return len(v) > 0, nil

}

func (p *parser) callonPositionalAttribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute27(stack["value"])
}

func (c *current) onPositionalAttribute14(value interface{}) (interface{}, error) {

	i, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewPositionalAttribute(i, nil)

}

func (p *parser) callonPositionalAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute14(stack["value"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	_, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewNamedAttribute(key.(string), value)
}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue7() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue7()
}

func (c *current) onSingleQuotedAttributeValue13() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonSingleQuotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue13()
}

func (c *current) onSingleQuotedAttributeValue16() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue16()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue7() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue7()
}

func (c *current) onDoubleQuotedAttributeValue13() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonDoubleQuotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue13()
}

func (c *current) onDoubleQuotedAttributeValue16() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue16()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue8()
}

func (c *current) onUnquotedAttributeValue13() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue13()
}

func (c *current) onUnquotedAttributeValue15(elements interface{}) (bool, error) {
	// empty string is not a valid value
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonUnquotedAttributeValue15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue15(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil
}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil
}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(string), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph15(attributes, content interface{}) (interface{}, error) {
	return types.NewMarkdownQuoteBlock(content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph15(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph28(attributes interface{}) (bool, error) {
	// verify that one of the attributes is `kind:passthrough`
	return types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Passthrough), nil

}

func (p *parser) callonRawParagraph28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph28(stack["attributes"])
}

func (c *current) onRawParagraph23(attributes, content interface{}) (interface{}, error) {

	return types.NewPassthroughBlock(content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph23(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph32(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph32(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine8(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonRawParagraphLine8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine8(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onSimpleRawParagraph6(attributes interface{}) (bool, error) {
	return !types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Literal), nil

}

func (p *parser) callonSimpleRawParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph6(stack["attributes"])
}

func (c *current) onSimpleRawParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleRawParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(string), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines7(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonContinuedRawParagraphLines7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines7(stack["line"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attributes, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	// must be before SingleQuoteMonospaceText
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement14()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement22() (interface{}, error) {
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement22()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onDoubleQuoteMarkedText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attributes, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attributes, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attributes"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attributes, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attributes, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attributes"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock6(attributes interface{}) (bool, error) {
	// AttrPositional1 must not be set
	return types.HasNotAttribute(attributes, types.AttrPositional1), nil

}

func (p *parser) callonImageBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock6(stack["attributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onExampleBlock1(attributes, blocks interface{}) (interface{}, error) {
	return types.NewExampleBlock(blocks.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["blocks"])
}

func (c *current) onExampleBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["element"])
}

func (c *current) onQuoteBlock6(attributes interface{}) (bool, error) {
	// AttrPositional1 may be missing or must be equal to `quote`
	if types.HasNotAttribute(attributes, types.AttrPositional1) ||
		types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Quote) {
		return true, nil
	}
	return false, nil

}

func (p *parser) callonQuoteBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock6(stack["attributes"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewQuoteBlock(content.([]interface{}), attributes)

}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent2(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewSidebarBlock(content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["element"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewFencedBlock(content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewListingBlock(content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onVerseBlock6(attributes interface{}) (bool, error) {
	// AttrPositional1 must be equal to `verse`
	return types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Verse), nil

}

func (p *parser) callonVerseBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock6(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewVerseBlock(content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonVerseBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewPassthroughBlock(content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onMarkdownQuoteMacroSubs1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonMarkdownQuoteMacroSubs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteMacroSubs1(stack["lines"])
}

func (c *current) onMarkdownQuoteLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonMarkdownQuoteLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine1(stack["elements"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onNoneSubs5() (interface{}, error) {
	// just text, including empty lines
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneSubs5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubs5()
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)

}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithHeadingSpacesLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithHeadingSpacesLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine4()
}

func (c *current) onParagraphWithHeadingSpacesLine1(line interface{}) (interface{}, error) {
	// do not include the trailing 'EOL' on the first line
	return line, nil
}

func (p *parser) callonParagraphWithHeadingSpacesLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	return types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Literal), nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onLiteralParagraphLine6() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonLiteralParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine6()
}

func (c *current) onLiteralParagraphLine1(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonLiteralParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onSpecialCharacter2() (interface{}, error) {
	// if we have a InternalCrossReference we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter2()
}

func (c *current) onSpecialCharacter4() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter4()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename1() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1()
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
