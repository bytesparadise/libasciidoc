// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"

	log "github.com/sirupsen/logrus"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DocumentFragment",
			pos:  position{line: 21, col: 1, offset: 424},
			expr: &actionExpr{
				pos: position{line: 22, col: 5, offset: 448},
				run: (*parser).callonDocumentFragment1,
				expr: &seqExpr{
					pos: position{line: 22, col: 5, offset: 448},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 22, col: 5, offset: 448},
							expr: &notExpr{
								pos: position{line: 2962, col: 8, offset: 97839},
								expr: &anyMatcher{
									line: 2962, col: 9, offset: 97840,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 23, col: 5, offset: 457},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 23, col: 16, offset: 468},
								expr: &ruleRefExpr{
									pos:  position{line: 23, col: 17, offset: 469},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 24, col: 5, offset: 491},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 25, col: 9, offset: 509},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 25, col: 9, offset: 509},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 26, col: 11, offset: 530},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 27, col: 11, offset: 555},
										name: "FileInclusion",
									},
									&actionExpr{
										pos: position{line: 1613, col: 5, offset: 53571},
										run: (*parser).callonDocumentFragment14,
										expr: &seqExpr{
											pos: position{line: 1613, col: 5, offset: 53571},
											exprs: []interface{}{
												&andExpr{
													pos: position{line: 1613, col: 5, offset: 53571},
													expr: &charClassMatcher{
														pos:        position{line: 2860, col: 13, offset: 94811},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1614, col: 5, offset: 53682},
													expr: &notExpr{
														pos: position{line: 1614, col: 7, offset: 53684},
														expr: &actionExpr{
															pos: position{line: 1441, col: 5, offset: 47846},
															run: (*parser).callonDocumentFragment20,
															expr: &seqExpr{
																pos: position{line: 1441, col: 5, offset: 47846},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 1441, col: 5, offset: 47846},
																		expr: &actionExpr{
																			pos: position{line: 2948, col: 10, offset: 97526},
																			run: (*parser).callonDocumentFragment23,
																			expr: &charClassMatcher{
																				pos:        position{line: 2948, col: 11, offset: 97527},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1441, col: 12, offset: 47853},
																		label: "prefix",
																		expr: &choiceExpr{
																			pos: position{line: 1443, col: 9, offset: 47916},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1443, col: 9, offset: 47916},
																					run: (*parser).callonDocumentFragment27,
																					expr: &seqExpr{
																						pos: position{line: 1443, col: 9, offset: 47916},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1443, col: 9, offset: 47916},
																								label: "depth",
																								expr: &actionExpr{
																									pos: position{line: 1443, col: 16, offset: 47923},
																									run: (*parser).callonDocumentFragment30,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1443, col: 16, offset: 47923},
																										expr: &litMatcher{
																											pos:        position{line: 1443, col: 17, offset: 47924},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1447, col: 9, offset: 48024},
																								run: (*parser).callonDocumentFragment33,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1466, col: 11, offset: 48741},
																					run: (*parser).callonDocumentFragment34,
																					expr: &seqExpr{
																						pos: position{line: 1466, col: 11, offset: 48741},
																						exprs: []interface{}{
																							&oneOrMoreExpr{
																								pos: position{line: 1466, col: 11, offset: 48741},
																								expr: &charClassMatcher{
																									pos:        position{line: 1466, col: 12, offset: 48742},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 1466, col: 20, offset: 48750},
																								val:        ".",
																								ignoreCase: false,
																								want:       "\".\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1468, col: 13, offset: 48867},
																					run: (*parser).callonDocumentFragment39,
																					expr: &seqExpr{
																						pos: position{line: 1468, col: 13, offset: 48867},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 1468, col: 14, offset: 48868},
																								val:        "[a-z]",
																								ranges:     []rune{'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&litMatcher{
																								pos:        position{line: 1468, col: 21, offset: 48875},
																								val:        ".",
																								ignoreCase: false,
																								want:       "\".\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1470, col: 13, offset: 48995},
																					run: (*parser).callonDocumentFragment43,
																					expr: &seqExpr{
																						pos: position{line: 1470, col: 13, offset: 48995},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 1470, col: 14, offset: 48996},
																								val:        "[A-Z]",
																								ranges:     []rune{'A', 'Z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&litMatcher{
																								pos:        position{line: 1470, col: 21, offset: 49003},
																								val:        ".",
																								ignoreCase: false,
																								want:       "\".\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1472, col: 13, offset: 49123},
																					run: (*parser).callonDocumentFragment47,
																					expr: &seqExpr{
																						pos: position{line: 1472, col: 13, offset: 49123},
																						exprs: []interface{}{
																							&oneOrMoreExpr{
																								pos: position{line: 1472, col: 13, offset: 49123},
																								expr: &charClassMatcher{
																									pos:        position{line: 1472, col: 14, offset: 49124},
																									val:        "[ivxdlcm]",
																									chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 1472, col: 26, offset: 49136},
																								val:        ")",
																								ignoreCase: false,
																								want:       "\")\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1474, col: 13, offset: 49256},
																					run: (*parser).callonDocumentFragment52,
																					expr: &seqExpr{
																						pos: position{line: 1474, col: 13, offset: 49256},
																						exprs: []interface{}{
																							&oneOrMoreExpr{
																								pos: position{line: 1474, col: 13, offset: 49256},
																								expr: &charClassMatcher{
																									pos:        position{line: 1474, col: 14, offset: 49257},
																									val:        "[IVXDLCM]",
																									chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 1474, col: 26, offset: 49269},
																								val:        ")",
																								ignoreCase: false,
																								want:       "\")\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2953, col: 11, offset: 97635},
																		run: (*parser).callonDocumentFragment57,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2953, col: 11, offset: 97635},
																			expr: &charClassMatcher{
																				pos:        position{line: 2953, col: 12, offset: 97636},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 1615, col: 5, offset: 53715},
													expr: &notExpr{
														pos: position{line: 1615, col: 7, offset: 53717},
														expr: &actionExpr{
															pos: position{line: 1491, col: 5, offset: 49808},
															run: (*parser).callonDocumentFragment62,
															expr: &seqExpr{
																pos: position{line: 1491, col: 5, offset: 49808},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 1491, col: 5, offset: 49808},
																		expr: &actionExpr{
																			pos: position{line: 2948, col: 10, offset: 97526},
																			run: (*parser).callonDocumentFragment65,
																			expr: &charClassMatcher{
																				pos:        position{line: 2948, col: 11, offset: 97527},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1491, col: 12, offset: 49815},
																		label: "prefix",
																		expr: &choiceExpr{
																			pos: position{line: 1491, col: 20, offset: 49823},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1493, col: 9, offset: 49880},
																					run: (*parser).callonDocumentFragment69,
																					expr: &seqExpr{
																						pos: position{line: 1493, col: 9, offset: 49880},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1493, col: 9, offset: 49880},
																								label: "depth",
																								expr: &actionExpr{
																									pos: position{line: 1493, col: 16, offset: 49887},
																									run: (*parser).callonDocumentFragment72,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1493, col: 16, offset: 49887},
																										expr: &litMatcher{
																											pos:        position{line: 1493, col: 17, offset: 49888},
																											val:        "*",
																											ignoreCase: false,
																											want:       "\"*\"",
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1497, col: 9, offset: 49988},
																								run: (*parser).callonDocumentFragment75,
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1514, col: 14, offset: 50695},
																					label: "depth",
																					expr: &actionExpr{
																						pos: position{line: 1514, col: 21, offset: 50702},
																						run: (*parser).callonDocumentFragment77,
																						expr: &litMatcher{
																							pos:        position{line: 1514, col: 22, offset: 50703},
																							val:        "-",
																							ignoreCase: false,
																							want:       "\"-\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2953, col: 11, offset: 97635},
																		run: (*parser).callonDocumentFragment79,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2953, col: 11, offset: 97635},
																			expr: &charClassMatcher{
																				pos:        position{line: 2953, col: 12, offset: 97636},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 1616, col: 5, offset: 53750},
													expr: &notExpr{
														pos: position{line: 1616, col: 7, offset: 53752},
														expr: &choiceExpr{
															pos: position{line: 136, col: 19, offset: 3960},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 136, col: 19, offset: 3960},
																	run: (*parser).callonDocumentFragment85,
																	expr: &litMatcher{
																		pos:        position{line: 136, col: 19, offset: 3960},
																		val:        "TIP",
																		ignoreCase: false,
																		want:       "\"TIP\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 138, col: 5, offset: 3998},
																	run: (*parser).callonDocumentFragment87,
																	expr: &litMatcher{
																		pos:        position{line: 138, col: 5, offset: 3998},
																		val:        "NOTE",
																		ignoreCase: false,
																		want:       "\"NOTE\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 140, col: 5, offset: 4038},
																	run: (*parser).callonDocumentFragment89,
																	expr: &litMatcher{
																		pos:        position{line: 140, col: 5, offset: 4038},
																		val:        "IMPORTANT",
																		ignoreCase: false,
																		want:       "\"IMPORTANT\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 142, col: 5, offset: 4088},
																	run: (*parser).callonDocumentFragment91,
																	expr: &litMatcher{
																		pos:        position{line: 142, col: 5, offset: 4088},
																		val:        "WARNING",
																		ignoreCase: false,
																		want:       "\"WARNING\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 144, col: 5, offset: 4134},
																	run: (*parser).callonDocumentFragment93,
																	expr: &litMatcher{
																		pos:        position{line: 144, col: 5, offset: 4134},
																		val:        "CAUTION",
																		ignoreCase: false,
																		want:       "\"CAUTION\"",
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1617, col: 5, offset: 53773},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1662, col: 5, offset: 55229},
														run: (*parser).callonDocumentFragment96,
														expr: &seqExpr{
															pos: position{line: 1662, col: 5, offset: 55229},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1662, col: 5, offset: 55229},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1662, col: 14, offset: 55238},
																		run: (*parser).callonDocumentFragment99,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1662, col: 14, offset: 55238},
																			expr: &charClassMatcher{
																				pos:        position{line: 1662, col: 14, offset: 55238},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1665, col: 5, offset: 55295},
																	run: (*parser).callonDocumentFragment102,
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonDocumentFragment104,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1618, col: 5, offset: 53807},
													run: (*parser).callonDocumentFragment111,
												},
												&labeledExpr{
													pos:   position{line: 1625, col: 5, offset: 54169},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1625, col: 16, offset: 54180},
														expr: &actionExpr{
															pos: position{line: 1626, col: 9, offset: 54190},
															run: (*parser).callonDocumentFragment114,
															expr: &seqExpr{
																pos: position{line: 1626, col: 9, offset: 54190},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1626, col: 9, offset: 54190},
																		expr: &notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1627, col: 9, offset: 54204},
																		expr: &actionExpr{
																			pos: position{line: 526, col: 14, offset: 17074},
																			run: (*parser).callonDocumentFragment120,
																			expr: &seqExpr{
																				pos: position{line: 526, col: 14, offset: 17074},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 526, col: 14, offset: 17074},
																						expr: &notExpr{
																							pos: position{line: 2962, col: 8, offset: 97839},
																							expr: &anyMatcher{
																								line: 2962, col: 9, offset: 97840,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 526, col: 19, offset: 17079},
																						expr: &actionExpr{
																							pos: position{line: 2948, col: 10, offset: 97526},
																							run: (*parser).callonDocumentFragment126,
																							expr: &charClassMatcher{
																								pos:        position{line: 2948, col: 11, offset: 97527},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2965, col: 8, offset: 97889},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2958, col: 12, offset: 97749},
																								run: (*parser).callonDocumentFragment129,
																								expr: &choiceExpr{
																									pos: position{line: 2958, col: 13, offset: 97750},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2958, col: 13, offset: 97750},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2958, col: 20, offset: 97757},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2958, col: 29, offset: 97766},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2962, col: 8, offset: 97839},
																								expr: &anyMatcher{
																									line: 2962, col: 9, offset: 97840,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1628, col: 9, offset: 54223},
																		expr: &seqExpr{
																			pos: position{line: 1392, col: 34, offset: 46343},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1392, col: 34, offset: 46343},
																					val:        "+",
																					ignoreCase: false,
																					want:       "\"+\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1392, col: 38, offset: 46347},
																					expr: &actionExpr{
																						pos: position{line: 2948, col: 10, offset: 97526},
																						run: (*parser).callonDocumentFragment140,
																						expr: &charClassMatcher{
																							pos:        position{line: 2948, col: 11, offset: 97527},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2958, col: 12, offset: 97749},
																					run: (*parser).callonDocumentFragment142,
																					expr: &choiceExpr{
																						pos: position{line: 2958, col: 13, offset: 97750},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2958, col: 13, offset: 97750},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 20, offset: 97757},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 29, offset: 97766},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1629, col: 9, offset: 54262},
																		label: "line",
																		expr: &choiceExpr{
																			pos: position{line: 1629, col: 15, offset: 54268},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2667, col: 22, offset: 88913},
																					run: (*parser).callonDocumentFragment149,
																					expr: &seqExpr{
																						pos: position{line: 2667, col: 22, offset: 88913},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2672, col: 31, offset: 89134},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2672, col: 36, offset: 89139},
																								expr: &litMatcher{
																									pos:        position{line: 2672, col: 37, offset: 89140},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2667, col: 49, offset: 88940},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2674, col: 29, offset: 89175},
																									run: (*parser).callonDocumentFragment155,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2674, col: 29, offset: 89175},
																										expr: &charClassMatcher{
																											pos:        position{line: 2674, col: 29, offset: 89175},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonDocumentFragment159,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1662, col: 5, offset: 55229},
																					run: (*parser).callonDocumentFragment166,
																					expr: &seqExpr{
																						pos: position{line: 1662, col: 5, offset: 55229},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1662, col: 5, offset: 55229},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1662, col: 14, offset: 55238},
																									run: (*parser).callonDocumentFragment169,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1662, col: 14, offset: 55238},
																										expr: &charClassMatcher{
																											pos:        position{line: 1662, col: 14, offset: 55238},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1665, col: 5, offset: 55295},
																								run: (*parser).callonDocumentFragment172,
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonDocumentFragment174,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 152, col: 5, offset: 4423},
										run: (*parser).callonDocumentFragment181,
										expr: &seqExpr{
											pos: position{line: 152, col: 5, offset: 4423},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 152, col: 5, offset: 4423},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 152, col: 9, offset: 4427},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 162, col: 18, offset: 4814},
														run: (*parser).callonDocumentFragment185,
														expr: &seqExpr{
															pos: position{line: 162, col: 18, offset: 4814},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 162, col: 18, offset: 4814},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 162, col: 28, offset: 4824},
																	expr: &charClassMatcher{
																		pos:        position{line: 162, col: 29, offset: 4825},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 152, col: 30, offset: 4448},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 153, col: 5, offset: 4457},
													label: "value",
													expr: &zeroOrOneExpr{
														pos: position{line: 153, col: 11, offset: 4463},
														expr: &actionExpr{
															pos: position{line: 167, col: 5, offset: 4915},
															run: (*parser).callonDocumentFragment193,
															expr: &seqExpr{
																pos: position{line: 167, col: 5, offset: 4915},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 2953, col: 11, offset: 97635},
																		run: (*parser).callonDocumentFragment195,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2953, col: 11, offset: 97635},
																			expr: &charClassMatcher{
																				pos:        position{line: 2953, col: 12, offset: 97636},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 167, col: 12, offset: 4922},
																		label: "elements",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 167, col: 21, offset: 4931},
																			expr: &actionExpr{
																				pos: position{line: 171, col: 37, offset: 5090},
																				run: (*parser).callonDocumentFragment200,
																				expr: &seqExpr{
																					pos: position{line: 171, col: 37, offset: 5090},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 171, col: 37, offset: 5090},
																							expr: &choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonDocumentFragment204,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 172, col: 5, offset: 5100},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 173, col: 9, offset: 5118},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 173, col: 10, offset: 5119},
																										run: (*parser).callonDocumentFragment213,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 173, col: 10, offset: 5119},
																											expr: &charClassMatcher{
																												pos:        position{line: 173, col: 10, offset: 5119},
																												val:        "[^\\r\\n{]",
																												chars:      []rune{'\r', '\n', '{'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 493, col: 5, offset: 15873},
																										run: (*parser).callonDocumentFragment216,
																										expr: &seqExpr{
																											pos: position{line: 493, col: 5, offset: 15873},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 493, col: 5, offset: 15873},
																													run: (*parser).callonDocumentFragment218,
																												},
																												&labeledExpr{
																													pos:   position{line: 496, col: 5, offset: 15937},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 496, col: 14, offset: 15946},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 507, col: 25, offset: 16408},
																																run: (*parser).callonDocumentFragment221,
																																expr: &seqExpr{
																																	pos: position{line: 507, col: 25, offset: 16408},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 507, col: 25, offset: 16408},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 37, offset: 16420},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonDocumentFragment225,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 56, offset: 16439},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 507, col: 62, offset: 16445},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonDocumentFragment232,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonDocumentFragment237,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonDocumentFragment239,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 507, col: 78, offset: 16461},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 511, col: 25, offset: 16563},
																																run: (*parser).callonDocumentFragment243,
																																expr: &seqExpr{
																																	pos: position{line: 511, col: 25, offset: 16563},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 511, col: 25, offset: 16563},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 38, offset: 16576},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonDocumentFragment247,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 57, offset: 16595},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 511, col: 63, offset: 16601},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonDocumentFragment254,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonDocumentFragment259,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonDocumentFragment261,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 511, col: 79, offset: 16617},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 500, col: 31, offset: 16063},
																																run: (*parser).callonDocumentFragment265,
																																expr: &seqExpr{
																																	pos: position{line: 500, col: 31, offset: 16063},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 500, col: 31, offset: 16063},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 500, col: 35, offset: 16067},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonDocumentFragment269,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 500, col: 54, offset: 16086},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 177, col: 12, offset: 5247},
																										run: (*parser).callonDocumentFragment275,
																										expr: &litMatcher{
																											pos:        position{line: 177, col: 12, offset: 5247},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonDocumentFragment278,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 184, col: 19, offset: 5402},
										run: (*parser).callonDocumentFragment285,
										expr: &seqExpr{
											pos: position{line: 184, col: 19, offset: 5402},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 184, col: 19, offset: 5402},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 184, col: 24, offset: 5407},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 162, col: 18, offset: 4814},
														run: (*parser).callonDocumentFragment289,
														expr: &seqExpr{
															pos: position{line: 162, col: 18, offset: 4814},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 162, col: 18, offset: 4814},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 162, col: 28, offset: 4824},
																	expr: &charClassMatcher{
																		pos:        position{line: 162, col: 29, offset: 4825},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 184, col: 45, offset: 5428},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 184, col: 49, offset: 5432},
													expr: &actionExpr{
														pos: position{line: 2948, col: 10, offset: 97526},
														run: (*parser).callonDocumentFragment296,
														expr: &charClassMatcher{
															pos:        position{line: 2948, col: 11, offset: 97527},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonDocumentFragment299,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 186, col: 5, offset: 5499},
										run: (*parser).callonDocumentFragment306,
										expr: &seqExpr{
											pos: position{line: 186, col: 5, offset: 5499},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 186, col: 5, offset: 5499},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 186, col: 9, offset: 5503},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 162, col: 18, offset: 4814},
														run: (*parser).callonDocumentFragment310,
														expr: &seqExpr{
															pos: position{line: 162, col: 18, offset: 4814},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 162, col: 18, offset: 4814},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 162, col: 28, offset: 4824},
																	expr: &charClassMatcher{
																		pos:        position{line: 162, col: 29, offset: 4825},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 186, col: 30, offset: 5524},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 186, col: 35, offset: 5529},
													expr: &actionExpr{
														pos: position{line: 2948, col: 10, offset: 97526},
														run: (*parser).callonDocumentFragment317,
														expr: &charClassMatcher{
															pos:        position{line: 2948, col: 11, offset: 97527},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonDocumentFragment320,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 879, col: 5, offset: 27695},
										run: (*parser).callonDocumentFragment327,
										expr: &seqExpr{
											pos: position{line: 879, col: 5, offset: 27695},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 879, col: 5, offset: 27695},
													run: (*parser).callonDocumentFragment329,
												},
												&zeroOrMoreExpr{
													pos: position{line: 882, col: 5, offset: 27756},
													expr: &actionExpr{
														pos: position{line: 526, col: 14, offset: 17074},
														run: (*parser).callonDocumentFragment331,
														expr: &seqExpr{
															pos: position{line: 526, col: 14, offset: 17074},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 526, col: 14, offset: 17074},
																	expr: &notExpr{
																		pos: position{line: 2962, col: 8, offset: 97839},
																		expr: &anyMatcher{
																			line: 2962, col: 9, offset: 97840,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 526, col: 19, offset: 17079},
																	expr: &actionExpr{
																		pos: position{line: 2948, col: 10, offset: 97526},
																		run: (*parser).callonDocumentFragment337,
																		expr: &charClassMatcher{
																			pos:        position{line: 2948, col: 11, offset: 97527},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonDocumentFragment340,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 883, col: 5, offset: 27806},
													label: "title",
													expr: &actionExpr{
														pos: position{line: 897, col: 5, offset: 28339},
														run: (*parser).callonDocumentFragment348,
														expr: &seqExpr{
															pos: position{line: 897, col: 5, offset: 28339},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 897, col: 5, offset: 28339},
																	val:        "=",
																	ignoreCase: false,
																	want:       "\"=\"",
																},
																&actionExpr{
																	pos: position{line: 2953, col: 11, offset: 97635},
																	run: (*parser).callonDocumentFragment351,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2953, col: 11, offset: 97635},
																		expr: &charClassMatcher{
																			pos:        position{line: 2953, col: 12, offset: 97636},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 897, col: 16, offset: 28350},
																	label: "title",
																	expr: &actionExpr{
																		pos: position{line: 2429, col: 20, offset: 81823},
																		run: (*parser).callonDocumentFragment355,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2429, col: 20, offset: 81823},
																			expr: &charClassMatcher{
																				pos:        position{line: 2429, col: 20, offset: 81823},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonDocumentFragment359,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 884, col: 5, offset: 27830},
													label: "info",
													expr: &zeroOrOneExpr{
														pos: position{line: 884, col: 10, offset: 27835},
														expr: &actionExpr{
															pos: position{line: 902, col: 5, offset: 28447},
															run: (*parser).callonDocumentFragment368,
															expr: &seqExpr{
																pos: position{line: 902, col: 5, offset: 28447},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 902, col: 5, offset: 28447},
																		expr: &actionExpr{
																			pos: position{line: 526, col: 14, offset: 17074},
																			run: (*parser).callonDocumentFragment371,
																			expr: &seqExpr{
																				pos: position{line: 526, col: 14, offset: 17074},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 526, col: 14, offset: 17074},
																						expr: &notExpr{
																							pos: position{line: 2962, col: 8, offset: 97839},
																							expr: &anyMatcher{
																								line: 2962, col: 9, offset: 97840,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 526, col: 19, offset: 17079},
																						expr: &actionExpr{
																							pos: position{line: 2948, col: 10, offset: 97526},
																							run: (*parser).callonDocumentFragment377,
																							expr: &charClassMatcher{
																								pos:        position{line: 2948, col: 11, offset: 97527},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2965, col: 8, offset: 97889},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2958, col: 12, offset: 97749},
																								run: (*parser).callonDocumentFragment380,
																								expr: &choiceExpr{
																									pos: position{line: 2958, col: 13, offset: 97750},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2958, col: 13, offset: 97750},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2958, col: 20, offset: 97757},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2958, col: 29, offset: 97766},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2962, col: 8, offset: 97839},
																								expr: &anyMatcher{
																									line: 2962, col: 9, offset: 97840,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 903, col: 5, offset: 28462},
																		expr: &choiceExpr{
																			pos: position{line: 903, col: 6, offset: 28463},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2667, col: 22, offset: 88913},
																					run: (*parser).callonDocumentFragment389,
																					expr: &seqExpr{
																						pos: position{line: 2667, col: 22, offset: 88913},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2672, col: 31, offset: 89134},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2672, col: 36, offset: 89139},
																								expr: &litMatcher{
																									pos:        position{line: 2672, col: 37, offset: 89140},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2667, col: 49, offset: 88940},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2674, col: 29, offset: 89175},
																									run: (*parser).callonDocumentFragment395,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2674, col: 29, offset: 89175},
																										expr: &charClassMatcher{
																											pos:        position{line: 2674, col: 29, offset: 89175},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonDocumentFragment399,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 613, col: 5, offset: 19628},
																					run: (*parser).callonDocumentFragment406,
																					expr: &seqExpr{
																						pos: position{line: 613, col: 5, offset: 19628},
																						exprs: []interface{}{
																							&andCodeExpr{
																								pos: position{line: 613, col: 5, offset: 19628},
																								run: (*parser).callonDocumentFragment408,
																							},
																							&litMatcher{
																								pos:        position{line: 585, col: 26, offset: 18966},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 585, col: 33, offset: 18973},
																								expr: &actionExpr{
																									pos: position{line: 2948, col: 10, offset: 97526},
																									run: (*parser).callonDocumentFragment411,
																									expr: &charClassMatcher{
																										pos:        position{line: 2948, col: 11, offset: 97527},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonDocumentFragment414,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 618, col: 5, offset: 19811},
																								run: (*parser).callonDocumentFragment421,
																							},
																							&labeledExpr{
																								pos:   position{line: 623, col: 5, offset: 20012},
																								label: "content",
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 634, col: 5, offset: 20336},
																									expr: &actionExpr{
																										pos: position{line: 634, col: 6, offset: 20337},
																										run: (*parser).callonDocumentFragment424,
																										expr: &seqExpr{
																											pos: position{line: 634, col: 6, offset: 20337},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 634, col: 6, offset: 20337},
																													expr: &choiceExpr{
																														pos: position{line: 631, col: 29, offset: 20279},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 585, col: 26, offset: 18966},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 585, col: 26, offset: 18966},
																																		val:        "////",
																																		ignoreCase: false,
																																		want:       "\"////\"",
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 585, col: 33, offset: 18973},
																																		expr: &actionExpr{
																																			pos: position{line: 2948, col: 10, offset: 97526},
																																			run: (*parser).callonDocumentFragment431,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2948, col: 11, offset: 97527},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 2965, col: 8, offset: 97889},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 2958, col: 12, offset: 97749},
																																				run: (*parser).callonDocumentFragment434,
																																				expr: &choiceExpr{
																																					pos: position{line: 2958, col: 13, offset: 97750},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 2958, col: 13, offset: 97750},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2958, col: 20, offset: 97757},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2958, col: 29, offset: 97766},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2962, col: 8, offset: 97839},
																																				expr: &anyMatcher{
																																					line: 2962, col: 9, offset: 97840,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2962, col: 8, offset: 97839},
																																expr: &anyMatcher{
																																	line: 2962, col: 9, offset: 97840,
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 635, col: 5, offset: 20367},
																													label: "line",
																													expr: &actionExpr{
																														pos: position{line: 602, col: 5, offset: 19323},
																														run: (*parser).callonDocumentFragment444,
																														expr: &seqExpr{
																															pos: position{line: 602, col: 5, offset: 19323},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 602, col: 5, offset: 19323},
																																	expr: &notExpr{
																																		pos: position{line: 2962, col: 8, offset: 97839},
																																		expr: &anyMatcher{
																																			line: 2962, col: 9, offset: 97840,
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 603, col: 5, offset: 19396},
																																	label: "content",
																																	expr: &actionExpr{
																																		pos: position{line: 603, col: 14, offset: 19405},
																																		run: (*parser).callonDocumentFragment450,
																																		expr: &zeroOrMoreExpr{
																																			pos: position{line: 603, col: 14, offset: 19405},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 603, col: 14, offset: 19405},
																																				val:        "[^\\r\\n]",
																																				chars:      []rune{'\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonDocumentFragment454,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 624, col: 5, offset: 20046},
																								expr: &choiceExpr{
																									pos: position{line: 631, col: 29, offset: 20279},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 585, col: 26, offset: 18966},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 585, col: 26, offset: 18966},
																													val:        "////",
																													ignoreCase: false,
																													want:       "\"////\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 585, col: 33, offset: 18973},
																													expr: &actionExpr{
																														pos: position{line: 2948, col: 10, offset: 97526},
																														run: (*parser).callonDocumentFragment466,
																														expr: &charClassMatcher{
																															pos:        position{line: 2948, col: 11, offset: 97527},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2965, col: 8, offset: 97889},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 2958, col: 12, offset: 97749},
																															run: (*parser).callonDocumentFragment469,
																															expr: &choiceExpr{
																																pos: position{line: 2958, col: 13, offset: 97750},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2958, col: 13, offset: 97750},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2958, col: 20, offset: 97757},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2958, col: 29, offset: 97766},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2962, col: 8, offset: 97839},
																															expr: &anyMatcher{
																																line: 2962, col: 9, offset: 97840,
																															},
																														},
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2962, col: 8, offset: 97839},
																											expr: &anyMatcher{
																												line: 2962, col: 9, offset: 97840,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 904, col: 5, offset: 28537},
																		label: "authors",
																		expr: &actionExpr{
																			pos: position{line: 910, col: 20, offset: 28787},
																			run: (*parser).callonDocumentFragment479,
																			expr: &seqExpr{
																				pos: position{line: 910, col: 20, offset: 28787},
																				exprs: []interface{}{
																					&zeroOrMoreExpr{
																						pos: position{line: 910, col: 20, offset: 28787},
																						expr: &actionExpr{
																							pos: position{line: 2948, col: 10, offset: 97526},
																							run: (*parser).callonDocumentFragment482,
																							expr: &charClassMatcher{
																								pos:        position{line: 2948, col: 11, offset: 97527},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 910, col: 27, offset: 28794},
																						label: "authors",
																						expr: &choiceExpr{
																							pos: position{line: 910, col: 36, offset: 28803},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 914, col: 30, offset: 28923},
																									run: (*parser).callonDocumentFragment486,
																									expr: &seqExpr{
																										pos: position{line: 914, col: 30, offset: 28923},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 914, col: 30, offset: 28923},
																												expr: &litMatcher{
																													pos:        position{line: 914, col: 31, offset: 28924},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 914, col: 35, offset: 28928},
																												label: "authors",
																												expr: &oneOrMoreExpr{
																													pos: position{line: 914, col: 44, offset: 28937},
																													expr: &actionExpr{
																														pos: position{line: 923, col: 5, offset: 29169},
																														run: (*parser).callonDocumentFragment492,
																														expr: &seqExpr{
																															pos: position{line: 923, col: 5, offset: 29169},
																															exprs: []interface{}{
																																&labeledExpr{
																																	pos:   position{line: 923, col: 5, offset: 29169},
																																	label: "fullName",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 923, col: 14, offset: 29178},
																																		expr: &actionExpr{
																																			pos: position{line: 934, col: 5, offset: 29558},
																																			run: (*parser).callonDocumentFragment496,
																																			expr: &seqExpr{
																																				pos: position{line: 934, col: 5, offset: 29558},
																																				exprs: []interface{}{
																																					&labeledExpr{
																																						pos:   position{line: 934, col: 5, offset: 29558},
																																						label: "part1",
																																						expr: &actionExpr{
																																							pos: position{line: 934, col: 12, offset: 29565},
																																							run: (*parser).callonDocumentFragment499,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 934, col: 12, offset: 29565},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 934, col: 12, offset: 29565},
																																									val:        "[^<;\\r\\n ]",
																																									chars:      []rune{'<', ';', '\r', '\n', ' '},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 937, col: 5, offset: 29645},
																																						expr: &actionExpr{
																																							pos: position{line: 2948, col: 10, offset: 97526},
																																							run: (*parser).callonDocumentFragment503,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 2948, col: 11, offset: 97527},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 938, col: 5, offset: 29656},
																																						label: "part2",
																																						expr: &zeroOrOneExpr{
																																							pos: position{line: 938, col: 11, offset: 29662},
																																							expr: &actionExpr{
																																								pos: position{line: 938, col: 12, offset: 29663},
																																								run: (*parser).callonDocumentFragment507,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 938, col: 12, offset: 29663},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 938, col: 12, offset: 29663},
																																										val:        "[^<;\\r\\n ]",
																																										chars:      []rune{'<', ';', '\r', '\n', ' '},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 941, col: 5, offset: 29744},
																																						expr: &actionExpr{
																																							pos: position{line: 2948, col: 10, offset: 97526},
																																							run: (*parser).callonDocumentFragment511,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 2948, col: 11, offset: 97527},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 942, col: 5, offset: 29755},
																																						label: "part3",
																																						expr: &zeroOrOneExpr{
																																							pos: position{line: 942, col: 11, offset: 29761},
																																							expr: &actionExpr{
																																								pos: position{line: 942, col: 12, offset: 29762},
																																								run: (*parser).callonDocumentFragment515,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 942, col: 12, offset: 29762},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 942, col: 12, offset: 29762},
																																										val:        "[^<;\\r\\n]",
																																										chars:      []rune{'<', ';', '\r', '\n'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 945, col: 5, offset: 29841},
																																						expr: &actionExpr{
																																							pos: position{line: 2948, col: 10, offset: 97526},
																																							run: (*parser).callonDocumentFragment519,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 2948, col: 11, offset: 97527},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 923, col: 40, offset: 29204},
																																	label: "email",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 923, col: 46, offset: 29210},
																																		expr: &actionExpr{
																																			pos: position{line: 951, col: 5, offset: 29963},
																																			run: (*parser).callonDocumentFragment523,
																																			expr: &seqExpr{
																																				pos: position{line: 951, col: 5, offset: 29963},
																																				exprs: []interface{}{
																																					&notExpr{
																																						pos: position{line: 951, col: 5, offset: 29963},
																																						expr: &notExpr{
																																							pos: position{line: 2962, col: 8, offset: 97839},
																																							expr: &anyMatcher{
																																								line: 2962, col: 9, offset: 97840,
																																							},
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 952, col: 5, offset: 29973},
																																						val:        "<",
																																						ignoreCase: false,
																																						want:       "\"<\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 953, col: 5, offset: 29982},
																																						label: "email",
																																						expr: &actionExpr{
																																							pos: position{line: 953, col: 12, offset: 29989},
																																							run: (*parser).callonDocumentFragment530,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 953, col: 13, offset: 29990},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 953, col: 13, offset: 29990},
																																									val:        "[^>\\r\\n]",
																																									chars:      []rune{'>', '\r', '\n'},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 956, col: 5, offset: 30050},
																																						val:        ">",
																																						ignoreCase: false,
																																						want:       "\">\"",
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 923, col: 69, offset: 29233},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonDocumentFragment535,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&zeroOrOneExpr{
																																	pos: position{line: 923, col: 76, offset: 29240},
																																	expr: &litMatcher{
																																		pos:        position{line: 923, col: 76, offset: 29240},
																																		val:        ";",
																																		ignoreCase: false,
																																		want:       "\";\"",
																																	},
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 923, col: 81, offset: 29245},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonDocumentFragment540,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&andCodeExpr{
																																	pos: position{line: 924, col: 5, offset: 29257},
																																	run: (*parser).callonDocumentFragment542,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 918, col: 33, offset: 29055},
																									run: (*parser).callonDocumentFragment543,
																									expr: &seqExpr{
																										pos: position{line: 918, col: 33, offset: 29055},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 918, col: 33, offset: 29055},
																												val:        ":author:",
																												ignoreCase: false,
																												want:       "\":author:\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 918, col: 44, offset: 29066},
																												expr: &actionExpr{
																													pos: position{line: 2948, col: 10, offset: 97526},
																													run: (*parser).callonDocumentFragment547,
																													expr: &charClassMatcher{
																														pos:        position{line: 2948, col: 11, offset: 97527},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 918, col: 51, offset: 29073},
																												label: "author",
																												expr: &actionExpr{
																													pos: position{line: 923, col: 5, offset: 29169},
																													run: (*parser).callonDocumentFragment550,
																													expr: &seqExpr{
																														pos: position{line: 923, col: 5, offset: 29169},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 923, col: 5, offset: 29169},
																																label: "fullName",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 923, col: 14, offset: 29178},
																																	expr: &actionExpr{
																																		pos: position{line: 934, col: 5, offset: 29558},
																																		run: (*parser).callonDocumentFragment554,
																																		expr: &seqExpr{
																																			pos: position{line: 934, col: 5, offset: 29558},
																																			exprs: []interface{}{
																																				&labeledExpr{
																																					pos:   position{line: 934, col: 5, offset: 29558},
																																					label: "part1",
																																					expr: &actionExpr{
																																						pos: position{line: 934, col: 12, offset: 29565},
																																						run: (*parser).callonDocumentFragment557,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 934, col: 12, offset: 29565},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 934, col: 12, offset: 29565},
																																								val:        "[^<;\\r\\n ]",
																																								chars:      []rune{'<', ';', '\r', '\n', ' '},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 937, col: 5, offset: 29645},
																																					expr: &actionExpr{
																																						pos: position{line: 2948, col: 10, offset: 97526},
																																						run: (*parser).callonDocumentFragment561,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2948, col: 11, offset: 97527},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 938, col: 5, offset: 29656},
																																					label: "part2",
																																					expr: &zeroOrOneExpr{
																																						pos: position{line: 938, col: 11, offset: 29662},
																																						expr: &actionExpr{
																																							pos: position{line: 938, col: 12, offset: 29663},
																																							run: (*parser).callonDocumentFragment565,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 938, col: 12, offset: 29663},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 938, col: 12, offset: 29663},
																																									val:        "[^<;\\r\\n ]",
																																									chars:      []rune{'<', ';', '\r', '\n', ' '},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 941, col: 5, offset: 29744},
																																					expr: &actionExpr{
																																						pos: position{line: 2948, col: 10, offset: 97526},
																																						run: (*parser).callonDocumentFragment569,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2948, col: 11, offset: 97527},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 942, col: 5, offset: 29755},
																																					label: "part3",
																																					expr: &zeroOrOneExpr{
																																						pos: position{line: 942, col: 11, offset: 29761},
																																						expr: &actionExpr{
																																							pos: position{line: 942, col: 12, offset: 29762},
																																							run: (*parser).callonDocumentFragment573,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 942, col: 12, offset: 29762},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 942, col: 12, offset: 29762},
																																									val:        "[^<;\\r\\n]",
																																									chars:      []rune{'<', ';', '\r', '\n'},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 945, col: 5, offset: 29841},
																																					expr: &actionExpr{
																																						pos: position{line: 2948, col: 10, offset: 97526},
																																						run: (*parser).callonDocumentFragment577,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2948, col: 11, offset: 97527},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 923, col: 40, offset: 29204},
																																label: "email",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 923, col: 46, offset: 29210},
																																	expr: &actionExpr{
																																		pos: position{line: 951, col: 5, offset: 29963},
																																		run: (*parser).callonDocumentFragment581,
																																		expr: &seqExpr{
																																			pos: position{line: 951, col: 5, offset: 29963},
																																			exprs: []interface{}{
																																				&notExpr{
																																					pos: position{line: 951, col: 5, offset: 29963},
																																					expr: &notExpr{
																																						pos: position{line: 2962, col: 8, offset: 97839},
																																						expr: &anyMatcher{
																																							line: 2962, col: 9, offset: 97840,
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 952, col: 5, offset: 29973},
																																					val:        "<",
																																					ignoreCase: false,
																																					want:       "\"<\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 953, col: 5, offset: 29982},
																																					label: "email",
																																					expr: &actionExpr{
																																						pos: position{line: 953, col: 12, offset: 29989},
																																						run: (*parser).callonDocumentFragment588,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 953, col: 13, offset: 29990},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 953, col: 13, offset: 29990},
																																								val:        "[^>\\r\\n]",
																																								chars:      []rune{'>', '\r', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 956, col: 5, offset: 30050},
																																					val:        ">",
																																					ignoreCase: false,
																																					want:       "\">\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 923, col: 69, offset: 29233},
																																expr: &actionExpr{
																																	pos: position{line: 2948, col: 10, offset: 97526},
																																	run: (*parser).callonDocumentFragment593,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2948, col: 11, offset: 97527},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&zeroOrOneExpr{
																																pos: position{line: 923, col: 76, offset: 29240},
																																expr: &litMatcher{
																																	pos:        position{line: 923, col: 76, offset: 29240},
																																	val:        ";",
																																	ignoreCase: false,
																																	want:       "\";\"",
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 923, col: 81, offset: 29245},
																																expr: &actionExpr{
																																	pos: position{line: 2948, col: 10, offset: 97526},
																																	run: (*parser).callonDocumentFragment598,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2948, col: 11, offset: 97527},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&andCodeExpr{
																																pos: position{line: 924, col: 5, offset: 29257},
																																run: (*parser).callonDocumentFragment600,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2965, col: 8, offset: 97889},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2958, col: 12, offset: 97749},
																								run: (*parser).callonDocumentFragment602,
																								expr: &choiceExpr{
																									pos: position{line: 2958, col: 13, offset: 97750},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2958, col: 13, offset: 97750},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2958, col: 20, offset: 97757},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2958, col: 29, offset: 97766},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2962, col: 8, offset: 97839},
																								expr: &anyMatcher{
																									line: 2962, col: 9, offset: 97840,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 905, col: 5, offset: 28568},
																		expr: &choiceExpr{
																			pos: position{line: 905, col: 6, offset: 28569},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2667, col: 22, offset: 88913},
																					run: (*parser).callonDocumentFragment611,
																					expr: &seqExpr{
																						pos: position{line: 2667, col: 22, offset: 88913},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2672, col: 31, offset: 89134},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2672, col: 36, offset: 89139},
																								expr: &litMatcher{
																									pos:        position{line: 2672, col: 37, offset: 89140},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2667, col: 49, offset: 88940},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2674, col: 29, offset: 89175},
																									run: (*parser).callonDocumentFragment617,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2674, col: 29, offset: 89175},
																										expr: &charClassMatcher{
																											pos:        position{line: 2674, col: 29, offset: 89175},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonDocumentFragment621,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 613, col: 5, offset: 19628},
																					run: (*parser).callonDocumentFragment628,
																					expr: &seqExpr{
																						pos: position{line: 613, col: 5, offset: 19628},
																						exprs: []interface{}{
																							&andCodeExpr{
																								pos: position{line: 613, col: 5, offset: 19628},
																								run: (*parser).callonDocumentFragment630,
																							},
																							&litMatcher{
																								pos:        position{line: 585, col: 26, offset: 18966},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 585, col: 33, offset: 18973},
																								expr: &actionExpr{
																									pos: position{line: 2948, col: 10, offset: 97526},
																									run: (*parser).callonDocumentFragment633,
																									expr: &charClassMatcher{
																										pos:        position{line: 2948, col: 11, offset: 97527},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonDocumentFragment636,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 618, col: 5, offset: 19811},
																								run: (*parser).callonDocumentFragment643,
																							},
																							&labeledExpr{
																								pos:   position{line: 623, col: 5, offset: 20012},
																								label: "content",
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 634, col: 5, offset: 20336},
																									expr: &actionExpr{
																										pos: position{line: 634, col: 6, offset: 20337},
																										run: (*parser).callonDocumentFragment646,
																										expr: &seqExpr{
																											pos: position{line: 634, col: 6, offset: 20337},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 634, col: 6, offset: 20337},
																													expr: &choiceExpr{
																														pos: position{line: 631, col: 29, offset: 20279},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 585, col: 26, offset: 18966},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 585, col: 26, offset: 18966},
																																		val:        "////",
																																		ignoreCase: false,
																																		want:       "\"////\"",
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 585, col: 33, offset: 18973},
																																		expr: &actionExpr{
																																			pos: position{line: 2948, col: 10, offset: 97526},
																																			run: (*parser).callonDocumentFragment653,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2948, col: 11, offset: 97527},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 2965, col: 8, offset: 97889},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 2958, col: 12, offset: 97749},
																																				run: (*parser).callonDocumentFragment656,
																																				expr: &choiceExpr{
																																					pos: position{line: 2958, col: 13, offset: 97750},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 2958, col: 13, offset: 97750},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2958, col: 20, offset: 97757},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2958, col: 29, offset: 97766},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2962, col: 8, offset: 97839},
																																				expr: &anyMatcher{
																																					line: 2962, col: 9, offset: 97840,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2962, col: 8, offset: 97839},
																																expr: &anyMatcher{
																																	line: 2962, col: 9, offset: 97840,
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 635, col: 5, offset: 20367},
																													label: "line",
																													expr: &actionExpr{
																														pos: position{line: 602, col: 5, offset: 19323},
																														run: (*parser).callonDocumentFragment666,
																														expr: &seqExpr{
																															pos: position{line: 602, col: 5, offset: 19323},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 602, col: 5, offset: 19323},
																																	expr: &notExpr{
																																		pos: position{line: 2962, col: 8, offset: 97839},
																																		expr: &anyMatcher{
																																			line: 2962, col: 9, offset: 97840,
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 603, col: 5, offset: 19396},
																																	label: "content",
																																	expr: &actionExpr{
																																		pos: position{line: 603, col: 14, offset: 19405},
																																		run: (*parser).callonDocumentFragment672,
																																		expr: &zeroOrMoreExpr{
																																			pos: position{line: 603, col: 14, offset: 19405},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 603, col: 14, offset: 19405},
																																				val:        "[^\\r\\n]",
																																				chars:      []rune{'\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonDocumentFragment676,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 624, col: 5, offset: 20046},
																								expr: &choiceExpr{
																									pos: position{line: 631, col: 29, offset: 20279},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 585, col: 26, offset: 18966},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 585, col: 26, offset: 18966},
																													val:        "////",
																													ignoreCase: false,
																													want:       "\"////\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 585, col: 33, offset: 18973},
																													expr: &actionExpr{
																														pos: position{line: 2948, col: 10, offset: 97526},
																														run: (*parser).callonDocumentFragment688,
																														expr: &charClassMatcher{
																															pos:        position{line: 2948, col: 11, offset: 97527},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2965, col: 8, offset: 97889},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 2958, col: 12, offset: 97749},
																															run: (*parser).callonDocumentFragment691,
																															expr: &choiceExpr{
																																pos: position{line: 2958, col: 13, offset: 97750},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2958, col: 13, offset: 97750},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2958, col: 20, offset: 97757},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2958, col: 29, offset: 97766},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2962, col: 8, offset: 97839},
																															expr: &anyMatcher{
																																line: 2962, col: 9, offset: 97840,
																															},
																														},
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2962, col: 8, offset: 97839},
																											expr: &anyMatcher{
																												line: 2962, col: 9, offset: 97840,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 906, col: 5, offset: 28643},
																		label: "revision",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 906, col: 14, offset: 28652},
																			expr: &actionExpr{
																				pos: position{line: 962, col: 21, offset: 30239},
																				run: (*parser).callonDocumentFragment702,
																				expr: &seqExpr{
																					pos: position{line: 962, col: 21, offset: 30239},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 962, col: 21, offset: 30239},
																							expr: &actionExpr{
																								pos: position{line: 2948, col: 10, offset: 97526},
																								run: (*parser).callonDocumentFragment705,
																								expr: &charClassMatcher{
																									pos:        position{line: 2948, col: 11, offset: 97527},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 962, col: 28, offset: 30246},
																							expr: &litMatcher{
																								pos:        position{line: 962, col: 29, offset: 30247},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 962, col: 33, offset: 30251},
																							label: "revision",
																							expr: &choiceExpr{
																								pos: position{line: 963, col: 9, offset: 30270},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 963, col: 10, offset: 30271},
																										run: (*parser).callonDocumentFragment711,
																										expr: &seqExpr{
																											pos: position{line: 963, col: 10, offset: 30271},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 963, col: 10, offset: 30271},
																													label: "revnumber",
																													expr: &choiceExpr{
																														pos: position{line: 972, col: 27, offset: 30788},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 972, col: 27, offset: 30788},
																																run: (*parser).callonDocumentFragment715,
																																expr: &seqExpr{
																																	pos: position{line: 972, col: 27, offset: 30788},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 972, col: 27, offset: 30788},
																																			val:        "v",
																																			ignoreCase: true,
																																			want:       "\"v\"i",
																																		},
																																		&actionExpr{
																																			pos: position{line: 2940, col: 10, offset: 97390},
																																			run: (*parser).callonDocumentFragment718,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2940, col: 10, offset: 97390},
																																				val:        "[0-9]",
																																				ranges:     []rune{'0', '9'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&oneOrMoreExpr{
																																			pos: position{line: 972, col: 39, offset: 30800},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 972, col: 39, offset: 30800},
																																				val:        "[^:,\\r\\n]",
																																				chars:      []rune{':', ',', '\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 974, col: 5, offset: 30848},
																																run: (*parser).callonDocumentFragment722,
																																expr: &seqExpr{
																																	pos: position{line: 974, col: 5, offset: 30848},
																																	exprs: []interface{}{
																																		&zeroOrOneExpr{
																																			pos: position{line: 974, col: 5, offset: 30848},
																																			expr: &litMatcher{
																																				pos:        position{line: 974, col: 5, offset: 30848},
																																				val:        "v",
																																				ignoreCase: true,
																																				want:       "\"v\"i",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2940, col: 10, offset: 97390},
																																			run: (*parser).callonDocumentFragment726,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2940, col: 10, offset: 97390},
																																				val:        "[0-9]",
																																				ranges:     []rune{'0', '9'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&oneOrMoreExpr{
																																			pos: position{line: 974, col: 18, offset: 30861},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 974, col: 18, offset: 30861},
																																				val:        "[^:,\\r\\n]",
																																				chars:      []rune{':', ',', '\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 974, col: 29, offset: 30872},
																																			expr: &actionExpr{
																																				pos: position{line: 2948, col: 10, offset: 97526},
																																				run: (*parser).callonDocumentFragment731,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2948, col: 11, offset: 97527},
																																					val:        "[ \\t]",
																																					chars:      []rune{' ', '\t'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&andExpr{
																																			pos: position{line: 974, col: 36, offset: 30879},
																																			expr: &litMatcher{
																																				pos:        position{line: 974, col: 37, offset: 30880},
																																				val:        ",",
																																				ignoreCase: false,
																																				want:       "\",\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 963, col: 45, offset: 30306},
																													expr: &litMatcher{
																														pos:        position{line: 963, col: 45, offset: 30306},
																														val:        ",",
																														ignoreCase: false,
																														want:       "\",\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 963, col: 50, offset: 30311},
																													label: "revdate",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 963, col: 58, offset: 30319},
																														expr: &actionExpr{
																															pos: position{line: 978, col: 25, offset: 30944},
																															run: (*parser).callonDocumentFragment739,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 978, col: 25, offset: 30944},
																																expr: &charClassMatcher{
																																	pos:        position{line: 978, col: 25, offset: 30944},
																																	val:        "[^:\\r\\n]",
																																	chars:      []rune{':', '\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 963, col: 82, offset: 30343},
																													expr: &litMatcher{
																														pos:        position{line: 963, col: 82, offset: 30343},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 963, col: 87, offset: 30348},
																													label: "revremark",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 963, col: 97, offset: 30358},
																														expr: &actionExpr{
																															pos: position{line: 982, col: 27, offset: 31016},
																															run: (*parser).callonDocumentFragment746,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 982, col: 27, offset: 31016},
																																expr: &charClassMatcher{
																																	pos:        position{line: 982, col: 27, offset: 31016},
																																	val:        "[^\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 965, col: 15, offset: 30476},
																										run: (*parser).callonDocumentFragment749,
																										expr: &seqExpr{
																											pos: position{line: 965, col: 15, offset: 30476},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 965, col: 15, offset: 30476},
																													label: "revdate",
																													expr: &actionExpr{
																														pos: position{line: 978, col: 25, offset: 30944},
																														run: (*parser).callonDocumentFragment752,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 978, col: 25, offset: 30944},
																															expr: &charClassMatcher{
																																pos:        position{line: 978, col: 25, offset: 30944},
																																val:        "[^:\\r\\n]",
																																chars:      []rune{':', '\r', '\n'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 965, col: 46, offset: 30507},
																													expr: &litMatcher{
																														pos:        position{line: 965, col: 46, offset: 30507},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 965, col: 51, offset: 30512},
																													label: "revremark",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 965, col: 61, offset: 30522},
																														expr: &actionExpr{
																															pos: position{line: 982, col: 27, offset: 31016},
																															run: (*parser).callonDocumentFragment759,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 982, col: 27, offset: 31016},
																																expr: &charClassMatcher{
																																	pos:        position{line: 982, col: 27, offset: 31016},
																																	val:        "[^\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2965, col: 8, offset: 97889},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2958, col: 12, offset: 97749},
																									run: (*parser).callonDocumentFragment763,
																									expr: &choiceExpr{
																										pos: position{line: 2958, col: 13, offset: 97750},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2958, col: 13, offset: 97750},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 20, offset: 97757},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 29, offset: 97766},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2962, col: 8, offset: 97839},
																									expr: &anyMatcher{
																										line: 2962, col: 9, offset: 97840,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 885, col: 5, offset: 27860},
													label: "extraAttrs",
													expr: &zeroOrMoreExpr{
														pos: position{line: 885, col: 16, offset: 27871},
														expr: &choiceExpr{
															pos: position{line: 885, col: 17, offset: 27872},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 152, col: 5, offset: 4423},
																	run: (*parser).callonDocumentFragment773,
																	expr: &seqExpr{
																		pos: position{line: 152, col: 5, offset: 4423},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 152, col: 5, offset: 4423},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 152, col: 9, offset: 4427},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					run: (*parser).callonDocumentFragment777,
																					expr: &seqExpr{
																						pos: position{line: 162, col: 18, offset: 4814},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 162, col: 18, offset: 4814},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 162, col: 28, offset: 4824},
																								expr: &charClassMatcher{
																									pos:        position{line: 162, col: 29, offset: 4825},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 152, col: 30, offset: 4448},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 153, col: 5, offset: 4457},
																				label: "value",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 153, col: 11, offset: 4463},
																					expr: &actionExpr{
																						pos: position{line: 167, col: 5, offset: 4915},
																						run: (*parser).callonDocumentFragment785,
																						expr: &seqExpr{
																							pos: position{line: 167, col: 5, offset: 4915},
																							exprs: []interface{}{
																								&actionExpr{
																									pos: position{line: 2953, col: 11, offset: 97635},
																									run: (*parser).callonDocumentFragment787,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2953, col: 11, offset: 97635},
																										expr: &charClassMatcher{
																											pos:        position{line: 2953, col: 12, offset: 97636},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 167, col: 12, offset: 4922},
																									label: "elements",
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 167, col: 21, offset: 4931},
																										expr: &actionExpr{
																											pos: position{line: 171, col: 37, offset: 5090},
																											run: (*parser).callonDocumentFragment792,
																											expr: &seqExpr{
																												pos: position{line: 171, col: 37, offset: 5090},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 171, col: 37, offset: 5090},
																														expr: &choiceExpr{
																															pos: position{line: 2965, col: 8, offset: 97889},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 2958, col: 12, offset: 97749},
																																	run: (*parser).callonDocumentFragment796,
																																	expr: &choiceExpr{
																																		pos: position{line: 2958, col: 13, offset: 97750},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2958, col: 13, offset: 97750},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2958, col: 20, offset: 97757},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2958, col: 29, offset: 97766},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 2962, col: 8, offset: 97839},
																																	expr: &anyMatcher{
																																		line: 2962, col: 9, offset: 97840,
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 172, col: 5, offset: 5100},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 173, col: 9, offset: 5118},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 173, col: 10, offset: 5119},
																																	run: (*parser).callonDocumentFragment805,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 173, col: 10, offset: 5119},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 173, col: 10, offset: 5119},
																																			val:        "[^\\r\\n{]",
																																			chars:      []rune{'\r', '\n', '{'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 493, col: 5, offset: 15873},
																																	run: (*parser).callonDocumentFragment808,
																																	expr: &seqExpr{
																																		pos: position{line: 493, col: 5, offset: 15873},
																																		exprs: []interface{}{
																																			&andCodeExpr{
																																				pos: position{line: 493, col: 5, offset: 15873},
																																				run: (*parser).callonDocumentFragment810,
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 496, col: 5, offset: 15937},
																																				label: "element",
																																				expr: &choiceExpr{
																																					pos: position{line: 496, col: 14, offset: 15946},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 507, col: 25, offset: 16408},
																																							run: (*parser).callonDocumentFragment813,
																																							expr: &seqExpr{
																																								pos: position{line: 507, col: 25, offset: 16408},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 507, col: 25, offset: 16408},
																																										val:        "{counter:",
																																										ignoreCase: false,
																																										want:       "\"{counter:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 507, col: 37, offset: 16420},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 162, col: 18, offset: 4814},
																																											run: (*parser).callonDocumentFragment817,
																																											expr: &seqExpr{
																																												pos: position{line: 162, col: 18, offset: 4814},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 162, col: 18, offset: 4814},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 162, col: 28, offset: 4824},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 162, col: 29, offset: 4825},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 507, col: 56, offset: 16439},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 507, col: 62, offset: 16445},
																																											expr: &actionExpr{
																																												pos: position{line: 515, col: 17, offset: 16708},
																																												run: (*parser).callonDocumentFragment824,
																																												expr: &seqExpr{
																																													pos: position{line: 515, col: 17, offset: 16708},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 515, col: 17, offset: 16708},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 515, col: 21, offset: 16712},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 515, col: 28, offset: 16719},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		run: (*parser).callonDocumentFragment829,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 515, col: 28, offset: 16719},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 517, col: 9, offset: 16773},
																																																		run: (*parser).callonDocumentFragment831,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 517, col: 9, offset: 16773},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 517, col: 9, offset: 16773},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 507, col: 78, offset: 16461},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 511, col: 25, offset: 16563},
																																							run: (*parser).callonDocumentFragment835,
																																							expr: &seqExpr{
																																								pos: position{line: 511, col: 25, offset: 16563},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 511, col: 25, offset: 16563},
																																										val:        "{counter2:",
																																										ignoreCase: false,
																																										want:       "\"{counter2:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 511, col: 38, offset: 16576},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 162, col: 18, offset: 4814},
																																											run: (*parser).callonDocumentFragment839,
																																											expr: &seqExpr{
																																												pos: position{line: 162, col: 18, offset: 4814},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 162, col: 18, offset: 4814},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 162, col: 28, offset: 4824},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 162, col: 29, offset: 4825},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 511, col: 57, offset: 16595},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 511, col: 63, offset: 16601},
																																											expr: &actionExpr{
																																												pos: position{line: 515, col: 17, offset: 16708},
																																												run: (*parser).callonDocumentFragment846,
																																												expr: &seqExpr{
																																													pos: position{line: 515, col: 17, offset: 16708},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 515, col: 17, offset: 16708},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 515, col: 21, offset: 16712},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 515, col: 28, offset: 16719},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		run: (*parser).callonDocumentFragment851,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 515, col: 28, offset: 16719},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 517, col: 9, offset: 16773},
																																																		run: (*parser).callonDocumentFragment853,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 517, col: 9, offset: 16773},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 517, col: 9, offset: 16773},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 511, col: 79, offset: 16617},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 500, col: 31, offset: 16063},
																																							run: (*parser).callonDocumentFragment857,
																																							expr: &seqExpr{
																																								pos: position{line: 500, col: 31, offset: 16063},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 500, col: 31, offset: 16063},
																																										val:        "{",
																																										ignoreCase: false,
																																										want:       "\"{\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 500, col: 35, offset: 16067},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 162, col: 18, offset: 4814},
																																											run: (*parser).callonDocumentFragment861,
																																											expr: &seqExpr{
																																												pos: position{line: 162, col: 18, offset: 4814},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 162, col: 18, offset: 4814},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 162, col: 28, offset: 4824},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 162, col: 29, offset: 4825},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 500, col: 54, offset: 16086},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 177, col: 12, offset: 5247},
																																	run: (*parser).callonDocumentFragment867,
																																	expr: &litMatcher{
																																		pos:        position{line: 177, col: 12, offset: 5247},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2965, col: 8, offset: 97889},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2958, col: 12, offset: 97749},
																						run: (*parser).callonDocumentFragment870,
																						expr: &choiceExpr{
																							pos: position{line: 2958, col: 13, offset: 97750},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2958, col: 13, offset: 97750},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 20, offset: 97757},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 29, offset: 97766},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2962, col: 8, offset: 97839},
																						expr: &anyMatcher{
																							line: 2962, col: 9, offset: 97840,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 184, col: 19, offset: 5402},
																	run: (*parser).callonDocumentFragment877,
																	expr: &seqExpr{
																		pos: position{line: 184, col: 19, offset: 5402},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 184, col: 19, offset: 5402},
																				val:        ":!",
																				ignoreCase: false,
																				want:       "\":!\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 184, col: 24, offset: 5407},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					run: (*parser).callonDocumentFragment881,
																					expr: &seqExpr{
																						pos: position{line: 162, col: 18, offset: 4814},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 162, col: 18, offset: 4814},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 162, col: 28, offset: 4824},
																								expr: &charClassMatcher{
																									pos:        position{line: 162, col: 29, offset: 4825},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 184, col: 45, offset: 5428},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 184, col: 49, offset: 5432},
																				expr: &actionExpr{
																					pos: position{line: 2948, col: 10, offset: 97526},
																					run: (*parser).callonDocumentFragment888,
																					expr: &charClassMatcher{
																						pos:        position{line: 2948, col: 11, offset: 97527},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2965, col: 8, offset: 97889},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2958, col: 12, offset: 97749},
																						run: (*parser).callonDocumentFragment891,
																						expr: &choiceExpr{
																							pos: position{line: 2958, col: 13, offset: 97750},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2958, col: 13, offset: 97750},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 20, offset: 97757},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 29, offset: 97766},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2962, col: 8, offset: 97839},
																						expr: &anyMatcher{
																							line: 2962, col: 9, offset: 97840,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 186, col: 5, offset: 5499},
																	run: (*parser).callonDocumentFragment898,
																	expr: &seqExpr{
																		pos: position{line: 186, col: 5, offset: 5499},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 186, col: 5, offset: 5499},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 186, col: 9, offset: 5503},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					run: (*parser).callonDocumentFragment902,
																					expr: &seqExpr{
																						pos: position{line: 162, col: 18, offset: 4814},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 162, col: 18, offset: 4814},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 162, col: 28, offset: 4824},
																								expr: &charClassMatcher{
																									pos:        position{line: 162, col: 29, offset: 4825},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 186, col: 30, offset: 5524},
																				val:        "!:",
																				ignoreCase: false,
																				want:       "\"!:\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 186, col: 35, offset: 5529},
																				expr: &actionExpr{
																					pos: position{line: 2948, col: 10, offset: 97526},
																					run: (*parser).callonDocumentFragment909,
																					expr: &charClassMatcher{
																						pos:        position{line: 2948, col: 11, offset: 97527},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2965, col: 8, offset: 97889},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2958, col: 12, offset: 97749},
																						run: (*parser).callonDocumentFragment912,
																						expr: &choiceExpr{
																							pos: position{line: 2958, col: 13, offset: 97750},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2958, col: 13, offset: 97750},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 20, offset: 97757},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 29, offset: 97766},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2962, col: 8, offset: 97839},
																						expr: &anyMatcher{
																							line: 2962, col: 9, offset: 97840,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 526, col: 14, offset: 17074},
										run: (*parser).callonDocumentFragment919,
										expr: &seqExpr{
											pos: position{line: 526, col: 14, offset: 17074},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 526, col: 14, offset: 17074},
													expr: &notExpr{
														pos: position{line: 2962, col: 8, offset: 97839},
														expr: &anyMatcher{
															line: 2962, col: 9, offset: 97840,
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 526, col: 19, offset: 17079},
													expr: &actionExpr{
														pos: position{line: 2948, col: 10, offset: 97526},
														run: (*parser).callonDocumentFragment925,
														expr: &charClassMatcher{
															pos:        position{line: 2948, col: 11, offset: 97527},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonDocumentFragment928,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2414, col: 5, offset: 81357},
										run: (*parser).callonDocumentFragment935,
										expr: &seqExpr{
											pos: position{line: 2414, col: 5, offset: 81357},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2414, col: 5, offset: 81357},
													run: (*parser).callonDocumentFragment937,
												},
												&labeledExpr{
													pos:   position{line: 2417, col: 5, offset: 81420},
													label: "level",
													expr: &actionExpr{
														pos: position{line: 2417, col: 12, offset: 81427},
														run: (*parser).callonDocumentFragment939,
														expr: &oneOrMoreExpr{
															pos: position{line: 2417, col: 12, offset: 81427},
															expr: &litMatcher{
																pos:        position{line: 2417, col: 13, offset: 81428},
																val:        "=",
																ignoreCase: false,
																want:       "\"=\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 2421, col: 5, offset: 81536},
													run: (*parser).callonDocumentFragment942,
												},
												&actionExpr{
													pos: position{line: 2953, col: 11, offset: 97635},
													run: (*parser).callonDocumentFragment943,
													expr: &oneOrMoreExpr{
														pos: position{line: 2953, col: 11, offset: 97635},
														expr: &charClassMatcher{
															pos:        position{line: 2953, col: 12, offset: 97636},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2425, col: 12, offset: 81695},
													label: "title",
													expr: &actionExpr{
														pos: position{line: 2429, col: 20, offset: 81823},
														run: (*parser).callonDocumentFragment947,
														expr: &oneOrMoreExpr{
															pos: position{line: 2429, col: 20, offset: 81823},
															expr: &charClassMatcher{
																pos:        position{line: 2429, col: 20, offset: 81823},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonDocumentFragment951,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 34, col: 11, offset: 860},
										name: "DelimitedBlock",
									},
									&actionExpr{
										pos: position{line: 2818, col: 18, offset: 93337},
										run: (*parser).callonDocumentFragment959,
										expr: &seqExpr{
											pos: position{line: 2818, col: 18, offset: 93337},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2818, col: 19, offset: 93338},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2818, col: 19, offset: 93338},
															val:        "***",
															ignoreCase: false,
															want:       "\"***\"",
														},
														&litMatcher{
															pos:        position{line: 2818, col: 27, offset: 93346},
															val:        "* * *",
															ignoreCase: false,
															want:       "\"* * *\"",
														},
														&litMatcher{
															pos:        position{line: 2818, col: 37, offset: 93356},
															val:        "---",
															ignoreCase: false,
															want:       "\"---\"",
														},
														&litMatcher{
															pos:        position{line: 2818, col: 45, offset: 93364},
															val:        "- - -",
															ignoreCase: false,
															want:       "\"- - -\"",
														},
														&litMatcher{
															pos:        position{line: 2818, col: 55, offset: 93374},
															val:        "___",
															ignoreCase: false,
															want:       "\"___\"",
														},
														&litMatcher{
															pos:        position{line: 2818, col: 63, offset: 93382},
															val:        "_ _ _",
															ignoreCase: false,
															want:       "\"_ _ _\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2962, col: 8, offset: 97839},
													expr: &anyMatcher{
														line: 2962, col: 9, offset: 97840,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 36, col: 11, offset: 946},
										name: "ListElements",
									},
									&actionExpr{
										pos: position{line: 2717, col: 5, offset: 90469},
										run: (*parser).callonDocumentFragment971,
										expr: &seqExpr{
											pos: position{line: 2717, col: 5, offset: 90469},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2724, col: 19, offset: 90645},
													val:        "|===",
													ignoreCase: false,
													want:       "\"|===\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2724, col: 26, offset: 90652},
													expr: &actionExpr{
														pos: position{line: 2948, col: 10, offset: 97526},
														run: (*parser).callonDocumentFragment975,
														expr: &charClassMatcher{
															pos:        position{line: 2948, col: 11, offset: 97527},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonDocumentFragment978,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2718, col: 5, offset: 90493},
													label: "header",
													expr: &zeroOrOneExpr{
														pos: position{line: 2718, col: 12, offset: 90500},
														expr: &actionExpr{
															pos: position{line: 2732, col: 5, offset: 90812},
															run: (*parser).callonDocumentFragment987,
															expr: &seqExpr{
																pos: position{line: 2732, col: 5, offset: 90812},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 2732, col: 5, offset: 90812},
																		label: "cells",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2732, col: 11, offset: 90818},
																			expr: &actionExpr{
																				pos: position{line: 2738, col: 5, offset: 90935},
																				run: (*parser).callonDocumentFragment991,
																				expr: &seqExpr{
																					pos: position{line: 2738, col: 5, offset: 90935},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2738, col: 5, offset: 90935},
																							val:        "|",
																							ignoreCase: false,
																							want:       "\"|\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 2738, col: 9, offset: 90939},
																							expr: &actionExpr{
																								pos: position{line: 2948, col: 10, offset: 97526},
																								run: (*parser).callonDocumentFragment995,
																								expr: &charClassMatcher{
																									pos:        position{line: 2948, col: 11, offset: 97527},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 2739, col: 5, offset: 90951},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 2739, col: 14, offset: 90960},
																								expr: &actionExpr{
																									pos: position{line: 2771, col: 5, offset: 91748},
																									run: (*parser).callonDocumentFragment999,
																									expr: &labeledExpr{
																										pos:   position{line: 2771, col: 5, offset: 91748},
																										label: "content",
																										expr: &actionExpr{
																											pos: position{line: 2771, col: 14, offset: 91757},
																											run: (*parser).callonDocumentFragment1001,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2771, col: 14, offset: 91757},
																												expr: &charClassMatcher{
																													pos:        position{line: 2771, col: 14, offset: 91757},
																													val:        "[^\\r\\n|]",
																													chars:      []rune{'\r', '\n', '|'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2965, col: 8, offset: 97889},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2958, col: 12, offset: 97749},
																				run: (*parser).callonDocumentFragment1005,
																				expr: &choiceExpr{
																					pos: position{line: 2958, col: 13, offset: 97750},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2958, col: 13, offset: 97750},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2958, col: 20, offset: 97757},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2958, col: 29, offset: 97766},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2962, col: 8, offset: 97839},
																				expr: &anyMatcher{
																					line: 2962, col: 9, offset: 97840,
																				},
																			},
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2733, col: 5, offset: 90840},
																		expr: &actionExpr{
																			pos: position{line: 526, col: 14, offset: 17074},
																			run: (*parser).callonDocumentFragment1013,
																			expr: &seqExpr{
																				pos: position{line: 526, col: 14, offset: 17074},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 526, col: 14, offset: 17074},
																						expr: &notExpr{
																							pos: position{line: 2962, col: 8, offset: 97839},
																							expr: &anyMatcher{
																								line: 2962, col: 9, offset: 97840,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 526, col: 19, offset: 17079},
																						expr: &actionExpr{
																							pos: position{line: 2948, col: 10, offset: 97526},
																							run: (*parser).callonDocumentFragment1019,
																							expr: &charClassMatcher{
																								pos:        position{line: 2948, col: 11, offset: 97527},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2965, col: 8, offset: 97889},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2958, col: 12, offset: 97749},
																								run: (*parser).callonDocumentFragment1022,
																								expr: &choiceExpr{
																									pos: position{line: 2958, col: 13, offset: 97750},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2958, col: 13, offset: 97750},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2958, col: 20, offset: 97757},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2958, col: 29, offset: 97766},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2962, col: 8, offset: 97839},
																								expr: &anyMatcher{
																									line: 2962, col: 9, offset: 97840,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2719, col: 5, offset: 90519},
													label: "rows",
													expr: &zeroOrMoreExpr{
														pos: position{line: 2719, col: 10, offset: 90524},
														expr: &choiceExpr{
															pos: position{line: 2743, col: 13, offset: 91057},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2753, col: 5, offset: 91276},
																	run: (*parser).callonDocumentFragment1032,
																	expr: &seqExpr{
																		pos: position{line: 2753, col: 5, offset: 91276},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2753, col: 5, offset: 91276},
																				expr: &choiceExpr{
																					pos: position{line: 2728, col: 22, offset: 90725},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2724, col: 19, offset: 90645},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2724, col: 19, offset: 90645},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2724, col: 26, offset: 90652},
																									expr: &actionExpr{
																										pos: position{line: 2948, col: 10, offset: 97526},
																										run: (*parser).callonDocumentFragment1039,
																										expr: &charClassMatcher{
																											pos:        position{line: 2948, col: 11, offset: 97527},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2965, col: 8, offset: 97889},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2958, col: 12, offset: 97749},
																											run: (*parser).callonDocumentFragment1042,
																											expr: &choiceExpr{
																												pos: position{line: 2958, col: 13, offset: 97750},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2958, col: 13, offset: 97750},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2958, col: 20, offset: 97757},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2958, col: 29, offset: 97766},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2962, col: 8, offset: 97839},
																											expr: &anyMatcher{
																												line: 2962, col: 9, offset: 97840,
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2962, col: 8, offset: 97839},
																							expr: &anyMatcher{
																								line: 2962, col: 9, offset: 97840,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2754, col: 5, offset: 91299},
																				label: "cells",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2754, col: 11, offset: 91305},
																					expr: &actionExpr{
																						pos: position{line: 2754, col: 12, offset: 91306},
																						run: (*parser).callonDocumentFragment1053,
																						expr: &seqExpr{
																							pos: position{line: 2754, col: 12, offset: 91306},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 2754, col: 12, offset: 91306},
																									label: "cell",
																									expr: &actionExpr{
																										pos: position{line: 2763, col: 5, offset: 91547},
																										run: (*parser).callonDocumentFragment1056,
																										expr: &seqExpr{
																											pos: position{line: 2763, col: 5, offset: 91547},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 2763, col: 5, offset: 91547},
																													expr: &choiceExpr{
																														pos: position{line: 2728, col: 22, offset: 90725},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 2724, col: 19, offset: 90645},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2724, col: 19, offset: 90645},
																																		val:        "|===",
																																		ignoreCase: false,
																																		want:       "\"|===\"",
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 2724, col: 26, offset: 90652},
																																		expr: &actionExpr{
																																			pos: position{line: 2948, col: 10, offset: 97526},
																																			run: (*parser).callonDocumentFragment1063,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2948, col: 11, offset: 97527},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 2965, col: 8, offset: 97889},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 2958, col: 12, offset: 97749},
																																				run: (*parser).callonDocumentFragment1066,
																																				expr: &choiceExpr{
																																					pos: position{line: 2958, col: 13, offset: 97750},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 2958, col: 13, offset: 97750},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2958, col: 20, offset: 97757},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2958, col: 29, offset: 97766},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2962, col: 8, offset: 97839},
																																				expr: &anyMatcher{
																																					line: 2962, col: 9, offset: 97840,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2962, col: 8, offset: 97839},
																																expr: &anyMatcher{
																																	line: 2962, col: 9, offset: 97840,
																																},
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2764, col: 5, offset: 91570},
																													expr: &actionExpr{
																														pos: position{line: 526, col: 14, offset: 17074},
																														run: (*parser).callonDocumentFragment1076,
																														expr: &seqExpr{
																															pos: position{line: 526, col: 14, offset: 17074},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 526, col: 14, offset: 17074},
																																	expr: &notExpr{
																																		pos: position{line: 2962, col: 8, offset: 97839},
																																		expr: &anyMatcher{
																																			line: 2962, col: 9, offset: 97840,
																																		},
																																	},
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 526, col: 19, offset: 17079},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonDocumentFragment1082,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonDocumentFragment1085,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2765, col: 5, offset: 91585},
																													val:        "|",
																													ignoreCase: false,
																													want:       "\"|\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 2765, col: 9, offset: 91589},
																													expr: &actionExpr{
																														pos: position{line: 2948, col: 10, offset: 97526},
																														run: (*parser).callonDocumentFragment1094,
																														expr: &charClassMatcher{
																															pos:        position{line: 2948, col: 11, offset: 97527},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 2765, col: 16, offset: 91596},
																													label: "content",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 2765, col: 25, offset: 91605},
																														expr: &actionExpr{
																															pos: position{line: 2771, col: 5, offset: 91748},
																															run: (*parser).callonDocumentFragment1098,
																															expr: &labeledExpr{
																																pos:   position{line: 2771, col: 5, offset: 91748},
																																label: "content",
																																expr: &actionExpr{
																																	pos: position{line: 2771, col: 14, offset: 91757},
																																	run: (*parser).callonDocumentFragment1100,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2771, col: 14, offset: 91757},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2771, col: 14, offset: 91757},
																																			val:        "[^\\r\\n|]",
																																			chars:      []rune{'\r', '\n', '|'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2965, col: 8, offset: 97889},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2958, col: 12, offset: 97749},
																											run: (*parser).callonDocumentFragment1104,
																											expr: &choiceExpr{
																												pos: position{line: 2958, col: 13, offset: 97750},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2958, col: 13, offset: 97750},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2958, col: 20, offset: 97757},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2958, col: 29, offset: 97766},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2962, col: 8, offset: 97839},
																											expr: &anyMatcher{
																												line: 2962, col: 9, offset: 97840,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2757, col: 6, offset: 91368},
																				alternatives: []interface{}{
																					&oneOrMoreExpr{
																						pos: position{line: 2757, col: 6, offset: 91368},
																						expr: &actionExpr{
																							pos: position{line: 526, col: 14, offset: 17074},
																							run: (*parser).callonDocumentFragment1113,
																							expr: &seqExpr{
																								pos: position{line: 526, col: 14, offset: 17074},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 526, col: 14, offset: 17074},
																										expr: &notExpr{
																											pos: position{line: 2962, col: 8, offset: 97839},
																											expr: &anyMatcher{
																												line: 2962, col: 9, offset: 97840,
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 526, col: 19, offset: 17079},
																										expr: &actionExpr{
																											pos: position{line: 2948, col: 10, offset: 97526},
																											run: (*parser).callonDocumentFragment1119,
																											expr: &charClassMatcher{
																												pos:        position{line: 2948, col: 11, offset: 97527},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2965, col: 8, offset: 97889},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2958, col: 12, offset: 97749},
																												run: (*parser).callonDocumentFragment1122,
																												expr: &choiceExpr{
																													pos: position{line: 2958, col: 13, offset: 97750},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2958, col: 13, offset: 97750},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2958, col: 20, offset: 97757},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2958, col: 29, offset: 97766},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2962, col: 8, offset: 97839},
																												expr: &anyMatcher{
																													line: 2962, col: 9, offset: 97840,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&andExpr{
																						pos: position{line: 2757, col: 19, offset: 91381},
																						expr: &choiceExpr{
																							pos: position{line: 2728, col: 22, offset: 90725},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2724, col: 19, offset: 90645},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2724, col: 19, offset: 90645},
																											val:        "|===",
																											ignoreCase: false,
																											want:       "\"|===\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 2724, col: 26, offset: 90652},
																											expr: &actionExpr{
																												pos: position{line: 2948, col: 10, offset: 97526},
																												run: (*parser).callonDocumentFragment1134,
																												expr: &charClassMatcher{
																													pos:        position{line: 2948, col: 11, offset: 97527},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2965, col: 8, offset: 97889},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2958, col: 12, offset: 97749},
																													run: (*parser).callonDocumentFragment1137,
																													expr: &choiceExpr{
																														pos: position{line: 2958, col: 13, offset: 97750},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2958, col: 13, offset: 97750},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2958, col: 20, offset: 97757},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2958, col: 29, offset: 97766},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2962, col: 8, offset: 97839},
																													expr: &anyMatcher{
																														line: 2962, col: 9, offset: 97840,
																													},
																												},
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2962, col: 8, offset: 97839},
																									expr: &anyMatcher{
																										line: 2962, col: 9, offset: 97840,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2746, col: 5, offset: 91124},
																	run: (*parser).callonDocumentFragment1146,
																	expr: &seqExpr{
																		pos: position{line: 2746, col: 5, offset: 91124},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2746, col: 5, offset: 91124},
																				expr: &choiceExpr{
																					pos: position{line: 2728, col: 22, offset: 90725},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2724, col: 19, offset: 90645},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2724, col: 19, offset: 90645},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2724, col: 26, offset: 90652},
																									expr: &actionExpr{
																										pos: position{line: 2948, col: 10, offset: 97526},
																										run: (*parser).callonDocumentFragment1153,
																										expr: &charClassMatcher{
																											pos:        position{line: 2948, col: 11, offset: 97527},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2965, col: 8, offset: 97889},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2958, col: 12, offset: 97749},
																											run: (*parser).callonDocumentFragment1156,
																											expr: &choiceExpr{
																												pos: position{line: 2958, col: 13, offset: 97750},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2958, col: 13, offset: 97750},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2958, col: 20, offset: 97757},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2958, col: 29, offset: 97766},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2962, col: 8, offset: 97839},
																											expr: &anyMatcher{
																												line: 2962, col: 9, offset: 97840,
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2962, col: 8, offset: 97839},
																							expr: &anyMatcher{
																								line: 2962, col: 9, offset: 97840,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2747, col: 5, offset: 91147},
																				label: "cells",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2747, col: 11, offset: 91153},
																					expr: &actionExpr{
																						pos: position{line: 2763, col: 5, offset: 91547},
																						run: (*parser).callonDocumentFragment1167,
																						expr: &seqExpr{
																							pos: position{line: 2763, col: 5, offset: 91547},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 2763, col: 5, offset: 91547},
																									expr: &choiceExpr{
																										pos: position{line: 2728, col: 22, offset: 90725},
																										alternatives: []interface{}{
																											&seqExpr{
																												pos: position{line: 2724, col: 19, offset: 90645},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2724, col: 19, offset: 90645},
																														val:        "|===",
																														ignoreCase: false,
																														want:       "\"|===\"",
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 2724, col: 26, offset: 90652},
																														expr: &actionExpr{
																															pos: position{line: 2948, col: 10, offset: 97526},
																															run: (*parser).callonDocumentFragment1174,
																															expr: &charClassMatcher{
																																pos:        position{line: 2948, col: 11, offset: 97527},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 2965, col: 8, offset: 97889},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 2958, col: 12, offset: 97749},
																																run: (*parser).callonDocumentFragment1177,
																																expr: &choiceExpr{
																																	pos: position{line: 2958, col: 13, offset: 97750},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2958, col: 13, offset: 97750},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2958, col: 20, offset: 97757},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2958, col: 29, offset: 97766},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2962, col: 8, offset: 97839},
																																expr: &anyMatcher{
																																	line: 2962, col: 9, offset: 97840,
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2962, col: 8, offset: 97839},
																												expr: &anyMatcher{
																													line: 2962, col: 9, offset: 97840,
																												},
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2764, col: 5, offset: 91570},
																									expr: &actionExpr{
																										pos: position{line: 526, col: 14, offset: 17074},
																										run: (*parser).callonDocumentFragment1187,
																										expr: &seqExpr{
																											pos: position{line: 526, col: 14, offset: 17074},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 526, col: 14, offset: 17074},
																													expr: &notExpr{
																														pos: position{line: 2962, col: 8, offset: 97839},
																														expr: &anyMatcher{
																															line: 2962, col: 9, offset: 97840,
																														},
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 526, col: 19, offset: 17079},
																													expr: &actionExpr{
																														pos: position{line: 2948, col: 10, offset: 97526},
																														run: (*parser).callonDocumentFragment1193,
																														expr: &charClassMatcher{
																															pos:        position{line: 2948, col: 11, offset: 97527},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2965, col: 8, offset: 97889},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 2958, col: 12, offset: 97749},
																															run: (*parser).callonDocumentFragment1196,
																															expr: &choiceExpr{
																																pos: position{line: 2958, col: 13, offset: 97750},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2958, col: 13, offset: 97750},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2958, col: 20, offset: 97757},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2958, col: 29, offset: 97766},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2962, col: 8, offset: 97839},
																															expr: &anyMatcher{
																																line: 2962, col: 9, offset: 97840,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2765, col: 5, offset: 91585},
																									val:        "|",
																									ignoreCase: false,
																									want:       "\"|\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2765, col: 9, offset: 91589},
																									expr: &actionExpr{
																										pos: position{line: 2948, col: 10, offset: 97526},
																										run: (*parser).callonDocumentFragment1205,
																										expr: &charClassMatcher{
																											pos:        position{line: 2948, col: 11, offset: 97527},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 2765, col: 16, offset: 91596},
																									label: "content",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 2765, col: 25, offset: 91605},
																										expr: &actionExpr{
																											pos: position{line: 2771, col: 5, offset: 91748},
																											run: (*parser).callonDocumentFragment1209,
																											expr: &labeledExpr{
																												pos:   position{line: 2771, col: 5, offset: 91748},
																												label: "content",
																												expr: &actionExpr{
																													pos: position{line: 2771, col: 14, offset: 91757},
																													run: (*parser).callonDocumentFragment1211,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 2771, col: 14, offset: 91757},
																														expr: &charClassMatcher{
																															pos:        position{line: 2771, col: 14, offset: 91757},
																															val:        "[^\\r\\n|]",
																															chars:      []rune{'\r', '\n', '|'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2965, col: 8, offset: 97889},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2958, col: 12, offset: 97749},
																						run: (*parser).callonDocumentFragment1215,
																						expr: &choiceExpr{
																							pos: position{line: 2958, col: 13, offset: 97750},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2958, col: 13, offset: 97750},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 20, offset: 97757},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 29, offset: 97766},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2962, col: 8, offset: 97839},
																						expr: &anyMatcher{
																							line: 2962, col: 9, offset: 97840,
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2748, col: 5, offset: 91174},
																				expr: &actionExpr{
																					pos: position{line: 526, col: 14, offset: 17074},
																					run: (*parser).callonDocumentFragment1223,
																					expr: &seqExpr{
																						pos: position{line: 526, col: 14, offset: 17074},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 526, col: 14, offset: 17074},
																								expr: &notExpr{
																									pos: position{line: 2962, col: 8, offset: 97839},
																									expr: &anyMatcher{
																										line: 2962, col: 9, offset: 97840,
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 526, col: 19, offset: 17079},
																								expr: &actionExpr{
																									pos: position{line: 2948, col: 10, offset: 97526},
																									run: (*parser).callonDocumentFragment1229,
																									expr: &charClassMatcher{
																										pos:        position{line: 2948, col: 11, offset: 97527},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonDocumentFragment1232,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2728, col: 22, offset: 90725},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 2724, col: 19, offset: 90645},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2724, col: 19, offset: 90645},
																	val:        "|===",
																	ignoreCase: false,
																	want:       "\"|===\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2724, col: 26, offset: 90652},
																	expr: &actionExpr{
																		pos: position{line: 2948, col: 10, offset: 97526},
																		run: (*parser).callonDocumentFragment1243,
																		expr: &charClassMatcher{
																			pos:        position{line: 2948, col: 11, offset: 97527},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonDocumentFragment1246,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2667, col: 22, offset: 88913},
										run: (*parser).callonDocumentFragment1255,
										expr: &seqExpr{
											pos: position{line: 2667, col: 22, offset: 88913},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2672, col: 31, offset: 89134},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2672, col: 36, offset: 89139},
													expr: &litMatcher{
														pos:        position{line: 2672, col: 37, offset: 89140},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2667, col: 49, offset: 88940},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2674, col: 29, offset: 89175},
														run: (*parser).callonDocumentFragment1261,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2674, col: 29, offset: 89175},
															expr: &charClassMatcher{
																pos:        position{line: 2674, col: 29, offset: 89175},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonDocumentFragment1265,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1650, col: 5, offset: 54853},
										run: (*parser).callonDocumentFragment1272,
										expr: &seqExpr{
											pos: position{line: 1650, col: 5, offset: 54853},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1650, col: 5, offset: 54853},
													label: "kind",
													expr: &choiceExpr{
														pos: position{line: 136, col: 19, offset: 3960},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 136, col: 19, offset: 3960},
																run: (*parser).callonDocumentFragment1276,
																expr: &litMatcher{
																	pos:        position{line: 136, col: 19, offset: 3960},
																	val:        "TIP",
																	ignoreCase: false,
																	want:       "\"TIP\"",
																},
															},
															&actionExpr{
																pos: position{line: 138, col: 5, offset: 3998},
																run: (*parser).callonDocumentFragment1278,
																expr: &litMatcher{
																	pos:        position{line: 138, col: 5, offset: 3998},
																	val:        "NOTE",
																	ignoreCase: false,
																	want:       "\"NOTE\"",
																},
															},
															&actionExpr{
																pos: position{line: 140, col: 5, offset: 4038},
																run: (*parser).callonDocumentFragment1280,
																expr: &litMatcher{
																	pos:        position{line: 140, col: 5, offset: 4038},
																	val:        "IMPORTANT",
																	ignoreCase: false,
																	want:       "\"IMPORTANT\"",
																},
															},
															&actionExpr{
																pos: position{line: 142, col: 5, offset: 4088},
																run: (*parser).callonDocumentFragment1282,
																expr: &litMatcher{
																	pos:        position{line: 142, col: 5, offset: 4088},
																	val:        "WARNING",
																	ignoreCase: false,
																	want:       "\"WARNING\"",
																},
															},
															&actionExpr{
																pos: position{line: 144, col: 5, offset: 4134},
																run: (*parser).callonDocumentFragment1284,
																expr: &litMatcher{
																	pos:        position{line: 144, col: 5, offset: 4134},
																	val:        "CAUTION",
																	ignoreCase: false,
																	want:       "\"CAUTION\"",
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1650, col: 27, offset: 54875},
													val:        ": ",
													ignoreCase: false,
													want:       "\": \"",
												},
												&labeledExpr{
													pos:   position{line: 1651, col: 5, offset: 54885},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1662, col: 5, offset: 55229},
														run: (*parser).callonDocumentFragment1288,
														expr: &seqExpr{
															pos: position{line: 1662, col: 5, offset: 55229},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1662, col: 5, offset: 55229},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1662, col: 14, offset: 55238},
																		run: (*parser).callonDocumentFragment1291,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1662, col: 14, offset: 55238},
																			expr: &charClassMatcher{
																				pos:        position{line: 1662, col: 14, offset: 55238},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1665, col: 5, offset: 55295},
																	run: (*parser).callonDocumentFragment1294,
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonDocumentFragment1296,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1652, col: 5, offset: 54919},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1652, col: 16, offset: 54930},
														expr: &actionExpr{
															pos: position{line: 1653, col: 9, offset: 54940},
															run: (*parser).callonDocumentFragment1305,
															expr: &seqExpr{
																pos: position{line: 1653, col: 9, offset: 54940},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1653, col: 9, offset: 54940},
																		expr: &seqExpr{
																			pos: position{line: 1392, col: 34, offset: 46343},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1392, col: 34, offset: 46343},
																					val:        "+",
																					ignoreCase: false,
																					want:       "\"+\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1392, col: 38, offset: 46347},
																					expr: &actionExpr{
																						pos: position{line: 2948, col: 10, offset: 97526},
																						run: (*parser).callonDocumentFragment1311,
																						expr: &charClassMatcher{
																							pos:        position{line: 2948, col: 11, offset: 97527},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2958, col: 12, offset: 97749},
																					run: (*parser).callonDocumentFragment1313,
																					expr: &choiceExpr{
																						pos: position{line: 2958, col: 13, offset: 97750},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2958, col: 13, offset: 97750},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 20, offset: 97757},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 29, offset: 97766},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1654, col: 9, offset: 54979},
																		label: "line",
																		expr: &choiceExpr{
																			pos: position{line: 1654, col: 15, offset: 54985},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2667, col: 22, offset: 88913},
																					run: (*parser).callonDocumentFragment1320,
																					expr: &seqExpr{
																						pos: position{line: 2667, col: 22, offset: 88913},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2672, col: 31, offset: 89134},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2672, col: 36, offset: 89139},
																								expr: &litMatcher{
																									pos:        position{line: 2672, col: 37, offset: 89140},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2667, col: 49, offset: 88940},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2674, col: 29, offset: 89175},
																									run: (*parser).callonDocumentFragment1326,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2674, col: 29, offset: 89175},
																										expr: &charClassMatcher{
																											pos:        position{line: 2674, col: 29, offset: 89175},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonDocumentFragment1330,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1662, col: 5, offset: 55229},
																					run: (*parser).callonDocumentFragment1337,
																					expr: &seqExpr{
																						pos: position{line: 1662, col: 5, offset: 55229},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1662, col: 5, offset: 55229},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1662, col: 14, offset: 55238},
																									run: (*parser).callonDocumentFragment1340,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1662, col: 14, offset: 55238},
																										expr: &charClassMatcher{
																											pos:        position{line: 1662, col: 14, offset: 55238},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1665, col: 5, offset: 55295},
																								run: (*parser).callonDocumentFragment1343,
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonDocumentFragment1345,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1673, col: 5, offset: 55459},
										run: (*parser).callonDocumentFragment1352,
										expr: &seqExpr{
											pos: position{line: 1673, col: 5, offset: 55459},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1673, col: 5, offset: 55459},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1680, col: 5, offset: 55744},
														run: (*parser).callonDocumentFragment1355,
														expr: &seqExpr{
															pos: position{line: 1680, col: 5, offset: 55744},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1680, col: 5, offset: 55744},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1680, col: 14, offset: 55753},
																		run: (*parser).callonDocumentFragment1358,
																		expr: &seqExpr{
																			pos: position{line: 1680, col: 14, offset: 55753},
																			exprs: []interface{}{
																				&actionExpr{
																					pos: position{line: 2953, col: 11, offset: 97635},
																					run: (*parser).callonDocumentFragment1360,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2953, col: 11, offset: 97635},
																						expr: &charClassMatcher{
																							pos:        position{line: 2953, col: 12, offset: 97636},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1680, col: 21, offset: 55760},
																					expr: &charClassMatcher{
																						pos:        position{line: 1680, col: 21, offset: 55760},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1683, col: 5, offset: 55817},
																	run: (*parser).callonDocumentFragment1365,
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonDocumentFragment1367,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1674, col: 5, offset: 55500},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1674, col: 16, offset: 55511},
														expr: &choiceExpr{
															pos: position{line: 1674, col: 17, offset: 55512},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2667, col: 22, offset: 88913},
																	run: (*parser).callonDocumentFragment1377,
																	expr: &seqExpr{
																		pos: position{line: 2667, col: 22, offset: 88913},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2672, col: 31, offset: 89134},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																			&notExpr{
																				pos: position{line: 2672, col: 36, offset: 89139},
																				expr: &litMatcher{
																					pos:        position{line: 2672, col: 37, offset: 89140},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2667, col: 49, offset: 88940},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 2674, col: 29, offset: 89175},
																					run: (*parser).callonDocumentFragment1383,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 2674, col: 29, offset: 89175},
																						expr: &charClassMatcher{
																							pos:        position{line: 2674, col: 29, offset: 89175},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2965, col: 8, offset: 97889},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2958, col: 12, offset: 97749},
																						run: (*parser).callonDocumentFragment1387,
																						expr: &choiceExpr{
																							pos: position{line: 2958, col: 13, offset: 97750},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2958, col: 13, offset: 97750},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 20, offset: 97757},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 29, offset: 97766},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2962, col: 8, offset: 97839},
																						expr: &anyMatcher{
																							line: 2962, col: 9, offset: 97840,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1662, col: 5, offset: 55229},
																	run: (*parser).callonDocumentFragment1394,
																	expr: &seqExpr{
																		pos: position{line: 1662, col: 5, offset: 55229},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1662, col: 5, offset: 55229},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 1662, col: 14, offset: 55238},
																					run: (*parser).callonDocumentFragment1397,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1662, col: 14, offset: 55238},
																						expr: &charClassMatcher{
																							pos:        position{line: 1662, col: 14, offset: 55238},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1665, col: 5, offset: 55295},
																				run: (*parser).callonDocumentFragment1400,
																			},
																			&choiceExpr{
																				pos: position{line: 2965, col: 8, offset: 97889},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2958, col: 12, offset: 97749},
																						run: (*parser).callonDocumentFragment1402,
																						expr: &choiceExpr{
																							pos: position{line: 2958, col: 13, offset: 97750},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2958, col: 13, offset: 97750},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 20, offset: 97757},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 29, offset: 97766},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2962, col: 8, offset: 97839},
																						expr: &anyMatcher{
																							line: 2962, col: 9, offset: 97840,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1103, col: 5, offset: 35179},
										run: (*parser).callonDocumentFragment1409,
										expr: &seqExpr{
											pos: position{line: 1103, col: 5, offset: 35179},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 1103, col: 5, offset: 35179},
													run: (*parser).callonDocumentFragment1411,
												},
												&labeledExpr{
													pos:   position{line: 1106, col: 5, offset: 35237},
													label: "frontmatter",
													expr: &actionExpr{
														pos: position{line: 1112, col: 20, offset: 35394},
														run: (*parser).callonDocumentFragment1413,
														expr: &seqExpr{
															pos: position{line: 1112, col: 20, offset: 35394},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1116, col: 30, offset: 35566},
																	val:        "---",
																	ignoreCase: false,
																	want:       "\"---\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1116, col: 36, offset: 35572},
																	expr: &actionExpr{
																		pos: position{line: 2948, col: 10, offset: 97526},
																		run: (*parser).callonDocumentFragment1417,
																		expr: &charClassMatcher{
																			pos:        position{line: 2948, col: 11, offset: 97527},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonDocumentFragment1420,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1112, col: 45, offset: 35419},
																	label: "content",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 1112, col: 53, offset: 35427},
																		expr: &actionExpr{
																			pos: position{line: 1118, col: 27, offset: 35610},
																			run: (*parser).callonDocumentFragment1429,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 1118, col: 27, offset: 35610},
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1118, col: 28, offset: 35611},
																					expr: &seqExpr{
																						pos: position{line: 1118, col: 29, offset: 35612},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 1118, col: 29, offset: 35612},
																								expr: &seqExpr{
																									pos: position{line: 1116, col: 30, offset: 35566},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 1116, col: 30, offset: 35566},
																											val:        "---",
																											ignoreCase: false,
																											want:       "\"---\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 1116, col: 36, offset: 35572},
																											expr: &actionExpr{
																												pos: position{line: 2948, col: 10, offset: 97526},
																												run: (*parser).callonDocumentFragment1437,
																												expr: &charClassMatcher{
																													pos:        position{line: 2948, col: 11, offset: 97527},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2965, col: 8, offset: 97889},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2958, col: 12, offset: 97749},
																													run: (*parser).callonDocumentFragment1440,
																													expr: &choiceExpr{
																														pos: position{line: 2958, col: 13, offset: 97750},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2958, col: 13, offset: 97750},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2958, col: 20, offset: 97757},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2958, col: 29, offset: 97766},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2962, col: 8, offset: 97839},
																													expr: &anyMatcher{
																														line: 2962, col: 9, offset: 97840,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&anyMatcher{
																								line: 1118, col: 55, offset: 35638,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1116, col: 30, offset: 35566},
																	val:        "---",
																	ignoreCase: false,
																	want:       "\"---\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1116, col: 36, offset: 35572},
																	expr: &actionExpr{
																		pos: position{line: 2948, col: 10, offset: 97526},
																		run: (*parser).callonDocumentFragment1450,
																		expr: &charClassMatcher{
																			pos:        position{line: 2948, col: 11, offset: 97527},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonDocumentFragment1453,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1637, col: 5, offset: 54483},
										run: (*parser).callonDocumentFragment1460,
										expr: &seqExpr{
											pos: position{line: 1637, col: 5, offset: 54483},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1637, col: 5, offset: 54483},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1662, col: 5, offset: 55229},
														run: (*parser).callonDocumentFragment1463,
														expr: &seqExpr{
															pos: position{line: 1662, col: 5, offset: 55229},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1662, col: 5, offset: 55229},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1662, col: 14, offset: 55238},
																		run: (*parser).callonDocumentFragment1466,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1662, col: 14, offset: 55238},
																			expr: &charClassMatcher{
																				pos:        position{line: 1662, col: 14, offset: 55238},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1665, col: 5, offset: 55295},
																	run: (*parser).callonDocumentFragment1469,
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonDocumentFragment1471,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1638, col: 5, offset: 54517},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1638, col: 16, offset: 54528},
														expr: &actionExpr{
															pos: position{line: 1639, col: 9, offset: 54538},
															run: (*parser).callonDocumentFragment1480,
															expr: &seqExpr{
																pos: position{line: 1639, col: 9, offset: 54538},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1639, col: 9, offset: 54538},
																		expr: &notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1640, col: 9, offset: 54551},
																		expr: &seqExpr{
																			pos: position{line: 1392, col: 34, offset: 46343},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1392, col: 34, offset: 46343},
																					val:        "+",
																					ignoreCase: false,
																					want:       "\"+\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1392, col: 38, offset: 46347},
																					expr: &actionExpr{
																						pos: position{line: 2948, col: 10, offset: 97526},
																						run: (*parser).callonDocumentFragment1489,
																						expr: &charClassMatcher{
																							pos:        position{line: 2948, col: 11, offset: 97527},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2958, col: 12, offset: 97749},
																					run: (*parser).callonDocumentFragment1491,
																					expr: &choiceExpr{
																						pos: position{line: 2958, col: 13, offset: 97750},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2958, col: 13, offset: 97750},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 20, offset: 97757},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 29, offset: 97766},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1641, col: 9, offset: 54590},
																		label: "line",
																		expr: &choiceExpr{
																			pos: position{line: 1641, col: 15, offset: 54596},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2667, col: 22, offset: 88913},
																					run: (*parser).callonDocumentFragment1498,
																					expr: &seqExpr{
																						pos: position{line: 2667, col: 22, offset: 88913},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2672, col: 31, offset: 89134},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2672, col: 36, offset: 89139},
																								expr: &litMatcher{
																									pos:        position{line: 2672, col: 37, offset: 89140},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2667, col: 49, offset: 88940},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2674, col: 29, offset: 89175},
																									run: (*parser).callonDocumentFragment1504,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2674, col: 29, offset: 89175},
																										expr: &charClassMatcher{
																											pos:        position{line: 2674, col: 29, offset: 89175},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonDocumentFragment1508,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1662, col: 5, offset: 55229},
																					run: (*parser).callonDocumentFragment1515,
																					expr: &seqExpr{
																						pos: position{line: 1662, col: 5, offset: 55229},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1662, col: 5, offset: 55229},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1662, col: 14, offset: 55238},
																									run: (*parser).callonDocumentFragment1518,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1662, col: 14, offset: 55238},
																										expr: &charClassMatcher{
																											pos:        position{line: 1662, col: 14, offset: 55238},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1665, col: 5, offset: 55295},
																								run: (*parser).callonDocumentFragment1521,
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonDocumentFragment1523,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentFragmentWithinVerbatimBlock",
			pos:  position{line: 95, col: 1, offset: 2781},
			expr: &actionExpr{
				pos: position{line: 96, col: 5, offset: 2824},
				run: (*parser).callonDocumentFragmentWithinVerbatimBlock1,
				expr: &seqExpr{
					pos: position{line: 96, col: 5, offset: 2824},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 96, col: 5, offset: 2824},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 96, col: 14, offset: 2833},
								expr: &choiceExpr{
									pos: position{line: 97, col: 9, offset: 2843},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 97, col: 9, offset: 2843},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 104, col: 5, offset: 2940},
											run: (*parser).callonDocumentFragmentWithinVerbatimBlock7,
											expr: &seqExpr{
												pos: position{line: 104, col: 5, offset: 2940},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 104, col: 5, offset: 2940},
														expr: &notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 105, col: 5, offset: 2949},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 105, col: 14, offset: 2958},
															run: (*parser).callonDocumentFragmentWithinVerbatimBlock13,
															expr: &zeroOrMoreExpr{
																pos: position{line: 105, col: 14, offset: 2958},
																expr: &charClassMatcher{
																	pos:        position{line: 105, col: 14, offset: 2958},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2965, col: 8, offset: 97889},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2958, col: 12, offset: 97749},
																run: (*parser).callonDocumentFragmentWithinVerbatimBlock17,
																expr: &choiceExpr{
																	pos: position{line: 2958, col: 13, offset: 97750},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2958, col: 13, offset: 97750},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 20, offset: 97757},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 29, offset: 97766},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2962, col: 8, offset: 97839},
																expr: &anyMatcher{
																	line: 2962, col: 9, offset: 97840,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2962, col: 8, offset: 97839},
							expr: &anyMatcher{
								line: 2962, col: 9, offset: 97840,
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlockElements",
			pos:  position{line: 114, col: 1, offset: 3149},
			expr: &actionExpr{
				pos: position{line: 115, col: 5, offset: 3180},
				run: (*parser).callonDelimitedBlockElements1,
				expr: &seqExpr{
					pos: position{line: 115, col: 5, offset: 3180},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 115, col: 5, offset: 3180},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 115, col: 14, offset: 3189},
								expr: &choiceExpr{
									pos: position{line: 116, col: 9, offset: 3199},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 991, col: 23, offset: 31326},
											run: (*parser).callonDelimitedBlockElements6,
											expr: &seqExpr{
												pos: position{line: 991, col: 23, offset: 31326},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 989, col: 32, offset: 31294},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 991, col: 51, offset: 31354},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 991, col: 56, offset: 31359},
															run: (*parser).callonDelimitedBlockElements10,
															expr: &oneOrMoreExpr{
																pos: position{line: 991, col: 56, offset: 31359},
																expr: &charClassMatcher{
																	pos:        position{line: 991, col: 56, offset: 31359},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 989, col: 32, offset: 31294},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 117, col: 11, offset: 3261},
											name: "DocumentFragment",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2962, col: 8, offset: 97839},
							expr: &anyMatcher{
								line: 2962, col: 9, offset: 97840,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 193, col: 1, offset: 5804},
			expr: &actionExpr{
				pos: position{line: 194, col: 5, offset: 5827},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 194, col: 5, offset: 5827},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 194, col: 16, offset: 5838},
						expr: &choiceExpr{
							pos: position{line: 196, col: 9, offset: 5905},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 196, col: 10, offset: 5906},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 196, col: 10, offset: 5906},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 196, col: 10, offset: 5906},
												label: "anchor",
												expr: &actionExpr{
													pos: position{line: 228, col: 4, offset: 6749},
													run: (*parser).callonBlockAttributes8,
													expr: &seqExpr{
														pos: position{line: 228, col: 4, offset: 6749},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 228, col: 4, offset: 6749},
																val:        "[[",
																ignoreCase: false,
																want:       "\"[[\"",
															},
															&labeledExpr{
																pos:   position{line: 229, col: 5, offset: 6759},
																label: "id",
																expr: &actionExpr{
																	pos: position{line: 230, col: 9, offset: 6772},
																	run: (*parser).callonBlockAttributes12,
																	expr: &labeledExpr{
																		pos:   position{line: 230, col: 9, offset: 6772},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 230, col: 18, offset: 6781},
																			expr: &choiceExpr{
																				pos: position{line: 231, col: 13, offset: 6795},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 231, col: 14, offset: 6796},
																						run: (*parser).callonBlockAttributes16,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 231, col: 14, offset: 6796},
																							expr: &charClassMatcher{
																								pos:        position{line: 231, col: 14, offset: 6796},
																								val:        "[^=\\r\\n�{]]",
																								chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 991, col: 23, offset: 31326},
																						run: (*parser).callonBlockAttributes19,
																						expr: &seqExpr{
																							pos: position{line: 991, col: 23, offset: 31326},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 989, col: 32, offset: 31294},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 991, col: 51, offset: 31354},
																									label: "ref",
																									expr: &actionExpr{
																										pos: position{line: 991, col: 56, offset: 31359},
																										run: (*parser).callonBlockAttributes23,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 991, col: 56, offset: 31359},
																											expr: &charClassMatcher{
																												pos:        position{line: 991, col: 56, offset: 31359},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 989, col: 32, offset: 31294},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 493, col: 5, offset: 15873},
																						run: (*parser).callonBlockAttributes27,
																						expr: &seqExpr{
																							pos: position{line: 493, col: 5, offset: 15873},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 493, col: 5, offset: 15873},
																									run: (*parser).callonBlockAttributes29,
																								},
																								&labeledExpr{
																									pos:   position{line: 496, col: 5, offset: 15937},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 496, col: 14, offset: 15946},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 507, col: 25, offset: 16408},
																												run: (*parser).callonBlockAttributes32,
																												expr: &seqExpr{
																													pos: position{line: 507, col: 25, offset: 16408},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 507, col: 25, offset: 16408},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 507, col: 37, offset: 16420},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 162, col: 18, offset: 4814},
																																run: (*parser).callonBlockAttributes36,
																																expr: &seqExpr{
																																	pos: position{line: 162, col: 18, offset: 4814},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 162, col: 18, offset: 4814},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 162, col: 28, offset: 4824},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 162, col: 29, offset: 4825},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 507, col: 56, offset: 16439},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 507, col: 62, offset: 16445},
																																expr: &actionExpr{
																																	pos: position{line: 515, col: 17, offset: 16708},
																																	run: (*parser).callonBlockAttributes43,
																																	expr: &seqExpr{
																																		pos: position{line: 515, col: 17, offset: 16708},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 515, col: 17, offset: 16708},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 515, col: 21, offset: 16712},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 515, col: 28, offset: 16719},
																																							run: (*parser).callonBlockAttributes48,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 515, col: 28, offset: 16719},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 517, col: 9, offset: 16773},
																																							run: (*parser).callonBlockAttributes50,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 517, col: 9, offset: 16773},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 517, col: 9, offset: 16773},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 507, col: 78, offset: 16461},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 511, col: 25, offset: 16563},
																												run: (*parser).callonBlockAttributes54,
																												expr: &seqExpr{
																													pos: position{line: 511, col: 25, offset: 16563},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 511, col: 25, offset: 16563},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 511, col: 38, offset: 16576},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 162, col: 18, offset: 4814},
																																run: (*parser).callonBlockAttributes58,
																																expr: &seqExpr{
																																	pos: position{line: 162, col: 18, offset: 4814},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 162, col: 18, offset: 4814},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 162, col: 28, offset: 4824},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 162, col: 29, offset: 4825},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 511, col: 57, offset: 16595},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 511, col: 63, offset: 16601},
																																expr: &actionExpr{
																																	pos: position{line: 515, col: 17, offset: 16708},
																																	run: (*parser).callonBlockAttributes65,
																																	expr: &seqExpr{
																																		pos: position{line: 515, col: 17, offset: 16708},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 515, col: 17, offset: 16708},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 515, col: 21, offset: 16712},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 515, col: 28, offset: 16719},
																																							run: (*parser).callonBlockAttributes70,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 515, col: 28, offset: 16719},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 517, col: 9, offset: 16773},
																																							run: (*parser).callonBlockAttributes72,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 517, col: 9, offset: 16773},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 517, col: 9, offset: 16773},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 511, col: 79, offset: 16617},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 500, col: 31, offset: 16063},
																												run: (*parser).callonBlockAttributes76,
																												expr: &seqExpr{
																													pos: position{line: 500, col: 31, offset: 16063},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 500, col: 31, offset: 16063},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 500, col: 35, offset: 16067},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 162, col: 18, offset: 4814},
																																run: (*parser).callonBlockAttributes80,
																																expr: &seqExpr{
																																	pos: position{line: 162, col: 18, offset: 4814},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 162, col: 18, offset: 4814},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 162, col: 28, offset: 4824},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 162, col: 29, offset: 4825},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 500, col: 54, offset: 16086},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 236, col: 16, offset: 7032},
																						run: (*parser).callonBlockAttributes86,
																						expr: &litMatcher{
																							pos:        position{line: 236, col: 16, offset: 7032},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 242, col: 5, offset: 7218},
																val:        "]]",
																ignoreCase: false,
																want:       "\"]]\"",
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 196, col: 35, offset: 5931},
												expr: &actionExpr{
													pos: position{line: 2948, col: 10, offset: 97526},
													run: (*parser).callonBlockAttributes90,
													expr: &charClassMatcher{
														pos:        position{line: 2948, col: 11, offset: 97527},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2965, col: 8, offset: 97889},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2958, col: 12, offset: 97749},
														run: (*parser).callonBlockAttributes93,
														expr: &choiceExpr{
															pos: position{line: 2958, col: 13, offset: 97750},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2958, col: 13, offset: 97750},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2958, col: 20, offset: 97757},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2958, col: 29, offset: 97766},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2962, col: 8, offset: 97839},
														expr: &anyMatcher{
															line: 2962, col: 9, offset: 97840,
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 200, col: 12, offset: 6052},
									run: (*parser).callonBlockAttributes100,
									expr: &seqExpr{
										pos: position{line: 200, col: 12, offset: 6052},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 200, col: 12, offset: 6052},
												label: "title",
												expr: &actionExpr{
													pos: position{line: 247, col: 19, offset: 7337},
													run: (*parser).callonBlockAttributes103,
													expr: &seqExpr{
														pos: position{line: 247, col: 19, offset: 7337},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 247, col: 19, offset: 7337},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&labeledExpr{
																pos:   position{line: 247, col: 23, offset: 7341},
																label: "title",
																expr: &actionExpr{
																	pos: position{line: 248, col: 5, offset: 7353},
																	run: (*parser).callonBlockAttributes107,
																	expr: &seqExpr{
																		pos: position{line: 248, col: 5, offset: 7353},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 248, col: 5, offset: 7353},
																				expr: &charClassMatcher{
																					pos:        position{line: 248, col: 6, offset: 7354},
																					val:        "[. ]",
																					chars:      []rune{'.', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 249, col: 5, offset: 7466},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 249, col: 14, offset: 7475},
																					expr: &choiceExpr{
																						pos: position{line: 250, col: 9, offset: 7485},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 250, col: 10, offset: 7486},
																								run: (*parser).callonBlockAttributes114,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 250, col: 10, offset: 7486},
																									expr: &charClassMatcher{
																										pos:        position{line: 250, col: 10, offset: 7486},
																										val:        "[^\\r\\n�{]",
																										chars:      []rune{'\r', '\n', '�', '{'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 991, col: 23, offset: 31326},
																								run: (*parser).callonBlockAttributes117,
																								expr: &seqExpr{
																									pos: position{line: 991, col: 23, offset: 31326},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 989, col: 32, offset: 31294},
																											val:        "�",
																											ignoreCase: false,
																											want:       "\"�\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 991, col: 51, offset: 31354},
																											label: "ref",
																											expr: &actionExpr{
																												pos: position{line: 991, col: 56, offset: 31359},
																												run: (*parser).callonBlockAttributes121,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 991, col: 56, offset: 31359},
																													expr: &charClassMatcher{
																														pos:        position{line: 991, col: 56, offset: 31359},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 989, col: 32, offset: 31294},
																											val:        "�",
																											ignoreCase: false,
																											want:       "\"�\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 493, col: 5, offset: 15873},
																								run: (*parser).callonBlockAttributes125,
																								expr: &seqExpr{
																									pos: position{line: 493, col: 5, offset: 15873},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 493, col: 5, offset: 15873},
																											run: (*parser).callonBlockAttributes127,
																										},
																										&labeledExpr{
																											pos:   position{line: 496, col: 5, offset: 15937},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 496, col: 14, offset: 15946},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 507, col: 25, offset: 16408},
																														run: (*parser).callonBlockAttributes130,
																														expr: &seqExpr{
																															pos: position{line: 507, col: 25, offset: 16408},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 507, col: 25, offset: 16408},
																																	val:        "{counter:",
																																	ignoreCase: false,
																																	want:       "\"{counter:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 507, col: 37, offset: 16420},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 162, col: 18, offset: 4814},
																																		run: (*parser).callonBlockAttributes134,
																																		expr: &seqExpr{
																																			pos: position{line: 162, col: 18, offset: 4814},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 162, col: 18, offset: 4814},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 162, col: 28, offset: 4824},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 162, col: 29, offset: 4825},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 507, col: 56, offset: 16439},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 507, col: 62, offset: 16445},
																																		expr: &actionExpr{
																																			pos: position{line: 515, col: 17, offset: 16708},
																																			run: (*parser).callonBlockAttributes141,
																																			expr: &seqExpr{
																																				pos: position{line: 515, col: 17, offset: 16708},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 515, col: 17, offset: 16708},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 515, col: 21, offset: 16712},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 515, col: 28, offset: 16719},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									run: (*parser).callonBlockAttributes146,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 515, col: 28, offset: 16719},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 517, col: 9, offset: 16773},
																																									run: (*parser).callonBlockAttributes148,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 517, col: 9, offset: 16773},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 517, col: 9, offset: 16773},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 507, col: 78, offset: 16461},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 511, col: 25, offset: 16563},
																														run: (*parser).callonBlockAttributes152,
																														expr: &seqExpr{
																															pos: position{line: 511, col: 25, offset: 16563},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 511, col: 25, offset: 16563},
																																	val:        "{counter2:",
																																	ignoreCase: false,
																																	want:       "\"{counter2:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 511, col: 38, offset: 16576},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 162, col: 18, offset: 4814},
																																		run: (*parser).callonBlockAttributes156,
																																		expr: &seqExpr{
																																			pos: position{line: 162, col: 18, offset: 4814},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 162, col: 18, offset: 4814},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 162, col: 28, offset: 4824},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 162, col: 29, offset: 4825},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 511, col: 57, offset: 16595},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 511, col: 63, offset: 16601},
																																		expr: &actionExpr{
																																			pos: position{line: 515, col: 17, offset: 16708},
																																			run: (*parser).callonBlockAttributes163,
																																			expr: &seqExpr{
																																				pos: position{line: 515, col: 17, offset: 16708},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 515, col: 17, offset: 16708},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 515, col: 21, offset: 16712},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 515, col: 28, offset: 16719},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									run: (*parser).callonBlockAttributes168,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 515, col: 28, offset: 16719},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 517, col: 9, offset: 16773},
																																									run: (*parser).callonBlockAttributes170,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 517, col: 9, offset: 16773},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 517, col: 9, offset: 16773},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 511, col: 79, offset: 16617},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 500, col: 31, offset: 16063},
																														run: (*parser).callonBlockAttributes174,
																														expr: &seqExpr{
																															pos: position{line: 500, col: 31, offset: 16063},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 500, col: 31, offset: 16063},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 500, col: 35, offset: 16067},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 162, col: 18, offset: 4814},
																																		run: (*parser).callonBlockAttributes178,
																																		expr: &seqExpr{
																																			pos: position{line: 162, col: 18, offset: 4814},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 162, col: 18, offset: 4814},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 162, col: 28, offset: 4824},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 162, col: 29, offset: 4825},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 500, col: 54, offset: 16086},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 255, col: 12, offset: 7645},
																								run: (*parser).callonBlockAttributes184,
																								expr: &litMatcher{
																									pos:        position{line: 255, col: 12, offset: 7645},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 200, col: 35, offset: 6075},
												expr: &actionExpr{
													pos: position{line: 2948, col: 10, offset: 97526},
													run: (*parser).callonBlockAttributes187,
													expr: &charClassMatcher{
														pos:        position{line: 2948, col: 11, offset: 97527},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2965, col: 8, offset: 97889},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2958, col: 12, offset: 97749},
														run: (*parser).callonBlockAttributes190,
														expr: &choiceExpr{
															pos: position{line: 2958, col: 13, offset: 97750},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2958, col: 13, offset: 97750},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2958, col: 20, offset: 97757},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2958, col: 29, offset: 97766},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2962, col: 8, offset: 97839},
														expr: &anyMatcher{
															line: 2962, col: 9, offset: 97840,
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 204, col: 12, offset: 6166},
									run: (*parser).callonBlockAttributes197,
									expr: &seqExpr{
										pos: position{line: 204, col: 12, offset: 6166},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 204, col: 12, offset: 6166},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 204, col: 24, offset: 6178},
													name: "LongHandAttributes",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 204, col: 44, offset: 6198},
												expr: &actionExpr{
													pos: position{line: 2948, col: 10, offset: 97526},
													run: (*parser).callonBlockAttributes202,
													expr: &charClassMatcher{
														pos:        position{line: 2948, col: 11, offset: 97527},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2965, col: 8, offset: 97889},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2958, col: 12, offset: 97749},
														run: (*parser).callonBlockAttributes205,
														expr: &choiceExpr{
															pos: position{line: 2958, col: 13, offset: 97750},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2958, col: 13, offset: 97750},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2958, col: 20, offset: 97757},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2958, col: 29, offset: 97766},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2962, col: 8, offset: 97839},
														expr: &anyMatcher{
															line: 2962, col: 9, offset: 97840,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 212, col: 1, offset: 6383},
			expr: &actionExpr{
				pos: position{line: 213, col: 5, offset: 6407},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 213, col: 5, offset: 6407},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 213, col: 5, offset: 6407},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 5, offset: 6415},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 214, col: 16, offset: 6426},
								expr: &actionExpr{
									pos: position{line: 215, col: 9, offset: 6436},
									run: (*parser).callonInlineAttributes6,
									expr: &seqExpr{
										pos: position{line: 216, col: 13, offset: 6450},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 216, col: 13, offset: 6450},
												expr: &litMatcher{
													pos:        position{line: 216, col: 14, offset: 6451},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 217, col: 13, offset: 6483},
												label: "attribute",
												expr: &choiceExpr{
													pos: position{line: 217, col: 24, offset: 6494},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 217, col: 24, offset: 6494},
															name: "PositionalAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 217, col: 46, offset: 6516},
															name: "NamedAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 222, col: 5, offset: 6599},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 266, col: 1, offset: 8045},
			expr: &actionExpr{
				pos: position{line: 267, col: 5, offset: 8071},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 267, col: 5, offset: 8071},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 267, col: 5, offset: 8071},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 267, col: 9, offset: 8075},
							expr: &litMatcher{
								pos:        position{line: 267, col: 10, offset: 8076},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 5, offset: 8245},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 31, offset: 8271},
								expr: &actionExpr{
									pos: position{line: 285, col: 5, offset: 8926},
									run: (*parser).callonLongHandAttributes8,
									expr: &seqExpr{
										pos: position{line: 285, col: 5, offset: 8926},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 285, col: 5, offset: 8926},
												label: "main",
												expr: &zeroOrOneExpr{
													pos: position{line: 285, col: 10, offset: 8931},
													expr: &actionExpr{
														pos: position{line: 317, col: 23, offset: 9741},
														run: (*parser).callonLongHandAttributes12,
														expr: &labeledExpr{
															pos:   position{line: 317, col: 23, offset: 9741},
															label: "value",
															expr: &choiceExpr{
																pos: position{line: 333, col: 5, offset: 10220},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 388, col: 5, offset: 12181},
																		run: (*parser).callonLongHandAttributes15,
																		expr: &seqExpr{
																			pos: position{line: 388, col: 5, offset: 12181},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 388, col: 5, offset: 12181},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&notExpr{
																					pos: position{line: 388, col: 9, offset: 12185},
																					expr: &litMatcher{
																						pos:        position{line: 388, col: 10, offset: 12186},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 389, col: 5, offset: 12265},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 400, col: 5, offset: 12528},
																						run: (*parser).callonLongHandAttributes21,
																						expr: &labeledExpr{
																							pos:   position{line: 400, col: 5, offset: 12528},
																							label: "elements",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 400, col: 14, offset: 12537},
																								expr: &choiceExpr{
																									pos: position{line: 401, col: 9, offset: 12547},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2864, col: 14, offset: 94885},
																											run: (*parser).callonLongHandAttributes25,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2864, col: 14, offset: 94885},
																												expr: &charClassMatcher{
																													pos:        position{line: 2864, col: 14, offset: 94885},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2948, col: 10, offset: 97526},
																											run: (*parser).callonLongHandAttributes28,
																											expr: &charClassMatcher{
																												pos:        position{line: 2948, col: 11, offset: 97527},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 493, col: 5, offset: 15873},
																											run: (*parser).callonLongHandAttributes30,
																											expr: &seqExpr{
																												pos: position{line: 493, col: 5, offset: 15873},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 493, col: 5, offset: 15873},
																														run: (*parser).callonLongHandAttributes32,
																													},
																													&labeledExpr{
																														pos:   position{line: 496, col: 5, offset: 15937},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 496, col: 14, offset: 15946},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 507, col: 25, offset: 16408},
																																	run: (*parser).callonLongHandAttributes35,
																																	expr: &seqExpr{
																																		pos: position{line: 507, col: 25, offset: 16408},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 507, col: 25, offset: 16408},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 507, col: 37, offset: 16420},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					run: (*parser).callonLongHandAttributes39,
																																					expr: &seqExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 162, col: 18, offset: 4814},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 162, col: 28, offset: 4824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 162, col: 29, offset: 4825},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 507, col: 56, offset: 16439},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 507, col: 62, offset: 16445},
																																					expr: &actionExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						run: (*parser).callonLongHandAttributes46,
																																						expr: &seqExpr{
																																							pos: position{line: 515, col: 17, offset: 16708},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 515, col: 17, offset: 16708},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 515, col: 21, offset: 16712},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 515, col: 28, offset: 16719},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 515, col: 28, offset: 16719},
																																												run: (*parser).callonLongHandAttributes51,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 515, col: 28, offset: 16719},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												run: (*parser).callonLongHandAttributes53,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 517, col: 9, offset: 16773},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 517, col: 9, offset: 16773},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 507, col: 78, offset: 16461},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 511, col: 25, offset: 16563},
																																	run: (*parser).callonLongHandAttributes57,
																																	expr: &seqExpr{
																																		pos: position{line: 511, col: 25, offset: 16563},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 511, col: 25, offset: 16563},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 511, col: 38, offset: 16576},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					run: (*parser).callonLongHandAttributes61,
																																					expr: &seqExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 162, col: 18, offset: 4814},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 162, col: 28, offset: 4824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 162, col: 29, offset: 4825},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 511, col: 57, offset: 16595},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 511, col: 63, offset: 16601},
																																					expr: &actionExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						run: (*parser).callonLongHandAttributes68,
																																						expr: &seqExpr{
																																							pos: position{line: 515, col: 17, offset: 16708},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 515, col: 17, offset: 16708},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 515, col: 21, offset: 16712},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 515, col: 28, offset: 16719},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 515, col: 28, offset: 16719},
																																												run: (*parser).callonLongHandAttributes73,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 515, col: 28, offset: 16719},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												run: (*parser).callonLongHandAttributes75,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 517, col: 9, offset: 16773},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 517, col: 9, offset: 16773},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 511, col: 79, offset: 16617},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 500, col: 31, offset: 16063},
																																	run: (*parser).callonLongHandAttributes79,
																																	expr: &seqExpr{
																																		pos: position{line: 500, col: 31, offset: 16063},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 500, col: 31, offset: 16063},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 500, col: 35, offset: 16067},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					run: (*parser).callonLongHandAttributes83,
																																					expr: &seqExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 162, col: 18, offset: 4814},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 162, col: 28, offset: 4824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 162, col: 29, offset: 4825},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 500, col: 54, offset: 16086},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 404, col: 12, offset: 12616},
																											run: (*parser).callonLongHandAttributes89,
																											expr: &litMatcher{
																												pos:        position{line: 404, col: 12, offset: 12616},
																												val:        "\\'",
																												ignoreCase: false,
																												want:       "\"\\\\'\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 407, col: 13, offset: 12718},
																											val:        "'`",
																											ignoreCase: false,
																											want:       "\"'`\"",
																										},
																										&litMatcher{
																											pos:        position{line: 407, col: 20, offset: 12725},
																											val:        "`'",
																											ignoreCase: false,
																											want:       "\"`'\"",
																										},
																										&actionExpr{
																											pos: position{line: 407, col: 27, offset: 12732},
																											run: (*parser).callonLongHandAttributes93,
																											expr: &litMatcher{
																												pos:        position{line: 407, col: 27, offset: 12732},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 410, col: 12, offset: 12892},
																											run: (*parser).callonLongHandAttributes95,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 410, col: 12, offset: 12892},
																												expr: &charClassMatcher{
																													pos:        position{line: 410, col: 12, offset: 12892},
																													val:        "[^\\r\\n\\\\\\ ]",
																													chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 390, col: 5, offset: 12316},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 418, col: 5, offset: 13127},
																		run: (*parser).callonLongHandAttributes99,
																		expr: &seqExpr{
																			pos: position{line: 418, col: 5, offset: 13127},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 418, col: 5, offset: 13127},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&notExpr{
																					pos: position{line: 418, col: 10, offset: 13132},
																					expr: &litMatcher{
																						pos:        position{line: 418, col: 11, offset: 13133},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 419, col: 5, offset: 13212},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 429, col: 5, offset: 13492},
																						run: (*parser).callonLongHandAttributes105,
																						expr: &labeledExpr{
																							pos:   position{line: 429, col: 5, offset: 13492},
																							label: "elements",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 429, col: 14, offset: 13501},
																								expr: &choiceExpr{
																									pos: position{line: 430, col: 9, offset: 13511},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2864, col: 14, offset: 94885},
																											run: (*parser).callonLongHandAttributes109,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2864, col: 14, offset: 94885},
																												expr: &charClassMatcher{
																													pos:        position{line: 2864, col: 14, offset: 94885},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2948, col: 10, offset: 97526},
																											run: (*parser).callonLongHandAttributes112,
																											expr: &charClassMatcher{
																												pos:        position{line: 2948, col: 11, offset: 97527},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 493, col: 5, offset: 15873},
																											run: (*parser).callonLongHandAttributes114,
																											expr: &seqExpr{
																												pos: position{line: 493, col: 5, offset: 15873},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 493, col: 5, offset: 15873},
																														run: (*parser).callonLongHandAttributes116,
																													},
																													&labeledExpr{
																														pos:   position{line: 496, col: 5, offset: 15937},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 496, col: 14, offset: 15946},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 507, col: 25, offset: 16408},
																																	run: (*parser).callonLongHandAttributes119,
																																	expr: &seqExpr{
																																		pos: position{line: 507, col: 25, offset: 16408},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 507, col: 25, offset: 16408},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 507, col: 37, offset: 16420},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					run: (*parser).callonLongHandAttributes123,
																																					expr: &seqExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 162, col: 18, offset: 4814},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 162, col: 28, offset: 4824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 162, col: 29, offset: 4825},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 507, col: 56, offset: 16439},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 507, col: 62, offset: 16445},
																																					expr: &actionExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						run: (*parser).callonLongHandAttributes130,
																																						expr: &seqExpr{
																																							pos: position{line: 515, col: 17, offset: 16708},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 515, col: 17, offset: 16708},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 515, col: 21, offset: 16712},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 515, col: 28, offset: 16719},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 515, col: 28, offset: 16719},
																																												run: (*parser).callonLongHandAttributes135,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 515, col: 28, offset: 16719},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												run: (*parser).callonLongHandAttributes137,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 517, col: 9, offset: 16773},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 517, col: 9, offset: 16773},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 507, col: 78, offset: 16461},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 511, col: 25, offset: 16563},
																																	run: (*parser).callonLongHandAttributes141,
																																	expr: &seqExpr{
																																		pos: position{line: 511, col: 25, offset: 16563},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 511, col: 25, offset: 16563},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 511, col: 38, offset: 16576},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					run: (*parser).callonLongHandAttributes145,
																																					expr: &seqExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 162, col: 18, offset: 4814},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 162, col: 28, offset: 4824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 162, col: 29, offset: 4825},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 511, col: 57, offset: 16595},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 511, col: 63, offset: 16601},
																																					expr: &actionExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						run: (*parser).callonLongHandAttributes152,
																																						expr: &seqExpr{
																																							pos: position{line: 515, col: 17, offset: 16708},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 515, col: 17, offset: 16708},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 515, col: 21, offset: 16712},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 515, col: 28, offset: 16719},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 515, col: 28, offset: 16719},
																																												run: (*parser).callonLongHandAttributes157,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 515, col: 28, offset: 16719},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												run: (*parser).callonLongHandAttributes159,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 517, col: 9, offset: 16773},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 517, col: 9, offset: 16773},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 511, col: 79, offset: 16617},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 500, col: 31, offset: 16063},
																																	run: (*parser).callonLongHandAttributes163,
																																	expr: &seqExpr{
																																		pos: position{line: 500, col: 31, offset: 16063},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 500, col: 31, offset: 16063},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 500, col: 35, offset: 16067},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					run: (*parser).callonLongHandAttributes167,
																																					expr: &seqExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 162, col: 18, offset: 4814},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 162, col: 28, offset: 4824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 162, col: 29, offset: 4825},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 500, col: 54, offset: 16086},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 433, col: 12, offset: 13580},
																											run: (*parser).callonLongHandAttributes173,
																											expr: &litMatcher{
																												pos:        position{line: 433, col: 12, offset: 13580},
																												val:        "\\\"",
																												ignoreCase: false,
																												want:       "\"\\\\\\\"\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 436, col: 13, offset: 13682},
																											val:        "\"`",
																											ignoreCase: false,
																											want:       "\"\\\"`\"",
																										},
																										&litMatcher{
																											pos:        position{line: 436, col: 21, offset: 13690},
																											val:        "`\"",
																											ignoreCase: false,
																											want:       "\"`\\\"\"",
																										},
																										&litMatcher{
																											pos:        position{line: 436, col: 29, offset: 13698},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&actionExpr{
																											pos: position{line: 436, col: 35, offset: 13704},
																											run: (*parser).callonLongHandAttributes178,
																											expr: &litMatcher{
																												pos:        position{line: 436, col: 35, offset: 13704},
																												val:        "`",
																												ignoreCase: false,
																												want:       "\"`\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 439, col: 12, offset: 13887},
																											run: (*parser).callonLongHandAttributes180,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 439, col: 12, offset: 13887},
																												expr: &charClassMatcher{
																													pos:        position{line: 439, col: 12, offset: 13887},
																													val:        "[^\\r\\n\\\\\"` ]",
																													chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 420, col: 5, offset: 13263},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&andExpr{
																					pos: position{line: 420, col: 10, offset: 13268},
																					expr: &notExpr{
																						pos: position{line: 420, col: 12, offset: 13270},
																						expr: &seqExpr{
																							pos: position{line: 420, col: 14, offset: 13272},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 420, col: 14, offset: 13272},
																									expr: &actionExpr{
																										pos: position{line: 2948, col: 10, offset: 97526},
																										run: (*parser).callonLongHandAttributes188,
																										expr: &charClassMatcher{
																											pos:        position{line: 2948, col: 11, offset: 97527},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 420, col: 21, offset: 13279},
																									val:        "=",
																									ignoreCase: false,
																									want:       "\"=\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 335, col: 7, offset: 10294},
																		run: (*parser).callonLongHandAttributes191,
																		expr: &seqExpr{
																			pos: position{line: 335, col: 7, offset: 10294},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 335, col: 7, offset: 10294},
																					label: "elements",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 335, col: 16, offset: 10303},
																						expr: &choiceExpr{
																							pos: position{line: 338, col: 9, offset: 10485},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 338, col: 10, offset: 10486},
																									run: (*parser).callonLongHandAttributes196,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 338, col: 10, offset: 10486},
																										expr: &charClassMatcher{
																											pos:        position{line: 338, col: 10, offset: 10486},
																											val:        "[^,=.%# \\r\\n�{]]",
																											chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 991, col: 23, offset: 31326},
																									run: (*parser).callonLongHandAttributes199,
																									expr: &seqExpr{
																										pos: position{line: 991, col: 23, offset: 31326},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 989, col: 32, offset: 31294},
																												val:        "�",
																												ignoreCase: false,
																												want:       "\"�\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 991, col: 51, offset: 31354},
																												label: "ref",
																												expr: &actionExpr{
																													pos: position{line: 991, col: 56, offset: 31359},
																													run: (*parser).callonLongHandAttributes203,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 991, col: 56, offset: 31359},
																														expr: &charClassMatcher{
																															pos:        position{line: 991, col: 56, offset: 31359},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 989, col: 32, offset: 31294},
																												val:        "�",
																												ignoreCase: false,
																												want:       "\"�\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 493, col: 5, offset: 15873},
																									run: (*parser).callonLongHandAttributes207,
																									expr: &seqExpr{
																										pos: position{line: 493, col: 5, offset: 15873},
																										exprs: []interface{}{
																											&andCodeExpr{
																												pos: position{line: 493, col: 5, offset: 15873},
																												run: (*parser).callonLongHandAttributes209,
																											},
																											&labeledExpr{
																												pos:   position{line: 496, col: 5, offset: 15937},
																												label: "element",
																												expr: &choiceExpr{
																													pos: position{line: 496, col: 14, offset: 15946},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 507, col: 25, offset: 16408},
																															run: (*parser).callonLongHandAttributes212,
																															expr: &seqExpr{
																																pos: position{line: 507, col: 25, offset: 16408},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 507, col: 25, offset: 16408},
																																		val:        "{counter:",
																																		ignoreCase: false,
																																		want:       "\"{counter:\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 507, col: 37, offset: 16420},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 162, col: 18, offset: 4814},
																																			run: (*parser).callonLongHandAttributes216,
																																			expr: &seqExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 162, col: 18, offset: 4814},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 162, col: 28, offset: 4824},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 162, col: 29, offset: 4825},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 507, col: 56, offset: 16439},
																																		label: "start",
																																		expr: &zeroOrOneExpr{
																																			pos: position{line: 507, col: 62, offset: 16445},
																																			expr: &actionExpr{
																																				pos: position{line: 515, col: 17, offset: 16708},
																																				run: (*parser).callonLongHandAttributes223,
																																				expr: &seqExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 515, col: 17, offset: 16708},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 515, col: 21, offset: 16712},
																																							label: "start",
																																							expr: &choiceExpr{
																																								pos: position{line: 515, col: 28, offset: 16719},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 515, col: 28, offset: 16719},
																																										run: (*parser).callonLongHandAttributes228,
																																										expr: &charClassMatcher{
																																											pos:        position{line: 515, col: 28, offset: 16719},
																																											val:        "[A-Za-z]",
																																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 517, col: 9, offset: 16773},
																																										run: (*parser).callonLongHandAttributes230,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 517, col: 9, offset: 16773},
																																												val:        "[0-9]",
																																												ranges:     []rune{'0', '9'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 507, col: 78, offset: 16461},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 511, col: 25, offset: 16563},
																															run: (*parser).callonLongHandAttributes234,
																															expr: &seqExpr{
																																pos: position{line: 511, col: 25, offset: 16563},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 511, col: 25, offset: 16563},
																																		val:        "{counter2:",
																																		ignoreCase: false,
																																		want:       "\"{counter2:\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 511, col: 38, offset: 16576},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 162, col: 18, offset: 4814},
																																			run: (*parser).callonLongHandAttributes238,
																																			expr: &seqExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 162, col: 18, offset: 4814},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 162, col: 28, offset: 4824},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 162, col: 29, offset: 4825},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 511, col: 57, offset: 16595},
																																		label: "start",
																																		expr: &zeroOrOneExpr{
																																			pos: position{line: 511, col: 63, offset: 16601},
																																			expr: &actionExpr{
																																				pos: position{line: 515, col: 17, offset: 16708},
																																				run: (*parser).callonLongHandAttributes245,
																																				expr: &seqExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 515, col: 17, offset: 16708},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 515, col: 21, offset: 16712},
																																							label: "start",
																																							expr: &choiceExpr{
																																								pos: position{line: 515, col: 28, offset: 16719},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 515, col: 28, offset: 16719},
																																										run: (*parser).callonLongHandAttributes250,
																																										expr: &charClassMatcher{
																																											pos:        position{line: 515, col: 28, offset: 16719},
																																											val:        "[A-Za-z]",
																																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 517, col: 9, offset: 16773},
																																										run: (*parser).callonLongHandAttributes252,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 517, col: 9, offset: 16773},
																																												val:        "[0-9]",
																																												ranges:     []rune{'0', '9'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 511, col: 79, offset: 16617},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 500, col: 31, offset: 16063},
																															run: (*parser).callonLongHandAttributes256,
																															expr: &seqExpr{
																																pos: position{line: 500, col: 31, offset: 16063},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 500, col: 31, offset: 16063},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 500, col: 35, offset: 16067},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 162, col: 18, offset: 4814},
																																			run: (*parser).callonLongHandAttributes260,
																																			expr: &seqExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 162, col: 18, offset: 4814},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 162, col: 28, offset: 4824},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 162, col: 29, offset: 4825},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 500, col: 54, offset: 16086},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 344, col: 12, offset: 10674},
																									run: (*parser).callonLongHandAttributes266,
																									expr: &litMatcher{
																										pos:        position{line: 344, col: 12, offset: 10674},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&andExpr{
																					pos: position{line: 347, col: 8, offset: 10757},
																					expr: &notExpr{
																						pos: position{line: 347, col: 10, offset: 10759},
																						expr: &seqExpr{
																							pos: position{line: 347, col: 12, offset: 10761},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 347, col: 12, offset: 10761},
																									expr: &actionExpr{
																										pos: position{line: 2948, col: 10, offset: 97526},
																										run: (*parser).callonLongHandAttributes272,
																										expr: &charClassMatcher{
																											pos:        position{line: 2948, col: 11, offset: 97527},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 347, col: 19, offset: 10768},
																									val:        "=",
																									ignoreCase: false,
																									want:       "\"=\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 288, col: 5, offset: 8971},
												label: "extras",
												expr: &zeroOrMoreExpr{
													pos: position{line: 288, col: 12, offset: 8978},
													expr: &actionExpr{
														pos: position{line: 289, col: 9, offset: 8989},
														run: (*parser).callonLongHandAttributes277,
														expr: &seqExpr{
															pos: position{line: 289, col: 9, offset: 8989},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 289, col: 9, offset: 8989},
																	expr: &litMatcher{
																		pos:        position{line: 289, col: 10, offset: 8990},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																},
																&notExpr{
																	pos: position{line: 289, col: 14, offset: 8994},
																	expr: &litMatcher{
																		pos:        position{line: 289, col: 15, offset: 8995},
																		val:        "]",
																		ignoreCase: false,
																		want:       "\"]\"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 290, col: 9, offset: 9007},
																	label: "extra",
																	expr: &choiceExpr{
																		pos: position{line: 291, col: 13, offset: 9027},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 313, col: 25, offset: 9637},
																				run: (*parser).callonLongHandAttributes285,
																				expr: &seqExpr{
																					pos: position{line: 313, col: 25, offset: 9637},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 313, col: 25, offset: 9637},
																							val:        "#",
																							ignoreCase: false,
																							want:       "\"#\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 313, col: 29, offset: 9641},
																							label: "id",
																							expr: &choiceExpr{
																								pos: position{line: 333, col: 5, offset: 10220},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 388, col: 5, offset: 12181},
																										run: (*parser).callonLongHandAttributes290,
																										expr: &seqExpr{
																											pos: position{line: 388, col: 5, offset: 12181},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 388, col: 5, offset: 12181},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&notExpr{
																													pos: position{line: 388, col: 9, offset: 12185},
																													expr: &litMatcher{
																														pos:        position{line: 388, col: 10, offset: 12186},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 389, col: 5, offset: 12265},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 400, col: 5, offset: 12528},
																														run: (*parser).callonLongHandAttributes296,
																														expr: &labeledExpr{
																															pos:   position{line: 400, col: 5, offset: 12528},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 400, col: 14, offset: 12537},
																																expr: &choiceExpr{
																																	pos: position{line: 401, col: 9, offset: 12547},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2864, col: 14, offset: 94885},
																																			run: (*parser).callonLongHandAttributes300,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2864, col: 14, offset: 94885},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2864, col: 14, offset: 94885},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2948, col: 10, offset: 97526},
																																			run: (*parser).callonLongHandAttributes303,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2948, col: 11, offset: 97527},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 493, col: 5, offset: 15873},
																																			run: (*parser).callonLongHandAttributes305,
																																			expr: &seqExpr{
																																				pos: position{line: 493, col: 5, offset: 15873},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 493, col: 5, offset: 15873},
																																						run: (*parser).callonLongHandAttributes307,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 496, col: 5, offset: 15937},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 496, col: 14, offset: 15946},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 507, col: 25, offset: 16408},
																																									run: (*parser).callonLongHandAttributes310,
																																									expr: &seqExpr{
																																										pos: position{line: 507, col: 25, offset: 16408},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 507, col: 25, offset: 16408},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 507, col: 37, offset: 16420},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													run: (*parser).callonLongHandAttributes314,
																																													expr: &seqExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 162, col: 18, offset: 4814},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 162, col: 28, offset: 4824},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 162, col: 29, offset: 4825},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 507, col: 56, offset: 16439},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 507, col: 62, offset: 16445},
																																													expr: &actionExpr{
																																														pos: position{line: 515, col: 17, offset: 16708},
																																														run: (*parser).callonLongHandAttributes321,
																																														expr: &seqExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 515, col: 17, offset: 16708},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 515, col: 21, offset: 16712},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 515, col: 28, offset: 16719},
																																																				run: (*parser).callonLongHandAttributes326,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 515, col: 28, offset: 16719},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 517, col: 9, offset: 16773},
																																																				run: (*parser).callonLongHandAttributes328,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 517, col: 9, offset: 16773},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 507, col: 78, offset: 16461},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 511, col: 25, offset: 16563},
																																									run: (*parser).callonLongHandAttributes332,
																																									expr: &seqExpr{
																																										pos: position{line: 511, col: 25, offset: 16563},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 511, col: 25, offset: 16563},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 511, col: 38, offset: 16576},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													run: (*parser).callonLongHandAttributes336,
																																													expr: &seqExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 162, col: 18, offset: 4814},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 162, col: 28, offset: 4824},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 162, col: 29, offset: 4825},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 511, col: 57, offset: 16595},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 511, col: 63, offset: 16601},
																																													expr: &actionExpr{
																																														pos: position{line: 515, col: 17, offset: 16708},
																																														run: (*parser).callonLongHandAttributes343,
																																														expr: &seqExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 515, col: 17, offset: 16708},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 515, col: 21, offset: 16712},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 515, col: 28, offset: 16719},
																																																				run: (*parser).callonLongHandAttributes348,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 515, col: 28, offset: 16719},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 517, col: 9, offset: 16773},
																																																				run: (*parser).callonLongHandAttributes350,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 517, col: 9, offset: 16773},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 511, col: 79, offset: 16617},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 500, col: 31, offset: 16063},
																																									run: (*parser).callonLongHandAttributes354,
																																									expr: &seqExpr{
																																										pos: position{line: 500, col: 31, offset: 16063},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 500, col: 31, offset: 16063},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 500, col: 35, offset: 16067},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													run: (*parser).callonLongHandAttributes358,
																																													expr: &seqExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 162, col: 18, offset: 4814},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 162, col: 28, offset: 4824},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 162, col: 29, offset: 4825},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 500, col: 54, offset: 16086},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 404, col: 12, offset: 12616},
																																			run: (*parser).callonLongHandAttributes364,
																																			expr: &litMatcher{
																																				pos:        position{line: 404, col: 12, offset: 12616},
																																				val:        "\\'",
																																				ignoreCase: false,
																																				want:       "\"\\\\'\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 407, col: 13, offset: 12718},
																																			val:        "'`",
																																			ignoreCase: false,
																																			want:       "\"'`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 407, col: 20, offset: 12725},
																																			val:        "`'",
																																			ignoreCase: false,
																																			want:       "\"`'\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 407, col: 27, offset: 12732},
																																			run: (*parser).callonLongHandAttributes368,
																																			expr: &litMatcher{
																																				pos:        position{line: 407, col: 27, offset: 12732},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 410, col: 12, offset: 12892},
																																			run: (*parser).callonLongHandAttributes370,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 410, col: 12, offset: 12892},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 410, col: 12, offset: 12892},
																																					val:        "[^\\r\\n\\\\\\ ]",
																																					chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 390, col: 5, offset: 12316},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 418, col: 5, offset: 13127},
																										run: (*parser).callonLongHandAttributes374,
																										expr: &seqExpr{
																											pos: position{line: 418, col: 5, offset: 13127},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 418, col: 5, offset: 13127},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&notExpr{
																													pos: position{line: 418, col: 10, offset: 13132},
																													expr: &litMatcher{
																														pos:        position{line: 418, col: 11, offset: 13133},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 5, offset: 13212},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 429, col: 5, offset: 13492},
																														run: (*parser).callonLongHandAttributes380,
																														expr: &labeledExpr{
																															pos:   position{line: 429, col: 5, offset: 13492},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 429, col: 14, offset: 13501},
																																expr: &choiceExpr{
																																	pos: position{line: 430, col: 9, offset: 13511},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2864, col: 14, offset: 94885},
																																			run: (*parser).callonLongHandAttributes384,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2864, col: 14, offset: 94885},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2864, col: 14, offset: 94885},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2948, col: 10, offset: 97526},
																																			run: (*parser).callonLongHandAttributes387,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2948, col: 11, offset: 97527},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 493, col: 5, offset: 15873},
																																			run: (*parser).callonLongHandAttributes389,
																																			expr: &seqExpr{
																																				pos: position{line: 493, col: 5, offset: 15873},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 493, col: 5, offset: 15873},
																																						run: (*parser).callonLongHandAttributes391,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 496, col: 5, offset: 15937},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 496, col: 14, offset: 15946},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 507, col: 25, offset: 16408},
																																									run: (*parser).callonLongHandAttributes394,
																																									expr: &seqExpr{
																																										pos: position{line: 507, col: 25, offset: 16408},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 507, col: 25, offset: 16408},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 507, col: 37, offset: 16420},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													run: (*parser).callonLongHandAttributes398,
																																													expr: &seqExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 162, col: 18, offset: 4814},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 162, col: 28, offset: 4824},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 162, col: 29, offset: 4825},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 507, col: 56, offset: 16439},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 507, col: 62, offset: 16445},
																																													expr: &actionExpr{
																																														pos: position{line: 515, col: 17, offset: 16708},
																																														run: (*parser).callonLongHandAttributes405,
																																														expr: &seqExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 515, col: 17, offset: 16708},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 515, col: 21, offset: 16712},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 515, col: 28, offset: 16719},
																																																				run: (*parser).callonLongHandAttributes410,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 515, col: 28, offset: 16719},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 517, col: 9, offset: 16773},
																																																				run: (*parser).callonLongHandAttributes412,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 517, col: 9, offset: 16773},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 507, col: 78, offset: 16461},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 511, col: 25, offset: 16563},
																																									run: (*parser).callonLongHandAttributes416,
																																									expr: &seqExpr{
																																										pos: position{line: 511, col: 25, offset: 16563},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 511, col: 25, offset: 16563},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 511, col: 38, offset: 16576},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													run: (*parser).callonLongHandAttributes420,
																																													expr: &seqExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 162, col: 18, offset: 4814},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 162, col: 28, offset: 4824},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 162, col: 29, offset: 4825},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 511, col: 57, offset: 16595},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 511, col: 63, offset: 16601},
																																													expr: &actionExpr{
																																														pos: position{line: 515, col: 17, offset: 16708},
																																														run: (*parser).callonLongHandAttributes427,
																																														expr: &seqExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 515, col: 17, offset: 16708},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 515, col: 21, offset: 16712},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 515, col: 28, offset: 16719},
																																																				run: (*parser).callonLongHandAttributes432,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 515, col: 28, offset: 16719},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 517, col: 9, offset: 16773},
																																																				run: (*parser).callonLongHandAttributes434,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 517, col: 9, offset: 16773},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 511, col: 79, offset: 16617},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 500, col: 31, offset: 16063},
																																									run: (*parser).callonLongHandAttributes438,
																																									expr: &seqExpr{
																																										pos: position{line: 500, col: 31, offset: 16063},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 500, col: 31, offset: 16063},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 500, col: 35, offset: 16067},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													run: (*parser).callonLongHandAttributes442,
																																													expr: &seqExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 162, col: 18, offset: 4814},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 162, col: 28, offset: 4824},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 162, col: 29, offset: 4825},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 500, col: 54, offset: 16086},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 433, col: 12, offset: 13580},
																																			run: (*parser).callonLongHandAttributes448,
																																			expr: &litMatcher{
																																				pos:        position{line: 433, col: 12, offset: 13580},
																																				val:        "\\\"",
																																				ignoreCase: false,
																																				want:       "\"\\\\\\\"\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 436, col: 13, offset: 13682},
																																			val:        "\"`",
																																			ignoreCase: false,
																																			want:       "\"\\\"`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 436, col: 21, offset: 13690},
																																			val:        "`\"",
																																			ignoreCase: false,
																																			want:       "\"`\\\"\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 436, col: 29, offset: 13698},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 436, col: 35, offset: 13704},
																																			run: (*parser).callonLongHandAttributes453,
																																			expr: &litMatcher{
																																				pos:        position{line: 436, col: 35, offset: 13704},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 439, col: 12, offset: 13887},
																																			run: (*parser).callonLongHandAttributes455,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 439, col: 12, offset: 13887},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 439, col: 12, offset: 13887},
																																					val:        "[^\\r\\n\\\\\"` ]",
																																					chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 420, col: 5, offset: 13263},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&andExpr{
																													pos: position{line: 420, col: 10, offset: 13268},
																													expr: &notExpr{
																														pos: position{line: 420, col: 12, offset: 13270},
																														expr: &seqExpr{
																															pos: position{line: 420, col: 14, offset: 13272},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 420, col: 14, offset: 13272},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonLongHandAttributes463,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 420, col: 21, offset: 13279},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 335, col: 7, offset: 10294},
																										run: (*parser).callonLongHandAttributes466,
																										expr: &seqExpr{
																											pos: position{line: 335, col: 7, offset: 10294},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 335, col: 7, offset: 10294},
																													label: "elements",
																													expr: &oneOrMoreExpr{
																														pos: position{line: 335, col: 16, offset: 10303},
																														expr: &choiceExpr{
																															pos: position{line: 338, col: 9, offset: 10485},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 338, col: 10, offset: 10486},
																																	run: (*parser).callonLongHandAttributes471,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 338, col: 10, offset: 10486},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 338, col: 10, offset: 10486},
																																			val:        "[^,=.%# \\r\\n�{]]",
																																			chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 991, col: 23, offset: 31326},
																																	run: (*parser).callonLongHandAttributes474,
																																	expr: &seqExpr{
																																		pos: position{line: 991, col: 23, offset: 31326},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 989, col: 32, offset: 31294},
																																				val:        "�",
																																				ignoreCase: false,
																																				want:       "\"�\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 991, col: 51, offset: 31354},
																																				label: "ref",
																																				expr: &actionExpr{
																																					pos: position{line: 991, col: 56, offset: 31359},
																																					run: (*parser).callonLongHandAttributes478,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 991, col: 56, offset: 31359},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 991, col: 56, offset: 31359},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 989, col: 32, offset: 31294},
																																				val:        "�",
																																				ignoreCase: false,
																																				want:       "\"�\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 493, col: 5, offset: 15873},
																																	run: (*parser).callonLongHandAttributes482,
																																	expr: &seqExpr{
																																		pos: position{line: 493, col: 5, offset: 15873},
																																		exprs: []interface{}{
																																			&andCodeExpr{
																																				pos: position{line: 493, col: 5, offset: 15873},
																																				run: (*parser).callonLongHandAttributes484,
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 496, col: 5, offset: 15937},
																																				label: "element",
																																				expr: &choiceExpr{
																																					pos: position{line: 496, col: 14, offset: 15946},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 507, col: 25, offset: 16408},
																																							run: (*parser).callonLongHandAttributes487,
																																							expr: &seqExpr{
																																								pos: position{line: 507, col: 25, offset: 16408},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 507, col: 25, offset: 16408},
																																										val:        "{counter:",
																																										ignoreCase: false,
																																										want:       "\"{counter:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 507, col: 37, offset: 16420},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 162, col: 18, offset: 4814},
																																											run: (*parser).callonLongHandAttributes491,
																																											expr: &seqExpr{
																																												pos: position{line: 162, col: 18, offset: 4814},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 162, col: 18, offset: 4814},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 162, col: 28, offset: 4824},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 162, col: 29, offset: 4825},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 507, col: 56, offset: 16439},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 507, col: 62, offset: 16445},
																																											expr: &actionExpr{
																																												pos: position{line: 515, col: 17, offset: 16708},
																																												run: (*parser).callonLongHandAttributes498,
																																												expr: &seqExpr{
																																													pos: position{line: 515, col: 17, offset: 16708},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 515, col: 17, offset: 16708},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 515, col: 21, offset: 16712},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 515, col: 28, offset: 16719},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		run: (*parser).callonLongHandAttributes503,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 515, col: 28, offset: 16719},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 517, col: 9, offset: 16773},
																																																		run: (*parser).callonLongHandAttributes505,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 517, col: 9, offset: 16773},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 517, col: 9, offset: 16773},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 507, col: 78, offset: 16461},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 511, col: 25, offset: 16563},
																																							run: (*parser).callonLongHandAttributes509,
																																							expr: &seqExpr{
																																								pos: position{line: 511, col: 25, offset: 16563},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 511, col: 25, offset: 16563},
																																										val:        "{counter2:",
																																										ignoreCase: false,
																																										want:       "\"{counter2:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 511, col: 38, offset: 16576},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 162, col: 18, offset: 4814},
																																											run: (*parser).callonLongHandAttributes513,
																																											expr: &seqExpr{
																																												pos: position{line: 162, col: 18, offset: 4814},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 162, col: 18, offset: 4814},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 162, col: 28, offset: 4824},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 162, col: 29, offset: 4825},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 511, col: 57, offset: 16595},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 511, col: 63, offset: 16601},
																																											expr: &actionExpr{
																																												pos: position{line: 515, col: 17, offset: 16708},
																																												run: (*parser).callonLongHandAttributes520,
																																												expr: &seqExpr{
																																													pos: position{line: 515, col: 17, offset: 16708},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 515, col: 17, offset: 16708},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 515, col: 21, offset: 16712},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 515, col: 28, offset: 16719},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		run: (*parser).callonLongHandAttributes525,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 515, col: 28, offset: 16719},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 517, col: 9, offset: 16773},
																																																		run: (*parser).callonLongHandAttributes527,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 517, col: 9, offset: 16773},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 517, col: 9, offset: 16773},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 511, col: 79, offset: 16617},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 500, col: 31, offset: 16063},
																																							run: (*parser).callonLongHandAttributes531,
																																							expr: &seqExpr{
																																								pos: position{line: 500, col: 31, offset: 16063},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 500, col: 31, offset: 16063},
																																										val:        "{",
																																										ignoreCase: false,
																																										want:       "\"{\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 500, col: 35, offset: 16067},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 162, col: 18, offset: 4814},
																																											run: (*parser).callonLongHandAttributes535,
																																											expr: &seqExpr{
																																												pos: position{line: 162, col: 18, offset: 4814},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 162, col: 18, offset: 4814},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 162, col: 28, offset: 4824},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 162, col: 29, offset: 4825},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 500, col: 54, offset: 16086},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 344, col: 12, offset: 10674},
																																	run: (*parser).callonLongHandAttributes541,
																																	expr: &litMatcher{
																																		pos:        position{line: 344, col: 12, offset: 10674},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 347, col: 8, offset: 10757},
																													expr: &notExpr{
																														pos: position{line: 347, col: 10, offset: 10759},
																														expr: &seqExpr{
																															pos: position{line: 347, col: 12, offset: 10761},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 347, col: 12, offset: 10761},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonLongHandAttributes547,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 347, col: 19, offset: 10768},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 327, col: 29, offset: 10063},
																				run: (*parser).callonLongHandAttributes550,
																				expr: &seqExpr{
																					pos: position{line: 327, col: 29, offset: 10063},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 327, col: 29, offset: 10063},
																							val:        "%",
																							ignoreCase: false,
																							want:       "\"%\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 327, col: 33, offset: 10067},
																							label: "option",
																							expr: &choiceExpr{
																								pos: position{line: 333, col: 5, offset: 10220},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 388, col: 5, offset: 12181},
																										run: (*parser).callonLongHandAttributes555,
																										expr: &seqExpr{
																											pos: position{line: 388, col: 5, offset: 12181},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 388, col: 5, offset: 12181},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&notExpr{
																													pos: position{line: 388, col: 9, offset: 12185},
																													expr: &litMatcher{
																														pos:        position{line: 388, col: 10, offset: 12186},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 389, col: 5, offset: 12265},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 400, col: 5, offset: 12528},
																														run: (*parser).callonLongHandAttributes561,
																														expr: &labeledExpr{
																															pos:   position{line: 400, col: 5, offset: 12528},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 400, col: 14, offset: 12537},
																																expr: &choiceExpr{
																																	pos: position{line: 401, col: 9, offset: 12547},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2864, col: 14, offset: 94885},
																																			run: (*parser).callonLongHandAttributes565,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2864, col: 14, offset: 94885},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2864, col: 14, offset: 94885},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2948, col: 10, offset: 97526},
																																			run: (*parser).callonLongHandAttributes568,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2948, col: 11, offset: 97527},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 493, col: 5, offset: 15873},
																																			run: (*parser).callonLongHandAttributes570,
																																			expr: &seqExpr{
																																				pos: position{line: 493, col: 5, offset: 15873},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 493, col: 5, offset: 15873},
																																						run: (*parser).callonLongHandAttributes572,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 496, col: 5, offset: 15937},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 496, col: 14, offset: 15946},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 507, col: 25, offset: 16408},
																																									run: (*parser).callonLongHandAttributes575,
																																									expr: &seqExpr{
																																										pos: position{line: 507, col: 25, offset: 16408},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 507, col: 25, offset: 16408},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 507, col: 37, offset: 16420},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													run: (*parser).callonLongHandAttributes579,
																																													expr: &seqExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 162, col: 18, offset: 4814},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 162, col: 28, offset: 4824},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 162, col: 29, offset: 4825},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 507, col: 56, offset: 16439},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 507, col: 62, offset: 16445},
																																													expr: &actionExpr{
																																														pos: position{line: 515, col: 17, offset: 16708},
																																														run: (*parser).callonLongHandAttributes586,
																																														expr: &seqExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 515, col: 17, offset: 16708},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 515, col: 21, offset: 16712},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 515, col: 28, offset: 16719},
																																																				run: (*parser).callonLongHandAttributes591,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 515, col: 28, offset: 16719},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 517, col: 9, offset: 16773},
																																																				run: (*parser).callonLongHandAttributes593,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 517, col: 9, offset: 16773},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 507, col: 78, offset: 16461},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 511, col: 25, offset: 16563},
																																									run: (*parser).callonLongHandAttributes597,
																																									expr: &seqExpr{
																																										pos: position{line: 511, col: 25, offset: 16563},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 511, col: 25, offset: 16563},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 511, col: 38, offset: 16576},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													run: (*parser).callonLongHandAttributes601,
																																													expr: &seqExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 162, col: 18, offset: 4814},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 162, col: 28, offset: 4824},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 162, col: 29, offset: 4825},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 511, col: 57, offset: 16595},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 511, col: 63, offset: 16601},
																																													expr: &actionExpr{
																																														pos: position{line: 515, col: 17, offset: 16708},
																																														run: (*parser).callonLongHandAttributes608,
																																														expr: &seqExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 515, col: 17, offset: 16708},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 515, col: 21, offset: 16712},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 515, col: 28, offset: 16719},
																																																				run: (*parser).callonLongHandAttributes613,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 515, col: 28, offset: 16719},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 517, col: 9, offset: 16773},
																																																				run: (*parser).callonLongHandAttributes615,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 517, col: 9, offset: 16773},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 511, col: 79, offset: 16617},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 500, col: 31, offset: 16063},
																																									run: (*parser).callonLongHandAttributes619,
																																									expr: &seqExpr{
																																										pos: position{line: 500, col: 31, offset: 16063},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 500, col: 31, offset: 16063},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 500, col: 35, offset: 16067},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													run: (*parser).callonLongHandAttributes623,
																																													expr: &seqExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 162, col: 18, offset: 4814},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 162, col: 28, offset: 4824},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 162, col: 29, offset: 4825},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 500, col: 54, offset: 16086},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 404, col: 12, offset: 12616},
																																			run: (*parser).callonLongHandAttributes629,
																																			expr: &litMatcher{
																																				pos:        position{line: 404, col: 12, offset: 12616},
																																				val:        "\\'",
																																				ignoreCase: false,
																																				want:       "\"\\\\'\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 407, col: 13, offset: 12718},
																																			val:        "'`",
																																			ignoreCase: false,
																																			want:       "\"'`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 407, col: 20, offset: 12725},
																																			val:        "`'",
																																			ignoreCase: false,
																																			want:       "\"`'\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 407, col: 27, offset: 12732},
																																			run: (*parser).callonLongHandAttributes633,
																																			expr: &litMatcher{
																																				pos:        position{line: 407, col: 27, offset: 12732},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 410, col: 12, offset: 12892},
																																			run: (*parser).callonLongHandAttributes635,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 410, col: 12, offset: 12892},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 410, col: 12, offset: 12892},
																																					val:        "[^\\r\\n\\\\\\ ]",
																																					chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 390, col: 5, offset: 12316},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 418, col: 5, offset: 13127},
																										run: (*parser).callonLongHandAttributes639,
																										expr: &seqExpr{
																											pos: position{line: 418, col: 5, offset: 13127},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 418, col: 5, offset: 13127},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&notExpr{
																													pos: position{line: 418, col: 10, offset: 13132},
																													expr: &litMatcher{
																														pos:        position{line: 418, col: 11, offset: 13133},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 5, offset: 13212},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 429, col: 5, offset: 13492},
																														run: (*parser).callonLongHandAttributes645,
																														expr: &labeledExpr{
																															pos:   position{line: 429, col: 5, offset: 13492},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 429, col: 14, offset: 13501},
																																expr: &choiceExpr{
																																	pos: position{line: 430, col: 9, offset: 13511},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2864, col: 14, offset: 94885},
																																			run: (*parser).callonLongHandAttributes649,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2864, col: 14, offset: 94885},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2864, col: 14, offset: 94885},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2948, col: 10, offset: 97526},
																																			run: (*parser).callonLongHandAttributes652,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2948, col: 11, offset: 97527},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 493, col: 5, offset: 15873},
																																			run: (*parser).callonLongHandAttributes654,
																																			expr: &seqExpr{
																																				pos: position{line: 493, col: 5, offset: 15873},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 493, col: 5, offset: 15873},
																																						run: (*parser).callonLongHandAttributes656,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 496, col: 5, offset: 15937},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 496, col: 14, offset: 15946},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 507, col: 25, offset: 16408},
																																									run: (*parser).callonLongHandAttributes659,
																																									expr: &seqExpr{
																																										pos: position{line: 507, col: 25, offset: 16408},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 507, col: 25, offset: 16408},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 507, col: 37, offset: 16420},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													run: (*parser).callonLongHandAttributes663,
																																													expr: &seqExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 162, col: 18, offset: 4814},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 162, col: 28, offset: 4824},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 162, col: 29, offset: 4825},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 507, col: 56, offset: 16439},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 507, col: 62, offset: 16445},
																																													expr: &actionExpr{
																																														pos: position{line: 515, col: 17, offset: 16708},
																																														run: (*parser).callonLongHandAttributes670,
																																														expr: &seqExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 515, col: 17, offset: 16708},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 515, col: 21, offset: 16712},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 515, col: 28, offset: 16719},
																																																				run: (*parser).callonLongHandAttributes675,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 515, col: 28, offset: 16719},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 517, col: 9, offset: 16773},
																																																				run: (*parser).callonLongHandAttributes677,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 517, col: 9, offset: 16773},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 507, col: 78, offset: 16461},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 511, col: 25, offset: 16563},
																																									run: (*parser).callonLongHandAttributes681,
																																									expr: &seqExpr{
																																										pos: position{line: 511, col: 25, offset: 16563},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 511, col: 25, offset: 16563},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 511, col: 38, offset: 16576},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													run: (*parser).callonLongHandAttributes685,
																																													expr: &seqExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 162, col: 18, offset: 4814},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 162, col: 28, offset: 4824},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 162, col: 29, offset: 4825},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 511, col: 57, offset: 16595},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 511, col: 63, offset: 16601},
																																													expr: &actionExpr{
																																														pos: position{line: 515, col: 17, offset: 16708},
																																														run: (*parser).callonLongHandAttributes692,
																																														expr: &seqExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 515, col: 17, offset: 16708},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 515, col: 21, offset: 16712},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 515, col: 28, offset: 16719},
																																																				run: (*parser).callonLongHandAttributes697,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 515, col: 28, offset: 16719},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 517, col: 9, offset: 16773},
																																																				run: (*parser).callonLongHandAttributes699,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 517, col: 9, offset: 16773},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 511, col: 79, offset: 16617},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 500, col: 31, offset: 16063},
																																									run: (*parser).callonLongHandAttributes703,
																																									expr: &seqExpr{
																																										pos: position{line: 500, col: 31, offset: 16063},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 500, col: 31, offset: 16063},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 500, col: 35, offset: 16067},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													run: (*parser).callonLongHandAttributes707,
																																													expr: &seqExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 162, col: 18, offset: 4814},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 162, col: 28, offset: 4824},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 162, col: 29, offset: 4825},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 500, col: 54, offset: 16086},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 433, col: 12, offset: 13580},
																																			run: (*parser).callonLongHandAttributes713,
																																			expr: &litMatcher{
																																				pos:        position{line: 433, col: 12, offset: 13580},
																																				val:        "\\\"",
																																				ignoreCase: false,
																																				want:       "\"\\\\\\\"\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 436, col: 13, offset: 13682},
																																			val:        "\"`",
																																			ignoreCase: false,
																																			want:       "\"\\\"`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 436, col: 21, offset: 13690},
																																			val:        "`\"",
																																			ignoreCase: false,
																																			want:       "\"`\\\"\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 436, col: 29, offset: 13698},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 436, col: 35, offset: 13704},
																																			run: (*parser).callonLongHandAttributes718,
																																			expr: &litMatcher{
																																				pos:        position{line: 436, col: 35, offset: 13704},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 439, col: 12, offset: 13887},
																																			run: (*parser).callonLongHandAttributes720,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 439, col: 12, offset: 13887},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 439, col: 12, offset: 13887},
																																					val:        "[^\\r\\n\\\\\"` ]",
																																					chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 420, col: 5, offset: 13263},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&andExpr{
																													pos: position{line: 420, col: 10, offset: 13268},
																													expr: &notExpr{
																														pos: position{line: 420, col: 12, offset: 13270},
																														expr: &seqExpr{
																															pos: position{line: 420, col: 14, offset: 13272},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 420, col: 14, offset: 13272},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonLongHandAttributes728,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 420, col: 21, offset: 13279},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 335, col: 7, offset: 10294},
																										run: (*parser).callonLongHandAttributes731,
																										expr: &seqExpr{
																											pos: position{line: 335, col: 7, offset: 10294},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 335, col: 7, offset: 10294},
																													label: "elements",
																													expr: &oneOrMoreExpr{
																														pos: position{line: 335, col: 16, offset: 10303},
																														expr: &choiceExpr{
																															pos: position{line: 338, col: 9, offset: 10485},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 338, col: 10, offset: 10486},
																																	run: (*parser).callonLongHandAttributes736,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 338, col: 10, offset: 10486},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 338, col: 10, offset: 10486},
																																			val:        "[^,=.%# \\r\\n�{]]",
																																			chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 991, col: 23, offset: 31326},
																																	run: (*parser).callonLongHandAttributes739,
																																	expr: &seqExpr{
																																		pos: position{line: 991, col: 23, offset: 31326},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 989, col: 32, offset: 31294},
																																				val:        "�",
																																				ignoreCase: false,
																																				want:       "\"�\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 991, col: 51, offset: 31354},
																																				label: "ref",
																																				expr: &actionExpr{
																																					pos: position{line: 991, col: 56, offset: 31359},
																																					run: (*parser).callonLongHandAttributes743,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 991, col: 56, offset: 31359},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 991, col: 56, offset: 31359},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 989, col: 32, offset: 31294},
																																				val:        "�",
																																				ignoreCase: false,
																																				want:       "\"�\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 493, col: 5, offset: 15873},
																																	run: (*parser).callonLongHandAttributes747,
																																	expr: &seqExpr{
																																		pos: position{line: 493, col: 5, offset: 15873},
																																		exprs: []interface{}{
																																			&andCodeExpr{
																																				pos: position{line: 493, col: 5, offset: 15873},
																																				run: (*parser).callonLongHandAttributes749,
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 496, col: 5, offset: 15937},
																																				label: "element",
																																				expr: &choiceExpr{
																																					pos: position{line: 496, col: 14, offset: 15946},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 507, col: 25, offset: 16408},
																																							run: (*parser).callonLongHandAttributes752,
																																							expr: &seqExpr{
																																								pos: position{line: 507, col: 25, offset: 16408},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 507, col: 25, offset: 16408},
																																										val:        "{counter:",
																																										ignoreCase: false,
																																										want:       "\"{counter:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 507, col: 37, offset: 16420},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 162, col: 18, offset: 4814},
																																											run: (*parser).callonLongHandAttributes756,
																																											expr: &seqExpr{
																																												pos: position{line: 162, col: 18, offset: 4814},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 162, col: 18, offset: 4814},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 162, col: 28, offset: 4824},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 162, col: 29, offset: 4825},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 507, col: 56, offset: 16439},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 507, col: 62, offset: 16445},
																																											expr: &actionExpr{
																																												pos: position{line: 515, col: 17, offset: 16708},
																																												run: (*parser).callonLongHandAttributes763,
																																												expr: &seqExpr{
																																													pos: position{line: 515, col: 17, offset: 16708},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 515, col: 17, offset: 16708},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 515, col: 21, offset: 16712},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 515, col: 28, offset: 16719},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		run: (*parser).callonLongHandAttributes768,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 515, col: 28, offset: 16719},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 517, col: 9, offset: 16773},
																																																		run: (*parser).callonLongHandAttributes770,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 517, col: 9, offset: 16773},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 517, col: 9, offset: 16773},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 507, col: 78, offset: 16461},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 511, col: 25, offset: 16563},
																																							run: (*parser).callonLongHandAttributes774,
																																							expr: &seqExpr{
																																								pos: position{line: 511, col: 25, offset: 16563},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 511, col: 25, offset: 16563},
																																										val:        "{counter2:",
																																										ignoreCase: false,
																																										want:       "\"{counter2:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 511, col: 38, offset: 16576},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 162, col: 18, offset: 4814},
																																											run: (*parser).callonLongHandAttributes778,
																																											expr: &seqExpr{
																																												pos: position{line: 162, col: 18, offset: 4814},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 162, col: 18, offset: 4814},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 162, col: 28, offset: 4824},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 162, col: 29, offset: 4825},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 511, col: 57, offset: 16595},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 511, col: 63, offset: 16601},
																																											expr: &actionExpr{
																																												pos: position{line: 515, col: 17, offset: 16708},
																																												run: (*parser).callonLongHandAttributes785,
																																												expr: &seqExpr{
																																													pos: position{line: 515, col: 17, offset: 16708},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 515, col: 17, offset: 16708},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 515, col: 21, offset: 16712},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 515, col: 28, offset: 16719},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		run: (*parser).callonLongHandAttributes790,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 515, col: 28, offset: 16719},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 517, col: 9, offset: 16773},
																																																		run: (*parser).callonLongHandAttributes792,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 517, col: 9, offset: 16773},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 517, col: 9, offset: 16773},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 511, col: 79, offset: 16617},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 500, col: 31, offset: 16063},
																																							run: (*parser).callonLongHandAttributes796,
																																							expr: &seqExpr{
																																								pos: position{line: 500, col: 31, offset: 16063},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 500, col: 31, offset: 16063},
																																										val:        "{",
																																										ignoreCase: false,
																																										want:       "\"{\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 500, col: 35, offset: 16067},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 162, col: 18, offset: 4814},
																																											run: (*parser).callonLongHandAttributes800,
																																											expr: &seqExpr{
																																												pos: position{line: 162, col: 18, offset: 4814},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 162, col: 18, offset: 4814},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 162, col: 28, offset: 4824},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 162, col: 29, offset: 4825},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 500, col: 54, offset: 16086},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 344, col: 12, offset: 10674},
																																	run: (*parser).callonLongHandAttributes806,
																																	expr: &litMatcher{
																																		pos:        position{line: 344, col: 12, offset: 10674},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 347, col: 8, offset: 10757},
																													expr: &notExpr{
																														pos: position{line: 347, col: 10, offset: 10759},
																														expr: &seqExpr{
																															pos: position{line: 347, col: 12, offset: 10761},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 347, col: 12, offset: 10761},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonLongHandAttributes812,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 347, col: 19, offset: 10768},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 322, col: 30, offset: 9903},
																				run: (*parser).callonLongHandAttributes815,
																				expr: &seqExpr{
																					pos: position{line: 322, col: 30, offset: 9903},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 322, col: 30, offset: 9903},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 322, col: 34, offset: 9907},
																							label: "role",
																							expr: &choiceExpr{
																								pos: position{line: 333, col: 5, offset: 10220},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 388, col: 5, offset: 12181},
																										run: (*parser).callonLongHandAttributes820,
																										expr: &seqExpr{
																											pos: position{line: 388, col: 5, offset: 12181},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 388, col: 5, offset: 12181},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&notExpr{
																													pos: position{line: 388, col: 9, offset: 12185},
																													expr: &litMatcher{
																														pos:        position{line: 388, col: 10, offset: 12186},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 389, col: 5, offset: 12265},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 400, col: 5, offset: 12528},
																														run: (*parser).callonLongHandAttributes826,
																														expr: &labeledExpr{
																															pos:   position{line: 400, col: 5, offset: 12528},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 400, col: 14, offset: 12537},
																																expr: &choiceExpr{
																																	pos: position{line: 401, col: 9, offset: 12547},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2864, col: 14, offset: 94885},
																																			run: (*parser).callonLongHandAttributes830,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2864, col: 14, offset: 94885},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2864, col: 14, offset: 94885},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2948, col: 10, offset: 97526},
																																			run: (*parser).callonLongHandAttributes833,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2948, col: 11, offset: 97527},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 493, col: 5, offset: 15873},
																																			run: (*parser).callonLongHandAttributes835,
																																			expr: &seqExpr{
																																				pos: position{line: 493, col: 5, offset: 15873},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 493, col: 5, offset: 15873},
																																						run: (*parser).callonLongHandAttributes837,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 496, col: 5, offset: 15937},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 496, col: 14, offset: 15946},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 507, col: 25, offset: 16408},
																																									run: (*parser).callonLongHandAttributes840,
																																									expr: &seqExpr{
																																										pos: position{line: 507, col: 25, offset: 16408},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 507, col: 25, offset: 16408},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 507, col: 37, offset: 16420},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													run: (*parser).callonLongHandAttributes844,
																																													expr: &seqExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 162, col: 18, offset: 4814},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 162, col: 28, offset: 4824},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 162, col: 29, offset: 4825},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 507, col: 56, offset: 16439},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 507, col: 62, offset: 16445},
																																													expr: &actionExpr{
																																														pos: position{line: 515, col: 17, offset: 16708},
																																														run: (*parser).callonLongHandAttributes851,
																																														expr: &seqExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 515, col: 17, offset: 16708},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 515, col: 21, offset: 16712},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 515, col: 28, offset: 16719},
																																																				run: (*parser).callonLongHandAttributes856,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 515, col: 28, offset: 16719},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 517, col: 9, offset: 16773},
																																																				run: (*parser).callonLongHandAttributes858,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 517, col: 9, offset: 16773},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 507, col: 78, offset: 16461},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 511, col: 25, offset: 16563},
																																									run: (*parser).callonLongHandAttributes862,
																																									expr: &seqExpr{
																																										pos: position{line: 511, col: 25, offset: 16563},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 511, col: 25, offset: 16563},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 511, col: 38, offset: 16576},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													run: (*parser).callonLongHandAttributes866,
																																													expr: &seqExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 162, col: 18, offset: 4814},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 162, col: 28, offset: 4824},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 162, col: 29, offset: 4825},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 511, col: 57, offset: 16595},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 511, col: 63, offset: 16601},
																																													expr: &actionExpr{
																																														pos: position{line: 515, col: 17, offset: 16708},
																																														run: (*parser).callonLongHandAttributes873,
																																														expr: &seqExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 515, col: 17, offset: 16708},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 515, col: 21, offset: 16712},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 515, col: 28, offset: 16719},
																																																				run: (*parser).callonLongHandAttributes878,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 515, col: 28, offset: 16719},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 517, col: 9, offset: 16773},
																																																				run: (*parser).callonLongHandAttributes880,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 517, col: 9, offset: 16773},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 511, col: 79, offset: 16617},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 500, col: 31, offset: 16063},
																																									run: (*parser).callonLongHandAttributes884,
																																									expr: &seqExpr{
																																										pos: position{line: 500, col: 31, offset: 16063},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 500, col: 31, offset: 16063},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 500, col: 35, offset: 16067},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													run: (*parser).callonLongHandAttributes888,
																																													expr: &seqExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 162, col: 18, offset: 4814},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 162, col: 28, offset: 4824},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 162, col: 29, offset: 4825},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 500, col: 54, offset: 16086},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 404, col: 12, offset: 12616},
																																			run: (*parser).callonLongHandAttributes894,
																																			expr: &litMatcher{
																																				pos:        position{line: 404, col: 12, offset: 12616},
																																				val:        "\\'",
																																				ignoreCase: false,
																																				want:       "\"\\\\'\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 407, col: 13, offset: 12718},
																																			val:        "'`",
																																			ignoreCase: false,
																																			want:       "\"'`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 407, col: 20, offset: 12725},
																																			val:        "`'",
																																			ignoreCase: false,
																																			want:       "\"`'\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 407, col: 27, offset: 12732},
																																			run: (*parser).callonLongHandAttributes898,
																																			expr: &litMatcher{
																																				pos:        position{line: 407, col: 27, offset: 12732},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 410, col: 12, offset: 12892},
																																			run: (*parser).callonLongHandAttributes900,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 410, col: 12, offset: 12892},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 410, col: 12, offset: 12892},
																																					val:        "[^\\r\\n\\\\\\ ]",
																																					chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 390, col: 5, offset: 12316},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 418, col: 5, offset: 13127},
																										run: (*parser).callonLongHandAttributes904,
																										expr: &seqExpr{
																											pos: position{line: 418, col: 5, offset: 13127},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 418, col: 5, offset: 13127},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&notExpr{
																													pos: position{line: 418, col: 10, offset: 13132},
																													expr: &litMatcher{
																														pos:        position{line: 418, col: 11, offset: 13133},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 419, col: 5, offset: 13212},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 429, col: 5, offset: 13492},
																														run: (*parser).callonLongHandAttributes910,
																														expr: &labeledExpr{
																															pos:   position{line: 429, col: 5, offset: 13492},
																															label: "elements",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 429, col: 14, offset: 13501},
																																expr: &choiceExpr{
																																	pos: position{line: 430, col: 9, offset: 13511},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2864, col: 14, offset: 94885},
																																			run: (*parser).callonLongHandAttributes914,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2864, col: 14, offset: 94885},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2864, col: 14, offset: 94885},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 2948, col: 10, offset: 97526},
																																			run: (*parser).callonLongHandAttributes917,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2948, col: 11, offset: 97527},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 493, col: 5, offset: 15873},
																																			run: (*parser).callonLongHandAttributes919,
																																			expr: &seqExpr{
																																				pos: position{line: 493, col: 5, offset: 15873},
																																				exprs: []interface{}{
																																					&andCodeExpr{
																																						pos: position{line: 493, col: 5, offset: 15873},
																																						run: (*parser).callonLongHandAttributes921,
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 496, col: 5, offset: 15937},
																																						label: "element",
																																						expr: &choiceExpr{
																																							pos: position{line: 496, col: 14, offset: 15946},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 507, col: 25, offset: 16408},
																																									run: (*parser).callonLongHandAttributes924,
																																									expr: &seqExpr{
																																										pos: position{line: 507, col: 25, offset: 16408},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 507, col: 25, offset: 16408},
																																												val:        "{counter:",
																																												ignoreCase: false,
																																												want:       "\"{counter:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 507, col: 37, offset: 16420},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													run: (*parser).callonLongHandAttributes928,
																																													expr: &seqExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 162, col: 18, offset: 4814},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 162, col: 28, offset: 4824},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 162, col: 29, offset: 4825},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 507, col: 56, offset: 16439},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 507, col: 62, offset: 16445},
																																													expr: &actionExpr{
																																														pos: position{line: 515, col: 17, offset: 16708},
																																														run: (*parser).callonLongHandAttributes935,
																																														expr: &seqExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 515, col: 17, offset: 16708},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 515, col: 21, offset: 16712},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 515, col: 28, offset: 16719},
																																																				run: (*parser).callonLongHandAttributes940,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 515, col: 28, offset: 16719},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 517, col: 9, offset: 16773},
																																																				run: (*parser).callonLongHandAttributes942,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 517, col: 9, offset: 16773},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 507, col: 78, offset: 16461},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 511, col: 25, offset: 16563},
																																									run: (*parser).callonLongHandAttributes946,
																																									expr: &seqExpr{
																																										pos: position{line: 511, col: 25, offset: 16563},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 511, col: 25, offset: 16563},
																																												val:        "{counter2:",
																																												ignoreCase: false,
																																												want:       "\"{counter2:\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 511, col: 38, offset: 16576},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													run: (*parser).callonLongHandAttributes950,
																																													expr: &seqExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 162, col: 18, offset: 4814},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 162, col: 28, offset: 4824},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 162, col: 29, offset: 4825},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 511, col: 57, offset: 16595},
																																												label: "start",
																																												expr: &zeroOrOneExpr{
																																													pos: position{line: 511, col: 63, offset: 16601},
																																													expr: &actionExpr{
																																														pos: position{line: 515, col: 17, offset: 16708},
																																														run: (*parser).callonLongHandAttributes957,
																																														expr: &seqExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															exprs: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 515, col: 17, offset: 16708},
																																																	val:        ":",
																																																	ignoreCase: false,
																																																	want:       "\":\"",
																																																},
																																																&labeledExpr{
																																																	pos:   position{line: 515, col: 21, offset: 16712},
																																																	label: "start",
																																																	expr: &choiceExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		alternatives: []interface{}{
																																																			&actionExpr{
																																																				pos: position{line: 515, col: 28, offset: 16719},
																																																				run: (*parser).callonLongHandAttributes962,
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 515, col: 28, offset: 16719},
																																																					val:        "[A-Za-z]",
																																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																			&actionExpr{
																																																				pos: position{line: 517, col: 9, offset: 16773},
																																																				run: (*parser).callonLongHandAttributes964,
																																																				expr: &oneOrMoreExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 517, col: 9, offset: 16773},
																																																						val:        "[0-9]",
																																																						ranges:     []rune{'0', '9'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 511, col: 79, offset: 16617},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 500, col: 31, offset: 16063},
																																									run: (*parser).callonLongHandAttributes968,
																																									expr: &seqExpr{
																																										pos: position{line: 500, col: 31, offset: 16063},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 500, col: 31, offset: 16063},
																																												val:        "{",
																																												ignoreCase: false,
																																												want:       "\"{\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 500, col: 35, offset: 16067},
																																												label: "name",
																																												expr: &actionExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													run: (*parser).callonLongHandAttributes972,
																																													expr: &seqExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														exprs: []interface{}{
																																															&charClassMatcher{
																																																pos:        position{line: 162, col: 18, offset: 4814},
																																																val:        "[_0-9\\pL]",
																																																chars:      []rune{'_'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																															&zeroOrMoreExpr{
																																																pos: position{line: 162, col: 28, offset: 4824},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 162, col: 29, offset: 4825},
																																																	val:        "[-0-9\\pL]",
																																																	chars:      []rune{'-'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																											&litMatcher{
																																												pos:        position{line: 500, col: 54, offset: 16086},
																																												val:        "}",
																																												ignoreCase: false,
																																												want:       "\"}\"",
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 433, col: 12, offset: 13580},
																																			run: (*parser).callonLongHandAttributes978,
																																			expr: &litMatcher{
																																				pos:        position{line: 433, col: 12, offset: 13580},
																																				val:        "\\\"",
																																				ignoreCase: false,
																																				want:       "\"\\\\\\\"\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 436, col: 13, offset: 13682},
																																			val:        "\"`",
																																			ignoreCase: false,
																																			want:       "\"\\\"`\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 436, col: 21, offset: 13690},
																																			val:        "`\"",
																																			ignoreCase: false,
																																			want:       "\"`\\\"\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 436, col: 29, offset: 13698},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&actionExpr{
																																			pos: position{line: 436, col: 35, offset: 13704},
																																			run: (*parser).callonLongHandAttributes983,
																																			expr: &litMatcher{
																																				pos:        position{line: 436, col: 35, offset: 13704},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 439, col: 12, offset: 13887},
																																			run: (*parser).callonLongHandAttributes985,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 439, col: 12, offset: 13887},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 439, col: 12, offset: 13887},
																																					val:        "[^\\r\\n\\\\\"` ]",
																																					chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 420, col: 5, offset: 13263},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&andExpr{
																													pos: position{line: 420, col: 10, offset: 13268},
																													expr: &notExpr{
																														pos: position{line: 420, col: 12, offset: 13270},
																														expr: &seqExpr{
																															pos: position{line: 420, col: 14, offset: 13272},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 420, col: 14, offset: 13272},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonLongHandAttributes993,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 420, col: 21, offset: 13279},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 335, col: 7, offset: 10294},
																										run: (*parser).callonLongHandAttributes996,
																										expr: &seqExpr{
																											pos: position{line: 335, col: 7, offset: 10294},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 335, col: 7, offset: 10294},
																													label: "elements",
																													expr: &oneOrMoreExpr{
																														pos: position{line: 335, col: 16, offset: 10303},
																														expr: &choiceExpr{
																															pos: position{line: 338, col: 9, offset: 10485},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 338, col: 10, offset: 10486},
																																	run: (*parser).callonLongHandAttributes1001,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 338, col: 10, offset: 10486},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 338, col: 10, offset: 10486},
																																			val:        "[^,=.%# \\r\\n�{]]",
																																			chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 991, col: 23, offset: 31326},
																																	run: (*parser).callonLongHandAttributes1004,
																																	expr: &seqExpr{
																																		pos: position{line: 991, col: 23, offset: 31326},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 989, col: 32, offset: 31294},
																																				val:        "�",
																																				ignoreCase: false,
																																				want:       "\"�\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 991, col: 51, offset: 31354},
																																				label: "ref",
																																				expr: &actionExpr{
																																					pos: position{line: 991, col: 56, offset: 31359},
																																					run: (*parser).callonLongHandAttributes1008,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 991, col: 56, offset: 31359},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 991, col: 56, offset: 31359},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 989, col: 32, offset: 31294},
																																				val:        "�",
																																				ignoreCase: false,
																																				want:       "\"�\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 493, col: 5, offset: 15873},
																																	run: (*parser).callonLongHandAttributes1012,
																																	expr: &seqExpr{
																																		pos: position{line: 493, col: 5, offset: 15873},
																																		exprs: []interface{}{
																																			&andCodeExpr{
																																				pos: position{line: 493, col: 5, offset: 15873},
																																				run: (*parser).callonLongHandAttributes1014,
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 496, col: 5, offset: 15937},
																																				label: "element",
																																				expr: &choiceExpr{
																																					pos: position{line: 496, col: 14, offset: 15946},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 507, col: 25, offset: 16408},
																																							run: (*parser).callonLongHandAttributes1017,
																																							expr: &seqExpr{
																																								pos: position{line: 507, col: 25, offset: 16408},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 507, col: 25, offset: 16408},
																																										val:        "{counter:",
																																										ignoreCase: false,
																																										want:       "\"{counter:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 507, col: 37, offset: 16420},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 162, col: 18, offset: 4814},
																																											run: (*parser).callonLongHandAttributes1021,
																																											expr: &seqExpr{
																																												pos: position{line: 162, col: 18, offset: 4814},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 162, col: 18, offset: 4814},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 162, col: 28, offset: 4824},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 162, col: 29, offset: 4825},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 507, col: 56, offset: 16439},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 507, col: 62, offset: 16445},
																																											expr: &actionExpr{
																																												pos: position{line: 515, col: 17, offset: 16708},
																																												run: (*parser).callonLongHandAttributes1028,
																																												expr: &seqExpr{
																																													pos: position{line: 515, col: 17, offset: 16708},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 515, col: 17, offset: 16708},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 515, col: 21, offset: 16712},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 515, col: 28, offset: 16719},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		run: (*parser).callonLongHandAttributes1033,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 515, col: 28, offset: 16719},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 517, col: 9, offset: 16773},
																																																		run: (*parser).callonLongHandAttributes1035,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 517, col: 9, offset: 16773},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 517, col: 9, offset: 16773},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 507, col: 78, offset: 16461},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 511, col: 25, offset: 16563},
																																							run: (*parser).callonLongHandAttributes1039,
																																							expr: &seqExpr{
																																								pos: position{line: 511, col: 25, offset: 16563},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 511, col: 25, offset: 16563},
																																										val:        "{counter2:",
																																										ignoreCase: false,
																																										want:       "\"{counter2:\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 511, col: 38, offset: 16576},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 162, col: 18, offset: 4814},
																																											run: (*parser).callonLongHandAttributes1043,
																																											expr: &seqExpr{
																																												pos: position{line: 162, col: 18, offset: 4814},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 162, col: 18, offset: 4814},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 162, col: 28, offset: 4824},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 162, col: 29, offset: 4825},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 511, col: 57, offset: 16595},
																																										label: "start",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 511, col: 63, offset: 16601},
																																											expr: &actionExpr{
																																												pos: position{line: 515, col: 17, offset: 16708},
																																												run: (*parser).callonLongHandAttributes1050,
																																												expr: &seqExpr{
																																													pos: position{line: 515, col: 17, offset: 16708},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 515, col: 17, offset: 16708},
																																															val:        ":",
																																															ignoreCase: false,
																																															want:       "\":\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 515, col: 21, offset: 16712},
																																															label: "start",
																																															expr: &choiceExpr{
																																																pos: position{line: 515, col: 28, offset: 16719},
																																																alternatives: []interface{}{
																																																	&actionExpr{
																																																		pos: position{line: 515, col: 28, offset: 16719},
																																																		run: (*parser).callonLongHandAttributes1055,
																																																		expr: &charClassMatcher{
																																																			pos:        position{line: 515, col: 28, offset: 16719},
																																																			val:        "[A-Za-z]",
																																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																	},
																																																	&actionExpr{
																																																		pos: position{line: 517, col: 9, offset: 16773},
																																																		run: (*parser).callonLongHandAttributes1057,
																																																		expr: &oneOrMoreExpr{
																																																			pos: position{line: 517, col: 9, offset: 16773},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 517, col: 9, offset: 16773},
																																																				val:        "[0-9]",
																																																				ranges:     []rune{'0', '9'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 511, col: 79, offset: 16617},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 500, col: 31, offset: 16063},
																																							run: (*parser).callonLongHandAttributes1061,
																																							expr: &seqExpr{
																																								pos: position{line: 500, col: 31, offset: 16063},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 500, col: 31, offset: 16063},
																																										val:        "{",
																																										ignoreCase: false,
																																										want:       "\"{\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 500, col: 35, offset: 16067},
																																										label: "name",
																																										expr: &actionExpr{
																																											pos: position{line: 162, col: 18, offset: 4814},
																																											run: (*parser).callonLongHandAttributes1065,
																																											expr: &seqExpr{
																																												pos: position{line: 162, col: 18, offset: 4814},
																																												exprs: []interface{}{
																																													&charClassMatcher{
																																														pos:        position{line: 162, col: 18, offset: 4814},
																																														val:        "[_0-9\\pL]",
																																														chars:      []rune{'_'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																													&zeroOrMoreExpr{
																																														pos: position{line: 162, col: 28, offset: 4824},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 162, col: 29, offset: 4825},
																																															val:        "[-0-9\\pL]",
																																															chars:      []rune{'-'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 500, col: 54, offset: 16086},
																																										val:        "}",
																																										ignoreCase: false,
																																										want:       "\"}\"",
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 344, col: 12, offset: 10674},
																																	run: (*parser).callonLongHandAttributes1071,
																																	expr: &litMatcher{
																																		pos:        position{line: 344, col: 12, offset: 10674},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 347, col: 8, offset: 10757},
																													expr: &notExpr{
																														pos: position{line: 347, col: 10, offset: 10759},
																														expr: &seqExpr{
																															pos: position{line: 347, col: 12, offset: 10761},
																															exprs: []interface{}{
																																&zeroOrMoreExpr{
																																	pos: position{line: 347, col: 12, offset: 10761},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonLongHandAttributes1077,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 347, col: 19, offset: 10768},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 296, col: 8, offset: 9178},
												expr: &seqExpr{
													pos: position{line: 296, col: 9, offset: 9179},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 296, col: 9, offset: 9179},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 296, col: 13, offset: 9183},
															expr: &actionExpr{
																pos: position{line: 2948, col: 10, offset: 97526},
																run: (*parser).callonLongHandAttributes1084,
																expr: &charClassMatcher{
																	pos:        position{line: 2948, col: 11, offset: 97527},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&andCodeExpr{
												pos: position{line: 297, col: 5, offset: 9197},
												run: (*parser).callonLongHandAttributes1086,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 270, col: 5, offset: 8304},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 270, col: 21, offset: 8320},
								expr: &choiceExpr{
									pos: position{line: 270, col: 22, offset: 8321},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 270, col: 22, offset: 8321},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 270, col: 44, offset: 8343},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 271, col: 5, offset: 8364},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 351, col: 1, offset: 10845},
			expr: &choiceExpr{
				pos: position{line: 351, col: 24, offset: 10868},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 352, col: 5, offset: 10874},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 352, col: 5, offset: 10874},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 352, col: 5, offset: 10874},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 352, col: 12, offset: 10881},
										name: "AttributeRawValue",
									},
								},
								&choiceExpr{
									pos: position{line: 352, col: 32, offset: 10901},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 352, col: 32, offset: 10901},
											expr: &seqExpr{
												pos: position{line: 352, col: 33, offset: 10902},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 352, col: 33, offset: 10902},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 352, col: 37, offset: 10906},
														expr: &actionExpr{
															pos: position{line: 2948, col: 10, offset: 97526},
															run: (*parser).callonPositionalAttribute11,
															expr: &charClassMatcher{
																pos:        position{line: 2948, col: 11, offset: 97527},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 352, col: 48, offset: 10917},
											expr: &litMatcher{
												pos:        position{line: 352, col: 49, offset: 10918},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 357, col: 6, offset: 11155},
						run: (*parser).callonPositionalAttribute15,
						expr: &seqExpr{
							pos: position{line: 357, col: 6, offset: 11155},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 357, col: 6, offset: 11155},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 357, col: 13, offset: 11162},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 357, col: 13, offset: 11162},
												expr: &actionExpr{
													pos: position{line: 2948, col: 10, offset: 97526},
													run: (*parser).callonPositionalAttribute20,
													expr: &charClassMatcher{
														pos:        position{line: 2948, col: 11, offset: 97527},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 357, col: 21, offset: 11170},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 357, col: 22, offset: 11171},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 357, col: 22, offset: 11171},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 357, col: 26, offset: 11175},
																expr: &actionExpr{
																	pos: position{line: 2948, col: 10, offset: 97526},
																	run: (*parser).callonPositionalAttribute26,
																	expr: &charClassMatcher{
																		pos:        position{line: 2948, col: 11, offset: 97527},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 357, col: 36, offset: 11185},
														expr: &litMatcher{
															pos:        position{line: 357, col: 37, offset: 11186},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 358, col: 5, offset: 11196},
									run: (*parser).callonPositionalAttribute30,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 368, col: 1, offset: 11511},
			expr: &actionExpr{
				pos: position{line: 368, col: 19, offset: 11529},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 368, col: 19, offset: 11529},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 368, col: 19, offset: 11529},
							label: "key",
							expr: &actionExpr{
								pos: position{line: 373, col: 22, offset: 11840},
								run: (*parser).callonNamedAttribute4,
								expr: &seqExpr{
									pos: position{line: 373, col: 22, offset: 11840},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 373, col: 22, offset: 11840},
											expr: &actionExpr{
												pos: position{line: 2948, col: 10, offset: 97526},
												run: (*parser).callonNamedAttribute7,
												expr: &charClassMatcher{
													pos:        position{line: 2948, col: 11, offset: 97527},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 373, col: 29, offset: 11847},
											expr: &charClassMatcher{
												pos:        position{line: 373, col: 29, offset: 11847},
												val:        "[^\\r\\n=,]]",
												chars:      []rune{'\r', '\n', '=', ',', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 373, col: 42, offset: 11860},
											expr: &actionExpr{
												pos: position{line: 2948, col: 10, offset: 97526},
												run: (*parser).callonNamedAttribute12,
												expr: &charClassMatcher{
													pos:        position{line: 2948, col: 11, offset: 97527},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 368, col: 43, offset: 11553},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 368, col: 47, offset: 11557},
							expr: &actionExpr{
								pos: position{line: 2948, col: 10, offset: 97526},
								run: (*parser).callonNamedAttribute16,
								expr: &charClassMatcher{
									pos:        position{line: 2948, col: 11, offset: 97527},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 368, col: 54, offset: 11564},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 368, col: 61, offset: 11571},
								name: "AttributeRawValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 368, col: 80, offset: 11590},
							expr: &seqExpr{
								pos: position{line: 368, col: 81, offset: 11591},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 368, col: 81, offset: 11591},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 368, col: 85, offset: 11595},
										expr: &actionExpr{
											pos: position{line: 2948, col: 10, offset: 97526},
											run: (*parser).callonNamedAttribute24,
											expr: &charClassMatcher{
												pos:        position{line: 2948, col: 11, offset: 97527},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeRawValue",
			pos:  position{line: 377, col: 1, offset: 11930},
			expr: &actionExpr{
				pos: position{line: 378, col: 5, offset: 11956},
				run: (*parser).callonAttributeRawValue1,
				expr: &seqExpr{
					pos: position{line: 378, col: 5, offset: 11956},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 378, col: 5, offset: 11956},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 379, col: 9, offset: 11972},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 388, col: 5, offset: 12181},
										run: (*parser).callonAttributeRawValue5,
										expr: &seqExpr{
											pos: position{line: 388, col: 5, offset: 12181},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 388, col: 5, offset: 12181},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&notExpr{
													pos: position{line: 388, col: 9, offset: 12185},
													expr: &litMatcher{
														pos:        position{line: 388, col: 10, offset: 12186},
														val:        "`",
														ignoreCase: false,
														want:       "\"`\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 389, col: 5, offset: 12265},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 400, col: 5, offset: 12528},
														run: (*parser).callonAttributeRawValue11,
														expr: &labeledExpr{
															pos:   position{line: 400, col: 5, offset: 12528},
															label: "elements",
															expr: &oneOrMoreExpr{
																pos: position{line: 400, col: 14, offset: 12537},
																expr: &choiceExpr{
																	pos: position{line: 401, col: 9, offset: 12547},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2864, col: 14, offset: 94885},
																			run: (*parser).callonAttributeRawValue15,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2864, col: 14, offset: 94885},
																				expr: &charClassMatcher{
																					pos:        position{line: 2864, col: 14, offset: 94885},
																					val:        "[0-9\\pL]",
																					ranges:     []rune{'0', '9'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2948, col: 10, offset: 97526},
																			run: (*parser).callonAttributeRawValue18,
																			expr: &charClassMatcher{
																				pos:        position{line: 2948, col: 11, offset: 97527},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&actionExpr{
																			pos: position{line: 493, col: 5, offset: 15873},
																			run: (*parser).callonAttributeRawValue20,
																			expr: &seqExpr{
																				pos: position{line: 493, col: 5, offset: 15873},
																				exprs: []interface{}{
																					&andCodeExpr{
																						pos: position{line: 493, col: 5, offset: 15873},
																						run: (*parser).callonAttributeRawValue22,
																					},
																					&labeledExpr{
																						pos:   position{line: 496, col: 5, offset: 15937},
																						label: "element",
																						expr: &choiceExpr{
																							pos: position{line: 496, col: 14, offset: 15946},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 507, col: 25, offset: 16408},
																									run: (*parser).callonAttributeRawValue25,
																									expr: &seqExpr{
																										pos: position{line: 507, col: 25, offset: 16408},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 507, col: 25, offset: 16408},
																												val:        "{counter:",
																												ignoreCase: false,
																												want:       "\"{counter:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 507, col: 37, offset: 16420},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 162, col: 18, offset: 4814},
																													run: (*parser).callonAttributeRawValue29,
																													expr: &seqExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 162, col: 18, offset: 4814},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 162, col: 28, offset: 4824},
																																expr: &charClassMatcher{
																																	pos:        position{line: 162, col: 29, offset: 4825},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 507, col: 56, offset: 16439},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 507, col: 62, offset: 16445},
																													expr: &actionExpr{
																														pos: position{line: 515, col: 17, offset: 16708},
																														run: (*parser).callonAttributeRawValue36,
																														expr: &seqExpr{
																															pos: position{line: 515, col: 17, offset: 16708},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 515, col: 17, offset: 16708},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 515, col: 21, offset: 16712},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 515, col: 28, offset: 16719},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 515, col: 28, offset: 16719},
																																				run: (*parser).callonAttributeRawValue41,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 515, col: 28, offset: 16719},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 517, col: 9, offset: 16773},
																																				run: (*parser).callonAttributeRawValue43,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 517, col: 9, offset: 16773},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 517, col: 9, offset: 16773},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 507, col: 78, offset: 16461},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 511, col: 25, offset: 16563},
																									run: (*parser).callonAttributeRawValue47,
																									expr: &seqExpr{
																										pos: position{line: 511, col: 25, offset: 16563},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 511, col: 25, offset: 16563},
																												val:        "{counter2:",
																												ignoreCase: false,
																												want:       "\"{counter2:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 511, col: 38, offset: 16576},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 162, col: 18, offset: 4814},
																													run: (*parser).callonAttributeRawValue51,
																													expr: &seqExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 162, col: 18, offset: 4814},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 162, col: 28, offset: 4824},
																																expr: &charClassMatcher{
																																	pos:        position{line: 162, col: 29, offset: 4825},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 511, col: 57, offset: 16595},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 511, col: 63, offset: 16601},
																													expr: &actionExpr{
																														pos: position{line: 515, col: 17, offset: 16708},
																														run: (*parser).callonAttributeRawValue58,
																														expr: &seqExpr{
																															pos: position{line: 515, col: 17, offset: 16708},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 515, col: 17, offset: 16708},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 515, col: 21, offset: 16712},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 515, col: 28, offset: 16719},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 515, col: 28, offset: 16719},
																																				run: (*parser).callonAttributeRawValue63,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 515, col: 28, offset: 16719},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 517, col: 9, offset: 16773},
																																				run: (*parser).callonAttributeRawValue65,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 517, col: 9, offset: 16773},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 517, col: 9, offset: 16773},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 511, col: 79, offset: 16617},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 500, col: 31, offset: 16063},
																									run: (*parser).callonAttributeRawValue69,
																									expr: &seqExpr{
																										pos: position{line: 500, col: 31, offset: 16063},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 500, col: 31, offset: 16063},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 500, col: 35, offset: 16067},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 162, col: 18, offset: 4814},
																													run: (*parser).callonAttributeRawValue73,
																													expr: &seqExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 162, col: 18, offset: 4814},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 162, col: 28, offset: 4824},
																																expr: &charClassMatcher{
																																	pos:        position{line: 162, col: 29, offset: 4825},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 500, col: 54, offset: 16086},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 404, col: 12, offset: 12616},
																			run: (*parser).callonAttributeRawValue79,
																			expr: &litMatcher{
																				pos:        position{line: 404, col: 12, offset: 12616},
																				val:        "\\'",
																				ignoreCase: false,
																				want:       "\"\\\\'\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 407, col: 13, offset: 12718},
																			val:        "'`",
																			ignoreCase: false,
																			want:       "\"'`\"",
																		},
																		&litMatcher{
																			pos:        position{line: 407, col: 20, offset: 12725},
																			val:        "`'",
																			ignoreCase: false,
																			want:       "\"`'\"",
																		},
																		&actionExpr{
																			pos: position{line: 407, col: 27, offset: 12732},
																			run: (*parser).callonAttributeRawValue83,
																			expr: &litMatcher{
																				pos:        position{line: 407, col: 27, offset: 12732},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 410, col: 12, offset: 12892},
																			run: (*parser).callonAttributeRawValue85,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 410, col: 12, offset: 12892},
																				expr: &charClassMatcher{
																					pos:        position{line: 410, col: 12, offset: 12892},
																					val:        "[^\\r\\n\\\\\\ ]",
																					chars:      []rune{'\r', '\n', '\\', '\'', ' '},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 390, col: 5, offset: 12316},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 418, col: 5, offset: 13127},
										run: (*parser).callonAttributeRawValue89,
										expr: &seqExpr{
											pos: position{line: 418, col: 5, offset: 13127},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 418, col: 5, offset: 13127},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&notExpr{
													pos: position{line: 418, col: 10, offset: 13132},
													expr: &litMatcher{
														pos:        position{line: 418, col: 11, offset: 13133},
														val:        "`",
														ignoreCase: false,
														want:       "\"`\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 419, col: 5, offset: 13212},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 429, col: 5, offset: 13492},
														run: (*parser).callonAttributeRawValue95,
														expr: &labeledExpr{
															pos:   position{line: 429, col: 5, offset: 13492},
															label: "elements",
															expr: &oneOrMoreExpr{
																pos: position{line: 429, col: 14, offset: 13501},
																expr: &choiceExpr{
																	pos: position{line: 430, col: 9, offset: 13511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2864, col: 14, offset: 94885},
																			run: (*parser).callonAttributeRawValue99,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2864, col: 14, offset: 94885},
																				expr: &charClassMatcher{
																					pos:        position{line: 2864, col: 14, offset: 94885},
																					val:        "[0-9\\pL]",
																					ranges:     []rune{'0', '9'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2948, col: 10, offset: 97526},
																			run: (*parser).callonAttributeRawValue102,
																			expr: &charClassMatcher{
																				pos:        position{line: 2948, col: 11, offset: 97527},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&actionExpr{
																			pos: position{line: 493, col: 5, offset: 15873},
																			run: (*parser).callonAttributeRawValue104,
																			expr: &seqExpr{
																				pos: position{line: 493, col: 5, offset: 15873},
																				exprs: []interface{}{
																					&andCodeExpr{
																						pos: position{line: 493, col: 5, offset: 15873},
																						run: (*parser).callonAttributeRawValue106,
																					},
																					&labeledExpr{
																						pos:   position{line: 496, col: 5, offset: 15937},
																						label: "element",
																						expr: &choiceExpr{
																							pos: position{line: 496, col: 14, offset: 15946},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 507, col: 25, offset: 16408},
																									run: (*parser).callonAttributeRawValue109,
																									expr: &seqExpr{
																										pos: position{line: 507, col: 25, offset: 16408},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 507, col: 25, offset: 16408},
																												val:        "{counter:",
																												ignoreCase: false,
																												want:       "\"{counter:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 507, col: 37, offset: 16420},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 162, col: 18, offset: 4814},
																													run: (*parser).callonAttributeRawValue113,
																													expr: &seqExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 162, col: 18, offset: 4814},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 162, col: 28, offset: 4824},
																																expr: &charClassMatcher{
																																	pos:        position{line: 162, col: 29, offset: 4825},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 507, col: 56, offset: 16439},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 507, col: 62, offset: 16445},
																													expr: &actionExpr{
																														pos: position{line: 515, col: 17, offset: 16708},
																														run: (*parser).callonAttributeRawValue120,
																														expr: &seqExpr{
																															pos: position{line: 515, col: 17, offset: 16708},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 515, col: 17, offset: 16708},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 515, col: 21, offset: 16712},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 515, col: 28, offset: 16719},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 515, col: 28, offset: 16719},
																																				run: (*parser).callonAttributeRawValue125,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 515, col: 28, offset: 16719},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 517, col: 9, offset: 16773},
																																				run: (*parser).callonAttributeRawValue127,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 517, col: 9, offset: 16773},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 517, col: 9, offset: 16773},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 507, col: 78, offset: 16461},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 511, col: 25, offset: 16563},
																									run: (*parser).callonAttributeRawValue131,
																									expr: &seqExpr{
																										pos: position{line: 511, col: 25, offset: 16563},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 511, col: 25, offset: 16563},
																												val:        "{counter2:",
																												ignoreCase: false,
																												want:       "\"{counter2:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 511, col: 38, offset: 16576},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 162, col: 18, offset: 4814},
																													run: (*parser).callonAttributeRawValue135,
																													expr: &seqExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 162, col: 18, offset: 4814},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 162, col: 28, offset: 4824},
																																expr: &charClassMatcher{
																																	pos:        position{line: 162, col: 29, offset: 4825},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 511, col: 57, offset: 16595},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 511, col: 63, offset: 16601},
																													expr: &actionExpr{
																														pos: position{line: 515, col: 17, offset: 16708},
																														run: (*parser).callonAttributeRawValue142,
																														expr: &seqExpr{
																															pos: position{line: 515, col: 17, offset: 16708},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 515, col: 17, offset: 16708},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 515, col: 21, offset: 16712},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 515, col: 28, offset: 16719},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 515, col: 28, offset: 16719},
																																				run: (*parser).callonAttributeRawValue147,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 515, col: 28, offset: 16719},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 517, col: 9, offset: 16773},
																																				run: (*parser).callonAttributeRawValue149,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 517, col: 9, offset: 16773},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 517, col: 9, offset: 16773},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 511, col: 79, offset: 16617},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 500, col: 31, offset: 16063},
																									run: (*parser).callonAttributeRawValue153,
																									expr: &seqExpr{
																										pos: position{line: 500, col: 31, offset: 16063},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 500, col: 31, offset: 16063},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 500, col: 35, offset: 16067},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 162, col: 18, offset: 4814},
																													run: (*parser).callonAttributeRawValue157,
																													expr: &seqExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 162, col: 18, offset: 4814},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 162, col: 28, offset: 4824},
																																expr: &charClassMatcher{
																																	pos:        position{line: 162, col: 29, offset: 4825},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 500, col: 54, offset: 16086},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 433, col: 12, offset: 13580},
																			run: (*parser).callonAttributeRawValue163,
																			expr: &litMatcher{
																				pos:        position{line: 433, col: 12, offset: 13580},
																				val:        "\\\"",
																				ignoreCase: false,
																				want:       "\"\\\\\\\"\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 436, col: 13, offset: 13682},
																			val:        "\"`",
																			ignoreCase: false,
																			want:       "\"\\\"`\"",
																		},
																		&litMatcher{
																			pos:        position{line: 436, col: 21, offset: 13690},
																			val:        "`\"",
																			ignoreCase: false,
																			want:       "\"`\\\"\"",
																		},
																		&litMatcher{
																			pos:        position{line: 436, col: 29, offset: 13698},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&actionExpr{
																			pos: position{line: 436, col: 35, offset: 13704},
																			run: (*parser).callonAttributeRawValue168,
																			expr: &litMatcher{
																				pos:        position{line: 436, col: 35, offset: 13704},
																				val:        "`",
																				ignoreCase: false,
																				want:       "\"`\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 439, col: 12, offset: 13887},
																			run: (*parser).callonAttributeRawValue170,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 439, col: 12, offset: 13887},
																				expr: &charClassMatcher{
																					pos:        position{line: 439, col: 12, offset: 13887},
																					val:        "[^\\r\\n\\\\\"` ]",
																					chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 420, col: 5, offset: 13263},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&andExpr{
													pos: position{line: 420, col: 10, offset: 13268},
													expr: &notExpr{
														pos: position{line: 420, col: 12, offset: 13270},
														expr: &seqExpr{
															pos: position{line: 420, col: 14, offset: 13272},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 420, col: 14, offset: 13272},
																	expr: &actionExpr{
																		pos: position{line: 2948, col: 10, offset: 97526},
																		run: (*parser).callonAttributeRawValue178,
																		expr: &charClassMatcher{
																			pos:        position{line: 2948, col: 11, offset: 97527},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 420, col: 21, offset: 13279},
																	val:        "=",
																	ignoreCase: false,
																	want:       "\"=\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 381, col: 11, offset: 12054},
										name: "UnquotedAttributeRawValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 383, col: 5, offset: 12091},
							expr: &notExpr{
								pos: position{line: 383, col: 7, offset: 12093},
								expr: &seqExpr{
									pos: position{line: 383, col: 9, offset: 12095},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 383, col: 9, offset: 12095},
											expr: &actionExpr{
												pos: position{line: 2948, col: 10, offset: 97526},
												run: (*parser).callonAttributeRawValue186,
												expr: &charClassMatcher{
													pos:        position{line: 2948, col: 11, offset: 97527},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&litMatcher{
											pos:        position{line: 383, col: 16, offset: 12102},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeRawValue",
			pos:  position{line: 447, col: 1, offset: 14161},
			expr: &actionExpr{
				pos: position{line: 450, col: 5, offset: 14348},
				run: (*parser).callonUnquotedAttributeRawValue1,
				expr: &seqExpr{
					pos: position{line: 450, col: 5, offset: 14348},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 450, col: 5, offset: 14348},
							expr: &actionExpr{
								pos: position{line: 2948, col: 10, offset: 97526},
								run: (*parser).callonUnquotedAttributeRawValue4,
								expr: &charClassMatcher{
									pos:        position{line: 2948, col: 11, offset: 97527},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 5, offset: 14417},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 451, col: 14, offset: 14426},
								expr: &choiceExpr{
									pos: position{line: 452, col: 9, offset: 14436},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 452, col: 10, offset: 14437},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 452, col: 10, offset: 14437},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&ruleRefExpr{
													pos:  position{line: 452, col: 14, offset: 14441},
													name: "UnquotedAttributeRawValue",
												},
												&litMatcher{
													pos:        position{line: 452, col: 40, offset: 14467},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
										},
										&actionExpr{
											pos: position{line: 991, col: 23, offset: 31326},
											run: (*parser).callonUnquotedAttributeRawValue13,
											expr: &seqExpr{
												pos: position{line: 991, col: 23, offset: 31326},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 989, col: 32, offset: 31294},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 991, col: 51, offset: 31354},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 991, col: 56, offset: 31359},
															run: (*parser).callonUnquotedAttributeRawValue17,
															expr: &oneOrMoreExpr{
																pos: position{line: 991, col: 56, offset: 31359},
																expr: &charClassMatcher{
																	pos:        position{line: 991, col: 56, offset: 31359},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 989, col: 32, offset: 31294},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 493, col: 5, offset: 15873},
											run: (*parser).callonUnquotedAttributeRawValue21,
											expr: &seqExpr{
												pos: position{line: 493, col: 5, offset: 15873},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 493, col: 5, offset: 15873},
														run: (*parser).callonUnquotedAttributeRawValue23,
													},
													&labeledExpr{
														pos:   position{line: 496, col: 5, offset: 15937},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 496, col: 14, offset: 15946},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 507, col: 25, offset: 16408},
																	run: (*parser).callonUnquotedAttributeRawValue26,
																	expr: &seqExpr{
																		pos: position{line: 507, col: 25, offset: 16408},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 507, col: 25, offset: 16408},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 507, col: 37, offset: 16420},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					run: (*parser).callonUnquotedAttributeRawValue30,
																					expr: &seqExpr{
																						pos: position{line: 162, col: 18, offset: 4814},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 162, col: 18, offset: 4814},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 162, col: 28, offset: 4824},
																								expr: &charClassMatcher{
																									pos:        position{line: 162, col: 29, offset: 4825},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 507, col: 56, offset: 16439},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 507, col: 62, offset: 16445},
																					expr: &actionExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						run: (*parser).callonUnquotedAttributeRawValue37,
																						expr: &seqExpr{
																							pos: position{line: 515, col: 17, offset: 16708},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 515, col: 17, offset: 16708},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 515, col: 21, offset: 16712},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 515, col: 28, offset: 16719},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 515, col: 28, offset: 16719},
																												run: (*parser).callonUnquotedAttributeRawValue42,
																												expr: &charClassMatcher{
																													pos:        position{line: 515, col: 28, offset: 16719},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												run: (*parser).callonUnquotedAttributeRawValue44,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 517, col: 9, offset: 16773},
																													expr: &charClassMatcher{
																														pos:        position{line: 517, col: 9, offset: 16773},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 507, col: 78, offset: 16461},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 511, col: 25, offset: 16563},
																	run: (*parser).callonUnquotedAttributeRawValue48,
																	expr: &seqExpr{
																		pos: position{line: 511, col: 25, offset: 16563},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 511, col: 25, offset: 16563},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 511, col: 38, offset: 16576},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					run: (*parser).callonUnquotedAttributeRawValue52,
																					expr: &seqExpr{
																						pos: position{line: 162, col: 18, offset: 4814},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 162, col: 18, offset: 4814},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 162, col: 28, offset: 4824},
																								expr: &charClassMatcher{
																									pos:        position{line: 162, col: 29, offset: 4825},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 511, col: 57, offset: 16595},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 511, col: 63, offset: 16601},
																					expr: &actionExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						run: (*parser).callonUnquotedAttributeRawValue59,
																						expr: &seqExpr{
																							pos: position{line: 515, col: 17, offset: 16708},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 515, col: 17, offset: 16708},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 515, col: 21, offset: 16712},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 515, col: 28, offset: 16719},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 515, col: 28, offset: 16719},
																												run: (*parser).callonUnquotedAttributeRawValue64,
																												expr: &charClassMatcher{
																													pos:        position{line: 515, col: 28, offset: 16719},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												run: (*parser).callonUnquotedAttributeRawValue66,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 517, col: 9, offset: 16773},
																													expr: &charClassMatcher{
																														pos:        position{line: 517, col: 9, offset: 16773},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 511, col: 79, offset: 16617},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 500, col: 31, offset: 16063},
																	run: (*parser).callonUnquotedAttributeRawValue70,
																	expr: &seqExpr{
																		pos: position{line: 500, col: 31, offset: 16063},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 500, col: 31, offset: 16063},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 500, col: 35, offset: 16067},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					run: (*parser).callonUnquotedAttributeRawValue74,
																					expr: &seqExpr{
																						pos: position{line: 162, col: 18, offset: 4814},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 162, col: 18, offset: 4814},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 162, col: 28, offset: 4824},
																								expr: &charClassMatcher{
																									pos:        position{line: 162, col: 29, offset: 4825},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 500, col: 54, offset: 16086},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 455, col: 12, offset: 14595},
											run: (*parser).callonUnquotedAttributeRawValue80,
											expr: &oneOrMoreExpr{
												pos: position{line: 455, col: 12, offset: 14595},
												expr: &charClassMatcher{
													pos:        position{line: 455, col: 12, offset: 14595},
													val:        "[^=,�] ]",
													chars:      []rune{'=', ',', '�', ']', ' '},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&actionExpr{
											pos: position{line: 2948, col: 10, offset: 97526},
											run: (*parser).callonUnquotedAttributeRawValue83,
											expr: &charClassMatcher{
												pos:        position{line: 2948, col: 11, offset: 97527},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 533, col: 1, offset: 17333},
			expr: &choiceExpr{
				pos: position{line: 533, col: 19, offset: 17351},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 535, col: 27, offset: 17427},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 535, col: 27, offset: 17427},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 535, col: 27, offset: 17427},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 535, col: 32, offset: 17432},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 2936, col: 7, offset: 97248},
										run: (*parser).callonCrossReference6,
										expr: &oneOrMoreExpr{
											pos: position{line: 2936, col: 7, offset: 97248},
											expr: &charClassMatcher{
												pos:        position{line: 2936, col: 7, offset: 97248},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 535, col: 40, offset: 17440},
									expr: &actionExpr{
										pos: position{line: 2948, col: 10, offset: 97526},
										run: (*parser).callonCrossReference10,
										expr: &charClassMatcher{
											pos:        position{line: 2948, col: 11, offset: 97527},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&litMatcher{
									pos:        position{line: 535, col: 47, offset: 17447},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 535, col: 51, offset: 17451},
									label: "label",
									expr: &oneOrMoreExpr{
										pos: position{line: 545, col: 24, offset: 17864},
										expr: &choiceExpr{
											pos: position{line: 546, col: 5, offset: 17870},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 546, col: 6, offset: 17871},
													run: (*parser).callonCrossReference16,
													expr: &seqExpr{
														pos: position{line: 546, col: 6, offset: 17871},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 546, col: 6, offset: 17871},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 546, col: 14, offset: 17879},
																expr: &charClassMatcher{
																	pos:        position{line: 546, col: 14, offset: 17879},
																	val:        "[^\\r\\n{<>]",
																	chars:      []rune{'\r', '\n', '{', '<', '>'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 493, col: 5, offset: 15873},
													run: (*parser).callonCrossReference21,
													expr: &seqExpr{
														pos: position{line: 493, col: 5, offset: 15873},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 493, col: 5, offset: 15873},
																run: (*parser).callonCrossReference23,
															},
															&labeledExpr{
																pos:   position{line: 496, col: 5, offset: 15937},
																label: "element",
																expr: &choiceExpr{
																	pos: position{line: 496, col: 14, offset: 15946},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 507, col: 25, offset: 16408},
																			run: (*parser).callonCrossReference26,
																			expr: &seqExpr{
																				pos: position{line: 507, col: 25, offset: 16408},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 507, col: 25, offset: 16408},
																						val:        "{counter:",
																						ignoreCase: false,
																						want:       "\"{counter:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 507, col: 37, offset: 16420},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 162, col: 18, offset: 4814},
																							run: (*parser).callonCrossReference30,
																							expr: &seqExpr{
																								pos: position{line: 162, col: 18, offset: 4814},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 162, col: 18, offset: 4814},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 162, col: 28, offset: 4824},
																										expr: &charClassMatcher{
																											pos:        position{line: 162, col: 29, offset: 4825},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 507, col: 56, offset: 16439},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 507, col: 62, offset: 16445},
																							expr: &actionExpr{
																								pos: position{line: 515, col: 17, offset: 16708},
																								run: (*parser).callonCrossReference37,
																								expr: &seqExpr{
																									pos: position{line: 515, col: 17, offset: 16708},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 515, col: 17, offset: 16708},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 515, col: 21, offset: 16712},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 515, col: 28, offset: 16719},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 515, col: 28, offset: 16719},
																														run: (*parser).callonCrossReference42,
																														expr: &charClassMatcher{
																															pos:        position{line: 515, col: 28, offset: 16719},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 517, col: 9, offset: 16773},
																														run: (*parser).callonCrossReference44,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 517, col: 9, offset: 16773},
																															expr: &charClassMatcher{
																																pos:        position{line: 517, col: 9, offset: 16773},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 507, col: 78, offset: 16461},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 511, col: 25, offset: 16563},
																			run: (*parser).callonCrossReference48,
																			expr: &seqExpr{
																				pos: position{line: 511, col: 25, offset: 16563},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 511, col: 25, offset: 16563},
																						val:        "{counter2:",
																						ignoreCase: false,
																						want:       "\"{counter2:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 511, col: 38, offset: 16576},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 162, col: 18, offset: 4814},
																							run: (*parser).callonCrossReference52,
																							expr: &seqExpr{
																								pos: position{line: 162, col: 18, offset: 4814},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 162, col: 18, offset: 4814},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 162, col: 28, offset: 4824},
																										expr: &charClassMatcher{
																											pos:        position{line: 162, col: 29, offset: 4825},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 511, col: 57, offset: 16595},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 511, col: 63, offset: 16601},
																							expr: &actionExpr{
																								pos: position{line: 515, col: 17, offset: 16708},
																								run: (*parser).callonCrossReference59,
																								expr: &seqExpr{
																									pos: position{line: 515, col: 17, offset: 16708},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 515, col: 17, offset: 16708},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 515, col: 21, offset: 16712},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 515, col: 28, offset: 16719},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 515, col: 28, offset: 16719},
																														run: (*parser).callonCrossReference64,
																														expr: &charClassMatcher{
																															pos:        position{line: 515, col: 28, offset: 16719},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 517, col: 9, offset: 16773},
																														run: (*parser).callonCrossReference66,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 517, col: 9, offset: 16773},
																															expr: &charClassMatcher{
																																pos:        position{line: 517, col: 9, offset: 16773},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 511, col: 79, offset: 16617},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 500, col: 31, offset: 16063},
																			run: (*parser).callonCrossReference70,
																			expr: &seqExpr{
																				pos: position{line: 500, col: 31, offset: 16063},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 500, col: 31, offset: 16063},
																						val:        "{",
																						ignoreCase: false,
																						want:       "\"{\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 500, col: 35, offset: 16067},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 162, col: 18, offset: 4814},
																							run: (*parser).callonCrossReference74,
																							expr: &seqExpr{
																								pos: position{line: 162, col: 18, offset: 4814},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 162, col: 18, offset: 4814},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 162, col: 28, offset: 4824},
																										expr: &charClassMatcher{
																											pos:        position{line: 162, col: 29, offset: 4825},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 500, col: 54, offset: 16086},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 550, col: 8, offset: 18103},
													run: (*parser).callonCrossReference80,
													expr: &litMatcher{
														pos:        position{line: 550, col: 8, offset: 18103},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 535, col: 79, offset: 17479},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 537, col: 9, offset: 17552},
						run: (*parser).callonCrossReference83,
						expr: &seqExpr{
							pos: position{line: 537, col: 9, offset: 17552},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 537, col: 9, offset: 17552},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 537, col: 14, offset: 17557},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 2936, col: 7, offset: 97248},
										run: (*parser).callonCrossReference87,
										expr: &oneOrMoreExpr{
											pos: position{line: 2936, col: 7, offset: 97248},
											expr: &charClassMatcher{
												pos:        position{line: 2936, col: 7, offset: 97248},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 537, col: 22, offset: 17565},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 533, col: 44, offset: 17376},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 541, col: 1, offset: 17636},
			expr: &actionExpr{
				pos: position{line: 541, col: 27, offset: 17662},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 541, col: 27, offset: 17662},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 541, col: 27, offset: 17662},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 541, col: 35, offset: 17670},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2909, col: 17, offset: 96382},
								run: (*parser).callonExternalCrossReference5,
								expr: &labeledExpr{
									pos:   position{line: 2909, col: 17, offset: 96382},
									label: "path",
									expr: &oneOrMoreExpr{
										pos: position{line: 2909, col: 22, offset: 96387},
										expr: &choiceExpr{
											pos: position{line: 2909, col: 23, offset: 96388},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2921, col: 13, offset: 96792},
													run: (*parser).callonExternalCrossReference9,
													expr: &labeledExpr{
														pos:   position{line: 2921, col: 13, offset: 96792},
														label: "elements",
														expr: &oneOrMoreExpr{
															pos: position{line: 2921, col: 22, offset: 96801},
															expr: &choiceExpr{
																pos: position{line: 2922, col: 5, offset: 96807},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2922, col: 5, offset: 96807},
																		run: (*parser).callonExternalCrossReference13,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2922, col: 5, offset: 96807},
																			expr: &charClassMatcher{
																				pos:        position{line: 2922, col: 6, offset: 96808},
																				val:        "[^\\r\\n[]�&<>{ ]",
																				chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 493, col: 5, offset: 15873},
																		run: (*parser).callonExternalCrossReference16,
																		expr: &seqExpr{
																			pos: position{line: 493, col: 5, offset: 15873},
																			exprs: []interface{}{
																				&andCodeExpr{
																					pos: position{line: 493, col: 5, offset: 15873},
																					run: (*parser).callonExternalCrossReference18,
																				},
																				&labeledExpr{
																					pos:   position{line: 496, col: 5, offset: 15937},
																					label: "element",
																					expr: &choiceExpr{
																						pos: position{line: 496, col: 14, offset: 15946},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 507, col: 25, offset: 16408},
																								run: (*parser).callonExternalCrossReference21,
																								expr: &seqExpr{
																									pos: position{line: 507, col: 25, offset: 16408},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 507, col: 25, offset: 16408},
																											val:        "{counter:",
																											ignoreCase: false,
																											want:       "\"{counter:\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 507, col: 37, offset: 16420},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 162, col: 18, offset: 4814},
																												run: (*parser).callonExternalCrossReference25,
																												expr: &seqExpr{
																													pos: position{line: 162, col: 18, offset: 4814},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 162, col: 18, offset: 4814},
																															val:        "[_0-9\\pL]",
																															chars:      []rune{'_'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 162, col: 28, offset: 4824},
																															expr: &charClassMatcher{
																																pos:        position{line: 162, col: 29, offset: 4825},
																																val:        "[-0-9\\pL]",
																																chars:      []rune{'-'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 507, col: 56, offset: 16439},
																											label: "start",
																											expr: &zeroOrOneExpr{
																												pos: position{line: 507, col: 62, offset: 16445},
																												expr: &actionExpr{
																													pos: position{line: 515, col: 17, offset: 16708},
																													run: (*parser).callonExternalCrossReference32,
																													expr: &seqExpr{
																														pos: position{line: 515, col: 17, offset: 16708},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 515, col: 17, offset: 16708},
																																val:        ":",
																																ignoreCase: false,
																																want:       "\":\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 515, col: 21, offset: 16712},
																																label: "start",
																																expr: &choiceExpr{
																																	pos: position{line: 515, col: 28, offset: 16719},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 515, col: 28, offset: 16719},
																																			run: (*parser).callonExternalCrossReference37,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 515, col: 28, offset: 16719},
																																				val:        "[A-Za-z]",
																																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 517, col: 9, offset: 16773},
																																			run: (*parser).callonExternalCrossReference39,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 517, col: 9, offset: 16773},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 517, col: 9, offset: 16773},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 507, col: 78, offset: 16461},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 511, col: 25, offset: 16563},
																								run: (*parser).callonExternalCrossReference43,
																								expr: &seqExpr{
																									pos: position{line: 511, col: 25, offset: 16563},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 511, col: 25, offset: 16563},
																											val:        "{counter2:",
																											ignoreCase: false,
																											want:       "\"{counter2:\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 511, col: 38, offset: 16576},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 162, col: 18, offset: 4814},
																												run: (*parser).callonExternalCrossReference47,
																												expr: &seqExpr{
																													pos: position{line: 162, col: 18, offset: 4814},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 162, col: 18, offset: 4814},
																															val:        "[_0-9\\pL]",
																															chars:      []rune{'_'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 162, col: 28, offset: 4824},
																															expr: &charClassMatcher{
																																pos:        position{line: 162, col: 29, offset: 4825},
																																val:        "[-0-9\\pL]",
																																chars:      []rune{'-'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 511, col: 57, offset: 16595},
																											label: "start",
																											expr: &zeroOrOneExpr{
																												pos: position{line: 511, col: 63, offset: 16601},
																												expr: &actionExpr{
																													pos: position{line: 515, col: 17, offset: 16708},
																													run: (*parser).callonExternalCrossReference54,
																													expr: &seqExpr{
																														pos: position{line: 515, col: 17, offset: 16708},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 515, col: 17, offset: 16708},
																																val:        ":",
																																ignoreCase: false,
																																want:       "\":\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 515, col: 21, offset: 16712},
																																label: "start",
																																expr: &choiceExpr{
																																	pos: position{line: 515, col: 28, offset: 16719},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 515, col: 28, offset: 16719},
																																			run: (*parser).callonExternalCrossReference59,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 515, col: 28, offset: 16719},
																																				val:        "[A-Za-z]",
																																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 517, col: 9, offset: 16773},
																																			run: (*parser).callonExternalCrossReference61,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 517, col: 9, offset: 16773},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 517, col: 9, offset: 16773},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 511, col: 79, offset: 16617},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 500, col: 31, offset: 16063},
																								run: (*parser).callonExternalCrossReference65,
																								expr: &seqExpr{
																									pos: position{line: 500, col: 31, offset: 16063},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 500, col: 31, offset: 16063},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 500, col: 35, offset: 16067},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 162, col: 18, offset: 4814},
																												run: (*parser).callonExternalCrossReference69,
																												expr: &seqExpr{
																													pos: position{line: 162, col: 18, offset: 4814},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 162, col: 18, offset: 4814},
																															val:        "[_0-9\\pL]",
																															chars:      []rune{'_'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 162, col: 28, offset: 4824},
																															expr: &charClassMatcher{
																																pos:        position{line: 162, col: 29, offset: 4825},
																																val:        "[-0-9\\pL]",
																																chars:      []rune{'-'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 500, col: 54, offset: 16086},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2650, col: 5, offset: 88280},
																		run: (*parser).callonExternalCrossReference75,
																		expr: &seqExpr{
																			pos: position{line: 2650, col: 5, offset: 88280},
																			exprs: []interface{}{
																				&andCodeExpr{
																					pos: position{line: 2650, col: 5, offset: 88280},
																					run: (*parser).callonExternalCrossReference77,
																				},
																				&labeledExpr{
																					pos:   position{line: 2653, col: 5, offset: 88351},
																					label: "element",
																					expr: &choiceExpr{
																						pos: position{line: 2655, col: 9, offset: 88449},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2655, col: 9, offset: 88449},
																								run: (*parser).callonExternalCrossReference80,
																								expr: &choiceExpr{
																									pos: position{line: 535, col: 27, offset: 17427},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 535, col: 27, offset: 17427},
																											run: (*parser).callonExternalCrossReference82,
																											expr: &seqExpr{
																												pos: position{line: 535, col: 27, offset: 17427},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 535, col: 27, offset: 17427},
																														val:        "<<",
																														ignoreCase: false,
																														want:       "\"<<\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 535, col: 32, offset: 17432},
																														label: "id",
																														expr: &actionExpr{
																															pos: position{line: 2936, col: 7, offset: 97248},
																															run: (*parser).callonExternalCrossReference86,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 2936, col: 7, offset: 97248},
																																expr: &charClassMatcher{
																																	pos:        position{line: 2936, col: 7, offset: 97248},
																																	val:        "[^[]<>,]",
																																	chars:      []rune{'[', ']', '<', '>', ','},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 535, col: 40, offset: 17440},
																														expr: &actionExpr{
																															pos: position{line: 2948, col: 10, offset: 97526},
																															run: (*parser).callonExternalCrossReference90,
																															expr: &charClassMatcher{
																																pos:        position{line: 2948, col: 11, offset: 97527},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 535, col: 47, offset: 17447},
																														val:        ",",
																														ignoreCase: false,
																														want:       "\",\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 535, col: 51, offset: 17451},
																														label: "label",
																														expr: &oneOrMoreExpr{
																															pos: position{line: 545, col: 24, offset: 17864},
																															expr: &choiceExpr{
																																pos: position{line: 546, col: 5, offset: 17870},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 546, col: 6, offset: 17871},
																																		run: (*parser).callonExternalCrossReference96,
																																		expr: &seqExpr{
																																			pos: position{line: 546, col: 6, offset: 17871},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 546, col: 6, offset: 17871},
																																					val:        "[0-9\\pL]",
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&oneOrMoreExpr{
																																					pos: position{line: 546, col: 14, offset: 17879},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 546, col: 14, offset: 17879},
																																						val:        "[^\\r\\n{<>]",
																																						chars:      []rune{'\r', '\n', '{', '<', '>'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 493, col: 5, offset: 15873},
																																		run: (*parser).callonExternalCrossReference101,
																																		expr: &seqExpr{
																																			pos: position{line: 493, col: 5, offset: 15873},
																																			exprs: []interface{}{
																																				&andCodeExpr{
																																					pos: position{line: 493, col: 5, offset: 15873},
																																					run: (*parser).callonExternalCrossReference103,
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 496, col: 5, offset: 15937},
																																					label: "element",
																																					expr: &choiceExpr{
																																						pos: position{line: 496, col: 14, offset: 15946},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 507, col: 25, offset: 16408},
																																								run: (*parser).callonExternalCrossReference106,
																																								expr: &seqExpr{
																																									pos: position{line: 507, col: 25, offset: 16408},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 507, col: 25, offset: 16408},
																																											val:        "{counter:",
																																											ignoreCase: false,
																																											want:       "\"{counter:\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 507, col: 37, offset: 16420},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 162, col: 18, offset: 4814},
																																												run: (*parser).callonExternalCrossReference110,
																																												expr: &seqExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 162, col: 18, offset: 4814},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 162, col: 28, offset: 4824},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 162, col: 29, offset: 4825},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 507, col: 56, offset: 16439},
																																											label: "start",
																																											expr: &zeroOrOneExpr{
																																												pos: position{line: 507, col: 62, offset: 16445},
																																												expr: &actionExpr{
																																													pos: position{line: 515, col: 17, offset: 16708},
																																													run: (*parser).callonExternalCrossReference117,
																																													expr: &seqExpr{
																																														pos: position{line: 515, col: 17, offset: 16708},
																																														exprs: []interface{}{
																																															&litMatcher{
																																																pos:        position{line: 515, col: 17, offset: 16708},
																																																val:        ":",
																																																ignoreCase: false,
																																																want:       "\":\"",
																																															},
																																															&labeledExpr{
																																																pos:   position{line: 515, col: 21, offset: 16712},
																																																label: "start",
																																																expr: &choiceExpr{
																																																	pos: position{line: 515, col: 28, offset: 16719},
																																																	alternatives: []interface{}{
																																																		&actionExpr{
																																																			pos: position{line: 515, col: 28, offset: 16719},
																																																			run: (*parser).callonExternalCrossReference122,
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 515, col: 28, offset: 16719},
																																																				val:        "[A-Za-z]",
																																																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																		&actionExpr{
																																																			pos: position{line: 517, col: 9, offset: 16773},
																																																			run: (*parser).callonExternalCrossReference124,
																																																			expr: &oneOrMoreExpr{
																																																				pos: position{line: 517, col: 9, offset: 16773},
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 517, col: 9, offset: 16773},
																																																					val:        "[0-9]",
																																																					ranges:     []rune{'0', '9'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 507, col: 78, offset: 16461},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 511, col: 25, offset: 16563},
																																								run: (*parser).callonExternalCrossReference128,
																																								expr: &seqExpr{
																																									pos: position{line: 511, col: 25, offset: 16563},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 511, col: 25, offset: 16563},
																																											val:        "{counter2:",
																																											ignoreCase: false,
																																											want:       "\"{counter2:\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 511, col: 38, offset: 16576},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 162, col: 18, offset: 4814},
																																												run: (*parser).callonExternalCrossReference132,
																																												expr: &seqExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 162, col: 18, offset: 4814},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 162, col: 28, offset: 4824},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 162, col: 29, offset: 4825},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 511, col: 57, offset: 16595},
																																											label: "start",
																																											expr: &zeroOrOneExpr{
																																												pos: position{line: 511, col: 63, offset: 16601},
																																												expr: &actionExpr{
																																													pos: position{line: 515, col: 17, offset: 16708},
																																													run: (*parser).callonExternalCrossReference139,
																																													expr: &seqExpr{
																																														pos: position{line: 515, col: 17, offset: 16708},
																																														exprs: []interface{}{
																																															&litMatcher{
																																																pos:        position{line: 515, col: 17, offset: 16708},
																																																val:        ":",
																																																ignoreCase: false,
																																																want:       "\":\"",
																																															},
																																															&labeledExpr{
																																																pos:   position{line: 515, col: 21, offset: 16712},
																																																label: "start",
																																																expr: &choiceExpr{
																																																	pos: position{line: 515, col: 28, offset: 16719},
																																																	alternatives: []interface{}{
																																																		&actionExpr{
																																																			pos: position{line: 515, col: 28, offset: 16719},
																																																			run: (*parser).callonExternalCrossReference144,
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 515, col: 28, offset: 16719},
																																																				val:        "[A-Za-z]",
																																																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																		&actionExpr{
																																																			pos: position{line: 517, col: 9, offset: 16773},
																																																			run: (*parser).callonExternalCrossReference146,
																																																			expr: &oneOrMoreExpr{
																																																				pos: position{line: 517, col: 9, offset: 16773},
																																																				expr: &charClassMatcher{
																																																					pos:        position{line: 517, col: 9, offset: 16773},
																																																					val:        "[0-9]",
																																																					ranges:     []rune{'0', '9'},
																																																					ignoreCase: false,
																																																					inverted:   false,
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 511, col: 79, offset: 16617},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 500, col: 31, offset: 16063},
																																								run: (*parser).callonExternalCrossReference150,
																																								expr: &seqExpr{
																																									pos: position{line: 500, col: 31, offset: 16063},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 500, col: 31, offset: 16063},
																																											val:        "{",
																																											ignoreCase: false,
																																											want:       "\"{\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 500, col: 35, offset: 16067},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 162, col: 18, offset: 4814},
																																												run: (*parser).callonExternalCrossReference154,
																																												expr: &seqExpr{
																																													pos: position{line: 162, col: 18, offset: 4814},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 162, col: 18, offset: 4814},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 162, col: 28, offset: 4824},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 162, col: 29, offset: 4825},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 500, col: 54, offset: 16086},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 550, col: 8, offset: 18103},
																																		run: (*parser).callonExternalCrossReference160,
																																		expr: &litMatcher{
																																			pos:        position{line: 550, col: 8, offset: 18103},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 535, col: 79, offset: 17479},
																														val:        ">>",
																														ignoreCase: false,
																														want:       "\">>\"",
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 537, col: 9, offset: 17552},
																											run: (*parser).callonExternalCrossReference163,
																											expr: &seqExpr{
																												pos: position{line: 537, col: 9, offset: 17552},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 537, col: 9, offset: 17552},
																														val:        "<<",
																														ignoreCase: false,
																														want:       "\"<<\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 537, col: 14, offset: 17557},
																														label: "id",
																														expr: &actionExpr{
																															pos: position{line: 2936, col: 7, offset: 97248},
																															run: (*parser).callonExternalCrossReference167,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 2936, col: 7, offset: 97248},
																																expr: &charClassMatcher{
																																	pos:        position{line: 2936, col: 7, offset: 97248},
																																	val:        "[^[]<>,]",
																																	chars:      []rune{'[', ']', '<', '>', ','},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 537, col: 22, offset: 17565},
																														val:        ">>",
																														ignoreCase: false,
																														want:       "\">>\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2658, col: 11, offset: 88553},
																								run: (*parser).callonExternalCrossReference171,
																								expr: &charClassMatcher{
																									pos:        position{line: 2658, col: 12, offset: 88554},
																									val:        "[<>&]",
																									chars:      []rune{'<', '>', '&'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2928, col: 7, offset: 97032},
																		run: (*parser).callonExternalCrossReference173,
																		expr: &litMatcher{
																			pos:        position{line: 2928, col: 7, offset: 97032},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 991, col: 23, offset: 31326},
													run: (*parser).callonExternalCrossReference175,
													expr: &seqExpr{
														pos: position{line: 991, col: 23, offset: 31326},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 989, col: 32, offset: 31294},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
															&labeledExpr{
																pos:   position{line: 991, col: 51, offset: 31354},
																label: "ref",
																expr: &actionExpr{
																	pos: position{line: 991, col: 56, offset: 31359},
																	run: (*parser).callonExternalCrossReference179,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 991, col: 56, offset: 31359},
																		expr: &charClassMatcher{
																			pos:        position{line: 991, col: 56, offset: 31359},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 989, col: 32, offset: 31294},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 541, col: 54, offset: 17689},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 72, offset: 17707},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 559, col: 1, offset: 18378},
			expr: &choiceExpr{
				pos: position{line: 560, col: 5, offset: 18400},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 613, col: 5, offset: 19628},
						run: (*parser).callonDelimitedBlock2,
						expr: &seqExpr{
							pos: position{line: 613, col: 5, offset: 19628},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 613, col: 5, offset: 19628},
									run: (*parser).callonDelimitedBlock4,
								},
								&litMatcher{
									pos:        position{line: 585, col: 26, offset: 18966},
									val:        "////",
									ignoreCase: false,
									want:       "\"////\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 585, col: 33, offset: 18973},
									expr: &actionExpr{
										pos: position{line: 2948, col: 10, offset: 97526},
										run: (*parser).callonDelimitedBlock7,
										expr: &charClassMatcher{
											pos:        position{line: 2948, col: 11, offset: 97527},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&choiceExpr{
									pos: position{line: 2965, col: 8, offset: 97889},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2958, col: 12, offset: 97749},
											run: (*parser).callonDelimitedBlock10,
											expr: &choiceExpr{
												pos: position{line: 2958, col: 13, offset: 97750},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2958, col: 13, offset: 97750},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2958, col: 20, offset: 97757},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2958, col: 29, offset: 97766},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2962, col: 8, offset: 97839},
											expr: &anyMatcher{
												line: 2962, col: 9, offset: 97840,
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 618, col: 5, offset: 19811},
									run: (*parser).callonDelimitedBlock17,
								},
								&labeledExpr{
									pos:   position{line: 623, col: 5, offset: 20012},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 634, col: 5, offset: 20336},
										expr: &actionExpr{
											pos: position{line: 634, col: 6, offset: 20337},
											run: (*parser).callonDelimitedBlock20,
											expr: &seqExpr{
												pos: position{line: 634, col: 6, offset: 20337},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 634, col: 6, offset: 20337},
														expr: &choiceExpr{
															pos: position{line: 631, col: 29, offset: 20279},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 585, col: 26, offset: 18966},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 585, col: 26, offset: 18966},
																			val:        "////",
																			ignoreCase: false,
																			want:       "\"////\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 585, col: 33, offset: 18973},
																			expr: &actionExpr{
																				pos: position{line: 2948, col: 10, offset: 97526},
																				run: (*parser).callonDelimitedBlock27,
																				expr: &charClassMatcher{
																					pos:        position{line: 2948, col: 11, offset: 97527},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2965, col: 8, offset: 97889},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2958, col: 12, offset: 97749},
																					run: (*parser).callonDelimitedBlock30,
																					expr: &choiceExpr{
																						pos: position{line: 2958, col: 13, offset: 97750},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2958, col: 13, offset: 97750},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 20, offset: 97757},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 29, offset: 97766},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2962, col: 8, offset: 97839},
																					expr: &anyMatcher{
																						line: 2962, col: 9, offset: 97840,
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2962, col: 8, offset: 97839},
																	expr: &anyMatcher{
																		line: 2962, col: 9, offset: 97840,
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 635, col: 5, offset: 20367},
														label: "line",
														expr: &actionExpr{
															pos: position{line: 602, col: 5, offset: 19323},
															run: (*parser).callonDelimitedBlock40,
															expr: &seqExpr{
																pos: position{line: 602, col: 5, offset: 19323},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 602, col: 5, offset: 19323},
																		expr: &notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 603, col: 5, offset: 19396},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 603, col: 14, offset: 19405},
																			run: (*parser).callonDelimitedBlock46,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 603, col: 14, offset: 19405},
																				expr: &charClassMatcher{
																					pos:        position{line: 603, col: 14, offset: 19405},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2965, col: 8, offset: 97889},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2958, col: 12, offset: 97749},
																				run: (*parser).callonDelimitedBlock50,
																				expr: &choiceExpr{
																					pos: position{line: 2958, col: 13, offset: 97750},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2958, col: 13, offset: 97750},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2958, col: 20, offset: 97757},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2958, col: 29, offset: 97766},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2962, col: 8, offset: 97839},
																				expr: &anyMatcher{
																					line: 2962, col: 9, offset: 97840,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 624, col: 5, offset: 20046},
									expr: &choiceExpr{
										pos: position{line: 631, col: 29, offset: 20279},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 585, col: 26, offset: 18966},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 585, col: 26, offset: 18966},
														val:        "////",
														ignoreCase: false,
														want:       "\"////\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 585, col: 33, offset: 18973},
														expr: &actionExpr{
															pos: position{line: 2948, col: 10, offset: 97526},
															run: (*parser).callonDelimitedBlock62,
															expr: &charClassMatcher{
																pos:        position{line: 2948, col: 11, offset: 97527},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2965, col: 8, offset: 97889},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2958, col: 12, offset: 97749},
																run: (*parser).callonDelimitedBlock65,
																expr: &choiceExpr{
																	pos: position{line: 2958, col: 13, offset: 97750},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2958, col: 13, offset: 97750},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 20, offset: 97757},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 29, offset: 97766},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2962, col: 8, offset: 97839},
																expr: &anyMatcher{
																	line: 2962, col: 9, offset: 97840,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2962, col: 8, offset: 97839},
												expr: &anyMatcher{
													line: 2962, col: 9, offset: 97840,
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 561, col: 7, offset: 18419},
						name: "ExampleBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 562, col: 7, offset: 18438},
						name: "FencedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 563, col: 7, offset: 18456},
						name: "ListingBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 564, col: 7, offset: 18475},
						name: "LiteralBlock",
					},
					&actionExpr{
						pos: position{line: 763, col: 5, offset: 24158},
						run: (*parser).callonDelimitedBlock78,
						expr: &seqExpr{
							pos: position{line: 763, col: 5, offset: 24158},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 763, col: 5, offset: 24158},
									label: "firstLine",
									expr: &actionExpr{
										pos: position{line: 770, col: 5, offset: 24417},
										run: (*parser).callonDelimitedBlock81,
										expr: &seqExpr{
											pos: position{line: 770, col: 5, offset: 24417},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 770, col: 5, offset: 24417},
													expr: &actionExpr{
														pos: position{line: 526, col: 14, offset: 17074},
														run: (*parser).callonDelimitedBlock84,
														expr: &seqExpr{
															pos: position{line: 526, col: 14, offset: 17074},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 526, col: 14, offset: 17074},
																	expr: &notExpr{
																		pos: position{line: 2962, col: 8, offset: 97839},
																		expr: &anyMatcher{
																			line: 2962, col: 9, offset: 97840,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 526, col: 19, offset: 17079},
																	expr: &actionExpr{
																		pos: position{line: 2948, col: 10, offset: 97526},
																		run: (*parser).callonDelimitedBlock90,
																		expr: &charClassMatcher{
																			pos:        position{line: 2948, col: 11, offset: 97527},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonDelimitedBlock93,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 771, col: 5, offset: 24432},
													val:        "> ",
													ignoreCase: false,
													want:       "\"> \"",
												},
												&labeledExpr{
													pos:   position{line: 772, col: 5, offset: 24442},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 772, col: 14, offset: 24451},
														run: (*parser).callonDelimitedBlock102,
														expr: &oneOrMoreExpr{
															pos: position{line: 772, col: 15, offset: 24452},
															expr: &charClassMatcher{
																pos:        position{line: 772, col: 15, offset: 24452},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonDelimitedBlock106,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 764, col: 5, offset: 24195},
									label: "otherLines",
									expr: &zeroOrMoreExpr{
										pos: position{line: 764, col: 16, offset: 24206},
										expr: &choiceExpr{
											pos: position{line: 764, col: 17, offset: 24207},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 770, col: 5, offset: 24417},
													run: (*parser).callonDelimitedBlock116,
													expr: &seqExpr{
														pos: position{line: 770, col: 5, offset: 24417},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 770, col: 5, offset: 24417},
																expr: &actionExpr{
																	pos: position{line: 526, col: 14, offset: 17074},
																	run: (*parser).callonDelimitedBlock119,
																	expr: &seqExpr{
																		pos: position{line: 526, col: 14, offset: 17074},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 526, col: 14, offset: 17074},
																				expr: &notExpr{
																					pos: position{line: 2962, col: 8, offset: 97839},
																					expr: &anyMatcher{
																						line: 2962, col: 9, offset: 97840,
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 526, col: 19, offset: 17079},
																				expr: &actionExpr{
																					pos: position{line: 2948, col: 10, offset: 97526},
																					run: (*parser).callonDelimitedBlock125,
																					expr: &charClassMatcher{
																						pos:        position{line: 2948, col: 11, offset: 97527},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2965, col: 8, offset: 97889},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2958, col: 12, offset: 97749},
																						run: (*parser).callonDelimitedBlock128,
																						expr: &choiceExpr{
																							pos: position{line: 2958, col: 13, offset: 97750},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2958, col: 13, offset: 97750},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 20, offset: 97757},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 29, offset: 97766},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2962, col: 8, offset: 97839},
																						expr: &anyMatcher{
																							line: 2962, col: 9, offset: 97840,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 771, col: 5, offset: 24432},
																val:        "> ",
																ignoreCase: false,
																want:       "\"> \"",
															},
															&labeledExpr{
																pos:   position{line: 772, col: 5, offset: 24442},
																label: "content",
																expr: &actionExpr{
																	pos: position{line: 772, col: 14, offset: 24451},
																	run: (*parser).callonDelimitedBlock137,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 772, col: 15, offset: 24452},
																		expr: &charClassMatcher{
																			pos:        position{line: 772, col: 15, offset: 24452},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2965, col: 8, offset: 97889},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2958, col: 12, offset: 97749},
																		run: (*parser).callonDelimitedBlock141,
																		expr: &choiceExpr{
																			pos: position{line: 2958, col: 13, offset: 97750},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2958, col: 13, offset: 97750},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2958, col: 20, offset: 97757},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2958, col: 29, offset: 97766},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2962, col: 8, offset: 97839},
																		expr: &anyMatcher{
																			line: 2962, col: 9, offset: 97840,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1662, col: 5, offset: 55229},
													run: (*parser).callonDelimitedBlock148,
													expr: &seqExpr{
														pos: position{line: 1662, col: 5, offset: 55229},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 1662, col: 5, offset: 55229},
																label: "content",
																expr: &actionExpr{
																	pos: position{line: 1662, col: 14, offset: 55238},
																	run: (*parser).callonDelimitedBlock151,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1662, col: 14, offset: 55238},
																		expr: &charClassMatcher{
																			pos:        position{line: 1662, col: 14, offset: 55238},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
															&andCodeExpr{
																pos: position{line: 1665, col: 5, offset: 55295},
																run: (*parser).callonDelimitedBlock154,
															},
															&choiceExpr{
																pos: position{line: 2965, col: 8, offset: 97889},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2958, col: 12, offset: 97749},
																		run: (*parser).callonDelimitedBlock156,
																		expr: &choiceExpr{
																			pos: position{line: 2958, col: 13, offset: 97750},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2958, col: 13, offset: 97750},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2958, col: 20, offset: 97757},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2958, col: 29, offset: 97766},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2962, col: 8, offset: 97839},
																		expr: &anyMatcher{
																			line: 2962, col: 9, offset: 97840,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 566, col: 7, offset: 18519},
						name: "PassthroughBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 567, col: 7, offset: 18542},
						name: "QuoteBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 568, col: 7, offset: 18559},
						name: "SidebarBlock",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 642, col: 1, offset: 20500},
			expr: &actionExpr{
				pos: position{line: 643, col: 5, offset: 20520},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 643, col: 5, offset: 20520},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 643, col: 5, offset: 20520},
							run: (*parser).callonExampleBlock3,
						},
						&litMatcher{
							pos:        position{line: 587, col: 26, offset: 19010},
							val:        "====",
							ignoreCase: false,
							want:       "\"====\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 587, col: 33, offset: 19017},
							expr: &actionExpr{
								pos: position{line: 2948, col: 10, offset: 97526},
								run: (*parser).callonExampleBlock6,
								expr: &charClassMatcher{
									pos:        position{line: 2948, col: 11, offset: 97527},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2965, col: 8, offset: 97889},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2958, col: 12, offset: 97749},
									run: (*parser).callonExampleBlock9,
									expr: &choiceExpr{
										pos: position{line: 2958, col: 13, offset: 97750},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2958, col: 13, offset: 97750},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 20, offset: 97757},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 29, offset: 97766},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2962, col: 8, offset: 97839},
									expr: &anyMatcher{
										line: 2962, col: 9, offset: 97840,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 648, col: 5, offset: 20703},
							run: (*parser).callonExampleBlock16,
						},
						&labeledExpr{
							pos:   position{line: 653, col: 5, offset: 20904},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 14, offset: 20913},
								name: "ExampleBlockContent",
							},
						},
						&choiceExpr{
							pos: position{line: 661, col: 29, offset: 21170},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 587, col: 26, offset: 19010},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 587, col: 26, offset: 19010},
											val:        "====",
											ignoreCase: false,
											want:       "\"====\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 587, col: 33, offset: 19017},
											expr: &actionExpr{
												pos: position{line: 2948, col: 10, offset: 97526},
												run: (*parser).callonExampleBlock23,
												expr: &charClassMatcher{
													pos:        position{line: 2948, col: 11, offset: 97527},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2965, col: 8, offset: 97889},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2958, col: 12, offset: 97749},
													run: (*parser).callonExampleBlock26,
													expr: &choiceExpr{
														pos: position{line: 2958, col: 13, offset: 97750},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2958, col: 13, offset: 97750},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 20, offset: 97757},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 29, offset: 97766},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2962, col: 8, offset: 97839},
													expr: &anyMatcher{
														line: 2962, col: 9, offset: 97840,
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2962, col: 8, offset: 97839},
									expr: &anyMatcher{
										line: 2962, col: 9, offset: 97840,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockContent",
			pos:  position{line: 663, col: 1, offset: 21199},
			expr: &zeroOrMoreExpr{
				pos: position{line: 664, col: 4, offset: 21226},
				expr: &actionExpr{
					pos: position{line: 664, col: 5, offset: 21227},
					run: (*parser).callonExampleBlockContent2,
					expr: &seqExpr{
						pos: position{line: 664, col: 5, offset: 21227},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 664, col: 5, offset: 21227},
								expr: &choiceExpr{
									pos: position{line: 661, col: 29, offset: 21170},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 587, col: 26, offset: 19010},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 587, col: 26, offset: 19010},
													val:        "====",
													ignoreCase: false,
													want:       "\"====\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 587, col: 33, offset: 19017},
													expr: &actionExpr{
														pos: position{line: 2948, col: 10, offset: 97526},
														run: (*parser).callonExampleBlockContent9,
														expr: &charClassMatcher{
															pos:        position{line: 2948, col: 11, offset: 97527},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonExampleBlockContent12,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2962, col: 8, offset: 97839},
											expr: &anyMatcher{
												line: 2962, col: 9, offset: 97840,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 665, col: 5, offset: 21257},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 665, col: 11, offset: 21263},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 665, col: 11, offset: 21263},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 602, col: 5, offset: 19323},
											run: (*parser).callonExampleBlockContent24,
											expr: &seqExpr{
												pos: position{line: 602, col: 5, offset: 19323},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 602, col: 5, offset: 19323},
														expr: &notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 603, col: 5, offset: 19396},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 603, col: 14, offset: 19405},
															run: (*parser).callonExampleBlockContent30,
															expr: &zeroOrMoreExpr{
																pos: position{line: 603, col: 14, offset: 19405},
																expr: &charClassMatcher{
																	pos:        position{line: 603, col: 14, offset: 19405},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2965, col: 8, offset: 97889},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2958, col: 12, offset: 97749},
																run: (*parser).callonExampleBlockContent34,
																expr: &choiceExpr{
																	pos: position{line: 2958, col: 13, offset: 97750},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2958, col: 13, offset: 97750},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 20, offset: 97757},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 29, offset: 97766},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2962, col: 8, offset: 97839},
																expr: &anyMatcher{
																	line: 2962, col: 9, offset: 97840,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 672, col: 1, offset: 21405},
			expr: &actionExpr{
				pos: position{line: 673, col: 5, offset: 21424},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 673, col: 5, offset: 21424},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 673, col: 5, offset: 21424},
							run: (*parser).callonFencedBlock3,
						},
						&litMatcher{
							pos:        position{line: 589, col: 25, offset: 19053},
							val:        "```",
							ignoreCase: false,
							want:       "\"```\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 589, col: 31, offset: 19059},
							expr: &actionExpr{
								pos: position{line: 2948, col: 10, offset: 97526},
								run: (*parser).callonFencedBlock6,
								expr: &charClassMatcher{
									pos:        position{line: 2948, col: 11, offset: 97527},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2965, col: 8, offset: 97889},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2958, col: 12, offset: 97749},
									run: (*parser).callonFencedBlock9,
									expr: &choiceExpr{
										pos: position{line: 2958, col: 13, offset: 97750},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2958, col: 13, offset: 97750},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 20, offset: 97757},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 29, offset: 97766},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2962, col: 8, offset: 97839},
									expr: &anyMatcher{
										line: 2962, col: 9, offset: 97840,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 678, col: 5, offset: 21605},
							run: (*parser).callonFencedBlock16,
						},
						&labeledExpr{
							pos:   position{line: 683, col: 5, offset: 21805},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 683, col: 14, offset: 21814},
								name: "FencedBlockContent",
							},
						},
						&choiceExpr{
							pos: position{line: 691, col: 28, offset: 22070},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 589, col: 25, offset: 19053},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 589, col: 25, offset: 19053},
											val:        "```",
											ignoreCase: false,
											want:       "\"```\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 589, col: 31, offset: 19059},
											expr: &actionExpr{
												pos: position{line: 2948, col: 10, offset: 97526},
												run: (*parser).callonFencedBlock23,
												expr: &charClassMatcher{
													pos:        position{line: 2948, col: 11, offset: 97527},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2965, col: 8, offset: 97889},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2958, col: 12, offset: 97749},
													run: (*parser).callonFencedBlock26,
													expr: &choiceExpr{
														pos: position{line: 2958, col: 13, offset: 97750},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2958, col: 13, offset: 97750},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 20, offset: 97757},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 29, offset: 97766},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2962, col: 8, offset: 97839},
													expr: &anyMatcher{
														line: 2962, col: 9, offset: 97840,
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2962, col: 8, offset: 97839},
									expr: &anyMatcher{
										line: 2962, col: 9, offset: 97840,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 693, col: 1, offset: 22098},
			expr: &zeroOrMoreExpr{
				pos: position{line: 694, col: 5, offset: 22125},
				expr: &actionExpr{
					pos: position{line: 694, col: 6, offset: 22126},
					run: (*parser).callonFencedBlockContent2,
					expr: &seqExpr{
						pos: position{line: 694, col: 6, offset: 22126},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 694, col: 6, offset: 22126},
								expr: &choiceExpr{
									pos: position{line: 691, col: 28, offset: 22070},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 589, col: 25, offset: 19053},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 589, col: 25, offset: 19053},
													val:        "```",
													ignoreCase: false,
													want:       "\"```\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 589, col: 31, offset: 19059},
													expr: &actionExpr{
														pos: position{line: 2948, col: 10, offset: 97526},
														run: (*parser).callonFencedBlockContent9,
														expr: &charClassMatcher{
															pos:        position{line: 2948, col: 11, offset: 97527},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonFencedBlockContent12,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2962, col: 8, offset: 97839},
											expr: &anyMatcher{
												line: 2962, col: 9, offset: 97840,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 695, col: 5, offset: 22155},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 695, col: 11, offset: 22161},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 695, col: 11, offset: 22161},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 602, col: 5, offset: 19323},
											run: (*parser).callonFencedBlockContent24,
											expr: &seqExpr{
												pos: position{line: 602, col: 5, offset: 19323},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 602, col: 5, offset: 19323},
														expr: &notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 603, col: 5, offset: 19396},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 603, col: 14, offset: 19405},
															run: (*parser).callonFencedBlockContent30,
															expr: &zeroOrMoreExpr{
																pos: position{line: 603, col: 14, offset: 19405},
																expr: &charClassMatcher{
																	pos:        position{line: 603, col: 14, offset: 19405},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2965, col: 8, offset: 97889},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2958, col: 12, offset: 97749},
																run: (*parser).callonFencedBlockContent34,
																expr: &choiceExpr{
																	pos: position{line: 2958, col: 13, offset: 97750},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2958, col: 13, offset: 97750},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 20, offset: 97757},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 29, offset: 97766},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2962, col: 8, offset: 97839},
																expr: &anyMatcher{
																	line: 2962, col: 9, offset: 97840,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 702, col: 1, offset: 22304},
			expr: &actionExpr{
				pos: position{line: 703, col: 5, offset: 22324},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 703, col: 5, offset: 22324},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 703, col: 5, offset: 22324},
							run: (*parser).callonListingBlock3,
						},
						&litMatcher{
							pos:        position{line: 591, col: 26, offset: 19096},
							val:        "----",
							ignoreCase: false,
							want:       "\"----\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 591, col: 33, offset: 19103},
							expr: &actionExpr{
								pos: position{line: 2948, col: 10, offset: 97526},
								run: (*parser).callonListingBlock6,
								expr: &charClassMatcher{
									pos:        position{line: 2948, col: 11, offset: 97527},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2965, col: 8, offset: 97889},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2958, col: 12, offset: 97749},
									run: (*parser).callonListingBlock9,
									expr: &choiceExpr{
										pos: position{line: 2958, col: 13, offset: 97750},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2958, col: 13, offset: 97750},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 20, offset: 97757},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 29, offset: 97766},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2962, col: 8, offset: 97839},
									expr: &anyMatcher{
										line: 2962, col: 9, offset: 97840,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 708, col: 5, offset: 22507},
							run: (*parser).callonListingBlock16,
						},
						&labeledExpr{
							pos:   position{line: 713, col: 5, offset: 22708},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 713, col: 14, offset: 22717},
								name: "ListingBlockContent",
							},
						},
						&choiceExpr{
							pos: position{line: 721, col: 29, offset: 22979},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 591, col: 26, offset: 19096},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 591, col: 26, offset: 19096},
											val:        "----",
											ignoreCase: false,
											want:       "\"----\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 591, col: 33, offset: 19103},
											expr: &actionExpr{
												pos: position{line: 2948, col: 10, offset: 97526},
												run: (*parser).callonListingBlock23,
												expr: &charClassMatcher{
													pos:        position{line: 2948, col: 11, offset: 97527},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2965, col: 8, offset: 97889},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2958, col: 12, offset: 97749},
													run: (*parser).callonListingBlock26,
													expr: &choiceExpr{
														pos: position{line: 2958, col: 13, offset: 97750},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2958, col: 13, offset: 97750},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 20, offset: 97757},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 29, offset: 97766},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2962, col: 8, offset: 97839},
													expr: &anyMatcher{
														line: 2962, col: 9, offset: 97840,
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2962, col: 8, offset: 97839},
									expr: &anyMatcher{
										line: 2962, col: 9, offset: 97840,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockContent",
			pos:  position{line: 723, col: 1, offset: 23008},
			expr: &zeroOrMoreExpr{
				pos: position{line: 724, col: 5, offset: 23036},
				expr: &actionExpr{
					pos: position{line: 724, col: 6, offset: 23037},
					run: (*parser).callonListingBlockContent2,
					expr: &seqExpr{
						pos: position{line: 724, col: 6, offset: 23037},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 724, col: 6, offset: 23037},
								expr: &choiceExpr{
									pos: position{line: 721, col: 29, offset: 22979},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 591, col: 26, offset: 19096},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 591, col: 26, offset: 19096},
													val:        "----",
													ignoreCase: false,
													want:       "\"----\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 591, col: 33, offset: 19103},
													expr: &actionExpr{
														pos: position{line: 2948, col: 10, offset: 97526},
														run: (*parser).callonListingBlockContent9,
														expr: &charClassMatcher{
															pos:        position{line: 2948, col: 11, offset: 97527},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonListingBlockContent12,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2962, col: 8, offset: 97839},
											expr: &anyMatcher{
												line: 2962, col: 9, offset: 97840,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 725, col: 5, offset: 23067},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 725, col: 11, offset: 23073},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 725, col: 11, offset: 23073},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 602, col: 5, offset: 19323},
											run: (*parser).callonListingBlockContent24,
											expr: &seqExpr{
												pos: position{line: 602, col: 5, offset: 19323},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 602, col: 5, offset: 19323},
														expr: &notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 603, col: 5, offset: 19396},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 603, col: 14, offset: 19405},
															run: (*parser).callonListingBlockContent30,
															expr: &zeroOrMoreExpr{
																pos: position{line: 603, col: 14, offset: 19405},
																expr: &charClassMatcher{
																	pos:        position{line: 603, col: 14, offset: 19405},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2965, col: 8, offset: 97889},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2958, col: 12, offset: 97749},
																run: (*parser).callonListingBlockContent34,
																expr: &choiceExpr{
																	pos: position{line: 2958, col: 13, offset: 97750},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2958, col: 13, offset: 97750},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 20, offset: 97757},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 29, offset: 97766},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2962, col: 8, offset: 97839},
																expr: &anyMatcher{
																	line: 2962, col: 9, offset: 97840,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 732, col: 1, offset: 23216},
			expr: &actionExpr{
				pos: position{line: 733, col: 5, offset: 23236},
				run: (*parser).callonLiteralBlock1,
				expr: &seqExpr{
					pos: position{line: 733, col: 5, offset: 23236},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 593, col: 26, offset: 19140},
							val:        "....",
							ignoreCase: false,
							want:       "\"....\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 593, col: 33, offset: 19147},
							expr: &actionExpr{
								pos: position{line: 2948, col: 10, offset: 97526},
								run: (*parser).callonLiteralBlock5,
								expr: &charClassMatcher{
									pos:        position{line: 2948, col: 11, offset: 97527},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2965, col: 8, offset: 97889},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2958, col: 12, offset: 97749},
									run: (*parser).callonLiteralBlock8,
									expr: &choiceExpr{
										pos: position{line: 2958, col: 13, offset: 97750},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2958, col: 13, offset: 97750},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 20, offset: 97757},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 29, offset: 97766},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2962, col: 8, offset: 97839},
									expr: &anyMatcher{
										line: 2962, col: 9, offset: 97840,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 734, col: 5, offset: 23267},
							run: (*parser).callonLiteralBlock15,
						},
						&labeledExpr{
							pos:   position{line: 738, col: 5, offset: 23419},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 738, col: 14, offset: 23428},
								name: "LiteralBlockContent",
							},
						},
						&andCodeExpr{
							pos: position{line: 739, col: 5, offset: 23453},
							run: (*parser).callonLiteralBlock18,
						},
						&zeroOrOneExpr{
							pos: position{line: 744, col: 5, offset: 23654},
							expr: &choiceExpr{
								pos: position{line: 751, col: 29, offset: 23887},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 593, col: 26, offset: 19140},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 593, col: 26, offset: 19140},
												val:        "....",
												ignoreCase: false,
												want:       "\"....\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 593, col: 33, offset: 19147},
												expr: &actionExpr{
													pos: position{line: 2948, col: 10, offset: 97526},
													run: (*parser).callonLiteralBlock24,
													expr: &charClassMatcher{
														pos:        position{line: 2948, col: 11, offset: 97527},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2965, col: 8, offset: 97889},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2958, col: 12, offset: 97749},
														run: (*parser).callonLiteralBlock27,
														expr: &choiceExpr{
															pos: position{line: 2958, col: 13, offset: 97750},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2958, col: 13, offset: 97750},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2958, col: 20, offset: 97757},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2958, col: 29, offset: 97766},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2962, col: 8, offset: 97839},
														expr: &anyMatcher{
															line: 2962, col: 9, offset: 97840,
														},
													},
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 2962, col: 8, offset: 97839},
										expr: &anyMatcher{
											line: 2962, col: 9, offset: 97840,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockContent",
			pos:  position{line: 753, col: 1, offset: 23916},
			expr: &zeroOrMoreExpr{
				pos: position{line: 754, col: 5, offset: 23944},
				expr: &actionExpr{
					pos: position{line: 754, col: 6, offset: 23945},
					run: (*parser).callonLiteralBlockContent2,
					expr: &seqExpr{
						pos: position{line: 754, col: 6, offset: 23945},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 754, col: 6, offset: 23945},
								expr: &choiceExpr{
									pos: position{line: 751, col: 29, offset: 23887},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 593, col: 26, offset: 19140},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 593, col: 26, offset: 19140},
													val:        "....",
													ignoreCase: false,
													want:       "\"....\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 593, col: 33, offset: 19147},
													expr: &actionExpr{
														pos: position{line: 2948, col: 10, offset: 97526},
														run: (*parser).callonLiteralBlockContent9,
														expr: &charClassMatcher{
															pos:        position{line: 2948, col: 11, offset: 97527},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonLiteralBlockContent12,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2962, col: 8, offset: 97839},
											expr: &anyMatcher{
												line: 2962, col: 9, offset: 97840,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 755, col: 5, offset: 23975},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 755, col: 11, offset: 23981},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 755, col: 11, offset: 23981},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 602, col: 5, offset: 19323},
											run: (*parser).callonLiteralBlockContent24,
											expr: &seqExpr{
												pos: position{line: 602, col: 5, offset: 19323},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 602, col: 5, offset: 19323},
														expr: &notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 603, col: 5, offset: 19396},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 603, col: 14, offset: 19405},
															run: (*parser).callonLiteralBlockContent30,
															expr: &zeroOrMoreExpr{
																pos: position{line: 603, col: 14, offset: 19405},
																expr: &charClassMatcher{
																	pos:        position{line: 603, col: 14, offset: 19405},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2965, col: 8, offset: 97889},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2958, col: 12, offset: 97749},
																run: (*parser).callonLiteralBlockContent34,
																expr: &choiceExpr{
																	pos: position{line: 2958, col: 13, offset: 97750},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2958, col: 13, offset: 97750},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 20, offset: 97757},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 29, offset: 97766},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2962, col: 8, offset: 97839},
																expr: &anyMatcher{
																	line: 2962, col: 9, offset: 97840,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 778, col: 1, offset: 24570},
			expr: &actionExpr{
				pos: position{line: 779, col: 5, offset: 24603},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 779, col: 5, offset: 24603},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 779, col: 5, offset: 24603},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 779, col: 11, offset: 24609},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 779, col: 19, offset: 24617},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 779, col: 20, offset: 24618},
									expr: &charClassMatcher{
										pos:        position{line: 779, col: 20, offset: 24618},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2965, col: 8, offset: 97889},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2958, col: 12, offset: 97749},
									run: (*parser).callonMarkdownQuoteAttribution9,
									expr: &choiceExpr{
										pos: position{line: 2958, col: 13, offset: 97750},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2958, col: 13, offset: 97750},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 20, offset: 97757},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 29, offset: 97766},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2962, col: 8, offset: 97839},
									expr: &anyMatcher{
										line: 2962, col: 9, offset: 97840,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 788, col: 1, offset: 24786},
			expr: &actionExpr{
				pos: position{line: 789, col: 5, offset: 24810},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 789, col: 5, offset: 24810},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 789, col: 5, offset: 24810},
							run: (*parser).callonPassthroughBlock3,
						},
						&litMatcher{
							pos:        position{line: 595, col: 30, offset: 19188},
							val:        "++++",
							ignoreCase: false,
							want:       "\"++++\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 595, col: 37, offset: 19195},
							expr: &actionExpr{
								pos: position{line: 2948, col: 10, offset: 97526},
								run: (*parser).callonPassthroughBlock6,
								expr: &charClassMatcher{
									pos:        position{line: 2948, col: 11, offset: 97527},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2965, col: 8, offset: 97889},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2958, col: 12, offset: 97749},
									run: (*parser).callonPassthroughBlock9,
									expr: &choiceExpr{
										pos: position{line: 2958, col: 13, offset: 97750},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2958, col: 13, offset: 97750},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 20, offset: 97757},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 29, offset: 97766},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2962, col: 8, offset: 97839},
									expr: &anyMatcher{
										line: 2962, col: 9, offset: 97840,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 794, col: 5, offset: 25001},
							run: (*parser).callonPassthroughBlock16,
						},
						&labeledExpr{
							pos:   position{line: 799, col: 5, offset: 25206},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 799, col: 14, offset: 25215},
								name: "PassthroughBlockContent",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 800, col: 5, offset: 25244},
							expr: &choiceExpr{
								pos: position{line: 807, col: 33, offset: 25497},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 595, col: 30, offset: 19188},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 595, col: 30, offset: 19188},
												val:        "++++",
												ignoreCase: false,
												want:       "\"++++\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 595, col: 37, offset: 19195},
												expr: &actionExpr{
													pos: position{line: 2948, col: 10, offset: 97526},
													run: (*parser).callonPassthroughBlock24,
													expr: &charClassMatcher{
														pos:        position{line: 2948, col: 11, offset: 97527},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2965, col: 8, offset: 97889},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2958, col: 12, offset: 97749},
														run: (*parser).callonPassthroughBlock27,
														expr: &choiceExpr{
															pos: position{line: 2958, col: 13, offset: 97750},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2958, col: 13, offset: 97750},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2958, col: 20, offset: 97757},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2958, col: 29, offset: 97766},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2962, col: 8, offset: 97839},
														expr: &anyMatcher{
															line: 2962, col: 9, offset: 97840,
														},
													},
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 2962, col: 8, offset: 97839},
										expr: &anyMatcher{
											line: 2962, col: 9, offset: 97840,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockContent",
			pos:  position{line: 809, col: 1, offset: 25530},
			expr: &zeroOrMoreExpr{
				pos: position{line: 810, col: 5, offset: 25562},
				expr: &actionExpr{
					pos: position{line: 810, col: 6, offset: 25563},
					run: (*parser).callonPassthroughBlockContent2,
					expr: &seqExpr{
						pos: position{line: 810, col: 6, offset: 25563},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 810, col: 6, offset: 25563},
								expr: &choiceExpr{
									pos: position{line: 807, col: 33, offset: 25497},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 595, col: 30, offset: 19188},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 595, col: 30, offset: 19188},
													val:        "++++",
													ignoreCase: false,
													want:       "\"++++\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 595, col: 37, offset: 19195},
													expr: &actionExpr{
														pos: position{line: 2948, col: 10, offset: 97526},
														run: (*parser).callonPassthroughBlockContent9,
														expr: &charClassMatcher{
															pos:        position{line: 2948, col: 11, offset: 97527},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonPassthroughBlockContent12,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2962, col: 8, offset: 97839},
											expr: &anyMatcher{
												line: 2962, col: 9, offset: 97840,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 811, col: 5, offset: 25597},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 811, col: 11, offset: 25603},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 811, col: 11, offset: 25603},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 602, col: 5, offset: 19323},
											run: (*parser).callonPassthroughBlockContent24,
											expr: &seqExpr{
												pos: position{line: 602, col: 5, offset: 19323},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 602, col: 5, offset: 19323},
														expr: &notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 603, col: 5, offset: 19396},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 603, col: 14, offset: 19405},
															run: (*parser).callonPassthroughBlockContent30,
															expr: &zeroOrMoreExpr{
																pos: position{line: 603, col: 14, offset: 19405},
																expr: &charClassMatcher{
																	pos:        position{line: 603, col: 14, offset: 19405},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2965, col: 8, offset: 97889},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2958, col: 12, offset: 97749},
																run: (*parser).callonPassthroughBlockContent34,
																expr: &choiceExpr{
																	pos: position{line: 2958, col: 13, offset: 97750},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2958, col: 13, offset: 97750},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 20, offset: 97757},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 29, offset: 97766},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2962, col: 8, offset: 97839},
																expr: &anyMatcher{
																	line: 2962, col: 9, offset: 97840,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 818, col: 1, offset: 25744},
			expr: &actionExpr{
				pos: position{line: 819, col: 5, offset: 25762},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 819, col: 5, offset: 25762},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 819, col: 5, offset: 25762},
							run: (*parser).callonQuoteBlock3,
						},
						&litMatcher{
							pos:        position{line: 597, col: 24, offset: 19230},
							val:        "____",
							ignoreCase: false,
							want:       "\"____\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 597, col: 31, offset: 19237},
							expr: &actionExpr{
								pos: position{line: 2948, col: 10, offset: 97526},
								run: (*parser).callonQuoteBlock6,
								expr: &charClassMatcher{
									pos:        position{line: 2948, col: 11, offset: 97527},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2965, col: 8, offset: 97889},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2958, col: 12, offset: 97749},
									run: (*parser).callonQuoteBlock9,
									expr: &choiceExpr{
										pos: position{line: 2958, col: 13, offset: 97750},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2958, col: 13, offset: 97750},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 20, offset: 97757},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 29, offset: 97766},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2962, col: 8, offset: 97839},
									expr: &anyMatcher{
										line: 2962, col: 9, offset: 97840,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 824, col: 5, offset: 25941},
							run: (*parser).callonQuoteBlock16,
						},
						&labeledExpr{
							pos:   position{line: 829, col: 5, offset: 26140},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 829, col: 14, offset: 26149},
								name: "QuoteBlockContent",
							},
						},
						&choiceExpr{
							pos: position{line: 837, col: 27, offset: 26394},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 597, col: 24, offset: 19230},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 597, col: 24, offset: 19230},
											val:        "____",
											ignoreCase: false,
											want:       "\"____\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 597, col: 31, offset: 19237},
											expr: &actionExpr{
												pos: position{line: 2948, col: 10, offset: 97526},
												run: (*parser).callonQuoteBlock23,
												expr: &charClassMatcher{
													pos:        position{line: 2948, col: 11, offset: 97527},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2965, col: 8, offset: 97889},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2958, col: 12, offset: 97749},
													run: (*parser).callonQuoteBlock26,
													expr: &choiceExpr{
														pos: position{line: 2958, col: 13, offset: 97750},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2958, col: 13, offset: 97750},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 20, offset: 97757},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 29, offset: 97766},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2962, col: 8, offset: 97839},
													expr: &anyMatcher{
														line: 2962, col: 9, offset: 97840,
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2962, col: 8, offset: 97839},
									expr: &anyMatcher{
										line: 2962, col: 9, offset: 97840,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockContent",
			pos:  position{line: 839, col: 1, offset: 26421},
			expr: &zeroOrMoreExpr{
				pos: position{line: 840, col: 4, offset: 26446},
				expr: &actionExpr{
					pos: position{line: 840, col: 5, offset: 26447},
					run: (*parser).callonQuoteBlockContent2,
					expr: &seqExpr{
						pos: position{line: 840, col: 5, offset: 26447},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 840, col: 5, offset: 26447},
								expr: &choiceExpr{
									pos: position{line: 837, col: 27, offset: 26394},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 597, col: 24, offset: 19230},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 597, col: 24, offset: 19230},
													val:        "____",
													ignoreCase: false,
													want:       "\"____\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 597, col: 31, offset: 19237},
													expr: &actionExpr{
														pos: position{line: 2948, col: 10, offset: 97526},
														run: (*parser).callonQuoteBlockContent9,
														expr: &charClassMatcher{
															pos:        position{line: 2948, col: 11, offset: 97527},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonQuoteBlockContent12,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2962, col: 8, offset: 97839},
											expr: &anyMatcher{
												line: 2962, col: 9, offset: 97840,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 841, col: 5, offset: 26475},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 841, col: 11, offset: 26481},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 841, col: 11, offset: 26481},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 602, col: 5, offset: 19323},
											run: (*parser).callonQuoteBlockContent24,
											expr: &seqExpr{
												pos: position{line: 602, col: 5, offset: 19323},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 602, col: 5, offset: 19323},
														expr: &notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 603, col: 5, offset: 19396},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 603, col: 14, offset: 19405},
															run: (*parser).callonQuoteBlockContent30,
															expr: &zeroOrMoreExpr{
																pos: position{line: 603, col: 14, offset: 19405},
																expr: &charClassMatcher{
																	pos:        position{line: 603, col: 14, offset: 19405},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2965, col: 8, offset: 97889},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2958, col: 12, offset: 97749},
																run: (*parser).callonQuoteBlockContent34,
																expr: &choiceExpr{
																	pos: position{line: 2958, col: 13, offset: 97750},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2958, col: 13, offset: 97750},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 20, offset: 97757},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 29, offset: 97766},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2962, col: 8, offset: 97839},
																expr: &anyMatcher{
																	line: 2962, col: 9, offset: 97840,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 848, col: 1, offset: 26624},
			expr: &actionExpr{
				pos: position{line: 849, col: 5, offset: 26644},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 849, col: 5, offset: 26644},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 849, col: 5, offset: 26644},
							run: (*parser).callonSidebarBlock3,
						},
						&litMatcher{
							pos:        position{line: 599, col: 26, offset: 19274},
							val:        "****",
							ignoreCase: false,
							want:       "\"****\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 599, col: 33, offset: 19281},
							expr: &actionExpr{
								pos: position{line: 2948, col: 10, offset: 97526},
								run: (*parser).callonSidebarBlock6,
								expr: &charClassMatcher{
									pos:        position{line: 2948, col: 11, offset: 97527},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2965, col: 8, offset: 97889},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2958, col: 12, offset: 97749},
									run: (*parser).callonSidebarBlock9,
									expr: &choiceExpr{
										pos: position{line: 2958, col: 13, offset: 97750},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2958, col: 13, offset: 97750},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 20, offset: 97757},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 29, offset: 97766},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2962, col: 8, offset: 97839},
									expr: &anyMatcher{
										line: 2962, col: 9, offset: 97840,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 854, col: 5, offset: 26827},
							run: (*parser).callonSidebarBlock16,
						},
						&labeledExpr{
							pos:   position{line: 859, col: 5, offset: 27028},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 859, col: 14, offset: 27037},
								name: "SidebarBlockContent",
							},
						},
						&choiceExpr{
							pos: position{line: 867, col: 29, offset: 27295},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 599, col: 26, offset: 19274},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 599, col: 26, offset: 19274},
											val:        "****",
											ignoreCase: false,
											want:       "\"****\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 599, col: 33, offset: 19281},
											expr: &actionExpr{
												pos: position{line: 2948, col: 10, offset: 97526},
												run: (*parser).callonSidebarBlock23,
												expr: &charClassMatcher{
													pos:        position{line: 2948, col: 11, offset: 97527},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2965, col: 8, offset: 97889},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2958, col: 12, offset: 97749},
													run: (*parser).callonSidebarBlock26,
													expr: &choiceExpr{
														pos: position{line: 2958, col: 13, offset: 97750},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2958, col: 13, offset: 97750},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 20, offset: 97757},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 29, offset: 97766},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2962, col: 8, offset: 97839},
													expr: &anyMatcher{
														line: 2962, col: 9, offset: 97840,
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2962, col: 8, offset: 97839},
									expr: &anyMatcher{
										line: 2962, col: 9, offset: 97840,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 869, col: 1, offset: 27325},
			expr: &zeroOrMoreExpr{
				pos: position{line: 870, col: 4, offset: 27352},
				expr: &actionExpr{
					pos: position{line: 870, col: 5, offset: 27353},
					run: (*parser).callonSidebarBlockContent2,
					expr: &seqExpr{
						pos: position{line: 870, col: 5, offset: 27353},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 870, col: 5, offset: 27353},
								expr: &choiceExpr{
									pos: position{line: 867, col: 29, offset: 27295},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 599, col: 26, offset: 19274},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 599, col: 26, offset: 19274},
													val:        "****",
													ignoreCase: false,
													want:       "\"****\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 599, col: 33, offset: 19281},
													expr: &actionExpr{
														pos: position{line: 2948, col: 10, offset: 97526},
														run: (*parser).callonSidebarBlockContent9,
														expr: &charClassMatcher{
															pos:        position{line: 2948, col: 11, offset: 97527},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonSidebarBlockContent12,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2962, col: 8, offset: 97839},
											expr: &anyMatcher{
												line: 2962, col: 9, offset: 97840,
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 871, col: 5, offset: 27383},
								label: "line",
								expr: &choiceExpr{
									pos: position{line: 871, col: 11, offset: 27389},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 871, col: 11, offset: 27389},
											name: "FileInclusion",
										},
										&actionExpr{
											pos: position{line: 602, col: 5, offset: 19323},
											run: (*parser).callonSidebarBlockContent24,
											expr: &seqExpr{
												pos: position{line: 602, col: 5, offset: 19323},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 602, col: 5, offset: 19323},
														expr: &notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 603, col: 5, offset: 19396},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 603, col: 14, offset: 19405},
															run: (*parser).callonSidebarBlockContent30,
															expr: &zeroOrMoreExpr{
																pos: position{line: 603, col: 14, offset: 19405},
																expr: &charClassMatcher{
																	pos:        position{line: 603, col: 14, offset: 19405},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2965, col: 8, offset: 97889},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2958, col: 12, offset: 97749},
																run: (*parser).callonSidebarBlockContent34,
																expr: &choiceExpr{
																	pos: position{line: 2958, col: 13, offset: 97750},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2958, col: 13, offset: 97750},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 20, offset: 97757},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 29, offset: 97766},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2962, col: 8, offset: 97839},
																expr: &anyMatcher{
																	line: 2962, col: 9, offset: 97840,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 1009, col: 1, offset: 32093},
			expr: &actionExpr{
				pos: position{line: 1010, col: 5, offset: 32115},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 1010, col: 5, offset: 32115},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1010, col: 5, offset: 32115},
							run: (*parser).callonFileInclusion3,
						},
						&stateCodeExpr{
							pos: position{line: 1014, col: 5, offset: 32202},
							run: (*parser).callonFileInclusion4,
						},
						&labeledExpr{
							pos:   position{line: 1019, col: 5, offset: 32369},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 1020, col: 9, offset: 32384},
								run: (*parser).callonFileInclusion6,
								expr: &seqExpr{
									pos: position{line: 1020, col: 9, offset: 32384},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1020, col: 9, offset: 32384},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 1021, col: 9, offset: 32405},
											label: "path",
											expr: &actionExpr{
												pos: position{line: 2909, col: 17, offset: 96382},
												run: (*parser).callonFileInclusion10,
												expr: &labeledExpr{
													pos:   position{line: 2909, col: 17, offset: 96382},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 2909, col: 22, offset: 96387},
														expr: &choiceExpr{
															pos: position{line: 2909, col: 23, offset: 96388},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2921, col: 13, offset: 96792},
																	run: (*parser).callonFileInclusion14,
																	expr: &labeledExpr{
																		pos:   position{line: 2921, col: 13, offset: 96792},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2921, col: 22, offset: 96801},
																			expr: &choiceExpr{
																				pos: position{line: 2922, col: 5, offset: 96807},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2922, col: 5, offset: 96807},
																						run: (*parser).callonFileInclusion18,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2922, col: 5, offset: 96807},
																							expr: &charClassMatcher{
																								pos:        position{line: 2922, col: 6, offset: 96808},
																								val:        "[^\\r\\n[]�&<>{ ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 493, col: 5, offset: 15873},
																						run: (*parser).callonFileInclusion21,
																						expr: &seqExpr{
																							pos: position{line: 493, col: 5, offset: 15873},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 493, col: 5, offset: 15873},
																									run: (*parser).callonFileInclusion23,
																								},
																								&labeledExpr{
																									pos:   position{line: 496, col: 5, offset: 15937},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 496, col: 14, offset: 15946},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 507, col: 25, offset: 16408},
																												run: (*parser).callonFileInclusion26,
																												expr: &seqExpr{
																													pos: position{line: 507, col: 25, offset: 16408},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 507, col: 25, offset: 16408},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 507, col: 37, offset: 16420},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 162, col: 18, offset: 4814},
																																run: (*parser).callonFileInclusion30,
																																expr: &seqExpr{
																																	pos: position{line: 162, col: 18, offset: 4814},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 162, col: 18, offset: 4814},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 162, col: 28, offset: 4824},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 162, col: 29, offset: 4825},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 507, col: 56, offset: 16439},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 507, col: 62, offset: 16445},
																																expr: &actionExpr{
																																	pos: position{line: 515, col: 17, offset: 16708},
																																	run: (*parser).callonFileInclusion37,
																																	expr: &seqExpr{
																																		pos: position{line: 515, col: 17, offset: 16708},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 515, col: 17, offset: 16708},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 515, col: 21, offset: 16712},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 515, col: 28, offset: 16719},
																																							run: (*parser).callonFileInclusion42,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 515, col: 28, offset: 16719},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 517, col: 9, offset: 16773},
																																							run: (*parser).callonFileInclusion44,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 517, col: 9, offset: 16773},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 517, col: 9, offset: 16773},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 507, col: 78, offset: 16461},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 511, col: 25, offset: 16563},
																												run: (*parser).callonFileInclusion48,
																												expr: &seqExpr{
																													pos: position{line: 511, col: 25, offset: 16563},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 511, col: 25, offset: 16563},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 511, col: 38, offset: 16576},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 162, col: 18, offset: 4814},
																																run: (*parser).callonFileInclusion52,
																																expr: &seqExpr{
																																	pos: position{line: 162, col: 18, offset: 4814},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 162, col: 18, offset: 4814},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 162, col: 28, offset: 4824},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 162, col: 29, offset: 4825},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 511, col: 57, offset: 16595},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 511, col: 63, offset: 16601},
																																expr: &actionExpr{
																																	pos: position{line: 515, col: 17, offset: 16708},
																																	run: (*parser).callonFileInclusion59,
																																	expr: &seqExpr{
																																		pos: position{line: 515, col: 17, offset: 16708},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 515, col: 17, offset: 16708},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 515, col: 21, offset: 16712},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 515, col: 28, offset: 16719},
																																							run: (*parser).callonFileInclusion64,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 515, col: 28, offset: 16719},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 517, col: 9, offset: 16773},
																																							run: (*parser).callonFileInclusion66,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 517, col: 9, offset: 16773},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 517, col: 9, offset: 16773},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 511, col: 79, offset: 16617},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 500, col: 31, offset: 16063},
																												run: (*parser).callonFileInclusion70,
																												expr: &seqExpr{
																													pos: position{line: 500, col: 31, offset: 16063},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 500, col: 31, offset: 16063},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 500, col: 35, offset: 16067},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 162, col: 18, offset: 4814},
																																run: (*parser).callonFileInclusion74,
																																expr: &seqExpr{
																																	pos: position{line: 162, col: 18, offset: 4814},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 162, col: 18, offset: 4814},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 162, col: 28, offset: 4824},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 162, col: 29, offset: 4825},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 500, col: 54, offset: 16086},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2650, col: 5, offset: 88280},
																						run: (*parser).callonFileInclusion80,
																						expr: &seqExpr{
																							pos: position{line: 2650, col: 5, offset: 88280},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2650, col: 5, offset: 88280},
																									run: (*parser).callonFileInclusion82,
																								},
																								&labeledExpr{
																									pos:   position{line: 2653, col: 5, offset: 88351},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 2655, col: 9, offset: 88449},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2655, col: 9, offset: 88449},
																												run: (*parser).callonFileInclusion85,
																												expr: &choiceExpr{
																													pos: position{line: 535, col: 27, offset: 17427},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 535, col: 27, offset: 17427},
																															run: (*parser).callonFileInclusion87,
																															expr: &seqExpr{
																																pos: position{line: 535, col: 27, offset: 17427},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 535, col: 27, offset: 17427},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 535, col: 32, offset: 17432},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 2936, col: 7, offset: 97248},
																																			run: (*parser).callonFileInclusion91,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2936, col: 7, offset: 97248},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2936, col: 7, offset: 97248},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 535, col: 40, offset: 17440},
																																		expr: &actionExpr{
																																			pos: position{line: 2948, col: 10, offset: 97526},
																																			run: (*parser).callonFileInclusion95,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2948, col: 11, offset: 97527},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 535, col: 47, offset: 17447},
																																		val:        ",",
																																		ignoreCase: false,
																																		want:       "\",\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 535, col: 51, offset: 17451},
																																		label: "label",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 545, col: 24, offset: 17864},
																																			expr: &choiceExpr{
																																				pos: position{line: 546, col: 5, offset: 17870},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 546, col: 6, offset: 17871},
																																						run: (*parser).callonFileInclusion101,
																																						expr: &seqExpr{
																																							pos: position{line: 546, col: 6, offset: 17871},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 546, col: 6, offset: 17871},
																																									val:        "[0-9\\pL]",
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&oneOrMoreExpr{
																																									pos: position{line: 546, col: 14, offset: 17879},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 546, col: 14, offset: 17879},
																																										val:        "[^\\r\\n{<>]",
																																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 493, col: 5, offset: 15873},
																																						run: (*parser).callonFileInclusion106,
																																						expr: &seqExpr{
																																							pos: position{line: 493, col: 5, offset: 15873},
																																							exprs: []interface{}{
																																								&andCodeExpr{
																																									pos: position{line: 493, col: 5, offset: 15873},
																																									run: (*parser).callonFileInclusion108,
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 496, col: 5, offset: 15937},
																																									label: "element",
																																									expr: &choiceExpr{
																																										pos: position{line: 496, col: 14, offset: 15946},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 507, col: 25, offset: 16408},
																																												run: (*parser).callonFileInclusion111,
																																												expr: &seqExpr{
																																													pos: position{line: 507, col: 25, offset: 16408},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 507, col: 25, offset: 16408},
																																															val:        "{counter:",
																																															ignoreCase: false,
																																															want:       "\"{counter:\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 507, col: 37, offset: 16420},
																																															label: "name",
																																															expr: &actionExpr{
																																																pos: position{line: 162, col: 18, offset: 4814},
																																																run: (*parser).callonFileInclusion115,
																																																expr: &seqExpr{
																																																	pos: position{line: 162, col: 18, offset: 4814},
																																																	exprs: []interface{}{
																																																		&charClassMatcher{
																																																			pos:        position{line: 162, col: 18, offset: 4814},
																																																			val:        "[_0-9\\pL]",
																																																			chars:      []rune{'_'},
																																																			ranges:     []rune{'0', '9'},
																																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																		&zeroOrMoreExpr{
																																																			pos: position{line: 162, col: 28, offset: 4824},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 162, col: 29, offset: 4825},
																																																				val:        "[-0-9\\pL]",
																																																				chars:      []rune{'-'},
																																																				ranges:     []rune{'0', '9'},
																																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 507, col: 56, offset: 16439},
																																															label: "start",
																																															expr: &zeroOrOneExpr{
																																																pos: position{line: 507, col: 62, offset: 16445},
																																																expr: &actionExpr{
																																																	pos: position{line: 515, col: 17, offset: 16708},
																																																	run: (*parser).callonFileInclusion122,
																																																	expr: &seqExpr{
																																																		pos: position{line: 515, col: 17, offset: 16708},
																																																		exprs: []interface{}{
																																																			&litMatcher{
																																																				pos:        position{line: 515, col: 17, offset: 16708},
																																																				val:        ":",
																																																				ignoreCase: false,
																																																				want:       "\":\"",
																																																			},
																																																			&labeledExpr{
																																																				pos:   position{line: 515, col: 21, offset: 16712},
																																																				label: "start",
																																																				expr: &choiceExpr{
																																																					pos: position{line: 515, col: 28, offset: 16719},
																																																					alternatives: []interface{}{
																																																						&actionExpr{
																																																							pos: position{line: 515, col: 28, offset: 16719},
																																																							run: (*parser).callonFileInclusion127,
																																																							expr: &charClassMatcher{
																																																								pos:        position{line: 515, col: 28, offset: 16719},
																																																								val:        "[A-Za-z]",
																																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																								ignoreCase: false,
																																																								inverted:   false,
																																																							},
																																																						},
																																																						&actionExpr{
																																																							pos: position{line: 517, col: 9, offset: 16773},
																																																							run: (*parser).callonFileInclusion129,
																																																							expr: &oneOrMoreExpr{
																																																								pos: position{line: 517, col: 9, offset: 16773},
																																																								expr: &charClassMatcher{
																																																									pos:        position{line: 517, col: 9, offset: 16773},
																																																									val:        "[0-9]",
																																																									ranges:     []rune{'0', '9'},
																																																									ignoreCase: false,
																																																									inverted:   false,
																																																								},
																																																							},
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&litMatcher{
																																															pos:        position{line: 507, col: 78, offset: 16461},
																																															val:        "}",
																																															ignoreCase: false,
																																															want:       "\"}\"",
																																														},
																																													},
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 511, col: 25, offset: 16563},
																																												run: (*parser).callonFileInclusion133,
																																												expr: &seqExpr{
																																													pos: position{line: 511, col: 25, offset: 16563},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 511, col: 25, offset: 16563},
																																															val:        "{counter2:",
																																															ignoreCase: false,
																																															want:       "\"{counter2:\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 511, col: 38, offset: 16576},
																																															label: "name",
																																															expr: &actionExpr{
																																																pos: position{line: 162, col: 18, offset: 4814},
																																																run: (*parser).callonFileInclusion137,
																																																expr: &seqExpr{
																																																	pos: position{line: 162, col: 18, offset: 4814},
																																																	exprs: []interface{}{
																																																		&charClassMatcher{
																																																			pos:        position{line: 162, col: 18, offset: 4814},
																																																			val:        "[_0-9\\pL]",
																																																			chars:      []rune{'_'},
																																																			ranges:     []rune{'0', '9'},
																																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																		&zeroOrMoreExpr{
																																																			pos: position{line: 162, col: 28, offset: 4824},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 162, col: 29, offset: 4825},
																																																				val:        "[-0-9\\pL]",
																																																				chars:      []rune{'-'},
																																																				ranges:     []rune{'0', '9'},
																																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 511, col: 57, offset: 16595},
																																															label: "start",
																																															expr: &zeroOrOneExpr{
																																																pos: position{line: 511, col: 63, offset: 16601},
																																																expr: &actionExpr{
																																																	pos: position{line: 515, col: 17, offset: 16708},
																																																	run: (*parser).callonFileInclusion144,
																																																	expr: &seqExpr{
																																																		pos: position{line: 515, col: 17, offset: 16708},
																																																		exprs: []interface{}{
																																																			&litMatcher{
																																																				pos:        position{line: 515, col: 17, offset: 16708},
																																																				val:        ":",
																																																				ignoreCase: false,
																																																				want:       "\":\"",
																																																			},
																																																			&labeledExpr{
																																																				pos:   position{line: 515, col: 21, offset: 16712},
																																																				label: "start",
																																																				expr: &choiceExpr{
																																																					pos: position{line: 515, col: 28, offset: 16719},
																																																					alternatives: []interface{}{
																																																						&actionExpr{
																																																							pos: position{line: 515, col: 28, offset: 16719},
																																																							run: (*parser).callonFileInclusion149,
																																																							expr: &charClassMatcher{
																																																								pos:        position{line: 515, col: 28, offset: 16719},
																																																								val:        "[A-Za-z]",
																																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																								ignoreCase: false,
																																																								inverted:   false,
																																																							},
																																																						},
																																																						&actionExpr{
																																																							pos: position{line: 517, col: 9, offset: 16773},
																																																							run: (*parser).callonFileInclusion151,
																																																							expr: &oneOrMoreExpr{
																																																								pos: position{line: 517, col: 9, offset: 16773},
																																																								expr: &charClassMatcher{
																																																									pos:        position{line: 517, col: 9, offset: 16773},
																																																									val:        "[0-9]",
																																																									ranges:     []rune{'0', '9'},
																																																									ignoreCase: false,
																																																									inverted:   false,
																																																								},
																																																							},
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&litMatcher{
																																															pos:        position{line: 511, col: 79, offset: 16617},
																																															val:        "}",
																																															ignoreCase: false,
																																															want:       "\"}\"",
																																														},
																																													},
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 500, col: 31, offset: 16063},
																																												run: (*parser).callonFileInclusion155,
																																												expr: &seqExpr{
																																													pos: position{line: 500, col: 31, offset: 16063},
																																													exprs: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 500, col: 31, offset: 16063},
																																															val:        "{",
																																															ignoreCase: false,
																																															want:       "\"{\"",
																																														},
																																														&labeledExpr{
																																															pos:   position{line: 500, col: 35, offset: 16067},
																																															label: "name",
																																															expr: &actionExpr{
																																																pos: position{line: 162, col: 18, offset: 4814},
																																																run: (*parser).callonFileInclusion159,
																																																expr: &seqExpr{
																																																	pos: position{line: 162, col: 18, offset: 4814},
																																																	exprs: []interface{}{
																																																		&charClassMatcher{
																																																			pos:        position{line: 162, col: 18, offset: 4814},
																																																			val:        "[_0-9\\pL]",
																																																			chars:      []rune{'_'},
																																																			ranges:     []rune{'0', '9'},
																																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																																			ignoreCase: false,
																																																			inverted:   false,
																																																		},
																																																		&zeroOrMoreExpr{
																																																			pos: position{line: 162, col: 28, offset: 4824},
																																																			expr: &charClassMatcher{
																																																				pos:        position{line: 162, col: 29, offset: 4825},
																																																				val:        "[-0-9\\pL]",
																																																				chars:      []rune{'-'},
																																																				ranges:     []rune{'0', '9'},
																																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																																				ignoreCase: false,
																																																				inverted:   false,
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																														&litMatcher{
																																															pos:        position{line: 500, col: 54, offset: 16086},
																																															val:        "}",
																																															ignoreCase: false,
																																															want:       "\"}\"",
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 550, col: 8, offset: 18103},
																																						run: (*parser).callonFileInclusion165,
																																						expr: &litMatcher{
																																							pos:        position{line: 550, col: 8, offset: 18103},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 535, col: 79, offset: 17479},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 537, col: 9, offset: 17552},
																															run: (*parser).callonFileInclusion168,
																															expr: &seqExpr{
																																pos: position{line: 537, col: 9, offset: 17552},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 537, col: 9, offset: 17552},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 537, col: 14, offset: 17557},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 2936, col: 7, offset: 97248},
																																			run: (*parser).callonFileInclusion172,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2936, col: 7, offset: 97248},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2936, col: 7, offset: 97248},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 537, col: 22, offset: 17565},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2658, col: 11, offset: 88553},
																												run: (*parser).callonFileInclusion176,
																												expr: &charClassMatcher{
																													pos:        position{line: 2658, col: 12, offset: 88554},
																													val:        "[<>&]",
																													chars:      []rune{'<', '>', '&'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2928, col: 7, offset: 97032},
																						run: (*parser).callonFileInclusion178,
																						expr: &litMatcher{
																							pos:        position{line: 2928, col: 7, offset: 97032},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 991, col: 23, offset: 31326},
																	run: (*parser).callonFileInclusion180,
																	expr: &seqExpr{
																		pos: position{line: 991, col: 23, offset: 31326},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 989, col: 32, offset: 31294},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 991, col: 51, offset: 31354},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 991, col: 56, offset: 31359},
																					run: (*parser).callonFileInclusion184,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 991, col: 56, offset: 31359},
																						expr: &charClassMatcher{
																							pos:        position{line: 991, col: 56, offset: 31359},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 989, col: 32, offset: 31294},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 1022, col: 9, offset: 32434},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 1022, col: 27, offset: 32452},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1026, col: 5, offset: 32613},
							expr: &actionExpr{
								pos: position{line: 2948, col: 10, offset: 97526},
								run: (*parser).callonFileInclusion191,
								expr: &charClassMatcher{
									pos:        position{line: 2948, col: 11, offset: 97527},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2965, col: 8, offset: 97889},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2958, col: 12, offset: 97749},
									run: (*parser).callonFileInclusion194,
									expr: &choiceExpr{
										pos: position{line: 2958, col: 13, offset: 97750},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2958, col: 13, offset: 97750},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 20, offset: 97757},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 29, offset: 97766},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2962, col: 8, offset: 97839},
									expr: &anyMatcher{
										line: 2962, col: 9, offset: 97840,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 1033, col: 1, offset: 32746},
			expr: &actionExpr{
				pos: position{line: 1033, col: 15, offset: 32760},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 1033, col: 15, offset: 32760},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1033, col: 15, offset: 32760},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 1033, col: 22, offset: 32767},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1040, col: 23, offset: 32950},
										run: (*parser).callonLineRanges5,
										expr: &seqExpr{
											pos: position{line: 1040, col: 23, offset: 32950},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1040, col: 23, offset: 32950},
													label: "first",
													expr: &choiceExpr{
														pos: position{line: 1040, col: 30, offset: 32957},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1049, col: 19, offset: 33315},
																run: (*parser).callonLineRanges9,
																expr: &seqExpr{
																	pos: position{line: 1049, col: 19, offset: 33315},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1049, col: 19, offset: 33315},
																			label: "start",
																			expr: &actionExpr{
																				pos: position{line: 2944, col: 11, offset: 97450},
																				run: (*parser).callonLineRanges12,
																				expr: &seqExpr{
																					pos: position{line: 2944, col: 12, offset: 97451},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 2944, col: 12, offset: 97451},
																							expr: &litMatcher{
																								pos:        position{line: 2944, col: 12, offset: 97451},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2944, col: 17, offset: 97456},
																							expr: &actionExpr{
																								pos: position{line: 2940, col: 10, offset: 97390},
																								run: (*parser).callonLineRanges17,
																								expr: &charClassMatcher{
																									pos:        position{line: 2940, col: 10, offset: 97390},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 1049, col: 34, offset: 33330},
																			val:        "..",
																			ignoreCase: false,
																			want:       "\"..\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 1049, col: 39, offset: 33335},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 2944, col: 11, offset: 97450},
																				run: (*parser).callonLineRanges21,
																				expr: &seqExpr{
																					pos: position{line: 2944, col: 12, offset: 97451},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 2944, col: 12, offset: 97451},
																							expr: &litMatcher{
																								pos:        position{line: 2944, col: 12, offset: 97451},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2944, col: 17, offset: 97456},
																							expr: &actionExpr{
																								pos: position{line: 2940, col: 10, offset: 97390},
																								run: (*parser).callonLineRanges26,
																								expr: &charClassMatcher{
																									pos:        position{line: 2940, col: 10, offset: 97390},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1053, col: 20, offset: 33455},
																run: (*parser).callonLineRanges28,
																expr: &labeledExpr{
																	pos:   position{line: 1053, col: 20, offset: 33455},
																	label: "singleline",
																	expr: &actionExpr{
																		pos: position{line: 2944, col: 11, offset: 97450},
																		run: (*parser).callonLineRanges30,
																		expr: &seqExpr{
																			pos: position{line: 2944, col: 12, offset: 97451},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 2944, col: 12, offset: 97451},
																					expr: &litMatcher{
																						pos:        position{line: 2944, col: 12, offset: 97451},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2944, col: 17, offset: 97456},
																					expr: &actionExpr{
																						pos: position{line: 2940, col: 10, offset: 97390},
																						run: (*parser).callonLineRanges35,
																						expr: &charClassMatcher{
																							pos:        position{line: 2940, col: 10, offset: 97390},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1041, col: 5, offset: 32996},
													label: "others",
													expr: &oneOrMoreExpr{
														pos: position{line: 1041, col: 12, offset: 33003},
														expr: &actionExpr{
															pos: position{line: 1042, col: 9, offset: 33013},
															run: (*parser).callonLineRanges39,
															expr: &seqExpr{
																pos: position{line: 1042, col: 9, offset: 33013},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1042, col: 10, offset: 33014},
																		val:        "[,;]",
																		chars:      []rune{',', ';'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&labeledExpr{
																		pos:   position{line: 1043, col: 9, offset: 33131},
																		label: "other",
																		expr: &choiceExpr{
																			pos: position{line: 1043, col: 16, offset: 33138},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1049, col: 19, offset: 33315},
																					run: (*parser).callonLineRanges44,
																					expr: &seqExpr{
																						pos: position{line: 1049, col: 19, offset: 33315},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1049, col: 19, offset: 33315},
																								label: "start",
																								expr: &actionExpr{
																									pos: position{line: 2944, col: 11, offset: 97450},
																									run: (*parser).callonLineRanges47,
																									expr: &seqExpr{
																										pos: position{line: 2944, col: 12, offset: 97451},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 2944, col: 12, offset: 97451},
																												expr: &litMatcher{
																													pos:        position{line: 2944, col: 12, offset: 97451},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 2944, col: 17, offset: 97456},
																												expr: &actionExpr{
																													pos: position{line: 2940, col: 10, offset: 97390},
																													run: (*parser).callonLineRanges52,
																													expr: &charClassMatcher{
																														pos:        position{line: 2940, col: 10, offset: 97390},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 1049, col: 34, offset: 33330},
																								val:        "..",
																								ignoreCase: false,
																								want:       "\"..\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 1049, col: 39, offset: 33335},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 2944, col: 11, offset: 97450},
																									run: (*parser).callonLineRanges56,
																									expr: &seqExpr{
																										pos: position{line: 2944, col: 12, offset: 97451},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 2944, col: 12, offset: 97451},
																												expr: &litMatcher{
																													pos:        position{line: 2944, col: 12, offset: 97451},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 2944, col: 17, offset: 97456},
																												expr: &actionExpr{
																													pos: position{line: 2940, col: 10, offset: 97390},
																													run: (*parser).callonLineRanges61,
																													expr: &charClassMatcher{
																														pos:        position{line: 2940, col: 10, offset: 97390},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1053, col: 20, offset: 33455},
																					run: (*parser).callonLineRanges63,
																					expr: &labeledExpr{
																						pos:   position{line: 1053, col: 20, offset: 33455},
																						label: "singleline",
																						expr: &actionExpr{
																							pos: position{line: 2944, col: 11, offset: 97450},
																							run: (*parser).callonLineRanges65,
																							expr: &seqExpr{
																								pos: position{line: 2944, col: 12, offset: 97451},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 2944, col: 12, offset: 97451},
																										expr: &litMatcher{
																											pos:        position{line: 2944, col: 12, offset: 97451},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 2944, col: 17, offset: 97456},
																										expr: &actionExpr{
																											pos: position{line: 2940, col: 10, offset: 97390},
																											run: (*parser).callonLineRanges70,
																											expr: &charClassMatcher{
																												pos:        position{line: 2940, col: 10, offset: 97390},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1049, col: 19, offset: 33315},
										run: (*parser).callonLineRanges72,
										expr: &seqExpr{
											pos: position{line: 1049, col: 19, offset: 33315},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1049, col: 19, offset: 33315},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 2944, col: 11, offset: 97450},
														run: (*parser).callonLineRanges75,
														expr: &seqExpr{
															pos: position{line: 2944, col: 12, offset: 97451},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 2944, col: 12, offset: 97451},
																	expr: &litMatcher{
																		pos:        position{line: 2944, col: 12, offset: 97451},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 2944, col: 17, offset: 97456},
																	expr: &actionExpr{
																		pos: position{line: 2940, col: 10, offset: 97390},
																		run: (*parser).callonLineRanges80,
																		expr: &charClassMatcher{
																			pos:        position{line: 2940, col: 10, offset: 97390},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1049, col: 34, offset: 33330},
													val:        "..",
													ignoreCase: false,
													want:       "\"..\"",
												},
												&labeledExpr{
													pos:   position{line: 1049, col: 39, offset: 33335},
													label: "end",
													expr: &actionExpr{
														pos: position{line: 2944, col: 11, offset: 97450},
														run: (*parser).callonLineRanges84,
														expr: &seqExpr{
															pos: position{line: 2944, col: 12, offset: 97451},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 2944, col: 12, offset: 97451},
																	expr: &litMatcher{
																		pos:        position{line: 2944, col: 12, offset: 97451},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 2944, col: 17, offset: 97456},
																	expr: &actionExpr{
																		pos: position{line: 2940, col: 10, offset: 97390},
																		run: (*parser).callonLineRanges89,
																		expr: &charClassMatcher{
																			pos:        position{line: 2940, col: 10, offset: 97390},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1053, col: 20, offset: 33455},
										run: (*parser).callonLineRanges91,
										expr: &labeledExpr{
											pos:   position{line: 1053, col: 20, offset: 33455},
											label: "singleline",
											expr: &actionExpr{
												pos: position{line: 2944, col: 11, offset: 97450},
												run: (*parser).callonLineRanges93,
												expr: &seqExpr{
													pos: position{line: 2944, col: 12, offset: 97451},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 2944, col: 12, offset: 97451},
															expr: &litMatcher{
																pos:        position{line: 2944, col: 12, offset: 97451},
																val:        "-",
																ignoreCase: false,
																want:       "\"-\"",
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 2944, col: 17, offset: 97456},
															expr: &actionExpr{
																pos: position{line: 2940, col: 10, offset: 97390},
																run: (*parser).callonLineRanges98,
																expr: &charClassMatcher{
																	pos:        position{line: 2940, col: 10, offset: 97390},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2962, col: 8, offset: 97839},
							expr: &anyMatcher{
								line: 2962, col: 9, offset: 97840,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 1058, col: 1, offset: 33590},
			expr: &actionExpr{
				pos: position{line: 1058, col: 14, offset: 33603},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 1058, col: 14, offset: 33603},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1058, col: 14, offset: 33603},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 1062, col: 22, offset: 33740},
								run: (*parser).callonTagRanges4,
								expr: &seqExpr{
									pos: position{line: 1062, col: 22, offset: 33740},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1062, col: 22, offset: 33740},
											label: "first",
											expr: &choiceExpr{
												pos: position{line: 1071, col: 13, offset: 34050},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 1071, col: 13, offset: 34050},
														run: (*parser).callonTagRanges8,
														expr: &labeledExpr{
															pos:   position{line: 1071, col: 13, offset: 34050},
															label: "tag",
															expr: &choiceExpr{
																pos: position{line: 1071, col: 18, offset: 34055},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2864, col: 14, offset: 94885},
																		run: (*parser).callonTagRanges11,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2864, col: 14, offset: 94885},
																			expr: &charClassMatcher{
																				pos:        position{line: 2864, col: 14, offset: 94885},
																				val:        "[0-9\\pL]",
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1077, col: 16, offset: 34255},
																		run: (*parser).callonTagRanges14,
																		expr: &seqExpr{
																			pos: position{line: 1077, col: 16, offset: 34255},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1077, col: 16, offset: 34255},
																					label: "stars",
																					expr: &actionExpr{
																						pos: position{line: 1077, col: 23, offset: 34262},
																						run: (*parser).callonTagRanges17,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1077, col: 23, offset: 34262},
																							expr: &litMatcher{
																								pos:        position{line: 1077, col: 24, offset: 34263},
																								val:        "*",
																								ignoreCase: false,
																								want:       "\"*\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1080, col: 5, offset: 34317},
																					run: (*parser).callonTagRanges20,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1073, col: 9, offset: 34143},
														run: (*parser).callonTagRanges21,
														expr: &seqExpr{
															pos: position{line: 1073, col: 9, offset: 34143},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1073, col: 9, offset: 34143},
																	val:        "!",
																	ignoreCase: false,
																	want:       "\"!\"",
																},
																&labeledExpr{
																	pos:   position{line: 1073, col: 13, offset: 34147},
																	label: "tag",
																	expr: &choiceExpr{
																		pos: position{line: 1073, col: 18, offset: 34152},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2864, col: 14, offset: 94885},
																				run: (*parser).callonTagRanges26,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2864, col: 14, offset: 94885},
																					expr: &charClassMatcher{
																						pos:        position{line: 2864, col: 14, offset: 94885},
																						val:        "[0-9\\pL]",
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1077, col: 16, offset: 34255},
																				run: (*parser).callonTagRanges29,
																				expr: &seqExpr{
																					pos: position{line: 1077, col: 16, offset: 34255},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1077, col: 16, offset: 34255},
																							label: "stars",
																							expr: &actionExpr{
																								pos: position{line: 1077, col: 23, offset: 34262},
																								run: (*parser).callonTagRanges32,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1077, col: 23, offset: 34262},
																									expr: &litMatcher{
																										pos:        position{line: 1077, col: 24, offset: 34263},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1080, col: 5, offset: 34317},
																							run: (*parser).callonTagRanges35,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 1063, col: 5, offset: 33761},
											label: "others",
											expr: &zeroOrMoreExpr{
												pos: position{line: 1063, col: 12, offset: 33768},
												expr: &actionExpr{
													pos: position{line: 1064, col: 9, offset: 33778},
													run: (*parser).callonTagRanges38,
													expr: &seqExpr{
														pos: position{line: 1064, col: 9, offset: 33778},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 1064, col: 10, offset: 33779},
																val:        "[,;]",
																chars:      []rune{',', ';'},
																ignoreCase: false,
																inverted:   false,
															},
															&labeledExpr{
																pos:   position{line: 1065, col: 9, offset: 33896},
																label: "other",
																expr: &choiceExpr{
																	pos: position{line: 1071, col: 13, offset: 34050},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 1071, col: 13, offset: 34050},
																			run: (*parser).callonTagRanges43,
																			expr: &labeledExpr{
																				pos:   position{line: 1071, col: 13, offset: 34050},
																				label: "tag",
																				expr: &choiceExpr{
																					pos: position{line: 1071, col: 18, offset: 34055},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2864, col: 14, offset: 94885},
																							run: (*parser).callonTagRanges46,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2864, col: 14, offset: 94885},
																								expr: &charClassMatcher{
																									pos:        position{line: 2864, col: 14, offset: 94885},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 1077, col: 16, offset: 34255},
																							run: (*parser).callonTagRanges49,
																							expr: &seqExpr{
																								pos: position{line: 1077, col: 16, offset: 34255},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1077, col: 16, offset: 34255},
																										label: "stars",
																										expr: &actionExpr{
																											pos: position{line: 1077, col: 23, offset: 34262},
																											run: (*parser).callonTagRanges52,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1077, col: 23, offset: 34262},
																												expr: &litMatcher{
																													pos:        position{line: 1077, col: 24, offset: 34263},
																													val:        "*",
																													ignoreCase: false,
																													want:       "\"*\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 1080, col: 5, offset: 34317},
																										run: (*parser).callonTagRanges55,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1073, col: 9, offset: 34143},
																			run: (*parser).callonTagRanges56,
																			expr: &seqExpr{
																				pos: position{line: 1073, col: 9, offset: 34143},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 1073, col: 9, offset: 34143},
																						val:        "!",
																						ignoreCase: false,
																						want:       "\"!\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 1073, col: 13, offset: 34147},
																						label: "tag",
																						expr: &choiceExpr{
																							pos: position{line: 1073, col: 18, offset: 34152},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2864, col: 14, offset: 94885},
																									run: (*parser).callonTagRanges61,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2864, col: 14, offset: 94885},
																										expr: &charClassMatcher{
																											pos:        position{line: 2864, col: 14, offset: 94885},
																											val:        "[0-9\\pL]",
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1077, col: 16, offset: 34255},
																									run: (*parser).callonTagRanges64,
																									expr: &seqExpr{
																										pos: position{line: 1077, col: 16, offset: 34255},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 1077, col: 16, offset: 34255},
																												label: "stars",
																												expr: &actionExpr{
																													pos: position{line: 1077, col: 23, offset: 34262},
																													run: (*parser).callonTagRanges67,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1077, col: 23, offset: 34262},
																														expr: &litMatcher{
																															pos:        position{line: 1077, col: 24, offset: 34263},
																															val:        "*",
																															ignoreCase: false,
																															want:       "\"*\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 1080, col: 5, offset: 34317},
																												run: (*parser).callonTagRanges70,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2962, col: 8, offset: 97839},
							expr: &anyMatcher{
								line: 2962, col: 9, offset: 97840,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 1087, col: 1, offset: 34484},
			expr: &actionExpr{
				pos: position{line: 1087, col: 21, offset: 34504},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 1087, col: 21, offset: 34504},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1087, col: 21, offset: 34504},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1087, col: 29, offset: 34512},
								expr: &choiceExpr{
									pos: position{line: 1087, col: 30, offset: 34513},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 1091, col: 25, offset: 34693},
											run: (*parser).callonIncludedFileLine6,
											expr: &seqExpr{
												pos: position{line: 1091, col: 25, offset: 34693},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1091, col: 25, offset: 34693},
														val:        "tag::",
														ignoreCase: false,
														want:       "\"tag::\"",
													},
													&labeledExpr{
														pos:   position{line: 1091, col: 33, offset: 34701},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 1091, col: 38, offset: 34706},
															run: (*parser).callonIncludedFileLine10,
															expr: &actionExpr{
																pos: position{line: 2864, col: 14, offset: 94885},
																run: (*parser).callonIncludedFileLine11,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2864, col: 14, offset: 94885},
																	expr: &charClassMatcher{
																		pos:        position{line: 2864, col: 14, offset: 94885},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1091, col: 78, offset: 34746},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1095, col: 23, offset: 34841},
											run: (*parser).callonIncludedFileLine15,
											expr: &seqExpr{
												pos: position{line: 1095, col: 23, offset: 34841},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1095, col: 23, offset: 34841},
														val:        "end::",
														ignoreCase: false,
														want:       "\"end::\"",
													},
													&labeledExpr{
														pos:   position{line: 1095, col: 31, offset: 34849},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 1095, col: 36, offset: 34854},
															run: (*parser).callonIncludedFileLine19,
															expr: &actionExpr{
																pos: position{line: 2864, col: 14, offset: 94885},
																run: (*parser).callonIncludedFileLine20,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2864, col: 14, offset: 94885},
																	expr: &charClassMatcher{
																		pos:        position{line: 2864, col: 14, offset: 94885},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1095, col: 76, offset: 34894},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1087, col: 74, offset: 34557},
											run: (*parser).callonIncludedFileLine24,
											expr: &anyMatcher{
												line: 1087, col: 74, offset: 34557,
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2965, col: 8, offset: 97889},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2958, col: 12, offset: 97749},
									run: (*parser).callonIncludedFileLine27,
									expr: &choiceExpr{
										pos: position{line: 2958, col: 13, offset: 97750},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2958, col: 13, offset: 97750},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 20, offset: 97757},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 29, offset: 97766},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2962, col: 8, offset: 97839},
									expr: &anyMatcher{
										line: 2962, col: 9, offset: 97840,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1153, col: 1, offset: 36586},
			expr: &actionExpr{
				pos: position{line: 1154, col: 5, offset: 36609},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1154, col: 5, offset: 36609},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1155, col: 9, offset: 36627},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 2893, col: 5, offset: 95937},
								run: (*parser).callonInlineElement4,
								expr: &seqExpr{
									pos: position{line: 2893, col: 5, offset: 95937},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2893, col: 5, offset: 95937},
											expr: &charClassMatcher{
												pos:        position{line: 2893, col: 5, offset: 95937},
												val:        "[,;!?0-9\\pL]",
												chars:      []rune{',', ';', '!', '?'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2894, col: 6, offset: 95957},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2948, col: 10, offset: 97526},
													run: (*parser).callonInlineElement9,
													expr: &charClassMatcher{
														pos:        position{line: 2948, col: 11, offset: 97527},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2894, col: 14, offset: 95965},
													expr: &choiceExpr{
														pos: position{line: 2894, col: 16, offset: 95967},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2894, col: 16, offset: 95967},
																val:        "[.�]",
																chars:      []rune{'.', '�'},
																ignoreCase: false,
																inverted:   false,
															},
															&actionExpr{
																pos: position{line: 2958, col: 12, offset: 97749},
																run: (*parser).callonInlineElement14,
																expr: &choiceExpr{
																	pos: position{line: 2958, col: 13, offset: 97750},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2958, col: 13, offset: 97750},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 20, offset: 97757},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 29, offset: 97766},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2962, col: 8, offset: 97839},
																expr: &anyMatcher{
																	line: 2962, col: 9, offset: 97840,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2953, col: 11, offset: 97635},
								run: (*parser).callonInlineElement21,
								expr: &oneOrMoreExpr{
									pos: position{line: 2953, col: 11, offset: 97635},
									expr: &charClassMatcher{
										pos:        position{line: 2953, col: 12, offset: 97636},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
							&actionExpr{
								pos: position{line: 999, col: 5, offset: 31772},
								run: (*parser).callonInlineElement24,
								expr: &seqExpr{
									pos: position{line: 999, col: 5, offset: 31772},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 999, col: 5, offset: 31772},
											run: (*parser).callonInlineElement26,
										},
										&litMatcher{
											pos:        position{line: 1002, col: 5, offset: 31829},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1002, col: 9, offset: 31833},
											expr: &actionExpr{
												pos: position{line: 2948, col: 10, offset: 97526},
												run: (*parser).callonInlineElement29,
												expr: &charClassMatcher{
													pos:        position{line: 2948, col: 11, offset: 97527},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&andExpr{
											pos: position{line: 1002, col: 16, offset: 31840},
											expr: &choiceExpr{
												pos: position{line: 2965, col: 8, offset: 97889},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2958, col: 12, offset: 97749},
														run: (*parser).callonInlineElement33,
														expr: &choiceExpr{
															pos: position{line: 2958, col: 13, offset: 97750},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2958, col: 13, offset: 97750},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2958, col: 20, offset: 97757},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2958, col: 29, offset: 97766},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2962, col: 8, offset: 97839},
														expr: &anyMatcher{
															line: 2962, col: 9, offset: 97840,
														},
													},
												},
											},
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1158, col: 11, offset: 36726},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1158, col: 11, offset: 36726},
										expr: &choiceExpr{
											pos: position{line: 2965, col: 8, offset: 97889},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2958, col: 12, offset: 97749},
													run: (*parser).callonInlineElement43,
													expr: &choiceExpr{
														pos: position{line: 2958, col: 13, offset: 97750},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2958, col: 13, offset: 97750},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 20, offset: 97757},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 29, offset: 97766},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2962, col: 8, offset: 97839},
													expr: &anyMatcher{
														line: 2962, col: 9, offset: 97840,
													},
												},
											},
										},
									},
									&choiceExpr{
										pos: position{line: 1159, col: 13, offset: 36745},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2650, col: 5, offset: 88280},
												run: (*parser).callonInlineElement51,
												expr: &seqExpr{
													pos: position{line: 2650, col: 5, offset: 88280},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2650, col: 5, offset: 88280},
															run: (*parser).callonInlineElement53,
														},
														&labeledExpr{
															pos:   position{line: 2653, col: 5, offset: 88351},
															label: "element",
															expr: &choiceExpr{
																pos: position{line: 2655, col: 9, offset: 88449},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2655, col: 9, offset: 88449},
																		run: (*parser).callonInlineElement56,
																		expr: &choiceExpr{
																			pos: position{line: 535, col: 27, offset: 17427},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 535, col: 27, offset: 17427},
																					run: (*parser).callonInlineElement58,
																					expr: &seqExpr{
																						pos: position{line: 535, col: 27, offset: 17427},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 535, col: 27, offset: 17427},
																								val:        "<<",
																								ignoreCase: false,
																								want:       "\"<<\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 535, col: 32, offset: 17432},
																								label: "id",
																								expr: &actionExpr{
																									pos: position{line: 2936, col: 7, offset: 97248},
																									run: (*parser).callonInlineElement62,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2936, col: 7, offset: 97248},
																										expr: &charClassMatcher{
																											pos:        position{line: 2936, col: 7, offset: 97248},
																											val:        "[^[]<>,]",
																											chars:      []rune{'[', ']', '<', '>', ','},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 535, col: 40, offset: 17440},
																								expr: &actionExpr{
																									pos: position{line: 2948, col: 10, offset: 97526},
																									run: (*parser).callonInlineElement66,
																									expr: &charClassMatcher{
																										pos:        position{line: 2948, col: 11, offset: 97527},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 535, col: 47, offset: 17447},
																								val:        ",",
																								ignoreCase: false,
																								want:       "\",\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 535, col: 51, offset: 17451},
																								label: "label",
																								expr: &oneOrMoreExpr{
																									pos: position{line: 545, col: 24, offset: 17864},
																									expr: &choiceExpr{
																										pos: position{line: 546, col: 5, offset: 17870},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 546, col: 6, offset: 17871},
																												run: (*parser).callonInlineElement72,
																												expr: &seqExpr{
																													pos: position{line: 546, col: 6, offset: 17871},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 546, col: 6, offset: 17871},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&oneOrMoreExpr{
																															pos: position{line: 546, col: 14, offset: 17879},
																															expr: &charClassMatcher{
																																pos:        position{line: 546, col: 14, offset: 17879},
																																val:        "[^\\r\\n{<>]",
																																chars:      []rune{'\r', '\n', '{', '<', '>'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 493, col: 5, offset: 15873},
																												run: (*parser).callonInlineElement77,
																												expr: &seqExpr{
																													pos: position{line: 493, col: 5, offset: 15873},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 493, col: 5, offset: 15873},
																															run: (*parser).callonInlineElement79,
																														},
																														&labeledExpr{
																															pos:   position{line: 496, col: 5, offset: 15937},
																															label: "element",
																															expr: &choiceExpr{
																																pos: position{line: 496, col: 14, offset: 15946},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 507, col: 25, offset: 16408},
																																		run: (*parser).callonInlineElement82,
																																		expr: &seqExpr{
																																			pos: position{line: 507, col: 25, offset: 16408},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 507, col: 25, offset: 16408},
																																					val:        "{counter:",
																																					ignoreCase: false,
																																					want:       "\"{counter:\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 507, col: 37, offset: 16420},
																																					label: "name",
																																					expr: &actionExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						run: (*parser).callonInlineElement86,
																																						expr: &seqExpr{
																																							pos: position{line: 162, col: 18, offset: 4814},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 162, col: 18, offset: 4814},
																																									val:        "[_0-9\\pL]",
																																									chars:      []rune{'_'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&zeroOrMoreExpr{
																																									pos: position{line: 162, col: 28, offset: 4824},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 162, col: 29, offset: 4825},
																																										val:        "[-0-9\\pL]",
																																										chars:      []rune{'-'},
																																										ranges:     []rune{'0', '9'},
																																										classes:    []*unicode.RangeTable{rangeTable("L")},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 507, col: 56, offset: 16439},
																																					label: "start",
																																					expr: &zeroOrOneExpr{
																																						pos: position{line: 507, col: 62, offset: 16445},
																																						expr: &actionExpr{
																																							pos: position{line: 515, col: 17, offset: 16708},
																																							run: (*parser).callonInlineElement93,
																																							expr: &seqExpr{
																																								pos: position{line: 515, col: 17, offset: 16708},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 515, col: 17, offset: 16708},
																																										val:        ":",
																																										ignoreCase: false,
																																										want:       "\":\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 515, col: 21, offset: 16712},
																																										label: "start",
																																										expr: &choiceExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											alternatives: []interface{}{
																																												&actionExpr{
																																													pos: position{line: 515, col: 28, offset: 16719},
																																													run: (*parser).callonInlineElement98,
																																													expr: &charClassMatcher{
																																														pos:        position{line: 515, col: 28, offset: 16719},
																																														val:        "[A-Za-z]",
																																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																												&actionExpr{
																																													pos: position{line: 517, col: 9, offset: 16773},
																																													run: (*parser).callonInlineElement100,
																																													expr: &oneOrMoreExpr{
																																														pos: position{line: 517, col: 9, offset: 16773},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 517, col: 9, offset: 16773},
																																															val:        "[0-9]",
																																															ranges:     []rune{'0', '9'},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 507, col: 78, offset: 16461},
																																					val:        "}",
																																					ignoreCase: false,
																																					want:       "\"}\"",
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 511, col: 25, offset: 16563},
																																		run: (*parser).callonInlineElement104,
																																		expr: &seqExpr{
																																			pos: position{line: 511, col: 25, offset: 16563},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 511, col: 25, offset: 16563},
																																					val:        "{counter2:",
																																					ignoreCase: false,
																																					want:       "\"{counter2:\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 511, col: 38, offset: 16576},
																																					label: "name",
																																					expr: &actionExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						run: (*parser).callonInlineElement108,
																																						expr: &seqExpr{
																																							pos: position{line: 162, col: 18, offset: 4814},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 162, col: 18, offset: 4814},
																																									val:        "[_0-9\\pL]",
																																									chars:      []rune{'_'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&zeroOrMoreExpr{
																																									pos: position{line: 162, col: 28, offset: 4824},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 162, col: 29, offset: 4825},
																																										val:        "[-0-9\\pL]",
																																										chars:      []rune{'-'},
																																										ranges:     []rune{'0', '9'},
																																										classes:    []*unicode.RangeTable{rangeTable("L")},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 511, col: 57, offset: 16595},
																																					label: "start",
																																					expr: &zeroOrOneExpr{
																																						pos: position{line: 511, col: 63, offset: 16601},
																																						expr: &actionExpr{
																																							pos: position{line: 515, col: 17, offset: 16708},
																																							run: (*parser).callonInlineElement115,
																																							expr: &seqExpr{
																																								pos: position{line: 515, col: 17, offset: 16708},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 515, col: 17, offset: 16708},
																																										val:        ":",
																																										ignoreCase: false,
																																										want:       "\":\"",
																																									},
																																									&labeledExpr{
																																										pos:   position{line: 515, col: 21, offset: 16712},
																																										label: "start",
																																										expr: &choiceExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											alternatives: []interface{}{
																																												&actionExpr{
																																													pos: position{line: 515, col: 28, offset: 16719},
																																													run: (*parser).callonInlineElement120,
																																													expr: &charClassMatcher{
																																														pos:        position{line: 515, col: 28, offset: 16719},
																																														val:        "[A-Za-z]",
																																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																												&actionExpr{
																																													pos: position{line: 517, col: 9, offset: 16773},
																																													run: (*parser).callonInlineElement122,
																																													expr: &oneOrMoreExpr{
																																														pos: position{line: 517, col: 9, offset: 16773},
																																														expr: &charClassMatcher{
																																															pos:        position{line: 517, col: 9, offset: 16773},
																																															val:        "[0-9]",
																																															ranges:     []rune{'0', '9'},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 511, col: 79, offset: 16617},
																																					val:        "}",
																																					ignoreCase: false,
																																					want:       "\"}\"",
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 500, col: 31, offset: 16063},
																																		run: (*parser).callonInlineElement126,
																																		expr: &seqExpr{
																																			pos: position{line: 500, col: 31, offset: 16063},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 500, col: 31, offset: 16063},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 500, col: 35, offset: 16067},
																																					label: "name",
																																					expr: &actionExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						run: (*parser).callonInlineElement130,
																																						expr: &seqExpr{
																																							pos: position{line: 162, col: 18, offset: 4814},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 162, col: 18, offset: 4814},
																																									val:        "[_0-9\\pL]",
																																									chars:      []rune{'_'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&zeroOrMoreExpr{
																																									pos: position{line: 162, col: 28, offset: 4824},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 162, col: 29, offset: 4825},
																																										val:        "[-0-9\\pL]",
																																										chars:      []rune{'-'},
																																										ranges:     []rune{'0', '9'},
																																										classes:    []*unicode.RangeTable{rangeTable("L")},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 500, col: 54, offset: 16086},
																																					val:        "}",
																																					ignoreCase: false,
																																					want:       "\"}\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 550, col: 8, offset: 18103},
																												run: (*parser).callonInlineElement136,
																												expr: &litMatcher{
																													pos:        position{line: 550, col: 8, offset: 18103},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 535, col: 79, offset: 17479},
																								val:        ">>",
																								ignoreCase: false,
																								want:       "\">>\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 537, col: 9, offset: 17552},
																					run: (*parser).callonInlineElement139,
																					expr: &seqExpr{
																						pos: position{line: 537, col: 9, offset: 17552},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 537, col: 9, offset: 17552},
																								val:        "<<",
																								ignoreCase: false,
																								want:       "\"<<\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 537, col: 14, offset: 17557},
																								label: "id",
																								expr: &actionExpr{
																									pos: position{line: 2936, col: 7, offset: 97248},
																									run: (*parser).callonInlineElement143,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2936, col: 7, offset: 97248},
																										expr: &charClassMatcher{
																											pos:        position{line: 2936, col: 7, offset: 97248},
																											val:        "[^[]<>,]",
																											chars:      []rune{'[', ']', '<', '>', ','},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 537, col: 22, offset: 17565},
																								val:        ">>",
																								ignoreCase: false,
																								want:       "\">>\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2658, col: 11, offset: 88553},
																		run: (*parser).callonInlineElement147,
																		expr: &charClassMatcher{
																			pos:        position{line: 2658, col: 12, offset: 88554},
																			val:        "[<>&]",
																			chars:      []rune{'<', '>', '&'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1160, col: 15, offset: 36776},
												name: "Quote",
											},
											&actionExpr{
												pos: position{line: 493, col: 5, offset: 15873},
												run: (*parser).callonInlineElement150,
												expr: &seqExpr{
													pos: position{line: 493, col: 5, offset: 15873},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 493, col: 5, offset: 15873},
															run: (*parser).callonInlineElement152,
														},
														&labeledExpr{
															pos:   position{line: 496, col: 5, offset: 15937},
															label: "element",
															expr: &choiceExpr{
																pos: position{line: 496, col: 14, offset: 15946},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 507, col: 25, offset: 16408},
																		run: (*parser).callonInlineElement155,
																		expr: &seqExpr{
																			pos: position{line: 507, col: 25, offset: 16408},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 507, col: 25, offset: 16408},
																					val:        "{counter:",
																					ignoreCase: false,
																					want:       "\"{counter:\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 507, col: 37, offset: 16420},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 162, col: 18, offset: 4814},
																						run: (*parser).callonInlineElement159,
																						expr: &seqExpr{
																							pos: position{line: 162, col: 18, offset: 4814},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 162, col: 18, offset: 4814},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 162, col: 28, offset: 4824},
																									expr: &charClassMatcher{
																										pos:        position{line: 162, col: 29, offset: 4825},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 507, col: 56, offset: 16439},
																					label: "start",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 507, col: 62, offset: 16445},
																						expr: &actionExpr{
																							pos: position{line: 515, col: 17, offset: 16708},
																							run: (*parser).callonInlineElement166,
																							expr: &seqExpr{
																								pos: position{line: 515, col: 17, offset: 16708},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 515, col: 17, offset: 16708},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 515, col: 21, offset: 16712},
																										label: "start",
																										expr: &choiceExpr{
																											pos: position{line: 515, col: 28, offset: 16719},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 515, col: 28, offset: 16719},
																													run: (*parser).callonInlineElement171,
																													expr: &charClassMatcher{
																														pos:        position{line: 515, col: 28, offset: 16719},
																														val:        "[A-Za-z]",
																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&actionExpr{
																													pos: position{line: 517, col: 9, offset: 16773},
																													run: (*parser).callonInlineElement173,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 517, col: 9, offset: 16773},
																														expr: &charClassMatcher{
																															pos:        position{line: 517, col: 9, offset: 16773},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 507, col: 78, offset: 16461},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 511, col: 25, offset: 16563},
																		run: (*parser).callonInlineElement177,
																		expr: &seqExpr{
																			pos: position{line: 511, col: 25, offset: 16563},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 511, col: 25, offset: 16563},
																					val:        "{counter2:",
																					ignoreCase: false,
																					want:       "\"{counter2:\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 511, col: 38, offset: 16576},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 162, col: 18, offset: 4814},
																						run: (*parser).callonInlineElement181,
																						expr: &seqExpr{
																							pos: position{line: 162, col: 18, offset: 4814},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 162, col: 18, offset: 4814},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 162, col: 28, offset: 4824},
																									expr: &charClassMatcher{
																										pos:        position{line: 162, col: 29, offset: 4825},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 511, col: 57, offset: 16595},
																					label: "start",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 511, col: 63, offset: 16601},
																						expr: &actionExpr{
																							pos: position{line: 515, col: 17, offset: 16708},
																							run: (*parser).callonInlineElement188,
																							expr: &seqExpr{
																								pos: position{line: 515, col: 17, offset: 16708},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 515, col: 17, offset: 16708},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 515, col: 21, offset: 16712},
																										label: "start",
																										expr: &choiceExpr{
																											pos: position{line: 515, col: 28, offset: 16719},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 515, col: 28, offset: 16719},
																													run: (*parser).callonInlineElement193,
																													expr: &charClassMatcher{
																														pos:        position{line: 515, col: 28, offset: 16719},
																														val:        "[A-Za-z]",
																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&actionExpr{
																													pos: position{line: 517, col: 9, offset: 16773},
																													run: (*parser).callonInlineElement195,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 517, col: 9, offset: 16773},
																														expr: &charClassMatcher{
																															pos:        position{line: 517, col: 9, offset: 16773},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 511, col: 79, offset: 16617},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 500, col: 31, offset: 16063},
																		run: (*parser).callonInlineElement199,
																		expr: &seqExpr{
																			pos: position{line: 500, col: 31, offset: 16063},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 500, col: 31, offset: 16063},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 500, col: 35, offset: 16067},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 162, col: 18, offset: 4814},
																						run: (*parser).callonInlineElement203,
																						expr: &seqExpr{
																							pos: position{line: 162, col: 18, offset: 4814},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 162, col: 18, offset: 4814},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 162, col: 28, offset: 4824},
																									expr: &charClassMatcher{
																										pos:        position{line: 162, col: 29, offset: 4825},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 500, col: 54, offset: 16086},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1162, col: 15, offset: 36833},
												name: "InlineMacro",
											},
											&actionExpr{
												pos: position{line: 2683, col: 15, offset: 89521},
												run: (*parser).callonInlineElement210,
												expr: &litMatcher{
													pos:        position{line: 2683, col: 15, offset: 89521},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
											&actionExpr{
												pos: position{line: 2689, col: 14, offset: 89636},
												run: (*parser).callonInlineElement212,
												expr: &litMatcher{
													pos:        position{line: 2689, col: 14, offset: 89636},
													val:        "(C)",
													ignoreCase: false,
													want:       "\"(C)\"",
												},
											},
											&actionExpr{
												pos: position{line: 2693, col: 14, offset: 89712},
												run: (*parser).callonInlineElement214,
												expr: &litMatcher{
													pos:        position{line: 2693, col: 14, offset: 89712},
													val:        "(TM)",
													ignoreCase: false,
													want:       "\"(TM)\"",
												},
											},
											&actionExpr{
												pos: position{line: 2697, col: 15, offset: 89790},
												run: (*parser).callonInlineElement216,
												expr: &litMatcher{
													pos:        position{line: 2697, col: 15, offset: 89790},
													val:        "(R)",
													ignoreCase: false,
													want:       "\"(R)\"",
												},
											},
											&actionExpr{
												pos: position{line: 2701, col: 13, offset: 89865},
												run: (*parser).callonInlineElement218,
												expr: &litMatcher{
													pos:        position{line: 2701, col: 13, offset: 89865},
													val:        "...",
													ignoreCase: false,
													want:       "\"...\"",
												},
											},
											&actionExpr{
												pos: position{line: 2709, col: 22, offset: 90171},
												run: (*parser).callonInlineElement220,
												expr: &seqExpr{
													pos: position{line: 2709, col: 22, offset: 90171},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2860, col: 13, offset: 94811},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
														&litMatcher{
															pos:        position{line: 2709, col: 31, offset: 90180},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
														&andExpr{
															pos: position{line: 2709, col: 35, offset: 90184},
															expr: &charClassMatcher{
																pos:        position{line: 2709, col: 36, offset: 90185},
																val:        "[\\pL]",
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 991, col: 23, offset: 31326},
												run: (*parser).callonInlineElement226,
												expr: &seqExpr{
													pos: position{line: 991, col: 23, offset: 31326},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 989, col: 32, offset: 31294},
															val:        "�",
															ignoreCase: false,
															want:       "\"�\"",
														},
														&labeledExpr{
															pos:   position{line: 991, col: 51, offset: 31354},
															label: "ref",
															expr: &actionExpr{
																pos: position{line: 991, col: 56, offset: 31359},
																run: (*parser).callonInlineElement230,
																expr: &oneOrMoreExpr{
																	pos: position{line: 991, col: 56, offset: 31359},
																	expr: &charClassMatcher{
																		pos:        position{line: 991, col: 56, offset: 31359},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 989, col: 32, offset: 31294},
															val:        "�",
															ignoreCase: false,
															want:       "\"�\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2905, col: 12, offset: 96299},
												run: (*parser).callonInlineElement234,
												expr: &anyMatcher{
													line: 2905, col: 12, offset: 96299,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1181, col: 1, offset: 37618},
			expr: &actionExpr{
				pos: position{line: 1181, col: 14, offset: 37631},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1181, col: 14, offset: 37631},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1181, col: 14, offset: 37631},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1181, col: 19, offset: 37636},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1181, col: 25, offset: 37642},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1181, col: 43, offset: 37660},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1185, col: 1, offset: 37729},
			expr: &actionExpr{
				pos: position{line: 1185, col: 21, offset: 37749},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1185, col: 21, offset: 37749},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1185, col: 30, offset: 37758},
						expr: &choiceExpr{
							pos: position{line: 1185, col: 31, offset: 37759},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2872, col: 5, offset: 95266},
									run: (*parser).callonIndexTermContent5,
									expr: &seqExpr{
										pos: position{line: 2872, col: 5, offset: 95266},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2872, col: 5, offset: 95266},
												expr: &charClassMatcher{
													pos:        position{line: 2872, col: 5, offset: 95266},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2872, col: 15, offset: 95276},
												expr: &choiceExpr{
													pos: position{line: 2872, col: 17, offset: 95278},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2872, col: 17, offset: 95278},
															val:        "[\\r\\n ,]]",
															chars:      []rune{'\r', '\n', ' ', ',', ']'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2874, col: 9, offset: 95360},
									run: (*parser).callonIndexTermContent14,
									expr: &seqExpr{
										pos: position{line: 2874, col: 9, offset: 95360},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2874, col: 9, offset: 95360},
												expr: &charClassMatcher{
													pos:        position{line: 2874, col: 9, offset: 95360},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 2874, col: 19, offset: 95370},
												expr: &seqExpr{
													pos: position{line: 2874, col: 20, offset: 95371},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2874, col: 20, offset: 95371},
															val:        "[=*_`]",
															chars:      []rune{'=', '*', '_', '`'},
															ignoreCase: false,
															inverted:   false,
														},
														&oneOrMoreExpr{
															pos: position{line: 2874, col: 27, offset: 95378},
															expr: &charClassMatcher{
																pos:        position{line: 2874, col: 27, offset: 95378},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1185, col: 38, offset: 37766},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1185, col: 53, offset: 37781},
									name: "QuotedText",
								},
								&actionExpr{
									pos: position{line: 2948, col: 10, offset: 97526},
									run: (*parser).callonIndexTermContent25,
									expr: &charClassMatcher{
										pos:        position{line: 2948, col: 11, offset: 97527},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&actionExpr{
									pos: position{line: 2650, col: 5, offset: 88280},
									run: (*parser).callonIndexTermContent27,
									expr: &seqExpr{
										pos: position{line: 2650, col: 5, offset: 88280},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 2650, col: 5, offset: 88280},
												run: (*parser).callonIndexTermContent29,
											},
											&labeledExpr{
												pos:   position{line: 2653, col: 5, offset: 88351},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 2655, col: 9, offset: 88449},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2655, col: 9, offset: 88449},
															run: (*parser).callonIndexTermContent32,
															expr: &choiceExpr{
																pos: position{line: 535, col: 27, offset: 17427},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 535, col: 27, offset: 17427},
																		run: (*parser).callonIndexTermContent34,
																		expr: &seqExpr{
																			pos: position{line: 535, col: 27, offset: 17427},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 535, col: 27, offset: 17427},
																					val:        "<<",
																					ignoreCase: false,
																					want:       "\"<<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 535, col: 32, offset: 17432},
																					label: "id",
																					expr: &actionExpr{
																						pos: position{line: 2936, col: 7, offset: 97248},
																						run: (*parser).callonIndexTermContent38,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2936, col: 7, offset: 97248},
																							expr: &charClassMatcher{
																								pos:        position{line: 2936, col: 7, offset: 97248},
																								val:        "[^[]<>,]",
																								chars:      []rune{'[', ']', '<', '>', ','},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 535, col: 40, offset: 17440},
																					expr: &actionExpr{
																						pos: position{line: 2948, col: 10, offset: 97526},
																						run: (*parser).callonIndexTermContent42,
																						expr: &charClassMatcher{
																							pos:        position{line: 2948, col: 11, offset: 97527},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 535, col: 47, offset: 17447},
																					val:        ",",
																					ignoreCase: false,
																					want:       "\",\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 535, col: 51, offset: 17451},
																					label: "label",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 545, col: 24, offset: 17864},
																						expr: &choiceExpr{
																							pos: position{line: 546, col: 5, offset: 17870},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 546, col: 6, offset: 17871},
																									run: (*parser).callonIndexTermContent48,
																									expr: &seqExpr{
																										pos: position{line: 546, col: 6, offset: 17871},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 546, col: 6, offset: 17871},
																												val:        "[0-9\\pL]",
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 546, col: 14, offset: 17879},
																												expr: &charClassMatcher{
																													pos:        position{line: 546, col: 14, offset: 17879},
																													val:        "[^\\r\\n{<>]",
																													chars:      []rune{'\r', '\n', '{', '<', '>'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 493, col: 5, offset: 15873},
																									run: (*parser).callonIndexTermContent53,
																									expr: &seqExpr{
																										pos: position{line: 493, col: 5, offset: 15873},
																										exprs: []interface{}{
																											&andCodeExpr{
																												pos: position{line: 493, col: 5, offset: 15873},
																												run: (*parser).callonIndexTermContent55,
																											},
																											&labeledExpr{
																												pos:   position{line: 496, col: 5, offset: 15937},
																												label: "element",
																												expr: &choiceExpr{
																													pos: position{line: 496, col: 14, offset: 15946},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 507, col: 25, offset: 16408},
																															run: (*parser).callonIndexTermContent58,
																															expr: &seqExpr{
																																pos: position{line: 507, col: 25, offset: 16408},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 507, col: 25, offset: 16408},
																																		val:        "{counter:",
																																		ignoreCase: false,
																																		want:       "\"{counter:\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 507, col: 37, offset: 16420},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 162, col: 18, offset: 4814},
																																			run: (*parser).callonIndexTermContent62,
																																			expr: &seqExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 162, col: 18, offset: 4814},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 162, col: 28, offset: 4824},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 162, col: 29, offset: 4825},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 507, col: 56, offset: 16439},
																																		label: "start",
																																		expr: &zeroOrOneExpr{
																																			pos: position{line: 507, col: 62, offset: 16445},
																																			expr: &actionExpr{
																																				pos: position{line: 515, col: 17, offset: 16708},
																																				run: (*parser).callonIndexTermContent69,
																																				expr: &seqExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 515, col: 17, offset: 16708},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 515, col: 21, offset: 16712},
																																							label: "start",
																																							expr: &choiceExpr{
																																								pos: position{line: 515, col: 28, offset: 16719},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 515, col: 28, offset: 16719},
																																										run: (*parser).callonIndexTermContent74,
																																										expr: &charClassMatcher{
																																											pos:        position{line: 515, col: 28, offset: 16719},
																																											val:        "[A-Za-z]",
																																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 517, col: 9, offset: 16773},
																																										run: (*parser).callonIndexTermContent76,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 517, col: 9, offset: 16773},
																																												val:        "[0-9]",
																																												ranges:     []rune{'0', '9'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 507, col: 78, offset: 16461},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 511, col: 25, offset: 16563},
																															run: (*parser).callonIndexTermContent80,
																															expr: &seqExpr{
																																pos: position{line: 511, col: 25, offset: 16563},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 511, col: 25, offset: 16563},
																																		val:        "{counter2:",
																																		ignoreCase: false,
																																		want:       "\"{counter2:\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 511, col: 38, offset: 16576},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 162, col: 18, offset: 4814},
																																			run: (*parser).callonIndexTermContent84,
																																			expr: &seqExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 162, col: 18, offset: 4814},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 162, col: 28, offset: 4824},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 162, col: 29, offset: 4825},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 511, col: 57, offset: 16595},
																																		label: "start",
																																		expr: &zeroOrOneExpr{
																																			pos: position{line: 511, col: 63, offset: 16601},
																																			expr: &actionExpr{
																																				pos: position{line: 515, col: 17, offset: 16708},
																																				run: (*parser).callonIndexTermContent91,
																																				expr: &seqExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 515, col: 17, offset: 16708},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 515, col: 21, offset: 16712},
																																							label: "start",
																																							expr: &choiceExpr{
																																								pos: position{line: 515, col: 28, offset: 16719},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 515, col: 28, offset: 16719},
																																										run: (*parser).callonIndexTermContent96,
																																										expr: &charClassMatcher{
																																											pos:        position{line: 515, col: 28, offset: 16719},
																																											val:        "[A-Za-z]",
																																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 517, col: 9, offset: 16773},
																																										run: (*parser).callonIndexTermContent98,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 517, col: 9, offset: 16773},
																																												val:        "[0-9]",
																																												ranges:     []rune{'0', '9'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 511, col: 79, offset: 16617},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 500, col: 31, offset: 16063},
																															run: (*parser).callonIndexTermContent102,
																															expr: &seqExpr{
																																pos: position{line: 500, col: 31, offset: 16063},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 500, col: 31, offset: 16063},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 500, col: 35, offset: 16067},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 162, col: 18, offset: 4814},
																																			run: (*parser).callonIndexTermContent106,
																																			expr: &seqExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 162, col: 18, offset: 4814},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 162, col: 28, offset: 4824},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 162, col: 29, offset: 4825},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 500, col: 54, offset: 16086},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 550, col: 8, offset: 18103},
																									run: (*parser).callonIndexTermContent112,
																									expr: &litMatcher{
																										pos:        position{line: 550, col: 8, offset: 18103},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 535, col: 79, offset: 17479},
																					val:        ">>",
																					ignoreCase: false,
																					want:       "\">>\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 537, col: 9, offset: 17552},
																		run: (*parser).callonIndexTermContent115,
																		expr: &seqExpr{
																			pos: position{line: 537, col: 9, offset: 17552},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 537, col: 9, offset: 17552},
																					val:        "<<",
																					ignoreCase: false,
																					want:       "\"<<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 537, col: 14, offset: 17557},
																					label: "id",
																					expr: &actionExpr{
																						pos: position{line: 2936, col: 7, offset: 97248},
																						run: (*parser).callonIndexTermContent119,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2936, col: 7, offset: 97248},
																							expr: &charClassMatcher{
																								pos:        position{line: 2936, col: 7, offset: 97248},
																								val:        "[^[]<>,]",
																								chars:      []rune{'[', ']', '<', '>', ','},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 537, col: 22, offset: 17565},
																					val:        ">>",
																					ignoreCase: false,
																					want:       "\">>\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2658, col: 11, offset: 88553},
															run: (*parser).callonIndexTermContent123,
															expr: &charClassMatcher{
																pos:        position{line: 2658, col: 12, offset: 88554},
																val:        "[<>&]",
																chars:      []rune{'<', '>', '&'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 991, col: 23, offset: 31326},
									run: (*parser).callonIndexTermContent125,
									expr: &seqExpr{
										pos: position{line: 991, col: 23, offset: 31326},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 989, col: 32, offset: 31294},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 991, col: 51, offset: 31354},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 991, col: 56, offset: 31359},
													run: (*parser).callonIndexTermContent129,
													expr: &oneOrMoreExpr{
														pos: position{line: 991, col: 56, offset: 31359},
														expr: &charClassMatcher{
															pos:        position{line: 991, col: 56, offset: 31359},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 989, col: 32, offset: 31294},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1185, col: 114, offset: 37842},
									run: (*parser).callonIndexTermContent133,
									expr: &seqExpr{
										pos: position{line: 1185, col: 115, offset: 37843},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1185, col: 115, offset: 37843},
												expr: &litMatcher{
													pos:        position{line: 1185, col: 116, offset: 37844},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1185, col: 121, offset: 37849,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1205, col: 1, offset: 38558},
			expr: &actionExpr{
				pos: position{line: 1206, col: 5, offset: 38577},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1206, col: 5, offset: 38577},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1206, col: 5, offset: 38577},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 1210, col: 5, offset: 38729},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1210, col: 15, offset: 38739},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 2913, col: 13, offset: 96500},
								run: (*parser).callonImageBlock6,
								expr: &seqExpr{
									pos: position{line: 2913, col: 13, offset: 96500},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2913, col: 13, offset: 96500},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2913, col: 20, offset: 96507},
												expr: &choiceExpr{
													pos: position{line: 2934, col: 11, offset: 97184},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2934, col: 11, offset: 97184},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 2934, col: 23, offset: 97196},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 2934, col: 36, offset: 97209},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 2934, col: 47, offset: 97220},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 2934, col: 58, offset: 97231},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2913, col: 30, offset: 96517},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2913, col: 35, offset: 96522},
												expr: &choiceExpr{
													pos: position{line: 2913, col: 36, offset: 96523},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2921, col: 13, offset: 96792},
															run: (*parser).callonImageBlock19,
															expr: &labeledExpr{
																pos:   position{line: 2921, col: 13, offset: 96792},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2921, col: 22, offset: 96801},
																	expr: &choiceExpr{
																		pos: position{line: 2922, col: 5, offset: 96807},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2922, col: 5, offset: 96807},
																				run: (*parser).callonImageBlock23,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2922, col: 5, offset: 96807},
																					expr: &charClassMatcher{
																						pos:        position{line: 2922, col: 6, offset: 96808},
																						val:        "[^\\r\\n[]�&<>{ ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 493, col: 5, offset: 15873},
																				run: (*parser).callonImageBlock26,
																				expr: &seqExpr{
																					pos: position{line: 493, col: 5, offset: 15873},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 493, col: 5, offset: 15873},
																							run: (*parser).callonImageBlock28,
																						},
																						&labeledExpr{
																							pos:   position{line: 496, col: 5, offset: 15937},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 496, col: 14, offset: 15946},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 507, col: 25, offset: 16408},
																										run: (*parser).callonImageBlock31,
																										expr: &seqExpr{
																											pos: position{line: 507, col: 25, offset: 16408},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 507, col: 25, offset: 16408},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 507, col: 37, offset: 16420},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														run: (*parser).callonImageBlock35,
																														expr: &seqExpr{
																															pos: position{line: 162, col: 18, offset: 4814},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 162, col: 18, offset: 4814},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 162, col: 28, offset: 4824},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 162, col: 29, offset: 4825},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 507, col: 56, offset: 16439},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 507, col: 62, offset: 16445},
																														expr: &actionExpr{
																															pos: position{line: 515, col: 17, offset: 16708},
																															run: (*parser).callonImageBlock42,
																															expr: &seqExpr{
																																pos: position{line: 515, col: 17, offset: 16708},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 515, col: 17, offset: 16708},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 515, col: 21, offset: 16712},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 515, col: 28, offset: 16719},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					run: (*parser).callonImageBlock47,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 515, col: 28, offset: 16719},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 517, col: 9, offset: 16773},
																																					run: (*parser).callonImageBlock49,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 517, col: 9, offset: 16773},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 517, col: 9, offset: 16773},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 507, col: 78, offset: 16461},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 511, col: 25, offset: 16563},
																										run: (*parser).callonImageBlock53,
																										expr: &seqExpr{
																											pos: position{line: 511, col: 25, offset: 16563},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 511, col: 25, offset: 16563},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 511, col: 38, offset: 16576},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														run: (*parser).callonImageBlock57,
																														expr: &seqExpr{
																															pos: position{line: 162, col: 18, offset: 4814},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 162, col: 18, offset: 4814},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 162, col: 28, offset: 4824},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 162, col: 29, offset: 4825},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 511, col: 57, offset: 16595},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 511, col: 63, offset: 16601},
																														expr: &actionExpr{
																															pos: position{line: 515, col: 17, offset: 16708},
																															run: (*parser).callonImageBlock64,
																															expr: &seqExpr{
																																pos: position{line: 515, col: 17, offset: 16708},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 515, col: 17, offset: 16708},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 515, col: 21, offset: 16712},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 515, col: 28, offset: 16719},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					run: (*parser).callonImageBlock69,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 515, col: 28, offset: 16719},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 517, col: 9, offset: 16773},
																																					run: (*parser).callonImageBlock71,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 517, col: 9, offset: 16773},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 517, col: 9, offset: 16773},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 511, col: 79, offset: 16617},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 500, col: 31, offset: 16063},
																										run: (*parser).callonImageBlock75,
																										expr: &seqExpr{
																											pos: position{line: 500, col: 31, offset: 16063},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 500, col: 31, offset: 16063},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 500, col: 35, offset: 16067},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														run: (*parser).callonImageBlock79,
																														expr: &seqExpr{
																															pos: position{line: 162, col: 18, offset: 4814},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 162, col: 18, offset: 4814},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 162, col: 28, offset: 4824},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 162, col: 29, offset: 4825},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 500, col: 54, offset: 16086},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2650, col: 5, offset: 88280},
																				run: (*parser).callonImageBlock85,
																				expr: &seqExpr{
																					pos: position{line: 2650, col: 5, offset: 88280},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2650, col: 5, offset: 88280},
																							run: (*parser).callonImageBlock87,
																						},
																						&labeledExpr{
																							pos:   position{line: 2653, col: 5, offset: 88351},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 2655, col: 9, offset: 88449},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2655, col: 9, offset: 88449},
																										run: (*parser).callonImageBlock90,
																										expr: &choiceExpr{
																											pos: position{line: 535, col: 27, offset: 17427},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 535, col: 27, offset: 17427},
																													run: (*parser).callonImageBlock92,
																													expr: &seqExpr{
																														pos: position{line: 535, col: 27, offset: 17427},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 535, col: 27, offset: 17427},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 535, col: 32, offset: 17432},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2936, col: 7, offset: 97248},
																																	run: (*parser).callonImageBlock96,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2936, col: 7, offset: 97248},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2936, col: 7, offset: 97248},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 535, col: 40, offset: 17440},
																																expr: &actionExpr{
																																	pos: position{line: 2948, col: 10, offset: 97526},
																																	run: (*parser).callonImageBlock100,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2948, col: 11, offset: 97527},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 535, col: 47, offset: 17447},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 535, col: 51, offset: 17451},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 545, col: 24, offset: 17864},
																																	expr: &choiceExpr{
																																		pos: position{line: 546, col: 5, offset: 17870},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 546, col: 6, offset: 17871},
																																				run: (*parser).callonImageBlock106,
																																				expr: &seqExpr{
																																					pos: position{line: 546, col: 6, offset: 17871},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 546, col: 6, offset: 17871},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 546, col: 14, offset: 17879},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 546, col: 14, offset: 17879},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 493, col: 5, offset: 15873},
																																				run: (*parser).callonImageBlock111,
																																				expr: &seqExpr{
																																					pos: position{line: 493, col: 5, offset: 15873},
																																					exprs: []interface{}{
																																						&andCodeExpr{
																																							pos: position{line: 493, col: 5, offset: 15873},
																																							run: (*parser).callonImageBlock113,
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 496, col: 5, offset: 15937},
																																							label: "element",
																																							expr: &choiceExpr{
																																								pos: position{line: 496, col: 14, offset: 15946},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 507, col: 25, offset: 16408},
																																										run: (*parser).callonImageBlock116,
																																										expr: &seqExpr{
																																											pos: position{line: 507, col: 25, offset: 16408},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 507, col: 25, offset: 16408},
																																													val:        "{counter:",
																																													ignoreCase: false,
																																													want:       "\"{counter:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 507, col: 37, offset: 16420},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														run: (*parser).callonImageBlock120,
																																														expr: &seqExpr{
																																															pos: position{line: 162, col: 18, offset: 4814},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 162, col: 18, offset: 4814},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 162, col: 28, offset: 4824},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 162, col: 29, offset: 4825},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 507, col: 56, offset: 16439},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 507, col: 62, offset: 16445},
																																														expr: &actionExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															run: (*parser).callonImageBlock127,
																																															expr: &seqExpr{
																																																pos: position{line: 515, col: 17, offset: 16708},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 515, col: 17, offset: 16708},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 515, col: 21, offset: 16712},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 515, col: 28, offset: 16719},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 515, col: 28, offset: 16719},
																																																					run: (*parser).callonImageBlock132,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 515, col: 28, offset: 16719},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					run: (*parser).callonImageBlock134,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 517, col: 9, offset: 16773},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 517, col: 9, offset: 16773},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 507, col: 78, offset: 16461},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 511, col: 25, offset: 16563},
																																										run: (*parser).callonImageBlock138,
																																										expr: &seqExpr{
																																											pos: position{line: 511, col: 25, offset: 16563},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 511, col: 25, offset: 16563},
																																													val:        "{counter2:",
																																													ignoreCase: false,
																																													want:       "\"{counter2:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 511, col: 38, offset: 16576},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														run: (*parser).callonImageBlock142,
																																														expr: &seqExpr{
																																															pos: position{line: 162, col: 18, offset: 4814},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 162, col: 18, offset: 4814},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 162, col: 28, offset: 4824},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 162, col: 29, offset: 4825},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 511, col: 57, offset: 16595},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 511, col: 63, offset: 16601},
																																														expr: &actionExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															run: (*parser).callonImageBlock149,
																																															expr: &seqExpr{
																																																pos: position{line: 515, col: 17, offset: 16708},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 515, col: 17, offset: 16708},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 515, col: 21, offset: 16712},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 515, col: 28, offset: 16719},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 515, col: 28, offset: 16719},
																																																					run: (*parser).callonImageBlock154,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 515, col: 28, offset: 16719},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					run: (*parser).callonImageBlock156,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 517, col: 9, offset: 16773},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 517, col: 9, offset: 16773},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 511, col: 79, offset: 16617},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 500, col: 31, offset: 16063},
																																										run: (*parser).callonImageBlock160,
																																										expr: &seqExpr{
																																											pos: position{line: 500, col: 31, offset: 16063},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 500, col: 31, offset: 16063},
																																													val:        "{",
																																													ignoreCase: false,
																																													want:       "\"{\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 500, col: 35, offset: 16067},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														run: (*parser).callonImageBlock164,
																																														expr: &seqExpr{
																																															pos: position{line: 162, col: 18, offset: 4814},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 162, col: 18, offset: 4814},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 162, col: 28, offset: 4824},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 162, col: 29, offset: 4825},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 500, col: 54, offset: 16086},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 550, col: 8, offset: 18103},
																																				run: (*parser).callonImageBlock170,
																																				expr: &litMatcher{
																																					pos:        position{line: 550, col: 8, offset: 18103},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 535, col: 79, offset: 17479},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 537, col: 9, offset: 17552},
																													run: (*parser).callonImageBlock173,
																													expr: &seqExpr{
																														pos: position{line: 537, col: 9, offset: 17552},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 537, col: 9, offset: 17552},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 537, col: 14, offset: 17557},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2936, col: 7, offset: 97248},
																																	run: (*parser).callonImageBlock177,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2936, col: 7, offset: 97248},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2936, col: 7, offset: 97248},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 537, col: 22, offset: 17565},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2658, col: 11, offset: 88553},
																										run: (*parser).callonImageBlock181,
																										expr: &charClassMatcher{
																											pos:        position{line: 2658, col: 12, offset: 88554},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2928, col: 7, offset: 97032},
																				run: (*parser).callonImageBlock183,
																				expr: &litMatcher{
																					pos:        position{line: 2928, col: 7, offset: 97032},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 991, col: 23, offset: 31326},
															run: (*parser).callonImageBlock185,
															expr: &seqExpr{
																pos: position{line: 991, col: 23, offset: 31326},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 989, col: 32, offset: 31294},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 991, col: 51, offset: 31354},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 991, col: 56, offset: 31359},
																			run: (*parser).callonImageBlock189,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 991, col: 56, offset: 31359},
																				expr: &charClassMatcher{
																					pos:        position{line: 991, col: 56, offset: 31359},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 989, col: 32, offset: 31294},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1210, col: 31, offset: 38755},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1210, col: 49, offset: 38773},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1210, col: 67, offset: 38791},
							expr: &actionExpr{
								pos: position{line: 2948, col: 10, offset: 97526},
								run: (*parser).callonImageBlock196,
								expr: &charClassMatcher{
									pos:        position{line: 2948, col: 11, offset: 97527},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2965, col: 8, offset: 97889},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2958, col: 12, offset: 97749},
									run: (*parser).callonImageBlock199,
									expr: &choiceExpr{
										pos: position{line: 2958, col: 13, offset: 97750},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2958, col: 13, offset: 97750},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 20, offset: 97757},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 29, offset: 97766},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2962, col: 8, offset: 97839},
									expr: &anyMatcher{
										line: 2962, col: 9, offset: 97840,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1216, col: 1, offset: 39085},
			expr: &actionExpr{
				pos: position{line: 1216, col: 16, offset: 39100},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1216, col: 16, offset: 39100},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1216, col: 16, offset: 39100},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1216, col: 25, offset: 39109},
							expr: &litMatcher{
								pos:        position{line: 1216, col: 26, offset: 39110},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1216, col: 30, offset: 39114},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 2913, col: 13, offset: 96500},
								run: (*parser).callonInlineImage7,
								expr: &seqExpr{
									pos: position{line: 2913, col: 13, offset: 96500},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2913, col: 13, offset: 96500},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2913, col: 20, offset: 96507},
												expr: &choiceExpr{
													pos: position{line: 2934, col: 11, offset: 97184},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2934, col: 11, offset: 97184},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 2934, col: 23, offset: 97196},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 2934, col: 36, offset: 97209},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 2934, col: 47, offset: 97220},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 2934, col: 58, offset: 97231},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2913, col: 30, offset: 96517},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2913, col: 35, offset: 96522},
												expr: &choiceExpr{
													pos: position{line: 2913, col: 36, offset: 96523},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2921, col: 13, offset: 96792},
															run: (*parser).callonInlineImage20,
															expr: &labeledExpr{
																pos:   position{line: 2921, col: 13, offset: 96792},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2921, col: 22, offset: 96801},
																	expr: &choiceExpr{
																		pos: position{line: 2922, col: 5, offset: 96807},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2922, col: 5, offset: 96807},
																				run: (*parser).callonInlineImage24,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2922, col: 5, offset: 96807},
																					expr: &charClassMatcher{
																						pos:        position{line: 2922, col: 6, offset: 96808},
																						val:        "[^\\r\\n[]�&<>{ ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 493, col: 5, offset: 15873},
																				run: (*parser).callonInlineImage27,
																				expr: &seqExpr{
																					pos: position{line: 493, col: 5, offset: 15873},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 493, col: 5, offset: 15873},
																							run: (*parser).callonInlineImage29,
																						},
																						&labeledExpr{
																							pos:   position{line: 496, col: 5, offset: 15937},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 496, col: 14, offset: 15946},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 507, col: 25, offset: 16408},
																										run: (*parser).callonInlineImage32,
																										expr: &seqExpr{
																											pos: position{line: 507, col: 25, offset: 16408},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 507, col: 25, offset: 16408},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 507, col: 37, offset: 16420},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														run: (*parser).callonInlineImage36,
																														expr: &seqExpr{
																															pos: position{line: 162, col: 18, offset: 4814},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 162, col: 18, offset: 4814},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 162, col: 28, offset: 4824},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 162, col: 29, offset: 4825},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 507, col: 56, offset: 16439},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 507, col: 62, offset: 16445},
																														expr: &actionExpr{
																															pos: position{line: 515, col: 17, offset: 16708},
																															run: (*parser).callonInlineImage43,
																															expr: &seqExpr{
																																pos: position{line: 515, col: 17, offset: 16708},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 515, col: 17, offset: 16708},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 515, col: 21, offset: 16712},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 515, col: 28, offset: 16719},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					run: (*parser).callonInlineImage48,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 515, col: 28, offset: 16719},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 517, col: 9, offset: 16773},
																																					run: (*parser).callonInlineImage50,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 517, col: 9, offset: 16773},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 517, col: 9, offset: 16773},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 507, col: 78, offset: 16461},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 511, col: 25, offset: 16563},
																										run: (*parser).callonInlineImage54,
																										expr: &seqExpr{
																											pos: position{line: 511, col: 25, offset: 16563},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 511, col: 25, offset: 16563},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 511, col: 38, offset: 16576},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														run: (*parser).callonInlineImage58,
																														expr: &seqExpr{
																															pos: position{line: 162, col: 18, offset: 4814},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 162, col: 18, offset: 4814},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 162, col: 28, offset: 4824},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 162, col: 29, offset: 4825},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 511, col: 57, offset: 16595},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 511, col: 63, offset: 16601},
																														expr: &actionExpr{
																															pos: position{line: 515, col: 17, offset: 16708},
																															run: (*parser).callonInlineImage65,
																															expr: &seqExpr{
																																pos: position{line: 515, col: 17, offset: 16708},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 515, col: 17, offset: 16708},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 515, col: 21, offset: 16712},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 515, col: 28, offset: 16719},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					run: (*parser).callonInlineImage70,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 515, col: 28, offset: 16719},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 517, col: 9, offset: 16773},
																																					run: (*parser).callonInlineImage72,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 517, col: 9, offset: 16773},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 517, col: 9, offset: 16773},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 511, col: 79, offset: 16617},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 500, col: 31, offset: 16063},
																										run: (*parser).callonInlineImage76,
																										expr: &seqExpr{
																											pos: position{line: 500, col: 31, offset: 16063},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 500, col: 31, offset: 16063},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 500, col: 35, offset: 16067},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														run: (*parser).callonInlineImage80,
																														expr: &seqExpr{
																															pos: position{line: 162, col: 18, offset: 4814},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 162, col: 18, offset: 4814},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 162, col: 28, offset: 4824},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 162, col: 29, offset: 4825},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 500, col: 54, offset: 16086},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2650, col: 5, offset: 88280},
																				run: (*parser).callonInlineImage86,
																				expr: &seqExpr{
																					pos: position{line: 2650, col: 5, offset: 88280},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2650, col: 5, offset: 88280},
																							run: (*parser).callonInlineImage88,
																						},
																						&labeledExpr{
																							pos:   position{line: 2653, col: 5, offset: 88351},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 2655, col: 9, offset: 88449},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2655, col: 9, offset: 88449},
																										run: (*parser).callonInlineImage91,
																										expr: &choiceExpr{
																											pos: position{line: 535, col: 27, offset: 17427},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 535, col: 27, offset: 17427},
																													run: (*parser).callonInlineImage93,
																													expr: &seqExpr{
																														pos: position{line: 535, col: 27, offset: 17427},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 535, col: 27, offset: 17427},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 535, col: 32, offset: 17432},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2936, col: 7, offset: 97248},
																																	run: (*parser).callonInlineImage97,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2936, col: 7, offset: 97248},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2936, col: 7, offset: 97248},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 535, col: 40, offset: 17440},
																																expr: &actionExpr{
																																	pos: position{line: 2948, col: 10, offset: 97526},
																																	run: (*parser).callonInlineImage101,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2948, col: 11, offset: 97527},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 535, col: 47, offset: 17447},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 535, col: 51, offset: 17451},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 545, col: 24, offset: 17864},
																																	expr: &choiceExpr{
																																		pos: position{line: 546, col: 5, offset: 17870},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 546, col: 6, offset: 17871},
																																				run: (*parser).callonInlineImage107,
																																				expr: &seqExpr{
																																					pos: position{line: 546, col: 6, offset: 17871},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 546, col: 6, offset: 17871},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 546, col: 14, offset: 17879},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 546, col: 14, offset: 17879},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 493, col: 5, offset: 15873},
																																				run: (*parser).callonInlineImage112,
																																				expr: &seqExpr{
																																					pos: position{line: 493, col: 5, offset: 15873},
																																					exprs: []interface{}{
																																						&andCodeExpr{
																																							pos: position{line: 493, col: 5, offset: 15873},
																																							run: (*parser).callonInlineImage114,
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 496, col: 5, offset: 15937},
																																							label: "element",
																																							expr: &choiceExpr{
																																								pos: position{line: 496, col: 14, offset: 15946},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 507, col: 25, offset: 16408},
																																										run: (*parser).callonInlineImage117,
																																										expr: &seqExpr{
																																											pos: position{line: 507, col: 25, offset: 16408},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 507, col: 25, offset: 16408},
																																													val:        "{counter:",
																																													ignoreCase: false,
																																													want:       "\"{counter:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 507, col: 37, offset: 16420},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														run: (*parser).callonInlineImage121,
																																														expr: &seqExpr{
																																															pos: position{line: 162, col: 18, offset: 4814},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 162, col: 18, offset: 4814},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 162, col: 28, offset: 4824},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 162, col: 29, offset: 4825},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 507, col: 56, offset: 16439},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 507, col: 62, offset: 16445},
																																														expr: &actionExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															run: (*parser).callonInlineImage128,
																																															expr: &seqExpr{
																																																pos: position{line: 515, col: 17, offset: 16708},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 515, col: 17, offset: 16708},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 515, col: 21, offset: 16712},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 515, col: 28, offset: 16719},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 515, col: 28, offset: 16719},
																																																					run: (*parser).callonInlineImage133,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 515, col: 28, offset: 16719},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					run: (*parser).callonInlineImage135,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 517, col: 9, offset: 16773},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 517, col: 9, offset: 16773},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 507, col: 78, offset: 16461},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 511, col: 25, offset: 16563},
																																										run: (*parser).callonInlineImage139,
																																										expr: &seqExpr{
																																											pos: position{line: 511, col: 25, offset: 16563},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 511, col: 25, offset: 16563},
																																													val:        "{counter2:",
																																													ignoreCase: false,
																																													want:       "\"{counter2:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 511, col: 38, offset: 16576},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														run: (*parser).callonInlineImage143,
																																														expr: &seqExpr{
																																															pos: position{line: 162, col: 18, offset: 4814},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 162, col: 18, offset: 4814},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 162, col: 28, offset: 4824},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 162, col: 29, offset: 4825},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 511, col: 57, offset: 16595},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 511, col: 63, offset: 16601},
																																														expr: &actionExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															run: (*parser).callonInlineImage150,
																																															expr: &seqExpr{
																																																pos: position{line: 515, col: 17, offset: 16708},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 515, col: 17, offset: 16708},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 515, col: 21, offset: 16712},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 515, col: 28, offset: 16719},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 515, col: 28, offset: 16719},
																																																					run: (*parser).callonInlineImage155,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 515, col: 28, offset: 16719},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					run: (*parser).callonInlineImage157,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 517, col: 9, offset: 16773},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 517, col: 9, offset: 16773},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 511, col: 79, offset: 16617},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 500, col: 31, offset: 16063},
																																										run: (*parser).callonInlineImage161,
																																										expr: &seqExpr{
																																											pos: position{line: 500, col: 31, offset: 16063},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 500, col: 31, offset: 16063},
																																													val:        "{",
																																													ignoreCase: false,
																																													want:       "\"{\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 500, col: 35, offset: 16067},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														run: (*parser).callonInlineImage165,
																																														expr: &seqExpr{
																																															pos: position{line: 162, col: 18, offset: 4814},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 162, col: 18, offset: 4814},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 162, col: 28, offset: 4824},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 162, col: 29, offset: 4825},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 500, col: 54, offset: 16086},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 550, col: 8, offset: 18103},
																																				run: (*parser).callonInlineImage171,
																																				expr: &litMatcher{
																																					pos:        position{line: 550, col: 8, offset: 18103},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 535, col: 79, offset: 17479},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 537, col: 9, offset: 17552},
																													run: (*parser).callonInlineImage174,
																													expr: &seqExpr{
																														pos: position{line: 537, col: 9, offset: 17552},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 537, col: 9, offset: 17552},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 537, col: 14, offset: 17557},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2936, col: 7, offset: 97248},
																																	run: (*parser).callonInlineImage178,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2936, col: 7, offset: 97248},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2936, col: 7, offset: 97248},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 537, col: 22, offset: 17565},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2658, col: 11, offset: 88553},
																										run: (*parser).callonInlineImage182,
																										expr: &charClassMatcher{
																											pos:        position{line: 2658, col: 12, offset: 88554},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2928, col: 7, offset: 97032},
																				run: (*parser).callonInlineImage184,
																				expr: &litMatcher{
																					pos:        position{line: 2928, col: 7, offset: 97032},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 991, col: 23, offset: 31326},
															run: (*parser).callonInlineImage186,
															expr: &seqExpr{
																pos: position{line: 991, col: 23, offset: 31326},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 989, col: 32, offset: 31294},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 991, col: 51, offset: 31354},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 991, col: 56, offset: 31359},
																			run: (*parser).callonInlineImage190,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 991, col: 56, offset: 31359},
																				expr: &charClassMatcher{
																					pos:        position{line: 991, col: 56, offset: 31359},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 989, col: 32, offset: 31294},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1216, col: 46, offset: 39130},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1216, col: 64, offset: 39148},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1223, col: 1, offset: 39578},
			expr: &actionExpr{
				pos: position{line: 1223, col: 15, offset: 39592},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1223, col: 15, offset: 39592},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1223, col: 15, offset: 39592},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1223, col: 23, offset: 39600},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1223, col: 29, offset: 39606},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1223, col: 29, offset: 39606},
									expr: &charClassMatcher{
										pos:        position{line: 1223, col: 29, offset: 39606},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1223, col: 73, offset: 39650},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1223, col: 85, offset: 39662},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1230, col: 1, offset: 40028},
			expr: &choiceExpr{
				pos: position{line: 1230, col: 19, offset: 40046},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1230, col: 19, offset: 40046},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1230, col: 19, offset: 40046},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1230, col: 19, offset: 40046},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1230, col: 32, offset: 40059},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1230, col: 41, offset: 40068},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1230, col: 58, offset: 40085},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1232, col: 9, offset: 40145},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1232, col: 9, offset: 40145},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1232, col: 9, offset: 40145},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1232, col: 21, offset: 40157},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 2864, col: 14, offset: 94885},
										run: (*parser).callonInlineFootnote12,
										expr: &oneOrMoreExpr{
											pos: position{line: 2864, col: 14, offset: 94885},
											expr: &charClassMatcher{
												pos:        position{line: 2864, col: 14, offset: 94885},
												val:        "[0-9\\pL]",
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1232, col: 39, offset: 40175},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1232, col: 43, offset: 40179},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1232, col: 51, offset: 40187},
										expr: &ruleRefExpr{
											pos:  position{line: 1232, col: 52, offset: 40188},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1232, col: 70, offset: 40206},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1238, col: 1, offset: 40355},
			expr: &actionExpr{
				pos: position{line: 1238, col: 20, offset: 40374},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1238, col: 20, offset: 40374},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1238, col: 29, offset: 40383},
						expr: &seqExpr{
							pos: position{line: 1238, col: 30, offset: 40384},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1238, col: 30, offset: 40384},
									expr: &litMatcher{
										pos:        position{line: 1238, col: 31, offset: 40385},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1238, col: 35, offset: 40389},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1270, col: 1, offset: 42078},
			expr: &choiceExpr{
				pos: position{line: 1270, col: 21, offset: 42098},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1270, col: 21, offset: 42098},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1270, col: 21, offset: 42098},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1270, col: 21, offset: 42098},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1270, col: 30, offset: 42107},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1270, col: 38, offset: 42115},
										expr: &actionExpr{
											pos: position{line: 1276, col: 30, offset: 42441},
											run: (*parser).callonPassthroughMacro7,
											expr: &charClassMatcher{
												pos:        position{line: 1276, col: 30, offset: 42441},
												val:        "[^]]",
												chars:      []rune{']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1270, col: 67, offset: 42144},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1272, col: 9, offset: 42248},
						run: (*parser).callonPassthroughMacro10,
						expr: &seqExpr{
							pos: position{line: 1272, col: 9, offset: 42248},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1272, col: 9, offset: 42248},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1272, col: 19, offset: 42258},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1272, col: 27, offset: 42266},
										expr: &choiceExpr{
											pos: position{line: 1272, col: 28, offset: 42267},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1272, col: 28, offset: 42267},
													name: "QuotedText",
												},
												&actionExpr{
													pos: position{line: 1276, col: 30, offset: 42441},
													run: (*parser).callonPassthroughMacro17,
													expr: &charClassMatcher{
														pos:        position{line: 1276, col: 30, offset: 42441},
														val:        "[^]]",
														chars:      []rune{']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1272, col: 69, offset: 42308},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1283, col: 1, offset: 42697},
			expr: &choiceExpr{
				pos: position{line: 1283, col: 9, offset: 42705},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1283, col: 9, offset: 42705},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1283, col: 24, offset: 42720},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1286, col: 1, offset: 42801},
			expr: &actionExpr{
				pos: position{line: 1286, col: 17, offset: 42817},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1286, col: 17, offset: 42817},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1286, col: 17, offset: 42817},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1286, col: 25, offset: 42825},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2913, col: 13, offset: 96500},
								run: (*parser).callonRelativeLink5,
								expr: &seqExpr{
									pos: position{line: 2913, col: 13, offset: 96500},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2913, col: 13, offset: 96500},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2913, col: 20, offset: 96507},
												expr: &choiceExpr{
													pos: position{line: 2934, col: 11, offset: 97184},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2934, col: 11, offset: 97184},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 2934, col: 23, offset: 97196},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 2934, col: 36, offset: 97209},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 2934, col: 47, offset: 97220},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 2934, col: 58, offset: 97231},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2913, col: 30, offset: 96517},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2913, col: 35, offset: 96522},
												expr: &choiceExpr{
													pos: position{line: 2913, col: 36, offset: 96523},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2921, col: 13, offset: 96792},
															run: (*parser).callonRelativeLink18,
															expr: &labeledExpr{
																pos:   position{line: 2921, col: 13, offset: 96792},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2921, col: 22, offset: 96801},
																	expr: &choiceExpr{
																		pos: position{line: 2922, col: 5, offset: 96807},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2922, col: 5, offset: 96807},
																				run: (*parser).callonRelativeLink22,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2922, col: 5, offset: 96807},
																					expr: &charClassMatcher{
																						pos:        position{line: 2922, col: 6, offset: 96808},
																						val:        "[^\\r\\n[]�&<>{ ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 493, col: 5, offset: 15873},
																				run: (*parser).callonRelativeLink25,
																				expr: &seqExpr{
																					pos: position{line: 493, col: 5, offset: 15873},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 493, col: 5, offset: 15873},
																							run: (*parser).callonRelativeLink27,
																						},
																						&labeledExpr{
																							pos:   position{line: 496, col: 5, offset: 15937},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 496, col: 14, offset: 15946},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 507, col: 25, offset: 16408},
																										run: (*parser).callonRelativeLink30,
																										expr: &seqExpr{
																											pos: position{line: 507, col: 25, offset: 16408},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 507, col: 25, offset: 16408},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 507, col: 37, offset: 16420},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														run: (*parser).callonRelativeLink34,
																														expr: &seqExpr{
																															pos: position{line: 162, col: 18, offset: 4814},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 162, col: 18, offset: 4814},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 162, col: 28, offset: 4824},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 162, col: 29, offset: 4825},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 507, col: 56, offset: 16439},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 507, col: 62, offset: 16445},
																														expr: &actionExpr{
																															pos: position{line: 515, col: 17, offset: 16708},
																															run: (*parser).callonRelativeLink41,
																															expr: &seqExpr{
																																pos: position{line: 515, col: 17, offset: 16708},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 515, col: 17, offset: 16708},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 515, col: 21, offset: 16712},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 515, col: 28, offset: 16719},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					run: (*parser).callonRelativeLink46,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 515, col: 28, offset: 16719},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 517, col: 9, offset: 16773},
																																					run: (*parser).callonRelativeLink48,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 517, col: 9, offset: 16773},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 517, col: 9, offset: 16773},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 507, col: 78, offset: 16461},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 511, col: 25, offset: 16563},
																										run: (*parser).callonRelativeLink52,
																										expr: &seqExpr{
																											pos: position{line: 511, col: 25, offset: 16563},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 511, col: 25, offset: 16563},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 511, col: 38, offset: 16576},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														run: (*parser).callonRelativeLink56,
																														expr: &seqExpr{
																															pos: position{line: 162, col: 18, offset: 4814},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 162, col: 18, offset: 4814},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 162, col: 28, offset: 4824},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 162, col: 29, offset: 4825},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 511, col: 57, offset: 16595},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 511, col: 63, offset: 16601},
																														expr: &actionExpr{
																															pos: position{line: 515, col: 17, offset: 16708},
																															run: (*parser).callonRelativeLink63,
																															expr: &seqExpr{
																																pos: position{line: 515, col: 17, offset: 16708},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 515, col: 17, offset: 16708},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 515, col: 21, offset: 16712},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 515, col: 28, offset: 16719},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					run: (*parser).callonRelativeLink68,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 515, col: 28, offset: 16719},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 517, col: 9, offset: 16773},
																																					run: (*parser).callonRelativeLink70,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 517, col: 9, offset: 16773},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 517, col: 9, offset: 16773},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 511, col: 79, offset: 16617},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 500, col: 31, offset: 16063},
																										run: (*parser).callonRelativeLink74,
																										expr: &seqExpr{
																											pos: position{line: 500, col: 31, offset: 16063},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 500, col: 31, offset: 16063},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 500, col: 35, offset: 16067},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														run: (*parser).callonRelativeLink78,
																														expr: &seqExpr{
																															pos: position{line: 162, col: 18, offset: 4814},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 162, col: 18, offset: 4814},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 162, col: 28, offset: 4824},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 162, col: 29, offset: 4825},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 500, col: 54, offset: 16086},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2650, col: 5, offset: 88280},
																				run: (*parser).callonRelativeLink84,
																				expr: &seqExpr{
																					pos: position{line: 2650, col: 5, offset: 88280},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2650, col: 5, offset: 88280},
																							run: (*parser).callonRelativeLink86,
																						},
																						&labeledExpr{
																							pos:   position{line: 2653, col: 5, offset: 88351},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 2655, col: 9, offset: 88449},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2655, col: 9, offset: 88449},
																										run: (*parser).callonRelativeLink89,
																										expr: &choiceExpr{
																											pos: position{line: 535, col: 27, offset: 17427},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 535, col: 27, offset: 17427},
																													run: (*parser).callonRelativeLink91,
																													expr: &seqExpr{
																														pos: position{line: 535, col: 27, offset: 17427},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 535, col: 27, offset: 17427},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 535, col: 32, offset: 17432},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2936, col: 7, offset: 97248},
																																	run: (*parser).callonRelativeLink95,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2936, col: 7, offset: 97248},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2936, col: 7, offset: 97248},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 535, col: 40, offset: 17440},
																																expr: &actionExpr{
																																	pos: position{line: 2948, col: 10, offset: 97526},
																																	run: (*parser).callonRelativeLink99,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2948, col: 11, offset: 97527},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 535, col: 47, offset: 17447},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 535, col: 51, offset: 17451},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 545, col: 24, offset: 17864},
																																	expr: &choiceExpr{
																																		pos: position{line: 546, col: 5, offset: 17870},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 546, col: 6, offset: 17871},
																																				run: (*parser).callonRelativeLink105,
																																				expr: &seqExpr{
																																					pos: position{line: 546, col: 6, offset: 17871},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 546, col: 6, offset: 17871},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 546, col: 14, offset: 17879},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 546, col: 14, offset: 17879},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 493, col: 5, offset: 15873},
																																				run: (*parser).callonRelativeLink110,
																																				expr: &seqExpr{
																																					pos: position{line: 493, col: 5, offset: 15873},
																																					exprs: []interface{}{
																																						&andCodeExpr{
																																							pos: position{line: 493, col: 5, offset: 15873},
																																							run: (*parser).callonRelativeLink112,
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 496, col: 5, offset: 15937},
																																							label: "element",
																																							expr: &choiceExpr{
																																								pos: position{line: 496, col: 14, offset: 15946},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 507, col: 25, offset: 16408},
																																										run: (*parser).callonRelativeLink115,
																																										expr: &seqExpr{
																																											pos: position{line: 507, col: 25, offset: 16408},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 507, col: 25, offset: 16408},
																																													val:        "{counter:",
																																													ignoreCase: false,
																																													want:       "\"{counter:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 507, col: 37, offset: 16420},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														run: (*parser).callonRelativeLink119,
																																														expr: &seqExpr{
																																															pos: position{line: 162, col: 18, offset: 4814},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 162, col: 18, offset: 4814},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 162, col: 28, offset: 4824},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 162, col: 29, offset: 4825},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 507, col: 56, offset: 16439},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 507, col: 62, offset: 16445},
																																														expr: &actionExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															run: (*parser).callonRelativeLink126,
																																															expr: &seqExpr{
																																																pos: position{line: 515, col: 17, offset: 16708},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 515, col: 17, offset: 16708},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 515, col: 21, offset: 16712},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 515, col: 28, offset: 16719},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 515, col: 28, offset: 16719},
																																																					run: (*parser).callonRelativeLink131,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 515, col: 28, offset: 16719},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					run: (*parser).callonRelativeLink133,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 517, col: 9, offset: 16773},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 517, col: 9, offset: 16773},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 507, col: 78, offset: 16461},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 511, col: 25, offset: 16563},
																																										run: (*parser).callonRelativeLink137,
																																										expr: &seqExpr{
																																											pos: position{line: 511, col: 25, offset: 16563},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 511, col: 25, offset: 16563},
																																													val:        "{counter2:",
																																													ignoreCase: false,
																																													want:       "\"{counter2:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 511, col: 38, offset: 16576},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														run: (*parser).callonRelativeLink141,
																																														expr: &seqExpr{
																																															pos: position{line: 162, col: 18, offset: 4814},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 162, col: 18, offset: 4814},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 162, col: 28, offset: 4824},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 162, col: 29, offset: 4825},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 511, col: 57, offset: 16595},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 511, col: 63, offset: 16601},
																																														expr: &actionExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															run: (*parser).callonRelativeLink148,
																																															expr: &seqExpr{
																																																pos: position{line: 515, col: 17, offset: 16708},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 515, col: 17, offset: 16708},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 515, col: 21, offset: 16712},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 515, col: 28, offset: 16719},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 515, col: 28, offset: 16719},
																																																					run: (*parser).callonRelativeLink153,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 515, col: 28, offset: 16719},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					run: (*parser).callonRelativeLink155,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 517, col: 9, offset: 16773},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 517, col: 9, offset: 16773},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 511, col: 79, offset: 16617},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 500, col: 31, offset: 16063},
																																										run: (*parser).callonRelativeLink159,
																																										expr: &seqExpr{
																																											pos: position{line: 500, col: 31, offset: 16063},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 500, col: 31, offset: 16063},
																																													val:        "{",
																																													ignoreCase: false,
																																													want:       "\"{\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 500, col: 35, offset: 16067},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														run: (*parser).callonRelativeLink163,
																																														expr: &seqExpr{
																																															pos: position{line: 162, col: 18, offset: 4814},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 162, col: 18, offset: 4814},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 162, col: 28, offset: 4824},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 162, col: 29, offset: 4825},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 500, col: 54, offset: 16086},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 550, col: 8, offset: 18103},
																																				run: (*parser).callonRelativeLink169,
																																				expr: &litMatcher{
																																					pos:        position{line: 550, col: 8, offset: 18103},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 535, col: 79, offset: 17479},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 537, col: 9, offset: 17552},
																													run: (*parser).callonRelativeLink172,
																													expr: &seqExpr{
																														pos: position{line: 537, col: 9, offset: 17552},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 537, col: 9, offset: 17552},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 537, col: 14, offset: 17557},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2936, col: 7, offset: 97248},
																																	run: (*parser).callonRelativeLink176,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2936, col: 7, offset: 97248},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2936, col: 7, offset: 97248},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 537, col: 22, offset: 17565},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2658, col: 11, offset: 88553},
																										run: (*parser).callonRelativeLink180,
																										expr: &charClassMatcher{
																											pos:        position{line: 2658, col: 12, offset: 88554},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2928, col: 7, offset: 97032},
																				run: (*parser).callonRelativeLink182,
																				expr: &litMatcher{
																					pos:        position{line: 2928, col: 7, offset: 97032},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 991, col: 23, offset: 31326},
															run: (*parser).callonRelativeLink184,
															expr: &seqExpr{
																pos: position{line: 991, col: 23, offset: 31326},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 989, col: 32, offset: 31294},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 991, col: 51, offset: 31354},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 991, col: 56, offset: 31359},
																			run: (*parser).callonRelativeLink188,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 991, col: 56, offset: 31359},
																				expr: &charClassMatcher{
																					pos:        position{line: 991, col: 56, offset: 31359},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 989, col: 32, offset: 31294},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1286, col: 40, offset: 42840},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1286, col: 58, offset: 42858},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1290, col: 1, offset: 42980},
			expr: &actionExpr{
				pos: position{line: 1290, col: 17, offset: 42996},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1290, col: 17, offset: 42996},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1290, col: 17, offset: 42996},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2917, col: 23, offset: 96649},
								run: (*parser).callonExternalLink4,
								expr: &seqExpr{
									pos: position{line: 2917, col: 23, offset: 96649},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2917, col: 23, offset: 96649},
											expr: &litMatcher{
												pos:        position{line: 2917, col: 24, offset: 96650},
												val:        "[",
												ignoreCase: false,
												want:       "\"[\"",
											},
										},
										&labeledExpr{
											pos:   position{line: 2917, col: 28, offset: 96654},
											label: "scheme",
											expr: &choiceExpr{
												pos: position{line: 2934, col: 11, offset: 97184},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2934, col: 11, offset: 97184},
														val:        "http://",
														ignoreCase: false,
														want:       "\"http://\"",
													},
													&litMatcher{
														pos:        position{line: 2934, col: 23, offset: 97196},
														val:        "https://",
														ignoreCase: false,
														want:       "\"https://\"",
													},
													&litMatcher{
														pos:        position{line: 2934, col: 36, offset: 97209},
														val:        "ftp://",
														ignoreCase: false,
														want:       "\"ftp://\"",
													},
													&litMatcher{
														pos:        position{line: 2934, col: 47, offset: 97220},
														val:        "irc://",
														ignoreCase: false,
														want:       "\"irc://\"",
													},
													&litMatcher{
														pos:        position{line: 2934, col: 58, offset: 97231},
														val:        "mailto:",
														ignoreCase: false,
														want:       "\"mailto:\"",
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2917, col: 44, offset: 96670},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2917, col: 49, offset: 96675},
												expr: &choiceExpr{
													pos: position{line: 2917, col: 50, offset: 96676},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2921, col: 13, offset: 96792},
															run: (*parser).callonExternalLink18,
															expr: &labeledExpr{
																pos:   position{line: 2921, col: 13, offset: 96792},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2921, col: 22, offset: 96801},
																	expr: &choiceExpr{
																		pos: position{line: 2922, col: 5, offset: 96807},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2922, col: 5, offset: 96807},
																				run: (*parser).callonExternalLink22,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2922, col: 5, offset: 96807},
																					expr: &charClassMatcher{
																						pos:        position{line: 2922, col: 6, offset: 96808},
																						val:        "[^\\r\\n[]�&<>{ ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 493, col: 5, offset: 15873},
																				run: (*parser).callonExternalLink25,
																				expr: &seqExpr{
																					pos: position{line: 493, col: 5, offset: 15873},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 493, col: 5, offset: 15873},
																							run: (*parser).callonExternalLink27,
																						},
																						&labeledExpr{
																							pos:   position{line: 496, col: 5, offset: 15937},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 496, col: 14, offset: 15946},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 507, col: 25, offset: 16408},
																										run: (*parser).callonExternalLink30,
																										expr: &seqExpr{
																											pos: position{line: 507, col: 25, offset: 16408},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 507, col: 25, offset: 16408},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 507, col: 37, offset: 16420},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														run: (*parser).callonExternalLink34,
																														expr: &seqExpr{
																															pos: position{line: 162, col: 18, offset: 4814},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 162, col: 18, offset: 4814},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 162, col: 28, offset: 4824},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 162, col: 29, offset: 4825},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 507, col: 56, offset: 16439},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 507, col: 62, offset: 16445},
																														expr: &actionExpr{
																															pos: position{line: 515, col: 17, offset: 16708},
																															run: (*parser).callonExternalLink41,
																															expr: &seqExpr{
																																pos: position{line: 515, col: 17, offset: 16708},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 515, col: 17, offset: 16708},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 515, col: 21, offset: 16712},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 515, col: 28, offset: 16719},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					run: (*parser).callonExternalLink46,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 515, col: 28, offset: 16719},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 517, col: 9, offset: 16773},
																																					run: (*parser).callonExternalLink48,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 517, col: 9, offset: 16773},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 517, col: 9, offset: 16773},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 507, col: 78, offset: 16461},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 511, col: 25, offset: 16563},
																										run: (*parser).callonExternalLink52,
																										expr: &seqExpr{
																											pos: position{line: 511, col: 25, offset: 16563},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 511, col: 25, offset: 16563},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 511, col: 38, offset: 16576},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														run: (*parser).callonExternalLink56,
																														expr: &seqExpr{
																															pos: position{line: 162, col: 18, offset: 4814},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 162, col: 18, offset: 4814},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 162, col: 28, offset: 4824},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 162, col: 29, offset: 4825},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 511, col: 57, offset: 16595},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 511, col: 63, offset: 16601},
																														expr: &actionExpr{
																															pos: position{line: 515, col: 17, offset: 16708},
																															run: (*parser).callonExternalLink63,
																															expr: &seqExpr{
																																pos: position{line: 515, col: 17, offset: 16708},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 515, col: 17, offset: 16708},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 515, col: 21, offset: 16712},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 515, col: 28, offset: 16719},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					run: (*parser).callonExternalLink68,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 515, col: 28, offset: 16719},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 517, col: 9, offset: 16773},
																																					run: (*parser).callonExternalLink70,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 517, col: 9, offset: 16773},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 517, col: 9, offset: 16773},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 511, col: 79, offset: 16617},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 500, col: 31, offset: 16063},
																										run: (*parser).callonExternalLink74,
																										expr: &seqExpr{
																											pos: position{line: 500, col: 31, offset: 16063},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 500, col: 31, offset: 16063},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 500, col: 35, offset: 16067},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														run: (*parser).callonExternalLink78,
																														expr: &seqExpr{
																															pos: position{line: 162, col: 18, offset: 4814},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 162, col: 18, offset: 4814},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 162, col: 28, offset: 4824},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 162, col: 29, offset: 4825},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 500, col: 54, offset: 16086},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2650, col: 5, offset: 88280},
																				run: (*parser).callonExternalLink84,
																				expr: &seqExpr{
																					pos: position{line: 2650, col: 5, offset: 88280},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2650, col: 5, offset: 88280},
																							run: (*parser).callonExternalLink86,
																						},
																						&labeledExpr{
																							pos:   position{line: 2653, col: 5, offset: 88351},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 2655, col: 9, offset: 88449},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2655, col: 9, offset: 88449},
																										run: (*parser).callonExternalLink89,
																										expr: &choiceExpr{
																											pos: position{line: 535, col: 27, offset: 17427},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 535, col: 27, offset: 17427},
																													run: (*parser).callonExternalLink91,
																													expr: &seqExpr{
																														pos: position{line: 535, col: 27, offset: 17427},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 535, col: 27, offset: 17427},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 535, col: 32, offset: 17432},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2936, col: 7, offset: 97248},
																																	run: (*parser).callonExternalLink95,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2936, col: 7, offset: 97248},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2936, col: 7, offset: 97248},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 535, col: 40, offset: 17440},
																																expr: &actionExpr{
																																	pos: position{line: 2948, col: 10, offset: 97526},
																																	run: (*parser).callonExternalLink99,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2948, col: 11, offset: 97527},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 535, col: 47, offset: 17447},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 535, col: 51, offset: 17451},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 545, col: 24, offset: 17864},
																																	expr: &choiceExpr{
																																		pos: position{line: 546, col: 5, offset: 17870},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 546, col: 6, offset: 17871},
																																				run: (*parser).callonExternalLink105,
																																				expr: &seqExpr{
																																					pos: position{line: 546, col: 6, offset: 17871},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 546, col: 6, offset: 17871},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 546, col: 14, offset: 17879},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 546, col: 14, offset: 17879},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 493, col: 5, offset: 15873},
																																				run: (*parser).callonExternalLink110,
																																				expr: &seqExpr{
																																					pos: position{line: 493, col: 5, offset: 15873},
																																					exprs: []interface{}{
																																						&andCodeExpr{
																																							pos: position{line: 493, col: 5, offset: 15873},
																																							run: (*parser).callonExternalLink112,
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 496, col: 5, offset: 15937},
																																							label: "element",
																																							expr: &choiceExpr{
																																								pos: position{line: 496, col: 14, offset: 15946},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 507, col: 25, offset: 16408},
																																										run: (*parser).callonExternalLink115,
																																										expr: &seqExpr{
																																											pos: position{line: 507, col: 25, offset: 16408},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 507, col: 25, offset: 16408},
																																													val:        "{counter:",
																																													ignoreCase: false,
																																													want:       "\"{counter:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 507, col: 37, offset: 16420},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														run: (*parser).callonExternalLink119,
																																														expr: &seqExpr{
																																															pos: position{line: 162, col: 18, offset: 4814},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 162, col: 18, offset: 4814},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 162, col: 28, offset: 4824},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 162, col: 29, offset: 4825},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 507, col: 56, offset: 16439},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 507, col: 62, offset: 16445},
																																														expr: &actionExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															run: (*parser).callonExternalLink126,
																																															expr: &seqExpr{
																																																pos: position{line: 515, col: 17, offset: 16708},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 515, col: 17, offset: 16708},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 515, col: 21, offset: 16712},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 515, col: 28, offset: 16719},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 515, col: 28, offset: 16719},
																																																					run: (*parser).callonExternalLink131,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 515, col: 28, offset: 16719},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					run: (*parser).callonExternalLink133,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 517, col: 9, offset: 16773},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 517, col: 9, offset: 16773},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 507, col: 78, offset: 16461},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 511, col: 25, offset: 16563},
																																										run: (*parser).callonExternalLink137,
																																										expr: &seqExpr{
																																											pos: position{line: 511, col: 25, offset: 16563},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 511, col: 25, offset: 16563},
																																													val:        "{counter2:",
																																													ignoreCase: false,
																																													want:       "\"{counter2:\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 511, col: 38, offset: 16576},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														run: (*parser).callonExternalLink141,
																																														expr: &seqExpr{
																																															pos: position{line: 162, col: 18, offset: 4814},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 162, col: 18, offset: 4814},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 162, col: 28, offset: 4824},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 162, col: 29, offset: 4825},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 511, col: 57, offset: 16595},
																																													label: "start",
																																													expr: &zeroOrOneExpr{
																																														pos: position{line: 511, col: 63, offset: 16601},
																																														expr: &actionExpr{
																																															pos: position{line: 515, col: 17, offset: 16708},
																																															run: (*parser).callonExternalLink148,
																																															expr: &seqExpr{
																																																pos: position{line: 515, col: 17, offset: 16708},
																																																exprs: []interface{}{
																																																	&litMatcher{
																																																		pos:        position{line: 515, col: 17, offset: 16708},
																																																		val:        ":",
																																																		ignoreCase: false,
																																																		want:       "\":\"",
																																																	},
																																																	&labeledExpr{
																																																		pos:   position{line: 515, col: 21, offset: 16712},
																																																		label: "start",
																																																		expr: &choiceExpr{
																																																			pos: position{line: 515, col: 28, offset: 16719},
																																																			alternatives: []interface{}{
																																																				&actionExpr{
																																																					pos: position{line: 515, col: 28, offset: 16719},
																																																					run: (*parser).callonExternalLink153,
																																																					expr: &charClassMatcher{
																																																						pos:        position{line: 515, col: 28, offset: 16719},
																																																						val:        "[A-Za-z]",
																																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																						ignoreCase: false,
																																																						inverted:   false,
																																																					},
																																																				},
																																																				&actionExpr{
																																																					pos: position{line: 517, col: 9, offset: 16773},
																																																					run: (*parser).callonExternalLink155,
																																																					expr: &oneOrMoreExpr{
																																																						pos: position{line: 517, col: 9, offset: 16773},
																																																						expr: &charClassMatcher{
																																																							pos:        position{line: 517, col: 9, offset: 16773},
																																																							val:        "[0-9]",
																																																							ranges:     []rune{'0', '9'},
																																																							ignoreCase: false,
																																																							inverted:   false,
																																																						},
																																																					},
																																																				},
																																																			},
																																																		},
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 511, col: 79, offset: 16617},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																									&actionExpr{
																																										pos: position{line: 500, col: 31, offset: 16063},
																																										run: (*parser).callonExternalLink159,
																																										expr: &seqExpr{
																																											pos: position{line: 500, col: 31, offset: 16063},
																																											exprs: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 500, col: 31, offset: 16063},
																																													val:        "{",
																																													ignoreCase: false,
																																													want:       "\"{\"",
																																												},
																																												&labeledExpr{
																																													pos:   position{line: 500, col: 35, offset: 16067},
																																													label: "name",
																																													expr: &actionExpr{
																																														pos: position{line: 162, col: 18, offset: 4814},
																																														run: (*parser).callonExternalLink163,
																																														expr: &seqExpr{
																																															pos: position{line: 162, col: 18, offset: 4814},
																																															exprs: []interface{}{
																																																&charClassMatcher{
																																																	pos:        position{line: 162, col: 18, offset: 4814},
																																																	val:        "[_0-9\\pL]",
																																																	chars:      []rune{'_'},
																																																	ranges:     []rune{'0', '9'},
																																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																																&zeroOrMoreExpr{
																																																	pos: position{line: 162, col: 28, offset: 4824},
																																																	expr: &charClassMatcher{
																																																		pos:        position{line: 162, col: 29, offset: 4825},
																																																		val:        "[-0-9\\pL]",
																																																		chars:      []rune{'-'},
																																																		ranges:     []rune{'0', '9'},
																																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																																		ignoreCase: false,
																																																		inverted:   false,
																																																	},
																																																},
																																															},
																																														},
																																													},
																																												},
																																												&litMatcher{
																																													pos:        position{line: 500, col: 54, offset: 16086},
																																													val:        "}",
																																													ignoreCase: false,
																																													want:       "\"}\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 550, col: 8, offset: 18103},
																																				run: (*parser).callonExternalLink169,
																																				expr: &litMatcher{
																																					pos:        position{line: 550, col: 8, offset: 18103},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 535, col: 79, offset: 17479},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 537, col: 9, offset: 17552},
																													run: (*parser).callonExternalLink172,
																													expr: &seqExpr{
																														pos: position{line: 537, col: 9, offset: 17552},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 537, col: 9, offset: 17552},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 537, col: 14, offset: 17557},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2936, col: 7, offset: 97248},
																																	run: (*parser).callonExternalLink176,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2936, col: 7, offset: 97248},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2936, col: 7, offset: 97248},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 537, col: 22, offset: 17565},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2658, col: 11, offset: 88553},
																										run: (*parser).callonExternalLink180,
																										expr: &charClassMatcher{
																											pos:        position{line: 2658, col: 12, offset: 88554},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2928, col: 7, offset: 97032},
																				run: (*parser).callonExternalLink182,
																				expr: &litMatcher{
																					pos:        position{line: 2928, col: 7, offset: 97032},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 991, col: 23, offset: 31326},
															run: (*parser).callonExternalLink184,
															expr: &seqExpr{
																pos: position{line: 991, col: 23, offset: 31326},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 989, col: 32, offset: 31294},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 991, col: 51, offset: 31354},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 991, col: 56, offset: 31359},
																			run: (*parser).callonExternalLink188,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 991, col: 56, offset: 31359},
																				expr: &charClassMatcher{
																					pos:        position{line: 991, col: 56, offset: 31359},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 989, col: 32, offset: 31294},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1290, col: 42, offset: 43021},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1290, col: 59, offset: 43038},
								expr: &ruleRefExpr{
									pos:  position{line: 1290, col: 60, offset: 43039},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElements",
			pos:  position{line: 1298, col: 1, offset: 43399},
			expr: &actionExpr{
				pos: position{line: 1299, col: 5, offset: 43420},
				run: (*parser).callonListElements1,
				expr: &seqExpr{
					pos: position{line: 1299, col: 5, offset: 43420},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1299, col: 5, offset: 43420},
							label: "firstElement",
							expr: &choiceExpr{
								pos: position{line: 1305, col: 5, offset: 43622},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1434, col: 5, offset: 47638},
										run: (*parser).callonListElements5,
										expr: &seqExpr{
											pos: position{line: 1434, col: 5, offset: 47638},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1434, col: 5, offset: 47638},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1441, col: 5, offset: 47846},
														run: (*parser).callonListElements8,
														expr: &seqExpr{
															pos: position{line: 1441, col: 5, offset: 47846},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1441, col: 5, offset: 47846},
																	expr: &actionExpr{
																		pos: position{line: 2948, col: 10, offset: 97526},
																		run: (*parser).callonListElements11,
																		expr: &charClassMatcher{
																			pos:        position{line: 2948, col: 11, offset: 97527},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1441, col: 12, offset: 47853},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1443, col: 9, offset: 47916},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1443, col: 9, offset: 47916},
																				run: (*parser).callonListElements15,
																				expr: &seqExpr{
																					pos: position{line: 1443, col: 9, offset: 47916},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1443, col: 9, offset: 47916},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1443, col: 16, offset: 47923},
																								run: (*parser).callonListElements18,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1443, col: 16, offset: 47923},
																									expr: &litMatcher{
																										pos:        position{line: 1443, col: 17, offset: 47924},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1447, col: 9, offset: 48024},
																							run: (*parser).callonListElements21,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1466, col: 11, offset: 48741},
																				run: (*parser).callonListElements22,
																				expr: &seqExpr{
																					pos: position{line: 1466, col: 11, offset: 48741},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1466, col: 11, offset: 48741},
																							expr: &charClassMatcher{
																								pos:        position{line: 1466, col: 12, offset: 48742},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1466, col: 20, offset: 48750},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1468, col: 13, offset: 48867},
																				run: (*parser).callonListElements27,
																				expr: &seqExpr{
																					pos: position{line: 1468, col: 13, offset: 48867},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1468, col: 14, offset: 48868},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1468, col: 21, offset: 48875},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1470, col: 13, offset: 48995},
																				run: (*parser).callonListElements31,
																				expr: &seqExpr{
																					pos: position{line: 1470, col: 13, offset: 48995},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1470, col: 14, offset: 48996},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1470, col: 21, offset: 49003},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1472, col: 13, offset: 49123},
																				run: (*parser).callonListElements35,
																				expr: &seqExpr{
																					pos: position{line: 1472, col: 13, offset: 49123},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1472, col: 13, offset: 49123},
																							expr: &charClassMatcher{
																								pos:        position{line: 1472, col: 14, offset: 49124},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1472, col: 26, offset: 49136},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1474, col: 13, offset: 49256},
																				run: (*parser).callonListElements40,
																				expr: &seqExpr{
																					pos: position{line: 1474, col: 13, offset: 49256},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1474, col: 13, offset: 49256},
																							expr: &charClassMatcher{
																								pos:        position{line: 1474, col: 14, offset: 49257},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1474, col: 26, offset: 49269},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2953, col: 11, offset: 97635},
																	run: (*parser).callonListElements45,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2953, col: 11, offset: 97635},
																		expr: &charClassMatcher{
																			pos:        position{line: 2953, col: 12, offset: 97636},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1435, col: 5, offset: 47677},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1374, col: 5, offset: 45844},
														run: (*parser).callonListElements49,
														expr: &seqExpr{
															pos: position{line: 1374, col: 5, offset: 45844},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1374, col: 5, offset: 45844},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1374, col: 14, offset: 45853},
																		run: (*parser).callonListElements52,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1374, col: 14, offset: 45853},
																			expr: &charClassMatcher{
																				pos:        position{line: 1374, col: 14, offset: 45853},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonListElements56,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1484, col: 5, offset: 49535},
										run: (*parser).callonListElements63,
										expr: &seqExpr{
											pos: position{line: 1484, col: 5, offset: 49535},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1484, col: 5, offset: 49535},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1491, col: 5, offset: 49808},
														run: (*parser).callonListElements66,
														expr: &seqExpr{
															pos: position{line: 1491, col: 5, offset: 49808},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1491, col: 5, offset: 49808},
																	expr: &actionExpr{
																		pos: position{line: 2948, col: 10, offset: 97526},
																		run: (*parser).callonListElements69,
																		expr: &charClassMatcher{
																			pos:        position{line: 2948, col: 11, offset: 97527},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1491, col: 12, offset: 49815},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1491, col: 20, offset: 49823},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1493, col: 9, offset: 49880},
																				run: (*parser).callonListElements73,
																				expr: &seqExpr{
																					pos: position{line: 1493, col: 9, offset: 49880},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1493, col: 9, offset: 49880},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1493, col: 16, offset: 49887},
																								run: (*parser).callonListElements76,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1493, col: 16, offset: 49887},
																									expr: &litMatcher{
																										pos:        position{line: 1493, col: 17, offset: 49888},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1497, col: 9, offset: 49988},
																							run: (*parser).callonListElements79,
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 1514, col: 14, offset: 50695},
																				label: "depth",
																				expr: &actionExpr{
																					pos: position{line: 1514, col: 21, offset: 50702},
																					run: (*parser).callonListElements81,
																					expr: &litMatcher{
																						pos:        position{line: 1514, col: 22, offset: 50703},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2953, col: 11, offset: 97635},
																	run: (*parser).callonListElements83,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2953, col: 11, offset: 97635},
																		expr: &charClassMatcher{
																			pos:        position{line: 2953, col: 12, offset: 97636},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1485, col: 5, offset: 49576},
													label: "checkstyle",
													expr: &zeroOrOneExpr{
														pos: position{line: 1485, col: 16, offset: 49587},
														expr: &actionExpr{
															pos: position{line: 1521, col: 5, offset: 50864},
															run: (*parser).callonListElements88,
															expr: &seqExpr{
																pos: position{line: 1521, col: 5, offset: 50864},
																exprs: []interface{}{
																	&andExpr{
																		pos: position{line: 1521, col: 5, offset: 50864},
																		expr: &litMatcher{
																			pos:        position{line: 1521, col: 6, offset: 50865},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1521, col: 10, offset: 50869},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1522, col: 7, offset: 50883},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1522, col: 7, offset: 50883},
																					run: (*parser).callonListElements94,
																					expr: &litMatcher{
																						pos:        position{line: 1522, col: 7, offset: 50883},
																						val:        "[ ]",
																						ignoreCase: false,
																						want:       "\"[ ]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1523, col: 7, offset: 50928},
																					run: (*parser).callonListElements96,
																					expr: &litMatcher{
																						pos:        position{line: 1523, col: 7, offset: 50928},
																						val:        "[*]",
																						ignoreCase: false,
																						want:       "\"[*]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1524, col: 7, offset: 50971},
																					run: (*parser).callonListElements98,
																					expr: &litMatcher{
																						pos:        position{line: 1524, col: 7, offset: 50971},
																						val:        "[x]",
																						ignoreCase: false,
																						want:       "\"[x]\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2953, col: 11, offset: 97635},
																		run: (*parser).callonListElements100,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2953, col: 11, offset: 97635},
																			expr: &charClassMatcher{
																				pos:        position{line: 2953, col: 12, offset: 97636},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1486, col: 5, offset: 49626},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1374, col: 5, offset: 45844},
														run: (*parser).callonListElements104,
														expr: &seqExpr{
															pos: position{line: 1374, col: 5, offset: 45844},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1374, col: 5, offset: 45844},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1374, col: 14, offset: 45853},
																		run: (*parser).callonListElements107,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1374, col: 14, offset: 45853},
																			expr: &charClassMatcher{
																				pos:        position{line: 1374, col: 14, offset: 45853},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonListElements111,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1591, col: 5, offset: 52820},
										run: (*parser).callonListElements118,
										expr: &seqExpr{
											pos: position{line: 1591, col: 5, offset: 52820},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1591, col: 5, offset: 52820},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1597, col: 5, offset: 53021},
														run: (*parser).callonListElements121,
														expr: &seqExpr{
															pos: position{line: 1597, col: 5, offset: 53021},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1597, col: 5, offset: 53021},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1597, col: 9, offset: 53025},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1597, col: 14, offset: 53030},
																		run: (*parser).callonListElements125,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1597, col: 14, offset: 53030},
																			expr: &charClassMatcher{
																				pos:        position{line: 1597, col: 14, offset: 53030},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1597, col: 62, offset: 53078},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 2953, col: 11, offset: 97635},
																	run: (*parser).callonListElements129,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2953, col: 11, offset: 97635},
																		expr: &charClassMatcher{
																			pos:        position{line: 2953, col: 12, offset: 97636},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1592, col: 5, offset: 52856},
													label: "description",
													expr: &actionExpr{
														pos: position{line: 1602, col: 5, offset: 53156},
														run: (*parser).callonListElements133,
														expr: &seqExpr{
															pos: position{line: 1602, col: 5, offset: 53156},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1602, col: 5, offset: 53156},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1602, col: 14, offset: 53165},
																		run: (*parser).callonListElements136,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1602, col: 14, offset: 53165},
																			expr: &charClassMatcher{
																				pos:        position{line: 1602, col: 14, offset: 53165},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonListElements140,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1533, col: 5, offset: 51164},
										run: (*parser).callonListElements147,
										expr: &seqExpr{
											pos: position{line: 1533, col: 5, offset: 51164},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1533, col: 5, offset: 51164},
													label: "term",
													expr: &actionExpr{
														pos: position{line: 1541, col: 5, offset: 51423},
														run: (*parser).callonListElements150,
														expr: &oneOrMoreExpr{
															pos: position{line: 1541, col: 5, offset: 51423},
															expr: &seqExpr{
																pos: position{line: 1541, col: 6, offset: 51424},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1541, col: 6, offset: 51424},
																		expr: &actionExpr{
																			pos: position{line: 1546, col: 5, offset: 51555},
																			run: (*parser).callonListElements154,
																			expr: &seqExpr{
																				pos: position{line: 1546, col: 5, offset: 51555},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 1546, col: 5, offset: 51555},
																						label: "separator",
																						expr: &actionExpr{
																							pos: position{line: 1546, col: 16, offset: 51566},
																							run: (*parser).callonListElements157,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1546, col: 16, offset: 51566},
																								expr: &litMatcher{
																									pos:        position{line: 1546, col: 17, offset: 51567},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																							},
																						},
																					},
																					&andCodeExpr{
																						pos: position{line: 1549, col: 5, offset: 51624},
																						run: (*parser).callonListElements160,
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1541, col: 35, offset: 51453},
																		expr: &choiceExpr{
																			pos: position{line: 2965, col: 8, offset: 97889},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2958, col: 12, offset: 97749},
																					run: (*parser).callonListElements163,
																					expr: &choiceExpr{
																						pos: position{line: 2958, col: 13, offset: 97750},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2958, col: 13, offset: 97750},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 20, offset: 97757},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 29, offset: 97766},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2962, col: 8, offset: 97839},
																					expr: &anyMatcher{
																						line: 2962, col: 9, offset: 97840,
																					},
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1541, col: 40, offset: 51458,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1534, col: 5, offset: 51199},
													label: "separator",
													expr: &actionExpr{
														pos: position{line: 1546, col: 5, offset: 51555},
														run: (*parser).callonListElements172,
														expr: &seqExpr{
															pos: position{line: 1546, col: 5, offset: 51555},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1546, col: 5, offset: 51555},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1546, col: 16, offset: 51566},
																		run: (*parser).callonListElements175,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1546, col: 16, offset: 51566},
																			expr: &litMatcher{
																				pos:        position{line: 1546, col: 17, offset: 51567},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1549, col: 5, offset: 51624},
																	run: (*parser).callonListElements178,
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1535, col: 5, offset: 51244},
													label: "description",
													expr: &choiceExpr{
														pos: position{line: 1557, col: 5, offset: 51874},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1559, col: 9, offset: 51939},
																run: (*parser).callonListElements181,
																expr: &seqExpr{
																	pos: position{line: 1559, col: 9, offset: 51939},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1559, col: 9, offset: 51939},
																			expr: &actionExpr{
																				pos: position{line: 2948, col: 10, offset: 97526},
																				run: (*parser).callonListElements184,
																				expr: &charClassMatcher{
																					pos:        position{line: 2948, col: 11, offset: 97527},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2965, col: 8, offset: 97889},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2958, col: 12, offset: 97749},
																					run: (*parser).callonListElements187,
																					expr: &choiceExpr{
																						pos: position{line: 2958, col: 13, offset: 97750},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2958, col: 13, offset: 97750},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 20, offset: 97757},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 29, offset: 97766},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2962, col: 8, offset: 97839},
																					expr: &anyMatcher{
																						line: 2962, col: 9, offset: 97840,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1560, col: 9, offset: 51959},
																			expr: &actionExpr{
																				pos: position{line: 526, col: 14, offset: 17074},
																				run: (*parser).callonListElements195,
																				expr: &seqExpr{
																					pos: position{line: 526, col: 14, offset: 17074},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 526, col: 14, offset: 17074},
																							expr: &notExpr{
																								pos: position{line: 2962, col: 8, offset: 97839},
																								expr: &anyMatcher{
																									line: 2962, col: 9, offset: 97840,
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 526, col: 19, offset: 17079},
																							expr: &actionExpr{
																								pos: position{line: 2948, col: 10, offset: 97526},
																								run: (*parser).callonListElements201,
																								expr: &charClassMatcher{
																									pos:        position{line: 2948, col: 11, offset: 97527},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2965, col: 8, offset: 97889},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2958, col: 12, offset: 97749},
																									run: (*parser).callonListElements204,
																									expr: &choiceExpr{
																										pos: position{line: 2958, col: 13, offset: 97750},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2958, col: 13, offset: 97750},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 20, offset: 97757},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 29, offset: 97766},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2962, col: 8, offset: 97839},
																									expr: &anyMatcher{
																										line: 2962, col: 9, offset: 97840,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1561, col: 9, offset: 51979},
																			label: "content",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 1561, col: 17, offset: 51987},
																				expr: &actionExpr{
																					pos: position{line: 1359, col: 5, offset: 45418},
																					run: (*parser).callonListElements213,
																					expr: &seqExpr{
																						pos: position{line: 1359, col: 5, offset: 45418},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 1359, col: 5, offset: 45418},
																								expr: &actionExpr{
																									pos: position{line: 526, col: 14, offset: 17074},
																									run: (*parser).callonListElements216,
																									expr: &seqExpr{
																										pos: position{line: 526, col: 14, offset: 17074},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 526, col: 14, offset: 17074},
																												expr: &notExpr{
																													pos: position{line: 2962, col: 8, offset: 97839},
																													expr: &anyMatcher{
																														line: 2962, col: 9, offset: 97840,
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 526, col: 19, offset: 17079},
																												expr: &actionExpr{
																													pos: position{line: 2948, col: 10, offset: 97526},
																													run: (*parser).callonListElements222,
																													expr: &charClassMatcher{
																														pos:        position{line: 2948, col: 11, offset: 97527},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2965, col: 8, offset: 97889},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2958, col: 12, offset: 97749},
																														run: (*parser).callonListElements225,
																														expr: &choiceExpr{
																															pos: position{line: 2958, col: 13, offset: 97750},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2958, col: 13, offset: 97750},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2958, col: 20, offset: 97757},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2958, col: 29, offset: 97766},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2962, col: 8, offset: 97839},
																														expr: &anyMatcher{
																															line: 2962, col: 9, offset: 97840,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1360, col: 5, offset: 45433},
																								expr: &seqExpr{
																									pos: position{line: 1392, col: 34, offset: 46343},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 1392, col: 34, offset: 46343},
																											val:        "+",
																											ignoreCase: false,
																											want:       "\"+\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 1392, col: 38, offset: 46347},
																											expr: &actionExpr{
																												pos: position{line: 2948, col: 10, offset: 97526},
																												run: (*parser).callonListElements236,
																												expr: &charClassMatcher{
																													pos:        position{line: 2948, col: 11, offset: 97527},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2958, col: 12, offset: 97749},
																											run: (*parser).callonListElements238,
																											expr: &choiceExpr{
																												pos: position{line: 2958, col: 13, offset: 97750},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2958, col: 13, offset: 97750},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2958, col: 20, offset: 97757},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2958, col: 29, offset: 97766},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1361, col: 5, offset: 45468},
																								expr: &actionExpr{
																									pos: position{line: 1441, col: 5, offset: 47846},
																									run: (*parser).callonListElements244,
																									expr: &seqExpr{
																										pos: position{line: 1441, col: 5, offset: 47846},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 1441, col: 5, offset: 47846},
																												expr: &actionExpr{
																													pos: position{line: 2948, col: 10, offset: 97526},
																													run: (*parser).callonListElements247,
																													expr: &charClassMatcher{
																														pos:        position{line: 2948, col: 11, offset: 97527},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1441, col: 12, offset: 47853},
																												label: "prefix",
																												expr: &choiceExpr{
																													pos: position{line: 1443, col: 9, offset: 47916},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 1443, col: 9, offset: 47916},
																															run: (*parser).callonListElements251,
																															expr: &seqExpr{
																																pos: position{line: 1443, col: 9, offset: 47916},
																																exprs: []interface{}{
																																	&labeledExpr{
																																		pos:   position{line: 1443, col: 9, offset: 47916},
																																		label: "depth",
																																		expr: &actionExpr{
																																			pos: position{line: 1443, col: 16, offset: 47923},
																																			run: (*parser).callonListElements254,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1443, col: 16, offset: 47923},
																																				expr: &litMatcher{
																																					pos:        position{line: 1443, col: 17, offset: 47924},
																																					val:        ".",
																																					ignoreCase: false,
																																					want:       "\".\"",
																																				},
																																			},
																																		},
																																	},
																																	&andCodeExpr{
																																		pos: position{line: 1447, col: 9, offset: 48024},
																																		run: (*parser).callonListElements257,
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1466, col: 11, offset: 48741},
																															run: (*parser).callonListElements258,
																															expr: &seqExpr{
																																pos: position{line: 1466, col: 11, offset: 48741},
																																exprs: []interface{}{
																																	&oneOrMoreExpr{
																																		pos: position{line: 1466, col: 11, offset: 48741},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1466, col: 12, offset: 48742},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1466, col: 20, offset: 48750},
																																		val:        ".",
																																		ignoreCase: false,
																																		want:       "\".\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1468, col: 13, offset: 48867},
																															run: (*parser).callonListElements263,
																															expr: &seqExpr{
																																pos: position{line: 1468, col: 13, offset: 48867},
																																exprs: []interface{}{
																																	&charClassMatcher{
																																		pos:        position{line: 1468, col: 14, offset: 48868},
																																		val:        "[a-z]",
																																		ranges:     []rune{'a', 'z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1468, col: 21, offset: 48875},
																																		val:        ".",
																																		ignoreCase: false,
																																		want:       "\".\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1470, col: 13, offset: 48995},
																															run: (*parser).callonListElements267,
																															expr: &seqExpr{
																																pos: position{line: 1470, col: 13, offset: 48995},
																																exprs: []interface{}{
																																	&charClassMatcher{
																																		pos:        position{line: 1470, col: 14, offset: 48996},
																																		val:        "[A-Z]",
																																		ranges:     []rune{'A', 'Z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1470, col: 21, offset: 49003},
																																		val:        ".",
																																		ignoreCase: false,
																																		want:       "\".\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1472, col: 13, offset: 49123},
																															run: (*parser).callonListElements271,
																															expr: &seqExpr{
																																pos: position{line: 1472, col: 13, offset: 49123},
																																exprs: []interface{}{
																																	&oneOrMoreExpr{
																																		pos: position{line: 1472, col: 13, offset: 49123},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1472, col: 14, offset: 49124},
																																			val:        "[ivxdlcm]",
																																			chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1472, col: 26, offset: 49136},
																																		val:        ")",
																																		ignoreCase: false,
																																		want:       "\")\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1474, col: 13, offset: 49256},
																															run: (*parser).callonListElements276,
																															expr: &seqExpr{
																																pos: position{line: 1474, col: 13, offset: 49256},
																																exprs: []interface{}{
																																	&oneOrMoreExpr{
																																		pos: position{line: 1474, col: 13, offset: 49256},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1474, col: 14, offset: 49257},
																																			val:        "[IVXDLCM]",
																																			chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1474, col: 26, offset: 49269},
																																		val:        ")",
																																		ignoreCase: false,
																																		want:       "\")\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2953, col: 11, offset: 97635},
																												run: (*parser).callonListElements281,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2953, col: 11, offset: 97635},
																													expr: &charClassMatcher{
																														pos:        position{line: 2953, col: 12, offset: 97636},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1362, col: 5, offset: 45498},
																								expr: &actionExpr{
																									pos: position{line: 1491, col: 5, offset: 49808},
																									run: (*parser).callonListElements285,
																									expr: &seqExpr{
																										pos: position{line: 1491, col: 5, offset: 49808},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 1491, col: 5, offset: 49808},
																												expr: &actionExpr{
																													pos: position{line: 2948, col: 10, offset: 97526},
																													run: (*parser).callonListElements288,
																													expr: &charClassMatcher{
																														pos:        position{line: 2948, col: 11, offset: 97527},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1491, col: 12, offset: 49815},
																												label: "prefix",
																												expr: &choiceExpr{
																													pos: position{line: 1491, col: 20, offset: 49823},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 1493, col: 9, offset: 49880},
																															run: (*parser).callonListElements292,
																															expr: &seqExpr{
																																pos: position{line: 1493, col: 9, offset: 49880},
																																exprs: []interface{}{
																																	&labeledExpr{
																																		pos:   position{line: 1493, col: 9, offset: 49880},
																																		label: "depth",
																																		expr: &actionExpr{
																																			pos: position{line: 1493, col: 16, offset: 49887},
																																			run: (*parser).callonListElements295,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1493, col: 16, offset: 49887},
																																				expr: &litMatcher{
																																					pos:        position{line: 1493, col: 17, offset: 49888},
																																					val:        "*",
																																					ignoreCase: false,
																																					want:       "\"*\"",
																																				},
																																			},
																																		},
																																	},
																																	&andCodeExpr{
																																		pos: position{line: 1497, col: 9, offset: 49988},
																																		run: (*parser).callonListElements298,
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 1514, col: 14, offset: 50695},
																															label: "depth",
																															expr: &actionExpr{
																																pos: position{line: 1514, col: 21, offset: 50702},
																																run: (*parser).callonListElements300,
																																expr: &litMatcher{
																																	pos:        position{line: 1514, col: 22, offset: 50703},
																																	val:        "-",
																																	ignoreCase: false,
																																	want:       "\"-\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2953, col: 11, offset: 97635},
																												run: (*parser).callonListElements302,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2953, col: 11, offset: 97635},
																													expr: &charClassMatcher{
																														pos:        position{line: 2953, col: 12, offset: 97636},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1363, col: 5, offset: 45530},
																								expr: &actionExpr{
																									pos: position{line: 1597, col: 5, offset: 53021},
																									run: (*parser).callonListElements306,
																									expr: &seqExpr{
																										pos: position{line: 1597, col: 5, offset: 53021},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1597, col: 5, offset: 53021},
																												val:        "<",
																												ignoreCase: false,
																												want:       "\"<\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 1597, col: 9, offset: 53025},
																												label: "ref",
																												expr: &actionExpr{
																													pos: position{line: 1597, col: 14, offset: 53030},
																													run: (*parser).callonListElements310,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1597, col: 14, offset: 53030},
																														expr: &charClassMatcher{
																															pos:        position{line: 1597, col: 14, offset: 53030},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 1597, col: 62, offset: 53078},
																												val:        ">",
																												ignoreCase: false,
																												want:       "\">\"",
																											},
																											&actionExpr{
																												pos: position{line: 2953, col: 11, offset: 97635},
																												run: (*parser).callonListElements314,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2953, col: 11, offset: 97635},
																													expr: &charClassMatcher{
																														pos:        position{line: 2953, col: 12, offset: 97636},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1364, col: 5, offset: 45560},
																								expr: &seqExpr{
																									pos: position{line: 1364, col: 7, offset: 45562},
																									exprs: []interface{}{
																										&actionExpr{
																											pos: position{line: 1541, col: 5, offset: 51423},
																											run: (*parser).callonListElements319,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1541, col: 5, offset: 51423},
																												expr: &seqExpr{
																													pos: position{line: 1541, col: 6, offset: 51424},
																													exprs: []interface{}{
																														&notExpr{
																															pos: position{line: 1541, col: 6, offset: 51424},
																															expr: &actionExpr{
																																pos: position{line: 1546, col: 5, offset: 51555},
																																run: (*parser).callonListElements323,
																																expr: &seqExpr{
																																	pos: position{line: 1546, col: 5, offset: 51555},
																																	exprs: []interface{}{
																																		&labeledExpr{
																																			pos:   position{line: 1546, col: 5, offset: 51555},
																																			label: "separator",
																																			expr: &actionExpr{
																																				pos: position{line: 1546, col: 16, offset: 51566},
																																				run: (*parser).callonListElements326,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 1546, col: 16, offset: 51566},
																																					expr: &litMatcher{
																																						pos:        position{line: 1546, col: 17, offset: 51567},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																				},
																																			},
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 1549, col: 5, offset: 51624},
																																			run: (*parser).callonListElements329,
																																		},
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 1541, col: 35, offset: 51453},
																															expr: &choiceExpr{
																																pos: position{line: 2965, col: 8, offset: 97889},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 2958, col: 12, offset: 97749},
																																		run: (*parser).callonListElements332,
																																		expr: &choiceExpr{
																																			pos: position{line: 2958, col: 13, offset: 97750},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2958, col: 13, offset: 97750},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2958, col: 20, offset: 97757},
																																					val:        "\r\n",
																																					ignoreCase: false,
																																					want:       "\"\\r\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2958, col: 29, offset: 97766},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 2962, col: 8, offset: 97839},
																																		expr: &anyMatcher{
																																			line: 2962, col: 9, offset: 97840,
																																		},
																																	},
																																},
																															},
																														},
																														&anyMatcher{
																															line: 1541, col: 40, offset: 51458,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1546, col: 5, offset: 51555},
																											run: (*parser).callonListElements340,
																											expr: &seqExpr{
																												pos: position{line: 1546, col: 5, offset: 51555},
																												exprs: []interface{}{
																													&labeledExpr{
																														pos:   position{line: 1546, col: 5, offset: 51555},
																														label: "separator",
																														expr: &actionExpr{
																															pos: position{line: 1546, col: 16, offset: 51566},
																															run: (*parser).callonListElements343,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1546, col: 16, offset: 51566},
																																expr: &litMatcher{
																																	pos:        position{line: 1546, col: 17, offset: 51567},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																															},
																														},
																													},
																													&andCodeExpr{
																														pos: position{line: 1549, col: 5, offset: 51624},
																														run: (*parser).callonListElements346,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1365, col: 5, offset: 45618},
																								expr: &actionExpr{
																									pos: position{line: 571, col: 5, offset: 18595},
																									run: (*parser).callonListElements348,
																									expr: &seqExpr{
																										pos: position{line: 571, col: 5, offset: 18595},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 571, col: 5, offset: 18595},
																												expr: &charClassMatcher{
																													pos:        position{line: 2860, col: 13, offset: 94811},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 572, col: 5, offset: 18625},
																												label: "delimiter",
																												expr: &choiceExpr{
																													pos: position{line: 573, col: 9, offset: 18645},
																													alternatives: []interface{}{
																														&seqExpr{
																															pos: position{line: 585, col: 26, offset: 18966},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 585, col: 26, offset: 18966},
																																	val:        "////",
																																	ignoreCase: false,
																																	want:       "\"////\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 585, col: 33, offset: 18973},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonListElements357,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonListElements360,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 587, col: 26, offset: 19010},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 587, col: 26, offset: 19010},
																																	val:        "====",
																																	ignoreCase: false,
																																	want:       "\"====\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 587, col: 33, offset: 19017},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonListElements370,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonListElements373,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 589, col: 25, offset: 19053},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 589, col: 25, offset: 19053},
																																	val:        "```",
																																	ignoreCase: false,
																																	want:       "\"```\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 589, col: 31, offset: 19059},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonListElements383,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonListElements386,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 591, col: 26, offset: 19096},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 591, col: 26, offset: 19096},
																																	val:        "----",
																																	ignoreCase: false,
																																	want:       "\"----\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 591, col: 33, offset: 19103},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonListElements396,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonListElements399,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 593, col: 26, offset: 19140},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 593, col: 26, offset: 19140},
																																	val:        "....",
																																	ignoreCase: false,
																																	want:       "\"....\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 593, col: 33, offset: 19147},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonListElements409,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonListElements412,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 595, col: 30, offset: 19188},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 595, col: 30, offset: 19188},
																																	val:        "++++",
																																	ignoreCase: false,
																																	want:       "\"++++\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 595, col: 37, offset: 19195},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonListElements422,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonListElements425,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 597, col: 24, offset: 19230},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 597, col: 24, offset: 19230},
																																	val:        "____",
																																	ignoreCase: false,
																																	want:       "\"____\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 597, col: 31, offset: 19237},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonListElements435,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonListElements438,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 599, col: 26, offset: 19274},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 599, col: 26, offset: 19274},
																																	val:        "****",
																																	ignoreCase: false,
																																	want:       "\"****\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 599, col: 33, offset: 19281},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonListElements448,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonListElements451,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1366, col: 5, offset: 45638},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1366, col: 14, offset: 45647},
																									run: (*parser).callonListElements459,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1366, col: 14, offset: 45647},
																										expr: &charClassMatcher{
																											pos:        position{line: 1366, col: 14, offset: 45647},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonListElements463,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1569, col: 9, offset: 52222},
																run: (*parser).callonListElements470,
																expr: &seqExpr{
																	pos: position{line: 1569, col: 9, offset: 52222},
																	exprs: []interface{}{
																		&actionExpr{
																			pos: position{line: 2953, col: 11, offset: 97635},
																			run: (*parser).callonListElements472,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2953, col: 11, offset: 97635},
																				expr: &charClassMatcher{
																					pos:        position{line: 2953, col: 12, offset: 97636},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1570, col: 9, offset: 52274},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1570, col: 18, offset: 52283},
																				run: (*parser).callonListElements476,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1570, col: 18, offset: 52283},
																					expr: &charClassMatcher{
																						pos:        position{line: 1570, col: 18, offset: 52283},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2965, col: 8, offset: 97889},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2958, col: 12, offset: 97749},
																					run: (*parser).callonListElements480,
																					expr: &choiceExpr{
																						pos: position{line: 2958, col: 13, offset: 97750},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2958, col: 13, offset: 97750},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 20, offset: 97757},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 29, offset: 97766},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2962, col: 8, offset: 97839},
																					expr: &anyMatcher{
																						line: 2962, col: 9, offset: 97840,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1300, col: 5, offset: 43451},
							label: "extraElements",
							expr: &ruleRefExpr{
								pos:  position{line: 1300, col: 20, offset: 43466},
								name: "ExtraListElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ExtraListElements",
			pos:  position{line: 1310, col: 1, offset: 43721},
			expr: &actionExpr{
				pos: position{line: 1310, col: 22, offset: 43742},
				run: (*parser).callonExtraListElements1,
				expr: &labeledExpr{
					pos:   position{line: 1310, col: 22, offset: 43742},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1310, col: 31, offset: 43751},
						expr: &ruleRefExpr{
							pos:  position{line: 1310, col: 32, offset: 43752},
							name: "ExtraListElement",
						},
					},
				},
			},
		},
		{
			name: "ExtraListElement",
			pos:  position{line: 1314, col: 1, offset: 43832},
			expr: &actionExpr{
				pos: position{line: 1315, col: 5, offset: 43971},
				run: (*parser).callonExtraListElement1,
				expr: &seqExpr{
					pos: position{line: 1315, col: 5, offset: 43971},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1315, col: 5, offset: 43971},
							expr: &notExpr{
								pos: position{line: 2962, col: 8, offset: 97839},
								expr: &anyMatcher{
									line: 2962, col: 9, offset: 97840,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1316, col: 5, offset: 43981},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1317, col: 9, offset: 43999},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1317, col: 13, offset: 44003},
										run: (*parser).callonExtraListElement8,
										expr: &seqExpr{
											pos: position{line: 1317, col: 13, offset: 44003},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1317, col: 13, offset: 44003},
													expr: &actionExpr{
														pos: position{line: 526, col: 14, offset: 17074},
														run: (*parser).callonExtraListElement11,
														expr: &seqExpr{
															pos: position{line: 526, col: 14, offset: 17074},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 526, col: 14, offset: 17074},
																	expr: &notExpr{
																		pos: position{line: 2962, col: 8, offset: 97839},
																		expr: &anyMatcher{
																			line: 2962, col: 9, offset: 97840,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 526, col: 19, offset: 17079},
																	expr: &actionExpr{
																		pos: position{line: 2948, col: 10, offset: 97526},
																		run: (*parser).callonExtraListElement17,
																		expr: &charClassMatcher{
																			pos:        position{line: 2948, col: 11, offset: 97527},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonExtraListElement20,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1318, col: 13, offset: 44027},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1434, col: 5, offset: 47638},
														run: (*parser).callonExtraListElement28,
														expr: &seqExpr{
															pos: position{line: 1434, col: 5, offset: 47638},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1434, col: 5, offset: 47638},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1441, col: 5, offset: 47846},
																		run: (*parser).callonExtraListElement31,
																		expr: &seqExpr{
																			pos: position{line: 1441, col: 5, offset: 47846},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1441, col: 5, offset: 47846},
																					expr: &actionExpr{
																						pos: position{line: 2948, col: 10, offset: 97526},
																						run: (*parser).callonExtraListElement34,
																						expr: &charClassMatcher{
																							pos:        position{line: 2948, col: 11, offset: 97527},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1441, col: 12, offset: 47853},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1443, col: 9, offset: 47916},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1443, col: 9, offset: 47916},
																								run: (*parser).callonExtraListElement38,
																								expr: &seqExpr{
																									pos: position{line: 1443, col: 9, offset: 47916},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1443, col: 9, offset: 47916},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1443, col: 16, offset: 47923},
																												run: (*parser).callonExtraListElement41,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1443, col: 16, offset: 47923},
																													expr: &litMatcher{
																														pos:        position{line: 1443, col: 17, offset: 47924},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1447, col: 9, offset: 48024},
																											run: (*parser).callonExtraListElement44,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1466, col: 11, offset: 48741},
																								run: (*parser).callonExtraListElement45,
																								expr: &seqExpr{
																									pos: position{line: 1466, col: 11, offset: 48741},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1466, col: 11, offset: 48741},
																											expr: &charClassMatcher{
																												pos:        position{line: 1466, col: 12, offset: 48742},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1466, col: 20, offset: 48750},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1468, col: 13, offset: 48867},
																								run: (*parser).callonExtraListElement50,
																								expr: &seqExpr{
																									pos: position{line: 1468, col: 13, offset: 48867},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1468, col: 14, offset: 48868},
																											val:        "[a-z]",
																											ranges:     []rune{'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1468, col: 21, offset: 48875},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1470, col: 13, offset: 48995},
																								run: (*parser).callonExtraListElement54,
																								expr: &seqExpr{
																									pos: position{line: 1470, col: 13, offset: 48995},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1470, col: 14, offset: 48996},
																											val:        "[A-Z]",
																											ranges:     []rune{'A', 'Z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1470, col: 21, offset: 49003},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1472, col: 13, offset: 49123},
																								run: (*parser).callonExtraListElement58,
																								expr: &seqExpr{
																									pos: position{line: 1472, col: 13, offset: 49123},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1472, col: 13, offset: 49123},
																											expr: &charClassMatcher{
																												pos:        position{line: 1472, col: 14, offset: 49124},
																												val:        "[ivxdlcm]",
																												chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1472, col: 26, offset: 49136},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1474, col: 13, offset: 49256},
																								run: (*parser).callonExtraListElement63,
																								expr: &seqExpr{
																									pos: position{line: 1474, col: 13, offset: 49256},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1474, col: 13, offset: 49256},
																											expr: &charClassMatcher{
																												pos:        position{line: 1474, col: 14, offset: 49257},
																												val:        "[IVXDLCM]",
																												chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1474, col: 26, offset: 49269},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2953, col: 11, offset: 97635},
																					run: (*parser).callonExtraListElement68,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2953, col: 11, offset: 97635},
																						expr: &charClassMatcher{
																							pos:        position{line: 2953, col: 12, offset: 97636},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1435, col: 5, offset: 47677},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1374, col: 5, offset: 45844},
																		run: (*parser).callonExtraListElement72,
																		expr: &seqExpr{
																			pos: position{line: 1374, col: 5, offset: 45844},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1374, col: 5, offset: 45844},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1374, col: 14, offset: 45853},
																						run: (*parser).callonExtraListElement75,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1374, col: 14, offset: 45853},
																							expr: &charClassMatcher{
																								pos:        position{line: 1374, col: 14, offset: 45853},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2965, col: 8, offset: 97889},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2958, col: 12, offset: 97749},
																							run: (*parser).callonExtraListElement79,
																							expr: &choiceExpr{
																								pos: position{line: 2958, col: 13, offset: 97750},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2958, col: 13, offset: 97750},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2958, col: 20, offset: 97757},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2958, col: 29, offset: 97766},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2962, col: 8, offset: 97839},
																							expr: &anyMatcher{
																								line: 2962, col: 9, offset: 97840,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1321, col: 13, offset: 44119},
										run: (*parser).callonExtraListElement86,
										expr: &seqExpr{
											pos: position{line: 1321, col: 13, offset: 44119},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1321, col: 13, offset: 44119},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1321, col: 24, offset: 44130},
														expr: &ruleRefExpr{
															pos:  position{line: 1321, col: 25, offset: 44131},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1322, col: 13, offset: 44162},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1434, col: 5, offset: 47638},
														run: (*parser).callonExtraListElement92,
														expr: &seqExpr{
															pos: position{line: 1434, col: 5, offset: 47638},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1434, col: 5, offset: 47638},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1441, col: 5, offset: 47846},
																		run: (*parser).callonExtraListElement95,
																		expr: &seqExpr{
																			pos: position{line: 1441, col: 5, offset: 47846},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1441, col: 5, offset: 47846},
																					expr: &actionExpr{
																						pos: position{line: 2948, col: 10, offset: 97526},
																						run: (*parser).callonExtraListElement98,
																						expr: &charClassMatcher{
																							pos:        position{line: 2948, col: 11, offset: 97527},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1441, col: 12, offset: 47853},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1443, col: 9, offset: 47916},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1443, col: 9, offset: 47916},
																								run: (*parser).callonExtraListElement102,
																								expr: &seqExpr{
																									pos: position{line: 1443, col: 9, offset: 47916},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1443, col: 9, offset: 47916},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1443, col: 16, offset: 47923},
																												run: (*parser).callonExtraListElement105,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1443, col: 16, offset: 47923},
																													expr: &litMatcher{
																														pos:        position{line: 1443, col: 17, offset: 47924},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1447, col: 9, offset: 48024},
																											run: (*parser).callonExtraListElement108,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1466, col: 11, offset: 48741},
																								run: (*parser).callonExtraListElement109,
																								expr: &seqExpr{
																									pos: position{line: 1466, col: 11, offset: 48741},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1466, col: 11, offset: 48741},
																											expr: &charClassMatcher{
																												pos:        position{line: 1466, col: 12, offset: 48742},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1466, col: 20, offset: 48750},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1468, col: 13, offset: 48867},
																								run: (*parser).callonExtraListElement114,
																								expr: &seqExpr{
																									pos: position{line: 1468, col: 13, offset: 48867},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1468, col: 14, offset: 48868},
																											val:        "[a-z]",
																											ranges:     []rune{'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1468, col: 21, offset: 48875},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1470, col: 13, offset: 48995},
																								run: (*parser).callonExtraListElement118,
																								expr: &seqExpr{
																									pos: position{line: 1470, col: 13, offset: 48995},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1470, col: 14, offset: 48996},
																											val:        "[A-Z]",
																											ranges:     []rune{'A', 'Z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1470, col: 21, offset: 49003},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1472, col: 13, offset: 49123},
																								run: (*parser).callonExtraListElement122,
																								expr: &seqExpr{
																									pos: position{line: 1472, col: 13, offset: 49123},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1472, col: 13, offset: 49123},
																											expr: &charClassMatcher{
																												pos:        position{line: 1472, col: 14, offset: 49124},
																												val:        "[ivxdlcm]",
																												chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1472, col: 26, offset: 49136},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1474, col: 13, offset: 49256},
																								run: (*parser).callonExtraListElement127,
																								expr: &seqExpr{
																									pos: position{line: 1474, col: 13, offset: 49256},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1474, col: 13, offset: 49256},
																											expr: &charClassMatcher{
																												pos:        position{line: 1474, col: 14, offset: 49257},
																												val:        "[IVXDLCM]",
																												chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1474, col: 26, offset: 49269},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2953, col: 11, offset: 97635},
																					run: (*parser).callonExtraListElement132,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2953, col: 11, offset: 97635},
																						expr: &charClassMatcher{
																							pos:        position{line: 2953, col: 12, offset: 97636},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1435, col: 5, offset: 47677},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1374, col: 5, offset: 45844},
																		run: (*parser).callonExtraListElement136,
																		expr: &seqExpr{
																			pos: position{line: 1374, col: 5, offset: 45844},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1374, col: 5, offset: 45844},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1374, col: 14, offset: 45853},
																						run: (*parser).callonExtraListElement139,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1374, col: 14, offset: 45853},
																							expr: &charClassMatcher{
																								pos:        position{line: 1374, col: 14, offset: 45853},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2965, col: 8, offset: 97889},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2958, col: 12, offset: 97749},
																							run: (*parser).callonExtraListElement143,
																							expr: &choiceExpr{
																								pos: position{line: 2958, col: 13, offset: 97750},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2958, col: 13, offset: 97750},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2958, col: 20, offset: 97757},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2958, col: 29, offset: 97766},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2962, col: 8, offset: 97839},
																							expr: &anyMatcher{
																								line: 2962, col: 9, offset: 97840,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1325, col: 13, offset: 44290},
										run: (*parser).callonExtraListElement150,
										expr: &seqExpr{
											pos: position{line: 1325, col: 13, offset: 44290},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1325, col: 13, offset: 44290},
													expr: &actionExpr{
														pos: position{line: 526, col: 14, offset: 17074},
														run: (*parser).callonExtraListElement153,
														expr: &seqExpr{
															pos: position{line: 526, col: 14, offset: 17074},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 526, col: 14, offset: 17074},
																	expr: &notExpr{
																		pos: position{line: 2962, col: 8, offset: 97839},
																		expr: &anyMatcher{
																			line: 2962, col: 9, offset: 97840,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 526, col: 19, offset: 17079},
																	expr: &actionExpr{
																		pos: position{line: 2948, col: 10, offset: 97526},
																		run: (*parser).callonExtraListElement159,
																		expr: &charClassMatcher{
																			pos:        position{line: 2948, col: 11, offset: 97527},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonExtraListElement162,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1326, col: 13, offset: 44314},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1484, col: 5, offset: 49535},
														run: (*parser).callonExtraListElement170,
														expr: &seqExpr{
															pos: position{line: 1484, col: 5, offset: 49535},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1484, col: 5, offset: 49535},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1491, col: 5, offset: 49808},
																		run: (*parser).callonExtraListElement173,
																		expr: &seqExpr{
																			pos: position{line: 1491, col: 5, offset: 49808},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1491, col: 5, offset: 49808},
																					expr: &actionExpr{
																						pos: position{line: 2948, col: 10, offset: 97526},
																						run: (*parser).callonExtraListElement176,
																						expr: &charClassMatcher{
																							pos:        position{line: 2948, col: 11, offset: 97527},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1491, col: 12, offset: 49815},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1491, col: 20, offset: 49823},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1493, col: 9, offset: 49880},
																								run: (*parser).callonExtraListElement180,
																								expr: &seqExpr{
																									pos: position{line: 1493, col: 9, offset: 49880},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1493, col: 9, offset: 49880},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1493, col: 16, offset: 49887},
																												run: (*parser).callonExtraListElement183,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1493, col: 16, offset: 49887},
																													expr: &litMatcher{
																														pos:        position{line: 1493, col: 17, offset: 49888},
																														val:        "*",
																														ignoreCase: false,
																														want:       "\"*\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1497, col: 9, offset: 49988},
																											run: (*parser).callonExtraListElement186,
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1514, col: 14, offset: 50695},
																								label: "depth",
																								expr: &actionExpr{
																									pos: position{line: 1514, col: 21, offset: 50702},
																									run: (*parser).callonExtraListElement188,
																									expr: &litMatcher{
																										pos:        position{line: 1514, col: 22, offset: 50703},
																										val:        "-",
																										ignoreCase: false,
																										want:       "\"-\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2953, col: 11, offset: 97635},
																					run: (*parser).callonExtraListElement190,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2953, col: 11, offset: 97635},
																						expr: &charClassMatcher{
																							pos:        position{line: 2953, col: 12, offset: 97636},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1485, col: 5, offset: 49576},
																	label: "checkstyle",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 1485, col: 16, offset: 49587},
																		expr: &actionExpr{
																			pos: position{line: 1521, col: 5, offset: 50864},
																			run: (*parser).callonExtraListElement195,
																			expr: &seqExpr{
																				pos: position{line: 1521, col: 5, offset: 50864},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 1521, col: 5, offset: 50864},
																						expr: &litMatcher{
																							pos:        position{line: 1521, col: 6, offset: 50865},
																							val:        "[",
																							ignoreCase: false,
																							want:       "\"[\"",
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 1521, col: 10, offset: 50869},
																						label: "style",
																						expr: &choiceExpr{
																							pos: position{line: 1522, col: 7, offset: 50883},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 1522, col: 7, offset: 50883},
																									run: (*parser).callonExtraListElement201,
																									expr: &litMatcher{
																										pos:        position{line: 1522, col: 7, offset: 50883},
																										val:        "[ ]",
																										ignoreCase: false,
																										want:       "\"[ ]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1523, col: 7, offset: 50928},
																									run: (*parser).callonExtraListElement203,
																									expr: &litMatcher{
																										pos:        position{line: 1523, col: 7, offset: 50928},
																										val:        "[*]",
																										ignoreCase: false,
																										want:       "\"[*]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1524, col: 7, offset: 50971},
																									run: (*parser).callonExtraListElement205,
																									expr: &litMatcher{
																										pos:        position{line: 1524, col: 7, offset: 50971},
																										val:        "[x]",
																										ignoreCase: false,
																										want:       "\"[x]\"",
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2953, col: 11, offset: 97635},
																						run: (*parser).callonExtraListElement207,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2953, col: 11, offset: 97635},
																							expr: &charClassMatcher{
																								pos:        position{line: 2953, col: 12, offset: 97636},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1486, col: 5, offset: 49626},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1374, col: 5, offset: 45844},
																		run: (*parser).callonExtraListElement211,
																		expr: &seqExpr{
																			pos: position{line: 1374, col: 5, offset: 45844},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1374, col: 5, offset: 45844},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1374, col: 14, offset: 45853},
																						run: (*parser).callonExtraListElement214,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1374, col: 14, offset: 45853},
																							expr: &charClassMatcher{
																								pos:        position{line: 1374, col: 14, offset: 45853},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2965, col: 8, offset: 97889},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2958, col: 12, offset: 97749},
																							run: (*parser).callonExtraListElement218,
																							expr: &choiceExpr{
																								pos: position{line: 2958, col: 13, offset: 97750},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2958, col: 13, offset: 97750},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2958, col: 20, offset: 97757},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2958, col: 29, offset: 97766},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2962, col: 8, offset: 97839},
																							expr: &anyMatcher{
																								line: 2962, col: 9, offset: 97840,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1329, col: 13, offset: 44408},
										run: (*parser).callonExtraListElement225,
										expr: &seqExpr{
											pos: position{line: 1329, col: 13, offset: 44408},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1329, col: 13, offset: 44408},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1329, col: 24, offset: 44419},
														expr: &ruleRefExpr{
															pos:  position{line: 1329, col: 25, offset: 44420},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1330, col: 13, offset: 44451},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1484, col: 5, offset: 49535},
														run: (*parser).callonExtraListElement231,
														expr: &seqExpr{
															pos: position{line: 1484, col: 5, offset: 49535},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1484, col: 5, offset: 49535},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1491, col: 5, offset: 49808},
																		run: (*parser).callonExtraListElement234,
																		expr: &seqExpr{
																			pos: position{line: 1491, col: 5, offset: 49808},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1491, col: 5, offset: 49808},
																					expr: &actionExpr{
																						pos: position{line: 2948, col: 10, offset: 97526},
																						run: (*parser).callonExtraListElement237,
																						expr: &charClassMatcher{
																							pos:        position{line: 2948, col: 11, offset: 97527},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1491, col: 12, offset: 49815},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1491, col: 20, offset: 49823},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1493, col: 9, offset: 49880},
																								run: (*parser).callonExtraListElement241,
																								expr: &seqExpr{
																									pos: position{line: 1493, col: 9, offset: 49880},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1493, col: 9, offset: 49880},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1493, col: 16, offset: 49887},
																												run: (*parser).callonExtraListElement244,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1493, col: 16, offset: 49887},
																													expr: &litMatcher{
																														pos:        position{line: 1493, col: 17, offset: 49888},
																														val:        "*",
																														ignoreCase: false,
																														want:       "\"*\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1497, col: 9, offset: 49988},
																											run: (*parser).callonExtraListElement247,
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1514, col: 14, offset: 50695},
																								label: "depth",
																								expr: &actionExpr{
																									pos: position{line: 1514, col: 21, offset: 50702},
																									run: (*parser).callonExtraListElement249,
																									expr: &litMatcher{
																										pos:        position{line: 1514, col: 22, offset: 50703},
																										val:        "-",
																										ignoreCase: false,
																										want:       "\"-\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2953, col: 11, offset: 97635},
																					run: (*parser).callonExtraListElement251,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2953, col: 11, offset: 97635},
																						expr: &charClassMatcher{
																							pos:        position{line: 2953, col: 12, offset: 97636},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1485, col: 5, offset: 49576},
																	label: "checkstyle",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 1485, col: 16, offset: 49587},
																		expr: &actionExpr{
																			pos: position{line: 1521, col: 5, offset: 50864},
																			run: (*parser).callonExtraListElement256,
																			expr: &seqExpr{
																				pos: position{line: 1521, col: 5, offset: 50864},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 1521, col: 5, offset: 50864},
																						expr: &litMatcher{
																							pos:        position{line: 1521, col: 6, offset: 50865},
																							val:        "[",
																							ignoreCase: false,
																							want:       "\"[\"",
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 1521, col: 10, offset: 50869},
																						label: "style",
																						expr: &choiceExpr{
																							pos: position{line: 1522, col: 7, offset: 50883},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 1522, col: 7, offset: 50883},
																									run: (*parser).callonExtraListElement262,
																									expr: &litMatcher{
																										pos:        position{line: 1522, col: 7, offset: 50883},
																										val:        "[ ]",
																										ignoreCase: false,
																										want:       "\"[ ]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1523, col: 7, offset: 50928},
																									run: (*parser).callonExtraListElement264,
																									expr: &litMatcher{
																										pos:        position{line: 1523, col: 7, offset: 50928},
																										val:        "[*]",
																										ignoreCase: false,
																										want:       "\"[*]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1524, col: 7, offset: 50971},
																									run: (*parser).callonExtraListElement266,
																									expr: &litMatcher{
																										pos:        position{line: 1524, col: 7, offset: 50971},
																										val:        "[x]",
																										ignoreCase: false,
																										want:       "\"[x]\"",
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2953, col: 11, offset: 97635},
																						run: (*parser).callonExtraListElement268,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2953, col: 11, offset: 97635},
																							expr: &charClassMatcher{
																								pos:        position{line: 2953, col: 12, offset: 97636},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1486, col: 5, offset: 49626},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1374, col: 5, offset: 45844},
																		run: (*parser).callonExtraListElement272,
																		expr: &seqExpr{
																			pos: position{line: 1374, col: 5, offset: 45844},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1374, col: 5, offset: 45844},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1374, col: 14, offset: 45853},
																						run: (*parser).callonExtraListElement275,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1374, col: 14, offset: 45853},
																							expr: &charClassMatcher{
																								pos:        position{line: 1374, col: 14, offset: 45853},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2965, col: 8, offset: 97889},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2958, col: 12, offset: 97749},
																							run: (*parser).callonExtraListElement279,
																							expr: &choiceExpr{
																								pos: position{line: 2958, col: 13, offset: 97750},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2958, col: 13, offset: 97750},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2958, col: 20, offset: 97757},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2958, col: 29, offset: 97766},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2962, col: 8, offset: 97839},
																							expr: &anyMatcher{
																								line: 2962, col: 9, offset: 97840,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1333, col: 13, offset: 44581},
										run: (*parser).callonExtraListElement286,
										expr: &seqExpr{
											pos: position{line: 1333, col: 13, offset: 44581},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1333, col: 13, offset: 44581},
													expr: &actionExpr{
														pos: position{line: 526, col: 14, offset: 17074},
														run: (*parser).callonExtraListElement289,
														expr: &seqExpr{
															pos: position{line: 526, col: 14, offset: 17074},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 526, col: 14, offset: 17074},
																	expr: &notExpr{
																		pos: position{line: 2962, col: 8, offset: 97839},
																		expr: &anyMatcher{
																			line: 2962, col: 9, offset: 97840,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 526, col: 19, offset: 17079},
																	expr: &actionExpr{
																		pos: position{line: 2948, col: 10, offset: 97526},
																		run: (*parser).callonExtraListElement295,
																		expr: &charClassMatcher{
																			pos:        position{line: 2948, col: 11, offset: 97527},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonExtraListElement298,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1334, col: 13, offset: 44605},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1591, col: 5, offset: 52820},
														run: (*parser).callonExtraListElement306,
														expr: &seqExpr{
															pos: position{line: 1591, col: 5, offset: 52820},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1591, col: 5, offset: 52820},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1597, col: 5, offset: 53021},
																		run: (*parser).callonExtraListElement309,
																		expr: &seqExpr{
																			pos: position{line: 1597, col: 5, offset: 53021},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1597, col: 5, offset: 53021},
																					val:        "<",
																					ignoreCase: false,
																					want:       "\"<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1597, col: 9, offset: 53025},
																					label: "ref",
																					expr: &actionExpr{
																						pos: position{line: 1597, col: 14, offset: 53030},
																						run: (*parser).callonExtraListElement313,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1597, col: 14, offset: 53030},
																							expr: &charClassMatcher{
																								pos:        position{line: 1597, col: 14, offset: 53030},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1597, col: 62, offset: 53078},
																					val:        ">",
																					ignoreCase: false,
																					want:       "\">\"",
																				},
																				&actionExpr{
																					pos: position{line: 2953, col: 11, offset: 97635},
																					run: (*parser).callonExtraListElement317,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2953, col: 11, offset: 97635},
																						expr: &charClassMatcher{
																							pos:        position{line: 2953, col: 12, offset: 97636},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1592, col: 5, offset: 52856},
																	label: "description",
																	expr: &actionExpr{
																		pos: position{line: 1602, col: 5, offset: 53156},
																		run: (*parser).callonExtraListElement321,
																		expr: &seqExpr{
																			pos: position{line: 1602, col: 5, offset: 53156},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1602, col: 5, offset: 53156},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1602, col: 14, offset: 53165},
																						run: (*parser).callonExtraListElement324,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1602, col: 14, offset: 53165},
																							expr: &charClassMatcher{
																								pos:        position{line: 1602, col: 14, offset: 53165},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2965, col: 8, offset: 97889},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2958, col: 12, offset: 97749},
																							run: (*parser).callonExtraListElement328,
																							expr: &choiceExpr{
																								pos: position{line: 2958, col: 13, offset: 97750},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2958, col: 13, offset: 97750},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2958, col: 20, offset: 97757},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2958, col: 29, offset: 97766},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2962, col: 8, offset: 97839},
																							expr: &anyMatcher{
																								line: 2962, col: 9, offset: 97840,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1337, col: 13, offset: 44697},
										run: (*parser).callonExtraListElement335,
										expr: &seqExpr{
											pos: position{line: 1337, col: 13, offset: 44697},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1337, col: 13, offset: 44697},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1337, col: 24, offset: 44708},
														expr: &ruleRefExpr{
															pos:  position{line: 1337, col: 25, offset: 44709},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1338, col: 13, offset: 44740},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1591, col: 5, offset: 52820},
														run: (*parser).callonExtraListElement341,
														expr: &seqExpr{
															pos: position{line: 1591, col: 5, offset: 52820},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1591, col: 5, offset: 52820},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1597, col: 5, offset: 53021},
																		run: (*parser).callonExtraListElement344,
																		expr: &seqExpr{
																			pos: position{line: 1597, col: 5, offset: 53021},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1597, col: 5, offset: 53021},
																					val:        "<",
																					ignoreCase: false,
																					want:       "\"<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1597, col: 9, offset: 53025},
																					label: "ref",
																					expr: &actionExpr{
																						pos: position{line: 1597, col: 14, offset: 53030},
																						run: (*parser).callonExtraListElement348,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1597, col: 14, offset: 53030},
																							expr: &charClassMatcher{
																								pos:        position{line: 1597, col: 14, offset: 53030},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1597, col: 62, offset: 53078},
																					val:        ">",
																					ignoreCase: false,
																					want:       "\">\"",
																				},
																				&actionExpr{
																					pos: position{line: 2953, col: 11, offset: 97635},
																					run: (*parser).callonExtraListElement352,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2953, col: 11, offset: 97635},
																						expr: &charClassMatcher{
																							pos:        position{line: 2953, col: 12, offset: 97636},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1592, col: 5, offset: 52856},
																	label: "description",
																	expr: &actionExpr{
																		pos: position{line: 1602, col: 5, offset: 53156},
																		run: (*parser).callonExtraListElement356,
																		expr: &seqExpr{
																			pos: position{line: 1602, col: 5, offset: 53156},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1602, col: 5, offset: 53156},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1602, col: 14, offset: 53165},
																						run: (*parser).callonExtraListElement359,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1602, col: 14, offset: 53165},
																							expr: &charClassMatcher{
																								pos:        position{line: 1602, col: 14, offset: 53165},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2965, col: 8, offset: 97889},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2958, col: 12, offset: 97749},
																							run: (*parser).callonExtraListElement363,
																							expr: &choiceExpr{
																								pos: position{line: 2958, col: 13, offset: 97750},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2958, col: 13, offset: 97750},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2958, col: 20, offset: 97757},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2958, col: 29, offset: 97766},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2962, col: 8, offset: 97839},
																							expr: &anyMatcher{
																								line: 2962, col: 9, offset: 97840,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1341, col: 11, offset: 44866},
										name: "ListElementContinuation",
									},
									&actionExpr{
										pos: position{line: 1342, col: 13, offset: 44902},
										run: (*parser).callonExtraListElement371,
										expr: &seqExpr{
											pos: position{line: 1342, col: 13, offset: 44902},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1342, col: 13, offset: 44902},
													expr: &actionExpr{
														pos: position{line: 526, col: 14, offset: 17074},
														run: (*parser).callonExtraListElement374,
														expr: &seqExpr{
															pos: position{line: 526, col: 14, offset: 17074},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 526, col: 14, offset: 17074},
																	expr: &notExpr{
																		pos: position{line: 2962, col: 8, offset: 97839},
																		expr: &anyMatcher{
																			line: 2962, col: 9, offset: 97840,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 526, col: 19, offset: 17079},
																	expr: &actionExpr{
																		pos: position{line: 2948, col: 10, offset: 97526},
																		run: (*parser).callonExtraListElement380,
																		expr: &charClassMatcher{
																			pos:        position{line: 2948, col: 11, offset: 97527},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonExtraListElement383,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1343, col: 13, offset: 44926},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1533, col: 5, offset: 51164},
														run: (*parser).callonExtraListElement391,
														expr: &seqExpr{
															pos: position{line: 1533, col: 5, offset: 51164},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1533, col: 5, offset: 51164},
																	label: "term",
																	expr: &actionExpr{
																		pos: position{line: 1541, col: 5, offset: 51423},
																		run: (*parser).callonExtraListElement394,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1541, col: 5, offset: 51423},
																			expr: &seqExpr{
																				pos: position{line: 1541, col: 6, offset: 51424},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1541, col: 6, offset: 51424},
																						expr: &actionExpr{
																							pos: position{line: 1546, col: 5, offset: 51555},
																							run: (*parser).callonExtraListElement398,
																							expr: &seqExpr{
																								pos: position{line: 1546, col: 5, offset: 51555},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1546, col: 5, offset: 51555},
																										label: "separator",
																										expr: &actionExpr{
																											pos: position{line: 1546, col: 16, offset: 51566},
																											run: (*parser).callonExtraListElement401,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1546, col: 16, offset: 51566},
																												expr: &litMatcher{
																													pos:        position{line: 1546, col: 17, offset: 51567},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 1549, col: 5, offset: 51624},
																										run: (*parser).callonExtraListElement404,
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1541, col: 35, offset: 51453},
																						expr: &choiceExpr{
																							pos: position{line: 2965, col: 8, offset: 97889},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2958, col: 12, offset: 97749},
																									run: (*parser).callonExtraListElement407,
																									expr: &choiceExpr{
																										pos: position{line: 2958, col: 13, offset: 97750},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2958, col: 13, offset: 97750},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 20, offset: 97757},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 29, offset: 97766},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2962, col: 8, offset: 97839},
																									expr: &anyMatcher{
																										line: 2962, col: 9, offset: 97840,
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1541, col: 40, offset: 51458,
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1534, col: 5, offset: 51199},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1546, col: 5, offset: 51555},
																		run: (*parser).callonExtraListElement416,
																		expr: &seqExpr{
																			pos: position{line: 1546, col: 5, offset: 51555},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1546, col: 5, offset: 51555},
																					label: "separator",
																					expr: &actionExpr{
																						pos: position{line: 1546, col: 16, offset: 51566},
																						run: (*parser).callonExtraListElement419,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1546, col: 16, offset: 51566},
																							expr: &litMatcher{
																								pos:        position{line: 1546, col: 17, offset: 51567},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1549, col: 5, offset: 51624},
																					run: (*parser).callonExtraListElement422,
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1535, col: 5, offset: 51244},
																	label: "description",
																	expr: &choiceExpr{
																		pos: position{line: 1557, col: 5, offset: 51874},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1559, col: 9, offset: 51939},
																				run: (*parser).callonExtraListElement425,
																				expr: &seqExpr{
																					pos: position{line: 1559, col: 9, offset: 51939},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1559, col: 9, offset: 51939},
																							expr: &actionExpr{
																								pos: position{line: 2948, col: 10, offset: 97526},
																								run: (*parser).callonExtraListElement428,
																								expr: &charClassMatcher{
																									pos:        position{line: 2948, col: 11, offset: 97527},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2965, col: 8, offset: 97889},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2958, col: 12, offset: 97749},
																									run: (*parser).callonExtraListElement431,
																									expr: &choiceExpr{
																										pos: position{line: 2958, col: 13, offset: 97750},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2958, col: 13, offset: 97750},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 20, offset: 97757},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 29, offset: 97766},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2962, col: 8, offset: 97839},
																									expr: &anyMatcher{
																										line: 2962, col: 9, offset: 97840,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1560, col: 9, offset: 51959},
																							expr: &actionExpr{
																								pos: position{line: 526, col: 14, offset: 17074},
																								run: (*parser).callonExtraListElement439,
																								expr: &seqExpr{
																									pos: position{line: 526, col: 14, offset: 17074},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 526, col: 14, offset: 17074},
																											expr: &notExpr{
																												pos: position{line: 2962, col: 8, offset: 97839},
																												expr: &anyMatcher{
																													line: 2962, col: 9, offset: 97840,
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 526, col: 19, offset: 17079},
																											expr: &actionExpr{
																												pos: position{line: 2948, col: 10, offset: 97526},
																												run: (*parser).callonExtraListElement445,
																												expr: &charClassMatcher{
																													pos:        position{line: 2948, col: 11, offset: 97527},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2965, col: 8, offset: 97889},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2958, col: 12, offset: 97749},
																													run: (*parser).callonExtraListElement448,
																													expr: &choiceExpr{
																														pos: position{line: 2958, col: 13, offset: 97750},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2958, col: 13, offset: 97750},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2958, col: 20, offset: 97757},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2958, col: 29, offset: 97766},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2962, col: 8, offset: 97839},
																													expr: &anyMatcher{
																														line: 2962, col: 9, offset: 97840,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1561, col: 9, offset: 51979},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1561, col: 17, offset: 51987},
																								expr: &actionExpr{
																									pos: position{line: 1359, col: 5, offset: 45418},
																									run: (*parser).callonExtraListElement457,
																									expr: &seqExpr{
																										pos: position{line: 1359, col: 5, offset: 45418},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 1359, col: 5, offset: 45418},
																												expr: &actionExpr{
																													pos: position{line: 526, col: 14, offset: 17074},
																													run: (*parser).callonExtraListElement460,
																													expr: &seqExpr{
																														pos: position{line: 526, col: 14, offset: 17074},
																														exprs: []interface{}{
																															&notExpr{
																																pos: position{line: 526, col: 14, offset: 17074},
																																expr: &notExpr{
																																	pos: position{line: 2962, col: 8, offset: 97839},
																																	expr: &anyMatcher{
																																		line: 2962, col: 9, offset: 97840,
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 526, col: 19, offset: 17079},
																																expr: &actionExpr{
																																	pos: position{line: 2948, col: 10, offset: 97526},
																																	run: (*parser).callonExtraListElement466,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2948, col: 11, offset: 97527},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 2965, col: 8, offset: 97889},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 2958, col: 12, offset: 97749},
																																		run: (*parser).callonExtraListElement469,
																																		expr: &choiceExpr{
																																			pos: position{line: 2958, col: 13, offset: 97750},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2958, col: 13, offset: 97750},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2958, col: 20, offset: 97757},
																																					val:        "\r\n",
																																					ignoreCase: false,
																																					want:       "\"\\r\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2958, col: 29, offset: 97766},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 2962, col: 8, offset: 97839},
																																		expr: &anyMatcher{
																																			line: 2962, col: 9, offset: 97840,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1360, col: 5, offset: 45433},
																												expr: &seqExpr{
																													pos: position{line: 1392, col: 34, offset: 46343},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 1392, col: 34, offset: 46343},
																															val:        "+",
																															ignoreCase: false,
																															want:       "\"+\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1392, col: 38, offset: 46347},
																															expr: &actionExpr{
																																pos: position{line: 2948, col: 10, offset: 97526},
																																run: (*parser).callonExtraListElement480,
																																expr: &charClassMatcher{
																																	pos:        position{line: 2948, col: 11, offset: 97527},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 2958, col: 12, offset: 97749},
																															run: (*parser).callonExtraListElement482,
																															expr: &choiceExpr{
																																pos: position{line: 2958, col: 13, offset: 97750},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2958, col: 13, offset: 97750},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2958, col: 20, offset: 97757},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2958, col: 29, offset: 97766},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1361, col: 5, offset: 45468},
																												expr: &actionExpr{
																													pos: position{line: 1441, col: 5, offset: 47846},
																													run: (*parser).callonExtraListElement488,
																													expr: &seqExpr{
																														pos: position{line: 1441, col: 5, offset: 47846},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 1441, col: 5, offset: 47846},
																																expr: &actionExpr{
																																	pos: position{line: 2948, col: 10, offset: 97526},
																																	run: (*parser).callonExtraListElement491,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2948, col: 11, offset: 97527},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 1441, col: 12, offset: 47853},
																																label: "prefix",
																																expr: &choiceExpr{
																																	pos: position{line: 1443, col: 9, offset: 47916},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 1443, col: 9, offset: 47916},
																																			run: (*parser).callonExtraListElement495,
																																			expr: &seqExpr{
																																				pos: position{line: 1443, col: 9, offset: 47916},
																																				exprs: []interface{}{
																																					&labeledExpr{
																																						pos:   position{line: 1443, col: 9, offset: 47916},
																																						label: "depth",
																																						expr: &actionExpr{
																																							pos: position{line: 1443, col: 16, offset: 47923},
																																							run: (*parser).callonExtraListElement498,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 1443, col: 16, offset: 47923},
																																								expr: &litMatcher{
																																									pos:        position{line: 1443, col: 17, offset: 47924},
																																									val:        ".",
																																									ignoreCase: false,
																																									want:       "\".\"",
																																								},
																																							},
																																						},
																																					},
																																					&andCodeExpr{
																																						pos: position{line: 1447, col: 9, offset: 48024},
																																						run: (*parser).callonExtraListElement501,
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1466, col: 11, offset: 48741},
																																			run: (*parser).callonExtraListElement502,
																																			expr: &seqExpr{
																																				pos: position{line: 1466, col: 11, offset: 48741},
																																				exprs: []interface{}{
																																					&oneOrMoreExpr{
																																						pos: position{line: 1466, col: 11, offset: 48741},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1466, col: 12, offset: 48742},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1466, col: 20, offset: 48750},
																																						val:        ".",
																																						ignoreCase: false,
																																						want:       "\".\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1468, col: 13, offset: 48867},
																																			run: (*parser).callonExtraListElement507,
																																			expr: &seqExpr{
																																				pos: position{line: 1468, col: 13, offset: 48867},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 1468, col: 14, offset: 48868},
																																						val:        "[a-z]",
																																						ranges:     []rune{'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1468, col: 21, offset: 48875},
																																						val:        ".",
																																						ignoreCase: false,
																																						want:       "\".\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1470, col: 13, offset: 48995},
																																			run: (*parser).callonExtraListElement511,
																																			expr: &seqExpr{
																																				pos: position{line: 1470, col: 13, offset: 48995},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 1470, col: 14, offset: 48996},
																																						val:        "[A-Z]",
																																						ranges:     []rune{'A', 'Z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1470, col: 21, offset: 49003},
																																						val:        ".",
																																						ignoreCase: false,
																																						want:       "\".\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1472, col: 13, offset: 49123},
																																			run: (*parser).callonExtraListElement515,
																																			expr: &seqExpr{
																																				pos: position{line: 1472, col: 13, offset: 49123},
																																				exprs: []interface{}{
																																					&oneOrMoreExpr{
																																						pos: position{line: 1472, col: 13, offset: 49123},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1472, col: 14, offset: 49124},
																																							val:        "[ivxdlcm]",
																																							chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1472, col: 26, offset: 49136},
																																						val:        ")",
																																						ignoreCase: false,
																																						want:       "\")\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1474, col: 13, offset: 49256},
																																			run: (*parser).callonExtraListElement520,
																																			expr: &seqExpr{
																																				pos: position{line: 1474, col: 13, offset: 49256},
																																				exprs: []interface{}{
																																					&oneOrMoreExpr{
																																						pos: position{line: 1474, col: 13, offset: 49256},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1474, col: 14, offset: 49257},
																																							val:        "[IVXDLCM]",
																																							chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1474, col: 26, offset: 49269},
																																						val:        ")",
																																						ignoreCase: false,
																																						want:       "\")\"",
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 2953, col: 11, offset: 97635},
																																run: (*parser).callonExtraListElement525,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 2953, col: 11, offset: 97635},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2953, col: 12, offset: 97636},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1362, col: 5, offset: 45498},
																												expr: &actionExpr{
																													pos: position{line: 1491, col: 5, offset: 49808},
																													run: (*parser).callonExtraListElement529,
																													expr: &seqExpr{
																														pos: position{line: 1491, col: 5, offset: 49808},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 1491, col: 5, offset: 49808},
																																expr: &actionExpr{
																																	pos: position{line: 2948, col: 10, offset: 97526},
																																	run: (*parser).callonExtraListElement532,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2948, col: 11, offset: 97527},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 1491, col: 12, offset: 49815},
																																label: "prefix",
																																expr: &choiceExpr{
																																	pos: position{line: 1491, col: 20, offset: 49823},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 1493, col: 9, offset: 49880},
																																			run: (*parser).callonExtraListElement536,
																																			expr: &seqExpr{
																																				pos: position{line: 1493, col: 9, offset: 49880},
																																				exprs: []interface{}{
																																					&labeledExpr{
																																						pos:   position{line: 1493, col: 9, offset: 49880},
																																						label: "depth",
																																						expr: &actionExpr{
																																							pos: position{line: 1493, col: 16, offset: 49887},
																																							run: (*parser).callonExtraListElement539,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 1493, col: 16, offset: 49887},
																																								expr: &litMatcher{
																																									pos:        position{line: 1493, col: 17, offset: 49888},
																																									val:        "*",
																																									ignoreCase: false,
																																									want:       "\"*\"",
																																								},
																																							},
																																						},
																																					},
																																					&andCodeExpr{
																																						pos: position{line: 1497, col: 9, offset: 49988},
																																						run: (*parser).callonExtraListElement542,
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 1514, col: 14, offset: 50695},
																																			label: "depth",
																																			expr: &actionExpr{
																																				pos: position{line: 1514, col: 21, offset: 50702},
																																				run: (*parser).callonExtraListElement544,
																																				expr: &litMatcher{
																																					pos:        position{line: 1514, col: 22, offset: 50703},
																																					val:        "-",
																																					ignoreCase: false,
																																					want:       "\"-\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 2953, col: 11, offset: 97635},
																																run: (*parser).callonExtraListElement546,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 2953, col: 11, offset: 97635},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2953, col: 12, offset: 97636},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1363, col: 5, offset: 45530},
																												expr: &actionExpr{
																													pos: position{line: 1597, col: 5, offset: 53021},
																													run: (*parser).callonExtraListElement550,
																													expr: &seqExpr{
																														pos: position{line: 1597, col: 5, offset: 53021},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 1597, col: 5, offset: 53021},
																																val:        "<",
																																ignoreCase: false,
																																want:       "\"<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 1597, col: 9, offset: 53025},
																																label: "ref",
																																expr: &actionExpr{
																																	pos: position{line: 1597, col: 14, offset: 53030},
																																	run: (*parser).callonExtraListElement554,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1597, col: 14, offset: 53030},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1597, col: 14, offset: 53030},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 1597, col: 62, offset: 53078},
																																val:        ">",
																																ignoreCase: false,
																																want:       "\">\"",
																															},
																															&actionExpr{
																																pos: position{line: 2953, col: 11, offset: 97635},
																																run: (*parser).callonExtraListElement558,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 2953, col: 11, offset: 97635},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2953, col: 12, offset: 97636},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1364, col: 5, offset: 45560},
																												expr: &seqExpr{
																													pos: position{line: 1364, col: 7, offset: 45562},
																													exprs: []interface{}{
																														&actionExpr{
																															pos: position{line: 1541, col: 5, offset: 51423},
																															run: (*parser).callonExtraListElement563,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1541, col: 5, offset: 51423},
																																expr: &seqExpr{
																																	pos: position{line: 1541, col: 6, offset: 51424},
																																	exprs: []interface{}{
																																		&notExpr{
																																			pos: position{line: 1541, col: 6, offset: 51424},
																																			expr: &actionExpr{
																																				pos: position{line: 1546, col: 5, offset: 51555},
																																				run: (*parser).callonExtraListElement567,
																																				expr: &seqExpr{
																																					pos: position{line: 1546, col: 5, offset: 51555},
																																					exprs: []interface{}{
																																						&labeledExpr{
																																							pos:   position{line: 1546, col: 5, offset: 51555},
																																							label: "separator",
																																							expr: &actionExpr{
																																								pos: position{line: 1546, col: 16, offset: 51566},
																																								run: (*parser).callonExtraListElement570,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 1546, col: 16, offset: 51566},
																																									expr: &litMatcher{
																																										pos:        position{line: 1546, col: 17, offset: 51567},
																																										val:        ":",
																																										ignoreCase: false,
																																										want:       "\":\"",
																																									},
																																								},
																																							},
																																						},
																																						&andCodeExpr{
																																							pos: position{line: 1549, col: 5, offset: 51624},
																																							run: (*parser).callonExtraListElement573,
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 1541, col: 35, offset: 51453},
																																			expr: &choiceExpr{
																																				pos: position{line: 2965, col: 8, offset: 97889},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2958, col: 12, offset: 97749},
																																						run: (*parser).callonExtraListElement576,
																																						expr: &choiceExpr{
																																							pos: position{line: 2958, col: 13, offset: 97750},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2958, col: 13, offset: 97750},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2958, col: 20, offset: 97757},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2958, col: 29, offset: 97766},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2962, col: 8, offset: 97839},
																																						expr: &anyMatcher{
																																							line: 2962, col: 9, offset: 97840,
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&anyMatcher{
																																			line: 1541, col: 40, offset: 51458,
																																		},
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1546, col: 5, offset: 51555},
																															run: (*parser).callonExtraListElement584,
																															expr: &seqExpr{
																																pos: position{line: 1546, col: 5, offset: 51555},
																																exprs: []interface{}{
																																	&labeledExpr{
																																		pos:   position{line: 1546, col: 5, offset: 51555},
																																		label: "separator",
																																		expr: &actionExpr{
																																			pos: position{line: 1546, col: 16, offset: 51566},
																																			run: (*parser).callonExtraListElement587,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1546, col: 16, offset: 51566},
																																				expr: &litMatcher{
																																					pos:        position{line: 1546, col: 17, offset: 51567},
																																					val:        ":",
																																					ignoreCase: false,
																																					want:       "\":\"",
																																				},
																																			},
																																		},
																																	},
																																	&andCodeExpr{
																																		pos: position{line: 1549, col: 5, offset: 51624},
																																		run: (*parser).callonExtraListElement590,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1365, col: 5, offset: 45618},
																												expr: &actionExpr{
																													pos: position{line: 571, col: 5, offset: 18595},
																													run: (*parser).callonExtraListElement592,
																													expr: &seqExpr{
																														pos: position{line: 571, col: 5, offset: 18595},
																														exprs: []interface{}{
																															&notExpr{
																																pos: position{line: 571, col: 5, offset: 18595},
																																expr: &charClassMatcher{
																																	pos:        position{line: 2860, col: 13, offset: 94811},
																																	val:        "[0-9\\pL]",
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 572, col: 5, offset: 18625},
																																label: "delimiter",
																																expr: &choiceExpr{
																																	pos: position{line: 573, col: 9, offset: 18645},
																																	alternatives: []interface{}{
																																		&seqExpr{
																																			pos: position{line: 585, col: 26, offset: 18966},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 585, col: 26, offset: 18966},
																																					val:        "////",
																																					ignoreCase: false,
																																					want:       "\"////\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 585, col: 33, offset: 18973},
																																					expr: &actionExpr{
																																						pos: position{line: 2948, col: 10, offset: 97526},
																																						run: (*parser).callonExtraListElement601,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2948, col: 11, offset: 97527},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2965, col: 8, offset: 97889},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2958, col: 12, offset: 97749},
																																							run: (*parser).callonExtraListElement604,
																																							expr: &choiceExpr{
																																								pos: position{line: 2958, col: 13, offset: 97750},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 13, offset: 97750},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 20, offset: 97757},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 29, offset: 97766},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2962, col: 8, offset: 97839},
																																							expr: &anyMatcher{
																																								line: 2962, col: 9, offset: 97840,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 587, col: 26, offset: 19010},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 587, col: 26, offset: 19010},
																																					val:        "====",
																																					ignoreCase: false,
																																					want:       "\"====\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 587, col: 33, offset: 19017},
																																					expr: &actionExpr{
																																						pos: position{line: 2948, col: 10, offset: 97526},
																																						run: (*parser).callonExtraListElement614,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2948, col: 11, offset: 97527},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2965, col: 8, offset: 97889},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2958, col: 12, offset: 97749},
																																							run: (*parser).callonExtraListElement617,
																																							expr: &choiceExpr{
																																								pos: position{line: 2958, col: 13, offset: 97750},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 13, offset: 97750},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 20, offset: 97757},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 29, offset: 97766},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2962, col: 8, offset: 97839},
																																							expr: &anyMatcher{
																																								line: 2962, col: 9, offset: 97840,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 589, col: 25, offset: 19053},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 589, col: 25, offset: 19053},
																																					val:        "```",
																																					ignoreCase: false,
																																					want:       "\"```\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 589, col: 31, offset: 19059},
																																					expr: &actionExpr{
																																						pos: position{line: 2948, col: 10, offset: 97526},
																																						run: (*parser).callonExtraListElement627,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2948, col: 11, offset: 97527},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2965, col: 8, offset: 97889},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2958, col: 12, offset: 97749},
																																							run: (*parser).callonExtraListElement630,
																																							expr: &choiceExpr{
																																								pos: position{line: 2958, col: 13, offset: 97750},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 13, offset: 97750},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 20, offset: 97757},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 29, offset: 97766},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2962, col: 8, offset: 97839},
																																							expr: &anyMatcher{
																																								line: 2962, col: 9, offset: 97840,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 591, col: 26, offset: 19096},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 591, col: 26, offset: 19096},
																																					val:        "----",
																																					ignoreCase: false,
																																					want:       "\"----\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 591, col: 33, offset: 19103},
																																					expr: &actionExpr{
																																						pos: position{line: 2948, col: 10, offset: 97526},
																																						run: (*parser).callonExtraListElement640,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2948, col: 11, offset: 97527},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2965, col: 8, offset: 97889},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2958, col: 12, offset: 97749},
																																							run: (*parser).callonExtraListElement643,
																																							expr: &choiceExpr{
																																								pos: position{line: 2958, col: 13, offset: 97750},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 13, offset: 97750},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 20, offset: 97757},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 29, offset: 97766},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2962, col: 8, offset: 97839},
																																							expr: &anyMatcher{
																																								line: 2962, col: 9, offset: 97840,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 593, col: 26, offset: 19140},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 593, col: 26, offset: 19140},
																																					val:        "....",
																																					ignoreCase: false,
																																					want:       "\"....\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 593, col: 33, offset: 19147},
																																					expr: &actionExpr{
																																						pos: position{line: 2948, col: 10, offset: 97526},
																																						run: (*parser).callonExtraListElement653,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2948, col: 11, offset: 97527},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2965, col: 8, offset: 97889},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2958, col: 12, offset: 97749},
																																							run: (*parser).callonExtraListElement656,
																																							expr: &choiceExpr{
																																								pos: position{line: 2958, col: 13, offset: 97750},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 13, offset: 97750},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 20, offset: 97757},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 29, offset: 97766},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2962, col: 8, offset: 97839},
																																							expr: &anyMatcher{
																																								line: 2962, col: 9, offset: 97840,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 595, col: 30, offset: 19188},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 595, col: 30, offset: 19188},
																																					val:        "++++",
																																					ignoreCase: false,
																																					want:       "\"++++\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 595, col: 37, offset: 19195},
																																					expr: &actionExpr{
																																						pos: position{line: 2948, col: 10, offset: 97526},
																																						run: (*parser).callonExtraListElement666,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2948, col: 11, offset: 97527},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2965, col: 8, offset: 97889},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2958, col: 12, offset: 97749},
																																							run: (*parser).callonExtraListElement669,
																																							expr: &choiceExpr{
																																								pos: position{line: 2958, col: 13, offset: 97750},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 13, offset: 97750},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 20, offset: 97757},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 29, offset: 97766},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2962, col: 8, offset: 97839},
																																							expr: &anyMatcher{
																																								line: 2962, col: 9, offset: 97840,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 597, col: 24, offset: 19230},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 597, col: 24, offset: 19230},
																																					val:        "____",
																																					ignoreCase: false,
																																					want:       "\"____\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 597, col: 31, offset: 19237},
																																					expr: &actionExpr{
																																						pos: position{line: 2948, col: 10, offset: 97526},
																																						run: (*parser).callonExtraListElement679,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2948, col: 11, offset: 97527},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2965, col: 8, offset: 97889},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2958, col: 12, offset: 97749},
																																							run: (*parser).callonExtraListElement682,
																																							expr: &choiceExpr{
																																								pos: position{line: 2958, col: 13, offset: 97750},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 13, offset: 97750},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 20, offset: 97757},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 29, offset: 97766},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2962, col: 8, offset: 97839},
																																							expr: &anyMatcher{
																																								line: 2962, col: 9, offset: 97840,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 599, col: 26, offset: 19274},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 599, col: 26, offset: 19274},
																																					val:        "****",
																																					ignoreCase: false,
																																					want:       "\"****\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 599, col: 33, offset: 19281},
																																					expr: &actionExpr{
																																						pos: position{line: 2948, col: 10, offset: 97526},
																																						run: (*parser).callonExtraListElement692,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2948, col: 11, offset: 97527},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2965, col: 8, offset: 97889},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2958, col: 12, offset: 97749},
																																							run: (*parser).callonExtraListElement695,
																																							expr: &choiceExpr{
																																								pos: position{line: 2958, col: 13, offset: 97750},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 13, offset: 97750},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 20, offset: 97757},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 29, offset: 97766},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2962, col: 8, offset: 97839},
																																							expr: &anyMatcher{
																																								line: 2962, col: 9, offset: 97840,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1366, col: 5, offset: 45638},
																												label: "content",
																												expr: &actionExpr{
																													pos: position{line: 1366, col: 14, offset: 45647},
																													run: (*parser).callonExtraListElement703,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1366, col: 14, offset: 45647},
																														expr: &charClassMatcher{
																															pos:        position{line: 1366, col: 14, offset: 45647},
																															val:        "[^\\r\\n]",
																															chars:      []rune{'\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2965, col: 8, offset: 97889},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2958, col: 12, offset: 97749},
																														run: (*parser).callonExtraListElement707,
																														expr: &choiceExpr{
																															pos: position{line: 2958, col: 13, offset: 97750},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2958, col: 13, offset: 97750},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2958, col: 20, offset: 97757},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2958, col: 29, offset: 97766},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2962, col: 8, offset: 97839},
																														expr: &anyMatcher{
																															line: 2962, col: 9, offset: 97840,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1569, col: 9, offset: 52222},
																				run: (*parser).callonExtraListElement714,
																				expr: &seqExpr{
																					pos: position{line: 1569, col: 9, offset: 52222},
																					exprs: []interface{}{
																						&actionExpr{
																							pos: position{line: 2953, col: 11, offset: 97635},
																							run: (*parser).callonExtraListElement716,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2953, col: 11, offset: 97635},
																								expr: &charClassMatcher{
																									pos:        position{line: 2953, col: 12, offset: 97636},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1570, col: 9, offset: 52274},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 1570, col: 18, offset: 52283},
																								run: (*parser).callonExtraListElement720,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1570, col: 18, offset: 52283},
																									expr: &charClassMatcher{
																										pos:        position{line: 1570, col: 18, offset: 52283},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2965, col: 8, offset: 97889},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2958, col: 12, offset: 97749},
																									run: (*parser).callonExtraListElement724,
																									expr: &choiceExpr{
																										pos: position{line: 2958, col: 13, offset: 97750},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2958, col: 13, offset: 97750},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 20, offset: 97757},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 29, offset: 97766},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2962, col: 8, offset: 97839},
																									expr: &anyMatcher{
																										line: 2962, col: 9, offset: 97840,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1346, col: 13, offset: 45018},
										run: (*parser).callonExtraListElement731,
										expr: &seqExpr{
											pos: position{line: 1346, col: 13, offset: 45018},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1346, col: 13, offset: 45018},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1346, col: 24, offset: 45029},
														expr: &ruleRefExpr{
															pos:  position{line: 1346, col: 25, offset: 45030},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1347, col: 13, offset: 45061},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1533, col: 5, offset: 51164},
														run: (*parser).callonExtraListElement737,
														expr: &seqExpr{
															pos: position{line: 1533, col: 5, offset: 51164},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1533, col: 5, offset: 51164},
																	label: "term",
																	expr: &actionExpr{
																		pos: position{line: 1541, col: 5, offset: 51423},
																		run: (*parser).callonExtraListElement740,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1541, col: 5, offset: 51423},
																			expr: &seqExpr{
																				pos: position{line: 1541, col: 6, offset: 51424},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1541, col: 6, offset: 51424},
																						expr: &actionExpr{
																							pos: position{line: 1546, col: 5, offset: 51555},
																							run: (*parser).callonExtraListElement744,
																							expr: &seqExpr{
																								pos: position{line: 1546, col: 5, offset: 51555},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1546, col: 5, offset: 51555},
																										label: "separator",
																										expr: &actionExpr{
																											pos: position{line: 1546, col: 16, offset: 51566},
																											run: (*parser).callonExtraListElement747,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1546, col: 16, offset: 51566},
																												expr: &litMatcher{
																													pos:        position{line: 1546, col: 17, offset: 51567},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 1549, col: 5, offset: 51624},
																										run: (*parser).callonExtraListElement750,
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1541, col: 35, offset: 51453},
																						expr: &choiceExpr{
																							pos: position{line: 2965, col: 8, offset: 97889},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2958, col: 12, offset: 97749},
																									run: (*parser).callonExtraListElement753,
																									expr: &choiceExpr{
																										pos: position{line: 2958, col: 13, offset: 97750},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2958, col: 13, offset: 97750},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 20, offset: 97757},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 29, offset: 97766},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2962, col: 8, offset: 97839},
																									expr: &anyMatcher{
																										line: 2962, col: 9, offset: 97840,
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1541, col: 40, offset: 51458,
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1534, col: 5, offset: 51199},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1546, col: 5, offset: 51555},
																		run: (*parser).callonExtraListElement762,
																		expr: &seqExpr{
																			pos: position{line: 1546, col: 5, offset: 51555},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1546, col: 5, offset: 51555},
																					label: "separator",
																					expr: &actionExpr{
																						pos: position{line: 1546, col: 16, offset: 51566},
																						run: (*parser).callonExtraListElement765,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1546, col: 16, offset: 51566},
																							expr: &litMatcher{
																								pos:        position{line: 1546, col: 17, offset: 51567},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1549, col: 5, offset: 51624},
																					run: (*parser).callonExtraListElement768,
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1535, col: 5, offset: 51244},
																	label: "description",
																	expr: &choiceExpr{
																		pos: position{line: 1557, col: 5, offset: 51874},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1559, col: 9, offset: 51939},
																				run: (*parser).callonExtraListElement771,
																				expr: &seqExpr{
																					pos: position{line: 1559, col: 9, offset: 51939},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1559, col: 9, offset: 51939},
																							expr: &actionExpr{
																								pos: position{line: 2948, col: 10, offset: 97526},
																								run: (*parser).callonExtraListElement774,
																								expr: &charClassMatcher{
																									pos:        position{line: 2948, col: 11, offset: 97527},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2965, col: 8, offset: 97889},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2958, col: 12, offset: 97749},
																									run: (*parser).callonExtraListElement777,
																									expr: &choiceExpr{
																										pos: position{line: 2958, col: 13, offset: 97750},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2958, col: 13, offset: 97750},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 20, offset: 97757},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 29, offset: 97766},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2962, col: 8, offset: 97839},
																									expr: &anyMatcher{
																										line: 2962, col: 9, offset: 97840,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1560, col: 9, offset: 51959},
																							expr: &actionExpr{
																								pos: position{line: 526, col: 14, offset: 17074},
																								run: (*parser).callonExtraListElement785,
																								expr: &seqExpr{
																									pos: position{line: 526, col: 14, offset: 17074},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 526, col: 14, offset: 17074},
																											expr: &notExpr{
																												pos: position{line: 2962, col: 8, offset: 97839},
																												expr: &anyMatcher{
																													line: 2962, col: 9, offset: 97840,
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 526, col: 19, offset: 17079},
																											expr: &actionExpr{
																												pos: position{line: 2948, col: 10, offset: 97526},
																												run: (*parser).callonExtraListElement791,
																												expr: &charClassMatcher{
																													pos:        position{line: 2948, col: 11, offset: 97527},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2965, col: 8, offset: 97889},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2958, col: 12, offset: 97749},
																													run: (*parser).callonExtraListElement794,
																													expr: &choiceExpr{
																														pos: position{line: 2958, col: 13, offset: 97750},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2958, col: 13, offset: 97750},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2958, col: 20, offset: 97757},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2958, col: 29, offset: 97766},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2962, col: 8, offset: 97839},
																													expr: &anyMatcher{
																														line: 2962, col: 9, offset: 97840,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1561, col: 9, offset: 51979},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1561, col: 17, offset: 51987},
																								expr: &actionExpr{
																									pos: position{line: 1359, col: 5, offset: 45418},
																									run: (*parser).callonExtraListElement803,
																									expr: &seqExpr{
																										pos: position{line: 1359, col: 5, offset: 45418},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 1359, col: 5, offset: 45418},
																												expr: &actionExpr{
																													pos: position{line: 526, col: 14, offset: 17074},
																													run: (*parser).callonExtraListElement806,
																													expr: &seqExpr{
																														pos: position{line: 526, col: 14, offset: 17074},
																														exprs: []interface{}{
																															&notExpr{
																																pos: position{line: 526, col: 14, offset: 17074},
																																expr: &notExpr{
																																	pos: position{line: 2962, col: 8, offset: 97839},
																																	expr: &anyMatcher{
																																		line: 2962, col: 9, offset: 97840,
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 526, col: 19, offset: 17079},
																																expr: &actionExpr{
																																	pos: position{line: 2948, col: 10, offset: 97526},
																																	run: (*parser).callonExtraListElement812,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2948, col: 11, offset: 97527},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 2965, col: 8, offset: 97889},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 2958, col: 12, offset: 97749},
																																		run: (*parser).callonExtraListElement815,
																																		expr: &choiceExpr{
																																			pos: position{line: 2958, col: 13, offset: 97750},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2958, col: 13, offset: 97750},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2958, col: 20, offset: 97757},
																																					val:        "\r\n",
																																					ignoreCase: false,
																																					want:       "\"\\r\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2958, col: 29, offset: 97766},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 2962, col: 8, offset: 97839},
																																		expr: &anyMatcher{
																																			line: 2962, col: 9, offset: 97840,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1360, col: 5, offset: 45433},
																												expr: &seqExpr{
																													pos: position{line: 1392, col: 34, offset: 46343},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 1392, col: 34, offset: 46343},
																															val:        "+",
																															ignoreCase: false,
																															want:       "\"+\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1392, col: 38, offset: 46347},
																															expr: &actionExpr{
																																pos: position{line: 2948, col: 10, offset: 97526},
																																run: (*parser).callonExtraListElement826,
																																expr: &charClassMatcher{
																																	pos:        position{line: 2948, col: 11, offset: 97527},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 2958, col: 12, offset: 97749},
																															run: (*parser).callonExtraListElement828,
																															expr: &choiceExpr{
																																pos: position{line: 2958, col: 13, offset: 97750},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2958, col: 13, offset: 97750},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2958, col: 20, offset: 97757},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2958, col: 29, offset: 97766},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1361, col: 5, offset: 45468},
																												expr: &actionExpr{
																													pos: position{line: 1441, col: 5, offset: 47846},
																													run: (*parser).callonExtraListElement834,
																													expr: &seqExpr{
																														pos: position{line: 1441, col: 5, offset: 47846},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 1441, col: 5, offset: 47846},
																																expr: &actionExpr{
																																	pos: position{line: 2948, col: 10, offset: 97526},
																																	run: (*parser).callonExtraListElement837,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2948, col: 11, offset: 97527},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 1441, col: 12, offset: 47853},
																																label: "prefix",
																																expr: &choiceExpr{
																																	pos: position{line: 1443, col: 9, offset: 47916},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 1443, col: 9, offset: 47916},
																																			run: (*parser).callonExtraListElement841,
																																			expr: &seqExpr{
																																				pos: position{line: 1443, col: 9, offset: 47916},
																																				exprs: []interface{}{
																																					&labeledExpr{
																																						pos:   position{line: 1443, col: 9, offset: 47916},
																																						label: "depth",
																																						expr: &actionExpr{
																																							pos: position{line: 1443, col: 16, offset: 47923},
																																							run: (*parser).callonExtraListElement844,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 1443, col: 16, offset: 47923},
																																								expr: &litMatcher{
																																									pos:        position{line: 1443, col: 17, offset: 47924},
																																									val:        ".",
																																									ignoreCase: false,
																																									want:       "\".\"",
																																								},
																																							},
																																						},
																																					},
																																					&andCodeExpr{
																																						pos: position{line: 1447, col: 9, offset: 48024},
																																						run: (*parser).callonExtraListElement847,
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1466, col: 11, offset: 48741},
																																			run: (*parser).callonExtraListElement848,
																																			expr: &seqExpr{
																																				pos: position{line: 1466, col: 11, offset: 48741},
																																				exprs: []interface{}{
																																					&oneOrMoreExpr{
																																						pos: position{line: 1466, col: 11, offset: 48741},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1466, col: 12, offset: 48742},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1466, col: 20, offset: 48750},
																																						val:        ".",
																																						ignoreCase: false,
																																						want:       "\".\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1468, col: 13, offset: 48867},
																																			run: (*parser).callonExtraListElement853,
																																			expr: &seqExpr{
																																				pos: position{line: 1468, col: 13, offset: 48867},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 1468, col: 14, offset: 48868},
																																						val:        "[a-z]",
																																						ranges:     []rune{'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1468, col: 21, offset: 48875},
																																						val:        ".",
																																						ignoreCase: false,
																																						want:       "\".\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1470, col: 13, offset: 48995},
																																			run: (*parser).callonExtraListElement857,
																																			expr: &seqExpr{
																																				pos: position{line: 1470, col: 13, offset: 48995},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 1470, col: 14, offset: 48996},
																																						val:        "[A-Z]",
																																						ranges:     []rune{'A', 'Z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1470, col: 21, offset: 49003},
																																						val:        ".",
																																						ignoreCase: false,
																																						want:       "\".\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1472, col: 13, offset: 49123},
																																			run: (*parser).callonExtraListElement861,
																																			expr: &seqExpr{
																																				pos: position{line: 1472, col: 13, offset: 49123},
																																				exprs: []interface{}{
																																					&oneOrMoreExpr{
																																						pos: position{line: 1472, col: 13, offset: 49123},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1472, col: 14, offset: 49124},
																																							val:        "[ivxdlcm]",
																																							chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1472, col: 26, offset: 49136},
																																						val:        ")",
																																						ignoreCase: false,
																																						want:       "\")\"",
																																					},
																																				},
																																			},
																																		},
																																		&actionExpr{
																																			pos: position{line: 1474, col: 13, offset: 49256},
																																			run: (*parser).callonExtraListElement866,
																																			expr: &seqExpr{
																																				pos: position{line: 1474, col: 13, offset: 49256},
																																				exprs: []interface{}{
																																					&oneOrMoreExpr{
																																						pos: position{line: 1474, col: 13, offset: 49256},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1474, col: 14, offset: 49257},
																																							val:        "[IVXDLCM]",
																																							chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 1474, col: 26, offset: 49269},
																																						val:        ")",
																																						ignoreCase: false,
																																						want:       "\")\"",
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 2953, col: 11, offset: 97635},
																																run: (*parser).callonExtraListElement871,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 2953, col: 11, offset: 97635},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2953, col: 12, offset: 97636},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1362, col: 5, offset: 45498},
																												expr: &actionExpr{
																													pos: position{line: 1491, col: 5, offset: 49808},
																													run: (*parser).callonExtraListElement875,
																													expr: &seqExpr{
																														pos: position{line: 1491, col: 5, offset: 49808},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 1491, col: 5, offset: 49808},
																																expr: &actionExpr{
																																	pos: position{line: 2948, col: 10, offset: 97526},
																																	run: (*parser).callonExtraListElement878,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2948, col: 11, offset: 97527},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 1491, col: 12, offset: 49815},
																																label: "prefix",
																																expr: &choiceExpr{
																																	pos: position{line: 1491, col: 20, offset: 49823},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 1493, col: 9, offset: 49880},
																																			run: (*parser).callonExtraListElement882,
																																			expr: &seqExpr{
																																				pos: position{line: 1493, col: 9, offset: 49880},
																																				exprs: []interface{}{
																																					&labeledExpr{
																																						pos:   position{line: 1493, col: 9, offset: 49880},
																																						label: "depth",
																																						expr: &actionExpr{
																																							pos: position{line: 1493, col: 16, offset: 49887},
																																							run: (*parser).callonExtraListElement885,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 1493, col: 16, offset: 49887},
																																								expr: &litMatcher{
																																									pos:        position{line: 1493, col: 17, offset: 49888},
																																									val:        "*",
																																									ignoreCase: false,
																																									want:       "\"*\"",
																																								},
																																							},
																																						},
																																					},
																																					&andCodeExpr{
																																						pos: position{line: 1497, col: 9, offset: 49988},
																																						run: (*parser).callonExtraListElement888,
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 1514, col: 14, offset: 50695},
																																			label: "depth",
																																			expr: &actionExpr{
																																				pos: position{line: 1514, col: 21, offset: 50702},
																																				run: (*parser).callonExtraListElement890,
																																				expr: &litMatcher{
																																					pos:        position{line: 1514, col: 22, offset: 50703},
																																					val:        "-",
																																					ignoreCase: false,
																																					want:       "\"-\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 2953, col: 11, offset: 97635},
																																run: (*parser).callonExtraListElement892,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 2953, col: 11, offset: 97635},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2953, col: 12, offset: 97636},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1363, col: 5, offset: 45530},
																												expr: &actionExpr{
																													pos: position{line: 1597, col: 5, offset: 53021},
																													run: (*parser).callonExtraListElement896,
																													expr: &seqExpr{
																														pos: position{line: 1597, col: 5, offset: 53021},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 1597, col: 5, offset: 53021},
																																val:        "<",
																																ignoreCase: false,
																																want:       "\"<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 1597, col: 9, offset: 53025},
																																label: "ref",
																																expr: &actionExpr{
																																	pos: position{line: 1597, col: 14, offset: 53030},
																																	run: (*parser).callonExtraListElement900,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1597, col: 14, offset: 53030},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1597, col: 14, offset: 53030},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 1597, col: 62, offset: 53078},
																																val:        ">",
																																ignoreCase: false,
																																want:       "\">\"",
																															},
																															&actionExpr{
																																pos: position{line: 2953, col: 11, offset: 97635},
																																run: (*parser).callonExtraListElement904,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 2953, col: 11, offset: 97635},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2953, col: 12, offset: 97636},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1364, col: 5, offset: 45560},
																												expr: &seqExpr{
																													pos: position{line: 1364, col: 7, offset: 45562},
																													exprs: []interface{}{
																														&actionExpr{
																															pos: position{line: 1541, col: 5, offset: 51423},
																															run: (*parser).callonExtraListElement909,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1541, col: 5, offset: 51423},
																																expr: &seqExpr{
																																	pos: position{line: 1541, col: 6, offset: 51424},
																																	exprs: []interface{}{
																																		&notExpr{
																																			pos: position{line: 1541, col: 6, offset: 51424},
																																			expr: &actionExpr{
																																				pos: position{line: 1546, col: 5, offset: 51555},
																																				run: (*parser).callonExtraListElement913,
																																				expr: &seqExpr{
																																					pos: position{line: 1546, col: 5, offset: 51555},
																																					exprs: []interface{}{
																																						&labeledExpr{
																																							pos:   position{line: 1546, col: 5, offset: 51555},
																																							label: "separator",
																																							expr: &actionExpr{
																																								pos: position{line: 1546, col: 16, offset: 51566},
																																								run: (*parser).callonExtraListElement916,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 1546, col: 16, offset: 51566},
																																									expr: &litMatcher{
																																										pos:        position{line: 1546, col: 17, offset: 51567},
																																										val:        ":",
																																										ignoreCase: false,
																																										want:       "\":\"",
																																									},
																																								},
																																							},
																																						},
																																						&andCodeExpr{
																																							pos: position{line: 1549, col: 5, offset: 51624},
																																							run: (*parser).callonExtraListElement919,
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 1541, col: 35, offset: 51453},
																																			expr: &choiceExpr{
																																				pos: position{line: 2965, col: 8, offset: 97889},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2958, col: 12, offset: 97749},
																																						run: (*parser).callonExtraListElement922,
																																						expr: &choiceExpr{
																																							pos: position{line: 2958, col: 13, offset: 97750},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2958, col: 13, offset: 97750},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2958, col: 20, offset: 97757},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2958, col: 29, offset: 97766},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2962, col: 8, offset: 97839},
																																						expr: &anyMatcher{
																																							line: 2962, col: 9, offset: 97840,
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&anyMatcher{
																																			line: 1541, col: 40, offset: 51458,
																																		},
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1546, col: 5, offset: 51555},
																															run: (*parser).callonExtraListElement930,
																															expr: &seqExpr{
																																pos: position{line: 1546, col: 5, offset: 51555},
																																exprs: []interface{}{
																																	&labeledExpr{
																																		pos:   position{line: 1546, col: 5, offset: 51555},
																																		label: "separator",
																																		expr: &actionExpr{
																																			pos: position{line: 1546, col: 16, offset: 51566},
																																			run: (*parser).callonExtraListElement933,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1546, col: 16, offset: 51566},
																																				expr: &litMatcher{
																																					pos:        position{line: 1546, col: 17, offset: 51567},
																																					val:        ":",
																																					ignoreCase: false,
																																					want:       "\":\"",
																																				},
																																			},
																																		},
																																	},
																																	&andCodeExpr{
																																		pos: position{line: 1549, col: 5, offset: 51624},
																																		run: (*parser).callonExtraListElement936,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 1365, col: 5, offset: 45618},
																												expr: &actionExpr{
																													pos: position{line: 571, col: 5, offset: 18595},
																													run: (*parser).callonExtraListElement938,
																													expr: &seqExpr{
																														pos: position{line: 571, col: 5, offset: 18595},
																														exprs: []interface{}{
																															&notExpr{
																																pos: position{line: 571, col: 5, offset: 18595},
																																expr: &charClassMatcher{
																																	pos:        position{line: 2860, col: 13, offset: 94811},
																																	val:        "[0-9\\pL]",
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 572, col: 5, offset: 18625},
																																label: "delimiter",
																																expr: &choiceExpr{
																																	pos: position{line: 573, col: 9, offset: 18645},
																																	alternatives: []interface{}{
																																		&seqExpr{
																																			pos: position{line: 585, col: 26, offset: 18966},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 585, col: 26, offset: 18966},
																																					val:        "////",
																																					ignoreCase: false,
																																					want:       "\"////\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 585, col: 33, offset: 18973},
																																					expr: &actionExpr{
																																						pos: position{line: 2948, col: 10, offset: 97526},
																																						run: (*parser).callonExtraListElement947,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2948, col: 11, offset: 97527},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2965, col: 8, offset: 97889},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2958, col: 12, offset: 97749},
																																							run: (*parser).callonExtraListElement950,
																																							expr: &choiceExpr{
																																								pos: position{line: 2958, col: 13, offset: 97750},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 13, offset: 97750},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 20, offset: 97757},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 29, offset: 97766},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2962, col: 8, offset: 97839},
																																							expr: &anyMatcher{
																																								line: 2962, col: 9, offset: 97840,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 587, col: 26, offset: 19010},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 587, col: 26, offset: 19010},
																																					val:        "====",
																																					ignoreCase: false,
																																					want:       "\"====\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 587, col: 33, offset: 19017},
																																					expr: &actionExpr{
																																						pos: position{line: 2948, col: 10, offset: 97526},
																																						run: (*parser).callonExtraListElement960,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2948, col: 11, offset: 97527},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2965, col: 8, offset: 97889},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2958, col: 12, offset: 97749},
																																							run: (*parser).callonExtraListElement963,
																																							expr: &choiceExpr{
																																								pos: position{line: 2958, col: 13, offset: 97750},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 13, offset: 97750},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 20, offset: 97757},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 29, offset: 97766},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2962, col: 8, offset: 97839},
																																							expr: &anyMatcher{
																																								line: 2962, col: 9, offset: 97840,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 589, col: 25, offset: 19053},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 589, col: 25, offset: 19053},
																																					val:        "```",
																																					ignoreCase: false,
																																					want:       "\"```\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 589, col: 31, offset: 19059},
																																					expr: &actionExpr{
																																						pos: position{line: 2948, col: 10, offset: 97526},
																																						run: (*parser).callonExtraListElement973,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2948, col: 11, offset: 97527},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2965, col: 8, offset: 97889},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2958, col: 12, offset: 97749},
																																							run: (*parser).callonExtraListElement976,
																																							expr: &choiceExpr{
																																								pos: position{line: 2958, col: 13, offset: 97750},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 13, offset: 97750},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 20, offset: 97757},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 29, offset: 97766},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2962, col: 8, offset: 97839},
																																							expr: &anyMatcher{
																																								line: 2962, col: 9, offset: 97840,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 591, col: 26, offset: 19096},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 591, col: 26, offset: 19096},
																																					val:        "----",
																																					ignoreCase: false,
																																					want:       "\"----\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 591, col: 33, offset: 19103},
																																					expr: &actionExpr{
																																						pos: position{line: 2948, col: 10, offset: 97526},
																																						run: (*parser).callonExtraListElement986,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2948, col: 11, offset: 97527},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2965, col: 8, offset: 97889},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2958, col: 12, offset: 97749},
																																							run: (*parser).callonExtraListElement989,
																																							expr: &choiceExpr{
																																								pos: position{line: 2958, col: 13, offset: 97750},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 13, offset: 97750},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 20, offset: 97757},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 29, offset: 97766},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2962, col: 8, offset: 97839},
																																							expr: &anyMatcher{
																																								line: 2962, col: 9, offset: 97840,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 593, col: 26, offset: 19140},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 593, col: 26, offset: 19140},
																																					val:        "....",
																																					ignoreCase: false,
																																					want:       "\"....\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 593, col: 33, offset: 19147},
																																					expr: &actionExpr{
																																						pos: position{line: 2948, col: 10, offset: 97526},
																																						run: (*parser).callonExtraListElement999,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2948, col: 11, offset: 97527},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2965, col: 8, offset: 97889},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2958, col: 12, offset: 97749},
																																							run: (*parser).callonExtraListElement1002,
																																							expr: &choiceExpr{
																																								pos: position{line: 2958, col: 13, offset: 97750},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 13, offset: 97750},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 20, offset: 97757},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 29, offset: 97766},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2962, col: 8, offset: 97839},
																																							expr: &anyMatcher{
																																								line: 2962, col: 9, offset: 97840,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 595, col: 30, offset: 19188},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 595, col: 30, offset: 19188},
																																					val:        "++++",
																																					ignoreCase: false,
																																					want:       "\"++++\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 595, col: 37, offset: 19195},
																																					expr: &actionExpr{
																																						pos: position{line: 2948, col: 10, offset: 97526},
																																						run: (*parser).callonExtraListElement1012,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2948, col: 11, offset: 97527},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2965, col: 8, offset: 97889},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2958, col: 12, offset: 97749},
																																							run: (*parser).callonExtraListElement1015,
																																							expr: &choiceExpr{
																																								pos: position{line: 2958, col: 13, offset: 97750},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 13, offset: 97750},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 20, offset: 97757},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 29, offset: 97766},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2962, col: 8, offset: 97839},
																																							expr: &anyMatcher{
																																								line: 2962, col: 9, offset: 97840,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 597, col: 24, offset: 19230},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 597, col: 24, offset: 19230},
																																					val:        "____",
																																					ignoreCase: false,
																																					want:       "\"____\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 597, col: 31, offset: 19237},
																																					expr: &actionExpr{
																																						pos: position{line: 2948, col: 10, offset: 97526},
																																						run: (*parser).callonExtraListElement1025,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2948, col: 11, offset: 97527},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2965, col: 8, offset: 97889},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2958, col: 12, offset: 97749},
																																							run: (*parser).callonExtraListElement1028,
																																							expr: &choiceExpr{
																																								pos: position{line: 2958, col: 13, offset: 97750},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 13, offset: 97750},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 20, offset: 97757},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 29, offset: 97766},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2962, col: 8, offset: 97839},
																																							expr: &anyMatcher{
																																								line: 2962, col: 9, offset: 97840,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&seqExpr{
																																			pos: position{line: 599, col: 26, offset: 19274},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 599, col: 26, offset: 19274},
																																					val:        "****",
																																					ignoreCase: false,
																																					want:       "\"****\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 599, col: 33, offset: 19281},
																																					expr: &actionExpr{
																																						pos: position{line: 2948, col: 10, offset: 97526},
																																						run: (*parser).callonExtraListElement1038,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2948, col: 11, offset: 97527},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2965, col: 8, offset: 97889},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2958, col: 12, offset: 97749},
																																							run: (*parser).callonExtraListElement1041,
																																							expr: &choiceExpr{
																																								pos: position{line: 2958, col: 13, offset: 97750},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 13, offset: 97750},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 20, offset: 97757},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2958, col: 29, offset: 97766},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2962, col: 8, offset: 97839},
																																							expr: &anyMatcher{
																																								line: 2962, col: 9, offset: 97840,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1366, col: 5, offset: 45638},
																												label: "content",
																												expr: &actionExpr{
																													pos: position{line: 1366, col: 14, offset: 45647},
																													run: (*parser).callonExtraListElement1049,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1366, col: 14, offset: 45647},
																														expr: &charClassMatcher{
																															pos:        position{line: 1366, col: 14, offset: 45647},
																															val:        "[^\\r\\n]",
																															chars:      []rune{'\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2965, col: 8, offset: 97889},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2958, col: 12, offset: 97749},
																														run: (*parser).callonExtraListElement1053,
																														expr: &choiceExpr{
																															pos: position{line: 2958, col: 13, offset: 97750},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2958, col: 13, offset: 97750},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2958, col: 20, offset: 97757},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2958, col: 29, offset: 97766},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2962, col: 8, offset: 97839},
																														expr: &anyMatcher{
																															line: 2962, col: 9, offset: 97840,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1569, col: 9, offset: 52222},
																				run: (*parser).callonExtraListElement1060,
																				expr: &seqExpr{
																					pos: position{line: 1569, col: 9, offset: 52222},
																					exprs: []interface{}{
																						&actionExpr{
																							pos: position{line: 2953, col: 11, offset: 97635},
																							run: (*parser).callonExtraListElement1062,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2953, col: 11, offset: 97635},
																								expr: &charClassMatcher{
																									pos:        position{line: 2953, col: 12, offset: 97636},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1570, col: 9, offset: 52274},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 1570, col: 18, offset: 52283},
																								run: (*parser).callonExtraListElement1066,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1570, col: 18, offset: 52283},
																									expr: &charClassMatcher{
																										pos:        position{line: 1570, col: 18, offset: 52283},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2965, col: 8, offset: 97889},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2958, col: 12, offset: 97749},
																									run: (*parser).callonExtraListElement1070,
																									expr: &choiceExpr{
																										pos: position{line: 2958, col: 13, offset: 97750},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2958, col: 13, offset: 97750},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 20, offset: 97757},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 29, offset: 97766},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2962, col: 8, offset: 97839},
																									expr: &anyMatcher{
																										line: 2962, col: 9, offset: 97840,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2667, col: 22, offset: 88913},
										run: (*parser).callonExtraListElement1077,
										expr: &seqExpr{
											pos: position{line: 2667, col: 22, offset: 88913},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2672, col: 31, offset: 89134},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2672, col: 36, offset: 89139},
													expr: &litMatcher{
														pos:        position{line: 2672, col: 37, offset: 89140},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2667, col: 49, offset: 88940},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2674, col: 29, offset: 89175},
														run: (*parser).callonExtraListElement1083,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2674, col: 29, offset: 89175},
															expr: &charClassMatcher{
																pos:        position{line: 2674, col: 29, offset: 89175},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonExtraListElement1087,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1351, col: 13, offset: 45217},
										run: (*parser).callonExtraListElement1094,
										expr: &labeledExpr{
											pos:   position{line: 1351, col: 13, offset: 45217},
											label: "element",
											expr: &actionExpr{
												pos: position{line: 1359, col: 5, offset: 45418},
												run: (*parser).callonExtraListElement1096,
												expr: &seqExpr{
													pos: position{line: 1359, col: 5, offset: 45418},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1359, col: 5, offset: 45418},
															expr: &actionExpr{
																pos: position{line: 526, col: 14, offset: 17074},
																run: (*parser).callonExtraListElement1099,
																expr: &seqExpr{
																	pos: position{line: 526, col: 14, offset: 17074},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 526, col: 14, offset: 17074},
																			expr: &notExpr{
																				pos: position{line: 2962, col: 8, offset: 97839},
																				expr: &anyMatcher{
																					line: 2962, col: 9, offset: 97840,
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 526, col: 19, offset: 17079},
																			expr: &actionExpr{
																				pos: position{line: 2948, col: 10, offset: 97526},
																				run: (*parser).callonExtraListElement1105,
																				expr: &charClassMatcher{
																					pos:        position{line: 2948, col: 11, offset: 97527},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2965, col: 8, offset: 97889},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2958, col: 12, offset: 97749},
																					run: (*parser).callonExtraListElement1108,
																					expr: &choiceExpr{
																						pos: position{line: 2958, col: 13, offset: 97750},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2958, col: 13, offset: 97750},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 20, offset: 97757},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 29, offset: 97766},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2962, col: 8, offset: 97839},
																					expr: &anyMatcher{
																						line: 2962, col: 9, offset: 97840,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1360, col: 5, offset: 45433},
															expr: &seqExpr{
																pos: position{line: 1392, col: 34, offset: 46343},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1392, col: 34, offset: 46343},
																		val:        "+",
																		ignoreCase: false,
																		want:       "\"+\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1392, col: 38, offset: 46347},
																		expr: &actionExpr{
																			pos: position{line: 2948, col: 10, offset: 97526},
																			run: (*parser).callonExtraListElement1119,
																			expr: &charClassMatcher{
																				pos:        position{line: 2948, col: 11, offset: 97527},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2958, col: 12, offset: 97749},
																		run: (*parser).callonExtraListElement1121,
																		expr: &choiceExpr{
																			pos: position{line: 2958, col: 13, offset: 97750},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2958, col: 13, offset: 97750},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2958, col: 20, offset: 97757},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2958, col: 29, offset: 97766},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1361, col: 5, offset: 45468},
															expr: &actionExpr{
																pos: position{line: 1441, col: 5, offset: 47846},
																run: (*parser).callonExtraListElement1127,
																expr: &seqExpr{
																	pos: position{line: 1441, col: 5, offset: 47846},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1441, col: 5, offset: 47846},
																			expr: &actionExpr{
																				pos: position{line: 2948, col: 10, offset: 97526},
																				run: (*parser).callonExtraListElement1130,
																				expr: &charClassMatcher{
																					pos:        position{line: 2948, col: 11, offset: 97527},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1441, col: 12, offset: 47853},
																			label: "prefix",
																			expr: &choiceExpr{
																				pos: position{line: 1443, col: 9, offset: 47916},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 1443, col: 9, offset: 47916},
																						run: (*parser).callonExtraListElement1134,
																						expr: &seqExpr{
																							pos: position{line: 1443, col: 9, offset: 47916},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 1443, col: 9, offset: 47916},
																									label: "depth",
																									expr: &actionExpr{
																										pos: position{line: 1443, col: 16, offset: 47923},
																										run: (*parser).callonExtraListElement1137,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1443, col: 16, offset: 47923},
																											expr: &litMatcher{
																												pos:        position{line: 1443, col: 17, offset: 47924},
																												val:        ".",
																												ignoreCase: false,
																												want:       "\".\"",
																											},
																										},
																									},
																								},
																								&andCodeExpr{
																									pos: position{line: 1447, col: 9, offset: 48024},
																									run: (*parser).callonExtraListElement1140,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1466, col: 11, offset: 48741},
																						run: (*parser).callonExtraListElement1141,
																						expr: &seqExpr{
																							pos: position{line: 1466, col: 11, offset: 48741},
																							exprs: []interface{}{
																								&oneOrMoreExpr{
																									pos: position{line: 1466, col: 11, offset: 48741},
																									expr: &charClassMatcher{
																										pos:        position{line: 1466, col: 12, offset: 48742},
																										val:        "[0-9]",
																										ranges:     []rune{'0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1466, col: 20, offset: 48750},
																									val:        ".",
																									ignoreCase: false,
																									want:       "\".\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1468, col: 13, offset: 48867},
																						run: (*parser).callonExtraListElement1146,
																						expr: &seqExpr{
																							pos: position{line: 1468, col: 13, offset: 48867},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 1468, col: 14, offset: 48868},
																									val:        "[a-z]",
																									ranges:     []rune{'a', 'z'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&litMatcher{
																									pos:        position{line: 1468, col: 21, offset: 48875},
																									val:        ".",
																									ignoreCase: false,
																									want:       "\".\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1470, col: 13, offset: 48995},
																						run: (*parser).callonExtraListElement1150,
																						expr: &seqExpr{
																							pos: position{line: 1470, col: 13, offset: 48995},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 1470, col: 14, offset: 48996},
																									val:        "[A-Z]",
																									ranges:     []rune{'A', 'Z'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&litMatcher{
																									pos:        position{line: 1470, col: 21, offset: 49003},
																									val:        ".",
																									ignoreCase: false,
																									want:       "\".\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1472, col: 13, offset: 49123},
																						run: (*parser).callonExtraListElement1154,
																						expr: &seqExpr{
																							pos: position{line: 1472, col: 13, offset: 49123},
																							exprs: []interface{}{
																								&oneOrMoreExpr{
																									pos: position{line: 1472, col: 13, offset: 49123},
																									expr: &charClassMatcher{
																										pos:        position{line: 1472, col: 14, offset: 49124},
																										val:        "[ivxdlcm]",
																										chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1472, col: 26, offset: 49136},
																									val:        ")",
																									ignoreCase: false,
																									want:       "\")\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1474, col: 13, offset: 49256},
																						run: (*parser).callonExtraListElement1159,
																						expr: &seqExpr{
																							pos: position{line: 1474, col: 13, offset: 49256},
																							exprs: []interface{}{
																								&oneOrMoreExpr{
																									pos: position{line: 1474, col: 13, offset: 49256},
																									expr: &charClassMatcher{
																										pos:        position{line: 1474, col: 14, offset: 49257},
																										val:        "[IVXDLCM]",
																										chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1474, col: 26, offset: 49269},
																									val:        ")",
																									ignoreCase: false,
																									want:       "\")\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2953, col: 11, offset: 97635},
																			run: (*parser).callonExtraListElement1164,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2953, col: 11, offset: 97635},
																				expr: &charClassMatcher{
																					pos:        position{line: 2953, col: 12, offset: 97636},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1362, col: 5, offset: 45498},
															expr: &actionExpr{
																pos: position{line: 1491, col: 5, offset: 49808},
																run: (*parser).callonExtraListElement1168,
																expr: &seqExpr{
																	pos: position{line: 1491, col: 5, offset: 49808},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1491, col: 5, offset: 49808},
																			expr: &actionExpr{
																				pos: position{line: 2948, col: 10, offset: 97526},
																				run: (*parser).callonExtraListElement1171,
																				expr: &charClassMatcher{
																					pos:        position{line: 2948, col: 11, offset: 97527},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1491, col: 12, offset: 49815},
																			label: "prefix",
																			expr: &choiceExpr{
																				pos: position{line: 1491, col: 20, offset: 49823},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 1493, col: 9, offset: 49880},
																						run: (*parser).callonExtraListElement1175,
																						expr: &seqExpr{
																							pos: position{line: 1493, col: 9, offset: 49880},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 1493, col: 9, offset: 49880},
																									label: "depth",
																									expr: &actionExpr{
																										pos: position{line: 1493, col: 16, offset: 49887},
																										run: (*parser).callonExtraListElement1178,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1493, col: 16, offset: 49887},
																											expr: &litMatcher{
																												pos:        position{line: 1493, col: 17, offset: 49888},
																												val:        "*",
																												ignoreCase: false,
																												want:       "\"*\"",
																											},
																										},
																									},
																								},
																								&andCodeExpr{
																									pos: position{line: 1497, col: 9, offset: 49988},
																									run: (*parser).callonExtraListElement1181,
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 1514, col: 14, offset: 50695},
																						label: "depth",
																						expr: &actionExpr{
																							pos: position{line: 1514, col: 21, offset: 50702},
																							run: (*parser).callonExtraListElement1183,
																							expr: &litMatcher{
																								pos:        position{line: 1514, col: 22, offset: 50703},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2953, col: 11, offset: 97635},
																			run: (*parser).callonExtraListElement1185,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2953, col: 11, offset: 97635},
																				expr: &charClassMatcher{
																					pos:        position{line: 2953, col: 12, offset: 97636},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1363, col: 5, offset: 45530},
															expr: &actionExpr{
																pos: position{line: 1597, col: 5, offset: 53021},
																run: (*parser).callonExtraListElement1189,
																expr: &seqExpr{
																	pos: position{line: 1597, col: 5, offset: 53021},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1597, col: 5, offset: 53021},
																			val:        "<",
																			ignoreCase: false,
																			want:       "\"<\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 1597, col: 9, offset: 53025},
																			label: "ref",
																			expr: &actionExpr{
																				pos: position{line: 1597, col: 14, offset: 53030},
																				run: (*parser).callonExtraListElement1193,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1597, col: 14, offset: 53030},
																					expr: &charClassMatcher{
																						pos:        position{line: 1597, col: 14, offset: 53030},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 1597, col: 62, offset: 53078},
																			val:        ">",
																			ignoreCase: false,
																			want:       "\">\"",
																		},
																		&actionExpr{
																			pos: position{line: 2953, col: 11, offset: 97635},
																			run: (*parser).callonExtraListElement1197,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2953, col: 11, offset: 97635},
																				expr: &charClassMatcher{
																					pos:        position{line: 2953, col: 12, offset: 97636},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1364, col: 5, offset: 45560},
															expr: &seqExpr{
																pos: position{line: 1364, col: 7, offset: 45562},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 1541, col: 5, offset: 51423},
																		run: (*parser).callonExtraListElement1202,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1541, col: 5, offset: 51423},
																			expr: &seqExpr{
																				pos: position{line: 1541, col: 6, offset: 51424},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1541, col: 6, offset: 51424},
																						expr: &actionExpr{
																							pos: position{line: 1546, col: 5, offset: 51555},
																							run: (*parser).callonExtraListElement1206,
																							expr: &seqExpr{
																								pos: position{line: 1546, col: 5, offset: 51555},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1546, col: 5, offset: 51555},
																										label: "separator",
																										expr: &actionExpr{
																											pos: position{line: 1546, col: 16, offset: 51566},
																											run: (*parser).callonExtraListElement1209,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1546, col: 16, offset: 51566},
																												expr: &litMatcher{
																													pos:        position{line: 1546, col: 17, offset: 51567},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 1549, col: 5, offset: 51624},
																										run: (*parser).callonExtraListElement1212,
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1541, col: 35, offset: 51453},
																						expr: &choiceExpr{
																							pos: position{line: 2965, col: 8, offset: 97889},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2958, col: 12, offset: 97749},
																									run: (*parser).callonExtraListElement1215,
																									expr: &choiceExpr{
																										pos: position{line: 2958, col: 13, offset: 97750},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2958, col: 13, offset: 97750},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 20, offset: 97757},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 29, offset: 97766},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2962, col: 8, offset: 97839},
																									expr: &anyMatcher{
																										line: 2962, col: 9, offset: 97840,
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1541, col: 40, offset: 51458,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1546, col: 5, offset: 51555},
																		run: (*parser).callonExtraListElement1223,
																		expr: &seqExpr{
																			pos: position{line: 1546, col: 5, offset: 51555},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1546, col: 5, offset: 51555},
																					label: "separator",
																					expr: &actionExpr{
																						pos: position{line: 1546, col: 16, offset: 51566},
																						run: (*parser).callonExtraListElement1226,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1546, col: 16, offset: 51566},
																							expr: &litMatcher{
																								pos:        position{line: 1546, col: 17, offset: 51567},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1549, col: 5, offset: 51624},
																					run: (*parser).callonExtraListElement1229,
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1365, col: 5, offset: 45618},
															expr: &actionExpr{
																pos: position{line: 571, col: 5, offset: 18595},
																run: (*parser).callonExtraListElement1231,
																expr: &seqExpr{
																	pos: position{line: 571, col: 5, offset: 18595},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 571, col: 5, offset: 18595},
																			expr: &charClassMatcher{
																				pos:        position{line: 2860, col: 13, offset: 94811},
																				val:        "[0-9\\pL]",
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 572, col: 5, offset: 18625},
																			label: "delimiter",
																			expr: &choiceExpr{
																				pos: position{line: 573, col: 9, offset: 18645},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 585, col: 26, offset: 18966},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 585, col: 26, offset: 18966},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 585, col: 33, offset: 18973},
																								expr: &actionExpr{
																									pos: position{line: 2948, col: 10, offset: 97526},
																									run: (*parser).callonExtraListElement1240,
																									expr: &charClassMatcher{
																										pos:        position{line: 2948, col: 11, offset: 97527},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonExtraListElement1243,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 587, col: 26, offset: 19010},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 587, col: 26, offset: 19010},
																								val:        "====",
																								ignoreCase: false,
																								want:       "\"====\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 587, col: 33, offset: 19017},
																								expr: &actionExpr{
																									pos: position{line: 2948, col: 10, offset: 97526},
																									run: (*parser).callonExtraListElement1253,
																									expr: &charClassMatcher{
																										pos:        position{line: 2948, col: 11, offset: 97527},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonExtraListElement1256,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 589, col: 25, offset: 19053},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 589, col: 25, offset: 19053},
																								val:        "```",
																								ignoreCase: false,
																								want:       "\"```\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 589, col: 31, offset: 19059},
																								expr: &actionExpr{
																									pos: position{line: 2948, col: 10, offset: 97526},
																									run: (*parser).callonExtraListElement1266,
																									expr: &charClassMatcher{
																										pos:        position{line: 2948, col: 11, offset: 97527},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonExtraListElement1269,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 591, col: 26, offset: 19096},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 591, col: 26, offset: 19096},
																								val:        "----",
																								ignoreCase: false,
																								want:       "\"----\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 591, col: 33, offset: 19103},
																								expr: &actionExpr{
																									pos: position{line: 2948, col: 10, offset: 97526},
																									run: (*parser).callonExtraListElement1279,
																									expr: &charClassMatcher{
																										pos:        position{line: 2948, col: 11, offset: 97527},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonExtraListElement1282,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 593, col: 26, offset: 19140},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 593, col: 26, offset: 19140},
																								val:        "....",
																								ignoreCase: false,
																								want:       "\"....\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 593, col: 33, offset: 19147},
																								expr: &actionExpr{
																									pos: position{line: 2948, col: 10, offset: 97526},
																									run: (*parser).callonExtraListElement1292,
																									expr: &charClassMatcher{
																										pos:        position{line: 2948, col: 11, offset: 97527},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonExtraListElement1295,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 595, col: 30, offset: 19188},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 595, col: 30, offset: 19188},
																								val:        "++++",
																								ignoreCase: false,
																								want:       "\"++++\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 595, col: 37, offset: 19195},
																								expr: &actionExpr{
																									pos: position{line: 2948, col: 10, offset: 97526},
																									run: (*parser).callonExtraListElement1305,
																									expr: &charClassMatcher{
																										pos:        position{line: 2948, col: 11, offset: 97527},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonExtraListElement1308,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 597, col: 24, offset: 19230},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 597, col: 24, offset: 19230},
																								val:        "____",
																								ignoreCase: false,
																								want:       "\"____\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 597, col: 31, offset: 19237},
																								expr: &actionExpr{
																									pos: position{line: 2948, col: 10, offset: 97526},
																									run: (*parser).callonExtraListElement1318,
																									expr: &charClassMatcher{
																										pos:        position{line: 2948, col: 11, offset: 97527},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonExtraListElement1321,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 599, col: 26, offset: 19274},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 599, col: 26, offset: 19274},
																								val:        "****",
																								ignoreCase: false,
																								want:       "\"****\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 599, col: 33, offset: 19281},
																								expr: &actionExpr{
																									pos: position{line: 2948, col: 10, offset: 97526},
																									run: (*parser).callonExtraListElement1331,
																									expr: &charClassMatcher{
																										pos:        position{line: 2948, col: 11, offset: 97527},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonExtraListElement1334,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 1366, col: 5, offset: 45638},
															label: "content",
															expr: &actionExpr{
																pos: position{line: 1366, col: 14, offset: 45647},
																run: (*parser).callonExtraListElement1342,
																expr: &oneOrMoreExpr{
																	pos: position{line: 1366, col: 14, offset: 45647},
																	expr: &charClassMatcher{
																		pos:        position{line: 1366, col: 14, offset: 45647},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 2965, col: 8, offset: 97889},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2958, col: 12, offset: 97749},
																	run: (*parser).callonExtraListElement1346,
																	expr: &choiceExpr{
																		pos: position{line: 2958, col: 13, offset: 97750},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2958, col: 13, offset: 97750},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2958, col: 20, offset: 97757},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2958, col: 29, offset: 97766},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2962, col: 8, offset: 97839},
																	expr: &anyMatcher{
																		line: 2962, col: 9, offset: 97840,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElementContinuation",
			pos:  position{line: 1384, col: 1, offset: 46071},
			expr: &actionExpr{
				pos: position{line: 1385, col: 5, offset: 46103},
				run: (*parser).callonListElementContinuation1,
				expr: &seqExpr{
					pos: position{line: 1385, col: 5, offset: 46103},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1385, col: 5, offset: 46103},
							label: "offset",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1385, col: 12, offset: 46110},
								expr: &seqExpr{
									pos: position{line: 1385, col: 13, offset: 46111},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1385, col: 13, offset: 46111},
											expr: &actionExpr{
												pos: position{line: 2948, col: 10, offset: 97526},
												run: (*parser).callonListElementContinuation7,
												expr: &charClassMatcher{
													pos:        position{line: 2948, col: 11, offset: 97527},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&actionExpr{
											pos: position{line: 2958, col: 12, offset: 97749},
											run: (*parser).callonListElementContinuation9,
											expr: &choiceExpr{
												pos: position{line: 2958, col: 13, offset: 97750},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2958, col: 13, offset: 97750},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2958, col: 20, offset: 97757},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2958, col: 29, offset: 97766},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1392, col: 34, offset: 46343},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1392, col: 38, offset: 46347},
							expr: &actionExpr{
								pos: position{line: 2948, col: 10, offset: 97526},
								run: (*parser).callonListElementContinuation16,
								expr: &charClassMatcher{
									pos:        position{line: 2948, col: 11, offset: 97527},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&actionExpr{
							pos: position{line: 2958, col: 12, offset: 97749},
							run: (*parser).callonListElementContinuation18,
							expr: &choiceExpr{
								pos: position{line: 2958, col: 13, offset: 97750},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2958, col: 13, offset: 97750},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2958, col: 20, offset: 97757},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2958, col: 29, offset: 97766},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1387, col: 5, offset: 46167},
							label: "element",
							expr: &zeroOrOneExpr{
								pos: position{line: 1387, col: 13, offset: 46175},
								expr: &ruleRefExpr{
									pos:  position{line: 1387, col: 13, offset: 46175},
									name: "ListElementContinuationElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElementContinuationElement",
			pos:  position{line: 1394, col: 1, offset: 46363},
			expr: &actionExpr{
				pos: position{line: 1395, col: 5, offset: 46441},
				run: (*parser).callonListElementContinuationElement1,
				expr: &seqExpr{
					pos: position{line: 1395, col: 5, offset: 46441},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1395, col: 5, offset: 46441},
							expr: &notExpr{
								pos: position{line: 2962, col: 8, offset: 97839},
								expr: &anyMatcher{
									line: 2962, col: 9, offset: 97840,
								},
							},
						},
						&notExpr{
							pos: position{line: 1396, col: 5, offset: 46467},
							expr: &choiceExpr{
								pos: position{line: 1305, col: 5, offset: 43622},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1434, col: 5, offset: 47638},
										run: (*parser).callonListElementContinuationElement8,
										expr: &seqExpr{
											pos: position{line: 1434, col: 5, offset: 47638},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1434, col: 5, offset: 47638},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1441, col: 5, offset: 47846},
														run: (*parser).callonListElementContinuationElement11,
														expr: &seqExpr{
															pos: position{line: 1441, col: 5, offset: 47846},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1441, col: 5, offset: 47846},
																	expr: &actionExpr{
																		pos: position{line: 2948, col: 10, offset: 97526},
																		run: (*parser).callonListElementContinuationElement14,
																		expr: &charClassMatcher{
																			pos:        position{line: 2948, col: 11, offset: 97527},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1441, col: 12, offset: 47853},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1443, col: 9, offset: 47916},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1443, col: 9, offset: 47916},
																				run: (*parser).callonListElementContinuationElement18,
																				expr: &seqExpr{
																					pos: position{line: 1443, col: 9, offset: 47916},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1443, col: 9, offset: 47916},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1443, col: 16, offset: 47923},
																								run: (*parser).callonListElementContinuationElement21,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1443, col: 16, offset: 47923},
																									expr: &litMatcher{
																										pos:        position{line: 1443, col: 17, offset: 47924},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1447, col: 9, offset: 48024},
																							run: (*parser).callonListElementContinuationElement24,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1466, col: 11, offset: 48741},
																				run: (*parser).callonListElementContinuationElement25,
																				expr: &seqExpr{
																					pos: position{line: 1466, col: 11, offset: 48741},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1466, col: 11, offset: 48741},
																							expr: &charClassMatcher{
																								pos:        position{line: 1466, col: 12, offset: 48742},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1466, col: 20, offset: 48750},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1468, col: 13, offset: 48867},
																				run: (*parser).callonListElementContinuationElement30,
																				expr: &seqExpr{
																					pos: position{line: 1468, col: 13, offset: 48867},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1468, col: 14, offset: 48868},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1468, col: 21, offset: 48875},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1470, col: 13, offset: 48995},
																				run: (*parser).callonListElementContinuationElement34,
																				expr: &seqExpr{
																					pos: position{line: 1470, col: 13, offset: 48995},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1470, col: 14, offset: 48996},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1470, col: 21, offset: 49003},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1472, col: 13, offset: 49123},
																				run: (*parser).callonListElementContinuationElement38,
																				expr: &seqExpr{
																					pos: position{line: 1472, col: 13, offset: 49123},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1472, col: 13, offset: 49123},
																							expr: &charClassMatcher{
																								pos:        position{line: 1472, col: 14, offset: 49124},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1472, col: 26, offset: 49136},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1474, col: 13, offset: 49256},
																				run: (*parser).callonListElementContinuationElement43,
																				expr: &seqExpr{
																					pos: position{line: 1474, col: 13, offset: 49256},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1474, col: 13, offset: 49256},
																							expr: &charClassMatcher{
																								pos:        position{line: 1474, col: 14, offset: 49257},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1474, col: 26, offset: 49269},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2953, col: 11, offset: 97635},
																	run: (*parser).callonListElementContinuationElement48,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2953, col: 11, offset: 97635},
																		expr: &charClassMatcher{
																			pos:        position{line: 2953, col: 12, offset: 97636},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1435, col: 5, offset: 47677},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1374, col: 5, offset: 45844},
														run: (*parser).callonListElementContinuationElement52,
														expr: &seqExpr{
															pos: position{line: 1374, col: 5, offset: 45844},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1374, col: 5, offset: 45844},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1374, col: 14, offset: 45853},
																		run: (*parser).callonListElementContinuationElement55,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1374, col: 14, offset: 45853},
																			expr: &charClassMatcher{
																				pos:        position{line: 1374, col: 14, offset: 45853},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonListElementContinuationElement59,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1484, col: 5, offset: 49535},
										run: (*parser).callonListElementContinuationElement66,
										expr: &seqExpr{
											pos: position{line: 1484, col: 5, offset: 49535},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1484, col: 5, offset: 49535},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1491, col: 5, offset: 49808},
														run: (*parser).callonListElementContinuationElement69,
														expr: &seqExpr{
															pos: position{line: 1491, col: 5, offset: 49808},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1491, col: 5, offset: 49808},
																	expr: &actionExpr{
																		pos: position{line: 2948, col: 10, offset: 97526},
																		run: (*parser).callonListElementContinuationElement72,
																		expr: &charClassMatcher{
																			pos:        position{line: 2948, col: 11, offset: 97527},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1491, col: 12, offset: 49815},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1491, col: 20, offset: 49823},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1493, col: 9, offset: 49880},
																				run: (*parser).callonListElementContinuationElement76,
																				expr: &seqExpr{
																					pos: position{line: 1493, col: 9, offset: 49880},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1493, col: 9, offset: 49880},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1493, col: 16, offset: 49887},
																								run: (*parser).callonListElementContinuationElement79,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1493, col: 16, offset: 49887},
																									expr: &litMatcher{
																										pos:        position{line: 1493, col: 17, offset: 49888},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1497, col: 9, offset: 49988},
																							run: (*parser).callonListElementContinuationElement82,
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 1514, col: 14, offset: 50695},
																				label: "depth",
																				expr: &actionExpr{
																					pos: position{line: 1514, col: 21, offset: 50702},
																					run: (*parser).callonListElementContinuationElement84,
																					expr: &litMatcher{
																						pos:        position{line: 1514, col: 22, offset: 50703},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2953, col: 11, offset: 97635},
																	run: (*parser).callonListElementContinuationElement86,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2953, col: 11, offset: 97635},
																		expr: &charClassMatcher{
																			pos:        position{line: 2953, col: 12, offset: 97636},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1485, col: 5, offset: 49576},
													label: "checkstyle",
													expr: &zeroOrOneExpr{
														pos: position{line: 1485, col: 16, offset: 49587},
														expr: &actionExpr{
															pos: position{line: 1521, col: 5, offset: 50864},
															run: (*parser).callonListElementContinuationElement91,
															expr: &seqExpr{
																pos: position{line: 1521, col: 5, offset: 50864},
																exprs: []interface{}{
																	&andExpr{
																		pos: position{line: 1521, col: 5, offset: 50864},
																		expr: &litMatcher{
																			pos:        position{line: 1521, col: 6, offset: 50865},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1521, col: 10, offset: 50869},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1522, col: 7, offset: 50883},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1522, col: 7, offset: 50883},
																					run: (*parser).callonListElementContinuationElement97,
																					expr: &litMatcher{
																						pos:        position{line: 1522, col: 7, offset: 50883},
																						val:        "[ ]",
																						ignoreCase: false,
																						want:       "\"[ ]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1523, col: 7, offset: 50928},
																					run: (*parser).callonListElementContinuationElement99,
																					expr: &litMatcher{
																						pos:        position{line: 1523, col: 7, offset: 50928},
																						val:        "[*]",
																						ignoreCase: false,
																						want:       "\"[*]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1524, col: 7, offset: 50971},
																					run: (*parser).callonListElementContinuationElement101,
																					expr: &litMatcher{
																						pos:        position{line: 1524, col: 7, offset: 50971},
																						val:        "[x]",
																						ignoreCase: false,
																						want:       "\"[x]\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2953, col: 11, offset: 97635},
																		run: (*parser).callonListElementContinuationElement103,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2953, col: 11, offset: 97635},
																			expr: &charClassMatcher{
																				pos:        position{line: 2953, col: 12, offset: 97636},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1486, col: 5, offset: 49626},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1374, col: 5, offset: 45844},
														run: (*parser).callonListElementContinuationElement107,
														expr: &seqExpr{
															pos: position{line: 1374, col: 5, offset: 45844},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1374, col: 5, offset: 45844},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1374, col: 14, offset: 45853},
																		run: (*parser).callonListElementContinuationElement110,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1374, col: 14, offset: 45853},
																			expr: &charClassMatcher{
																				pos:        position{line: 1374, col: 14, offset: 45853},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonListElementContinuationElement114,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1591, col: 5, offset: 52820},
										run: (*parser).callonListElementContinuationElement121,
										expr: &seqExpr{
											pos: position{line: 1591, col: 5, offset: 52820},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1591, col: 5, offset: 52820},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1597, col: 5, offset: 53021},
														run: (*parser).callonListElementContinuationElement124,
														expr: &seqExpr{
															pos: position{line: 1597, col: 5, offset: 53021},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1597, col: 5, offset: 53021},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1597, col: 9, offset: 53025},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1597, col: 14, offset: 53030},
																		run: (*parser).callonListElementContinuationElement128,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1597, col: 14, offset: 53030},
																			expr: &charClassMatcher{
																				pos:        position{line: 1597, col: 14, offset: 53030},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1597, col: 62, offset: 53078},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 2953, col: 11, offset: 97635},
																	run: (*parser).callonListElementContinuationElement132,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2953, col: 11, offset: 97635},
																		expr: &charClassMatcher{
																			pos:        position{line: 2953, col: 12, offset: 97636},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1592, col: 5, offset: 52856},
													label: "description",
													expr: &actionExpr{
														pos: position{line: 1602, col: 5, offset: 53156},
														run: (*parser).callonListElementContinuationElement136,
														expr: &seqExpr{
															pos: position{line: 1602, col: 5, offset: 53156},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1602, col: 5, offset: 53156},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1602, col: 14, offset: 53165},
																		run: (*parser).callonListElementContinuationElement139,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1602, col: 14, offset: 53165},
																			expr: &charClassMatcher{
																				pos:        position{line: 1602, col: 14, offset: 53165},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonListElementContinuationElement143,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1533, col: 5, offset: 51164},
										run: (*parser).callonListElementContinuationElement150,
										expr: &seqExpr{
											pos: position{line: 1533, col: 5, offset: 51164},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1533, col: 5, offset: 51164},
													label: "term",
													expr: &actionExpr{
														pos: position{line: 1541, col: 5, offset: 51423},
														run: (*parser).callonListElementContinuationElement153,
														expr: &oneOrMoreExpr{
															pos: position{line: 1541, col: 5, offset: 51423},
															expr: &seqExpr{
																pos: position{line: 1541, col: 6, offset: 51424},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1541, col: 6, offset: 51424},
																		expr: &actionExpr{
																			pos: position{line: 1546, col: 5, offset: 51555},
																			run: (*parser).callonListElementContinuationElement157,
																			expr: &seqExpr{
																				pos: position{line: 1546, col: 5, offset: 51555},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 1546, col: 5, offset: 51555},
																						label: "separator",
																						expr: &actionExpr{
																							pos: position{line: 1546, col: 16, offset: 51566},
																							run: (*parser).callonListElementContinuationElement160,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1546, col: 16, offset: 51566},
																								expr: &litMatcher{
																									pos:        position{line: 1546, col: 17, offset: 51567},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																							},
																						},
																					},
																					&andCodeExpr{
																						pos: position{line: 1549, col: 5, offset: 51624},
																						run: (*parser).callonListElementContinuationElement163,
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1541, col: 35, offset: 51453},
																		expr: &choiceExpr{
																			pos: position{line: 2965, col: 8, offset: 97889},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2958, col: 12, offset: 97749},
																					run: (*parser).callonListElementContinuationElement166,
																					expr: &choiceExpr{
																						pos: position{line: 2958, col: 13, offset: 97750},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2958, col: 13, offset: 97750},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 20, offset: 97757},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 29, offset: 97766},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2962, col: 8, offset: 97839},
																					expr: &anyMatcher{
																						line: 2962, col: 9, offset: 97840,
																					},
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1541, col: 40, offset: 51458,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1534, col: 5, offset: 51199},
													label: "separator",
													expr: &actionExpr{
														pos: position{line: 1546, col: 5, offset: 51555},
														run: (*parser).callonListElementContinuationElement175,
														expr: &seqExpr{
															pos: position{line: 1546, col: 5, offset: 51555},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1546, col: 5, offset: 51555},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1546, col: 16, offset: 51566},
																		run: (*parser).callonListElementContinuationElement178,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1546, col: 16, offset: 51566},
																			expr: &litMatcher{
																				pos:        position{line: 1546, col: 17, offset: 51567},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1549, col: 5, offset: 51624},
																	run: (*parser).callonListElementContinuationElement181,
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1535, col: 5, offset: 51244},
													label: "description",
													expr: &choiceExpr{
														pos: position{line: 1557, col: 5, offset: 51874},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1559, col: 9, offset: 51939},
																run: (*parser).callonListElementContinuationElement184,
																expr: &seqExpr{
																	pos: position{line: 1559, col: 9, offset: 51939},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1559, col: 9, offset: 51939},
																			expr: &actionExpr{
																				pos: position{line: 2948, col: 10, offset: 97526},
																				run: (*parser).callonListElementContinuationElement187,
																				expr: &charClassMatcher{
																					pos:        position{line: 2948, col: 11, offset: 97527},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2965, col: 8, offset: 97889},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2958, col: 12, offset: 97749},
																					run: (*parser).callonListElementContinuationElement190,
																					expr: &choiceExpr{
																						pos: position{line: 2958, col: 13, offset: 97750},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2958, col: 13, offset: 97750},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 20, offset: 97757},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 29, offset: 97766},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2962, col: 8, offset: 97839},
																					expr: &anyMatcher{
																						line: 2962, col: 9, offset: 97840,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1560, col: 9, offset: 51959},
																			expr: &actionExpr{
																				pos: position{line: 526, col: 14, offset: 17074},
																				run: (*parser).callonListElementContinuationElement198,
																				expr: &seqExpr{
																					pos: position{line: 526, col: 14, offset: 17074},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 526, col: 14, offset: 17074},
																							expr: &notExpr{
																								pos: position{line: 2962, col: 8, offset: 97839},
																								expr: &anyMatcher{
																									line: 2962, col: 9, offset: 97840,
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 526, col: 19, offset: 17079},
																							expr: &actionExpr{
																								pos: position{line: 2948, col: 10, offset: 97526},
																								run: (*parser).callonListElementContinuationElement204,
																								expr: &charClassMatcher{
																									pos:        position{line: 2948, col: 11, offset: 97527},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2965, col: 8, offset: 97889},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2958, col: 12, offset: 97749},
																									run: (*parser).callonListElementContinuationElement207,
																									expr: &choiceExpr{
																										pos: position{line: 2958, col: 13, offset: 97750},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2958, col: 13, offset: 97750},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 20, offset: 97757},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2958, col: 29, offset: 97766},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2962, col: 8, offset: 97839},
																									expr: &anyMatcher{
																										line: 2962, col: 9, offset: 97840,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1561, col: 9, offset: 51979},
																			label: "content",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 1561, col: 17, offset: 51987},
																				expr: &actionExpr{
																					pos: position{line: 1359, col: 5, offset: 45418},
																					run: (*parser).callonListElementContinuationElement216,
																					expr: &seqExpr{
																						pos: position{line: 1359, col: 5, offset: 45418},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 1359, col: 5, offset: 45418},
																								expr: &actionExpr{
																									pos: position{line: 526, col: 14, offset: 17074},
																									run: (*parser).callonListElementContinuationElement219,
																									expr: &seqExpr{
																										pos: position{line: 526, col: 14, offset: 17074},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 526, col: 14, offset: 17074},
																												expr: &notExpr{
																													pos: position{line: 2962, col: 8, offset: 97839},
																													expr: &anyMatcher{
																														line: 2962, col: 9, offset: 97840,
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 526, col: 19, offset: 17079},
																												expr: &actionExpr{
																													pos: position{line: 2948, col: 10, offset: 97526},
																													run: (*parser).callonListElementContinuationElement225,
																													expr: &charClassMatcher{
																														pos:        position{line: 2948, col: 11, offset: 97527},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2965, col: 8, offset: 97889},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2958, col: 12, offset: 97749},
																														run: (*parser).callonListElementContinuationElement228,
																														expr: &choiceExpr{
																															pos: position{line: 2958, col: 13, offset: 97750},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2958, col: 13, offset: 97750},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2958, col: 20, offset: 97757},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2958, col: 29, offset: 97766},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2962, col: 8, offset: 97839},
																														expr: &anyMatcher{
																															line: 2962, col: 9, offset: 97840,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1360, col: 5, offset: 45433},
																								expr: &seqExpr{
																									pos: position{line: 1392, col: 34, offset: 46343},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 1392, col: 34, offset: 46343},
																											val:        "+",
																											ignoreCase: false,
																											want:       "\"+\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 1392, col: 38, offset: 46347},
																											expr: &actionExpr{
																												pos: position{line: 2948, col: 10, offset: 97526},
																												run: (*parser).callonListElementContinuationElement239,
																												expr: &charClassMatcher{
																													pos:        position{line: 2948, col: 11, offset: 97527},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2958, col: 12, offset: 97749},
																											run: (*parser).callonListElementContinuationElement241,
																											expr: &choiceExpr{
																												pos: position{line: 2958, col: 13, offset: 97750},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2958, col: 13, offset: 97750},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2958, col: 20, offset: 97757},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2958, col: 29, offset: 97766},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1361, col: 5, offset: 45468},
																								expr: &actionExpr{
																									pos: position{line: 1441, col: 5, offset: 47846},
																									run: (*parser).callonListElementContinuationElement247,
																									expr: &seqExpr{
																										pos: position{line: 1441, col: 5, offset: 47846},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 1441, col: 5, offset: 47846},
																												expr: &actionExpr{
																													pos: position{line: 2948, col: 10, offset: 97526},
																													run: (*parser).callonListElementContinuationElement250,
																													expr: &charClassMatcher{
																														pos:        position{line: 2948, col: 11, offset: 97527},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1441, col: 12, offset: 47853},
																												label: "prefix",
																												expr: &choiceExpr{
																													pos: position{line: 1443, col: 9, offset: 47916},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 1443, col: 9, offset: 47916},
																															run: (*parser).callonListElementContinuationElement254,
																															expr: &seqExpr{
																																pos: position{line: 1443, col: 9, offset: 47916},
																																exprs: []interface{}{
																																	&labeledExpr{
																																		pos:   position{line: 1443, col: 9, offset: 47916},
																																		label: "depth",
																																		expr: &actionExpr{
																																			pos: position{line: 1443, col: 16, offset: 47923},
																																			run: (*parser).callonListElementContinuationElement257,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1443, col: 16, offset: 47923},
																																				expr: &litMatcher{
																																					pos:        position{line: 1443, col: 17, offset: 47924},
																																					val:        ".",
																																					ignoreCase: false,
																																					want:       "\".\"",
																																				},
																																			},
																																		},
																																	},
																																	&andCodeExpr{
																																		pos: position{line: 1447, col: 9, offset: 48024},
																																		run: (*parser).callonListElementContinuationElement260,
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1466, col: 11, offset: 48741},
																															run: (*parser).callonListElementContinuationElement261,
																															expr: &seqExpr{
																																pos: position{line: 1466, col: 11, offset: 48741},
																																exprs: []interface{}{
																																	&oneOrMoreExpr{
																																		pos: position{line: 1466, col: 11, offset: 48741},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1466, col: 12, offset: 48742},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1466, col: 20, offset: 48750},
																																		val:        ".",
																																		ignoreCase: false,
																																		want:       "\".\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1468, col: 13, offset: 48867},
																															run: (*parser).callonListElementContinuationElement266,
																															expr: &seqExpr{
																																pos: position{line: 1468, col: 13, offset: 48867},
																																exprs: []interface{}{
																																	&charClassMatcher{
																																		pos:        position{line: 1468, col: 14, offset: 48868},
																																		val:        "[a-z]",
																																		ranges:     []rune{'a', 'z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1468, col: 21, offset: 48875},
																																		val:        ".",
																																		ignoreCase: false,
																																		want:       "\".\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1470, col: 13, offset: 48995},
																															run: (*parser).callonListElementContinuationElement270,
																															expr: &seqExpr{
																																pos: position{line: 1470, col: 13, offset: 48995},
																																exprs: []interface{}{
																																	&charClassMatcher{
																																		pos:        position{line: 1470, col: 14, offset: 48996},
																																		val:        "[A-Z]",
																																		ranges:     []rune{'A', 'Z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1470, col: 21, offset: 49003},
																																		val:        ".",
																																		ignoreCase: false,
																																		want:       "\".\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1472, col: 13, offset: 49123},
																															run: (*parser).callonListElementContinuationElement274,
																															expr: &seqExpr{
																																pos: position{line: 1472, col: 13, offset: 49123},
																																exprs: []interface{}{
																																	&oneOrMoreExpr{
																																		pos: position{line: 1472, col: 13, offset: 49123},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1472, col: 14, offset: 49124},
																																			val:        "[ivxdlcm]",
																																			chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1472, col: 26, offset: 49136},
																																		val:        ")",
																																		ignoreCase: false,
																																		want:       "\")\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1474, col: 13, offset: 49256},
																															run: (*parser).callonListElementContinuationElement279,
																															expr: &seqExpr{
																																pos: position{line: 1474, col: 13, offset: 49256},
																																exprs: []interface{}{
																																	&oneOrMoreExpr{
																																		pos: position{line: 1474, col: 13, offset: 49256},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1474, col: 14, offset: 49257},
																																			val:        "[IVXDLCM]",
																																			chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1474, col: 26, offset: 49269},
																																		val:        ")",
																																		ignoreCase: false,
																																		want:       "\")\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2953, col: 11, offset: 97635},
																												run: (*parser).callonListElementContinuationElement284,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2953, col: 11, offset: 97635},
																													expr: &charClassMatcher{
																														pos:        position{line: 2953, col: 12, offset: 97636},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1362, col: 5, offset: 45498},
																								expr: &actionExpr{
																									pos: position{line: 1491, col: 5, offset: 49808},
																									run: (*parser).callonListElementContinuationElement288,
																									expr: &seqExpr{
																										pos: position{line: 1491, col: 5, offset: 49808},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 1491, col: 5, offset: 49808},
																												expr: &actionExpr{
																													pos: position{line: 2948, col: 10, offset: 97526},
																													run: (*parser).callonListElementContinuationElement291,
																													expr: &charClassMatcher{
																														pos:        position{line: 2948, col: 11, offset: 97527},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1491, col: 12, offset: 49815},
																												label: "prefix",
																												expr: &choiceExpr{
																													pos: position{line: 1491, col: 20, offset: 49823},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 1493, col: 9, offset: 49880},
																															run: (*parser).callonListElementContinuationElement295,
																															expr: &seqExpr{
																																pos: position{line: 1493, col: 9, offset: 49880},
																																exprs: []interface{}{
																																	&labeledExpr{
																																		pos:   position{line: 1493, col: 9, offset: 49880},
																																		label: "depth",
																																		expr: &actionExpr{
																																			pos: position{line: 1493, col: 16, offset: 49887},
																																			run: (*parser).callonListElementContinuationElement298,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1493, col: 16, offset: 49887},
																																				expr: &litMatcher{
																																					pos:        position{line: 1493, col: 17, offset: 49888},
																																					val:        "*",
																																					ignoreCase: false,
																																					want:       "\"*\"",
																																				},
																																			},
																																		},
																																	},
																																	&andCodeExpr{
																																		pos: position{line: 1497, col: 9, offset: 49988},
																																		run: (*parser).callonListElementContinuationElement301,
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 1514, col: 14, offset: 50695},
																															label: "depth",
																															expr: &actionExpr{
																																pos: position{line: 1514, col: 21, offset: 50702},
																																run: (*parser).callonListElementContinuationElement303,
																																expr: &litMatcher{
																																	pos:        position{line: 1514, col: 22, offset: 50703},
																																	val:        "-",
																																	ignoreCase: false,
																																	want:       "\"-\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2953, col: 11, offset: 97635},
																												run: (*parser).callonListElementContinuationElement305,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2953, col: 11, offset: 97635},
																													expr: &charClassMatcher{
																														pos:        position{line: 2953, col: 12, offset: 97636},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1363, col: 5, offset: 45530},
																								expr: &actionExpr{
																									pos: position{line: 1597, col: 5, offset: 53021},
																									run: (*parser).callonListElementContinuationElement309,
																									expr: &seqExpr{
																										pos: position{line: 1597, col: 5, offset: 53021},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1597, col: 5, offset: 53021},
																												val:        "<",
																												ignoreCase: false,
																												want:       "\"<\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 1597, col: 9, offset: 53025},
																												label: "ref",
																												expr: &actionExpr{
																													pos: position{line: 1597, col: 14, offset: 53030},
																													run: (*parser).callonListElementContinuationElement313,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1597, col: 14, offset: 53030},
																														expr: &charClassMatcher{
																															pos:        position{line: 1597, col: 14, offset: 53030},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 1597, col: 62, offset: 53078},
																												val:        ">",
																												ignoreCase: false,
																												want:       "\">\"",
																											},
																											&actionExpr{
																												pos: position{line: 2953, col: 11, offset: 97635},
																												run: (*parser).callonListElementContinuationElement317,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2953, col: 11, offset: 97635},
																													expr: &charClassMatcher{
																														pos:        position{line: 2953, col: 12, offset: 97636},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1364, col: 5, offset: 45560},
																								expr: &seqExpr{
																									pos: position{line: 1364, col: 7, offset: 45562},
																									exprs: []interface{}{
																										&actionExpr{
																											pos: position{line: 1541, col: 5, offset: 51423},
																											run: (*parser).callonListElementContinuationElement322,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1541, col: 5, offset: 51423},
																												expr: &seqExpr{
																													pos: position{line: 1541, col: 6, offset: 51424},
																													exprs: []interface{}{
																														&notExpr{
																															pos: position{line: 1541, col: 6, offset: 51424},
																															expr: &actionExpr{
																																pos: position{line: 1546, col: 5, offset: 51555},
																																run: (*parser).callonListElementContinuationElement326,
																																expr: &seqExpr{
																																	pos: position{line: 1546, col: 5, offset: 51555},
																																	exprs: []interface{}{
																																		&labeledExpr{
																																			pos:   position{line: 1546, col: 5, offset: 51555},
																																			label: "separator",
																																			expr: &actionExpr{
																																				pos: position{line: 1546, col: 16, offset: 51566},
																																				run: (*parser).callonListElementContinuationElement329,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 1546, col: 16, offset: 51566},
																																					expr: &litMatcher{
																																						pos:        position{line: 1546, col: 17, offset: 51567},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																				},
																																			},
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 1549, col: 5, offset: 51624},
																																			run: (*parser).callonListElementContinuationElement332,
																																		},
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 1541, col: 35, offset: 51453},
																															expr: &choiceExpr{
																																pos: position{line: 2965, col: 8, offset: 97889},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 2958, col: 12, offset: 97749},
																																		run: (*parser).callonListElementContinuationElement335,
																																		expr: &choiceExpr{
																																			pos: position{line: 2958, col: 13, offset: 97750},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2958, col: 13, offset: 97750},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2958, col: 20, offset: 97757},
																																					val:        "\r\n",
																																					ignoreCase: false,
																																					want:       "\"\\r\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2958, col: 29, offset: 97766},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 2962, col: 8, offset: 97839},
																																		expr: &anyMatcher{
																																			line: 2962, col: 9, offset: 97840,
																																		},
																																	},
																																},
																															},
																														},
																														&anyMatcher{
																															line: 1541, col: 40, offset: 51458,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1546, col: 5, offset: 51555},
																											run: (*parser).callonListElementContinuationElement343,
																											expr: &seqExpr{
																												pos: position{line: 1546, col: 5, offset: 51555},
																												exprs: []interface{}{
																													&labeledExpr{
																														pos:   position{line: 1546, col: 5, offset: 51555},
																														label: "separator",
																														expr: &actionExpr{
																															pos: position{line: 1546, col: 16, offset: 51566},
																															run: (*parser).callonListElementContinuationElement346,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1546, col: 16, offset: 51566},
																																expr: &litMatcher{
																																	pos:        position{line: 1546, col: 17, offset: 51567},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																															},
																														},
																													},
																													&andCodeExpr{
																														pos: position{line: 1549, col: 5, offset: 51624},
																														run: (*parser).callonListElementContinuationElement349,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1365, col: 5, offset: 45618},
																								expr: &actionExpr{
																									pos: position{line: 571, col: 5, offset: 18595},
																									run: (*parser).callonListElementContinuationElement351,
																									expr: &seqExpr{
																										pos: position{line: 571, col: 5, offset: 18595},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 571, col: 5, offset: 18595},
																												expr: &charClassMatcher{
																													pos:        position{line: 2860, col: 13, offset: 94811},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 572, col: 5, offset: 18625},
																												label: "delimiter",
																												expr: &choiceExpr{
																													pos: position{line: 573, col: 9, offset: 18645},
																													alternatives: []interface{}{
																														&seqExpr{
																															pos: position{line: 585, col: 26, offset: 18966},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 585, col: 26, offset: 18966},
																																	val:        "////",
																																	ignoreCase: false,
																																	want:       "\"////\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 585, col: 33, offset: 18973},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonListElementContinuationElement360,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonListElementContinuationElement363,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 587, col: 26, offset: 19010},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 587, col: 26, offset: 19010},
																																	val:        "====",
																																	ignoreCase: false,
																																	want:       "\"====\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 587, col: 33, offset: 19017},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonListElementContinuationElement373,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonListElementContinuationElement376,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 589, col: 25, offset: 19053},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 589, col: 25, offset: 19053},
																																	val:        "```",
																																	ignoreCase: false,
																																	want:       "\"```\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 589, col: 31, offset: 19059},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonListElementContinuationElement386,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonListElementContinuationElement389,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 591, col: 26, offset: 19096},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 591, col: 26, offset: 19096},
																																	val:        "----",
																																	ignoreCase: false,
																																	want:       "\"----\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 591, col: 33, offset: 19103},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonListElementContinuationElement399,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonListElementContinuationElement402,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 593, col: 26, offset: 19140},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 593, col: 26, offset: 19140},
																																	val:        "....",
																																	ignoreCase: false,
																																	want:       "\"....\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 593, col: 33, offset: 19147},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonListElementContinuationElement412,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonListElementContinuationElement415,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 595, col: 30, offset: 19188},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 595, col: 30, offset: 19188},
																																	val:        "++++",
																																	ignoreCase: false,
																																	want:       "\"++++\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 595, col: 37, offset: 19195},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonListElementContinuationElement425,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonListElementContinuationElement428,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 597, col: 24, offset: 19230},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 597, col: 24, offset: 19230},
																																	val:        "____",
																																	ignoreCase: false,
																																	want:       "\"____\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 597, col: 31, offset: 19237},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonListElementContinuationElement438,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonListElementContinuationElement441,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 599, col: 26, offset: 19274},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 599, col: 26, offset: 19274},
																																	val:        "****",
																																	ignoreCase: false,
																																	want:       "\"****\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 599, col: 33, offset: 19281},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonListElementContinuationElement451,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonListElementContinuationElement454,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1366, col: 5, offset: 45638},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1366, col: 14, offset: 45647},
																									run: (*parser).callonListElementContinuationElement462,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1366, col: 14, offset: 45647},
																										expr: &charClassMatcher{
																											pos:        position{line: 1366, col: 14, offset: 45647},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonListElementContinuationElement466,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1569, col: 9, offset: 52222},
																run: (*parser).callonListElementContinuationElement473,
																expr: &seqExpr{
																	pos: position{line: 1569, col: 9, offset: 52222},
																	exprs: []interface{}{
																		&actionExpr{
																			pos: position{line: 2953, col: 11, offset: 97635},
																			run: (*parser).callonListElementContinuationElement475,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2953, col: 11, offset: 97635},
																				expr: &charClassMatcher{
																					pos:        position{line: 2953, col: 12, offset: 97636},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1570, col: 9, offset: 52274},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1570, col: 18, offset: 52283},
																				run: (*parser).callonListElementContinuationElement479,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1570, col: 18, offset: 52283},
																					expr: &charClassMatcher{
																						pos:        position{line: 1570, col: 18, offset: 52283},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2965, col: 8, offset: 97889},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2958, col: 12, offset: 97749},
																					run: (*parser).callonListElementContinuationElement483,
																					expr: &choiceExpr{
																						pos: position{line: 2958, col: 13, offset: 97750},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2958, col: 13, offset: 97750},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 20, offset: 97757},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 29, offset: 97766},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2962, col: 8, offset: 97839},
																					expr: &anyMatcher{
																						line: 2962, col: 9, offset: 97840,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1397, col: 5, offset: 46484},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1397, col: 16, offset: 46495},
								expr: &ruleRefExpr{
									pos:  position{line: 1397, col: 17, offset: 46496},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1398, col: 5, offset: 46518},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1399, col: 9, offset: 46536},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 526, col: 14, offset: 17074},
										run: (*parser).callonListElementContinuationElement495,
										expr: &seqExpr{
											pos: position{line: 526, col: 14, offset: 17074},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 526, col: 14, offset: 17074},
													expr: &notExpr{
														pos: position{line: 2962, col: 8, offset: 97839},
														expr: &anyMatcher{
															line: 2962, col: 9, offset: 97840,
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 526, col: 19, offset: 17079},
													expr: &actionExpr{
														pos: position{line: 2948, col: 10, offset: 97526},
														run: (*parser).callonListElementContinuationElement501,
														expr: &charClassMatcher{
															pos:        position{line: 2948, col: 11, offset: 97527},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonListElementContinuationElement504,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 152, col: 5, offset: 4423},
										run: (*parser).callonListElementContinuationElement511,
										expr: &seqExpr{
											pos: position{line: 152, col: 5, offset: 4423},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 152, col: 5, offset: 4423},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 152, col: 9, offset: 4427},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 162, col: 18, offset: 4814},
														run: (*parser).callonListElementContinuationElement515,
														expr: &seqExpr{
															pos: position{line: 162, col: 18, offset: 4814},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 162, col: 18, offset: 4814},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 162, col: 28, offset: 4824},
																	expr: &charClassMatcher{
																		pos:        position{line: 162, col: 29, offset: 4825},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 152, col: 30, offset: 4448},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 153, col: 5, offset: 4457},
													label: "value",
													expr: &zeroOrOneExpr{
														pos: position{line: 153, col: 11, offset: 4463},
														expr: &actionExpr{
															pos: position{line: 167, col: 5, offset: 4915},
															run: (*parser).callonListElementContinuationElement523,
															expr: &seqExpr{
																pos: position{line: 167, col: 5, offset: 4915},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 2953, col: 11, offset: 97635},
																		run: (*parser).callonListElementContinuationElement525,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2953, col: 11, offset: 97635},
																			expr: &charClassMatcher{
																				pos:        position{line: 2953, col: 12, offset: 97636},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 167, col: 12, offset: 4922},
																		label: "elements",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 167, col: 21, offset: 4931},
																			expr: &actionExpr{
																				pos: position{line: 171, col: 37, offset: 5090},
																				run: (*parser).callonListElementContinuationElement530,
																				expr: &seqExpr{
																					pos: position{line: 171, col: 37, offset: 5090},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 171, col: 37, offset: 5090},
																							expr: &choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonListElementContinuationElement534,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 172, col: 5, offset: 5100},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 173, col: 9, offset: 5118},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 173, col: 10, offset: 5119},
																										run: (*parser).callonListElementContinuationElement543,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 173, col: 10, offset: 5119},
																											expr: &charClassMatcher{
																												pos:        position{line: 173, col: 10, offset: 5119},
																												val:        "[^\\r\\n{]",
																												chars:      []rune{'\r', '\n', '{'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 493, col: 5, offset: 15873},
																										run: (*parser).callonListElementContinuationElement546,
																										expr: &seqExpr{
																											pos: position{line: 493, col: 5, offset: 15873},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 493, col: 5, offset: 15873},
																													run: (*parser).callonListElementContinuationElement548,
																												},
																												&labeledExpr{
																													pos:   position{line: 496, col: 5, offset: 15937},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 496, col: 14, offset: 15946},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 507, col: 25, offset: 16408},
																																run: (*parser).callonListElementContinuationElement551,
																																expr: &seqExpr{
																																	pos: position{line: 507, col: 25, offset: 16408},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 507, col: 25, offset: 16408},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 37, offset: 16420},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonListElementContinuationElement555,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 56, offset: 16439},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 507, col: 62, offset: 16445},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonListElementContinuationElement562,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonListElementContinuationElement567,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonListElementContinuationElement569,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 507, col: 78, offset: 16461},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 511, col: 25, offset: 16563},
																																run: (*parser).callonListElementContinuationElement573,
																																expr: &seqExpr{
																																	pos: position{line: 511, col: 25, offset: 16563},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 511, col: 25, offset: 16563},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 38, offset: 16576},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonListElementContinuationElement577,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 57, offset: 16595},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 511, col: 63, offset: 16601},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonListElementContinuationElement584,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonListElementContinuationElement589,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonListElementContinuationElement591,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 511, col: 79, offset: 16617},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 500, col: 31, offset: 16063},
																																run: (*parser).callonListElementContinuationElement595,
																																expr: &seqExpr{
																																	pos: position{line: 500, col: 31, offset: 16063},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 500, col: 31, offset: 16063},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 500, col: 35, offset: 16067},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonListElementContinuationElement599,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 500, col: 54, offset: 16086},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 177, col: 12, offset: 5247},
																										run: (*parser).callonListElementContinuationElement605,
																										expr: &litMatcher{
																											pos:        position{line: 177, col: 12, offset: 5247},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonListElementContinuationElement608,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 184, col: 19, offset: 5402},
										run: (*parser).callonListElementContinuationElement615,
										expr: &seqExpr{
											pos: position{line: 184, col: 19, offset: 5402},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 184, col: 19, offset: 5402},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 184, col: 24, offset: 5407},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 162, col: 18, offset: 4814},
														run: (*parser).callonListElementContinuationElement619,
														expr: &seqExpr{
															pos: position{line: 162, col: 18, offset: 4814},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 162, col: 18, offset: 4814},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 162, col: 28, offset: 4824},
																	expr: &charClassMatcher{
																		pos:        position{line: 162, col: 29, offset: 4825},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 184, col: 45, offset: 5428},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 184, col: 49, offset: 5432},
													expr: &actionExpr{
														pos: position{line: 2948, col: 10, offset: 97526},
														run: (*parser).callonListElementContinuationElement626,
														expr: &charClassMatcher{
															pos:        position{line: 2948, col: 11, offset: 97527},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonListElementContinuationElement629,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 186, col: 5, offset: 5499},
										run: (*parser).callonListElementContinuationElement636,
										expr: &seqExpr{
											pos: position{line: 186, col: 5, offset: 5499},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 186, col: 5, offset: 5499},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 186, col: 9, offset: 5503},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 162, col: 18, offset: 4814},
														run: (*parser).callonListElementContinuationElement640,
														expr: &seqExpr{
															pos: position{line: 162, col: 18, offset: 4814},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 162, col: 18, offset: 4814},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 162, col: 28, offset: 4824},
																	expr: &charClassMatcher{
																		pos:        position{line: 162, col: 29, offset: 4825},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 186, col: 30, offset: 5524},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 186, col: 35, offset: 5529},
													expr: &actionExpr{
														pos: position{line: 2948, col: 10, offset: 97526},
														run: (*parser).callonListElementContinuationElement647,
														expr: &charClassMatcher{
															pos:        position{line: 2948, col: 11, offset: 97527},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonListElementContinuationElement650,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1402, col: 11, offset: 46612},
										name: "DelimitedBlock",
									},
									&actionExpr{
										pos: position{line: 2818, col: 18, offset: 93337},
										run: (*parser).callonListElementContinuationElement658,
										expr: &seqExpr{
											pos: position{line: 2818, col: 18, offset: 93337},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2818, col: 19, offset: 93338},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2818, col: 19, offset: 93338},
															val:        "***",
															ignoreCase: false,
															want:       "\"***\"",
														},
														&litMatcher{
															pos:        position{line: 2818, col: 27, offset: 93346},
															val:        "* * *",
															ignoreCase: false,
															want:       "\"* * *\"",
														},
														&litMatcher{
															pos:        position{line: 2818, col: 37, offset: 93356},
															val:        "---",
															ignoreCase: false,
															want:       "\"---\"",
														},
														&litMatcher{
															pos:        position{line: 2818, col: 45, offset: 93364},
															val:        "- - -",
															ignoreCase: false,
															want:       "\"- - -\"",
														},
														&litMatcher{
															pos:        position{line: 2818, col: 55, offset: 93374},
															val:        "___",
															ignoreCase: false,
															want:       "\"___\"",
														},
														&litMatcher{
															pos:        position{line: 2818, col: 63, offset: 93382},
															val:        "_ _ _",
															ignoreCase: false,
															want:       "\"_ _ _\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2962, col: 8, offset: 97839},
													expr: &anyMatcher{
														line: 2962, col: 9, offset: 97840,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1404, col: 11, offset: 46698},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1405, col: 11, offset: 46719},
										name: "FileInclusion",
									},
									&actionExpr{
										pos: position{line: 2717, col: 5, offset: 90469},
										run: (*parser).callonListElementContinuationElement671,
										expr: &seqExpr{
											pos: position{line: 2717, col: 5, offset: 90469},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2724, col: 19, offset: 90645},
													val:        "|===",
													ignoreCase: false,
													want:       "\"|===\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2724, col: 26, offset: 90652},
													expr: &actionExpr{
														pos: position{line: 2948, col: 10, offset: 97526},
														run: (*parser).callonListElementContinuationElement675,
														expr: &charClassMatcher{
															pos:        position{line: 2948, col: 11, offset: 97527},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonListElementContinuationElement678,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2718, col: 5, offset: 90493},
													label: "header",
													expr: &zeroOrOneExpr{
														pos: position{line: 2718, col: 12, offset: 90500},
														expr: &actionExpr{
															pos: position{line: 2732, col: 5, offset: 90812},
															run: (*parser).callonListElementContinuationElement687,
															expr: &seqExpr{
																pos: position{line: 2732, col: 5, offset: 90812},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 2732, col: 5, offset: 90812},
																		label: "cells",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2732, col: 11, offset: 90818},
																			expr: &actionExpr{
																				pos: position{line: 2738, col: 5, offset: 90935},
																				run: (*parser).callonListElementContinuationElement691,
																				expr: &seqExpr{
																					pos: position{line: 2738, col: 5, offset: 90935},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2738, col: 5, offset: 90935},
																							val:        "|",
																							ignoreCase: false,
																							want:       "\"|\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 2738, col: 9, offset: 90939},
																							expr: &actionExpr{
																								pos: position{line: 2948, col: 10, offset: 97526},
																								run: (*parser).callonListElementContinuationElement695,
																								expr: &charClassMatcher{
																									pos:        position{line: 2948, col: 11, offset: 97527},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 2739, col: 5, offset: 90951},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 2739, col: 14, offset: 90960},
																								expr: &actionExpr{
																									pos: position{line: 2771, col: 5, offset: 91748},
																									run: (*parser).callonListElementContinuationElement699,
																									expr: &labeledExpr{
																										pos:   position{line: 2771, col: 5, offset: 91748},
																										label: "content",
																										expr: &actionExpr{
																											pos: position{line: 2771, col: 14, offset: 91757},
																											run: (*parser).callonListElementContinuationElement701,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2771, col: 14, offset: 91757},
																												expr: &charClassMatcher{
																													pos:        position{line: 2771, col: 14, offset: 91757},
																													val:        "[^\\r\\n|]",
																													chars:      []rune{'\r', '\n', '|'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2965, col: 8, offset: 97889},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2958, col: 12, offset: 97749},
																				run: (*parser).callonListElementContinuationElement705,
																				expr: &choiceExpr{
																					pos: position{line: 2958, col: 13, offset: 97750},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2958, col: 13, offset: 97750},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2958, col: 20, offset: 97757},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2958, col: 29, offset: 97766},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2962, col: 8, offset: 97839},
																				expr: &anyMatcher{
																					line: 2962, col: 9, offset: 97840,
																				},
																			},
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2733, col: 5, offset: 90840},
																		expr: &actionExpr{
																			pos: position{line: 526, col: 14, offset: 17074},
																			run: (*parser).callonListElementContinuationElement713,
																			expr: &seqExpr{
																				pos: position{line: 526, col: 14, offset: 17074},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 526, col: 14, offset: 17074},
																						expr: &notExpr{
																							pos: position{line: 2962, col: 8, offset: 97839},
																							expr: &anyMatcher{
																								line: 2962, col: 9, offset: 97840,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 526, col: 19, offset: 17079},
																						expr: &actionExpr{
																							pos: position{line: 2948, col: 10, offset: 97526},
																							run: (*parser).callonListElementContinuationElement719,
																							expr: &charClassMatcher{
																								pos:        position{line: 2948, col: 11, offset: 97527},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2965, col: 8, offset: 97889},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2958, col: 12, offset: 97749},
																								run: (*parser).callonListElementContinuationElement722,
																								expr: &choiceExpr{
																									pos: position{line: 2958, col: 13, offset: 97750},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2958, col: 13, offset: 97750},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2958, col: 20, offset: 97757},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2958, col: 29, offset: 97766},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2962, col: 8, offset: 97839},
																								expr: &anyMatcher{
																									line: 2962, col: 9, offset: 97840,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2719, col: 5, offset: 90519},
													label: "rows",
													expr: &zeroOrMoreExpr{
														pos: position{line: 2719, col: 10, offset: 90524},
														expr: &choiceExpr{
															pos: position{line: 2743, col: 13, offset: 91057},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2753, col: 5, offset: 91276},
																	run: (*parser).callonListElementContinuationElement732,
																	expr: &seqExpr{
																		pos: position{line: 2753, col: 5, offset: 91276},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2753, col: 5, offset: 91276},
																				expr: &choiceExpr{
																					pos: position{line: 2728, col: 22, offset: 90725},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2724, col: 19, offset: 90645},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2724, col: 19, offset: 90645},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2724, col: 26, offset: 90652},
																									expr: &actionExpr{
																										pos: position{line: 2948, col: 10, offset: 97526},
																										run: (*parser).callonListElementContinuationElement739,
																										expr: &charClassMatcher{
																											pos:        position{line: 2948, col: 11, offset: 97527},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2965, col: 8, offset: 97889},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2958, col: 12, offset: 97749},
																											run: (*parser).callonListElementContinuationElement742,
																											expr: &choiceExpr{
																												pos: position{line: 2958, col: 13, offset: 97750},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2958, col: 13, offset: 97750},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2958, col: 20, offset: 97757},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2958, col: 29, offset: 97766},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2962, col: 8, offset: 97839},
																											expr: &anyMatcher{
																												line: 2962, col: 9, offset: 97840,
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2962, col: 8, offset: 97839},
																							expr: &anyMatcher{
																								line: 2962, col: 9, offset: 97840,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2754, col: 5, offset: 91299},
																				label: "cells",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2754, col: 11, offset: 91305},
																					expr: &actionExpr{
																						pos: position{line: 2754, col: 12, offset: 91306},
																						run: (*parser).callonListElementContinuationElement753,
																						expr: &seqExpr{
																							pos: position{line: 2754, col: 12, offset: 91306},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 2754, col: 12, offset: 91306},
																									label: "cell",
																									expr: &actionExpr{
																										pos: position{line: 2763, col: 5, offset: 91547},
																										run: (*parser).callonListElementContinuationElement756,
																										expr: &seqExpr{
																											pos: position{line: 2763, col: 5, offset: 91547},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 2763, col: 5, offset: 91547},
																													expr: &choiceExpr{
																														pos: position{line: 2728, col: 22, offset: 90725},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 2724, col: 19, offset: 90645},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2724, col: 19, offset: 90645},
																																		val:        "|===",
																																		ignoreCase: false,
																																		want:       "\"|===\"",
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 2724, col: 26, offset: 90652},
																																		expr: &actionExpr{
																																			pos: position{line: 2948, col: 10, offset: 97526},
																																			run: (*parser).callonListElementContinuationElement763,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2948, col: 11, offset: 97527},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 2965, col: 8, offset: 97889},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 2958, col: 12, offset: 97749},
																																				run: (*parser).callonListElementContinuationElement766,
																																				expr: &choiceExpr{
																																					pos: position{line: 2958, col: 13, offset: 97750},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 2958, col: 13, offset: 97750},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2958, col: 20, offset: 97757},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2958, col: 29, offset: 97766},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2962, col: 8, offset: 97839},
																																				expr: &anyMatcher{
																																					line: 2962, col: 9, offset: 97840,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2962, col: 8, offset: 97839},
																																expr: &anyMatcher{
																																	line: 2962, col: 9, offset: 97840,
																																},
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2764, col: 5, offset: 91570},
																													expr: &actionExpr{
																														pos: position{line: 526, col: 14, offset: 17074},
																														run: (*parser).callonListElementContinuationElement776,
																														expr: &seqExpr{
																															pos: position{line: 526, col: 14, offset: 17074},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 526, col: 14, offset: 17074},
																																	expr: &notExpr{
																																		pos: position{line: 2962, col: 8, offset: 97839},
																																		expr: &anyMatcher{
																																			line: 2962, col: 9, offset: 97840,
																																		},
																																	},
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 526, col: 19, offset: 17079},
																																	expr: &actionExpr{
																																		pos: position{line: 2948, col: 10, offset: 97526},
																																		run: (*parser).callonListElementContinuationElement782,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2948, col: 11, offset: 97527},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2965, col: 8, offset: 97889},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2958, col: 12, offset: 97749},
																																			run: (*parser).callonListElementContinuationElement785,
																																			expr: &choiceExpr{
																																				pos: position{line: 2958, col: 13, offset: 97750},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 13, offset: 97750},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 20, offset: 97757},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2958, col: 29, offset: 97766},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2962, col: 8, offset: 97839},
																																			expr: &anyMatcher{
																																				line: 2962, col: 9, offset: 97840,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2765, col: 5, offset: 91585},
																													val:        "|",
																													ignoreCase: false,
																													want:       "\"|\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 2765, col: 9, offset: 91589},
																													expr: &actionExpr{
																														pos: position{line: 2948, col: 10, offset: 97526},
																														run: (*parser).callonListElementContinuationElement794,
																														expr: &charClassMatcher{
																															pos:        position{line: 2948, col: 11, offset: 97527},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 2765, col: 16, offset: 91596},
																													label: "content",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 2765, col: 25, offset: 91605},
																														expr: &actionExpr{
																															pos: position{line: 2771, col: 5, offset: 91748},
																															run: (*parser).callonListElementContinuationElement798,
																															expr: &labeledExpr{
																																pos:   position{line: 2771, col: 5, offset: 91748},
																																label: "content",
																																expr: &actionExpr{
																																	pos: position{line: 2771, col: 14, offset: 91757},
																																	run: (*parser).callonListElementContinuationElement800,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2771, col: 14, offset: 91757},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2771, col: 14, offset: 91757},
																																			val:        "[^\\r\\n|]",
																																			chars:      []rune{'\r', '\n', '|'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2965, col: 8, offset: 97889},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2958, col: 12, offset: 97749},
																											run: (*parser).callonListElementContinuationElement804,
																											expr: &choiceExpr{
																												pos: position{line: 2958, col: 13, offset: 97750},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2958, col: 13, offset: 97750},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2958, col: 20, offset: 97757},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2958, col: 29, offset: 97766},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2962, col: 8, offset: 97839},
																											expr: &anyMatcher{
																												line: 2962, col: 9, offset: 97840,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2757, col: 6, offset: 91368},
																				alternatives: []interface{}{
																					&oneOrMoreExpr{
																						pos: position{line: 2757, col: 6, offset: 91368},
																						expr: &actionExpr{
																							pos: position{line: 526, col: 14, offset: 17074},
																							run: (*parser).callonListElementContinuationElement813,
																							expr: &seqExpr{
																								pos: position{line: 526, col: 14, offset: 17074},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 526, col: 14, offset: 17074},
																										expr: &notExpr{
																											pos: position{line: 2962, col: 8, offset: 97839},
																											expr: &anyMatcher{
																												line: 2962, col: 9, offset: 97840,
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 526, col: 19, offset: 17079},
																										expr: &actionExpr{
																											pos: position{line: 2948, col: 10, offset: 97526},
																											run: (*parser).callonListElementContinuationElement819,
																											expr: &charClassMatcher{
																												pos:        position{line: 2948, col: 11, offset: 97527},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2965, col: 8, offset: 97889},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2958, col: 12, offset: 97749},
																												run: (*parser).callonListElementContinuationElement822,
																												expr: &choiceExpr{
																													pos: position{line: 2958, col: 13, offset: 97750},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2958, col: 13, offset: 97750},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2958, col: 20, offset: 97757},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2958, col: 29, offset: 97766},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2962, col: 8, offset: 97839},
																												expr: &anyMatcher{
																													line: 2962, col: 9, offset: 97840,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&andExpr{
																						pos: position{line: 2757, col: 19, offset: 91381},
																						expr: &choiceExpr{
																							pos: position{line: 2728, col: 22, offset: 90725},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2724, col: 19, offset: 90645},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2724, col: 19, offset: 90645},
																											val:        "|===",
																											ignoreCase: false,
																											want:       "\"|===\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 2724, col: 26, offset: 90652},
																											expr: &actionExpr{
																												pos: position{line: 2948, col: 10, offset: 97526},
																												run: (*parser).callonListElementContinuationElement834,
																												expr: &charClassMatcher{
																													pos:        position{line: 2948, col: 11, offset: 97527},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2965, col: 8, offset: 97889},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2958, col: 12, offset: 97749},
																													run: (*parser).callonListElementContinuationElement837,
																													expr: &choiceExpr{
																														pos: position{line: 2958, col: 13, offset: 97750},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2958, col: 13, offset: 97750},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2958, col: 20, offset: 97757},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2958, col: 29, offset: 97766},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2962, col: 8, offset: 97839},
																													expr: &anyMatcher{
																														line: 2962, col: 9, offset: 97840,
																													},
																												},
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2962, col: 8, offset: 97839},
																									expr: &anyMatcher{
																										line: 2962, col: 9, offset: 97840,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2746, col: 5, offset: 91124},
																	run: (*parser).callonListElementContinuationElement846,
																	expr: &seqExpr{
																		pos: position{line: 2746, col: 5, offset: 91124},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2746, col: 5, offset: 91124},
																				expr: &choiceExpr{
																					pos: position{line: 2728, col: 22, offset: 90725},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2724, col: 19, offset: 90645},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2724, col: 19, offset: 90645},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2724, col: 26, offset: 90652},
																									expr: &actionExpr{
																										pos: position{line: 2948, col: 10, offset: 97526},
																										run: (*parser).callonListElementContinuationElement853,
																										expr: &charClassMatcher{
																											pos:        position{line: 2948, col: 11, offset: 97527},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2965, col: 8, offset: 97889},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2958, col: 12, offset: 97749},
																											run: (*parser).callonListElementContinuationElement856,
																											expr: &choiceExpr{
																												pos: position{line: 2958, col: 13, offset: 97750},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2958, col: 13, offset: 97750},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2958, col: 20, offset: 97757},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2958, col: 29, offset: 97766},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2962, col: 8, offset: 97839},
																											expr: &anyMatcher{
																												line: 2962, col: 9, offset: 97840,
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2962, col: 8, offset: 97839},
																							expr: &anyMatcher{
																								line: 2962, col: 9, offset: 97840,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2747, col: 5, offset: 91147},
																				label: "cells",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2747, col: 11, offset: 91153},
																					expr: &actionExpr{
																						pos: position{line: 2763, col: 5, offset: 91547},
																						run: (*parser).callonListElementContinuationElement867,
																						expr: &seqExpr{
																							pos: position{line: 2763, col: 5, offset: 91547},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 2763, col: 5, offset: 91547},
																									expr: &choiceExpr{
																										pos: position{line: 2728, col: 22, offset: 90725},
																										alternatives: []interface{}{
																											&seqExpr{
																												pos: position{line: 2724, col: 19, offset: 90645},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2724, col: 19, offset: 90645},
																														val:        "|===",
																														ignoreCase: false,
																														want:       "\"|===\"",
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 2724, col: 26, offset: 90652},
																														expr: &actionExpr{
																															pos: position{line: 2948, col: 10, offset: 97526},
																															run: (*parser).callonListElementContinuationElement874,
																															expr: &charClassMatcher{
																																pos:        position{line: 2948, col: 11, offset: 97527},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 2965, col: 8, offset: 97889},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 2958, col: 12, offset: 97749},
																																run: (*parser).callonListElementContinuationElement877,
																																expr: &choiceExpr{
																																	pos: position{line: 2958, col: 13, offset: 97750},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2958, col: 13, offset: 97750},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2958, col: 20, offset: 97757},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2958, col: 29, offset: 97766},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2962, col: 8, offset: 97839},
																																expr: &anyMatcher{
																																	line: 2962, col: 9, offset: 97840,
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2962, col: 8, offset: 97839},
																												expr: &anyMatcher{
																													line: 2962, col: 9, offset: 97840,
																												},
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2764, col: 5, offset: 91570},
																									expr: &actionExpr{
																										pos: position{line: 526, col: 14, offset: 17074},
																										run: (*parser).callonListElementContinuationElement887,
																										expr: &seqExpr{
																											pos: position{line: 526, col: 14, offset: 17074},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 526, col: 14, offset: 17074},
																													expr: &notExpr{
																														pos: position{line: 2962, col: 8, offset: 97839},
																														expr: &anyMatcher{
																															line: 2962, col: 9, offset: 97840,
																														},
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 526, col: 19, offset: 17079},
																													expr: &actionExpr{
																														pos: position{line: 2948, col: 10, offset: 97526},
																														run: (*parser).callonListElementContinuationElement893,
																														expr: &charClassMatcher{
																															pos:        position{line: 2948, col: 11, offset: 97527},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2965, col: 8, offset: 97889},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 2958, col: 12, offset: 97749},
																															run: (*parser).callonListElementContinuationElement896,
																															expr: &choiceExpr{
																																pos: position{line: 2958, col: 13, offset: 97750},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2958, col: 13, offset: 97750},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2958, col: 20, offset: 97757},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2958, col: 29, offset: 97766},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2962, col: 8, offset: 97839},
																															expr: &anyMatcher{
																																line: 2962, col: 9, offset: 97840,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2765, col: 5, offset: 91585},
																									val:        "|",
																									ignoreCase: false,
																									want:       "\"|\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2765, col: 9, offset: 91589},
																									expr: &actionExpr{
																										pos: position{line: 2948, col: 10, offset: 97526},
																										run: (*parser).callonListElementContinuationElement905,
																										expr: &charClassMatcher{
																											pos:        position{line: 2948, col: 11, offset: 97527},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 2765, col: 16, offset: 91596},
																									label: "content",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 2765, col: 25, offset: 91605},
																										expr: &actionExpr{
																											pos: position{line: 2771, col: 5, offset: 91748},
																											run: (*parser).callonListElementContinuationElement909,
																											expr: &labeledExpr{
																												pos:   position{line: 2771, col: 5, offset: 91748},
																												label: "content",
																												expr: &actionExpr{
																													pos: position{line: 2771, col: 14, offset: 91757},
																													run: (*parser).callonListElementContinuationElement911,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 2771, col: 14, offset: 91757},
																														expr: &charClassMatcher{
																															pos:        position{line: 2771, col: 14, offset: 91757},
																															val:        "[^\\r\\n|]",
																															chars:      []rune{'\r', '\n', '|'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2965, col: 8, offset: 97889},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2958, col: 12, offset: 97749},
																						run: (*parser).callonListElementContinuationElement915,
																						expr: &choiceExpr{
																							pos: position{line: 2958, col: 13, offset: 97750},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2958, col: 13, offset: 97750},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 20, offset: 97757},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 29, offset: 97766},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2962, col: 8, offset: 97839},
																						expr: &anyMatcher{
																							line: 2962, col: 9, offset: 97840,
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2748, col: 5, offset: 91174},
																				expr: &actionExpr{
																					pos: position{line: 526, col: 14, offset: 17074},
																					run: (*parser).callonListElementContinuationElement923,
																					expr: &seqExpr{
																						pos: position{line: 526, col: 14, offset: 17074},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 526, col: 14, offset: 17074},
																								expr: &notExpr{
																									pos: position{line: 2962, col: 8, offset: 97839},
																									expr: &anyMatcher{
																										line: 2962, col: 9, offset: 97840,
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 526, col: 19, offset: 17079},
																								expr: &actionExpr{
																									pos: position{line: 2948, col: 10, offset: 97526},
																									run: (*parser).callonListElementContinuationElement929,
																									expr: &charClassMatcher{
																										pos:        position{line: 2948, col: 11, offset: 97527},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonListElementContinuationElement932,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2728, col: 22, offset: 90725},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 2724, col: 19, offset: 90645},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2724, col: 19, offset: 90645},
																	val:        "|===",
																	ignoreCase: false,
																	want:       "\"|===\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2724, col: 26, offset: 90652},
																	expr: &actionExpr{
																		pos: position{line: 2948, col: 10, offset: 97526},
																		run: (*parser).callonListElementContinuationElement943,
																		expr: &charClassMatcher{
																			pos:        position{line: 2948, col: 11, offset: 97527},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonListElementContinuationElement946,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2667, col: 22, offset: 88913},
										run: (*parser).callonListElementContinuationElement955,
										expr: &seqExpr{
											pos: position{line: 2667, col: 22, offset: 88913},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2672, col: 31, offset: 89134},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2672, col: 36, offset: 89139},
													expr: &litMatcher{
														pos:        position{line: 2672, col: 37, offset: 89140},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2667, col: 49, offset: 88940},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2674, col: 29, offset: 89175},
														run: (*parser).callonListElementContinuationElement961,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2674, col: 29, offset: 89175},
															expr: &charClassMatcher{
																pos:        position{line: 2674, col: 29, offset: 89175},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonListElementContinuationElement965,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1650, col: 5, offset: 54853},
										run: (*parser).callonListElementContinuationElement972,
										expr: &seqExpr{
											pos: position{line: 1650, col: 5, offset: 54853},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1650, col: 5, offset: 54853},
													label: "kind",
													expr: &choiceExpr{
														pos: position{line: 136, col: 19, offset: 3960},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 136, col: 19, offset: 3960},
																run: (*parser).callonListElementContinuationElement976,
																expr: &litMatcher{
																	pos:        position{line: 136, col: 19, offset: 3960},
																	val:        "TIP",
																	ignoreCase: false,
																	want:       "\"TIP\"",
																},
															},
															&actionExpr{
																pos: position{line: 138, col: 5, offset: 3998},
																run: (*parser).callonListElementContinuationElement978,
																expr: &litMatcher{
																	pos:        position{line: 138, col: 5, offset: 3998},
																	val:        "NOTE",
																	ignoreCase: false,
																	want:       "\"NOTE\"",
																},
															},
															&actionExpr{
																pos: position{line: 140, col: 5, offset: 4038},
																run: (*parser).callonListElementContinuationElement980,
																expr: &litMatcher{
																	pos:        position{line: 140, col: 5, offset: 4038},
																	val:        "IMPORTANT",
																	ignoreCase: false,
																	want:       "\"IMPORTANT\"",
																},
															},
															&actionExpr{
																pos: position{line: 142, col: 5, offset: 4088},
																run: (*parser).callonListElementContinuationElement982,
																expr: &litMatcher{
																	pos:        position{line: 142, col: 5, offset: 4088},
																	val:        "WARNING",
																	ignoreCase: false,
																	want:       "\"WARNING\"",
																},
															},
															&actionExpr{
																pos: position{line: 144, col: 5, offset: 4134},
																run: (*parser).callonListElementContinuationElement984,
																expr: &litMatcher{
																	pos:        position{line: 144, col: 5, offset: 4134},
																	val:        "CAUTION",
																	ignoreCase: false,
																	want:       "\"CAUTION\"",
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1650, col: 27, offset: 54875},
													val:        ": ",
													ignoreCase: false,
													want:       "\": \"",
												},
												&labeledExpr{
													pos:   position{line: 1651, col: 5, offset: 54885},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1662, col: 5, offset: 55229},
														run: (*parser).callonListElementContinuationElement988,
														expr: &seqExpr{
															pos: position{line: 1662, col: 5, offset: 55229},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1662, col: 5, offset: 55229},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1662, col: 14, offset: 55238},
																		run: (*parser).callonListElementContinuationElement991,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1662, col: 14, offset: 55238},
																			expr: &charClassMatcher{
																				pos:        position{line: 1662, col: 14, offset: 55238},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1665, col: 5, offset: 55295},
																	run: (*parser).callonListElementContinuationElement994,
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonListElementContinuationElement996,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1652, col: 5, offset: 54919},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1652, col: 16, offset: 54930},
														expr: &actionExpr{
															pos: position{line: 1653, col: 9, offset: 54940},
															run: (*parser).callonListElementContinuationElement1005,
															expr: &seqExpr{
																pos: position{line: 1653, col: 9, offset: 54940},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1653, col: 9, offset: 54940},
																		expr: &seqExpr{
																			pos: position{line: 1392, col: 34, offset: 46343},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1392, col: 34, offset: 46343},
																					val:        "+",
																					ignoreCase: false,
																					want:       "\"+\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1392, col: 38, offset: 46347},
																					expr: &actionExpr{
																						pos: position{line: 2948, col: 10, offset: 97526},
																						run: (*parser).callonListElementContinuationElement1011,
																						expr: &charClassMatcher{
																							pos:        position{line: 2948, col: 11, offset: 97527},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2958, col: 12, offset: 97749},
																					run: (*parser).callonListElementContinuationElement1013,
																					expr: &choiceExpr{
																						pos: position{line: 2958, col: 13, offset: 97750},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2958, col: 13, offset: 97750},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 20, offset: 97757},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 29, offset: 97766},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1654, col: 9, offset: 54979},
																		label: "line",
																		expr: &choiceExpr{
																			pos: position{line: 1654, col: 15, offset: 54985},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2667, col: 22, offset: 88913},
																					run: (*parser).callonListElementContinuationElement1020,
																					expr: &seqExpr{
																						pos: position{line: 2667, col: 22, offset: 88913},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2672, col: 31, offset: 89134},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2672, col: 36, offset: 89139},
																								expr: &litMatcher{
																									pos:        position{line: 2672, col: 37, offset: 89140},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2667, col: 49, offset: 88940},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2674, col: 29, offset: 89175},
																									run: (*parser).callonListElementContinuationElement1026,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2674, col: 29, offset: 89175},
																										expr: &charClassMatcher{
																											pos:        position{line: 2674, col: 29, offset: 89175},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonListElementContinuationElement1030,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1662, col: 5, offset: 55229},
																					run: (*parser).callonListElementContinuationElement1037,
																					expr: &seqExpr{
																						pos: position{line: 1662, col: 5, offset: 55229},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1662, col: 5, offset: 55229},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1662, col: 14, offset: 55238},
																									run: (*parser).callonListElementContinuationElement1040,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1662, col: 14, offset: 55238},
																										expr: &charClassMatcher{
																											pos:        position{line: 1662, col: 14, offset: 55238},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1665, col: 5, offset: 55295},
																								run: (*parser).callonListElementContinuationElement1043,
																							},
																							&choiceExpr{
																								pos: position{line: 2965, col: 8, offset: 97889},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2958, col: 12, offset: 97749},
																										run: (*parser).callonListElementContinuationElement1045,
																										expr: &choiceExpr{
																											pos: position{line: 2958, col: 13, offset: 97750},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2958, col: 13, offset: 97750},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 20, offset: 97757},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2958, col: 29, offset: 97766},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2962, col: 8, offset: 97839},
																										expr: &anyMatcher{
																											line: 2962, col: 9, offset: 97840,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1673, col: 5, offset: 55459},
										run: (*parser).callonListElementContinuationElement1052,
										expr: &seqExpr{
											pos: position{line: 1673, col: 5, offset: 55459},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1673, col: 5, offset: 55459},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1680, col: 5, offset: 55744},
														run: (*parser).callonListElementContinuationElement1055,
														expr: &seqExpr{
															pos: position{line: 1680, col: 5, offset: 55744},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1680, col: 5, offset: 55744},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1680, col: 14, offset: 55753},
																		run: (*parser).callonListElementContinuationElement1058,
																		expr: &seqExpr{
																			pos: position{line: 1680, col: 14, offset: 55753},
																			exprs: []interface{}{
																				&actionExpr{
																					pos: position{line: 2953, col: 11, offset: 97635},
																					run: (*parser).callonListElementContinuationElement1060,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2953, col: 11, offset: 97635},
																						expr: &charClassMatcher{
																							pos:        position{line: 2953, col: 12, offset: 97636},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1680, col: 21, offset: 55760},
																					expr: &charClassMatcher{
																						pos:        position{line: 1680, col: 21, offset: 55760},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1683, col: 5, offset: 55817},
																	run: (*parser).callonListElementContinuationElement1065,
																},
																&choiceExpr{
																	pos: position{line: 2965, col: 8, offset: 97889},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonListElementContinuationElement1067,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1674, col: 5, offset: 55500},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1674, col: 16, offset: 55511},
														expr: &choiceExpr{
															pos: position{line: 1674, col: 17, offset: 55512},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2667, col: 22, offset: 88913},
																	run: (*parser).callonListElementContinuationElement1077,
																	expr: &seqExpr{
																		pos: position{line: 2667, col: 22, offset: 88913},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2672, col: 31, offset: 89134},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																			&notExpr{
																				pos: position{line: 2672, col: 36, offset: 89139},
																				expr: &litMatcher{
																					pos:        position{line: 2672, col: 37, offset: 89140},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2667, col: 49, offset: 88940},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 2674, col: 29, offset: 89175},
																					run: (*parser).callonListElementContinuationElement1083,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 2674, col: 29, offset: 89175},
																						expr: &charClassMatcher{
																							pos:        position{line: 2674, col: 29, offset: 89175},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2965, col: 8, offset: 97889},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2958, col: 12, offset: 97749},
																						run: (*parser).callonListElementContinuationElement1087,
																						expr: &choiceExpr{
																							pos: position{line: 2958, col: 13, offset: 97750},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2958, col: 13, offset: 97750},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 20, offset: 97757},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 29, offset: 97766},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2962, col: 8, offset: 97839},
																						expr: &anyMatcher{
																							line: 2962, col: 9, offset: 97840,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1662, col: 5, offset: 55229},
																	run: (*parser).callonListElementContinuationElement1094,
																	expr: &seqExpr{
																		pos: position{line: 1662, col: 5, offset: 55229},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1662, col: 5, offset: 55229},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 1662, col: 14, offset: 55238},
																					run: (*parser).callonListElementContinuationElement1097,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1662, col: 14, offset: 55238},
																						expr: &charClassMatcher{
																							pos:        position{line: 1662, col: 14, offset: 55238},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1665, col: 5, offset: 55295},
																				run: (*parser).callonListElementContinuationElement1100,
																			},
																			&choiceExpr{
																				pos: position{line: 2965, col: 8, offset: 97889},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2958, col: 12, offset: 97749},
																						run: (*parser).callonListElementContinuationElement1102,
																						expr: &choiceExpr{
																							pos: position{line: 2958, col: 13, offset: 97750},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2958, col: 13, offset: 97750},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 20, offset: 97757},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2958, col: 29, offset: 97766},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2962, col: 8, offset: 97839},
																						expr: &anyMatcher{
																							line: 2962, col: 9, offset: 97840,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1423, col: 5, offset: 47353},
										run: (*parser).callonListElementContinuationElement1109,
										expr: &seqExpr{
											pos: position{line: 1423, col: 5, offset: 47353},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1423, col: 5, offset: 47353},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1423, col: 14, offset: 47362},
														run: (*parser).callonListElementContinuationElement1112,
														expr: &oneOrMoreExpr{
															pos: position{line: 1423, col: 14, offset: 47362},
															expr: &charClassMatcher{
																pos:        position{line: 1423, col: 14, offset: 47362},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2965, col: 8, offset: 97889},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonListElementContinuationElement1116,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2962, col: 8, offset: 97839},
															expr: &anyMatcher{
																line: 2962, col: 9, offset: 97840,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1581, col: 1, offset: 52516},
			expr: &actionExpr{
				pos: position{line: 1583, col: 5, offset: 52594},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1583, col: 5, offset: 52594},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1583, col: 5, offset: 52594},
							run: (*parser).callonCallout3,
						},
						&litMatcher{
							pos:        position{line: 1586, col: 5, offset: 52656},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1586, col: 9, offset: 52660},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1586, col: 14, offset: 52665},
								run: (*parser).callonCallout6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1586, col: 14, offset: 52665},
									expr: &charClassMatcher{
										pos:        position{line: 1586, col: 14, offset: 52665},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1586, col: 62, offset: 52713},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1586, col: 66, offset: 52717},
							expr: &actionExpr{
								pos: position{line: 2948, col: 10, offset: 97526},
								run: (*parser).callonCallout11,
								expr: &charClassMatcher{
									pos:        position{line: 2948, col: 11, offset: 97527},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andExpr{
							pos: position{line: 1586, col: 73, offset: 52724},
							expr: &choiceExpr{
								pos: position{line: 1586, col: 75, offset: 52726},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2958, col: 12, offset: 97749},
										run: (*parser).callonCallout15,
										expr: &choiceExpr{
											pos: position{line: 2958, col: 13, offset: 97750},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2958, col: 13, offset: 97750},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2958, col: 20, offset: 97757},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2958, col: 29, offset: 97766},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 2962, col: 8, offset: 97839},
										expr: &anyMatcher{
											line: 2962, col: 9, offset: 97840,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1586, col: 81, offset: 52732},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1693, col: 1, offset: 56279},
			expr: &choiceExpr{
				pos: position{line: 1694, col: 5, offset: 56298},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1695, col: 9, offset: 56308},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 1695, col: 9, offset: 56308},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1695, col: 9, offset: 56308},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1695, col: 20, offset: 56319},
										expr: &ruleRefExpr{
											pos:  position{line: 1695, col: 21, offset: 56320},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1696, col: 9, offset: 56446},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 1696, col: 15, offset: 56452},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1696, col: 15, offset: 56452},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1696, col: 41, offset: 56478},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1700, col: 7, offset: 56597},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1706, col: 1, offset: 56788},
			expr: &choiceExpr{
				pos: position{line: 1707, col: 5, offset: 56818},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1707, col: 5, offset: 56818},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1708, col: 7, offset: 56845},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1709, col: 7, offset: 56873},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1710, col: 7, offset: 56901},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1711, col: 7, offset: 56933},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1712, col: 7, offset: 56954},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1714, col: 1, offset: 56972},
			expr: &choiceExpr{
				pos: position{line: 1715, col: 5, offset: 57004},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1715, col: 5, offset: 57004},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1716, col: 7, offset: 57030},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1717, col: 7, offset: 57058},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1718, col: 7, offset: 57086},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1720, col: 1, offset: 57112},
			expr: &actionExpr{
				pos: position{line: 1721, col: 5, offset: 57193},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1721, col: 5, offset: 57193},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1721, col: 5, offset: 57193},
							expr: &litMatcher{
								pos:        position{line: 1721, col: 7, offset: 57195},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1722, col: 5, offset: 57204},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1723, col: 9, offset: 57222},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1723, col: 9, offset: 57222},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1724, col: 11, offset: 57249},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1725, col: 11, offset: 57277},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1726, col: 11, offset: 57305},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1727, col: 11, offset: 57337},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1728, col: 11, offset: 57369},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1748, col: 1, offset: 57896},
			expr: &choiceExpr{
				pos: position{line: 1748, col: 13, offset: 57908},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1748, col: 13, offset: 57908},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1748, col: 35, offset: 57930},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1762, col: 1, offset: 58292},
			expr: &actionExpr{
				pos: position{line: 1763, col: 5, offset: 58320},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1763, col: 5, offset: 58320},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1760, col: 33, offset: 58286},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1764, col: 5, offset: 58354},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1764, col: 15, offset: 58364},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1760, col: 33, offset: 58286},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1769, col: 1, offset: 58521},
			expr: &oneOrMoreExpr{
				pos: position{line: 1769, col: 32, offset: 58552},
				expr: &ruleRefExpr{
					pos:  position{line: 1769, col: 32, offset: 58552},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1771, col: 1, offset: 58583},
			expr: &actionExpr{
				pos: position{line: 1772, col: 5, offset: 58618},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1772, col: 5, offset: 58618},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1772, col: 5, offset: 58618},
							expr: &litMatcher{
								pos:        position{line: 1760, col: 33, offset: 58286},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1773, col: 5, offset: 58652},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1774, col: 9, offset: 58670},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1753, col: 5, offset: 58044},
										run: (*parser).callonDoubleQuoteBoldTextElement7,
										expr: &seqExpr{
											pos: position{line: 1753, col: 5, offset: 58044},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1753, col: 5, offset: 58044},
													expr: &charClassMatcher{
														pos:        position{line: 1753, col: 5, offset: 58044},
														val:        "[,?!;0-9\\pL]",
														chars:      []rune{',', '?', '!', ';'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1753, col: 19, offset: 58058},
													expr: &choiceExpr{
														pos: position{line: 1753, col: 21, offset: 58060},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2948, col: 10, offset: 97526},
																run: (*parser).callonDoubleQuoteBoldTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 2948, col: 11, offset: 97527},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1750, col: 22, offset: 58018},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2953, col: 11, offset: 97635},
										run: (*parser).callonDoubleQuoteBoldTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 2953, col: 11, offset: 97635},
											expr: &charClassMatcher{
												pos:        position{line: 2953, col: 12, offset: 97636},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 1776, col: 11, offset: 58743},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2958, col: 12, offset: 97749},
												run: (*parser).callonDoubleQuoteBoldTextElement20,
												expr: &choiceExpr{
													pos: position{line: 2958, col: 13, offset: 97750},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2958, col: 13, offset: 97750},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2958, col: 20, offset: 97757},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2958, col: 29, offset: 97766},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1776, col: 19, offset: 58751},
												expr: &actionExpr{
													pos: position{line: 2958, col: 12, offset: 97749},
													run: (*parser).callonDoubleQuoteBoldTextElement26,
													expr: &choiceExpr{
														pos: position{line: 2958, col: 13, offset: 97750},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2958, col: 13, offset: 97750},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 20, offset: 97757},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 29, offset: 97766},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 493, col: 5, offset: 15873},
										run: (*parser).callonDoubleQuoteBoldTextElement31,
										expr: &seqExpr{
											pos: position{line: 493, col: 5, offset: 15873},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 493, col: 5, offset: 15873},
													run: (*parser).callonDoubleQuoteBoldTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 496, col: 5, offset: 15937},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 496, col: 14, offset: 15946},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 507, col: 25, offset: 16408},
																run: (*parser).callonDoubleQuoteBoldTextElement36,
																expr: &seqExpr{
																	pos: position{line: 507, col: 25, offset: 16408},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 507, col: 25, offset: 16408},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 507, col: 37, offset: 16420},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonDoubleQuoteBoldTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 507, col: 56, offset: 16439},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 507, col: 62, offset: 16445},
																				expr: &actionExpr{
																					pos: position{line: 515, col: 17, offset: 16708},
																					run: (*parser).callonDoubleQuoteBoldTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 515, col: 17, offset: 16708},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 515, col: 21, offset: 16712},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 515, col: 28, offset: 16719},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 515, col: 28, offset: 16719},
																											run: (*parser).callonDoubleQuoteBoldTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 515, col: 28, offset: 16719},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 517, col: 9, offset: 16773},
																											run: (*parser).callonDoubleQuoteBoldTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												expr: &charClassMatcher{
																													pos:        position{line: 517, col: 9, offset: 16773},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 507, col: 78, offset: 16461},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 511, col: 25, offset: 16563},
																run: (*parser).callonDoubleQuoteBoldTextElement58,
																expr: &seqExpr{
																	pos: position{line: 511, col: 25, offset: 16563},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 511, col: 25, offset: 16563},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 511, col: 38, offset: 16576},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonDoubleQuoteBoldTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 511, col: 57, offset: 16595},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 511, col: 63, offset: 16601},
																				expr: &actionExpr{
																					pos: position{line: 515, col: 17, offset: 16708},
																					run: (*parser).callonDoubleQuoteBoldTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 515, col: 17, offset: 16708},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 515, col: 21, offset: 16712},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 515, col: 28, offset: 16719},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 515, col: 28, offset: 16719},
																											run: (*parser).callonDoubleQuoteBoldTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 515, col: 28, offset: 16719},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 517, col: 9, offset: 16773},
																											run: (*parser).callonDoubleQuoteBoldTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												expr: &charClassMatcher{
																													pos:        position{line: 517, col: 9, offset: 16773},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 511, col: 79, offset: 16617},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 500, col: 31, offset: 16063},
																run: (*parser).callonDoubleQuoteBoldTextElement80,
																expr: &seqExpr{
																	pos: position{line: 500, col: 31, offset: 16063},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 500, col: 31, offset: 16063},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 500, col: 35, offset: 16067},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonDoubleQuoteBoldTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 500, col: 54, offset: 16086},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2650, col: 5, offset: 88280},
										run: (*parser).callonDoubleQuoteBoldTextElement90,
										expr: &seqExpr{
											pos: position{line: 2650, col: 5, offset: 88280},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2650, col: 5, offset: 88280},
													run: (*parser).callonDoubleQuoteBoldTextElement92,
												},
												&labeledExpr{
													pos:   position{line: 2653, col: 5, offset: 88351},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2655, col: 9, offset: 88449},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2655, col: 9, offset: 88449},
																run: (*parser).callonDoubleQuoteBoldTextElement95,
																expr: &choiceExpr{
																	pos: position{line: 535, col: 27, offset: 17427},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 535, col: 27, offset: 17427},
																			run: (*parser).callonDoubleQuoteBoldTextElement97,
																			expr: &seqExpr{
																				pos: position{line: 535, col: 27, offset: 17427},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 535, col: 27, offset: 17427},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 535, col: 32, offset: 17432},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2936, col: 7, offset: 97248},
																							run: (*parser).callonDoubleQuoteBoldTextElement101,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								expr: &charClassMatcher{
																									pos:        position{line: 2936, col: 7, offset: 97248},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 535, col: 40, offset: 17440},
																						expr: &actionExpr{
																							pos: position{line: 2948, col: 10, offset: 97526},
																							run: (*parser).callonDoubleQuoteBoldTextElement105,
																							expr: &charClassMatcher{
																								pos:        position{line: 2948, col: 11, offset: 97527},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 535, col: 47, offset: 17447},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 535, col: 51, offset: 17451},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 545, col: 24, offset: 17864},
																							expr: &choiceExpr{
																								pos: position{line: 546, col: 5, offset: 17870},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 546, col: 6, offset: 17871},
																										run: (*parser).callonDoubleQuoteBoldTextElement111,
																										expr: &seqExpr{
																											pos: position{line: 546, col: 6, offset: 17871},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 546, col: 6, offset: 17871},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 546, col: 14, offset: 17879},
																													expr: &charClassMatcher{
																														pos:        position{line: 546, col: 14, offset: 17879},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 493, col: 5, offset: 15873},
																										run: (*parser).callonDoubleQuoteBoldTextElement116,
																										expr: &seqExpr{
																											pos: position{line: 493, col: 5, offset: 15873},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 493, col: 5, offset: 15873},
																													run: (*parser).callonDoubleQuoteBoldTextElement118,
																												},
																												&labeledExpr{
																													pos:   position{line: 496, col: 5, offset: 15937},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 496, col: 14, offset: 15946},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 507, col: 25, offset: 16408},
																																run: (*parser).callonDoubleQuoteBoldTextElement121,
																																expr: &seqExpr{
																																	pos: position{line: 507, col: 25, offset: 16408},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 507, col: 25, offset: 16408},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 37, offset: 16420},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonDoubleQuoteBoldTextElement125,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 56, offset: 16439},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 507, col: 62, offset: 16445},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonDoubleQuoteBoldTextElement132,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonDoubleQuoteBoldTextElement137,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonDoubleQuoteBoldTextElement139,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 507, col: 78, offset: 16461},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 511, col: 25, offset: 16563},
																																run: (*parser).callonDoubleQuoteBoldTextElement143,
																																expr: &seqExpr{
																																	pos: position{line: 511, col: 25, offset: 16563},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 511, col: 25, offset: 16563},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 38, offset: 16576},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonDoubleQuoteBoldTextElement147,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 57, offset: 16595},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 511, col: 63, offset: 16601},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonDoubleQuoteBoldTextElement154,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonDoubleQuoteBoldTextElement159,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonDoubleQuoteBoldTextElement161,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 511, col: 79, offset: 16617},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 500, col: 31, offset: 16063},
																																run: (*parser).callonDoubleQuoteBoldTextElement165,
																																expr: &seqExpr{
																																	pos: position{line: 500, col: 31, offset: 16063},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 500, col: 31, offset: 16063},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 500, col: 35, offset: 16067},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonDoubleQuoteBoldTextElement169,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 500, col: 54, offset: 16086},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 550, col: 8, offset: 18103},
																										run: (*parser).callonDoubleQuoteBoldTextElement175,
																										expr: &litMatcher{
																											pos:        position{line: 550, col: 8, offset: 18103},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 535, col: 79, offset: 17479},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 537, col: 9, offset: 17552},
																			run: (*parser).callonDoubleQuoteBoldTextElement178,
																			expr: &seqExpr{
																				pos: position{line: 537, col: 9, offset: 17552},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 537, col: 9, offset: 17552},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 537, col: 14, offset: 17557},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2936, col: 7, offset: 97248},
																							run: (*parser).callonDoubleQuoteBoldTextElement182,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								expr: &charClassMatcher{
																									pos:        position{line: 2936, col: 7, offset: 97248},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 537, col: 22, offset: 17565},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2658, col: 11, offset: 88553},
																run: (*parser).callonDoubleQuoteBoldTextElement186,
																expr: &charClassMatcher{
																	pos:        position{line: 2658, col: 12, offset: 88554},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2683, col: 15, offset: 89521},
										run: (*parser).callonDoubleQuoteBoldTextElement188,
										expr: &litMatcher{
											pos:        position{line: 2683, col: 15, offset: 89521},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2689, col: 14, offset: 89636},
										run: (*parser).callonDoubleQuoteBoldTextElement190,
										expr: &litMatcher{
											pos:        position{line: 2689, col: 14, offset: 89636},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2693, col: 14, offset: 89712},
										run: (*parser).callonDoubleQuoteBoldTextElement192,
										expr: &litMatcher{
											pos:        position{line: 2693, col: 14, offset: 89712},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2697, col: 15, offset: 89790},
										run: (*parser).callonDoubleQuoteBoldTextElement194,
										expr: &litMatcher{
											pos:        position{line: 2697, col: 15, offset: 89790},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2701, col: 13, offset: 89865},
										run: (*parser).callonDoubleQuoteBoldTextElement196,
										expr: &litMatcher{
											pos:        position{line: 2701, col: 13, offset: 89865},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2709, col: 22, offset: 90171},
										run: (*parser).callonDoubleQuoteBoldTextElement198,
										expr: &seqExpr{
											pos: position{line: 2709, col: 22, offset: 90171},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2860, col: 13, offset: 94811},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2709, col: 31, offset: 90180},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2709, col: 35, offset: 90184},
													expr: &charClassMatcher{
														pos:        position{line: 2709, col: 36, offset: 90185},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1780, col: 11, offset: 58880},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1781, col: 11, offset: 58902},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1782, col: 11, offset: 58925},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&actionExpr{
										pos: position{line: 991, col: 23, offset: 31326},
										run: (*parser).callonDoubleQuoteBoldTextElement207,
										expr: &seqExpr{
											pos: position{line: 991, col: 23, offset: 31326},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 989, col: 32, offset: 31294},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 991, col: 51, offset: 31354},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 991, col: 56, offset: 31359},
														run: (*parser).callonDoubleQuoteBoldTextElement211,
														expr: &oneOrMoreExpr{
															pos: position{line: 991, col: 56, offset: 31359},
															expr: &charClassMatcher{
																pos:        position{line: 991, col: 56, offset: 31359},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 989, col: 32, offset: 31294},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 1801, col: 5, offset: 59437},
										val:        "[^\\r\\n*]",
										chars:      []rune{'\r', '\n', '*'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 1802, col: 7, offset: 59534},
										run: (*parser).callonDoubleQuoteBoldTextElement216,
										expr: &seqExpr{
											pos: position{line: 1802, col: 7, offset: 59534},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1760, col: 33, offset: 58286},
													val:        "**",
													ignoreCase: false,
													want:       "\"**\"",
												},
												&actionExpr{
													pos: position{line: 2864, col: 14, offset: 94885},
													run: (*parser).callonDoubleQuoteBoldTextElement219,
													expr: &oneOrMoreExpr{
														pos: position{line: 2864, col: 14, offset: 94885},
														expr: &charClassMatcher{
															pos:        position{line: 2864, col: 14, offset: 94885},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 1788, col: 1, offset: 59079},
			expr: &actionExpr{
				pos: position{line: 1789, col: 5, offset: 59119},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1789, col: 5, offset: 59119},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1789, col: 5, offset: 59119},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1789, col: 16, offset: 59130},
								expr: &ruleRefExpr{
									pos:  position{line: 1789, col: 17, offset: 59131},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1790, col: 5, offset: 59157},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1791, col: 9, offset: 59172},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1791, col: 9, offset: 59172},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1792, col: 11, offset: 59202},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1793, col: 11, offset: 59223},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1794, col: 11, offset: 59244},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1795, col: 11, offset: 59268},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1796, col: 11, offset: 59292},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1813, col: 1, offset: 59921},
			expr: &actionExpr{
				pos: position{line: 1814, col: 5, offset: 59949},
				run: (*parser).callonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1814, col: 5, offset: 59949},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1809, col: 38, offset: 59875},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&labeledExpr{
							pos:   position{line: 1815, col: 5, offset: 59987},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1815, col: 15, offset: 59997},
								name: "SingleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1811, col: 36, offset: 59915},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1820, col: 1, offset: 60157},
			expr: &actionExpr{
				pos: position{line: 1821, col: 5, offset: 60194},
				run: (*parser).callonSingleQuoteBoldTextElements1,
				expr: &seqExpr{
					pos: position{line: 1821, col: 5, offset: 60194},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1821, col: 5, offset: 60194},
							expr: &notExpr{
								pos: position{line: 2962, col: 8, offset: 97839},
								expr: &anyMatcher{
									line: 2962, col: 9, offset: 97840,
								},
							},
						},
						&notExpr{
							pos: position{line: 1821, col: 10, offset: 60199},
							expr: &actionExpr{
								pos: position{line: 2948, col: 10, offset: 97526},
								run: (*parser).callonSingleQuoteBoldTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 2948, col: 11, offset: 97527},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1822, col: 5, offset: 60238},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1822, col: 14, offset: 60247},
								expr: &ruleRefExpr{
									pos:  position{line: 1822, col: 15, offset: 60248},
									name: "SingleQuoteBoldTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1823, col: 5, offset: 60282},
							run: (*parser).callonSingleQuoteBoldTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1829, col: 1, offset: 60423},
			expr: &choiceExpr{
				pos: position{line: 1830, col: 5, offset: 60458},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1753, col: 5, offset: 58044},
						run: (*parser).callonSingleQuoteBoldTextElement2,
						expr: &seqExpr{
							pos: position{line: 1753, col: 5, offset: 58044},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1753, col: 5, offset: 58044},
									expr: &charClassMatcher{
										pos:        position{line: 1753, col: 5, offset: 58044},
										val:        "[,?!;0-9\\pL]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1753, col: 19, offset: 58058},
									expr: &choiceExpr{
										pos: position{line: 1753, col: 21, offset: 58060},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2948, col: 10, offset: 97526},
												run: (*parser).callonSingleQuoteBoldTextElement8,
												expr: &charClassMatcher{
													pos:        position{line: 2948, col: 11, offset: 97527},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 1750, col: 22, offset: 58018},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2953, col: 11, offset: 97635},
						run: (*parser).callonSingleQuoteBoldTextElement11,
						expr: &oneOrMoreExpr{
							pos: position{line: 2953, col: 11, offset: 97635},
							expr: &charClassMatcher{
								pos:        position{line: 2953, col: 12, offset: 97636},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 1832, col: 7, offset: 60490},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 2958, col: 12, offset: 97749},
								run: (*parser).callonSingleQuoteBoldTextElement15,
								expr: &choiceExpr{
									pos: position{line: 2958, col: 13, offset: 97750},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2958, col: 13, offset: 97750},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2958, col: 20, offset: 97757},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2958, col: 29, offset: 97766},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 1832, col: 15, offset: 60498},
								expr: &actionExpr{
									pos: position{line: 2958, col: 12, offset: 97749},
									run: (*parser).callonSingleQuoteBoldTextElement21,
									expr: &choiceExpr{
										pos: position{line: 2958, col: 13, offset: 97750},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2958, col: 13, offset: 97750},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 20, offset: 97757},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 29, offset: 97766},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 493, col: 5, offset: 15873},
						run: (*parser).callonSingleQuoteBoldTextElement26,
						expr: &seqExpr{
							pos: position{line: 493, col: 5, offset: 15873},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 493, col: 5, offset: 15873},
									run: (*parser).callonSingleQuoteBoldTextElement28,
								},
								&labeledExpr{
									pos:   position{line: 496, col: 5, offset: 15937},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 496, col: 14, offset: 15946},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 507, col: 25, offset: 16408},
												run: (*parser).callonSingleQuoteBoldTextElement31,
												expr: &seqExpr{
													pos: position{line: 507, col: 25, offset: 16408},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 507, col: 25, offset: 16408},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 507, col: 37, offset: 16420},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 162, col: 18, offset: 4814},
																run: (*parser).callonSingleQuoteBoldTextElement35,
																expr: &seqExpr{
																	pos: position{line: 162, col: 18, offset: 4814},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 162, col: 18, offset: 4814},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 162, col: 28, offset: 4824},
																			expr: &charClassMatcher{
																				pos:        position{line: 162, col: 29, offset: 4825},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 507, col: 56, offset: 16439},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 507, col: 62, offset: 16445},
																expr: &actionExpr{
																	pos: position{line: 515, col: 17, offset: 16708},
																	run: (*parser).callonSingleQuoteBoldTextElement42,
																	expr: &seqExpr{
																		pos: position{line: 515, col: 17, offset: 16708},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 515, col: 17, offset: 16708},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 515, col: 21, offset: 16712},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 515, col: 28, offset: 16719},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 515, col: 28, offset: 16719},
																							run: (*parser).callonSingleQuoteBoldTextElement47,
																							expr: &charClassMatcher{
																								pos:        position{line: 515, col: 28, offset: 16719},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 517, col: 9, offset: 16773},
																							run: (*parser).callonSingleQuoteBoldTextElement49,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 517, col: 9, offset: 16773},
																								expr: &charClassMatcher{
																									pos:        position{line: 517, col: 9, offset: 16773},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 507, col: 78, offset: 16461},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 511, col: 25, offset: 16563},
												run: (*parser).callonSingleQuoteBoldTextElement53,
												expr: &seqExpr{
													pos: position{line: 511, col: 25, offset: 16563},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 511, col: 25, offset: 16563},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 511, col: 38, offset: 16576},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 162, col: 18, offset: 4814},
																run: (*parser).callonSingleQuoteBoldTextElement57,
																expr: &seqExpr{
																	pos: position{line: 162, col: 18, offset: 4814},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 162, col: 18, offset: 4814},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 162, col: 28, offset: 4824},
																			expr: &charClassMatcher{
																				pos:        position{line: 162, col: 29, offset: 4825},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 511, col: 57, offset: 16595},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 511, col: 63, offset: 16601},
																expr: &actionExpr{
																	pos: position{line: 515, col: 17, offset: 16708},
																	run: (*parser).callonSingleQuoteBoldTextElement64,
																	expr: &seqExpr{
																		pos: position{line: 515, col: 17, offset: 16708},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 515, col: 17, offset: 16708},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 515, col: 21, offset: 16712},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 515, col: 28, offset: 16719},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 515, col: 28, offset: 16719},
																							run: (*parser).callonSingleQuoteBoldTextElement69,
																							expr: &charClassMatcher{
																								pos:        position{line: 515, col: 28, offset: 16719},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 517, col: 9, offset: 16773},
																							run: (*parser).callonSingleQuoteBoldTextElement71,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 517, col: 9, offset: 16773},
																								expr: &charClassMatcher{
																									pos:        position{line: 517, col: 9, offset: 16773},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 511, col: 79, offset: 16617},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 500, col: 31, offset: 16063},
												run: (*parser).callonSingleQuoteBoldTextElement75,
												expr: &seqExpr{
													pos: position{line: 500, col: 31, offset: 16063},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 500, col: 31, offset: 16063},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 500, col: 35, offset: 16067},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 162, col: 18, offset: 4814},
																run: (*parser).callonSingleQuoteBoldTextElement79,
																expr: &seqExpr{
																	pos: position{line: 162, col: 18, offset: 4814},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 162, col: 18, offset: 4814},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 162, col: 28, offset: 4824},
																			expr: &charClassMatcher{
																				pos:        position{line: 162, col: 29, offset: 4825},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 500, col: 54, offset: 16086},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2650, col: 5, offset: 88280},
						run: (*parser).callonSingleQuoteBoldTextElement85,
						expr: &seqExpr{
							pos: position{line: 2650, col: 5, offset: 88280},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2650, col: 5, offset: 88280},
									run: (*parser).callonSingleQuoteBoldTextElement87,
								},
								&labeledExpr{
									pos:   position{line: 2653, col: 5, offset: 88351},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2655, col: 9, offset: 88449},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2655, col: 9, offset: 88449},
												run: (*parser).callonSingleQuoteBoldTextElement90,
												expr: &choiceExpr{
													pos: position{line: 535, col: 27, offset: 17427},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 535, col: 27, offset: 17427},
															run: (*parser).callonSingleQuoteBoldTextElement92,
															expr: &seqExpr{
																pos: position{line: 535, col: 27, offset: 17427},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 535, col: 27, offset: 17427},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 535, col: 32, offset: 17432},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2936, col: 7, offset: 97248},
																			run: (*parser).callonSingleQuoteBoldTextElement96,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2936, col: 7, offset: 97248},
																				expr: &charClassMatcher{
																					pos:        position{line: 2936, col: 7, offset: 97248},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 535, col: 40, offset: 17440},
																		expr: &actionExpr{
																			pos: position{line: 2948, col: 10, offset: 97526},
																			run: (*parser).callonSingleQuoteBoldTextElement100,
																			expr: &charClassMatcher{
																				pos:        position{line: 2948, col: 11, offset: 97527},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 535, col: 47, offset: 17447},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 535, col: 51, offset: 17451},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 545, col: 24, offset: 17864},
																			expr: &choiceExpr{
																				pos: position{line: 546, col: 5, offset: 17870},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 546, col: 6, offset: 17871},
																						run: (*parser).callonSingleQuoteBoldTextElement106,
																						expr: &seqExpr{
																							pos: position{line: 546, col: 6, offset: 17871},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 546, col: 6, offset: 17871},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 546, col: 14, offset: 17879},
																									expr: &charClassMatcher{
																										pos:        position{line: 546, col: 14, offset: 17879},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 493, col: 5, offset: 15873},
																						run: (*parser).callonSingleQuoteBoldTextElement111,
																						expr: &seqExpr{
																							pos: position{line: 493, col: 5, offset: 15873},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 493, col: 5, offset: 15873},
																									run: (*parser).callonSingleQuoteBoldTextElement113,
																								},
																								&labeledExpr{
																									pos:   position{line: 496, col: 5, offset: 15937},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 496, col: 14, offset: 15946},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 507, col: 25, offset: 16408},
																												run: (*parser).callonSingleQuoteBoldTextElement116,
																												expr: &seqExpr{
																													pos: position{line: 507, col: 25, offset: 16408},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 507, col: 25, offset: 16408},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 507, col: 37, offset: 16420},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 162, col: 18, offset: 4814},
																																run: (*parser).callonSingleQuoteBoldTextElement120,
																																expr: &seqExpr{
																																	pos: position{line: 162, col: 18, offset: 4814},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 162, col: 18, offset: 4814},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 162, col: 28, offset: 4824},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 162, col: 29, offset: 4825},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 507, col: 56, offset: 16439},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 507, col: 62, offset: 16445},
																																expr: &actionExpr{
																																	pos: position{line: 515, col: 17, offset: 16708},
																																	run: (*parser).callonSingleQuoteBoldTextElement127,
																																	expr: &seqExpr{
																																		pos: position{line: 515, col: 17, offset: 16708},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 515, col: 17, offset: 16708},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 515, col: 21, offset: 16712},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 515, col: 28, offset: 16719},
																																							run: (*parser).callonSingleQuoteBoldTextElement132,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 515, col: 28, offset: 16719},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 517, col: 9, offset: 16773},
																																							run: (*parser).callonSingleQuoteBoldTextElement134,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 517, col: 9, offset: 16773},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 517, col: 9, offset: 16773},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 507, col: 78, offset: 16461},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 511, col: 25, offset: 16563},
																												run: (*parser).callonSingleQuoteBoldTextElement138,
																												expr: &seqExpr{
																													pos: position{line: 511, col: 25, offset: 16563},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 511, col: 25, offset: 16563},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 511, col: 38, offset: 16576},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 162, col: 18, offset: 4814},
																																run: (*parser).callonSingleQuoteBoldTextElement142,
																																expr: &seqExpr{
																																	pos: position{line: 162, col: 18, offset: 4814},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 162, col: 18, offset: 4814},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 162, col: 28, offset: 4824},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 162, col: 29, offset: 4825},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 511, col: 57, offset: 16595},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 511, col: 63, offset: 16601},
																																expr: &actionExpr{
																																	pos: position{line: 515, col: 17, offset: 16708},
																																	run: (*parser).callonSingleQuoteBoldTextElement149,
																																	expr: &seqExpr{
																																		pos: position{line: 515, col: 17, offset: 16708},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 515, col: 17, offset: 16708},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 515, col: 21, offset: 16712},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 515, col: 28, offset: 16719},
																																							run: (*parser).callonSingleQuoteBoldTextElement154,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 515, col: 28, offset: 16719},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 517, col: 9, offset: 16773},
																																							run: (*parser).callonSingleQuoteBoldTextElement156,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 517, col: 9, offset: 16773},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 517, col: 9, offset: 16773},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 511, col: 79, offset: 16617},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 500, col: 31, offset: 16063},
																												run: (*parser).callonSingleQuoteBoldTextElement160,
																												expr: &seqExpr{
																													pos: position{line: 500, col: 31, offset: 16063},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 500, col: 31, offset: 16063},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 500, col: 35, offset: 16067},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 162, col: 18, offset: 4814},
																																run: (*parser).callonSingleQuoteBoldTextElement164,
																																expr: &seqExpr{
																																	pos: position{line: 162, col: 18, offset: 4814},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 162, col: 18, offset: 4814},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 162, col: 28, offset: 4824},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 162, col: 29, offset: 4825},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 500, col: 54, offset: 16086},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 550, col: 8, offset: 18103},
																						run: (*parser).callonSingleQuoteBoldTextElement170,
																						expr: &litMatcher{
																							pos:        position{line: 550, col: 8, offset: 18103},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 535, col: 79, offset: 17479},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 537, col: 9, offset: 17552},
															run: (*parser).callonSingleQuoteBoldTextElement173,
															expr: &seqExpr{
																pos: position{line: 537, col: 9, offset: 17552},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 537, col: 9, offset: 17552},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 537, col: 14, offset: 17557},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2936, col: 7, offset: 97248},
																			run: (*parser).callonSingleQuoteBoldTextElement177,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2936, col: 7, offset: 97248},
																				expr: &charClassMatcher{
																					pos:        position{line: 2936, col: 7, offset: 97248},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 537, col: 22, offset: 17565},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2658, col: 11, offset: 88553},
												run: (*parser).callonSingleQuoteBoldTextElement181,
												expr: &charClassMatcher{
													pos:        position{line: 2658, col: 12, offset: 88554},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2683, col: 15, offset: 89521},
						run: (*parser).callonSingleQuoteBoldTextElement183,
						expr: &litMatcher{
							pos:        position{line: 2683, col: 15, offset: 89521},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2689, col: 14, offset: 89636},
						run: (*parser).callonSingleQuoteBoldTextElement185,
						expr: &litMatcher{
							pos:        position{line: 2689, col: 14, offset: 89636},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2693, col: 14, offset: 89712},
						run: (*parser).callonSingleQuoteBoldTextElement187,
						expr: &litMatcher{
							pos:        position{line: 2693, col: 14, offset: 89712},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2697, col: 15, offset: 89790},
						run: (*parser).callonSingleQuoteBoldTextElement189,
						expr: &litMatcher{
							pos:        position{line: 2697, col: 15, offset: 89790},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2701, col: 13, offset: 89865},
						run: (*parser).callonSingleQuoteBoldTextElement191,
						expr: &litMatcher{
							pos:        position{line: 2701, col: 13, offset: 89865},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2709, col: 22, offset: 90171},
						run: (*parser).callonSingleQuoteBoldTextElement193,
						expr: &seqExpr{
							pos: position{line: 2709, col: 22, offset: 90171},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2860, col: 13, offset: 94811},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2709, col: 31, offset: 90180},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2709, col: 35, offset: 90184},
									expr: &charClassMatcher{
										pos:        position{line: 2709, col: 36, offset: 90185},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1836, col: 7, offset: 60611},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1837, col: 7, offset: 60629},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1838, col: 7, offset: 60648},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&actionExpr{
						pos: position{line: 991, col: 23, offset: 31326},
						run: (*parser).callonSingleQuoteBoldTextElement202,
						expr: &seqExpr{
							pos: position{line: 991, col: 23, offset: 31326},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 989, col: 32, offset: 31294},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 991, col: 51, offset: 31354},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 991, col: 56, offset: 31359},
										run: (*parser).callonSingleQuoteBoldTextElement206,
										expr: &oneOrMoreExpr{
											pos: position{line: 991, col: 56, offset: 31359},
											expr: &charClassMatcher{
												pos:        position{line: 991, col: 56, offset: 31359},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 989, col: 32, offset: 31294},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 1854, col: 5, offset: 61106},
						val:        "[^\\r\\n *]",
						chars:      []rune{'\r', '\n', ' ', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1855, col: 7, offset: 61211},
						run: (*parser).callonSingleQuoteBoldTextElement211,
						expr: &seqExpr{
							pos: position{line: 1855, col: 7, offset: 61211},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1855, col: 7, offset: 61211},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&actionExpr{
									pos: position{line: 2864, col: 14, offset: 94885},
									run: (*parser).callonSingleQuoteBoldTextElement214,
									expr: &oneOrMoreExpr{
										pos: position{line: 2864, col: 14, offset: 94885},
										expr: &charClassMatcher{
											pos:        position{line: 2864, col: 14, offset: 94885},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 1842, col: 1, offset: 60749},
			expr: &actionExpr{
				pos: position{line: 1843, col: 5, offset: 60789},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1843, col: 5, offset: 60789},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1843, col: 5, offset: 60789},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1843, col: 16, offset: 60800},
								expr: &ruleRefExpr{
									pos:  position{line: 1843, col: 17, offset: 60801},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1844, col: 5, offset: 60827},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1845, col: 9, offset: 60842},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1845, col: 9, offset: 60842},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1846, col: 11, offset: 60872},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1847, col: 11, offset: 60893},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1848, col: 11, offset: 60917},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1849, col: 11, offset: 60938},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1850, col: 11, offset: 60962},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1859, col: 1, offset: 61386},
			expr: &choiceExpr{
				pos: position{line: 1860, col: 5, offset: 61410},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1860, col: 5, offset: 61410},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1860, col: 5, offset: 61410},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1860, col: 5, offset: 61410},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1741, col: 25, offset: 57712},
										run: (*parser).callonEscapedBoldText5,
										expr: &seqExpr{
											pos: position{line: 1741, col: 25, offset: 57712},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1741, col: 25, offset: 57712},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1741, col: 30, offset: 57717},
													expr: &litMatcher{
														pos:        position{line: 1741, col: 30, offset: 57717},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1860, col: 40, offset: 61445},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1860, col: 45, offset: 61450},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1860, col: 55, offset: 61460},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1860, col: 84, offset: 61489},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1862, col: 9, offset: 61646},
						run: (*parser).callonEscapedBoldText14,
						expr: &seqExpr{
							pos: position{line: 1862, col: 9, offset: 61646},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1862, col: 9, offset: 61646},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1737, col: 25, offset: 57639},
										run: (*parser).callonEscapedBoldText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1737, col: 25, offset: 57639},
											expr: &litMatcher{
												pos:        position{line: 1737, col: 25, offset: 57639},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1862, col: 44, offset: 61681},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1862, col: 49, offset: 61686},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1862, col: 59, offset: 61696},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1862, col: 88, offset: 61725},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1865, col: 9, offset: 61925},
						run: (*parser).callonEscapedBoldText24,
						expr: &seqExpr{
							pos: position{line: 1865, col: 9, offset: 61925},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1865, col: 9, offset: 61925},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1737, col: 25, offset: 57639},
										run: (*parser).callonEscapedBoldText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1737, col: 25, offset: 57639},
											expr: &litMatcher{
												pos:        position{line: 1737, col: 25, offset: 57639},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1865, col: 44, offset: 61960},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1865, col: 48, offset: 61964},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1865, col: 58, offset: 61974},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1865, col: 87, offset: 62003},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1873, col: 1, offset: 62301},
			expr: &choiceExpr{
				pos: position{line: 1873, col: 15, offset: 62315},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1873, col: 15, offset: 62315},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1873, col: 39, offset: 62339},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1887, col: 1, offset: 62667},
			expr: &actionExpr{
				pos: position{line: 1888, col: 5, offset: 62697},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1888, col: 5, offset: 62697},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1885, col: 35, offset: 62661},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1889, col: 5, offset: 62733},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1889, col: 15, offset: 62743},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1885, col: 35, offset: 62661},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1894, col: 1, offset: 62951},
			expr: &oneOrMoreExpr{
				pos: position{line: 1894, col: 34, offset: 62984},
				expr: &ruleRefExpr{
					pos:  position{line: 1894, col: 34, offset: 62984},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1896, col: 1, offset: 63016},
			expr: &actionExpr{
				pos: position{line: 1897, col: 5, offset: 63053},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1897, col: 5, offset: 63053},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1897, col: 5, offset: 63053},
							expr: &litMatcher{
								pos:        position{line: 1885, col: 35, offset: 62661},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1898, col: 5, offset: 63089},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1899, col: 9, offset: 63107},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1878, col: 5, offset: 62413},
										run: (*parser).callonDoubleQuoteItalicTextElement7,
										expr: &seqExpr{
											pos: position{line: 1878, col: 5, offset: 62413},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1878, col: 5, offset: 62413},
													expr: &charClassMatcher{
														pos:        position{line: 1878, col: 5, offset: 62413},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1878, col: 15, offset: 62423},
													expr: &choiceExpr{
														pos: position{line: 1878, col: 17, offset: 62425},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2948, col: 10, offset: 97526},
																run: (*parser).callonDoubleQuoteItalicTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 2948, col: 11, offset: 97527},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1875, col: 24, offset: 62385},
																val:        "_",
																ignoreCase: false,
																want:       "\"_\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2953, col: 11, offset: 97635},
										run: (*parser).callonDoubleQuoteItalicTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 2953, col: 11, offset: 97635},
											expr: &charClassMatcher{
												pos:        position{line: 2953, col: 12, offset: 97636},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 1901, col: 11, offset: 63182},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2958, col: 12, offset: 97749},
												run: (*parser).callonDoubleQuoteItalicTextElement20,
												expr: &choiceExpr{
													pos: position{line: 2958, col: 13, offset: 97750},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2958, col: 13, offset: 97750},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2958, col: 20, offset: 97757},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2958, col: 29, offset: 97766},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1901, col: 19, offset: 63190},
												expr: &actionExpr{
													pos: position{line: 2958, col: 12, offset: 97749},
													run: (*parser).callonDoubleQuoteItalicTextElement26,
													expr: &choiceExpr{
														pos: position{line: 2958, col: 13, offset: 97750},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2958, col: 13, offset: 97750},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 20, offset: 97757},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 29, offset: 97766},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 493, col: 5, offset: 15873},
										run: (*parser).callonDoubleQuoteItalicTextElement31,
										expr: &seqExpr{
											pos: position{line: 493, col: 5, offset: 15873},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 493, col: 5, offset: 15873},
													run: (*parser).callonDoubleQuoteItalicTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 496, col: 5, offset: 15937},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 496, col: 14, offset: 15946},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 507, col: 25, offset: 16408},
																run: (*parser).callonDoubleQuoteItalicTextElement36,
																expr: &seqExpr{
																	pos: position{line: 507, col: 25, offset: 16408},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 507, col: 25, offset: 16408},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 507, col: 37, offset: 16420},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonDoubleQuoteItalicTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 507, col: 56, offset: 16439},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 507, col: 62, offset: 16445},
																				expr: &actionExpr{
																					pos: position{line: 515, col: 17, offset: 16708},
																					run: (*parser).callonDoubleQuoteItalicTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 515, col: 17, offset: 16708},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 515, col: 21, offset: 16712},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 515, col: 28, offset: 16719},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 515, col: 28, offset: 16719},
																											run: (*parser).callonDoubleQuoteItalicTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 515, col: 28, offset: 16719},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 517, col: 9, offset: 16773},
																											run: (*parser).callonDoubleQuoteItalicTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												expr: &charClassMatcher{
																													pos:        position{line: 517, col: 9, offset: 16773},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 507, col: 78, offset: 16461},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 511, col: 25, offset: 16563},
																run: (*parser).callonDoubleQuoteItalicTextElement58,
																expr: &seqExpr{
																	pos: position{line: 511, col: 25, offset: 16563},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 511, col: 25, offset: 16563},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 511, col: 38, offset: 16576},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonDoubleQuoteItalicTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 511, col: 57, offset: 16595},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 511, col: 63, offset: 16601},
																				expr: &actionExpr{
																					pos: position{line: 515, col: 17, offset: 16708},
																					run: (*parser).callonDoubleQuoteItalicTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 515, col: 17, offset: 16708},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 515, col: 21, offset: 16712},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 515, col: 28, offset: 16719},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 515, col: 28, offset: 16719},
																											run: (*parser).callonDoubleQuoteItalicTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 515, col: 28, offset: 16719},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 517, col: 9, offset: 16773},
																											run: (*parser).callonDoubleQuoteItalicTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												expr: &charClassMatcher{
																													pos:        position{line: 517, col: 9, offset: 16773},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 511, col: 79, offset: 16617},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 500, col: 31, offset: 16063},
																run: (*parser).callonDoubleQuoteItalicTextElement80,
																expr: &seqExpr{
																	pos: position{line: 500, col: 31, offset: 16063},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 500, col: 31, offset: 16063},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 500, col: 35, offset: 16067},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonDoubleQuoteItalicTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 500, col: 54, offset: 16086},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2650, col: 5, offset: 88280},
										run: (*parser).callonDoubleQuoteItalicTextElement90,
										expr: &seqExpr{
											pos: position{line: 2650, col: 5, offset: 88280},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2650, col: 5, offset: 88280},
													run: (*parser).callonDoubleQuoteItalicTextElement92,
												},
												&labeledExpr{
													pos:   position{line: 2653, col: 5, offset: 88351},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2655, col: 9, offset: 88449},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2655, col: 9, offset: 88449},
																run: (*parser).callonDoubleQuoteItalicTextElement95,
																expr: &choiceExpr{
																	pos: position{line: 535, col: 27, offset: 17427},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 535, col: 27, offset: 17427},
																			run: (*parser).callonDoubleQuoteItalicTextElement97,
																			expr: &seqExpr{
																				pos: position{line: 535, col: 27, offset: 17427},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 535, col: 27, offset: 17427},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 535, col: 32, offset: 17432},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2936, col: 7, offset: 97248},
																							run: (*parser).callonDoubleQuoteItalicTextElement101,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								expr: &charClassMatcher{
																									pos:        position{line: 2936, col: 7, offset: 97248},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 535, col: 40, offset: 17440},
																						expr: &actionExpr{
																							pos: position{line: 2948, col: 10, offset: 97526},
																							run: (*parser).callonDoubleQuoteItalicTextElement105,
																							expr: &charClassMatcher{
																								pos:        position{line: 2948, col: 11, offset: 97527},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 535, col: 47, offset: 17447},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 535, col: 51, offset: 17451},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 545, col: 24, offset: 17864},
																							expr: &choiceExpr{
																								pos: position{line: 546, col: 5, offset: 17870},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 546, col: 6, offset: 17871},
																										run: (*parser).callonDoubleQuoteItalicTextElement111,
																										expr: &seqExpr{
																											pos: position{line: 546, col: 6, offset: 17871},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 546, col: 6, offset: 17871},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 546, col: 14, offset: 17879},
																													expr: &charClassMatcher{
																														pos:        position{line: 546, col: 14, offset: 17879},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 493, col: 5, offset: 15873},
																										run: (*parser).callonDoubleQuoteItalicTextElement116,
																										expr: &seqExpr{
																											pos: position{line: 493, col: 5, offset: 15873},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 493, col: 5, offset: 15873},
																													run: (*parser).callonDoubleQuoteItalicTextElement118,
																												},
																												&labeledExpr{
																													pos:   position{line: 496, col: 5, offset: 15937},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 496, col: 14, offset: 15946},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 507, col: 25, offset: 16408},
																																run: (*parser).callonDoubleQuoteItalicTextElement121,
																																expr: &seqExpr{
																																	pos: position{line: 507, col: 25, offset: 16408},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 507, col: 25, offset: 16408},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 37, offset: 16420},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonDoubleQuoteItalicTextElement125,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 56, offset: 16439},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 507, col: 62, offset: 16445},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonDoubleQuoteItalicTextElement132,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonDoubleQuoteItalicTextElement137,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonDoubleQuoteItalicTextElement139,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 507, col: 78, offset: 16461},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 511, col: 25, offset: 16563},
																																run: (*parser).callonDoubleQuoteItalicTextElement143,
																																expr: &seqExpr{
																																	pos: position{line: 511, col: 25, offset: 16563},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 511, col: 25, offset: 16563},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 38, offset: 16576},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonDoubleQuoteItalicTextElement147,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 57, offset: 16595},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 511, col: 63, offset: 16601},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonDoubleQuoteItalicTextElement154,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonDoubleQuoteItalicTextElement159,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonDoubleQuoteItalicTextElement161,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 511, col: 79, offset: 16617},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 500, col: 31, offset: 16063},
																																run: (*parser).callonDoubleQuoteItalicTextElement165,
																																expr: &seqExpr{
																																	pos: position{line: 500, col: 31, offset: 16063},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 500, col: 31, offset: 16063},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 500, col: 35, offset: 16067},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonDoubleQuoteItalicTextElement169,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 500, col: 54, offset: 16086},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 550, col: 8, offset: 18103},
																										run: (*parser).callonDoubleQuoteItalicTextElement175,
																										expr: &litMatcher{
																											pos:        position{line: 550, col: 8, offset: 18103},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 535, col: 79, offset: 17479},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 537, col: 9, offset: 17552},
																			run: (*parser).callonDoubleQuoteItalicTextElement178,
																			expr: &seqExpr{
																				pos: position{line: 537, col: 9, offset: 17552},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 537, col: 9, offset: 17552},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 537, col: 14, offset: 17557},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2936, col: 7, offset: 97248},
																							run: (*parser).callonDoubleQuoteItalicTextElement182,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								expr: &charClassMatcher{
																									pos:        position{line: 2936, col: 7, offset: 97248},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 537, col: 22, offset: 17565},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2658, col: 11, offset: 88553},
																run: (*parser).callonDoubleQuoteItalicTextElement186,
																expr: &charClassMatcher{
																	pos:        position{line: 2658, col: 12, offset: 88554},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2683, col: 15, offset: 89521},
										run: (*parser).callonDoubleQuoteItalicTextElement188,
										expr: &litMatcher{
											pos:        position{line: 2683, col: 15, offset: 89521},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2689, col: 14, offset: 89636},
										run: (*parser).callonDoubleQuoteItalicTextElement190,
										expr: &litMatcher{
											pos:        position{line: 2689, col: 14, offset: 89636},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2693, col: 14, offset: 89712},
										run: (*parser).callonDoubleQuoteItalicTextElement192,
										expr: &litMatcher{
											pos:        position{line: 2693, col: 14, offset: 89712},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2697, col: 15, offset: 89790},
										run: (*parser).callonDoubleQuoteItalicTextElement194,
										expr: &litMatcher{
											pos:        position{line: 2697, col: 15, offset: 89790},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2701, col: 13, offset: 89865},
										run: (*parser).callonDoubleQuoteItalicTextElement196,
										expr: &litMatcher{
											pos:        position{line: 2701, col: 13, offset: 89865},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2709, col: 22, offset: 90171},
										run: (*parser).callonDoubleQuoteItalicTextElement198,
										expr: &seqExpr{
											pos: position{line: 2709, col: 22, offset: 90171},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2860, col: 13, offset: 94811},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2709, col: 31, offset: 90180},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2709, col: 35, offset: 90184},
													expr: &charClassMatcher{
														pos:        position{line: 2709, col: 36, offset: 90185},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1905, col: 11, offset: 63319},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1906, col: 11, offset: 63341},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1907, col: 11, offset: 63364},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&actionExpr{
										pos: position{line: 991, col: 23, offset: 31326},
										run: (*parser).callonDoubleQuoteItalicTextElement207,
										expr: &seqExpr{
											pos: position{line: 991, col: 23, offset: 31326},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 989, col: 32, offset: 31294},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 991, col: 51, offset: 31354},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 991, col: 56, offset: 31359},
														run: (*parser).callonDoubleQuoteItalicTextElement211,
														expr: &oneOrMoreExpr{
															pos: position{line: 991, col: 56, offset: 31359},
															expr: &charClassMatcher{
																pos:        position{line: 991, col: 56, offset: 31359},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 989, col: 32, offset: 31294},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 1925, col: 5, offset: 63875},
										val:        "[^\\r\\n_]",
										chars:      []rune{'\r', '\n', '_'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 1926, col: 7, offset: 63974},
										run: (*parser).callonDoubleQuoteItalicTextElement216,
										expr: &seqExpr{
											pos: position{line: 1926, col: 7, offset: 63974},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1926, col: 7, offset: 63974},
													val:        "__",
													ignoreCase: false,
													want:       "\"__\"",
												},
												&actionExpr{
													pos: position{line: 2864, col: 14, offset: 94885},
													run: (*parser).callonDoubleQuoteItalicTextElement219,
													expr: &oneOrMoreExpr{
														pos: position{line: 2864, col: 14, offset: 94885},
														expr: &charClassMatcher{
															pos:        position{line: 2864, col: 14, offset: 94885},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 1913, col: 1, offset: 63522},
			expr: &actionExpr{
				pos: position{line: 1914, col: 5, offset: 63564},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1914, col: 5, offset: 63564},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1914, col: 5, offset: 63564},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1914, col: 16, offset: 63575},
								expr: &ruleRefExpr{
									pos:  position{line: 1914, col: 17, offset: 63576},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1915, col: 5, offset: 63602},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1915, col: 11, offset: 63608},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1915, col: 11, offset: 63608},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1916, col: 11, offset: 63640},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1917, col: 11, offset: 63659},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1918, col: 11, offset: 63680},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1919, col: 11, offset: 63704},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1920, col: 11, offset: 63728},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1937, col: 1, offset: 64350},
			expr: &actionExpr{
				pos: position{line: 1938, col: 5, offset: 64380},
				run: (*parser).callonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1938, col: 5, offset: 64380},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1933, col: 40, offset: 64301},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&labeledExpr{
							pos:   position{line: 1939, col: 5, offset: 64420},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1939, col: 15, offset: 64430},
								name: "SingleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1935, col: 38, offset: 64344},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1944, col: 1, offset: 64597},
			expr: &actionExpr{
				pos: position{line: 1945, col: 5, offset: 64635},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 1945, col: 5, offset: 64635},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1945, col: 5, offset: 64635},
							expr: &notExpr{
								pos: position{line: 2962, col: 8, offset: 97839},
								expr: &anyMatcher{
									line: 2962, col: 9, offset: 97840,
								},
							},
						},
						&notExpr{
							pos: position{line: 1945, col: 10, offset: 64640},
							expr: &actionExpr{
								pos: position{line: 2948, col: 10, offset: 97526},
								run: (*parser).callonSingleQuoteItalicTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 2948, col: 11, offset: 97527},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1946, col: 5, offset: 64679},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1946, col: 14, offset: 64688},
								expr: &ruleRefExpr{
									pos:  position{line: 1946, col: 15, offset: 64689},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1947, col: 5, offset: 64724},
							run: (*parser).callonSingleQuoteItalicTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1953, col: 1, offset: 64865},
			expr: &choiceExpr{
				pos: position{line: 1954, col: 5, offset: 64902},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1878, col: 5, offset: 62413},
						run: (*parser).callonSingleQuoteItalicTextElement2,
						expr: &seqExpr{
							pos: position{line: 1878, col: 5, offset: 62413},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1878, col: 5, offset: 62413},
									expr: &charClassMatcher{
										pos:        position{line: 1878, col: 5, offset: 62413},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1878, col: 15, offset: 62423},
									expr: &choiceExpr{
										pos: position{line: 1878, col: 17, offset: 62425},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2948, col: 10, offset: 97526},
												run: (*parser).callonSingleQuoteItalicTextElement8,
												expr: &charClassMatcher{
													pos:        position{line: 2948, col: 11, offset: 97527},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 1875, col: 24, offset: 62385},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2953, col: 11, offset: 97635},
						run: (*parser).callonSingleQuoteItalicTextElement11,
						expr: &oneOrMoreExpr{
							pos: position{line: 2953, col: 11, offset: 97635},
							expr: &charClassMatcher{
								pos:        position{line: 2953, col: 12, offset: 97636},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 1956, col: 7, offset: 64936},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 2958, col: 12, offset: 97749},
								run: (*parser).callonSingleQuoteItalicTextElement15,
								expr: &choiceExpr{
									pos: position{line: 2958, col: 13, offset: 97750},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2958, col: 13, offset: 97750},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2958, col: 20, offset: 97757},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2958, col: 29, offset: 97766},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 1956, col: 15, offset: 64944},
								expr: &actionExpr{
									pos: position{line: 2958, col: 12, offset: 97749},
									run: (*parser).callonSingleQuoteItalicTextElement21,
									expr: &choiceExpr{
										pos: position{line: 2958, col: 13, offset: 97750},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2958, col: 13, offset: 97750},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 20, offset: 97757},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 29, offset: 97766},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 493, col: 5, offset: 15873},
						run: (*parser).callonSingleQuoteItalicTextElement26,
						expr: &seqExpr{
							pos: position{line: 493, col: 5, offset: 15873},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 493, col: 5, offset: 15873},
									run: (*parser).callonSingleQuoteItalicTextElement28,
								},
								&labeledExpr{
									pos:   position{line: 496, col: 5, offset: 15937},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 496, col: 14, offset: 15946},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 507, col: 25, offset: 16408},
												run: (*parser).callonSingleQuoteItalicTextElement31,
												expr: &seqExpr{
													pos: position{line: 507, col: 25, offset: 16408},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 507, col: 25, offset: 16408},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 507, col: 37, offset: 16420},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 162, col: 18, offset: 4814},
																run: (*parser).callonSingleQuoteItalicTextElement35,
																expr: &seqExpr{
																	pos: position{line: 162, col: 18, offset: 4814},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 162, col: 18, offset: 4814},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 162, col: 28, offset: 4824},
																			expr: &charClassMatcher{
																				pos:        position{line: 162, col: 29, offset: 4825},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 507, col: 56, offset: 16439},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 507, col: 62, offset: 16445},
																expr: &actionExpr{
																	pos: position{line: 515, col: 17, offset: 16708},
																	run: (*parser).callonSingleQuoteItalicTextElement42,
																	expr: &seqExpr{
																		pos: position{line: 515, col: 17, offset: 16708},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 515, col: 17, offset: 16708},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 515, col: 21, offset: 16712},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 515, col: 28, offset: 16719},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 515, col: 28, offset: 16719},
																							run: (*parser).callonSingleQuoteItalicTextElement47,
																							expr: &charClassMatcher{
																								pos:        position{line: 515, col: 28, offset: 16719},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 517, col: 9, offset: 16773},
																							run: (*parser).callonSingleQuoteItalicTextElement49,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 517, col: 9, offset: 16773},
																								expr: &charClassMatcher{
																									pos:        position{line: 517, col: 9, offset: 16773},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 507, col: 78, offset: 16461},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 511, col: 25, offset: 16563},
												run: (*parser).callonSingleQuoteItalicTextElement53,
												expr: &seqExpr{
													pos: position{line: 511, col: 25, offset: 16563},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 511, col: 25, offset: 16563},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 511, col: 38, offset: 16576},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 162, col: 18, offset: 4814},
																run: (*parser).callonSingleQuoteItalicTextElement57,
																expr: &seqExpr{
																	pos: position{line: 162, col: 18, offset: 4814},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 162, col: 18, offset: 4814},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 162, col: 28, offset: 4824},
																			expr: &charClassMatcher{
																				pos:        position{line: 162, col: 29, offset: 4825},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 511, col: 57, offset: 16595},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 511, col: 63, offset: 16601},
																expr: &actionExpr{
																	pos: position{line: 515, col: 17, offset: 16708},
																	run: (*parser).callonSingleQuoteItalicTextElement64,
																	expr: &seqExpr{
																		pos: position{line: 515, col: 17, offset: 16708},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 515, col: 17, offset: 16708},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 515, col: 21, offset: 16712},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 515, col: 28, offset: 16719},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 515, col: 28, offset: 16719},
																							run: (*parser).callonSingleQuoteItalicTextElement69,
																							expr: &charClassMatcher{
																								pos:        position{line: 515, col: 28, offset: 16719},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 517, col: 9, offset: 16773},
																							run: (*parser).callonSingleQuoteItalicTextElement71,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 517, col: 9, offset: 16773},
																								expr: &charClassMatcher{
																									pos:        position{line: 517, col: 9, offset: 16773},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 511, col: 79, offset: 16617},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 500, col: 31, offset: 16063},
												run: (*parser).callonSingleQuoteItalicTextElement75,
												expr: &seqExpr{
													pos: position{line: 500, col: 31, offset: 16063},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 500, col: 31, offset: 16063},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 500, col: 35, offset: 16067},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 162, col: 18, offset: 4814},
																run: (*parser).callonSingleQuoteItalicTextElement79,
																expr: &seqExpr{
																	pos: position{line: 162, col: 18, offset: 4814},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 162, col: 18, offset: 4814},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 162, col: 28, offset: 4824},
																			expr: &charClassMatcher{
																				pos:        position{line: 162, col: 29, offset: 4825},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 500, col: 54, offset: 16086},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2650, col: 5, offset: 88280},
						run: (*parser).callonSingleQuoteItalicTextElement85,
						expr: &seqExpr{
							pos: position{line: 2650, col: 5, offset: 88280},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2650, col: 5, offset: 88280},
									run: (*parser).callonSingleQuoteItalicTextElement87,
								},
								&labeledExpr{
									pos:   position{line: 2653, col: 5, offset: 88351},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2655, col: 9, offset: 88449},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2655, col: 9, offset: 88449},
												run: (*parser).callonSingleQuoteItalicTextElement90,
												expr: &choiceExpr{
													pos: position{line: 535, col: 27, offset: 17427},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 535, col: 27, offset: 17427},
															run: (*parser).callonSingleQuoteItalicTextElement92,
															expr: &seqExpr{
																pos: position{line: 535, col: 27, offset: 17427},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 535, col: 27, offset: 17427},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 535, col: 32, offset: 17432},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2936, col: 7, offset: 97248},
																			run: (*parser).callonSingleQuoteItalicTextElement96,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2936, col: 7, offset: 97248},
																				expr: &charClassMatcher{
																					pos:        position{line: 2936, col: 7, offset: 97248},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 535, col: 40, offset: 17440},
																		expr: &actionExpr{
																			pos: position{line: 2948, col: 10, offset: 97526},
																			run: (*parser).callonSingleQuoteItalicTextElement100,
																			expr: &charClassMatcher{
																				pos:        position{line: 2948, col: 11, offset: 97527},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 535, col: 47, offset: 17447},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 535, col: 51, offset: 17451},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 545, col: 24, offset: 17864},
																			expr: &choiceExpr{
																				pos: position{line: 546, col: 5, offset: 17870},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 546, col: 6, offset: 17871},
																						run: (*parser).callonSingleQuoteItalicTextElement106,
																						expr: &seqExpr{
																							pos: position{line: 546, col: 6, offset: 17871},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 546, col: 6, offset: 17871},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 546, col: 14, offset: 17879},
																									expr: &charClassMatcher{
																										pos:        position{line: 546, col: 14, offset: 17879},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 493, col: 5, offset: 15873},
																						run: (*parser).callonSingleQuoteItalicTextElement111,
																						expr: &seqExpr{
																							pos: position{line: 493, col: 5, offset: 15873},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 493, col: 5, offset: 15873},
																									run: (*parser).callonSingleQuoteItalicTextElement113,
																								},
																								&labeledExpr{
																									pos:   position{line: 496, col: 5, offset: 15937},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 496, col: 14, offset: 15946},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 507, col: 25, offset: 16408},
																												run: (*parser).callonSingleQuoteItalicTextElement116,
																												expr: &seqExpr{
																													pos: position{line: 507, col: 25, offset: 16408},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 507, col: 25, offset: 16408},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 507, col: 37, offset: 16420},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 162, col: 18, offset: 4814},
																																run: (*parser).callonSingleQuoteItalicTextElement120,
																																expr: &seqExpr{
																																	pos: position{line: 162, col: 18, offset: 4814},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 162, col: 18, offset: 4814},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 162, col: 28, offset: 4824},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 162, col: 29, offset: 4825},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 507, col: 56, offset: 16439},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 507, col: 62, offset: 16445},
																																expr: &actionExpr{
																																	pos: position{line: 515, col: 17, offset: 16708},
																																	run: (*parser).callonSingleQuoteItalicTextElement127,
																																	expr: &seqExpr{
																																		pos: position{line: 515, col: 17, offset: 16708},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 515, col: 17, offset: 16708},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 515, col: 21, offset: 16712},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 515, col: 28, offset: 16719},
																																							run: (*parser).callonSingleQuoteItalicTextElement132,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 515, col: 28, offset: 16719},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 517, col: 9, offset: 16773},
																																							run: (*parser).callonSingleQuoteItalicTextElement134,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 517, col: 9, offset: 16773},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 517, col: 9, offset: 16773},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 507, col: 78, offset: 16461},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 511, col: 25, offset: 16563},
																												run: (*parser).callonSingleQuoteItalicTextElement138,
																												expr: &seqExpr{
																													pos: position{line: 511, col: 25, offset: 16563},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 511, col: 25, offset: 16563},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 511, col: 38, offset: 16576},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 162, col: 18, offset: 4814},
																																run: (*parser).callonSingleQuoteItalicTextElement142,
																																expr: &seqExpr{
																																	pos: position{line: 162, col: 18, offset: 4814},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 162, col: 18, offset: 4814},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 162, col: 28, offset: 4824},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 162, col: 29, offset: 4825},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 511, col: 57, offset: 16595},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 511, col: 63, offset: 16601},
																																expr: &actionExpr{
																																	pos: position{line: 515, col: 17, offset: 16708},
																																	run: (*parser).callonSingleQuoteItalicTextElement149,
																																	expr: &seqExpr{
																																		pos: position{line: 515, col: 17, offset: 16708},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 515, col: 17, offset: 16708},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 515, col: 21, offset: 16712},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 515, col: 28, offset: 16719},
																																							run: (*parser).callonSingleQuoteItalicTextElement154,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 515, col: 28, offset: 16719},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 517, col: 9, offset: 16773},
																																							run: (*parser).callonSingleQuoteItalicTextElement156,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 517, col: 9, offset: 16773},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 517, col: 9, offset: 16773},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 511, col: 79, offset: 16617},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 500, col: 31, offset: 16063},
																												run: (*parser).callonSingleQuoteItalicTextElement160,
																												expr: &seqExpr{
																													pos: position{line: 500, col: 31, offset: 16063},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 500, col: 31, offset: 16063},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 500, col: 35, offset: 16067},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 162, col: 18, offset: 4814},
																																run: (*parser).callonSingleQuoteItalicTextElement164,
																																expr: &seqExpr{
																																	pos: position{line: 162, col: 18, offset: 4814},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 162, col: 18, offset: 4814},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 162, col: 28, offset: 4824},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 162, col: 29, offset: 4825},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 500, col: 54, offset: 16086},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 550, col: 8, offset: 18103},
																						run: (*parser).callonSingleQuoteItalicTextElement170,
																						expr: &litMatcher{
																							pos:        position{line: 550, col: 8, offset: 18103},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 535, col: 79, offset: 17479},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 537, col: 9, offset: 17552},
															run: (*parser).callonSingleQuoteItalicTextElement173,
															expr: &seqExpr{
																pos: position{line: 537, col: 9, offset: 17552},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 537, col: 9, offset: 17552},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 537, col: 14, offset: 17557},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2936, col: 7, offset: 97248},
																			run: (*parser).callonSingleQuoteItalicTextElement177,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2936, col: 7, offset: 97248},
																				expr: &charClassMatcher{
																					pos:        position{line: 2936, col: 7, offset: 97248},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 537, col: 22, offset: 17565},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2658, col: 11, offset: 88553},
												run: (*parser).callonSingleQuoteItalicTextElement181,
												expr: &charClassMatcher{
													pos:        position{line: 2658, col: 12, offset: 88554},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2683, col: 15, offset: 89521},
						run: (*parser).callonSingleQuoteItalicTextElement183,
						expr: &litMatcher{
							pos:        position{line: 2683, col: 15, offset: 89521},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2689, col: 14, offset: 89636},
						run: (*parser).callonSingleQuoteItalicTextElement185,
						expr: &litMatcher{
							pos:        position{line: 2689, col: 14, offset: 89636},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2693, col: 14, offset: 89712},
						run: (*parser).callonSingleQuoteItalicTextElement187,
						expr: &litMatcher{
							pos:        position{line: 2693, col: 14, offset: 89712},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2697, col: 15, offset: 89790},
						run: (*parser).callonSingleQuoteItalicTextElement189,
						expr: &litMatcher{
							pos:        position{line: 2697, col: 15, offset: 89790},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2701, col: 13, offset: 89865},
						run: (*parser).callonSingleQuoteItalicTextElement191,
						expr: &litMatcher{
							pos:        position{line: 2701, col: 13, offset: 89865},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2709, col: 22, offset: 90171},
						run: (*parser).callonSingleQuoteItalicTextElement193,
						expr: &seqExpr{
							pos: position{line: 2709, col: 22, offset: 90171},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2860, col: 13, offset: 94811},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2709, col: 31, offset: 90180},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2709, col: 35, offset: 90184},
									expr: &charClassMatcher{
										pos:        position{line: 2709, col: 36, offset: 90185},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1960, col: 7, offset: 65057},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1961, col: 7, offset: 65075},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1962, col: 7, offset: 65094},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&actionExpr{
						pos: position{line: 991, col: 23, offset: 31326},
						run: (*parser).callonSingleQuoteItalicTextElement202,
						expr: &seqExpr{
							pos: position{line: 991, col: 23, offset: 31326},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 989, col: 32, offset: 31294},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 991, col: 51, offset: 31354},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 991, col: 56, offset: 31359},
										run: (*parser).callonSingleQuoteItalicTextElement206,
										expr: &oneOrMoreExpr{
											pos: position{line: 991, col: 56, offset: 31359},
											expr: &charClassMatcher{
												pos:        position{line: 991, col: 56, offset: 31359},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 989, col: 32, offset: 31294},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 1978, col: 5, offset: 65551},
						val:        "[^\\r\\n _]",
						chars:      []rune{'\r', '\n', ' ', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1979, col: 7, offset: 65658},
						run: (*parser).callonSingleQuoteItalicTextElement211,
						expr: &seqExpr{
							pos: position{line: 1979, col: 7, offset: 65658},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1979, col: 7, offset: 65658},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&actionExpr{
									pos: position{line: 2864, col: 14, offset: 94885},
									run: (*parser).callonSingleQuoteItalicTextElement214,
									expr: &oneOrMoreExpr{
										pos: position{line: 2864, col: 14, offset: 94885},
										expr: &charClassMatcher{
											pos:        position{line: 2864, col: 14, offset: 94885},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 1966, col: 1, offset: 65199},
			expr: &actionExpr{
				pos: position{line: 1967, col: 5, offset: 65240},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1967, col: 5, offset: 65240},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1967, col: 5, offset: 65240},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1967, col: 16, offset: 65251},
								expr: &ruleRefExpr{
									pos:  position{line: 1967, col: 17, offset: 65252},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1968, col: 5, offset: 65278},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1968, col: 11, offset: 65284},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1968, col: 11, offset: 65284},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1969, col: 11, offset: 65303},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1970, col: 11, offset: 65335},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1971, col: 11, offset: 65356},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1972, col: 11, offset: 65380},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1973, col: 11, offset: 65404},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1983, col: 1, offset: 65836},
			expr: &choiceExpr{
				pos: position{line: 1984, col: 5, offset: 65862},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1984, col: 5, offset: 65862},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1984, col: 5, offset: 65862},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1984, col: 5, offset: 65862},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1741, col: 25, offset: 57712},
										run: (*parser).callonEscapedItalicText5,
										expr: &seqExpr{
											pos: position{line: 1741, col: 25, offset: 57712},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1741, col: 25, offset: 57712},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1741, col: 30, offset: 57717},
													expr: &litMatcher{
														pos:        position{line: 1741, col: 30, offset: 57717},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1984, col: 40, offset: 65897},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1984, col: 45, offset: 65902},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1984, col: 55, offset: 65912},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1984, col: 86, offset: 65943},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1986, col: 9, offset: 66100},
						run: (*parser).callonEscapedItalicText14,
						expr: &seqExpr{
							pos: position{line: 1986, col: 9, offset: 66100},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1986, col: 9, offset: 66100},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1737, col: 25, offset: 57639},
										run: (*parser).callonEscapedItalicText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1737, col: 25, offset: 57639},
											expr: &litMatcher{
												pos:        position{line: 1737, col: 25, offset: 57639},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1986, col: 44, offset: 66135},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1986, col: 49, offset: 66140},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1986, col: 59, offset: 66150},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1986, col: 90, offset: 66181},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1989, col: 9, offset: 66381},
						run: (*parser).callonEscapedItalicText24,
						expr: &seqExpr{
							pos: position{line: 1989, col: 9, offset: 66381},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1989, col: 9, offset: 66381},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1737, col: 25, offset: 57639},
										run: (*parser).callonEscapedItalicText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1737, col: 25, offset: 57639},
											expr: &litMatcher{
												pos:        position{line: 1737, col: 25, offset: 57639},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1989, col: 44, offset: 66416},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1989, col: 48, offset: 66420},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1989, col: 58, offset: 66430},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1989, col: 89, offset: 66461},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1996, col: 1, offset: 66780},
			expr: &choiceExpr{
				pos: position{line: 1996, col: 18, offset: 66797},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1996, col: 18, offset: 66797},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1996, col: 45, offset: 66824},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 2010, col: 1, offset: 67176},
			expr: &actionExpr{
				pos: position{line: 2011, col: 5, offset: 67209},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2011, col: 5, offset: 67209},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2008, col: 38, offset: 67170},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 2012, col: 5, offset: 67248},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2012, col: 15, offset: 67258},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2008, col: 38, offset: 67170},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 2017, col: 1, offset: 67430},
			expr: &oneOrMoreExpr{
				pos: position{line: 2017, col: 37, offset: 67466},
				expr: &ruleRefExpr{
					pos:  position{line: 2017, col: 37, offset: 67466},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 2019, col: 1, offset: 67533},
			expr: &actionExpr{
				pos: position{line: 2020, col: 5, offset: 67573},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 2020, col: 5, offset: 67573},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2020, col: 5, offset: 67573},
							expr: &litMatcher{
								pos:        position{line: 2008, col: 38, offset: 67170},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2021, col: 5, offset: 67612},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2022, col: 9, offset: 67630},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2001, col: 5, offset: 66907},
										run: (*parser).callonDoubleQuoteMonospaceTextElement7,
										expr: &seqExpr{
											pos: position{line: 2001, col: 5, offset: 66907},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2001, col: 5, offset: 66907},
													expr: &charClassMatcher{
														pos:        position{line: 2001, col: 5, offset: 66907},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2001, col: 15, offset: 66917},
													expr: &choiceExpr{
														pos: position{line: 2001, col: 17, offset: 66919},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2948, col: 10, offset: 97526},
																run: (*parser).callonDoubleQuoteMonospaceTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 2948, col: 11, offset: 97527},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1998, col: 27, offset: 66876},
																val:        "`",
																ignoreCase: false,
																want:       "\"`\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2953, col: 11, offset: 97635},
										run: (*parser).callonDoubleQuoteMonospaceTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 2953, col: 11, offset: 97635},
											expr: &charClassMatcher{
												pos:        position{line: 2953, col: 12, offset: 97636},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 2024, col: 11, offset: 67708},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2958, col: 12, offset: 97749},
												run: (*parser).callonDoubleQuoteMonospaceTextElement20,
												expr: &choiceExpr{
													pos: position{line: 2958, col: 13, offset: 97750},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2958, col: 13, offset: 97750},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2958, col: 20, offset: 97757},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2958, col: 29, offset: 97766},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2024, col: 19, offset: 67716},
												expr: &actionExpr{
													pos: position{line: 2958, col: 12, offset: 97749},
													run: (*parser).callonDoubleQuoteMonospaceTextElement26,
													expr: &choiceExpr{
														pos: position{line: 2958, col: 13, offset: 97750},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2958, col: 13, offset: 97750},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 20, offset: 97757},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 29, offset: 97766},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 493, col: 5, offset: 15873},
										run: (*parser).callonDoubleQuoteMonospaceTextElement31,
										expr: &seqExpr{
											pos: position{line: 493, col: 5, offset: 15873},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 493, col: 5, offset: 15873},
													run: (*parser).callonDoubleQuoteMonospaceTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 496, col: 5, offset: 15937},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 496, col: 14, offset: 15946},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 507, col: 25, offset: 16408},
																run: (*parser).callonDoubleQuoteMonospaceTextElement36,
																expr: &seqExpr{
																	pos: position{line: 507, col: 25, offset: 16408},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 507, col: 25, offset: 16408},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 507, col: 37, offset: 16420},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 507, col: 56, offset: 16439},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 507, col: 62, offset: 16445},
																				expr: &actionExpr{
																					pos: position{line: 515, col: 17, offset: 16708},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 515, col: 17, offset: 16708},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 515, col: 21, offset: 16712},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 515, col: 28, offset: 16719},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 515, col: 28, offset: 16719},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 515, col: 28, offset: 16719},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 517, col: 9, offset: 16773},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												expr: &charClassMatcher{
																													pos:        position{line: 517, col: 9, offset: 16773},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 507, col: 78, offset: 16461},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 511, col: 25, offset: 16563},
																run: (*parser).callonDoubleQuoteMonospaceTextElement58,
																expr: &seqExpr{
																	pos: position{line: 511, col: 25, offset: 16563},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 511, col: 25, offset: 16563},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 511, col: 38, offset: 16576},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 511, col: 57, offset: 16595},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 511, col: 63, offset: 16601},
																				expr: &actionExpr{
																					pos: position{line: 515, col: 17, offset: 16708},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 515, col: 17, offset: 16708},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 515, col: 21, offset: 16712},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 515, col: 28, offset: 16719},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 515, col: 28, offset: 16719},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 515, col: 28, offset: 16719},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 517, col: 9, offset: 16773},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												expr: &charClassMatcher{
																													pos:        position{line: 517, col: 9, offset: 16773},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 511, col: 79, offset: 16617},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 500, col: 31, offset: 16063},
																run: (*parser).callonDoubleQuoteMonospaceTextElement80,
																expr: &seqExpr{
																	pos: position{line: 500, col: 31, offset: 16063},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 500, col: 31, offset: 16063},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 500, col: 35, offset: 16067},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 500, col: 54, offset: 16086},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2650, col: 5, offset: 88280},
										run: (*parser).callonDoubleQuoteMonospaceTextElement90,
										expr: &seqExpr{
											pos: position{line: 2650, col: 5, offset: 88280},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2650, col: 5, offset: 88280},
													run: (*parser).callonDoubleQuoteMonospaceTextElement92,
												},
												&labeledExpr{
													pos:   position{line: 2653, col: 5, offset: 88351},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2655, col: 9, offset: 88449},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2655, col: 9, offset: 88449},
																run: (*parser).callonDoubleQuoteMonospaceTextElement95,
																expr: &choiceExpr{
																	pos: position{line: 535, col: 27, offset: 17427},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 535, col: 27, offset: 17427},
																			run: (*parser).callonDoubleQuoteMonospaceTextElement97,
																			expr: &seqExpr{
																				pos: position{line: 535, col: 27, offset: 17427},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 535, col: 27, offset: 17427},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 535, col: 32, offset: 17432},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2936, col: 7, offset: 97248},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement101,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								expr: &charClassMatcher{
																									pos:        position{line: 2936, col: 7, offset: 97248},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 535, col: 40, offset: 17440},
																						expr: &actionExpr{
																							pos: position{line: 2948, col: 10, offset: 97526},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement105,
																							expr: &charClassMatcher{
																								pos:        position{line: 2948, col: 11, offset: 97527},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 535, col: 47, offset: 17447},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 535, col: 51, offset: 17451},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 545, col: 24, offset: 17864},
																							expr: &choiceExpr{
																								pos: position{line: 546, col: 5, offset: 17870},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 546, col: 6, offset: 17871},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement111,
																										expr: &seqExpr{
																											pos: position{line: 546, col: 6, offset: 17871},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 546, col: 6, offset: 17871},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 546, col: 14, offset: 17879},
																													expr: &charClassMatcher{
																														pos:        position{line: 546, col: 14, offset: 17879},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 493, col: 5, offset: 15873},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement116,
																										expr: &seqExpr{
																											pos: position{line: 493, col: 5, offset: 15873},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 493, col: 5, offset: 15873},
																													run: (*parser).callonDoubleQuoteMonospaceTextElement118,
																												},
																												&labeledExpr{
																													pos:   position{line: 496, col: 5, offset: 15937},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 496, col: 14, offset: 15946},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 507, col: 25, offset: 16408},
																																run: (*parser).callonDoubleQuoteMonospaceTextElement121,
																																expr: &seqExpr{
																																	pos: position{line: 507, col: 25, offset: 16408},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 507, col: 25, offset: 16408},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 37, offset: 16420},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonDoubleQuoteMonospaceTextElement125,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 56, offset: 16439},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 507, col: 62, offset: 16445},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonDoubleQuoteMonospaceTextElement132,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonDoubleQuoteMonospaceTextElement137,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonDoubleQuoteMonospaceTextElement139,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 507, col: 78, offset: 16461},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 511, col: 25, offset: 16563},
																																run: (*parser).callonDoubleQuoteMonospaceTextElement143,
																																expr: &seqExpr{
																																	pos: position{line: 511, col: 25, offset: 16563},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 511, col: 25, offset: 16563},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 38, offset: 16576},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonDoubleQuoteMonospaceTextElement147,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 57, offset: 16595},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 511, col: 63, offset: 16601},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonDoubleQuoteMonospaceTextElement154,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonDoubleQuoteMonospaceTextElement159,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonDoubleQuoteMonospaceTextElement161,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 511, col: 79, offset: 16617},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 500, col: 31, offset: 16063},
																																run: (*parser).callonDoubleQuoteMonospaceTextElement165,
																																expr: &seqExpr{
																																	pos: position{line: 500, col: 31, offset: 16063},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 500, col: 31, offset: 16063},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 500, col: 35, offset: 16067},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonDoubleQuoteMonospaceTextElement169,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 500, col: 54, offset: 16086},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 550, col: 8, offset: 18103},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement175,
																										expr: &litMatcher{
																											pos:        position{line: 550, col: 8, offset: 18103},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 535, col: 79, offset: 17479},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 537, col: 9, offset: 17552},
																			run: (*parser).callonDoubleQuoteMonospaceTextElement178,
																			expr: &seqExpr{
																				pos: position{line: 537, col: 9, offset: 17552},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 537, col: 9, offset: 17552},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 537, col: 14, offset: 17557},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2936, col: 7, offset: 97248},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement182,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								expr: &charClassMatcher{
																									pos:        position{line: 2936, col: 7, offset: 97248},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 537, col: 22, offset: 17565},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2658, col: 11, offset: 88553},
																run: (*parser).callonDoubleQuoteMonospaceTextElement186,
																expr: &charClassMatcher{
																	pos:        position{line: 2658, col: 12, offset: 88554},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2683, col: 15, offset: 89521},
										run: (*parser).callonDoubleQuoteMonospaceTextElement188,
										expr: &litMatcher{
											pos:        position{line: 2683, col: 15, offset: 89521},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2689, col: 14, offset: 89636},
										run: (*parser).callonDoubleQuoteMonospaceTextElement190,
										expr: &litMatcher{
											pos:        position{line: 2689, col: 14, offset: 89636},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2693, col: 14, offset: 89712},
										run: (*parser).callonDoubleQuoteMonospaceTextElement192,
										expr: &litMatcher{
											pos:        position{line: 2693, col: 14, offset: 89712},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2697, col: 15, offset: 89790},
										run: (*parser).callonDoubleQuoteMonospaceTextElement194,
										expr: &litMatcher{
											pos:        position{line: 2697, col: 15, offset: 89790},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2701, col: 13, offset: 89865},
										run: (*parser).callonDoubleQuoteMonospaceTextElement196,
										expr: &litMatcher{
											pos:        position{line: 2701, col: 13, offset: 89865},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2709, col: 22, offset: 90171},
										run: (*parser).callonDoubleQuoteMonospaceTextElement198,
										expr: &seqExpr{
											pos: position{line: 2709, col: 22, offset: 90171},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2860, col: 13, offset: 94811},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2709, col: 31, offset: 90180},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2709, col: 35, offset: 90184},
													expr: &charClassMatcher{
														pos:        position{line: 2709, col: 36, offset: 90185},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2028, col: 11, offset: 67845},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 2029, col: 11, offset: 67867},
										name: "QuotedString",
									},
									&litMatcher{
										pos:        position{line: 2687, col: 18, offset: 89600},
										val:        "`'",
										ignoreCase: false,
										want:       "\"`'\"",
									},
									&ruleRefExpr{
										pos:  position{line: 2031, col: 11, offset: 67957},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&actionExpr{
										pos: position{line: 991, col: 23, offset: 31326},
										run: (*parser).callonDoubleQuoteMonospaceTextElement208,
										expr: &seqExpr{
											pos: position{line: 991, col: 23, offset: 31326},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 989, col: 32, offset: 31294},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 991, col: 51, offset: 31354},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 991, col: 56, offset: 31359},
														run: (*parser).callonDoubleQuoteMonospaceTextElement212,
														expr: &oneOrMoreExpr{
															pos: position{line: 991, col: 56, offset: 31359},
															expr: &charClassMatcher{
																pos:        position{line: 991, col: 56, offset: 31359},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 989, col: 32, offset: 31294},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 2050, col: 5, offset: 68489},
										val:        "[^\\r\\n`]",
										chars:      []rune{'\r', '\n', '`'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 2051, col: 7, offset: 68591},
										run: (*parser).callonDoubleQuoteMonospaceTextElement217,
										expr: &seqExpr{
											pos: position{line: 2051, col: 7, offset: 68591},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2051, col: 7, offset: 68591},
													val:        "``",
													ignoreCase: false,
													want:       "\"``\"",
												},
												&actionExpr{
													pos: position{line: 2864, col: 14, offset: 94885},
													run: (*parser).callonDoubleQuoteMonospaceTextElement220,
													expr: &oneOrMoreExpr{
														pos: position{line: 2864, col: 14, offset: 94885},
														expr: &charClassMatcher{
															pos:        position{line: 2864, col: 14, offset: 94885},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 2037, col: 1, offset: 68121},
			expr: &actionExpr{
				pos: position{line: 2038, col: 5, offset: 68165},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2038, col: 5, offset: 68165},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2038, col: 5, offset: 68165},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2038, col: 16, offset: 68176},
								expr: &ruleRefExpr{
									pos:  position{line: 2038, col: 17, offset: 68177},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2039, col: 5, offset: 68203},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2040, col: 9, offset: 68218},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2040, col: 9, offset: 68218},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2041, col: 11, offset: 68253},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2042, col: 11, offset: 68272},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2043, col: 11, offset: 68293},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2044, col: 11, offset: 68314},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2045, col: 11, offset: 68338},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 2064, col: 1, offset: 69077},
			expr: &actionExpr{
				pos: position{line: 2065, col: 5, offset: 69110},
				run: (*parser).callonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2065, col: 5, offset: 69110},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2060, col: 43, offset: 69025},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&labeledExpr{
							pos:   position{line: 2066, col: 5, offset: 69154},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2066, col: 15, offset: 69164},
								name: "SingleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2062, col: 41, offset: 69071},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 2071, col: 1, offset: 69340},
			expr: &actionExpr{
				pos: position{line: 2072, col: 5, offset: 69381},
				run: (*parser).callonSingleQuoteMonospaceTextElements1,
				expr: &seqExpr{
					pos: position{line: 2072, col: 5, offset: 69381},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2072, col: 5, offset: 69381},
							expr: &notExpr{
								pos: position{line: 2962, col: 8, offset: 97839},
								expr: &anyMatcher{
									line: 2962, col: 9, offset: 97840,
								},
							},
						},
						&notExpr{
							pos: position{line: 2072, col: 10, offset: 69386},
							expr: &actionExpr{
								pos: position{line: 2948, col: 10, offset: 97526},
								run: (*parser).callonSingleQuoteMonospaceTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 2948, col: 11, offset: 97527},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2073, col: 5, offset: 69425},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2073, col: 14, offset: 69434},
								expr: &ruleRefExpr{
									pos:  position{line: 2073, col: 15, offset: 69435},
									name: "SingleQuoteMonospaceTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2074, col: 5, offset: 69473},
							run: (*parser).callonSingleQuoteMonospaceTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 2080, col: 1, offset: 69614},
			expr: &choiceExpr{
				pos: position{line: 2081, col: 5, offset: 69655},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2872, col: 5, offset: 95266},
						run: (*parser).callonSingleQuoteMonospaceTextElement2,
						expr: &seqExpr{
							pos: position{line: 2872, col: 5, offset: 95266},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2872, col: 5, offset: 95266},
									expr: &charClassMatcher{
										pos:        position{line: 2872, col: 5, offset: 95266},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2872, col: 15, offset: 95276},
									expr: &choiceExpr{
										pos: position{line: 2872, col: 17, offset: 95278},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2872, col: 17, offset: 95278},
												val:        "[\\r\\n ,]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&notExpr{
												pos: position{line: 2962, col: 8, offset: 97839},
												expr: &anyMatcher{
													line: 2962, col: 9, offset: 97840,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2874, col: 9, offset: 95360},
						run: (*parser).callonSingleQuoteMonospaceTextElement11,
						expr: &seqExpr{
							pos: position{line: 2874, col: 9, offset: 95360},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2874, col: 9, offset: 95360},
									expr: &charClassMatcher{
										pos:        position{line: 2874, col: 9, offset: 95360},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2874, col: 19, offset: 95370},
									expr: &seqExpr{
										pos: position{line: 2874, col: 20, offset: 95371},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2874, col: 20, offset: 95371},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2874, col: 27, offset: 95378},
												expr: &charClassMatcher{
													pos:        position{line: 2874, col: 27, offset: 95378},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2953, col: 11, offset: 97635},
						run: (*parser).callonSingleQuoteMonospaceTextElement20,
						expr: &oneOrMoreExpr{
							pos: position{line: 2953, col: 11, offset: 97635},
							expr: &charClassMatcher{
								pos:        position{line: 2953, col: 12, offset: 97636},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 2083, col: 7, offset: 69680},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 2958, col: 12, offset: 97749},
								run: (*parser).callonSingleQuoteMonospaceTextElement24,
								expr: &choiceExpr{
									pos: position{line: 2958, col: 13, offset: 97750},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2958, col: 13, offset: 97750},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2958, col: 20, offset: 97757},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2958, col: 29, offset: 97766},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 2083, col: 15, offset: 69688},
								expr: &actionExpr{
									pos: position{line: 2958, col: 12, offset: 97749},
									run: (*parser).callonSingleQuoteMonospaceTextElement30,
									expr: &choiceExpr{
										pos: position{line: 2958, col: 13, offset: 97750},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2958, col: 13, offset: 97750},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 20, offset: 97757},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 29, offset: 97766},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 493, col: 5, offset: 15873},
						run: (*parser).callonSingleQuoteMonospaceTextElement35,
						expr: &seqExpr{
							pos: position{line: 493, col: 5, offset: 15873},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 493, col: 5, offset: 15873},
									run: (*parser).callonSingleQuoteMonospaceTextElement37,
								},
								&labeledExpr{
									pos:   position{line: 496, col: 5, offset: 15937},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 496, col: 14, offset: 15946},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 507, col: 25, offset: 16408},
												run: (*parser).callonSingleQuoteMonospaceTextElement40,
												expr: &seqExpr{
													pos: position{line: 507, col: 25, offset: 16408},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 507, col: 25, offset: 16408},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 507, col: 37, offset: 16420},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 162, col: 18, offset: 4814},
																run: (*parser).callonSingleQuoteMonospaceTextElement44,
																expr: &seqExpr{
																	pos: position{line: 162, col: 18, offset: 4814},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 162, col: 18, offset: 4814},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 162, col: 28, offset: 4824},
																			expr: &charClassMatcher{
																				pos:        position{line: 162, col: 29, offset: 4825},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 507, col: 56, offset: 16439},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 507, col: 62, offset: 16445},
																expr: &actionExpr{
																	pos: position{line: 515, col: 17, offset: 16708},
																	run: (*parser).callonSingleQuoteMonospaceTextElement51,
																	expr: &seqExpr{
																		pos: position{line: 515, col: 17, offset: 16708},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 515, col: 17, offset: 16708},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 515, col: 21, offset: 16712},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 515, col: 28, offset: 16719},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 515, col: 28, offset: 16719},
																							run: (*parser).callonSingleQuoteMonospaceTextElement56,
																							expr: &charClassMatcher{
																								pos:        position{line: 515, col: 28, offset: 16719},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 517, col: 9, offset: 16773},
																							run: (*parser).callonSingleQuoteMonospaceTextElement58,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 517, col: 9, offset: 16773},
																								expr: &charClassMatcher{
																									pos:        position{line: 517, col: 9, offset: 16773},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 507, col: 78, offset: 16461},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 511, col: 25, offset: 16563},
												run: (*parser).callonSingleQuoteMonospaceTextElement62,
												expr: &seqExpr{
													pos: position{line: 511, col: 25, offset: 16563},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 511, col: 25, offset: 16563},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 511, col: 38, offset: 16576},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 162, col: 18, offset: 4814},
																run: (*parser).callonSingleQuoteMonospaceTextElement66,
																expr: &seqExpr{
																	pos: position{line: 162, col: 18, offset: 4814},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 162, col: 18, offset: 4814},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 162, col: 28, offset: 4824},
																			expr: &charClassMatcher{
																				pos:        position{line: 162, col: 29, offset: 4825},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 511, col: 57, offset: 16595},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 511, col: 63, offset: 16601},
																expr: &actionExpr{
																	pos: position{line: 515, col: 17, offset: 16708},
																	run: (*parser).callonSingleQuoteMonospaceTextElement73,
																	expr: &seqExpr{
																		pos: position{line: 515, col: 17, offset: 16708},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 515, col: 17, offset: 16708},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 515, col: 21, offset: 16712},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 515, col: 28, offset: 16719},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 515, col: 28, offset: 16719},
																							run: (*parser).callonSingleQuoteMonospaceTextElement78,
																							expr: &charClassMatcher{
																								pos:        position{line: 515, col: 28, offset: 16719},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 517, col: 9, offset: 16773},
																							run: (*parser).callonSingleQuoteMonospaceTextElement80,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 517, col: 9, offset: 16773},
																								expr: &charClassMatcher{
																									pos:        position{line: 517, col: 9, offset: 16773},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 511, col: 79, offset: 16617},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 500, col: 31, offset: 16063},
												run: (*parser).callonSingleQuoteMonospaceTextElement84,
												expr: &seqExpr{
													pos: position{line: 500, col: 31, offset: 16063},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 500, col: 31, offset: 16063},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 500, col: 35, offset: 16067},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 162, col: 18, offset: 4814},
																run: (*parser).callonSingleQuoteMonospaceTextElement88,
																expr: &seqExpr{
																	pos: position{line: 162, col: 18, offset: 4814},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 162, col: 18, offset: 4814},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 162, col: 28, offset: 4824},
																			expr: &charClassMatcher{
																				pos:        position{line: 162, col: 29, offset: 4825},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 500, col: 54, offset: 16086},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2650, col: 5, offset: 88280},
						run: (*parser).callonSingleQuoteMonospaceTextElement94,
						expr: &seqExpr{
							pos: position{line: 2650, col: 5, offset: 88280},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2650, col: 5, offset: 88280},
									run: (*parser).callonSingleQuoteMonospaceTextElement96,
								},
								&labeledExpr{
									pos:   position{line: 2653, col: 5, offset: 88351},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2655, col: 9, offset: 88449},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2655, col: 9, offset: 88449},
												run: (*parser).callonSingleQuoteMonospaceTextElement99,
												expr: &choiceExpr{
													pos: position{line: 535, col: 27, offset: 17427},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 535, col: 27, offset: 17427},
															run: (*parser).callonSingleQuoteMonospaceTextElement101,
															expr: &seqExpr{
																pos: position{line: 535, col: 27, offset: 17427},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 535, col: 27, offset: 17427},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 535, col: 32, offset: 17432},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2936, col: 7, offset: 97248},
																			run: (*parser).callonSingleQuoteMonospaceTextElement105,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2936, col: 7, offset: 97248},
																				expr: &charClassMatcher{
																					pos:        position{line: 2936, col: 7, offset: 97248},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 535, col: 40, offset: 17440},
																		expr: &actionExpr{
																			pos: position{line: 2948, col: 10, offset: 97526},
																			run: (*parser).callonSingleQuoteMonospaceTextElement109,
																			expr: &charClassMatcher{
																				pos:        position{line: 2948, col: 11, offset: 97527},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 535, col: 47, offset: 17447},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 535, col: 51, offset: 17451},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 545, col: 24, offset: 17864},
																			expr: &choiceExpr{
																				pos: position{line: 546, col: 5, offset: 17870},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 546, col: 6, offset: 17871},
																						run: (*parser).callonSingleQuoteMonospaceTextElement115,
																						expr: &seqExpr{
																							pos: position{line: 546, col: 6, offset: 17871},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 546, col: 6, offset: 17871},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 546, col: 14, offset: 17879},
																									expr: &charClassMatcher{
																										pos:        position{line: 546, col: 14, offset: 17879},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 493, col: 5, offset: 15873},
																						run: (*parser).callonSingleQuoteMonospaceTextElement120,
																						expr: &seqExpr{
																							pos: position{line: 493, col: 5, offset: 15873},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 493, col: 5, offset: 15873},
																									run: (*parser).callonSingleQuoteMonospaceTextElement122,
																								},
																								&labeledExpr{
																									pos:   position{line: 496, col: 5, offset: 15937},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 496, col: 14, offset: 15946},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 507, col: 25, offset: 16408},
																												run: (*parser).callonSingleQuoteMonospaceTextElement125,
																												expr: &seqExpr{
																													pos: position{line: 507, col: 25, offset: 16408},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 507, col: 25, offset: 16408},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 507, col: 37, offset: 16420},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 162, col: 18, offset: 4814},
																																run: (*parser).callonSingleQuoteMonospaceTextElement129,
																																expr: &seqExpr{
																																	pos: position{line: 162, col: 18, offset: 4814},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 162, col: 18, offset: 4814},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 162, col: 28, offset: 4824},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 162, col: 29, offset: 4825},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 507, col: 56, offset: 16439},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 507, col: 62, offset: 16445},
																																expr: &actionExpr{
																																	pos: position{line: 515, col: 17, offset: 16708},
																																	run: (*parser).callonSingleQuoteMonospaceTextElement136,
																																	expr: &seqExpr{
																																		pos: position{line: 515, col: 17, offset: 16708},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 515, col: 17, offset: 16708},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 515, col: 21, offset: 16712},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 515, col: 28, offset: 16719},
																																							run: (*parser).callonSingleQuoteMonospaceTextElement141,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 515, col: 28, offset: 16719},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 517, col: 9, offset: 16773},
																																							run: (*parser).callonSingleQuoteMonospaceTextElement143,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 517, col: 9, offset: 16773},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 517, col: 9, offset: 16773},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 507, col: 78, offset: 16461},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 511, col: 25, offset: 16563},
																												run: (*parser).callonSingleQuoteMonospaceTextElement147,
																												expr: &seqExpr{
																													pos: position{line: 511, col: 25, offset: 16563},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 511, col: 25, offset: 16563},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 511, col: 38, offset: 16576},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 162, col: 18, offset: 4814},
																																run: (*parser).callonSingleQuoteMonospaceTextElement151,
																																expr: &seqExpr{
																																	pos: position{line: 162, col: 18, offset: 4814},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 162, col: 18, offset: 4814},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 162, col: 28, offset: 4824},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 162, col: 29, offset: 4825},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 511, col: 57, offset: 16595},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 511, col: 63, offset: 16601},
																																expr: &actionExpr{
																																	pos: position{line: 515, col: 17, offset: 16708},
																																	run: (*parser).callonSingleQuoteMonospaceTextElement158,
																																	expr: &seqExpr{
																																		pos: position{line: 515, col: 17, offset: 16708},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 515, col: 17, offset: 16708},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 515, col: 21, offset: 16712},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 515, col: 28, offset: 16719},
																																							run: (*parser).callonSingleQuoteMonospaceTextElement163,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 515, col: 28, offset: 16719},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 517, col: 9, offset: 16773},
																																							run: (*parser).callonSingleQuoteMonospaceTextElement165,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 517, col: 9, offset: 16773},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 517, col: 9, offset: 16773},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 511, col: 79, offset: 16617},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 500, col: 31, offset: 16063},
																												run: (*parser).callonSingleQuoteMonospaceTextElement169,
																												expr: &seqExpr{
																													pos: position{line: 500, col: 31, offset: 16063},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 500, col: 31, offset: 16063},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 500, col: 35, offset: 16067},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 162, col: 18, offset: 4814},
																																run: (*parser).callonSingleQuoteMonospaceTextElement173,
																																expr: &seqExpr{
																																	pos: position{line: 162, col: 18, offset: 4814},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 162, col: 18, offset: 4814},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 162, col: 28, offset: 4824},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 162, col: 29, offset: 4825},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 500, col: 54, offset: 16086},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 550, col: 8, offset: 18103},
																						run: (*parser).callonSingleQuoteMonospaceTextElement179,
																						expr: &litMatcher{
																							pos:        position{line: 550, col: 8, offset: 18103},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 535, col: 79, offset: 17479},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 537, col: 9, offset: 17552},
															run: (*parser).callonSingleQuoteMonospaceTextElement182,
															expr: &seqExpr{
																pos: position{line: 537, col: 9, offset: 17552},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 537, col: 9, offset: 17552},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 537, col: 14, offset: 17557},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2936, col: 7, offset: 97248},
																			run: (*parser).callonSingleQuoteMonospaceTextElement186,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2936, col: 7, offset: 97248},
																				expr: &charClassMatcher{
																					pos:        position{line: 2936, col: 7, offset: 97248},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 537, col: 22, offset: 17565},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2658, col: 11, offset: 88553},
												run: (*parser).callonSingleQuoteMonospaceTextElement190,
												expr: &charClassMatcher{
													pos:        position{line: 2658, col: 12, offset: 88554},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2683, col: 15, offset: 89521},
						run: (*parser).callonSingleQuoteMonospaceTextElement192,
						expr: &litMatcher{
							pos:        position{line: 2683, col: 15, offset: 89521},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2689, col: 14, offset: 89636},
						run: (*parser).callonSingleQuoteMonospaceTextElement194,
						expr: &litMatcher{
							pos:        position{line: 2689, col: 14, offset: 89636},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2693, col: 14, offset: 89712},
						run: (*parser).callonSingleQuoteMonospaceTextElement196,
						expr: &litMatcher{
							pos:        position{line: 2693, col: 14, offset: 89712},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2697, col: 15, offset: 89790},
						run: (*parser).callonSingleQuoteMonospaceTextElement198,
						expr: &litMatcher{
							pos:        position{line: 2697, col: 15, offset: 89790},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2701, col: 13, offset: 89865},
						run: (*parser).callonSingleQuoteMonospaceTextElement200,
						expr: &litMatcher{
							pos:        position{line: 2701, col: 13, offset: 89865},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2709, col: 22, offset: 90171},
						run: (*parser).callonSingleQuoteMonospaceTextElement202,
						expr: &seqExpr{
							pos: position{line: 2709, col: 22, offset: 90171},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2860, col: 13, offset: 94811},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2709, col: 31, offset: 90180},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2709, col: 35, offset: 90184},
									expr: &charClassMatcher{
										pos:        position{line: 2709, col: 36, offset: 90185},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2087, col: 7, offset: 69801},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 2088, col: 7, offset: 69819},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2089, col: 7, offset: 69838},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&litMatcher{
						pos:        position{line: 2687, col: 18, offset: 89600},
						val:        "`'",
						ignoreCase: false,
						want:       "\"`'\"",
					},
					&actionExpr{
						pos: position{line: 991, col: 23, offset: 31326},
						run: (*parser).callonSingleQuoteMonospaceTextElement212,
						expr: &seqExpr{
							pos: position{line: 991, col: 23, offset: 31326},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 989, col: 32, offset: 31294},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 991, col: 51, offset: 31354},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 991, col: 56, offset: 31359},
										run: (*parser).callonSingleQuoteMonospaceTextElement216,
										expr: &oneOrMoreExpr{
											pos: position{line: 991, col: 56, offset: 31359},
											expr: &charClassMatcher{
												pos:        position{line: 991, col: 56, offset: 31359},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 989, col: 32, offset: 31294},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2107, col: 5, offset: 70337},
						run: (*parser).callonSingleQuoteMonospaceTextElement220,
						expr: &choiceExpr{
							pos: position{line: 2107, col: 6, offset: 70338},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2107, col: 6, offset: 70338},
									val:        "[^\\r\\n` ]",
									chars:      []rune{'\r', '\n', '`', ' '},
									ignoreCase: false,
									inverted:   true,
								},
								&seqExpr{
									pos: position{line: 2108, col: 7, offset: 70450},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1998, col: 27, offset: 66876},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&actionExpr{
											pos: position{line: 2864, col: 14, offset: 94885},
											run: (*parser).callonSingleQuoteMonospaceTextElement225,
											expr: &oneOrMoreExpr{
												pos: position{line: 2864, col: 14, offset: 94885},
												expr: &charClassMatcher{
													pos:        position{line: 2864, col: 14, offset: 94885},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 2094, col: 1, offset: 69969},
			expr: &actionExpr{
				pos: position{line: 2095, col: 5, offset: 70013},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2095, col: 5, offset: 70013},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2095, col: 5, offset: 70013},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2095, col: 16, offset: 70024},
								expr: &ruleRefExpr{
									pos:  position{line: 2095, col: 17, offset: 70025},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2096, col: 5, offset: 70051},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2097, col: 9, offset: 70066},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2097, col: 9, offset: 70066},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2098, col: 11, offset: 70101},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2099, col: 11, offset: 70120},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2100, col: 11, offset: 70141},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2101, col: 11, offset: 70162},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2102, col: 11, offset: 70186},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 2112, col: 1, offset: 70651},
			expr: &choiceExpr{
				pos: position{line: 2113, col: 5, offset: 70680},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2113, col: 5, offset: 70680},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 2113, col: 5, offset: 70680},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2113, col: 5, offset: 70680},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1741, col: 25, offset: 57712},
										run: (*parser).callonEscapedMonospaceText5,
										expr: &seqExpr{
											pos: position{line: 1741, col: 25, offset: 57712},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1741, col: 25, offset: 57712},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1741, col: 30, offset: 57717},
													expr: &litMatcher{
														pos:        position{line: 1741, col: 30, offset: 57717},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2113, col: 40, offset: 70715},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2113, col: 45, offset: 70720},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2113, col: 55, offset: 70730},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2113, col: 89, offset: 70764},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2115, col: 9, offset: 70921},
						run: (*parser).callonEscapedMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 2115, col: 9, offset: 70921},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2115, col: 9, offset: 70921},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1737, col: 25, offset: 57639},
										run: (*parser).callonEscapedMonospaceText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1737, col: 25, offset: 57639},
											expr: &litMatcher{
												pos:        position{line: 1737, col: 25, offset: 57639},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2115, col: 44, offset: 70956},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2115, col: 49, offset: 70961},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2115, col: 59, offset: 70971},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2115, col: 93, offset: 71005},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2118, col: 9, offset: 71205},
						run: (*parser).callonEscapedMonospaceText24,
						expr: &seqExpr{
							pos: position{line: 2118, col: 9, offset: 71205},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2118, col: 9, offset: 71205},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1737, col: 25, offset: 57639},
										run: (*parser).callonEscapedMonospaceText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1737, col: 25, offset: 57639},
											expr: &litMatcher{
												pos:        position{line: 1737, col: 25, offset: 57639},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2118, col: 44, offset: 71240},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 2118, col: 48, offset: 71244},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2118, col: 58, offset: 71254},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2118, col: 92, offset: 71288},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 2125, col: 1, offset: 71585},
			expr: &choiceExpr{
				pos: position{line: 2125, col: 15, offset: 71599},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2125, col: 15, offset: 71599},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 2125, col: 39, offset: 71623},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 2139, col: 1, offset: 71961},
			expr: &actionExpr{
				pos: position{line: 2140, col: 5, offset: 71991},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2140, col: 5, offset: 71991},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2137, col: 35, offset: 71955},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 2141, col: 5, offset: 72027},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2141, col: 15, offset: 72037},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2137, col: 35, offset: 71955},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 2146, col: 1, offset: 72200},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2146, col: 34, offset: 72233},
				expr: &ruleRefExpr{
					pos:  position{line: 2146, col: 34, offset: 72233},
					name: "DoubleQuoteMarkedTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 2148, col: 1, offset: 72264},
			expr: &actionExpr{
				pos: position{line: 2149, col: 5, offset: 72333},
				run: (*parser).callonDoubleQuoteMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 2149, col: 5, offset: 72333},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2149, col: 5, offset: 72333},
							expr: &litMatcher{
								pos:        position{line: 2137, col: 35, offset: 71955},
								val:        "##",
								ignoreCase: false,
								want:       "\"##\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2150, col: 5, offset: 72369},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2151, col: 9, offset: 72387},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2130, col: 5, offset: 71697},
										run: (*parser).callonDoubleQuoteMarkedTextElement7,
										expr: &seqExpr{
											pos: position{line: 2130, col: 5, offset: 71697},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2130, col: 5, offset: 71697},
													expr: &charClassMatcher{
														pos:        position{line: 2130, col: 5, offset: 71697},
														val:        "[,?!;0-9\\pL]",
														chars:      []rune{',', '?', '!', ';'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2130, col: 19, offset: 71711},
													expr: &choiceExpr{
														pos: position{line: 2130, col: 21, offset: 71713},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2948, col: 10, offset: 97526},
																run: (*parser).callonDoubleQuoteMarkedTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 2948, col: 11, offset: 97527},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2127, col: 24, offset: 71669},
																val:        "#",
																ignoreCase: false,
																want:       "\"#\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2953, col: 11, offset: 97635},
										run: (*parser).callonDoubleQuoteMarkedTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 2953, col: 11, offset: 97635},
											expr: &charClassMatcher{
												pos:        position{line: 2953, col: 12, offset: 97636},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 2153, col: 11, offset: 72462},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2958, col: 12, offset: 97749},
												run: (*parser).callonDoubleQuoteMarkedTextElement20,
												expr: &choiceExpr{
													pos: position{line: 2958, col: 13, offset: 97750},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2958, col: 13, offset: 97750},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2958, col: 20, offset: 97757},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2958, col: 29, offset: 97766},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2153, col: 19, offset: 72470},
												expr: &actionExpr{
													pos: position{line: 2958, col: 12, offset: 97749},
													run: (*parser).callonDoubleQuoteMarkedTextElement26,
													expr: &choiceExpr{
														pos: position{line: 2958, col: 13, offset: 97750},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2958, col: 13, offset: 97750},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 20, offset: 97757},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 29, offset: 97766},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 493, col: 5, offset: 15873},
										run: (*parser).callonDoubleQuoteMarkedTextElement31,
										expr: &seqExpr{
											pos: position{line: 493, col: 5, offset: 15873},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 493, col: 5, offset: 15873},
													run: (*parser).callonDoubleQuoteMarkedTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 496, col: 5, offset: 15937},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 496, col: 14, offset: 15946},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 507, col: 25, offset: 16408},
																run: (*parser).callonDoubleQuoteMarkedTextElement36,
																expr: &seqExpr{
																	pos: position{line: 507, col: 25, offset: 16408},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 507, col: 25, offset: 16408},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 507, col: 37, offset: 16420},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonDoubleQuoteMarkedTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 507, col: 56, offset: 16439},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 507, col: 62, offset: 16445},
																				expr: &actionExpr{
																					pos: position{line: 515, col: 17, offset: 16708},
																					run: (*parser).callonDoubleQuoteMarkedTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 515, col: 17, offset: 16708},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 515, col: 21, offset: 16712},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 515, col: 28, offset: 16719},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 515, col: 28, offset: 16719},
																											run: (*parser).callonDoubleQuoteMarkedTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 515, col: 28, offset: 16719},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 517, col: 9, offset: 16773},
																											run: (*parser).callonDoubleQuoteMarkedTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												expr: &charClassMatcher{
																													pos:        position{line: 517, col: 9, offset: 16773},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 507, col: 78, offset: 16461},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 511, col: 25, offset: 16563},
																run: (*parser).callonDoubleQuoteMarkedTextElement58,
																expr: &seqExpr{
																	pos: position{line: 511, col: 25, offset: 16563},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 511, col: 25, offset: 16563},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 511, col: 38, offset: 16576},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonDoubleQuoteMarkedTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 511, col: 57, offset: 16595},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 511, col: 63, offset: 16601},
																				expr: &actionExpr{
																					pos: position{line: 515, col: 17, offset: 16708},
																					run: (*parser).callonDoubleQuoteMarkedTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 515, col: 17, offset: 16708},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 515, col: 21, offset: 16712},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 515, col: 28, offset: 16719},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 515, col: 28, offset: 16719},
																											run: (*parser).callonDoubleQuoteMarkedTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 515, col: 28, offset: 16719},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 517, col: 9, offset: 16773},
																											run: (*parser).callonDoubleQuoteMarkedTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												expr: &charClassMatcher{
																													pos:        position{line: 517, col: 9, offset: 16773},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 511, col: 79, offset: 16617},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 500, col: 31, offset: 16063},
																run: (*parser).callonDoubleQuoteMarkedTextElement80,
																expr: &seqExpr{
																	pos: position{line: 500, col: 31, offset: 16063},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 500, col: 31, offset: 16063},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 500, col: 35, offset: 16067},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonDoubleQuoteMarkedTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 500, col: 54, offset: 16086},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2650, col: 5, offset: 88280},
										run: (*parser).callonDoubleQuoteMarkedTextElement90,
										expr: &seqExpr{
											pos: position{line: 2650, col: 5, offset: 88280},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2650, col: 5, offset: 88280},
													run: (*parser).callonDoubleQuoteMarkedTextElement92,
												},
												&labeledExpr{
													pos:   position{line: 2653, col: 5, offset: 88351},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2655, col: 9, offset: 88449},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2655, col: 9, offset: 88449},
																run: (*parser).callonDoubleQuoteMarkedTextElement95,
																expr: &choiceExpr{
																	pos: position{line: 535, col: 27, offset: 17427},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 535, col: 27, offset: 17427},
																			run: (*parser).callonDoubleQuoteMarkedTextElement97,
																			expr: &seqExpr{
																				pos: position{line: 535, col: 27, offset: 17427},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 535, col: 27, offset: 17427},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 535, col: 32, offset: 17432},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2936, col: 7, offset: 97248},
																							run: (*parser).callonDoubleQuoteMarkedTextElement101,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								expr: &charClassMatcher{
																									pos:        position{line: 2936, col: 7, offset: 97248},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 535, col: 40, offset: 17440},
																						expr: &actionExpr{
																							pos: position{line: 2948, col: 10, offset: 97526},
																							run: (*parser).callonDoubleQuoteMarkedTextElement105,
																							expr: &charClassMatcher{
																								pos:        position{line: 2948, col: 11, offset: 97527},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 535, col: 47, offset: 17447},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 535, col: 51, offset: 17451},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 545, col: 24, offset: 17864},
																							expr: &choiceExpr{
																								pos: position{line: 546, col: 5, offset: 17870},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 546, col: 6, offset: 17871},
																										run: (*parser).callonDoubleQuoteMarkedTextElement111,
																										expr: &seqExpr{
																											pos: position{line: 546, col: 6, offset: 17871},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 546, col: 6, offset: 17871},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 546, col: 14, offset: 17879},
																													expr: &charClassMatcher{
																														pos:        position{line: 546, col: 14, offset: 17879},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 493, col: 5, offset: 15873},
																										run: (*parser).callonDoubleQuoteMarkedTextElement116,
																										expr: &seqExpr{
																											pos: position{line: 493, col: 5, offset: 15873},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 493, col: 5, offset: 15873},
																													run: (*parser).callonDoubleQuoteMarkedTextElement118,
																												},
																												&labeledExpr{
																													pos:   position{line: 496, col: 5, offset: 15937},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 496, col: 14, offset: 15946},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 507, col: 25, offset: 16408},
																																run: (*parser).callonDoubleQuoteMarkedTextElement121,
																																expr: &seqExpr{
																																	pos: position{line: 507, col: 25, offset: 16408},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 507, col: 25, offset: 16408},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 37, offset: 16420},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonDoubleQuoteMarkedTextElement125,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 56, offset: 16439},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 507, col: 62, offset: 16445},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonDoubleQuoteMarkedTextElement132,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonDoubleQuoteMarkedTextElement137,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonDoubleQuoteMarkedTextElement139,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 507, col: 78, offset: 16461},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 511, col: 25, offset: 16563},
																																run: (*parser).callonDoubleQuoteMarkedTextElement143,
																																expr: &seqExpr{
																																	pos: position{line: 511, col: 25, offset: 16563},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 511, col: 25, offset: 16563},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 38, offset: 16576},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonDoubleQuoteMarkedTextElement147,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 57, offset: 16595},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 511, col: 63, offset: 16601},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonDoubleQuoteMarkedTextElement154,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonDoubleQuoteMarkedTextElement159,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonDoubleQuoteMarkedTextElement161,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 511, col: 79, offset: 16617},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 500, col: 31, offset: 16063},
																																run: (*parser).callonDoubleQuoteMarkedTextElement165,
																																expr: &seqExpr{
																																	pos: position{line: 500, col: 31, offset: 16063},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 500, col: 31, offset: 16063},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 500, col: 35, offset: 16067},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonDoubleQuoteMarkedTextElement169,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 500, col: 54, offset: 16086},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 550, col: 8, offset: 18103},
																										run: (*parser).callonDoubleQuoteMarkedTextElement175,
																										expr: &litMatcher{
																											pos:        position{line: 550, col: 8, offset: 18103},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 535, col: 79, offset: 17479},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 537, col: 9, offset: 17552},
																			run: (*parser).callonDoubleQuoteMarkedTextElement178,
																			expr: &seqExpr{
																				pos: position{line: 537, col: 9, offset: 17552},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 537, col: 9, offset: 17552},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 537, col: 14, offset: 17557},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2936, col: 7, offset: 97248},
																							run: (*parser).callonDoubleQuoteMarkedTextElement182,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								expr: &charClassMatcher{
																									pos:        position{line: 2936, col: 7, offset: 97248},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 537, col: 22, offset: 17565},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2658, col: 11, offset: 88553},
																run: (*parser).callonDoubleQuoteMarkedTextElement186,
																expr: &charClassMatcher{
																	pos:        position{line: 2658, col: 12, offset: 88554},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2683, col: 15, offset: 89521},
										run: (*parser).callonDoubleQuoteMarkedTextElement188,
										expr: &litMatcher{
											pos:        position{line: 2683, col: 15, offset: 89521},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2689, col: 14, offset: 89636},
										run: (*parser).callonDoubleQuoteMarkedTextElement190,
										expr: &litMatcher{
											pos:        position{line: 2689, col: 14, offset: 89636},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2693, col: 14, offset: 89712},
										run: (*parser).callonDoubleQuoteMarkedTextElement192,
										expr: &litMatcher{
											pos:        position{line: 2693, col: 14, offset: 89712},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2697, col: 15, offset: 89790},
										run: (*parser).callonDoubleQuoteMarkedTextElement194,
										expr: &litMatcher{
											pos:        position{line: 2697, col: 15, offset: 89790},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2701, col: 13, offset: 89865},
										run: (*parser).callonDoubleQuoteMarkedTextElement196,
										expr: &litMatcher{
											pos:        position{line: 2701, col: 13, offset: 89865},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2709, col: 22, offset: 90171},
										run: (*parser).callonDoubleQuoteMarkedTextElement198,
										expr: &seqExpr{
											pos: position{line: 2709, col: 22, offset: 90171},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2860, col: 13, offset: 94811},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2709, col: 31, offset: 90180},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2709, col: 35, offset: 90184},
													expr: &charClassMatcher{
														pos:        position{line: 2709, col: 36, offset: 90185},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2157, col: 11, offset: 72599},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 2158, col: 11, offset: 72621},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2159, col: 11, offset: 72644},
										name: "QuotedTextInDoubleMarkedBoldText",
									},
									&actionExpr{
										pos: position{line: 991, col: 23, offset: 31326},
										run: (*parser).callonDoubleQuoteMarkedTextElement207,
										expr: &seqExpr{
											pos: position{line: 991, col: 23, offset: 31326},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 989, col: 32, offset: 31294},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 991, col: 51, offset: 31354},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 991, col: 56, offset: 31359},
														run: (*parser).callonDoubleQuoteMarkedTextElement211,
														expr: &oneOrMoreExpr{
															pos: position{line: 991, col: 56, offset: 31359},
															expr: &charClassMatcher{
																pos:        position{line: 991, col: 56, offset: 31359},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 989, col: 32, offset: 31294},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 2179, col: 5, offset: 73159},
										val:        "[^\\r\\n#]",
										chars:      []rune{'\r', '\n', '#'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 2180, col: 7, offset: 73258},
										run: (*parser).callonDoubleQuoteMarkedTextElement216,
										expr: &seqExpr{
											pos: position{line: 2180, col: 7, offset: 73258},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2137, col: 35, offset: 71955},
													val:        "##",
													ignoreCase: false,
													want:       "\"##\"",
												},
												&actionExpr{
													pos: position{line: 2864, col: 14, offset: 94885},
													run: (*parser).callonDoubleQuoteMarkedTextElement219,
													expr: &oneOrMoreExpr{
														pos: position{line: 2864, col: 14, offset: 94885},
														expr: &charClassMatcher{
															pos:        position{line: 2864, col: 14, offset: 94885},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleMarkedBoldText",
			pos:  position{line: 2166, col: 1, offset: 72798},
			expr: &actionExpr{
				pos: position{line: 2167, col: 5, offset: 72838},
				run: (*parser).callonQuotedTextInDoubleMarkedBoldText1,
				expr: &seqExpr{
					pos: position{line: 2167, col: 5, offset: 72838},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2167, col: 5, offset: 72838},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2167, col: 16, offset: 72849},
								expr: &ruleRefExpr{
									pos:  position{line: 2167, col: 17, offset: 72850},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2168, col: 5, offset: 72876},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2169, col: 9, offset: 72891},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2169, col: 9, offset: 72891},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2170, col: 11, offset: 72923},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2171, col: 11, offset: 72942},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2172, col: 11, offset: 72963},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2173, col: 11, offset: 72987},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2174, col: 11, offset: 73011},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 2191, col: 1, offset: 73665},
			expr: &actionExpr{
				pos: position{line: 2192, col: 5, offset: 73695},
				run: (*parser).callonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2192, col: 5, offset: 73695},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2187, col: 40, offset: 73617},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 2193, col: 5, offset: 73735},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2193, col: 15, offset: 73745},
								name: "SingleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2189, col: 38, offset: 73659},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 2198, col: 1, offset: 73912},
			expr: &actionExpr{
				pos: position{line: 2199, col: 5, offset: 73950},
				run: (*parser).callonSingleQuoteMarkedTextElements1,
				expr: &seqExpr{
					pos: position{line: 2199, col: 5, offset: 73950},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2199, col: 5, offset: 73950},
							expr: &notExpr{
								pos: position{line: 2962, col: 8, offset: 97839},
								expr: &anyMatcher{
									line: 2962, col: 9, offset: 97840,
								},
							},
						},
						&notExpr{
							pos: position{line: 2199, col: 10, offset: 73955},
							expr: &actionExpr{
								pos: position{line: 2948, col: 10, offset: 97526},
								run: (*parser).callonSingleQuoteMarkedTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 2948, col: 11, offset: 97527},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2200, col: 5, offset: 73994},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2200, col: 14, offset: 74003},
								expr: &ruleRefExpr{
									pos:  position{line: 2200, col: 15, offset: 74004},
									name: "SingleQuoteMarkedTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2201, col: 5, offset: 74040},
							run: (*parser).callonSingleQuoteMarkedTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 2207, col: 1, offset: 74181},
			expr: &choiceExpr{
				pos: position{line: 2208, col: 5, offset: 74218},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2130, col: 5, offset: 71697},
						run: (*parser).callonSingleQuoteMarkedTextElement2,
						expr: &seqExpr{
							pos: position{line: 2130, col: 5, offset: 71697},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2130, col: 5, offset: 71697},
									expr: &charClassMatcher{
										pos:        position{line: 2130, col: 5, offset: 71697},
										val:        "[,?!;0-9\\pL]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2130, col: 19, offset: 71711},
									expr: &choiceExpr{
										pos: position{line: 2130, col: 21, offset: 71713},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2948, col: 10, offset: 97526},
												run: (*parser).callonSingleQuoteMarkedTextElement8,
												expr: &charClassMatcher{
													pos:        position{line: 2948, col: 11, offset: 97527},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 2127, col: 24, offset: 71669},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2953, col: 11, offset: 97635},
						run: (*parser).callonSingleQuoteMarkedTextElement11,
						expr: &oneOrMoreExpr{
							pos: position{line: 2953, col: 11, offset: 97635},
							expr: &charClassMatcher{
								pos:        position{line: 2953, col: 12, offset: 97636},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 2210, col: 7, offset: 74252},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 2958, col: 12, offset: 97749},
								run: (*parser).callonSingleQuoteMarkedTextElement15,
								expr: &choiceExpr{
									pos: position{line: 2958, col: 13, offset: 97750},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2958, col: 13, offset: 97750},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2958, col: 20, offset: 97757},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2958, col: 29, offset: 97766},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 2210, col: 15, offset: 74260},
								expr: &actionExpr{
									pos: position{line: 2958, col: 12, offset: 97749},
									run: (*parser).callonSingleQuoteMarkedTextElement21,
									expr: &choiceExpr{
										pos: position{line: 2958, col: 13, offset: 97750},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2958, col: 13, offset: 97750},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 20, offset: 97757},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 29, offset: 97766},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 493, col: 5, offset: 15873},
						run: (*parser).callonSingleQuoteMarkedTextElement26,
						expr: &seqExpr{
							pos: position{line: 493, col: 5, offset: 15873},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 493, col: 5, offset: 15873},
									run: (*parser).callonSingleQuoteMarkedTextElement28,
								},
								&labeledExpr{
									pos:   position{line: 496, col: 5, offset: 15937},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 496, col: 14, offset: 15946},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 507, col: 25, offset: 16408},
												run: (*parser).callonSingleQuoteMarkedTextElement31,
												expr: &seqExpr{
													pos: position{line: 507, col: 25, offset: 16408},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 507, col: 25, offset: 16408},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 507, col: 37, offset: 16420},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 162, col: 18, offset: 4814},
																run: (*parser).callonSingleQuoteMarkedTextElement35,
																expr: &seqExpr{
																	pos: position{line: 162, col: 18, offset: 4814},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 162, col: 18, offset: 4814},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 162, col: 28, offset: 4824},
																			expr: &charClassMatcher{
																				pos:        position{line: 162, col: 29, offset: 4825},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 507, col: 56, offset: 16439},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 507, col: 62, offset: 16445},
																expr: &actionExpr{
																	pos: position{line: 515, col: 17, offset: 16708},
																	run: (*parser).callonSingleQuoteMarkedTextElement42,
																	expr: &seqExpr{
																		pos: position{line: 515, col: 17, offset: 16708},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 515, col: 17, offset: 16708},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 515, col: 21, offset: 16712},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 515, col: 28, offset: 16719},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 515, col: 28, offset: 16719},
																							run: (*parser).callonSingleQuoteMarkedTextElement47,
																							expr: &charClassMatcher{
																								pos:        position{line: 515, col: 28, offset: 16719},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 517, col: 9, offset: 16773},
																							run: (*parser).callonSingleQuoteMarkedTextElement49,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 517, col: 9, offset: 16773},
																								expr: &charClassMatcher{
																									pos:        position{line: 517, col: 9, offset: 16773},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 507, col: 78, offset: 16461},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 511, col: 25, offset: 16563},
												run: (*parser).callonSingleQuoteMarkedTextElement53,
												expr: &seqExpr{
													pos: position{line: 511, col: 25, offset: 16563},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 511, col: 25, offset: 16563},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 511, col: 38, offset: 16576},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 162, col: 18, offset: 4814},
																run: (*parser).callonSingleQuoteMarkedTextElement57,
																expr: &seqExpr{
																	pos: position{line: 162, col: 18, offset: 4814},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 162, col: 18, offset: 4814},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 162, col: 28, offset: 4824},
																			expr: &charClassMatcher{
																				pos:        position{line: 162, col: 29, offset: 4825},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 511, col: 57, offset: 16595},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 511, col: 63, offset: 16601},
																expr: &actionExpr{
																	pos: position{line: 515, col: 17, offset: 16708},
																	run: (*parser).callonSingleQuoteMarkedTextElement64,
																	expr: &seqExpr{
																		pos: position{line: 515, col: 17, offset: 16708},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 515, col: 17, offset: 16708},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 515, col: 21, offset: 16712},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 515, col: 28, offset: 16719},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 515, col: 28, offset: 16719},
																							run: (*parser).callonSingleQuoteMarkedTextElement69,
																							expr: &charClassMatcher{
																								pos:        position{line: 515, col: 28, offset: 16719},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 517, col: 9, offset: 16773},
																							run: (*parser).callonSingleQuoteMarkedTextElement71,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 517, col: 9, offset: 16773},
																								expr: &charClassMatcher{
																									pos:        position{line: 517, col: 9, offset: 16773},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 511, col: 79, offset: 16617},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 500, col: 31, offset: 16063},
												run: (*parser).callonSingleQuoteMarkedTextElement75,
												expr: &seqExpr{
													pos: position{line: 500, col: 31, offset: 16063},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 500, col: 31, offset: 16063},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 500, col: 35, offset: 16067},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 162, col: 18, offset: 4814},
																run: (*parser).callonSingleQuoteMarkedTextElement79,
																expr: &seqExpr{
																	pos: position{line: 162, col: 18, offset: 4814},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 162, col: 18, offset: 4814},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 162, col: 28, offset: 4824},
																			expr: &charClassMatcher{
																				pos:        position{line: 162, col: 29, offset: 4825},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 500, col: 54, offset: 16086},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2650, col: 5, offset: 88280},
						run: (*parser).callonSingleQuoteMarkedTextElement85,
						expr: &seqExpr{
							pos: position{line: 2650, col: 5, offset: 88280},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2650, col: 5, offset: 88280},
									run: (*parser).callonSingleQuoteMarkedTextElement87,
								},
								&labeledExpr{
									pos:   position{line: 2653, col: 5, offset: 88351},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2655, col: 9, offset: 88449},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2655, col: 9, offset: 88449},
												run: (*parser).callonSingleQuoteMarkedTextElement90,
												expr: &choiceExpr{
													pos: position{line: 535, col: 27, offset: 17427},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 535, col: 27, offset: 17427},
															run: (*parser).callonSingleQuoteMarkedTextElement92,
															expr: &seqExpr{
																pos: position{line: 535, col: 27, offset: 17427},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 535, col: 27, offset: 17427},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 535, col: 32, offset: 17432},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2936, col: 7, offset: 97248},
																			run: (*parser).callonSingleQuoteMarkedTextElement96,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2936, col: 7, offset: 97248},
																				expr: &charClassMatcher{
																					pos:        position{line: 2936, col: 7, offset: 97248},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 535, col: 40, offset: 17440},
																		expr: &actionExpr{
																			pos: position{line: 2948, col: 10, offset: 97526},
																			run: (*parser).callonSingleQuoteMarkedTextElement100,
																			expr: &charClassMatcher{
																				pos:        position{line: 2948, col: 11, offset: 97527},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 535, col: 47, offset: 17447},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 535, col: 51, offset: 17451},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 545, col: 24, offset: 17864},
																			expr: &choiceExpr{
																				pos: position{line: 546, col: 5, offset: 17870},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 546, col: 6, offset: 17871},
																						run: (*parser).callonSingleQuoteMarkedTextElement106,
																						expr: &seqExpr{
																							pos: position{line: 546, col: 6, offset: 17871},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 546, col: 6, offset: 17871},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 546, col: 14, offset: 17879},
																									expr: &charClassMatcher{
																										pos:        position{line: 546, col: 14, offset: 17879},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 493, col: 5, offset: 15873},
																						run: (*parser).callonSingleQuoteMarkedTextElement111,
																						expr: &seqExpr{
																							pos: position{line: 493, col: 5, offset: 15873},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 493, col: 5, offset: 15873},
																									run: (*parser).callonSingleQuoteMarkedTextElement113,
																								},
																								&labeledExpr{
																									pos:   position{line: 496, col: 5, offset: 15937},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 496, col: 14, offset: 15946},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 507, col: 25, offset: 16408},
																												run: (*parser).callonSingleQuoteMarkedTextElement116,
																												expr: &seqExpr{
																													pos: position{line: 507, col: 25, offset: 16408},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 507, col: 25, offset: 16408},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 507, col: 37, offset: 16420},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 162, col: 18, offset: 4814},
																																run: (*parser).callonSingleQuoteMarkedTextElement120,
																																expr: &seqExpr{
																																	pos: position{line: 162, col: 18, offset: 4814},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 162, col: 18, offset: 4814},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 162, col: 28, offset: 4824},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 162, col: 29, offset: 4825},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 507, col: 56, offset: 16439},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 507, col: 62, offset: 16445},
																																expr: &actionExpr{
																																	pos: position{line: 515, col: 17, offset: 16708},
																																	run: (*parser).callonSingleQuoteMarkedTextElement127,
																																	expr: &seqExpr{
																																		pos: position{line: 515, col: 17, offset: 16708},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 515, col: 17, offset: 16708},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 515, col: 21, offset: 16712},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 515, col: 28, offset: 16719},
																																							run: (*parser).callonSingleQuoteMarkedTextElement132,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 515, col: 28, offset: 16719},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 517, col: 9, offset: 16773},
																																							run: (*parser).callonSingleQuoteMarkedTextElement134,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 517, col: 9, offset: 16773},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 517, col: 9, offset: 16773},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 507, col: 78, offset: 16461},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 511, col: 25, offset: 16563},
																												run: (*parser).callonSingleQuoteMarkedTextElement138,
																												expr: &seqExpr{
																													pos: position{line: 511, col: 25, offset: 16563},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 511, col: 25, offset: 16563},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 511, col: 38, offset: 16576},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 162, col: 18, offset: 4814},
																																run: (*parser).callonSingleQuoteMarkedTextElement142,
																																expr: &seqExpr{
																																	pos: position{line: 162, col: 18, offset: 4814},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 162, col: 18, offset: 4814},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 162, col: 28, offset: 4824},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 162, col: 29, offset: 4825},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 511, col: 57, offset: 16595},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 511, col: 63, offset: 16601},
																																expr: &actionExpr{
																																	pos: position{line: 515, col: 17, offset: 16708},
																																	run: (*parser).callonSingleQuoteMarkedTextElement149,
																																	expr: &seqExpr{
																																		pos: position{line: 515, col: 17, offset: 16708},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 515, col: 17, offset: 16708},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 515, col: 21, offset: 16712},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 515, col: 28, offset: 16719},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 515, col: 28, offset: 16719},
																																							run: (*parser).callonSingleQuoteMarkedTextElement154,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 515, col: 28, offset: 16719},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 517, col: 9, offset: 16773},
																																							run: (*parser).callonSingleQuoteMarkedTextElement156,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 517, col: 9, offset: 16773},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 517, col: 9, offset: 16773},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 511, col: 79, offset: 16617},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 500, col: 31, offset: 16063},
																												run: (*parser).callonSingleQuoteMarkedTextElement160,
																												expr: &seqExpr{
																													pos: position{line: 500, col: 31, offset: 16063},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 500, col: 31, offset: 16063},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 500, col: 35, offset: 16067},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 162, col: 18, offset: 4814},
																																run: (*parser).callonSingleQuoteMarkedTextElement164,
																																expr: &seqExpr{
																																	pos: position{line: 162, col: 18, offset: 4814},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 162, col: 18, offset: 4814},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 162, col: 28, offset: 4824},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 162, col: 29, offset: 4825},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 500, col: 54, offset: 16086},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 550, col: 8, offset: 18103},
																						run: (*parser).callonSingleQuoteMarkedTextElement170,
																						expr: &litMatcher{
																							pos:        position{line: 550, col: 8, offset: 18103},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 535, col: 79, offset: 17479},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 537, col: 9, offset: 17552},
															run: (*parser).callonSingleQuoteMarkedTextElement173,
															expr: &seqExpr{
																pos: position{line: 537, col: 9, offset: 17552},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 537, col: 9, offset: 17552},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 537, col: 14, offset: 17557},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2936, col: 7, offset: 97248},
																			run: (*parser).callonSingleQuoteMarkedTextElement177,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2936, col: 7, offset: 97248},
																				expr: &charClassMatcher{
																					pos:        position{line: 2936, col: 7, offset: 97248},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 537, col: 22, offset: 17565},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2658, col: 11, offset: 88553},
												run: (*parser).callonSingleQuoteMarkedTextElement181,
												expr: &charClassMatcher{
													pos:        position{line: 2658, col: 12, offset: 88554},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2683, col: 15, offset: 89521},
						run: (*parser).callonSingleQuoteMarkedTextElement183,
						expr: &litMatcher{
							pos:        position{line: 2683, col: 15, offset: 89521},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2689, col: 14, offset: 89636},
						run: (*parser).callonSingleQuoteMarkedTextElement185,
						expr: &litMatcher{
							pos:        position{line: 2689, col: 14, offset: 89636},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2693, col: 14, offset: 89712},
						run: (*parser).callonSingleQuoteMarkedTextElement187,
						expr: &litMatcher{
							pos:        position{line: 2693, col: 14, offset: 89712},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2697, col: 15, offset: 89790},
						run: (*parser).callonSingleQuoteMarkedTextElement189,
						expr: &litMatcher{
							pos:        position{line: 2697, col: 15, offset: 89790},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2701, col: 13, offset: 89865},
						run: (*parser).callonSingleQuoteMarkedTextElement191,
						expr: &litMatcher{
							pos:        position{line: 2701, col: 13, offset: 89865},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2709, col: 22, offset: 90171},
						run: (*parser).callonSingleQuoteMarkedTextElement193,
						expr: &seqExpr{
							pos: position{line: 2709, col: 22, offset: 90171},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2860, col: 13, offset: 94811},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2709, col: 31, offset: 90180},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2709, col: 35, offset: 90184},
									expr: &charClassMatcher{
										pos:        position{line: 2709, col: 36, offset: 90185},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2214, col: 7, offset: 74373},
						name: "InlineMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 2215, col: 7, offset: 74391},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2216, col: 7, offset: 74410},
						name: "QuotedTextInSingleQuoteMarkedText",
					},
					&actionExpr{
						pos: position{line: 991, col: 23, offset: 31326},
						run: (*parser).callonSingleQuoteMarkedTextElement202,
						expr: &seqExpr{
							pos: position{line: 991, col: 23, offset: 31326},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 989, col: 32, offset: 31294},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 991, col: 51, offset: 31354},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 991, col: 56, offset: 31359},
										run: (*parser).callonSingleQuoteMarkedTextElement206,
										expr: &oneOrMoreExpr{
											pos: position{line: 991, col: 56, offset: 31359},
											expr: &charClassMatcher{
												pos:        position{line: 991, col: 56, offset: 31359},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 989, col: 32, offset: 31294},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 2233, col: 5, offset: 74877},
						val:        "[^\\r\\n #]",
						chars:      []rune{'\r', '\n', ' ', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 2234, col: 7, offset: 74982},
						run: (*parser).callonSingleQuoteMarkedTextElement211,
						expr: &seqExpr{
							pos: position{line: 2234, col: 7, offset: 74982},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2234, col: 7, offset: 74982},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&actionExpr{
									pos: position{line: 2864, col: 14, offset: 94885},
									run: (*parser).callonSingleQuoteMarkedTextElement214,
									expr: &oneOrMoreExpr{
										pos: position{line: 2864, col: 14, offset: 94885},
										expr: &charClassMatcher{
											pos:        position{line: 2864, col: 14, offset: 94885},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMarkedText",
			pos:  position{line: 2220, col: 1, offset: 74515},
			expr: &actionExpr{
				pos: position{line: 2221, col: 5, offset: 74556},
				run: (*parser).callonQuotedTextInSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2221, col: 5, offset: 74556},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2221, col: 5, offset: 74556},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2221, col: 16, offset: 74567},
								expr: &ruleRefExpr{
									pos:  position{line: 2221, col: 17, offset: 74568},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2222, col: 5, offset: 74594},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2223, col: 9, offset: 74609},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2223, col: 9, offset: 74609},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2224, col: 11, offset: 74641},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2225, col: 11, offset: 74660},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2226, col: 11, offset: 74681},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2227, col: 11, offset: 74705},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2228, col: 11, offset: 74729},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 2238, col: 1, offset: 75157},
			expr: &choiceExpr{
				pos: position{line: 2239, col: 5, offset: 75182},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2239, col: 5, offset: 75182},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 2239, col: 5, offset: 75182},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2239, col: 5, offset: 75182},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1741, col: 25, offset: 57712},
										run: (*parser).callonEscapedMarkedText5,
										expr: &seqExpr{
											pos: position{line: 1741, col: 25, offset: 57712},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1741, col: 25, offset: 57712},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1741, col: 30, offset: 57717},
													expr: &litMatcher{
														pos:        position{line: 1741, col: 30, offset: 57717},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2239, col: 40, offset: 75217},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2239, col: 45, offset: 75222},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2239, col: 55, offset: 75232},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2239, col: 86, offset: 75263},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2241, col: 9, offset: 75420},
						run: (*parser).callonEscapedMarkedText14,
						expr: &seqExpr{
							pos: position{line: 2241, col: 9, offset: 75420},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2241, col: 9, offset: 75420},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1737, col: 25, offset: 57639},
										run: (*parser).callonEscapedMarkedText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1737, col: 25, offset: 57639},
											expr: &litMatcher{
												pos:        position{line: 1737, col: 25, offset: 57639},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2241, col: 44, offset: 75455},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2241, col: 49, offset: 75460},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2241, col: 59, offset: 75470},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2241, col: 90, offset: 75501},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2244, col: 9, offset: 75701},
						run: (*parser).callonEscapedMarkedText24,
						expr: &seqExpr{
							pos: position{line: 2244, col: 9, offset: 75701},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2244, col: 9, offset: 75701},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1737, col: 25, offset: 57639},
										run: (*parser).callonEscapedMarkedText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1737, col: 25, offset: 57639},
											expr: &litMatcher{
												pos:        position{line: 1737, col: 25, offset: 57639},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2244, col: 44, offset: 75736},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 2244, col: 48, offset: 75740},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2244, col: 58, offset: 75750},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2244, col: 89, offset: 75781},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 2251, col: 1, offset: 76093},
			expr: &actionExpr{
				pos: position{line: 2252, col: 5, offset: 76115},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2252, col: 5, offset: 76115},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2258, col: 27, offset: 76330},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 2253, col: 5, offset: 76142},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2253, col: 14, offset: 76151},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2258, col: 27, offset: 76330},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 2260, col: 1, offset: 76335},
			expr: &choiceExpr{
				pos: position{line: 2260, col: 25, offset: 76359},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2260, col: 25, offset: 76359},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 2262, col: 21, offset: 76411},
						run: (*parser).callonSubscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 2262, col: 21, offset: 76411},
							expr: &charClassMatcher{
								pos:        position{line: 2262, col: 21, offset: 76411},
								val:        "[^\\r\\n ~]",
								chars:      []rune{'\r', '\n', ' ', '~'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 2266, col: 1, offset: 76496},
			expr: &actionExpr{
				pos: position{line: 2267, col: 5, offset: 76525},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2267, col: 5, offset: 76525},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2267, col: 5, offset: 76525},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1737, col: 25, offset: 57639},
								run: (*parser).callonEscapedSubscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1737, col: 25, offset: 57639},
									expr: &litMatcher{
										pos:        position{line: 1737, col: 25, offset: 57639},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2258, col: 27, offset: 76330},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 2269, col: 5, offset: 76593},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2269, col: 14, offset: 76602},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2258, col: 27, offset: 76330},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 2277, col: 1, offset: 76865},
			expr: &actionExpr{
				pos: position{line: 2278, col: 5, offset: 76889},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2278, col: 5, offset: 76889},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2284, col: 29, offset: 77116},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 2279, col: 5, offset: 76919},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2279, col: 14, offset: 76928},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2284, col: 29, offset: 77116},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 2286, col: 1, offset: 77121},
			expr: &choiceExpr{
				pos: position{line: 2286, col: 27, offset: 77147},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2286, col: 27, offset: 77147},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 2288, col: 23, offset: 77203},
						run: (*parser).callonSuperscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 2288, col: 23, offset: 77203},
							expr: &charClassMatcher{
								pos:        position{line: 2288, col: 23, offset: 77203},
								val:        "[^\\r\\n ^]",
								chars:      []rune{'\r', '\n', ' ', '^'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 2292, col: 1, offset: 77288},
			expr: &actionExpr{
				pos: position{line: 2293, col: 5, offset: 77319},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2293, col: 5, offset: 77319},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2293, col: 5, offset: 77319},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1737, col: 25, offset: 57639},
								run: (*parser).callonEscapedSuperscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1737, col: 25, offset: 57639},
									expr: &litMatcher{
										pos:        position{line: 1737, col: 25, offset: 57639},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2284, col: 29, offset: 77116},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 2295, col: 5, offset: 77389},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2295, col: 14, offset: 77398},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2284, col: 29, offset: 77116},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 2304, col: 1, offset: 77846},
			expr: &choiceExpr{
				pos: position{line: 2304, col: 17, offset: 77862},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2304, col: 17, offset: 77862},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2304, col: 38, offset: 77883},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 2306, col: 1, offset: 77903},
			expr: &actionExpr{
				pos: position{line: 2307, col: 5, offset: 77930},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2307, col: 5, offset: 77930},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2319, col: 27, offset: 78305},
							val:        "'`",
							ignoreCase: false,
							want:       "\"'`\"",
						},
						&notExpr{
							pos: position{line: 2319, col: 32, offset: 78310},
							expr: &charClassMatcher{
								pos:        position{line: 2319, col: 33, offset: 78311},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2308, col: 5, offset: 77958},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2308, col: 14, offset: 77967},
								name: "SingleQuotedStringElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2321, col: 25, offset: 78346},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 2313, col: 1, offset: 78111},
			expr: &actionExpr{
				pos: position{line: 2314, col: 5, offset: 78146},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 2314, col: 5, offset: 78146},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2314, col: 14, offset: 78155},
						expr: &ruleRefExpr{
							pos:  position{line: 2314, col: 15, offset: 78156},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 2328, col: 1, offset: 78559},
			expr: &actionExpr{
				pos: position{line: 2329, col: 5, offset: 78593},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &seqExpr{
					pos: position{line: 2329, col: 5, offset: 78593},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2329, col: 5, offset: 78593},
							expr: &litMatcher{
								pos:        position{line: 2321, col: 25, offset: 78346},
								val:        "`'",
								ignoreCase: false,
								want:       "\"`'\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2330, col: 5, offset: 78619},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2331, col: 9, offset: 78637},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2323, col: 21, offset: 78372},
										run: (*parser).callonSingleQuotedStringElement7,
										expr: &seqExpr{
											pos: position{line: 2323, col: 21, offset: 78372},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2323, col: 21, offset: 78372},
													expr: &charClassMatcher{
														pos:        position{line: 2323, col: 21, offset: 78372},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2323, col: 31, offset: 78382},
													expr: &choiceExpr{
														pos: position{line: 2323, col: 33, offset: 78384},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2948, col: 10, offset: 97526},
																run: (*parser).callonSingleQuotedStringElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 2948, col: 11, offset: 97527},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2321, col: 25, offset: 78346},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2332, col: 11, offset: 78664},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2948, col: 10, offset: 97526},
												run: (*parser).callonSingleQuotedStringElement17,
												expr: &charClassMatcher{
													pos:        position{line: 2948, col: 11, offset: 97527},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&notExpr{
												pos: position{line: 2332, col: 17, offset: 78670},
												expr: &litMatcher{
													pos:        position{line: 2321, col: 25, offset: 78346},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2333, col: 11, offset: 78702},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2958, col: 12, offset: 97749},
												run: (*parser).callonSingleQuotedStringElement22,
												expr: &choiceExpr{
													pos: position{line: 2958, col: 13, offset: 97750},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2958, col: 13, offset: 97750},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2958, col: 20, offset: 97757},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2958, col: 29, offset: 97766},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2333, col: 19, offset: 78710},
												expr: &actionExpr{
													pos: position{line: 2958, col: 12, offset: 97749},
													run: (*parser).callonSingleQuotedStringElement28,
													expr: &choiceExpr{
														pos: position{line: 2958, col: 13, offset: 97750},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2958, col: 13, offset: 97750},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 20, offset: 97757},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 29, offset: 97766},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 493, col: 5, offset: 15873},
										run: (*parser).callonSingleQuotedStringElement33,
										expr: &seqExpr{
											pos: position{line: 493, col: 5, offset: 15873},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 493, col: 5, offset: 15873},
													run: (*parser).callonSingleQuotedStringElement35,
												},
												&labeledExpr{
													pos:   position{line: 496, col: 5, offset: 15937},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 496, col: 14, offset: 15946},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 507, col: 25, offset: 16408},
																run: (*parser).callonSingleQuotedStringElement38,
																expr: &seqExpr{
																	pos: position{line: 507, col: 25, offset: 16408},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 507, col: 25, offset: 16408},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 507, col: 37, offset: 16420},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonSingleQuotedStringElement42,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 507, col: 56, offset: 16439},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 507, col: 62, offset: 16445},
																				expr: &actionExpr{
																					pos: position{line: 515, col: 17, offset: 16708},
																					run: (*parser).callonSingleQuotedStringElement49,
																					expr: &seqExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 515, col: 17, offset: 16708},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 515, col: 21, offset: 16712},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 515, col: 28, offset: 16719},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 515, col: 28, offset: 16719},
																											run: (*parser).callonSingleQuotedStringElement54,
																											expr: &charClassMatcher{
																												pos:        position{line: 515, col: 28, offset: 16719},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 517, col: 9, offset: 16773},
																											run: (*parser).callonSingleQuotedStringElement56,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												expr: &charClassMatcher{
																													pos:        position{line: 517, col: 9, offset: 16773},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 507, col: 78, offset: 16461},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 511, col: 25, offset: 16563},
																run: (*parser).callonSingleQuotedStringElement60,
																expr: &seqExpr{
																	pos: position{line: 511, col: 25, offset: 16563},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 511, col: 25, offset: 16563},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 511, col: 38, offset: 16576},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonSingleQuotedStringElement64,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 511, col: 57, offset: 16595},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 511, col: 63, offset: 16601},
																				expr: &actionExpr{
																					pos: position{line: 515, col: 17, offset: 16708},
																					run: (*parser).callonSingleQuotedStringElement71,
																					expr: &seqExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 515, col: 17, offset: 16708},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 515, col: 21, offset: 16712},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 515, col: 28, offset: 16719},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 515, col: 28, offset: 16719},
																											run: (*parser).callonSingleQuotedStringElement76,
																											expr: &charClassMatcher{
																												pos:        position{line: 515, col: 28, offset: 16719},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 517, col: 9, offset: 16773},
																											run: (*parser).callonSingleQuotedStringElement78,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												expr: &charClassMatcher{
																													pos:        position{line: 517, col: 9, offset: 16773},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 511, col: 79, offset: 16617},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 500, col: 31, offset: 16063},
																run: (*parser).callonSingleQuotedStringElement82,
																expr: &seqExpr{
																	pos: position{line: 500, col: 31, offset: 16063},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 500, col: 31, offset: 16063},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 500, col: 35, offset: 16067},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonSingleQuotedStringElement86,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 500, col: 54, offset: 16086},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2650, col: 5, offset: 88280},
										run: (*parser).callonSingleQuotedStringElement92,
										expr: &seqExpr{
											pos: position{line: 2650, col: 5, offset: 88280},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2650, col: 5, offset: 88280},
													run: (*parser).callonSingleQuotedStringElement94,
												},
												&labeledExpr{
													pos:   position{line: 2653, col: 5, offset: 88351},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2655, col: 9, offset: 88449},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2655, col: 9, offset: 88449},
																run: (*parser).callonSingleQuotedStringElement97,
																expr: &choiceExpr{
																	pos: position{line: 535, col: 27, offset: 17427},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 535, col: 27, offset: 17427},
																			run: (*parser).callonSingleQuotedStringElement99,
																			expr: &seqExpr{
																				pos: position{line: 535, col: 27, offset: 17427},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 535, col: 27, offset: 17427},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 535, col: 32, offset: 17432},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2936, col: 7, offset: 97248},
																							run: (*parser).callonSingleQuotedStringElement103,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								expr: &charClassMatcher{
																									pos:        position{line: 2936, col: 7, offset: 97248},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 535, col: 40, offset: 17440},
																						expr: &actionExpr{
																							pos: position{line: 2948, col: 10, offset: 97526},
																							run: (*parser).callonSingleQuotedStringElement107,
																							expr: &charClassMatcher{
																								pos:        position{line: 2948, col: 11, offset: 97527},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 535, col: 47, offset: 17447},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 535, col: 51, offset: 17451},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 545, col: 24, offset: 17864},
																							expr: &choiceExpr{
																								pos: position{line: 546, col: 5, offset: 17870},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 546, col: 6, offset: 17871},
																										run: (*parser).callonSingleQuotedStringElement113,
																										expr: &seqExpr{
																											pos: position{line: 546, col: 6, offset: 17871},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 546, col: 6, offset: 17871},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 546, col: 14, offset: 17879},
																													expr: &charClassMatcher{
																														pos:        position{line: 546, col: 14, offset: 17879},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 493, col: 5, offset: 15873},
																										run: (*parser).callonSingleQuotedStringElement118,
																										expr: &seqExpr{
																											pos: position{line: 493, col: 5, offset: 15873},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 493, col: 5, offset: 15873},
																													run: (*parser).callonSingleQuotedStringElement120,
																												},
																												&labeledExpr{
																													pos:   position{line: 496, col: 5, offset: 15937},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 496, col: 14, offset: 15946},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 507, col: 25, offset: 16408},
																																run: (*parser).callonSingleQuotedStringElement123,
																																expr: &seqExpr{
																																	pos: position{line: 507, col: 25, offset: 16408},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 507, col: 25, offset: 16408},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 37, offset: 16420},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonSingleQuotedStringElement127,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 56, offset: 16439},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 507, col: 62, offset: 16445},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonSingleQuotedStringElement134,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonSingleQuotedStringElement139,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonSingleQuotedStringElement141,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 507, col: 78, offset: 16461},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 511, col: 25, offset: 16563},
																																run: (*parser).callonSingleQuotedStringElement145,
																																expr: &seqExpr{
																																	pos: position{line: 511, col: 25, offset: 16563},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 511, col: 25, offset: 16563},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 38, offset: 16576},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonSingleQuotedStringElement149,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 57, offset: 16595},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 511, col: 63, offset: 16601},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonSingleQuotedStringElement156,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonSingleQuotedStringElement161,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonSingleQuotedStringElement163,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 511, col: 79, offset: 16617},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 500, col: 31, offset: 16063},
																																run: (*parser).callonSingleQuotedStringElement167,
																																expr: &seqExpr{
																																	pos: position{line: 500, col: 31, offset: 16063},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 500, col: 31, offset: 16063},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 500, col: 35, offset: 16067},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonSingleQuotedStringElement171,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 500, col: 54, offset: 16086},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 550, col: 8, offset: 18103},
																										run: (*parser).callonSingleQuotedStringElement177,
																										expr: &litMatcher{
																											pos:        position{line: 550, col: 8, offset: 18103},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 535, col: 79, offset: 17479},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 537, col: 9, offset: 17552},
																			run: (*parser).callonSingleQuotedStringElement180,
																			expr: &seqExpr{
																				pos: position{line: 537, col: 9, offset: 17552},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 537, col: 9, offset: 17552},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 537, col: 14, offset: 17557},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2936, col: 7, offset: 97248},
																							run: (*parser).callonSingleQuotedStringElement184,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								expr: &charClassMatcher{
																									pos:        position{line: 2936, col: 7, offset: 97248},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 537, col: 22, offset: 17565},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2658, col: 11, offset: 88553},
																run: (*parser).callonSingleQuotedStringElement188,
																expr: &charClassMatcher{
																	pos:        position{line: 2658, col: 12, offset: 88554},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2336, col: 11, offset: 78822},
										name: "InlineMacro",
									},
									&seqExpr{
										pos: position{line: 2337, col: 11, offset: 78844},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 999, col: 5, offset: 31772},
												run: (*parser).callonSingleQuotedStringElement192,
												expr: &seqExpr{
													pos: position{line: 999, col: 5, offset: 31772},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 999, col: 5, offset: 31772},
															run: (*parser).callonSingleQuotedStringElement194,
														},
														&litMatcher{
															pos:        position{line: 1002, col: 5, offset: 31829},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1002, col: 9, offset: 31833},
															expr: &actionExpr{
																pos: position{line: 2948, col: 10, offset: 97526},
																run: (*parser).callonSingleQuotedStringElement197,
																expr: &charClassMatcher{
																	pos:        position{line: 2948, col: 11, offset: 97527},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&andExpr{
															pos: position{line: 1002, col: 16, offset: 31840},
															expr: &choiceExpr{
																pos: position{line: 2965, col: 8, offset: 97889},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2958, col: 12, offset: 97749},
																		run: (*parser).callonSingleQuotedStringElement201,
																		expr: &choiceExpr{
																			pos: position{line: 2958, col: 13, offset: 97750},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2958, col: 13, offset: 97750},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2958, col: 20, offset: 97757},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2958, col: 29, offset: 97766},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2962, col: 8, offset: 97839},
																		expr: &anyMatcher{
																			line: 2962, col: 9, offset: 97840,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2337, col: 21, offset: 78854},
												expr: &litMatcher{
													pos:        position{line: 2321, col: 25, offset: 78346},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2683, col: 15, offset: 89521},
										run: (*parser).callonSingleQuotedStringElement210,
										expr: &litMatcher{
											pos:        position{line: 2683, col: 15, offset: 89521},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2689, col: 14, offset: 89636},
										run: (*parser).callonSingleQuotedStringElement212,
										expr: &litMatcher{
											pos:        position{line: 2689, col: 14, offset: 89636},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2693, col: 14, offset: 89712},
										run: (*parser).callonSingleQuotedStringElement214,
										expr: &litMatcher{
											pos:        position{line: 2693, col: 14, offset: 89712},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2697, col: 15, offset: 89790},
										run: (*parser).callonSingleQuotedStringElement216,
										expr: &litMatcher{
											pos:        position{line: 2697, col: 15, offset: 89790},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2701, col: 13, offset: 89865},
										run: (*parser).callonSingleQuotedStringElement218,
										expr: &litMatcher{
											pos:        position{line: 2701, col: 13, offset: 89865},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2709, col: 22, offset: 90171},
										run: (*parser).callonSingleQuotedStringElement220,
										expr: &seqExpr{
											pos: position{line: 2709, col: 22, offset: 90171},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2860, col: 13, offset: 94811},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2709, col: 31, offset: 90180},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2709, col: 35, offset: 90184},
													expr: &charClassMatcher{
														pos:        position{line: 2709, col: 36, offset: 90185},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2339, col: 11, offset: 78903},
										name: "QuotedTextInSingleQuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2340, col: 11, offset: 78944},
										name: "DoubleQuotedString",
									},
									&charClassMatcher{
										pos:        position{line: 2358, col: 41, offset: 79462},
										val:        "[^\\r\\n\\t `]",
										chars:      []rune{'\r', '\n', '\t', ' ', '`'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 2358, col: 55, offset: 79476},
										run: (*parser).callonSingleQuotedStringElement229,
										expr: &seqExpr{
											pos: position{line: 2358, col: 55, offset: 79476},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2358, col: 55, offset: 79476},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
												&notExpr{
													pos: position{line: 2358, col: 59, offset: 79480},
													expr: &litMatcher{
														pos:        position{line: 2358, col: 60, offset: 79481},
														val:        "'",
														ignoreCase: false,
														want:       "\"'\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 2347, col: 1, offset: 79088},
			expr: &actionExpr{
				pos: position{line: 2348, col: 5, offset: 79126},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2348, col: 5, offset: 79126},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2348, col: 5, offset: 79126},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2348, col: 16, offset: 79137},
								expr: &ruleRefExpr{
									pos:  position{line: 2348, col: 17, offset: 79138},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2349, col: 5, offset: 79164},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2349, col: 11, offset: 79170},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2349, col: 11, offset: 79170},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2350, col: 11, offset: 79189},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 2351, col: 12, offset: 79211},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 2351, col: 12, offset: 79211},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2351, col: 12, offset: 79211},
													expr: &litMatcher{
														pos:        position{line: 2351, col: 13, offset: 79212},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2351, col: 18, offset: 79217},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 2351, col: 27, offset: 79226},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2352, col: 11, offset: 79275},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2353, col: 11, offset: 79299},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2354, col: 11, offset: 79325},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 2362, col: 1, offset: 79553},
			expr: &actionExpr{
				pos: position{line: 2362, col: 23, offset: 79575},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2362, col: 23, offset: 79575},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2401, col: 27, offset: 80881},
							val:        "\"`",
							ignoreCase: false,
							want:       "\"\\\"`\"",
						},
						&notExpr{
							pos: position{line: 2401, col: 33, offset: 80887},
							expr: &charClassMatcher{
								pos:        position{line: 2401, col: 34, offset: 80888},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2362, col: 46, offset: 79598},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2362, col: 55, offset: 79607},
								name: "DoubleQuotedStringElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2403, col: 25, offset: 80923},
							val:        "`\"",
							ignoreCase: false,
							want:       "\"`\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 2366, col: 1, offset: 79746},
			expr: &actionExpr{
				pos: position{line: 2366, col: 31, offset: 79776},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 2366, col: 31, offset: 79776},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2366, col: 41, offset: 79786},
						expr: &ruleRefExpr{
							pos:  position{line: 2366, col: 41, offset: 79786},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 2372, col: 1, offset: 79991},
			expr: &actionExpr{
				pos: position{line: 2373, col: 5, offset: 80025},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &seqExpr{
					pos: position{line: 2373, col: 5, offset: 80025},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2373, col: 5, offset: 80025},
							expr: &litMatcher{
								pos:        position{line: 2403, col: 25, offset: 80923},
								val:        "`\"",
								ignoreCase: false,
								want:       "\"`\\\"\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2374, col: 5, offset: 80051},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2375, col: 9, offset: 80069},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2323, col: 21, offset: 78372},
										run: (*parser).callonDoubleQuotedStringElement7,
										expr: &seqExpr{
											pos: position{line: 2323, col: 21, offset: 78372},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2323, col: 21, offset: 78372},
													expr: &charClassMatcher{
														pos:        position{line: 2323, col: 21, offset: 78372},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2323, col: 31, offset: 78382},
													expr: &choiceExpr{
														pos: position{line: 2323, col: 33, offset: 78384},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2948, col: 10, offset: 97526},
																run: (*parser).callonDoubleQuotedStringElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 2948, col: 11, offset: 97527},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2321, col: 25, offset: 78346},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2376, col: 11, offset: 80096},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2948, col: 10, offset: 97526},
												run: (*parser).callonDoubleQuotedStringElement17,
												expr: &charClassMatcher{
													pos:        position{line: 2948, col: 11, offset: 97527},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&notExpr{
												pos: position{line: 2376, col: 17, offset: 80102},
												expr: &litMatcher{
													pos:        position{line: 2403, col: 25, offset: 80923},
													val:        "`\"",
													ignoreCase: false,
													want:       "\"`\\\"\"",
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2377, col: 11, offset: 80134},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2958, col: 12, offset: 97749},
												run: (*parser).callonDoubleQuotedStringElement22,
												expr: &choiceExpr{
													pos: position{line: 2958, col: 13, offset: 97750},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2958, col: 13, offset: 97750},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2958, col: 20, offset: 97757},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2958, col: 29, offset: 97766},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2377, col: 19, offset: 80142},
												expr: &actionExpr{
													pos: position{line: 2958, col: 12, offset: 97749},
													run: (*parser).callonDoubleQuotedStringElement28,
													expr: &choiceExpr{
														pos: position{line: 2958, col: 13, offset: 97750},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2958, col: 13, offset: 97750},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 20, offset: 97757},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2958, col: 29, offset: 97766},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2378, col: 11, offset: 80195},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 999, col: 5, offset: 31772},
												run: (*parser).callonDoubleQuotedStringElement34,
												expr: &seqExpr{
													pos: position{line: 999, col: 5, offset: 31772},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 999, col: 5, offset: 31772},
															run: (*parser).callonDoubleQuotedStringElement36,
														},
														&litMatcher{
															pos:        position{line: 1002, col: 5, offset: 31829},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1002, col: 9, offset: 31833},
															expr: &actionExpr{
																pos: position{line: 2948, col: 10, offset: 97526},
																run: (*parser).callonDoubleQuotedStringElement39,
																expr: &charClassMatcher{
																	pos:        position{line: 2948, col: 11, offset: 97527},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&andExpr{
															pos: position{line: 1002, col: 16, offset: 31840},
															expr: &choiceExpr{
																pos: position{line: 2965, col: 8, offset: 97889},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2958, col: 12, offset: 97749},
																		run: (*parser).callonDoubleQuotedStringElement43,
																		expr: &choiceExpr{
																			pos: position{line: 2958, col: 13, offset: 97750},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2958, col: 13, offset: 97750},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2958, col: 20, offset: 97757},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2958, col: 29, offset: 97766},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2962, col: 8, offset: 97839},
																		expr: &anyMatcher{
																			line: 2962, col: 9, offset: 97840,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2378, col: 21, offset: 80205},
												expr: &litMatcher{
													pos:        position{line: 2321, col: 25, offset: 78346},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 493, col: 5, offset: 15873},
										run: (*parser).callonDoubleQuotedStringElement52,
										expr: &seqExpr{
											pos: position{line: 493, col: 5, offset: 15873},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 493, col: 5, offset: 15873},
													run: (*parser).callonDoubleQuotedStringElement54,
												},
												&labeledExpr{
													pos:   position{line: 496, col: 5, offset: 15937},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 496, col: 14, offset: 15946},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 507, col: 25, offset: 16408},
																run: (*parser).callonDoubleQuotedStringElement57,
																expr: &seqExpr{
																	pos: position{line: 507, col: 25, offset: 16408},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 507, col: 25, offset: 16408},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 507, col: 37, offset: 16420},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonDoubleQuotedStringElement61,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 507, col: 56, offset: 16439},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 507, col: 62, offset: 16445},
																				expr: &actionExpr{
																					pos: position{line: 515, col: 17, offset: 16708},
																					run: (*parser).callonDoubleQuotedStringElement68,
																					expr: &seqExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 515, col: 17, offset: 16708},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 515, col: 21, offset: 16712},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 515, col: 28, offset: 16719},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 515, col: 28, offset: 16719},
																											run: (*parser).callonDoubleQuotedStringElement73,
																											expr: &charClassMatcher{
																												pos:        position{line: 515, col: 28, offset: 16719},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 517, col: 9, offset: 16773},
																											run: (*parser).callonDoubleQuotedStringElement75,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												expr: &charClassMatcher{
																													pos:        position{line: 517, col: 9, offset: 16773},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 507, col: 78, offset: 16461},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 511, col: 25, offset: 16563},
																run: (*parser).callonDoubleQuotedStringElement79,
																expr: &seqExpr{
																	pos: position{line: 511, col: 25, offset: 16563},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 511, col: 25, offset: 16563},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 511, col: 38, offset: 16576},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonDoubleQuotedStringElement83,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 511, col: 57, offset: 16595},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 511, col: 63, offset: 16601},
																				expr: &actionExpr{
																					pos: position{line: 515, col: 17, offset: 16708},
																					run: (*parser).callonDoubleQuotedStringElement90,
																					expr: &seqExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 515, col: 17, offset: 16708},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 515, col: 21, offset: 16712},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 515, col: 28, offset: 16719},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 515, col: 28, offset: 16719},
																											run: (*parser).callonDoubleQuotedStringElement95,
																											expr: &charClassMatcher{
																												pos:        position{line: 515, col: 28, offset: 16719},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 517, col: 9, offset: 16773},
																											run: (*parser).callonDoubleQuotedStringElement97,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												expr: &charClassMatcher{
																													pos:        position{line: 517, col: 9, offset: 16773},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 511, col: 79, offset: 16617},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 500, col: 31, offset: 16063},
																run: (*parser).callonDoubleQuotedStringElement101,
																expr: &seqExpr{
																	pos: position{line: 500, col: 31, offset: 16063},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 500, col: 31, offset: 16063},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 500, col: 35, offset: 16067},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonDoubleQuotedStringElement105,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 500, col: 54, offset: 16086},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2650, col: 5, offset: 88280},
										run: (*parser).callonDoubleQuotedStringElement111,
										expr: &seqExpr{
											pos: position{line: 2650, col: 5, offset: 88280},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2650, col: 5, offset: 88280},
													run: (*parser).callonDoubleQuotedStringElement113,
												},
												&labeledExpr{
													pos:   position{line: 2653, col: 5, offset: 88351},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2655, col: 9, offset: 88449},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2655, col: 9, offset: 88449},
																run: (*parser).callonDoubleQuotedStringElement116,
																expr: &choiceExpr{
																	pos: position{line: 535, col: 27, offset: 17427},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 535, col: 27, offset: 17427},
																			run: (*parser).callonDoubleQuotedStringElement118,
																			expr: &seqExpr{
																				pos: position{line: 535, col: 27, offset: 17427},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 535, col: 27, offset: 17427},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 535, col: 32, offset: 17432},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2936, col: 7, offset: 97248},
																							run: (*parser).callonDoubleQuotedStringElement122,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								expr: &charClassMatcher{
																									pos:        position{line: 2936, col: 7, offset: 97248},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 535, col: 40, offset: 17440},
																						expr: &actionExpr{
																							pos: position{line: 2948, col: 10, offset: 97526},
																							run: (*parser).callonDoubleQuotedStringElement126,
																							expr: &charClassMatcher{
																								pos:        position{line: 2948, col: 11, offset: 97527},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 535, col: 47, offset: 17447},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 535, col: 51, offset: 17451},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 545, col: 24, offset: 17864},
																							expr: &choiceExpr{
																								pos: position{line: 546, col: 5, offset: 17870},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 546, col: 6, offset: 17871},
																										run: (*parser).callonDoubleQuotedStringElement132,
																										expr: &seqExpr{
																											pos: position{line: 546, col: 6, offset: 17871},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 546, col: 6, offset: 17871},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 546, col: 14, offset: 17879},
																													expr: &charClassMatcher{
																														pos:        position{line: 546, col: 14, offset: 17879},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 493, col: 5, offset: 15873},
																										run: (*parser).callonDoubleQuotedStringElement137,
																										expr: &seqExpr{
																											pos: position{line: 493, col: 5, offset: 15873},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 493, col: 5, offset: 15873},
																													run: (*parser).callonDoubleQuotedStringElement139,
																												},
																												&labeledExpr{
																													pos:   position{line: 496, col: 5, offset: 15937},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 496, col: 14, offset: 15946},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 507, col: 25, offset: 16408},
																																run: (*parser).callonDoubleQuotedStringElement142,
																																expr: &seqExpr{
																																	pos: position{line: 507, col: 25, offset: 16408},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 507, col: 25, offset: 16408},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 37, offset: 16420},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonDoubleQuotedStringElement146,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 56, offset: 16439},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 507, col: 62, offset: 16445},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonDoubleQuotedStringElement153,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonDoubleQuotedStringElement158,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonDoubleQuotedStringElement160,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 507, col: 78, offset: 16461},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 511, col: 25, offset: 16563},
																																run: (*parser).callonDoubleQuotedStringElement164,
																																expr: &seqExpr{
																																	pos: position{line: 511, col: 25, offset: 16563},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 511, col: 25, offset: 16563},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 38, offset: 16576},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonDoubleQuotedStringElement168,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 57, offset: 16595},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 511, col: 63, offset: 16601},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonDoubleQuotedStringElement175,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonDoubleQuotedStringElement180,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonDoubleQuotedStringElement182,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 511, col: 79, offset: 16617},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 500, col: 31, offset: 16063},
																																run: (*parser).callonDoubleQuotedStringElement186,
																																expr: &seqExpr{
																																	pos: position{line: 500, col: 31, offset: 16063},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 500, col: 31, offset: 16063},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 500, col: 35, offset: 16067},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonDoubleQuotedStringElement190,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 500, col: 54, offset: 16086},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 550, col: 8, offset: 18103},
																										run: (*parser).callonDoubleQuotedStringElement196,
																										expr: &litMatcher{
																											pos:        position{line: 550, col: 8, offset: 18103},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 535, col: 79, offset: 17479},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 537, col: 9, offset: 17552},
																			run: (*parser).callonDoubleQuotedStringElement199,
																			expr: &seqExpr{
																				pos: position{line: 537, col: 9, offset: 17552},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 537, col: 9, offset: 17552},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 537, col: 14, offset: 17557},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2936, col: 7, offset: 97248},
																							run: (*parser).callonDoubleQuotedStringElement203,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								expr: &charClassMatcher{
																									pos:        position{line: 2936, col: 7, offset: 97248},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 537, col: 22, offset: 17565},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2658, col: 11, offset: 88553},
																run: (*parser).callonDoubleQuotedStringElement207,
																expr: &charClassMatcher{
																	pos:        position{line: 2658, col: 12, offset: 88554},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2381, col: 11, offset: 80297},
										name: "InlineMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 2382, col: 11, offset: 80319},
										name: "QuotedTextInDoubleQuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2383, col: 11, offset: 80360},
										name: "SingleQuotedString",
									},
									&actionExpr{
										pos: position{line: 2405, col: 41, offset: 80970},
										run: (*parser).callonDoubleQuotedStringElement212,
										expr: &choiceExpr{
											pos: position{line: 2405, col: 42, offset: 80971},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2405, col: 42, offset: 80971},
													val:        "[^\\r\\n\\t `]",
													chars:      []rune{'\r', '\n', '\t', ' ', '`'},
													ignoreCase: false,
													inverted:   true,
												},
												&seqExpr{
													pos: position{line: 2405, col: 56, offset: 80985},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 2405, col: 56, offset: 80985},
															val:        "`",
															ignoreCase: false,
															want:       "\"`\"",
														},
														&notExpr{
															pos: position{line: 2405, col: 60, offset: 80989},
															expr: &litMatcher{
																pos:        position{line: 2405, col: 61, offset: 80990},
																val:        "\"",
																ignoreCase: false,
																want:       "\"\\\"\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 2389, col: 1, offset: 80511},
			expr: &actionExpr{
				pos: position{line: 2390, col: 5, offset: 80549},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2390, col: 5, offset: 80549},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2390, col: 5, offset: 80549},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2390, col: 16, offset: 80560},
								expr: &ruleRefExpr{
									pos:  position{line: 2390, col: 17, offset: 80561},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2391, col: 5, offset: 80587},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2392, col: 9, offset: 80602},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2392, col: 9, offset: 80602},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2393, col: 11, offset: 80621},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 2394, col: 12, offset: 80643},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 2394, col: 12, offset: 80643},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2394, col: 12, offset: 80643},
													expr: &litMatcher{
														pos:        position{line: 2394, col: 13, offset: 80644},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2394, col: 19, offset: 80650},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 2394, col: 28, offset: 80659},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2395, col: 11, offset: 80708},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2396, col: 11, offset: 80732},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2397, col: 11, offset: 80758},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributesGroup",
			pos:  position{line: 2440, col: 1, offset: 82228},
			expr: &actionExpr{
				pos: position{line: 2440, col: 20, offset: 82247},
				run: (*parser).callonAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 2440, col: 20, offset: 82247},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2440, col: 20, offset: 82247},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2440, col: 29, offset: 82256},
								expr: &choiceExpr{
									pos: position{line: 2441, col: 5, offset: 82262},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2864, col: 14, offset: 94885},
											run: (*parser).callonAttributesGroup6,
											expr: &oneOrMoreExpr{
												pos: position{line: 2864, col: 14, offset: 94885},
												expr: &charClassMatcher{
													pos:        position{line: 2864, col: 14, offset: 94885},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&actionExpr{
											pos: position{line: 2948, col: 10, offset: 97526},
											run: (*parser).callonAttributesGroup9,
											expr: &charClassMatcher{
												pos:        position{line: 2948, col: 11, offset: 97527},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&actionExpr{
											pos: position{line: 2650, col: 5, offset: 88280},
											run: (*parser).callonAttributesGroup11,
											expr: &seqExpr{
												pos: position{line: 2650, col: 5, offset: 88280},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 2650, col: 5, offset: 88280},
														run: (*parser).callonAttributesGroup13,
													},
													&labeledExpr{
														pos:   position{line: 2653, col: 5, offset: 88351},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 2655, col: 9, offset: 88449},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2655, col: 9, offset: 88449},
																	run: (*parser).callonAttributesGroup16,
																	expr: &choiceExpr{
																		pos: position{line: 535, col: 27, offset: 17427},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 535, col: 27, offset: 17427},
																				run: (*parser).callonAttributesGroup18,
																				expr: &seqExpr{
																					pos: position{line: 535, col: 27, offset: 17427},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 535, col: 27, offset: 17427},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 535, col: 32, offset: 17432},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								run: (*parser).callonAttributesGroup22,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2936, col: 7, offset: 97248},
																									expr: &charClassMatcher{
																										pos:        position{line: 2936, col: 7, offset: 97248},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 535, col: 40, offset: 17440},
																							expr: &actionExpr{
																								pos: position{line: 2948, col: 10, offset: 97526},
																								run: (*parser).callonAttributesGroup26,
																								expr: &charClassMatcher{
																									pos:        position{line: 2948, col: 11, offset: 97527},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 535, col: 47, offset: 17447},
																							val:        ",",
																							ignoreCase: false,
																							want:       "\",\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 535, col: 51, offset: 17451},
																							label: "label",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 545, col: 24, offset: 17864},
																								expr: &choiceExpr{
																									pos: position{line: 546, col: 5, offset: 17870},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 546, col: 6, offset: 17871},
																											run: (*parser).callonAttributesGroup32,
																											expr: &seqExpr{
																												pos: position{line: 546, col: 6, offset: 17871},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 546, col: 6, offset: 17871},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 546, col: 14, offset: 17879},
																														expr: &charClassMatcher{
																															pos:        position{line: 546, col: 14, offset: 17879},
																															val:        "[^\\r\\n{<>]",
																															chars:      []rune{'\r', '\n', '{', '<', '>'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 493, col: 5, offset: 15873},
																											run: (*parser).callonAttributesGroup37,
																											expr: &seqExpr{
																												pos: position{line: 493, col: 5, offset: 15873},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 493, col: 5, offset: 15873},
																														run: (*parser).callonAttributesGroup39,
																													},
																													&labeledExpr{
																														pos:   position{line: 496, col: 5, offset: 15937},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 496, col: 14, offset: 15946},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 507, col: 25, offset: 16408},
																																	run: (*parser).callonAttributesGroup42,
																																	expr: &seqExpr{
																																		pos: position{line: 507, col: 25, offset: 16408},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 507, col: 25, offset: 16408},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 507, col: 37, offset: 16420},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					run: (*parser).callonAttributesGroup46,
																																					expr: &seqExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 162, col: 18, offset: 4814},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 162, col: 28, offset: 4824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 162, col: 29, offset: 4825},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 507, col: 56, offset: 16439},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 507, col: 62, offset: 16445},
																																					expr: &actionExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						run: (*parser).callonAttributesGroup53,
																																						expr: &seqExpr{
																																							pos: position{line: 515, col: 17, offset: 16708},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 515, col: 17, offset: 16708},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 515, col: 21, offset: 16712},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 515, col: 28, offset: 16719},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 515, col: 28, offset: 16719},
																																												run: (*parser).callonAttributesGroup58,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 515, col: 28, offset: 16719},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												run: (*parser).callonAttributesGroup60,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 517, col: 9, offset: 16773},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 517, col: 9, offset: 16773},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 507, col: 78, offset: 16461},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 511, col: 25, offset: 16563},
																																	run: (*parser).callonAttributesGroup64,
																																	expr: &seqExpr{
																																		pos: position{line: 511, col: 25, offset: 16563},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 511, col: 25, offset: 16563},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 511, col: 38, offset: 16576},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					run: (*parser).callonAttributesGroup68,
																																					expr: &seqExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 162, col: 18, offset: 4814},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 162, col: 28, offset: 4824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 162, col: 29, offset: 4825},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 511, col: 57, offset: 16595},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 511, col: 63, offset: 16601},
																																					expr: &actionExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						run: (*parser).callonAttributesGroup75,
																																						expr: &seqExpr{
																																							pos: position{line: 515, col: 17, offset: 16708},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 515, col: 17, offset: 16708},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 515, col: 21, offset: 16712},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 515, col: 28, offset: 16719},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 515, col: 28, offset: 16719},
																																												run: (*parser).callonAttributesGroup80,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 515, col: 28, offset: 16719},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												run: (*parser).callonAttributesGroup82,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 517, col: 9, offset: 16773},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 517, col: 9, offset: 16773},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 511, col: 79, offset: 16617},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 500, col: 31, offset: 16063},
																																	run: (*parser).callonAttributesGroup86,
																																	expr: &seqExpr{
																																		pos: position{line: 500, col: 31, offset: 16063},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 500, col: 31, offset: 16063},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 500, col: 35, offset: 16067},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					run: (*parser).callonAttributesGroup90,
																																					expr: &seqExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 162, col: 18, offset: 4814},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 162, col: 28, offset: 4824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 162, col: 29, offset: 4825},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 500, col: 54, offset: 16086},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 550, col: 8, offset: 18103},
																											run: (*parser).callonAttributesGroup96,
																											expr: &litMatcher{
																												pos:        position{line: 550, col: 8, offset: 18103},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 535, col: 79, offset: 17479},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 537, col: 9, offset: 17552},
																				run: (*parser).callonAttributesGroup99,
																				expr: &seqExpr{
																					pos: position{line: 537, col: 9, offset: 17552},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 537, col: 9, offset: 17552},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 537, col: 14, offset: 17557},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								run: (*parser).callonAttributesGroup103,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2936, col: 7, offset: 97248},
																									expr: &charClassMatcher{
																										pos:        position{line: 2936, col: 7, offset: 97248},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 537, col: 22, offset: 17565},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2658, col: 11, offset: 88553},
																	run: (*parser).callonAttributesGroup107,
																	expr: &charClassMatcher{
																		pos:        position{line: 2658, col: 12, offset: 88554},
																		val:        "[<>&]",
																		chars:      []rune{'<', '>', '&'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2444, col: 7, offset: 82313},
											name: "Quote",
										},
										&ruleRefExpr{
											pos:  position{line: 2445, col: 7, offset: 82325},
											name: "InlinePassthrough",
										},
										&actionExpr{
											pos: position{line: 493, col: 5, offset: 15873},
											run: (*parser).callonAttributesGroup111,
											expr: &seqExpr{
												pos: position{line: 493, col: 5, offset: 15873},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 493, col: 5, offset: 15873},
														run: (*parser).callonAttributesGroup113,
													},
													&labeledExpr{
														pos:   position{line: 496, col: 5, offset: 15937},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 496, col: 14, offset: 15946},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 507, col: 25, offset: 16408},
																	run: (*parser).callonAttributesGroup116,
																	expr: &seqExpr{
																		pos: position{line: 507, col: 25, offset: 16408},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 507, col: 25, offset: 16408},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 507, col: 37, offset: 16420},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					run: (*parser).callonAttributesGroup120,
																					expr: &seqExpr{
																						pos: position{line: 162, col: 18, offset: 4814},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 162, col: 18, offset: 4814},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 162, col: 28, offset: 4824},
																								expr: &charClassMatcher{
																									pos:        position{line: 162, col: 29, offset: 4825},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 507, col: 56, offset: 16439},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 507, col: 62, offset: 16445},
																					expr: &actionExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						run: (*parser).callonAttributesGroup127,
																						expr: &seqExpr{
																							pos: position{line: 515, col: 17, offset: 16708},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 515, col: 17, offset: 16708},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 515, col: 21, offset: 16712},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 515, col: 28, offset: 16719},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 515, col: 28, offset: 16719},
																												run: (*parser).callonAttributesGroup132,
																												expr: &charClassMatcher{
																													pos:        position{line: 515, col: 28, offset: 16719},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												run: (*parser).callonAttributesGroup134,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 517, col: 9, offset: 16773},
																													expr: &charClassMatcher{
																														pos:        position{line: 517, col: 9, offset: 16773},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 507, col: 78, offset: 16461},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 511, col: 25, offset: 16563},
																	run: (*parser).callonAttributesGroup138,
																	expr: &seqExpr{
																		pos: position{line: 511, col: 25, offset: 16563},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 511, col: 25, offset: 16563},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 511, col: 38, offset: 16576},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					run: (*parser).callonAttributesGroup142,
																					expr: &seqExpr{
																						pos: position{line: 162, col: 18, offset: 4814},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 162, col: 18, offset: 4814},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 162, col: 28, offset: 4824},
																								expr: &charClassMatcher{
																									pos:        position{line: 162, col: 29, offset: 4825},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 511, col: 57, offset: 16595},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 511, col: 63, offset: 16601},
																					expr: &actionExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						run: (*parser).callonAttributesGroup149,
																						expr: &seqExpr{
																							pos: position{line: 515, col: 17, offset: 16708},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 515, col: 17, offset: 16708},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 515, col: 21, offset: 16712},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 515, col: 28, offset: 16719},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 515, col: 28, offset: 16719},
																												run: (*parser).callonAttributesGroup154,
																												expr: &charClassMatcher{
																													pos:        position{line: 515, col: 28, offset: 16719},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												run: (*parser).callonAttributesGroup156,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 517, col: 9, offset: 16773},
																													expr: &charClassMatcher{
																														pos:        position{line: 517, col: 9, offset: 16773},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 511, col: 79, offset: 16617},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 500, col: 31, offset: 16063},
																	run: (*parser).callonAttributesGroup160,
																	expr: &seqExpr{
																		pos: position{line: 500, col: 31, offset: 16063},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 500, col: 31, offset: 16063},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 500, col: 35, offset: 16067},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					run: (*parser).callonAttributesGroup164,
																					expr: &seqExpr{
																						pos: position{line: 162, col: 18, offset: 4814},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 162, col: 18, offset: 4814},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 162, col: 28, offset: 4824},
																								expr: &charClassMatcher{
																									pos:        position{line: 162, col: 29, offset: 4825},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 500, col: 54, offset: 16086},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 991, col: 23, offset: 31326},
											run: (*parser).callonAttributesGroup170,
											expr: &seqExpr{
												pos: position{line: 991, col: 23, offset: 31326},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 989, col: 32, offset: 31294},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 991, col: 51, offset: 31354},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 991, col: 56, offset: 31359},
															run: (*parser).callonAttributesGroup174,
															expr: &oneOrMoreExpr{
																pos: position{line: 991, col: 56, offset: 31359},
																expr: &charClassMatcher{
																	pos:        position{line: 991, col: 56, offset: 31359},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 989, col: 32, offset: 31294},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2905, col: 12, offset: 96299},
											run: (*parser).callonAttributesGroup178,
											expr: &anyMatcher{
												line: 2905, col: 12, offset: 96299,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2962, col: 8, offset: 97839},
							expr: &anyMatcher{
								line: 2962, col: 9, offset: 97840,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttributesGroup",
			pos:  position{line: 2453, col: 1, offset: 82604},
			expr: &actionExpr{
				pos: position{line: 2453, col: 27, offset: 82630},
				run: (*parser).callonElementAttributesGroup1,
				expr: &seqExpr{
					pos: position{line: 2453, col: 27, offset: 82630},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2453, col: 27, offset: 82630},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2453, col: 36, offset: 82639},
								expr: &choiceExpr{
									pos: position{line: 2454, col: 5, offset: 82645},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2893, col: 5, offset: 95937},
											run: (*parser).callonElementAttributesGroup6,
											expr: &seqExpr{
												pos: position{line: 2893, col: 5, offset: 95937},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2893, col: 5, offset: 95937},
														expr: &charClassMatcher{
															pos:        position{line: 2893, col: 5, offset: 95937},
															val:        "[,;!?0-9\\pL]",
															chars:      []rune{',', ';', '!', '?'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2894, col: 6, offset: 95957},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2948, col: 10, offset: 97526},
																run: (*parser).callonElementAttributesGroup11,
																expr: &charClassMatcher{
																	pos:        position{line: 2948, col: 11, offset: 97527},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andExpr{
																pos: position{line: 2894, col: 14, offset: 95965},
																expr: &choiceExpr{
																	pos: position{line: 2894, col: 16, offset: 95967},
																	alternatives: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2894, col: 16, offset: 95967},
																			val:        "[.�]",
																			chars:      []rune{'.', '�'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonElementAttributesGroup16,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2948, col: 10, offset: 97526},
											run: (*parser).callonElementAttributesGroup23,
											expr: &charClassMatcher{
												pos:        position{line: 2948, col: 11, offset: 97527},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&actionExpr{
											pos: position{line: 493, col: 5, offset: 15873},
											run: (*parser).callonElementAttributesGroup25,
											expr: &seqExpr{
												pos: position{line: 493, col: 5, offset: 15873},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 493, col: 5, offset: 15873},
														run: (*parser).callonElementAttributesGroup27,
													},
													&labeledExpr{
														pos:   position{line: 496, col: 5, offset: 15937},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 496, col: 14, offset: 15946},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 507, col: 25, offset: 16408},
																	run: (*parser).callonElementAttributesGroup30,
																	expr: &seqExpr{
																		pos: position{line: 507, col: 25, offset: 16408},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 507, col: 25, offset: 16408},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 507, col: 37, offset: 16420},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					run: (*parser).callonElementAttributesGroup34,
																					expr: &seqExpr{
																						pos: position{line: 162, col: 18, offset: 4814},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 162, col: 18, offset: 4814},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 162, col: 28, offset: 4824},
																								expr: &charClassMatcher{
																									pos:        position{line: 162, col: 29, offset: 4825},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 507, col: 56, offset: 16439},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 507, col: 62, offset: 16445},
																					expr: &actionExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						run: (*parser).callonElementAttributesGroup41,
																						expr: &seqExpr{
																							pos: position{line: 515, col: 17, offset: 16708},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 515, col: 17, offset: 16708},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 515, col: 21, offset: 16712},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 515, col: 28, offset: 16719},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 515, col: 28, offset: 16719},
																												run: (*parser).callonElementAttributesGroup46,
																												expr: &charClassMatcher{
																													pos:        position{line: 515, col: 28, offset: 16719},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												run: (*parser).callonElementAttributesGroup48,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 517, col: 9, offset: 16773},
																													expr: &charClassMatcher{
																														pos:        position{line: 517, col: 9, offset: 16773},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 507, col: 78, offset: 16461},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 511, col: 25, offset: 16563},
																	run: (*parser).callonElementAttributesGroup52,
																	expr: &seqExpr{
																		pos: position{line: 511, col: 25, offset: 16563},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 511, col: 25, offset: 16563},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 511, col: 38, offset: 16576},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					run: (*parser).callonElementAttributesGroup56,
																					expr: &seqExpr{
																						pos: position{line: 162, col: 18, offset: 4814},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 162, col: 18, offset: 4814},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 162, col: 28, offset: 4824},
																								expr: &charClassMatcher{
																									pos:        position{line: 162, col: 29, offset: 4825},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 511, col: 57, offset: 16595},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 511, col: 63, offset: 16601},
																					expr: &actionExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						run: (*parser).callonElementAttributesGroup63,
																						expr: &seqExpr{
																							pos: position{line: 515, col: 17, offset: 16708},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 515, col: 17, offset: 16708},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 515, col: 21, offset: 16712},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 515, col: 28, offset: 16719},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 515, col: 28, offset: 16719},
																												run: (*parser).callonElementAttributesGroup68,
																												expr: &charClassMatcher{
																													pos:        position{line: 515, col: 28, offset: 16719},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												run: (*parser).callonElementAttributesGroup70,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 517, col: 9, offset: 16773},
																													expr: &charClassMatcher{
																														pos:        position{line: 517, col: 9, offset: 16773},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 511, col: 79, offset: 16617},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 500, col: 31, offset: 16063},
																	run: (*parser).callonElementAttributesGroup74,
																	expr: &seqExpr{
																		pos: position{line: 500, col: 31, offset: 16063},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 500, col: 31, offset: 16063},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 500, col: 35, offset: 16067},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					run: (*parser).callonElementAttributesGroup78,
																					expr: &seqExpr{
																						pos: position{line: 162, col: 18, offset: 4814},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 162, col: 18, offset: 4814},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 162, col: 28, offset: 4824},
																								expr: &charClassMatcher{
																									pos:        position{line: 162, col: 29, offset: 4825},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 500, col: 54, offset: 16086},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2457, col: 7, offset: 82702},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 2650, col: 5, offset: 88280},
											run: (*parser).callonElementAttributesGroup85,
											expr: &seqExpr{
												pos: position{line: 2650, col: 5, offset: 88280},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 2650, col: 5, offset: 88280},
														run: (*parser).callonElementAttributesGroup87,
													},
													&labeledExpr{
														pos:   position{line: 2653, col: 5, offset: 88351},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 2655, col: 9, offset: 88449},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2655, col: 9, offset: 88449},
																	run: (*parser).callonElementAttributesGroup90,
																	expr: &choiceExpr{
																		pos: position{line: 535, col: 27, offset: 17427},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 535, col: 27, offset: 17427},
																				run: (*parser).callonElementAttributesGroup92,
																				expr: &seqExpr{
																					pos: position{line: 535, col: 27, offset: 17427},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 535, col: 27, offset: 17427},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 535, col: 32, offset: 17432},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								run: (*parser).callonElementAttributesGroup96,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2936, col: 7, offset: 97248},
																									expr: &charClassMatcher{
																										pos:        position{line: 2936, col: 7, offset: 97248},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 535, col: 40, offset: 17440},
																							expr: &actionExpr{
																								pos: position{line: 2948, col: 10, offset: 97526},
																								run: (*parser).callonElementAttributesGroup100,
																								expr: &charClassMatcher{
																									pos:        position{line: 2948, col: 11, offset: 97527},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 535, col: 47, offset: 17447},
																							val:        ",",
																							ignoreCase: false,
																							want:       "\",\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 535, col: 51, offset: 17451},
																							label: "label",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 545, col: 24, offset: 17864},
																								expr: &choiceExpr{
																									pos: position{line: 546, col: 5, offset: 17870},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 546, col: 6, offset: 17871},
																											run: (*parser).callonElementAttributesGroup106,
																											expr: &seqExpr{
																												pos: position{line: 546, col: 6, offset: 17871},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 546, col: 6, offset: 17871},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 546, col: 14, offset: 17879},
																														expr: &charClassMatcher{
																															pos:        position{line: 546, col: 14, offset: 17879},
																															val:        "[^\\r\\n{<>]",
																															chars:      []rune{'\r', '\n', '{', '<', '>'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 493, col: 5, offset: 15873},
																											run: (*parser).callonElementAttributesGroup111,
																											expr: &seqExpr{
																												pos: position{line: 493, col: 5, offset: 15873},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 493, col: 5, offset: 15873},
																														run: (*parser).callonElementAttributesGroup113,
																													},
																													&labeledExpr{
																														pos:   position{line: 496, col: 5, offset: 15937},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 496, col: 14, offset: 15946},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 507, col: 25, offset: 16408},
																																	run: (*parser).callonElementAttributesGroup116,
																																	expr: &seqExpr{
																																		pos: position{line: 507, col: 25, offset: 16408},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 507, col: 25, offset: 16408},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 507, col: 37, offset: 16420},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					run: (*parser).callonElementAttributesGroup120,
																																					expr: &seqExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 162, col: 18, offset: 4814},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 162, col: 28, offset: 4824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 162, col: 29, offset: 4825},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 507, col: 56, offset: 16439},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 507, col: 62, offset: 16445},
																																					expr: &actionExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						run: (*parser).callonElementAttributesGroup127,
																																						expr: &seqExpr{
																																							pos: position{line: 515, col: 17, offset: 16708},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 515, col: 17, offset: 16708},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 515, col: 21, offset: 16712},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 515, col: 28, offset: 16719},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 515, col: 28, offset: 16719},
																																												run: (*parser).callonElementAttributesGroup132,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 515, col: 28, offset: 16719},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												run: (*parser).callonElementAttributesGroup134,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 517, col: 9, offset: 16773},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 517, col: 9, offset: 16773},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 507, col: 78, offset: 16461},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 511, col: 25, offset: 16563},
																																	run: (*parser).callonElementAttributesGroup138,
																																	expr: &seqExpr{
																																		pos: position{line: 511, col: 25, offset: 16563},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 511, col: 25, offset: 16563},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 511, col: 38, offset: 16576},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					run: (*parser).callonElementAttributesGroup142,
																																					expr: &seqExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 162, col: 18, offset: 4814},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 162, col: 28, offset: 4824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 162, col: 29, offset: 4825},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 511, col: 57, offset: 16595},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 511, col: 63, offset: 16601},
																																					expr: &actionExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						run: (*parser).callonElementAttributesGroup149,
																																						expr: &seqExpr{
																																							pos: position{line: 515, col: 17, offset: 16708},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 515, col: 17, offset: 16708},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 515, col: 21, offset: 16712},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 515, col: 28, offset: 16719},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 515, col: 28, offset: 16719},
																																												run: (*parser).callonElementAttributesGroup154,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 515, col: 28, offset: 16719},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												run: (*parser).callonElementAttributesGroup156,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 517, col: 9, offset: 16773},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 517, col: 9, offset: 16773},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 511, col: 79, offset: 16617},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 500, col: 31, offset: 16063},
																																	run: (*parser).callonElementAttributesGroup160,
																																	expr: &seqExpr{
																																		pos: position{line: 500, col: 31, offset: 16063},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 500, col: 31, offset: 16063},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 500, col: 35, offset: 16067},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					run: (*parser).callonElementAttributesGroup164,
																																					expr: &seqExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 162, col: 18, offset: 4814},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 162, col: 28, offset: 4824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 162, col: 29, offset: 4825},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 500, col: 54, offset: 16086},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 550, col: 8, offset: 18103},
																											run: (*parser).callonElementAttributesGroup170,
																											expr: &litMatcher{
																												pos:        position{line: 550, col: 8, offset: 18103},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 535, col: 79, offset: 17479},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 537, col: 9, offset: 17552},
																				run: (*parser).callonElementAttributesGroup173,
																				expr: &seqExpr{
																					pos: position{line: 537, col: 9, offset: 17552},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 537, col: 9, offset: 17552},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 537, col: 14, offset: 17557},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								run: (*parser).callonElementAttributesGroup177,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2936, col: 7, offset: 97248},
																									expr: &charClassMatcher{
																										pos:        position{line: 2936, col: 7, offset: 97248},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 537, col: 22, offset: 17565},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2658, col: 11, offset: 88553},
																	run: (*parser).callonElementAttributesGroup181,
																	expr: &charClassMatcher{
																		pos:        position{line: 2658, col: 12, offset: 88554},
																		val:        "[<>&]",
																		chars:      []rune{'<', '>', '&'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 991, col: 23, offset: 31326},
											run: (*parser).callonElementAttributesGroup183,
											expr: &seqExpr{
												pos: position{line: 991, col: 23, offset: 31326},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 989, col: 32, offset: 31294},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 991, col: 51, offset: 31354},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 991, col: 56, offset: 31359},
															run: (*parser).callonElementAttributesGroup187,
															expr: &oneOrMoreExpr{
																pos: position{line: 991, col: 56, offset: 31359},
																expr: &charClassMatcher{
																	pos:        position{line: 991, col: 56, offset: 31359},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 989, col: 32, offset: 31294},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2905, col: 12, offset: 96299},
											run: (*parser).callonElementAttributesGroup191,
											expr: &anyMatcher{
												line: 2905, col: 12, offset: 96299,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2962, col: 8, offset: 97839},
							expr: &anyMatcher{
								line: 2962, col: 9, offset: 97840,
							},
						},
					},
				},
			},
		},
		{
			name: "HeaderGroup",
			pos:  position{line: 2465, col: 1, offset: 82967},
			expr: &actionExpr{
				pos: position{line: 2466, col: 5, offset: 82987},
				run: (*parser).callonHeaderGroup1,
				expr: &seqExpr{
					pos: position{line: 2466, col: 5, offset: 82987},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2466, col: 5, offset: 82987},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2466, col: 14, offset: 82996},
								expr: &ruleRefExpr{
									pos:  position{line: 2466, col: 15, offset: 82997},
									name: "HeaderGroupElement",
								},
							},
						},
						&notExpr{
							pos: position{line: 2962, col: 8, offset: 97839},
							expr: &anyMatcher{
								line: 2962, col: 9, offset: 97840,
							},
						},
					},
				},
			},
		},
		{
			name: "HeaderGroupElement",
			pos:  position{line: 2470, col: 1, offset: 83081},
			expr: &actionExpr{
				pos: position{line: 2471, col: 5, offset: 83107},
				run: (*parser).callonHeaderGroupElement1,
				expr: &seqExpr{
					pos: position{line: 2471, col: 5, offset: 83107},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2471, col: 5, offset: 83107},
							expr: &notExpr{
								pos: position{line: 2962, col: 8, offset: 97839},
								expr: &anyMatcher{
									line: 2962, col: 9, offset: 97840,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2472, col: 5, offset: 83116},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2473, col: 9, offset: 83134},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2893, col: 5, offset: 95937},
										run: (*parser).callonHeaderGroupElement8,
										expr: &seqExpr{
											pos: position{line: 2893, col: 5, offset: 95937},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2893, col: 5, offset: 95937},
													expr: &charClassMatcher{
														pos:        position{line: 2893, col: 5, offset: 95937},
														val:        "[,;!?0-9\\pL]",
														chars:      []rune{',', ';', '!', '?'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2894, col: 6, offset: 95957},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2948, col: 10, offset: 97526},
															run: (*parser).callonHeaderGroupElement13,
															expr: &charClassMatcher{
																pos:        position{line: 2948, col: 11, offset: 97527},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&andExpr{
															pos: position{line: 2894, col: 14, offset: 95965},
															expr: &choiceExpr{
																pos: position{line: 2894, col: 16, offset: 95967},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2894, col: 16, offset: 95967},
																		val:        "[.�]",
																		chars:      []rune{'.', '�'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 2958, col: 12, offset: 97749},
																		run: (*parser).callonHeaderGroupElement18,
																		expr: &choiceExpr{
																			pos: position{line: 2958, col: 13, offset: 97750},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2958, col: 13, offset: 97750},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2958, col: 20, offset: 97757},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2958, col: 29, offset: 97766},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2962, col: 8, offset: 97839},
																		expr: &anyMatcher{
																			line: 2962, col: 9, offset: 97840,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2948, col: 10, offset: 97526},
										run: (*parser).callonHeaderGroupElement25,
										expr: &charClassMatcher{
											pos:        position{line: 2948, col: 11, offset: 97527},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2475, col: 11, offset: 83171},
										name: "InlinePassthrough",
									},
									&actionExpr{
										pos: position{line: 2650, col: 5, offset: 88280},
										run: (*parser).callonHeaderGroupElement28,
										expr: &seqExpr{
											pos: position{line: 2650, col: 5, offset: 88280},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2650, col: 5, offset: 88280},
													run: (*parser).callonHeaderGroupElement30,
												},
												&labeledExpr{
													pos:   position{line: 2653, col: 5, offset: 88351},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2655, col: 9, offset: 88449},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2655, col: 9, offset: 88449},
																run: (*parser).callonHeaderGroupElement33,
																expr: &choiceExpr{
																	pos: position{line: 535, col: 27, offset: 17427},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 535, col: 27, offset: 17427},
																			run: (*parser).callonHeaderGroupElement35,
																			expr: &seqExpr{
																				pos: position{line: 535, col: 27, offset: 17427},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 535, col: 27, offset: 17427},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 535, col: 32, offset: 17432},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2936, col: 7, offset: 97248},
																							run: (*parser).callonHeaderGroupElement39,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								expr: &charClassMatcher{
																									pos:        position{line: 2936, col: 7, offset: 97248},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 535, col: 40, offset: 17440},
																						expr: &actionExpr{
																							pos: position{line: 2948, col: 10, offset: 97526},
																							run: (*parser).callonHeaderGroupElement43,
																							expr: &charClassMatcher{
																								pos:        position{line: 2948, col: 11, offset: 97527},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 535, col: 47, offset: 17447},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 535, col: 51, offset: 17451},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 545, col: 24, offset: 17864},
																							expr: &choiceExpr{
																								pos: position{line: 546, col: 5, offset: 17870},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 546, col: 6, offset: 17871},
																										run: (*parser).callonHeaderGroupElement49,
																										expr: &seqExpr{
																											pos: position{line: 546, col: 6, offset: 17871},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 546, col: 6, offset: 17871},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 546, col: 14, offset: 17879},
																													expr: &charClassMatcher{
																														pos:        position{line: 546, col: 14, offset: 17879},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 493, col: 5, offset: 15873},
																										run: (*parser).callonHeaderGroupElement54,
																										expr: &seqExpr{
																											pos: position{line: 493, col: 5, offset: 15873},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 493, col: 5, offset: 15873},
																													run: (*parser).callonHeaderGroupElement56,
																												},
																												&labeledExpr{
																													pos:   position{line: 496, col: 5, offset: 15937},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 496, col: 14, offset: 15946},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 507, col: 25, offset: 16408},
																																run: (*parser).callonHeaderGroupElement59,
																																expr: &seqExpr{
																																	pos: position{line: 507, col: 25, offset: 16408},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 507, col: 25, offset: 16408},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 37, offset: 16420},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonHeaderGroupElement63,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 56, offset: 16439},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 507, col: 62, offset: 16445},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonHeaderGroupElement70,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonHeaderGroupElement75,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonHeaderGroupElement77,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 507, col: 78, offset: 16461},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 511, col: 25, offset: 16563},
																																run: (*parser).callonHeaderGroupElement81,
																																expr: &seqExpr{
																																	pos: position{line: 511, col: 25, offset: 16563},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 511, col: 25, offset: 16563},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 38, offset: 16576},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonHeaderGroupElement85,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 57, offset: 16595},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 511, col: 63, offset: 16601},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonHeaderGroupElement92,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonHeaderGroupElement97,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonHeaderGroupElement99,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 511, col: 79, offset: 16617},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 500, col: 31, offset: 16063},
																																run: (*parser).callonHeaderGroupElement103,
																																expr: &seqExpr{
																																	pos: position{line: 500, col: 31, offset: 16063},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 500, col: 31, offset: 16063},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 500, col: 35, offset: 16067},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonHeaderGroupElement107,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 500, col: 54, offset: 16086},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 550, col: 8, offset: 18103},
																										run: (*parser).callonHeaderGroupElement113,
																										expr: &litMatcher{
																											pos:        position{line: 550, col: 8, offset: 18103},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 535, col: 79, offset: 17479},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 537, col: 9, offset: 17552},
																			run: (*parser).callonHeaderGroupElement116,
																			expr: &seqExpr{
																				pos: position{line: 537, col: 9, offset: 17552},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 537, col: 9, offset: 17552},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 537, col: 14, offset: 17557},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2936, col: 7, offset: 97248},
																							run: (*parser).callonHeaderGroupElement120,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								expr: &charClassMatcher{
																									pos:        position{line: 2936, col: 7, offset: 97248},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 537, col: 22, offset: 17565},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2658, col: 11, offset: 88553},
																run: (*parser).callonHeaderGroupElement124,
																expr: &charClassMatcher{
																	pos:        position{line: 2658, col: 12, offset: 88554},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2477, col: 11, offset: 83226},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 2478, col: 11, offset: 83242},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 2479, col: 11, offset: 83257},
										name: "InlineIcon",
									},
									&actionExpr{
										pos: position{line: 493, col: 5, offset: 15873},
										run: (*parser).callonHeaderGroupElement129,
										expr: &seqExpr{
											pos: position{line: 493, col: 5, offset: 15873},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 493, col: 5, offset: 15873},
													run: (*parser).callonHeaderGroupElement131,
												},
												&labeledExpr{
													pos:   position{line: 496, col: 5, offset: 15937},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 496, col: 14, offset: 15946},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 507, col: 25, offset: 16408},
																run: (*parser).callonHeaderGroupElement134,
																expr: &seqExpr{
																	pos: position{line: 507, col: 25, offset: 16408},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 507, col: 25, offset: 16408},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 507, col: 37, offset: 16420},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonHeaderGroupElement138,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 507, col: 56, offset: 16439},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 507, col: 62, offset: 16445},
																				expr: &actionExpr{
																					pos: position{line: 515, col: 17, offset: 16708},
																					run: (*parser).callonHeaderGroupElement145,
																					expr: &seqExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 515, col: 17, offset: 16708},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 515, col: 21, offset: 16712},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 515, col: 28, offset: 16719},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 515, col: 28, offset: 16719},
																											run: (*parser).callonHeaderGroupElement150,
																											expr: &charClassMatcher{
																												pos:        position{line: 515, col: 28, offset: 16719},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 517, col: 9, offset: 16773},
																											run: (*parser).callonHeaderGroupElement152,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												expr: &charClassMatcher{
																													pos:        position{line: 517, col: 9, offset: 16773},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 507, col: 78, offset: 16461},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 511, col: 25, offset: 16563},
																run: (*parser).callonHeaderGroupElement156,
																expr: &seqExpr{
																	pos: position{line: 511, col: 25, offset: 16563},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 511, col: 25, offset: 16563},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 511, col: 38, offset: 16576},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonHeaderGroupElement160,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 511, col: 57, offset: 16595},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 511, col: 63, offset: 16601},
																				expr: &actionExpr{
																					pos: position{line: 515, col: 17, offset: 16708},
																					run: (*parser).callonHeaderGroupElement167,
																					expr: &seqExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 515, col: 17, offset: 16708},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 515, col: 21, offset: 16712},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 515, col: 28, offset: 16719},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 515, col: 28, offset: 16719},
																											run: (*parser).callonHeaderGroupElement172,
																											expr: &charClassMatcher{
																												pos:        position{line: 515, col: 28, offset: 16719},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 517, col: 9, offset: 16773},
																											run: (*parser).callonHeaderGroupElement174,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												expr: &charClassMatcher{
																													pos:        position{line: 517, col: 9, offset: 16773},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 511, col: 79, offset: 16617},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 500, col: 31, offset: 16063},
																run: (*parser).callonHeaderGroupElement178,
																expr: &seqExpr{
																	pos: position{line: 500, col: 31, offset: 16063},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 500, col: 31, offset: 16063},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 500, col: 35, offset: 16067},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonHeaderGroupElement182,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 500, col: 54, offset: 16086},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 991, col: 23, offset: 31326},
										run: (*parser).callonHeaderGroupElement188,
										expr: &seqExpr{
											pos: position{line: 991, col: 23, offset: 31326},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 989, col: 32, offset: 31294},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 991, col: 51, offset: 31354},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 991, col: 56, offset: 31359},
														run: (*parser).callonHeaderGroupElement192,
														expr: &oneOrMoreExpr{
															pos: position{line: 991, col: 56, offset: 31359},
															expr: &charClassMatcher{
																pos:        position{line: 991, col: 56, offset: 31359},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 989, col: 32, offset: 31294},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2639, col: 5, offset: 88059},
										run: (*parser).callonHeaderGroupElement196,
										expr: &seqExpr{
											pos: position{line: 2639, col: 5, offset: 88059},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2639, col: 5, offset: 88059},
													run: (*parser).callonHeaderGroupElement198,
												},
												&labeledExpr{
													pos:   position{line: 2642, col: 5, offset: 88125},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2681, col: 11, offset: 89427},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2683, col: 15, offset: 89521},
																run: (*parser).callonHeaderGroupElement201,
																expr: &litMatcher{
																	pos:        position{line: 2683, col: 15, offset: 89521},
																	val:        "`'",
																	ignoreCase: false,
																	want:       "\"`'\"",
																},
															},
															&actionExpr{
																pos: position{line: 2689, col: 14, offset: 89636},
																run: (*parser).callonHeaderGroupElement203,
																expr: &litMatcher{
																	pos:        position{line: 2689, col: 14, offset: 89636},
																	val:        "(C)",
																	ignoreCase: false,
																	want:       "\"(C)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2693, col: 14, offset: 89712},
																run: (*parser).callonHeaderGroupElement205,
																expr: &litMatcher{
																	pos:        position{line: 2693, col: 14, offset: 89712},
																	val:        "(TM)",
																	ignoreCase: false,
																	want:       "\"(TM)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2697, col: 15, offset: 89790},
																run: (*parser).callonHeaderGroupElement207,
																expr: &litMatcher{
																	pos:        position{line: 2697, col: 15, offset: 89790},
																	val:        "(R)",
																	ignoreCase: false,
																	want:       "\"(R)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2701, col: 13, offset: 89865},
																run: (*parser).callonHeaderGroupElement209,
																expr: &litMatcher{
																	pos:        position{line: 2701, col: 13, offset: 89865},
																	val:        "...",
																	ignoreCase: false,
																	want:       "\"...\"",
																},
															},
															&actionExpr{
																pos: position{line: 2709, col: 22, offset: 90171},
																run: (*parser).callonHeaderGroupElement211,
																expr: &seqExpr{
																	pos: position{line: 2709, col: 22, offset: 90171},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2860, col: 13, offset: 94811},
																			val:        "[0-9\\pL]",
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&litMatcher{
																			pos:        position{line: 2709, col: 31, offset: 90180},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&andExpr{
																			pos: position{line: 2709, col: 35, offset: 90184},
																			expr: &charClassMatcher{
																				pos:        position{line: 2709, col: 36, offset: 90185},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 228, col: 4, offset: 6749},
										run: (*parser).callonHeaderGroupElement217,
										expr: &seqExpr{
											pos: position{line: 228, col: 4, offset: 6749},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 228, col: 4, offset: 6749},
													val:        "[[",
													ignoreCase: false,
													want:       "\"[[\"",
												},
												&labeledExpr{
													pos:   position{line: 229, col: 5, offset: 6759},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 230, col: 9, offset: 6772},
														run: (*parser).callonHeaderGroupElement221,
														expr: &labeledExpr{
															pos:   position{line: 230, col: 9, offset: 6772},
															label: "elements",
															expr: &oneOrMoreExpr{
																pos: position{line: 230, col: 18, offset: 6781},
																expr: &choiceExpr{
																	pos: position{line: 231, col: 13, offset: 6795},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 231, col: 14, offset: 6796},
																			run: (*parser).callonHeaderGroupElement225,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 231, col: 14, offset: 6796},
																				expr: &charClassMatcher{
																					pos:        position{line: 231, col: 14, offset: 6796},
																					val:        "[^=\\r\\n�{]]",
																					chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 991, col: 23, offset: 31326},
																			run: (*parser).callonHeaderGroupElement228,
																			expr: &seqExpr{
																				pos: position{line: 991, col: 23, offset: 31326},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 989, col: 32, offset: 31294},
																						val:        "�",
																						ignoreCase: false,
																						want:       "\"�\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 991, col: 51, offset: 31354},
																						label: "ref",
																						expr: &actionExpr{
																							pos: position{line: 991, col: 56, offset: 31359},
																							run: (*parser).callonHeaderGroupElement232,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 991, col: 56, offset: 31359},
																								expr: &charClassMatcher{
																									pos:        position{line: 991, col: 56, offset: 31359},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 989, col: 32, offset: 31294},
																						val:        "�",
																						ignoreCase: false,
																						want:       "\"�\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 493, col: 5, offset: 15873},
																			run: (*parser).callonHeaderGroupElement236,
																			expr: &seqExpr{
																				pos: position{line: 493, col: 5, offset: 15873},
																				exprs: []interface{}{
																					&andCodeExpr{
																						pos: position{line: 493, col: 5, offset: 15873},
																						run: (*parser).callonHeaderGroupElement238,
																					},
																					&labeledExpr{
																						pos:   position{line: 496, col: 5, offset: 15937},
																						label: "element",
																						expr: &choiceExpr{
																							pos: position{line: 496, col: 14, offset: 15946},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 507, col: 25, offset: 16408},
																									run: (*parser).callonHeaderGroupElement241,
																									expr: &seqExpr{
																										pos: position{line: 507, col: 25, offset: 16408},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 507, col: 25, offset: 16408},
																												val:        "{counter:",
																												ignoreCase: false,
																												want:       "\"{counter:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 507, col: 37, offset: 16420},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 162, col: 18, offset: 4814},
																													run: (*parser).callonHeaderGroupElement245,
																													expr: &seqExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 162, col: 18, offset: 4814},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 162, col: 28, offset: 4824},
																																expr: &charClassMatcher{
																																	pos:        position{line: 162, col: 29, offset: 4825},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 507, col: 56, offset: 16439},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 507, col: 62, offset: 16445},
																													expr: &actionExpr{
																														pos: position{line: 515, col: 17, offset: 16708},
																														run: (*parser).callonHeaderGroupElement252,
																														expr: &seqExpr{
																															pos: position{line: 515, col: 17, offset: 16708},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 515, col: 17, offset: 16708},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 515, col: 21, offset: 16712},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 515, col: 28, offset: 16719},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 515, col: 28, offset: 16719},
																																				run: (*parser).callonHeaderGroupElement257,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 515, col: 28, offset: 16719},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 517, col: 9, offset: 16773},
																																				run: (*parser).callonHeaderGroupElement259,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 517, col: 9, offset: 16773},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 517, col: 9, offset: 16773},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 507, col: 78, offset: 16461},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 511, col: 25, offset: 16563},
																									run: (*parser).callonHeaderGroupElement263,
																									expr: &seqExpr{
																										pos: position{line: 511, col: 25, offset: 16563},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 511, col: 25, offset: 16563},
																												val:        "{counter2:",
																												ignoreCase: false,
																												want:       "\"{counter2:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 511, col: 38, offset: 16576},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 162, col: 18, offset: 4814},
																													run: (*parser).callonHeaderGroupElement267,
																													expr: &seqExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 162, col: 18, offset: 4814},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 162, col: 28, offset: 4824},
																																expr: &charClassMatcher{
																																	pos:        position{line: 162, col: 29, offset: 4825},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 511, col: 57, offset: 16595},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 511, col: 63, offset: 16601},
																													expr: &actionExpr{
																														pos: position{line: 515, col: 17, offset: 16708},
																														run: (*parser).callonHeaderGroupElement274,
																														expr: &seqExpr{
																															pos: position{line: 515, col: 17, offset: 16708},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 515, col: 17, offset: 16708},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 515, col: 21, offset: 16712},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 515, col: 28, offset: 16719},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 515, col: 28, offset: 16719},
																																				run: (*parser).callonHeaderGroupElement279,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 515, col: 28, offset: 16719},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 517, col: 9, offset: 16773},
																																				run: (*parser).callonHeaderGroupElement281,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 517, col: 9, offset: 16773},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 517, col: 9, offset: 16773},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 511, col: 79, offset: 16617},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 500, col: 31, offset: 16063},
																									run: (*parser).callonHeaderGroupElement285,
																									expr: &seqExpr{
																										pos: position{line: 500, col: 31, offset: 16063},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 500, col: 31, offset: 16063},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 500, col: 35, offset: 16067},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 162, col: 18, offset: 4814},
																													run: (*parser).callonHeaderGroupElement289,
																													expr: &seqExpr{
																														pos: position{line: 162, col: 18, offset: 4814},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 162, col: 18, offset: 4814},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 162, col: 28, offset: 4824},
																																expr: &charClassMatcher{
																																	pos:        position{line: 162, col: 29, offset: 4825},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 500, col: 54, offset: 16086},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 236, col: 16, offset: 7032},
																			run: (*parser).callonHeaderGroupElement295,
																			expr: &litMatcher{
																				pos:        position{line: 236, col: 16, offset: 7032},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 242, col: 5, offset: 7218},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2484, col: 11, offset: 83475},
										name: "InlineFootnote",
									},
									&actionExpr{
										pos: position{line: 2905, col: 12, offset: 96299},
										run: (*parser).callonHeaderGroupElement299,
										expr: &anyMatcher{
											line: 2905, col: 12, offset: 96299,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MacrosGroup",
			pos:  position{line: 2490, col: 1, offset: 83594},
			expr: &actionExpr{
				pos: position{line: 2490, col: 16, offset: 83609},
				run: (*parser).callonMacrosGroup1,
				expr: &seqExpr{
					pos: position{line: 2490, col: 16, offset: 83609},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2490, col: 16, offset: 83609},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2490, col: 25, offset: 83618},
								expr: &choiceExpr{
									pos: position{line: 2491, col: 5, offset: 83624},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2893, col: 5, offset: 95937},
											run: (*parser).callonMacrosGroup6,
											expr: &seqExpr{
												pos: position{line: 2893, col: 5, offset: 95937},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2893, col: 5, offset: 95937},
														expr: &charClassMatcher{
															pos:        position{line: 2893, col: 5, offset: 95937},
															val:        "[,;!?0-9\\pL]",
															chars:      []rune{',', ';', '!', '?'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2894, col: 6, offset: 95957},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2948, col: 10, offset: 97526},
																run: (*parser).callonMacrosGroup11,
																expr: &charClassMatcher{
																	pos:        position{line: 2948, col: 11, offset: 97527},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andExpr{
																pos: position{line: 2894, col: 14, offset: 95965},
																expr: &choiceExpr{
																	pos: position{line: 2894, col: 16, offset: 95967},
																	alternatives: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2894, col: 16, offset: 95967},
																			val:        "[.�]",
																			chars:      []rune{'.', '�'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonMacrosGroup16,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2492, col: 7, offset: 83641},
											name: "InlineMacro",
										},
										&actionExpr{
											pos: position{line: 991, col: 23, offset: 31326},
											run: (*parser).callonMacrosGroup24,
											expr: &seqExpr{
												pos: position{line: 991, col: 23, offset: 31326},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 989, col: 32, offset: 31294},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 991, col: 51, offset: 31354},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 991, col: 56, offset: 31359},
															run: (*parser).callonMacrosGroup28,
															expr: &oneOrMoreExpr{
																pos: position{line: 991, col: 56, offset: 31359},
																expr: &charClassMatcher{
																	pos:        position{line: 991, col: 56, offset: 31359},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 989, col: 32, offset: 31294},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2905, col: 12, offset: 96299},
											run: (*parser).callonMacrosGroup32,
											expr: &anyMatcher{
												line: 2905, col: 12, offset: 96299,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2962, col: 8, offset: 97839},
							expr: &anyMatcher{
								line: 2962, col: 9, offset: 97840,
							},
						},
					},
				},
			},
		},
		{
			name: "NoneGroup",
			pos:  position{line: 2500, col: 1, offset: 83949},
			expr: &actionExpr{
				pos: position{line: 2500, col: 14, offset: 83962},
				run: (*parser).callonNoneGroup1,
				expr: &seqExpr{
					pos: position{line: 2500, col: 14, offset: 83962},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2500, col: 14, offset: 83962},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2500, col: 23, offset: 83971},
								expr: &actionExpr{
									pos: position{line: 2505, col: 5, offset: 84079},
									run: (*parser).callonNoneGroup5,
									expr: &seqExpr{
										pos: position{line: 2505, col: 5, offset: 84079},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2505, col: 5, offset: 84079},
												expr: &notExpr{
													pos: position{line: 2962, col: 8, offset: 97839},
													expr: &anyMatcher{
														line: 2962, col: 9, offset: 97840,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2506, col: 5, offset: 84088},
												label: "element",
												expr: &oneOrMoreExpr{
													pos: position{line: 2506, col: 13, offset: 84096},
													expr: &choiceExpr{
														pos: position{line: 2507, col: 9, offset: 84106},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2893, col: 5, offset: 95937},
																run: (*parser).callonNoneGroup13,
																expr: &seqExpr{
																	pos: position{line: 2893, col: 5, offset: 95937},
																	exprs: []interface{}{
																		&oneOrMoreExpr{
																			pos: position{line: 2893, col: 5, offset: 95937},
																			expr: &charClassMatcher{
																				pos:        position{line: 2893, col: 5, offset: 95937},
																				val:        "[,;!?0-9\\pL]",
																				chars:      []rune{',', ';', '!', '?'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2894, col: 6, offset: 95957},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2948, col: 10, offset: 97526},
																					run: (*parser).callonNoneGroup18,
																					expr: &charClassMatcher{
																						pos:        position{line: 2948, col: 11, offset: 97527},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&andExpr{
																					pos: position{line: 2894, col: 14, offset: 95965},
																					expr: &choiceExpr{
																						pos: position{line: 2894, col: 16, offset: 95967},
																						alternatives: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 2894, col: 16, offset: 95967},
																								val:        "[.�]",
																								chars:      []rune{'.', '�'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&actionExpr{
																								pos: position{line: 2958, col: 12, offset: 97749},
																								run: (*parser).callonNoneGroup23,
																								expr: &choiceExpr{
																									pos: position{line: 2958, col: 13, offset: 97750},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2958, col: 13, offset: 97750},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2958, col: 20, offset: 97757},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2958, col: 29, offset: 97766},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2962, col: 8, offset: 97839},
																								expr: &anyMatcher{
																									line: 2962, col: 9, offset: 97840,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 991, col: 23, offset: 31326},
																run: (*parser).callonNoneGroup30,
																expr: &seqExpr{
																	pos: position{line: 991, col: 23, offset: 31326},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 989, col: 32, offset: 31294},
																			val:        "�",
																			ignoreCase: false,
																			want:       "\"�\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 991, col: 51, offset: 31354},
																			label: "ref",
																			expr: &actionExpr{
																				pos: position{line: 991, col: 56, offset: 31359},
																				run: (*parser).callonNoneGroup34,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 991, col: 56, offset: 31359},
																					expr: &charClassMatcher{
																						pos:        position{line: 991, col: 56, offset: 31359},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 989, col: 32, offset: 31294},
																			val:        "�",
																			ignoreCase: false,
																			want:       "\"�\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2905, col: 12, offset: 96299},
																run: (*parser).callonNoneGroup38,
																expr: &anyMatcher{
																	line: 2905, col: 12, offset: 96299,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2962, col: 8, offset: 97839},
												expr: &anyMatcher{
													line: 2962, col: 9, offset: 97840,
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2962, col: 8, offset: 97839},
							expr: &anyMatcher{
								line: 2962, col: 9, offset: 97840,
							},
						},
					},
				},
			},
		},
		{
			name: "NormalGroup",
			pos:  position{line: 2515, col: 1, offset: 84504},
			expr: &actionExpr{
				pos: position{line: 2516, col: 5, offset: 84524},
				run: (*parser).callonNormalGroup1,
				expr: &seqExpr{
					pos: position{line: 2516, col: 5, offset: 84524},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2516, col: 5, offset: 84524},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2516, col: 14, offset: 84533},
								expr: &ruleRefExpr{
									pos:  position{line: 2516, col: 15, offset: 84534},
									name: "NormalGroupElement",
								},
							},
						},
						&notExpr{
							pos: position{line: 2962, col: 8, offset: 97839},
							expr: &anyMatcher{
								line: 2962, col: 9, offset: 97840,
							},
						},
					},
				},
			},
		},
		{
			name: "NormalGroupElement",
			pos:  position{line: 2521, col: 1, offset: 84655},
			expr: &actionExpr{
				pos: position{line: 2522, col: 5, offset: 84682},
				run: (*parser).callonNormalGroupElement1,
				expr: &seqExpr{
					pos: position{line: 2522, col: 5, offset: 84682},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2522, col: 5, offset: 84682},
							expr: &notExpr{
								pos: position{line: 2962, col: 8, offset: 97839},
								expr: &anyMatcher{
									line: 2962, col: 9, offset: 97840,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2523, col: 5, offset: 84691},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2524, col: 9, offset: 84709},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2893, col: 5, offset: 95937},
										run: (*parser).callonNormalGroupElement8,
										expr: &seqExpr{
											pos: position{line: 2893, col: 5, offset: 95937},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2893, col: 5, offset: 95937},
													expr: &charClassMatcher{
														pos:        position{line: 2893, col: 5, offset: 95937},
														val:        "[,;!?0-9\\pL]",
														chars:      []rune{',', ';', '!', '?'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2894, col: 6, offset: 95957},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2948, col: 10, offset: 97526},
															run: (*parser).callonNormalGroupElement13,
															expr: &charClassMatcher{
																pos:        position{line: 2948, col: 11, offset: 97527},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&andExpr{
															pos: position{line: 2894, col: 14, offset: 95965},
															expr: &choiceExpr{
																pos: position{line: 2894, col: 16, offset: 95967},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2894, col: 16, offset: 95967},
																		val:        "[.�]",
																		chars:      []rune{'.', '�'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 2958, col: 12, offset: 97749},
																		run: (*parser).callonNormalGroupElement18,
																		expr: &choiceExpr{
																			pos: position{line: 2958, col: 13, offset: 97750},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2958, col: 13, offset: 97750},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2958, col: 20, offset: 97757},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2958, col: 29, offset: 97766},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2962, col: 8, offset: 97839},
																		expr: &anyMatcher{
																			line: 2962, col: 9, offset: 97840,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2948, col: 10, offset: 97526},
										run: (*parser).callonNormalGroupElement25,
										expr: &charClassMatcher{
											pos:        position{line: 2948, col: 11, offset: 97527},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 2958, col: 12, offset: 97749},
										run: (*parser).callonNormalGroupElement27,
										expr: &choiceExpr{
											pos: position{line: 2958, col: 13, offset: 97750},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2958, col: 13, offset: 97750},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2958, col: 20, offset: 97757},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2958, col: 29, offset: 97766},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 991, col: 23, offset: 31326},
										run: (*parser).callonNormalGroupElement32,
										expr: &seqExpr{
											pos: position{line: 991, col: 23, offset: 31326},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 989, col: 32, offset: 31294},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 991, col: 51, offset: 31354},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 991, col: 56, offset: 31359},
														run: (*parser).callonNormalGroupElement36,
														expr: &oneOrMoreExpr{
															pos: position{line: 991, col: 56, offset: 31359},
															expr: &charClassMatcher{
																pos:        position{line: 991, col: 56, offset: 31359},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 989, col: 32, offset: 31294},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 999, col: 5, offset: 31772},
										run: (*parser).callonNormalGroupElement40,
										expr: &seqExpr{
											pos: position{line: 999, col: 5, offset: 31772},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 999, col: 5, offset: 31772},
													run: (*parser).callonNormalGroupElement42,
												},
												&litMatcher{
													pos:        position{line: 1002, col: 5, offset: 31829},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1002, col: 9, offset: 31833},
													expr: &actionExpr{
														pos: position{line: 2948, col: 10, offset: 97526},
														run: (*parser).callonNormalGroupElement45,
														expr: &charClassMatcher{
															pos:        position{line: 2948, col: 11, offset: 97527},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&andExpr{
													pos: position{line: 1002, col: 16, offset: 31840},
													expr: &choiceExpr{
														pos: position{line: 2965, col: 8, offset: 97889},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2958, col: 12, offset: 97749},
																run: (*parser).callonNormalGroupElement49,
																expr: &choiceExpr{
																	pos: position{line: 2958, col: 13, offset: 97750},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2958, col: 13, offset: 97750},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 20, offset: 97757},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 29, offset: 97766},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2962, col: 8, offset: 97839},
																expr: &anyMatcher{
																	line: 2962, col: 9, offset: 97840,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2899, col: 16, offset: 96088},
										run: (*parser).callonNormalGroupElement56,
										expr: &seqExpr{
											pos: position{line: 2899, col: 16, offset: 96088},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2899, col: 17, offset: 96089},
													val:        "[.,;!?]",
													chars:      []rune{'.', ',', ';', '!', '?'},
													ignoreCase: false,
													inverted:   false,
												},
												&andExpr{
													pos: position{line: 2899, col: 46, offset: 96118},
													expr: &choiceExpr{
														pos: position{line: 2899, col: 48, offset: 96120},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2948, col: 10, offset: 97526},
																run: (*parser).callonNormalGroupElement61,
																expr: &charClassMatcher{
																	pos:        position{line: 2948, col: 11, offset: 97527},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&actionExpr{
																pos: position{line: 2958, col: 12, offset: 97749},
																run: (*parser).callonNormalGroupElement63,
																expr: &choiceExpr{
																	pos: position{line: 2958, col: 13, offset: 97750},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2958, col: 13, offset: 97750},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 20, offset: 97757},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2958, col: 29, offset: 97766},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2962, col: 8, offset: 97839},
																expr: &anyMatcher{
																	line: 2962, col: 9, offset: 97840,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2530, col: 11, offset: 84924},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 2531, col: 11, offset: 84940},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2532, col: 11, offset: 84968},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2650, col: 5, offset: 88280},
										run: (*parser).callonNormalGroupElement73,
										expr: &seqExpr{
											pos: position{line: 2650, col: 5, offset: 88280},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2650, col: 5, offset: 88280},
													run: (*parser).callonNormalGroupElement75,
												},
												&labeledExpr{
													pos:   position{line: 2653, col: 5, offset: 88351},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2655, col: 9, offset: 88449},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2655, col: 9, offset: 88449},
																run: (*parser).callonNormalGroupElement78,
																expr: &choiceExpr{
																	pos: position{line: 535, col: 27, offset: 17427},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 535, col: 27, offset: 17427},
																			run: (*parser).callonNormalGroupElement80,
																			expr: &seqExpr{
																				pos: position{line: 535, col: 27, offset: 17427},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 535, col: 27, offset: 17427},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 535, col: 32, offset: 17432},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2936, col: 7, offset: 97248},
																							run: (*parser).callonNormalGroupElement84,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								expr: &charClassMatcher{
																									pos:        position{line: 2936, col: 7, offset: 97248},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 535, col: 40, offset: 17440},
																						expr: &actionExpr{
																							pos: position{line: 2948, col: 10, offset: 97526},
																							run: (*parser).callonNormalGroupElement88,
																							expr: &charClassMatcher{
																								pos:        position{line: 2948, col: 11, offset: 97527},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 535, col: 47, offset: 17447},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 535, col: 51, offset: 17451},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 545, col: 24, offset: 17864},
																							expr: &choiceExpr{
																								pos: position{line: 546, col: 5, offset: 17870},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 546, col: 6, offset: 17871},
																										run: (*parser).callonNormalGroupElement94,
																										expr: &seqExpr{
																											pos: position{line: 546, col: 6, offset: 17871},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 546, col: 6, offset: 17871},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 546, col: 14, offset: 17879},
																													expr: &charClassMatcher{
																														pos:        position{line: 546, col: 14, offset: 17879},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 493, col: 5, offset: 15873},
																										run: (*parser).callonNormalGroupElement99,
																										expr: &seqExpr{
																											pos: position{line: 493, col: 5, offset: 15873},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 493, col: 5, offset: 15873},
																													run: (*parser).callonNormalGroupElement101,
																												},
																												&labeledExpr{
																													pos:   position{line: 496, col: 5, offset: 15937},
																													label: "element",
																													expr: &choiceExpr{
																														pos: position{line: 496, col: 14, offset: 15946},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 507, col: 25, offset: 16408},
																																run: (*parser).callonNormalGroupElement104,
																																expr: &seqExpr{
																																	pos: position{line: 507, col: 25, offset: 16408},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 507, col: 25, offset: 16408},
																																			val:        "{counter:",
																																			ignoreCase: false,
																																			want:       "\"{counter:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 37, offset: 16420},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonNormalGroupElement108,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 507, col: 56, offset: 16439},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 507, col: 62, offset: 16445},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonNormalGroupElement115,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonNormalGroupElement120,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonNormalGroupElement122,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 507, col: 78, offset: 16461},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 511, col: 25, offset: 16563},
																																run: (*parser).callonNormalGroupElement126,
																																expr: &seqExpr{
																																	pos: position{line: 511, col: 25, offset: 16563},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 511, col: 25, offset: 16563},
																																			val:        "{counter2:",
																																			ignoreCase: false,
																																			want:       "\"{counter2:\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 38, offset: 16576},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonNormalGroupElement130,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 511, col: 57, offset: 16595},
																																			label: "start",
																																			expr: &zeroOrOneExpr{
																																				pos: position{line: 511, col: 63, offset: 16601},
																																				expr: &actionExpr{
																																					pos: position{line: 515, col: 17, offset: 16708},
																																					run: (*parser).callonNormalGroupElement137,
																																					expr: &seqExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 515, col: 17, offset: 16708},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 515, col: 21, offset: 16712},
																																								label: "start",
																																								expr: &choiceExpr{
																																									pos: position{line: 515, col: 28, offset: 16719},
																																									alternatives: []interface{}{
																																										&actionExpr{
																																											pos: position{line: 515, col: 28, offset: 16719},
																																											run: (*parser).callonNormalGroupElement142,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 515, col: 28, offset: 16719},
																																												val:        "[A-Za-z]",
																																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&actionExpr{
																																											pos: position{line: 517, col: 9, offset: 16773},
																																											run: (*parser).callonNormalGroupElement144,
																																											expr: &oneOrMoreExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 517, col: 9, offset: 16773},
																																													val:        "[0-9]",
																																													ranges:     []rune{'0', '9'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 511, col: 79, offset: 16617},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 500, col: 31, offset: 16063},
																																run: (*parser).callonNormalGroupElement148,
																																expr: &seqExpr{
																																	pos: position{line: 500, col: 31, offset: 16063},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 500, col: 31, offset: 16063},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 500, col: 35, offset: 16067},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 162, col: 18, offset: 4814},
																																				run: (*parser).callonNormalGroupElement152,
																																				expr: &seqExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 162, col: 18, offset: 4814},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 162, col: 28, offset: 4824},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 162, col: 29, offset: 4825},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 500, col: 54, offset: 16086},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 550, col: 8, offset: 18103},
																										run: (*parser).callonNormalGroupElement158,
																										expr: &litMatcher{
																											pos:        position{line: 550, col: 8, offset: 18103},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 535, col: 79, offset: 17479},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 537, col: 9, offset: 17552},
																			run: (*parser).callonNormalGroupElement161,
																			expr: &seqExpr{
																				pos: position{line: 537, col: 9, offset: 17552},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 537, col: 9, offset: 17552},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 537, col: 14, offset: 17557},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2936, col: 7, offset: 97248},
																							run: (*parser).callonNormalGroupElement165,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								expr: &charClassMatcher{
																									pos:        position{line: 2936, col: 7, offset: 97248},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 537, col: 22, offset: 17565},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2658, col: 11, offset: 88553},
																run: (*parser).callonNormalGroupElement169,
																expr: &charClassMatcher{
																	pos:        position{line: 2658, col: 12, offset: 88554},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 493, col: 5, offset: 15873},
										run: (*parser).callonNormalGroupElement171,
										expr: &seqExpr{
											pos: position{line: 493, col: 5, offset: 15873},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 493, col: 5, offset: 15873},
													run: (*parser).callonNormalGroupElement173,
												},
												&labeledExpr{
													pos:   position{line: 496, col: 5, offset: 15937},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 496, col: 14, offset: 15946},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 507, col: 25, offset: 16408},
																run: (*parser).callonNormalGroupElement176,
																expr: &seqExpr{
																	pos: position{line: 507, col: 25, offset: 16408},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 507, col: 25, offset: 16408},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 507, col: 37, offset: 16420},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonNormalGroupElement180,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 507, col: 56, offset: 16439},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 507, col: 62, offset: 16445},
																				expr: &actionExpr{
																					pos: position{line: 515, col: 17, offset: 16708},
																					run: (*parser).callonNormalGroupElement187,
																					expr: &seqExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 515, col: 17, offset: 16708},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 515, col: 21, offset: 16712},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 515, col: 28, offset: 16719},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 515, col: 28, offset: 16719},
																											run: (*parser).callonNormalGroupElement192,
																											expr: &charClassMatcher{
																												pos:        position{line: 515, col: 28, offset: 16719},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 517, col: 9, offset: 16773},
																											run: (*parser).callonNormalGroupElement194,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												expr: &charClassMatcher{
																													pos:        position{line: 517, col: 9, offset: 16773},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 507, col: 78, offset: 16461},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 511, col: 25, offset: 16563},
																run: (*parser).callonNormalGroupElement198,
																expr: &seqExpr{
																	pos: position{line: 511, col: 25, offset: 16563},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 511, col: 25, offset: 16563},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 511, col: 38, offset: 16576},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonNormalGroupElement202,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 511, col: 57, offset: 16595},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 511, col: 63, offset: 16601},
																				expr: &actionExpr{
																					pos: position{line: 515, col: 17, offset: 16708},
																					run: (*parser).callonNormalGroupElement209,
																					expr: &seqExpr{
																						pos: position{line: 515, col: 17, offset: 16708},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 515, col: 17, offset: 16708},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 515, col: 21, offset: 16712},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 515, col: 28, offset: 16719},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 515, col: 28, offset: 16719},
																											run: (*parser).callonNormalGroupElement214,
																											expr: &charClassMatcher{
																												pos:        position{line: 515, col: 28, offset: 16719},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 517, col: 9, offset: 16773},
																											run: (*parser).callonNormalGroupElement216,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 517, col: 9, offset: 16773},
																												expr: &charClassMatcher{
																													pos:        position{line: 517, col: 9, offset: 16773},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 511, col: 79, offset: 16617},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 500, col: 31, offset: 16063},
																run: (*parser).callonNormalGroupElement220,
																expr: &seqExpr{
																	pos: position{line: 500, col: 31, offset: 16063},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 500, col: 31, offset: 16063},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 500, col: 35, offset: 16067},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 162, col: 18, offset: 4814},
																				run: (*parser).callonNormalGroupElement224,
																				expr: &seqExpr{
																					pos: position{line: 162, col: 18, offset: 4814},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 162, col: 18, offset: 4814},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 162, col: 28, offset: 4824},
																							expr: &charClassMatcher{
																								pos:        position{line: 162, col: 29, offset: 4825},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 500, col: 54, offset: 16086},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2683, col: 15, offset: 89521},
										run: (*parser).callonNormalGroupElement230,
										expr: &litMatcher{
											pos:        position{line: 2683, col: 15, offset: 89521},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2689, col: 14, offset: 89636},
										run: (*parser).callonNormalGroupElement232,
										expr: &litMatcher{
											pos:        position{line: 2689, col: 14, offset: 89636},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2693, col: 14, offset: 89712},
										run: (*parser).callonNormalGroupElement234,
										expr: &litMatcher{
											pos:        position{line: 2693, col: 14, offset: 89712},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2697, col: 15, offset: 89790},
										run: (*parser).callonNormalGroupElement236,
										expr: &litMatcher{
											pos:        position{line: 2697, col: 15, offset: 89790},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2701, col: 13, offset: 89865},
										run: (*parser).callonNormalGroupElement238,
										expr: &litMatcher{
											pos:        position{line: 2701, col: 13, offset: 89865},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2709, col: 22, offset: 90171},
										run: (*parser).callonNormalGroupElement240,
										expr: &seqExpr{
											pos: position{line: 2709, col: 22, offset: 90171},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2860, col: 13, offset: 94811},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2709, col: 31, offset: 90180},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2709, col: 35, offset: 90184},
													expr: &charClassMatcher{
														pos:        position{line: 2709, col: 36, offset: 90185},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2905, col: 12, offset: 96299},
										run: (*parser).callonNormalGroupElement246,
										expr: &anyMatcher{
											line: 2905, col: 12, offset: 96299,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostReplacementsGroup",
			pos:  position{line: 2540, col: 1, offset: 85226},
			expr: &actionExpr{
				pos: position{line: 2541, col: 5, offset: 85257},
				run: (*parser).callonPostReplacementsGroup1,
				expr: &seqExpr{
					pos: position{line: 2541, col: 5, offset: 85257},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2541, col: 5, offset: 85257},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2541, col: 14, offset: 85266},
								expr: &actionExpr{
									pos: position{line: 2547, col: 5, offset: 85434},
									run: (*parser).callonPostReplacementsGroup5,
									expr: &seqExpr{
										pos: position{line: 2547, col: 5, offset: 85434},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2547, col: 5, offset: 85434},
												expr: &notExpr{
													pos: position{line: 2962, col: 8, offset: 97839},
													expr: &anyMatcher{
														line: 2962, col: 9, offset: 97840,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2548, col: 5, offset: 85443},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 2549, col: 9, offset: 85461},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2893, col: 5, offset: 95937},
															run: (*parser).callonPostReplacementsGroup12,
															expr: &seqExpr{
																pos: position{line: 2893, col: 5, offset: 95937},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 2893, col: 5, offset: 95937},
																		expr: &charClassMatcher{
																			pos:        position{line: 2893, col: 5, offset: 95937},
																			val:        "[,;!?0-9\\pL]",
																			chars:      []rune{',', ';', '!', '?'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2894, col: 6, offset: 95957},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2948, col: 10, offset: 97526},
																				run: (*parser).callonPostReplacementsGroup17,
																				expr: &charClassMatcher{
																					pos:        position{line: 2948, col: 11, offset: 97527},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&andExpr{
																				pos: position{line: 2894, col: 14, offset: 95965},
																				expr: &choiceExpr{
																					pos: position{line: 2894, col: 16, offset: 95967},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2894, col: 16, offset: 95967},
																							val:        "[.�]",
																							chars:      []rune{'.', '�'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 2958, col: 12, offset: 97749},
																							run: (*parser).callonPostReplacementsGroup22,
																							expr: &choiceExpr{
																								pos: position{line: 2958, col: 13, offset: 97750},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2958, col: 13, offset: 97750},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2958, col: 20, offset: 97757},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2958, col: 29, offset: 97766},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2962, col: 8, offset: 97839},
																							expr: &anyMatcher{
																								line: 2962, col: 9, offset: 97840,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2948, col: 10, offset: 97526},
															run: (*parser).callonPostReplacementsGroup29,
															expr: &charClassMatcher{
																pos:        position{line: 2948, col: 11, offset: 97527},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&actionExpr{
															pos: position{line: 999, col: 5, offset: 31772},
															run: (*parser).callonPostReplacementsGroup31,
															expr: &seqExpr{
																pos: position{line: 999, col: 5, offset: 31772},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 999, col: 5, offset: 31772},
																		run: (*parser).callonPostReplacementsGroup33,
																	},
																	&litMatcher{
																		pos:        position{line: 1002, col: 5, offset: 31829},
																		val:        "+",
																		ignoreCase: false,
																		want:       "\"+\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1002, col: 9, offset: 31833},
																		expr: &actionExpr{
																			pos: position{line: 2948, col: 10, offset: 97526},
																			run: (*parser).callonPostReplacementsGroup36,
																			expr: &charClassMatcher{
																				pos:        position{line: 2948, col: 11, offset: 97527},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&andExpr{
																		pos: position{line: 1002, col: 16, offset: 31840},
																		expr: &choiceExpr{
																			pos: position{line: 2965, col: 8, offset: 97889},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2958, col: 12, offset: 97749},
																					run: (*parser).callonPostReplacementsGroup40,
																					expr: &choiceExpr{
																						pos: position{line: 2958, col: 13, offset: 97750},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2958, col: 13, offset: 97750},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 20, offset: 97757},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 29, offset: 97766},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2962, col: 8, offset: 97839},
																					expr: &anyMatcher{
																						line: 2962, col: 9, offset: 97840,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2958, col: 12, offset: 97749},
															run: (*parser).callonPostReplacementsGroup47,
															expr: &choiceExpr{
																pos: position{line: 2958, col: 13, offset: 97750},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2958, col: 13, offset: 97750},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 20, offset: 97757},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2958, col: 29, offset: 97766},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 991, col: 23, offset: 31326},
															run: (*parser).callonPostReplacementsGroup52,
															expr: &seqExpr{
																pos: position{line: 991, col: 23, offset: 31326},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 989, col: 32, offset: 31294},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 991, col: 51, offset: 31354},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 991, col: 56, offset: 31359},
																			run: (*parser).callonPostReplacementsGroup56,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 991, col: 56, offset: 31359},
																				expr: &charClassMatcher{
																					pos:        position{line: 991, col: 56, offset: 31359},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 989, col: 32, offset: 31294},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2905, col: 12, offset: 96299},
															run: (*parser).callonPostReplacementsGroup60,
															expr: &anyMatcher{
																line: 2905, col: 12, offset: 96299,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2962, col: 8, offset: 97839},
							expr: &anyMatcher{
								line: 2962, col: 9, offset: 97840,
							},
						},
					},
				},
			},
		},
		{
			name: "QuotesGroup",
			pos:  position{line: 2560, col: 1, offset: 85787},
			expr: &actionExpr{
				pos: position{line: 2560, col: 16, offset: 85802},
				run: (*parser).callonQuotesGroup1,
				expr: &seqExpr{
					pos: position{line: 2560, col: 16, offset: 85802},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2560, col: 16, offset: 85802},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2560, col: 25, offset: 85811},
								expr: &choiceExpr{
									pos: position{line: 2561, col: 5, offset: 85817},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2893, col: 5, offset: 95937},
											run: (*parser).callonQuotesGroup6,
											expr: &seqExpr{
												pos: position{line: 2893, col: 5, offset: 95937},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2893, col: 5, offset: 95937},
														expr: &charClassMatcher{
															pos:        position{line: 2893, col: 5, offset: 95937},
															val:        "[,;!?0-9\\pL]",
															chars:      []rune{',', ';', '!', '?'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2894, col: 6, offset: 95957},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2948, col: 10, offset: 97526},
																run: (*parser).callonQuotesGroup11,
																expr: &charClassMatcher{
																	pos:        position{line: 2948, col: 11, offset: 97527},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andExpr{
																pos: position{line: 2894, col: 14, offset: 95965},
																expr: &choiceExpr{
																	pos: position{line: 2894, col: 16, offset: 95967},
																	alternatives: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2894, col: 16, offset: 95967},
																			val:        "[.�]",
																			chars:      []rune{'.', '�'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonQuotesGroup16,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2562, col: 7, offset: 85834},
											name: "Quote",
										},
										&actionExpr{
											pos: position{line: 991, col: 23, offset: 31326},
											run: (*parser).callonQuotesGroup24,
											expr: &seqExpr{
												pos: position{line: 991, col: 23, offset: 31326},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 989, col: 32, offset: 31294},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 991, col: 51, offset: 31354},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 991, col: 56, offset: 31359},
															run: (*parser).callonQuotesGroup28,
															expr: &oneOrMoreExpr{
																pos: position{line: 991, col: 56, offset: 31359},
																expr: &charClassMatcher{
																	pos:        position{line: 991, col: 56, offset: 31359},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 989, col: 32, offset: 31294},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2905, col: 12, offset: 96299},
											run: (*parser).callonQuotesGroup32,
											expr: &anyMatcher{
												line: 2905, col: 12, offset: 96299,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2962, col: 8, offset: 97839},
							expr: &anyMatcher{
								line: 2962, col: 9, offset: 97840,
							},
						},
					},
				},
			},
		},
		{
			name: "ReplacementsGroup",
			pos:  position{line: 2569, col: 1, offset: 86078},
			expr: &actionExpr{
				pos: position{line: 2569, col: 22, offset: 86099},
				run: (*parser).callonReplacementsGroup1,
				expr: &seqExpr{
					pos: position{line: 2569, col: 22, offset: 86099},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2569, col: 22, offset: 86099},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2569, col: 31, offset: 86108},
								expr: &choiceExpr{
									pos: position{line: 2570, col: 5, offset: 86114},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2893, col: 5, offset: 95937},
											run: (*parser).callonReplacementsGroup6,
											expr: &seqExpr{
												pos: position{line: 2893, col: 5, offset: 95937},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2893, col: 5, offset: 95937},
														expr: &charClassMatcher{
															pos:        position{line: 2893, col: 5, offset: 95937},
															val:        "[,;!?0-9\\pL]",
															chars:      []rune{',', ';', '!', '?'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2894, col: 6, offset: 95957},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2948, col: 10, offset: 97526},
																run: (*parser).callonReplacementsGroup11,
																expr: &charClassMatcher{
																	pos:        position{line: 2948, col: 11, offset: 97527},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andExpr{
																pos: position{line: 2894, col: 14, offset: 95965},
																expr: &choiceExpr{
																	pos: position{line: 2894, col: 16, offset: 95967},
																	alternatives: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2894, col: 16, offset: 95967},
																			val:        "[.�]",
																			chars:      []rune{'.', '�'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonReplacementsGroup16,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2639, col: 5, offset: 88059},
											run: (*parser).callonReplacementsGroup23,
											expr: &seqExpr{
												pos: position{line: 2639, col: 5, offset: 88059},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 2639, col: 5, offset: 88059},
														run: (*parser).callonReplacementsGroup25,
													},
													&labeledExpr{
														pos:   position{line: 2642, col: 5, offset: 88125},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 2681, col: 11, offset: 89427},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2683, col: 15, offset: 89521},
																	run: (*parser).callonReplacementsGroup28,
																	expr: &litMatcher{
																		pos:        position{line: 2683, col: 15, offset: 89521},
																		val:        "`'",
																		ignoreCase: false,
																		want:       "\"`'\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2689, col: 14, offset: 89636},
																	run: (*parser).callonReplacementsGroup30,
																	expr: &litMatcher{
																		pos:        position{line: 2689, col: 14, offset: 89636},
																		val:        "(C)",
																		ignoreCase: false,
																		want:       "\"(C)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2693, col: 14, offset: 89712},
																	run: (*parser).callonReplacementsGroup32,
																	expr: &litMatcher{
																		pos:        position{line: 2693, col: 14, offset: 89712},
																		val:        "(TM)",
																		ignoreCase: false,
																		want:       "\"(TM)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2697, col: 15, offset: 89790},
																	run: (*parser).callonReplacementsGroup34,
																	expr: &litMatcher{
																		pos:        position{line: 2697, col: 15, offset: 89790},
																		val:        "(R)",
																		ignoreCase: false,
																		want:       "\"(R)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2701, col: 13, offset: 89865},
																	run: (*parser).callonReplacementsGroup36,
																	expr: &litMatcher{
																		pos:        position{line: 2701, col: 13, offset: 89865},
																		val:        "...",
																		ignoreCase: false,
																		want:       "\"...\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2709, col: 22, offset: 90171},
																	run: (*parser).callonReplacementsGroup38,
																	expr: &seqExpr{
																		pos: position{line: 2709, col: 22, offset: 90171},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2860, col: 13, offset: 94811},
																				val:        "[0-9\\pL]",
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&litMatcher{
																				pos:        position{line: 2709, col: 31, offset: 90180},
																				val:        "'",
																				ignoreCase: false,
																				want:       "\"'\"",
																			},
																			&andExpr{
																				pos: position{line: 2709, col: 35, offset: 90184},
																				expr: &charClassMatcher{
																					pos:        position{line: 2709, col: 36, offset: 90185},
																					val:        "[\\pL]",
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 991, col: 23, offset: 31326},
											run: (*parser).callonReplacementsGroup44,
											expr: &seqExpr{
												pos: position{line: 991, col: 23, offset: 31326},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 989, col: 32, offset: 31294},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 991, col: 51, offset: 31354},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 991, col: 56, offset: 31359},
															run: (*parser).callonReplacementsGroup48,
															expr: &oneOrMoreExpr{
																pos: position{line: 991, col: 56, offset: 31359},
																expr: &charClassMatcher{
																	pos:        position{line: 991, col: 56, offset: 31359},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 989, col: 32, offset: 31294},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2905, col: 12, offset: 96299},
											run: (*parser).callonReplacementsGroup52,
											expr: &anyMatcher{
												line: 2905, col: 12, offset: 96299,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2962, col: 8, offset: 97839},
							expr: &anyMatcher{
								line: 2962, col: 9, offset: 97840,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharactersGroup",
			pos:  position{line: 2578, col: 1, offset: 86406},
			expr: &actionExpr{
				pos: position{line: 2578, col: 27, offset: 86432},
				run: (*parser).callonSpecialCharactersGroup1,
				expr: &seqExpr{
					pos: position{line: 2578, col: 27, offset: 86432},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2578, col: 27, offset: 86432},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2578, col: 36, offset: 86441},
								expr: &choiceExpr{
									pos: position{line: 2579, col: 5, offset: 86447},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2893, col: 5, offset: 95937},
											run: (*parser).callonSpecialCharactersGroup6,
											expr: &seqExpr{
												pos: position{line: 2893, col: 5, offset: 95937},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2893, col: 5, offset: 95937},
														expr: &charClassMatcher{
															pos:        position{line: 2893, col: 5, offset: 95937},
															val:        "[,;!?0-9\\pL]",
															chars:      []rune{',', ';', '!', '?'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2894, col: 6, offset: 95957},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2948, col: 10, offset: 97526},
																run: (*parser).callonSpecialCharactersGroup11,
																expr: &charClassMatcher{
																	pos:        position{line: 2948, col: 11, offset: 97527},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andExpr{
																pos: position{line: 2894, col: 14, offset: 95965},
																expr: &choiceExpr{
																	pos: position{line: 2894, col: 16, offset: 95967},
																	alternatives: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2894, col: 16, offset: 95967},
																			val:        "[.�]",
																			chars:      []rune{'.', '�'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonSpecialCharactersGroup16,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2650, col: 5, offset: 88280},
											run: (*parser).callonSpecialCharactersGroup23,
											expr: &seqExpr{
												pos: position{line: 2650, col: 5, offset: 88280},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 2650, col: 5, offset: 88280},
														run: (*parser).callonSpecialCharactersGroup25,
													},
													&labeledExpr{
														pos:   position{line: 2653, col: 5, offset: 88351},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 2655, col: 9, offset: 88449},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2655, col: 9, offset: 88449},
																	run: (*parser).callonSpecialCharactersGroup28,
																	expr: &choiceExpr{
																		pos: position{line: 535, col: 27, offset: 17427},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 535, col: 27, offset: 17427},
																				run: (*parser).callonSpecialCharactersGroup30,
																				expr: &seqExpr{
																					pos: position{line: 535, col: 27, offset: 17427},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 535, col: 27, offset: 17427},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 535, col: 32, offset: 17432},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								run: (*parser).callonSpecialCharactersGroup34,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2936, col: 7, offset: 97248},
																									expr: &charClassMatcher{
																										pos:        position{line: 2936, col: 7, offset: 97248},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 535, col: 40, offset: 17440},
																							expr: &actionExpr{
																								pos: position{line: 2948, col: 10, offset: 97526},
																								run: (*parser).callonSpecialCharactersGroup38,
																								expr: &charClassMatcher{
																									pos:        position{line: 2948, col: 11, offset: 97527},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 535, col: 47, offset: 17447},
																							val:        ",",
																							ignoreCase: false,
																							want:       "\",\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 535, col: 51, offset: 17451},
																							label: "label",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 545, col: 24, offset: 17864},
																								expr: &choiceExpr{
																									pos: position{line: 546, col: 5, offset: 17870},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 546, col: 6, offset: 17871},
																											run: (*parser).callonSpecialCharactersGroup44,
																											expr: &seqExpr{
																												pos: position{line: 546, col: 6, offset: 17871},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 546, col: 6, offset: 17871},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 546, col: 14, offset: 17879},
																														expr: &charClassMatcher{
																															pos:        position{line: 546, col: 14, offset: 17879},
																															val:        "[^\\r\\n{<>]",
																															chars:      []rune{'\r', '\n', '{', '<', '>'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 493, col: 5, offset: 15873},
																											run: (*parser).callonSpecialCharactersGroup49,
																											expr: &seqExpr{
																												pos: position{line: 493, col: 5, offset: 15873},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 493, col: 5, offset: 15873},
																														run: (*parser).callonSpecialCharactersGroup51,
																													},
																													&labeledExpr{
																														pos:   position{line: 496, col: 5, offset: 15937},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 496, col: 14, offset: 15946},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 507, col: 25, offset: 16408},
																																	run: (*parser).callonSpecialCharactersGroup54,
																																	expr: &seqExpr{
																																		pos: position{line: 507, col: 25, offset: 16408},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 507, col: 25, offset: 16408},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 507, col: 37, offset: 16420},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					run: (*parser).callonSpecialCharactersGroup58,
																																					expr: &seqExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 162, col: 18, offset: 4814},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 162, col: 28, offset: 4824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 162, col: 29, offset: 4825},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 507, col: 56, offset: 16439},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 507, col: 62, offset: 16445},
																																					expr: &actionExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						run: (*parser).callonSpecialCharactersGroup65,
																																						expr: &seqExpr{
																																							pos: position{line: 515, col: 17, offset: 16708},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 515, col: 17, offset: 16708},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 515, col: 21, offset: 16712},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 515, col: 28, offset: 16719},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 515, col: 28, offset: 16719},
																																												run: (*parser).callonSpecialCharactersGroup70,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 515, col: 28, offset: 16719},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												run: (*parser).callonSpecialCharactersGroup72,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 517, col: 9, offset: 16773},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 517, col: 9, offset: 16773},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 507, col: 78, offset: 16461},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 511, col: 25, offset: 16563},
																																	run: (*parser).callonSpecialCharactersGroup76,
																																	expr: &seqExpr{
																																		pos: position{line: 511, col: 25, offset: 16563},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 511, col: 25, offset: 16563},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 511, col: 38, offset: 16576},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					run: (*parser).callonSpecialCharactersGroup80,
																																					expr: &seqExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 162, col: 18, offset: 4814},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 162, col: 28, offset: 4824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 162, col: 29, offset: 4825},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 511, col: 57, offset: 16595},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 511, col: 63, offset: 16601},
																																					expr: &actionExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						run: (*parser).callonSpecialCharactersGroup87,
																																						expr: &seqExpr{
																																							pos: position{line: 515, col: 17, offset: 16708},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 515, col: 17, offset: 16708},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 515, col: 21, offset: 16712},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 515, col: 28, offset: 16719},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 515, col: 28, offset: 16719},
																																												run: (*parser).callonSpecialCharactersGroup92,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 515, col: 28, offset: 16719},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												run: (*parser).callonSpecialCharactersGroup94,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 517, col: 9, offset: 16773},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 517, col: 9, offset: 16773},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 511, col: 79, offset: 16617},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 500, col: 31, offset: 16063},
																																	run: (*parser).callonSpecialCharactersGroup98,
																																	expr: &seqExpr{
																																		pos: position{line: 500, col: 31, offset: 16063},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 500, col: 31, offset: 16063},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 500, col: 35, offset: 16067},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					run: (*parser).callonSpecialCharactersGroup102,
																																					expr: &seqExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 162, col: 18, offset: 4814},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 162, col: 28, offset: 4824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 162, col: 29, offset: 4825},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 500, col: 54, offset: 16086},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 550, col: 8, offset: 18103},
																											run: (*parser).callonSpecialCharactersGroup108,
																											expr: &litMatcher{
																												pos:        position{line: 550, col: 8, offset: 18103},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 535, col: 79, offset: 17479},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 537, col: 9, offset: 17552},
																				run: (*parser).callonSpecialCharactersGroup111,
																				expr: &seqExpr{
																					pos: position{line: 537, col: 9, offset: 17552},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 537, col: 9, offset: 17552},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 537, col: 14, offset: 17557},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								run: (*parser).callonSpecialCharactersGroup115,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2936, col: 7, offset: 97248},
																									expr: &charClassMatcher{
																										pos:        position{line: 2936, col: 7, offset: 97248},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 537, col: 22, offset: 17565},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2658, col: 11, offset: 88553},
																	run: (*parser).callonSpecialCharactersGroup119,
																	expr: &charClassMatcher{
																		pos:        position{line: 2658, col: 12, offset: 88554},
																		val:        "[<>&]",
																		chars:      []rune{'<', '>', '&'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 991, col: 23, offset: 31326},
											run: (*parser).callonSpecialCharactersGroup121,
											expr: &seqExpr{
												pos: position{line: 991, col: 23, offset: 31326},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 989, col: 32, offset: 31294},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 991, col: 51, offset: 31354},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 991, col: 56, offset: 31359},
															run: (*parser).callonSpecialCharactersGroup125,
															expr: &oneOrMoreExpr{
																pos: position{line: 991, col: 56, offset: 31359},
																expr: &charClassMatcher{
																	pos:        position{line: 991, col: 56, offset: 31359},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 989, col: 32, offset: 31294},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2905, col: 12, offset: 96299},
											run: (*parser).callonSpecialCharactersGroup129,
											expr: &anyMatcher{
												line: 2905, col: 12, offset: 96299,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2962, col: 8, offset: 97839},
							expr: &anyMatcher{
								line: 2962, col: 9, offset: 97840,
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimGroup",
			pos:  position{line: 2586, col: 1, offset: 86673},
			expr: &actionExpr{
				pos: position{line: 2586, col: 18, offset: 86690},
				run: (*parser).callonVerbatimGroup1,
				expr: &seqExpr{
					pos: position{line: 2586, col: 18, offset: 86690},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2586, col: 18, offset: 86690},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2586, col: 27, offset: 86699},
								expr: &choiceExpr{
									pos: position{line: 2587, col: 5, offset: 86705},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2893, col: 5, offset: 95937},
											run: (*parser).callonVerbatimGroup6,
											expr: &seqExpr{
												pos: position{line: 2893, col: 5, offset: 95937},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2893, col: 5, offset: 95937},
														expr: &charClassMatcher{
															pos:        position{line: 2893, col: 5, offset: 95937},
															val:        "[,;!?0-9\\pL]",
															chars:      []rune{',', ';', '!', '?'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2894, col: 6, offset: 95957},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2948, col: 10, offset: 97526},
																run: (*parser).callonVerbatimGroup11,
																expr: &charClassMatcher{
																	pos:        position{line: 2948, col: 11, offset: 97527},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andExpr{
																pos: position{line: 2894, col: 14, offset: 95965},
																expr: &choiceExpr{
																	pos: position{line: 2894, col: 16, offset: 95967},
																	alternatives: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2894, col: 16, offset: 95967},
																			val:        "[.�]",
																			chars:      []rune{'.', '�'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&actionExpr{
																			pos: position{line: 2958, col: 12, offset: 97749},
																			run: (*parser).callonVerbatimGroup16,
																			expr: &choiceExpr{
																				pos: position{line: 2958, col: 13, offset: 97750},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2958, col: 13, offset: 97750},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 20, offset: 97757},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2958, col: 29, offset: 97766},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2962, col: 8, offset: 97839},
																			expr: &anyMatcher{
																				line: 2962, col: 9, offset: 97840,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2588, col: 7, offset: 86722},
											name: "Callout",
										},
										&actionExpr{
											pos: position{line: 2650, col: 5, offset: 88280},
											run: (*parser).callonVerbatimGroup24,
											expr: &seqExpr{
												pos: position{line: 2650, col: 5, offset: 88280},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 2650, col: 5, offset: 88280},
														run: (*parser).callonVerbatimGroup26,
													},
													&labeledExpr{
														pos:   position{line: 2653, col: 5, offset: 88351},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 2655, col: 9, offset: 88449},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2655, col: 9, offset: 88449},
																	run: (*parser).callonVerbatimGroup29,
																	expr: &choiceExpr{
																		pos: position{line: 535, col: 27, offset: 17427},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 535, col: 27, offset: 17427},
																				run: (*parser).callonVerbatimGroup31,
																				expr: &seqExpr{
																					pos: position{line: 535, col: 27, offset: 17427},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 535, col: 27, offset: 17427},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 535, col: 32, offset: 17432},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								run: (*parser).callonVerbatimGroup35,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2936, col: 7, offset: 97248},
																									expr: &charClassMatcher{
																										pos:        position{line: 2936, col: 7, offset: 97248},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 535, col: 40, offset: 17440},
																							expr: &actionExpr{
																								pos: position{line: 2948, col: 10, offset: 97526},
																								run: (*parser).callonVerbatimGroup39,
																								expr: &charClassMatcher{
																									pos:        position{line: 2948, col: 11, offset: 97527},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 535, col: 47, offset: 17447},
																							val:        ",",
																							ignoreCase: false,
																							want:       "\",\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 535, col: 51, offset: 17451},
																							label: "label",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 545, col: 24, offset: 17864},
																								expr: &choiceExpr{
																									pos: position{line: 546, col: 5, offset: 17870},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 546, col: 6, offset: 17871},
																											run: (*parser).callonVerbatimGroup45,
																											expr: &seqExpr{
																												pos: position{line: 546, col: 6, offset: 17871},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 546, col: 6, offset: 17871},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 546, col: 14, offset: 17879},
																														expr: &charClassMatcher{
																															pos:        position{line: 546, col: 14, offset: 17879},
																															val:        "[^\\r\\n{<>]",
																															chars:      []rune{'\r', '\n', '{', '<', '>'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 493, col: 5, offset: 15873},
																											run: (*parser).callonVerbatimGroup50,
																											expr: &seqExpr{
																												pos: position{line: 493, col: 5, offset: 15873},
																												exprs: []interface{}{
																													&andCodeExpr{
																														pos: position{line: 493, col: 5, offset: 15873},
																														run: (*parser).callonVerbatimGroup52,
																													},
																													&labeledExpr{
																														pos:   position{line: 496, col: 5, offset: 15937},
																														label: "element",
																														expr: &choiceExpr{
																															pos: position{line: 496, col: 14, offset: 15946},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 507, col: 25, offset: 16408},
																																	run: (*parser).callonVerbatimGroup55,
																																	expr: &seqExpr{
																																		pos: position{line: 507, col: 25, offset: 16408},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 507, col: 25, offset: 16408},
																																				val:        "{counter:",
																																				ignoreCase: false,
																																				want:       "\"{counter:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 507, col: 37, offset: 16420},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					run: (*parser).callonVerbatimGroup59,
																																					expr: &seqExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 162, col: 18, offset: 4814},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 162, col: 28, offset: 4824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 162, col: 29, offset: 4825},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 507, col: 56, offset: 16439},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 507, col: 62, offset: 16445},
																																					expr: &actionExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						run: (*parser).callonVerbatimGroup66,
																																						expr: &seqExpr{
																																							pos: position{line: 515, col: 17, offset: 16708},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 515, col: 17, offset: 16708},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 515, col: 21, offset: 16712},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 515, col: 28, offset: 16719},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 515, col: 28, offset: 16719},
																																												run: (*parser).callonVerbatimGroup71,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 515, col: 28, offset: 16719},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												run: (*parser).callonVerbatimGroup73,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 517, col: 9, offset: 16773},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 517, col: 9, offset: 16773},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 507, col: 78, offset: 16461},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 511, col: 25, offset: 16563},
																																	run: (*parser).callonVerbatimGroup77,
																																	expr: &seqExpr{
																																		pos: position{line: 511, col: 25, offset: 16563},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 511, col: 25, offset: 16563},
																																				val:        "{counter2:",
																																				ignoreCase: false,
																																				want:       "\"{counter2:\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 511, col: 38, offset: 16576},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					run: (*parser).callonVerbatimGroup81,
																																					expr: &seqExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 162, col: 18, offset: 4814},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 162, col: 28, offset: 4824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 162, col: 29, offset: 4825},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 511, col: 57, offset: 16595},
																																				label: "start",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 511, col: 63, offset: 16601},
																																					expr: &actionExpr{
																																						pos: position{line: 515, col: 17, offset: 16708},
																																						run: (*parser).callonVerbatimGroup88,
																																						expr: &seqExpr{
																																							pos: position{line: 515, col: 17, offset: 16708},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 515, col: 17, offset: 16708},
																																									val:        ":",
																																									ignoreCase: false,
																																									want:       "\":\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 515, col: 21, offset: 16712},
																																									label: "start",
																																									expr: &choiceExpr{
																																										pos: position{line: 515, col: 28, offset: 16719},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 515, col: 28, offset: 16719},
																																												run: (*parser).callonVerbatimGroup93,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 515, col: 28, offset: 16719},
																																													val:        "[A-Za-z]",
																																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																											&actionExpr{
																																												pos: position{line: 517, col: 9, offset: 16773},
																																												run: (*parser).callonVerbatimGroup95,
																																												expr: &oneOrMoreExpr{
																																													pos: position{line: 517, col: 9, offset: 16773},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 517, col: 9, offset: 16773},
																																														val:        "[0-9]",
																																														ranges:     []rune{'0', '9'},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 511, col: 79, offset: 16617},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 500, col: 31, offset: 16063},
																																	run: (*parser).callonVerbatimGroup99,
																																	expr: &seqExpr{
																																		pos: position{line: 500, col: 31, offset: 16063},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 500, col: 31, offset: 16063},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 500, col: 35, offset: 16067},
																																				label: "name",
																																				expr: &actionExpr{
																																					pos: position{line: 162, col: 18, offset: 4814},
																																					run: (*parser).callonVerbatimGroup103,
																																					expr: &seqExpr{
																																						pos: position{line: 162, col: 18, offset: 4814},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 162, col: 18, offset: 4814},
																																								val:        "[_0-9\\pL]",
																																								chars:      []rune{'_'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 162, col: 28, offset: 4824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 162, col: 29, offset: 4825},
																																									val:        "[-0-9\\pL]",
																																									chars:      []rune{'-'},
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 500, col: 54, offset: 16086},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 550, col: 8, offset: 18103},
																											run: (*parser).callonVerbatimGroup109,
																											expr: &litMatcher{
																												pos:        position{line: 550, col: 8, offset: 18103},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 535, col: 79, offset: 17479},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 537, col: 9, offset: 17552},
																				run: (*parser).callonVerbatimGroup112,
																				expr: &seqExpr{
																					pos: position{line: 537, col: 9, offset: 17552},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 537, col: 9, offset: 17552},
																							val:        "<<",
																							ignoreCase: false,
																							want:       "\"<<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 537, col: 14, offset: 17557},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2936, col: 7, offset: 97248},
																								run: (*parser).callonVerbatimGroup116,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2936, col: 7, offset: 97248},
																									expr: &charClassMatcher{
																										pos:        position{line: 2936, col: 7, offset: 97248},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 537, col: 22, offset: 17565},
																							val:        ">>",
																							ignoreCase: false,
																							want:       "\">>\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2658, col: 11, offset: 88553},
																	run: (*parser).callonVerbatimGroup120,
																	expr: &charClassMatcher{
																		pos:        position{line: 2658, col: 12, offset: 88554},
																		val:        "[<>&]",
																		chars:      []rune{'<', '>', '&'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 991, col: 23, offset: 31326},
											run: (*parser).callonVerbatimGroup122,
											expr: &seqExpr{
												pos: position{line: 991, col: 23, offset: 31326},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 989, col: 32, offset: 31294},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 991, col: 51, offset: 31354},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 991, col: 56, offset: 31359},
															run: (*parser).callonVerbatimGroup126,
															expr: &oneOrMoreExpr{
																pos: position{line: 991, col: 56, offset: 31359},
																expr: &charClassMatcher{
																	pos:        position{line: 991, col: 56, offset: 31359},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 989, col: 32, offset: 31294},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2905, col: 12, offset: 96299},
											run: (*parser).callonVerbatimGroup130,
											expr: &anyMatcher{
												line: 2905, col: 12, offset: 96299,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2962, col: 8, offset: 97839},
							expr: &anyMatcher{
								line: 2962, col: 9, offset: 97840,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 2595, col: 1, offset: 86991},
			expr: &actionExpr{
				pos: position{line: 2597, col: 5, offset: 87073},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 2597, col: 5, offset: 87073},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2597, col: 5, offset: 87073},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 2600, col: 5, offset: 87133},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2601, col: 9, offset: 87151},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2601, col: 9, offset: 87151},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 2602, col: 11, offset: 87172},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 2603, col: 11, offset: 87195},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 2604, col: 11, offset: 87211},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2605, col: 11, offset: 87240},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 2606, col: 11, offset: 87266},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 2607, col: 11, offset: 87292},
										name: "InlineUserMacro",
									},
									&actionExpr{
										pos: position{line: 1174, col: 20, offset: 37268},
										run: (*parser).callonInlineMacro13,
										expr: &seqExpr{
											pos: position{line: 1174, col: 20, offset: 37268},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1174, col: 20, offset: 37268},
													val:        "[[",
													ignoreCase: false,
													want:       "\"[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1174, col: 25, offset: 37273},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 2936, col: 7, offset: 97248},
														run: (*parser).callonInlineMacro17,
														expr: &oneOrMoreExpr{
															pos: position{line: 2936, col: 7, offset: 97248},
															expr: &charClassMatcher{
																pos:        position{line: 2936, col: 7, offset: 97248},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1174, col: 33, offset: 37281},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1174, col: 38, offset: 37286},
													expr: &actionExpr{
														pos: position{line: 2948, col: 10, offset: 97526},
														run: (*parser).callonInlineMacro22,
														expr: &charClassMatcher{
															pos:        position{line: 2948, col: 11, offset: 97527},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1191, col: 23, offset: 37977},
										run: (*parser).callonInlineMacro24,
										expr: &seqExpr{
											pos: position{line: 1191, col: 23, offset: 37977},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1191, col: 23, offset: 37977},
													val:        "(((",
													ignoreCase: false,
													want:       "\"(((\"",
												},
												&labeledExpr{
													pos:   position{line: 1191, col: 29, offset: 37983},
													label: "term1",
													expr: &actionExpr{
														pos: position{line: 1198, col: 30, offset: 38314},
														run: (*parser).callonInlineMacro28,
														expr: &oneOrMoreExpr{
															pos: position{line: 1198, col: 30, offset: 38314},
															expr: &choiceExpr{
																pos: position{line: 1198, col: 31, offset: 38315},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2860, col: 13, offset: 94811},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 2948, col: 10, offset: 97526},
																		run: (*parser).callonInlineMacro32,
																		expr: &charClassMatcher{
																			pos:        position{line: 2948, col: 11, offset: 97527},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1192, col: 5, offset: 38022},
													label: "term2",
													expr: &zeroOrOneExpr{
														pos: position{line: 1192, col: 11, offset: 38028},
														expr: &actionExpr{
															pos: position{line: 1192, col: 12, offset: 38029},
															run: (*parser).callonInlineMacro36,
															expr: &seqExpr{
																pos: position{line: 1192, col: 12, offset: 38029},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 1192, col: 12, offset: 38029},
																		expr: &actionExpr{
																			pos: position{line: 2948, col: 10, offset: 97526},
																			run: (*parser).callonInlineMacro39,
																			expr: &charClassMatcher{
																				pos:        position{line: 2948, col: 11, offset: 97527},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1192, col: 19, offset: 38036},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1192, col: 23, offset: 38040},
																		expr: &actionExpr{
																			pos: position{line: 2948, col: 10, offset: 97526},
																			run: (*parser).callonInlineMacro43,
																			expr: &charClassMatcher{
																				pos:        position{line: 2948, col: 11, offset: 97527},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1192, col: 30, offset: 38047},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1198, col: 30, offset: 38314},
																			run: (*parser).callonInlineMacro46,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1198, col: 30, offset: 38314},
																				expr: &choiceExpr{
																					pos: position{line: 1198, col: 31, offset: 38315},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2860, col: 13, offset: 94811},
																							val:        "[0-9\\pL]",
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 2948, col: 10, offset: 97526},
																							run: (*parser).callonInlineMacro50,
																							expr: &charClassMatcher{
																								pos:        position{line: 2948, col: 11, offset: 97527},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1193, col: 5, offset: 38114},
													label: "term3",
													expr: &zeroOrOneExpr{
														pos: position{line: 1193, col: 11, offset: 38120},
														expr: &actionExpr{
															pos: position{line: 1193, col: 12, offset: 38121},
															run: (*parser).callonInlineMacro54,
															expr: &seqExpr{
																pos: position{line: 1193, col: 12, offset: 38121},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 1193, col: 12, offset: 38121},
																		expr: &actionExpr{
																			pos: position{line: 2948, col: 10, offset: 97526},
																			run: (*parser).callonInlineMacro57,
																			expr: &charClassMatcher{
																				pos:        position{line: 2948, col: 11, offset: 97527},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1193, col: 19, offset: 38128},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1193, col: 23, offset: 38132},
																		expr: &actionExpr{
																			pos: position{line: 2948, col: 10, offset: 97526},
																			run: (*parser).callonInlineMacro61,
																			expr: &charClassMatcher{
																				pos:        position{line: 2948, col: 11, offset: 97527},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1193, col: 30, offset: 38139},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1198, col: 30, offset: 38314},
																			run: (*parser).callonInlineMacro64,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1198, col: 30, offset: 38314},
																				expr: &choiceExpr{
																					pos: position{line: 1198, col: 31, offset: 38315},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2860, col: 13, offset: 94811},
																							val:        "[0-9\\pL]",
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 2948, col: 10, offset: 97526},
																							run: (*parser).callonInlineMacro68,
																							expr: &charClassMatcher{
																								pos:        position{line: 2948, col: 11, offset: 97527},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1194, col: 5, offset: 38206},
													val:        ")))",
													ignoreCase: false,
													want:       "\")))\"",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2610, col: 11, offset: 87374},
										name: "IndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 2611, col: 11, offset: 87394},
										name: "InlineUserMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 2615, col: 1, offset: 87456},
			expr: &actionExpr{
				pos: position{line: 2617, col: 5, offset: 87544},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 2617, col: 5, offset: 87544},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2617, col: 5, offset: 87544},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 2620, col: 5, offset: 87616},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2621, col: 9, offset: 87634},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1260, col: 26, offset: 41496},
										run: (*parser).callonInlinePassthrough6,
										expr: &seqExpr{
											pos: position{line: 1260, col: 26, offset: 41496},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1258, col: 32, offset: 41464},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&labeledExpr{
													pos:   position{line: 1260, col: 54, offset: 41524},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 1264, col: 33, offset: 41737},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1264, col: 34, offset: 41738},
																run: (*parser).callonInlinePassthrough11,
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1264, col: 34, offset: 41738},
																	expr: &seqExpr{
																		pos: position{line: 1264, col: 35, offset: 41739},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1264, col: 35, offset: 41739},
																				expr: &litMatcher{
																					pos:        position{line: 1258, col: 32, offset: 41464},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 1264, col: 64, offset: 41768,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1266, col: 11, offset: 41941},
																run: (*parser).callonInlinePassthrough17,
																expr: &zeroOrOneExpr{
																	pos: position{line: 1266, col: 11, offset: 41941},
																	expr: &seqExpr{
																		pos: position{line: 1266, col: 12, offset: 41942},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1266, col: 12, offset: 41942},
																				expr: &actionExpr{
																					pos: position{line: 2948, col: 10, offset: 97526},
																					run: (*parser).callonInlinePassthrough21,
																					expr: &charClassMatcher{
																						pos:        position{line: 2948, col: 11, offset: 97527},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1266, col: 19, offset: 41949},
																				expr: &actionExpr{
																					pos: position{line: 2958, col: 12, offset: 97749},
																					run: (*parser).callonInlinePassthrough24,
																					expr: &choiceExpr{
																						pos: position{line: 2958, col: 13, offset: 97750},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2958, col: 13, offset: 97750},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 20, offset: 97757},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2958, col: 29, offset: 97766},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1266, col: 28, offset: 41958},
																				expr: &litMatcher{
																					pos:        position{line: 1258, col: 32, offset: 41464},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 1266, col: 57, offset: 41987,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1258, col: 32, offset: 41464},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&notExpr{
													pos: position{line: 1260, col: 121, offset: 41591},
													expr: &charClassMatcher{
														pos:        position{line: 2860, col: 13, offset: 94811},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1248, col: 26, offset: 40779},
										run: (*parser).callonInlinePassthrough35,
										expr: &seqExpr{
											pos: position{line: 1248, col: 26, offset: 40779},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1246, col: 32, offset: 40749},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&labeledExpr{
													pos:   position{line: 1248, col: 54, offset: 40807},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 1252, col: 33, offset: 41020},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1252, col: 34, offset: 41021},
																run: (*parser).callonInlinePassthrough40,
																expr: &seqExpr{
																	pos: position{line: 1252, col: 34, offset: 41021},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1252, col: 35, offset: 41022},
																			expr: &litMatcher{
																				pos:        position{line: 1246, col: 32, offset: 40749},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&notExpr{
																			pos: position{line: 1252, col: 64, offset: 41051},
																			expr: &actionExpr{
																				pos: position{line: 2948, col: 10, offset: 97526},
																				run: (*parser).callonInlinePassthrough45,
																				expr: &charClassMatcher{
																					pos:        position{line: 2948, col: 11, offset: 97527},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1252, col: 71, offset: 41058},
																			expr: &actionExpr{
																				pos: position{line: 2958, col: 12, offset: 97749},
																				run: (*parser).callonInlinePassthrough48,
																				expr: &choiceExpr{
																					pos: position{line: 2958, col: 13, offset: 97750},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2958, col: 13, offset: 97750},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2958, col: 20, offset: 97757},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2958, col: 29, offset: 97766},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&anyMatcher{
																			line: 1252, col: 80, offset: 41067,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1252, col: 83, offset: 41070},
																			expr: &seqExpr{
																				pos: position{line: 1252, col: 84, offset: 41071},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1252, col: 84, offset: 41071},
																						expr: &seqExpr{
																							pos: position{line: 1252, col: 86, offset: 41073},
																							exprs: []interface{}{
																								&actionExpr{
																									pos: position{line: 2953, col: 11, offset: 97635},
																									run: (*parser).callonInlinePassthrough58,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2953, col: 11, offset: 97635},
																										expr: &charClassMatcher{
																											pos:        position{line: 2953, col: 12, offset: 97636},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1246, col: 32, offset: 40749},
																									val:        "+",
																									ignoreCase: false,
																									want:       "\"+\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1252, col: 122, offset: 41109},
																						expr: &litMatcher{
																							pos:        position{line: 1246, col: 32, offset: 40749},
																							val:        "+",
																							ignoreCase: false,
																							want:       "\"+\"",
																						},
																					},
																					&notExpr{
																						pos: position{line: 1252, col: 151, offset: 41138},
																						expr: &actionExpr{
																							pos: position{line: 2958, col: 12, offset: 97749},
																							run: (*parser).callonInlinePassthrough65,
																							expr: &choiceExpr{
																								pos: position{line: 2958, col: 13, offset: 97750},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2958, col: 13, offset: 97750},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2958, col: 20, offset: 97757},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2958, col: 29, offset: 97766},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1252, col: 160, offset: 41147,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1254, col: 11, offset: 41297},
																run: (*parser).callonInlinePassthrough71,
																expr: &seqExpr{
																	pos: position{line: 1254, col: 12, offset: 41298},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1254, col: 12, offset: 41298},
																			expr: &actionExpr{
																				pos: position{line: 2948, col: 10, offset: 97526},
																				run: (*parser).callonInlinePassthrough74,
																				expr: &charClassMatcher{
																					pos:        position{line: 2948, col: 11, offset: 97527},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1254, col: 19, offset: 41305},
																			expr: &actionExpr{
																				pos: position{line: 2958, col: 12, offset: 97749},
																				run: (*parser).callonInlinePassthrough77,
																				expr: &choiceExpr{
																					pos: position{line: 2958, col: 13, offset: 97750},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2958, col: 13, offset: 97750},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2958, col: 20, offset: 97757},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2958, col: 29, offset: 97766},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1254, col: 28, offset: 41314},
																			expr: &litMatcher{
																				pos:        position{line: 1246, col: 32, offset: 40749},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&anyMatcher{
																			line: 1254, col: 57, offset: 41343,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1246, col: 32, offset: 40749},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&notExpr{
													pos: position{line: 1248, col: 121, offset: 40874},
													expr: &charClassMatcher{
														pos:        position{line: 2860, col: 13, offset: 94811},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2621, col: 57, offset: 87682},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 2626, col: 1, offset: 87742},
			expr: &actionExpr{
				pos: position{line: 2628, col: 5, offset: 87818},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 2628, col: 5, offset: 87818},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2628, col: 5, offset: 87818},
							run: (*parser).callonQuote3,
						},
						&labeledExpr{
							pos:   position{line: 2631, col: 5, offset: 87878},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2632, col: 9, offset: 87896},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2632, col: 9, offset: 87896},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2633, col: 11, offset: 87918},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableColumnsAttribute",
			pos:  position{line: 2778, col: 1, offset: 91926},
			expr: &actionExpr{
				pos: position{line: 2778, col: 26, offset: 91951},
				run: (*parser).callonTableColumnsAttribute1,
				expr: &seqExpr{
					pos: position{line: 2778, col: 26, offset: 91951},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2778, col: 26, offset: 91951},
							label: "cols",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2778, col: 31, offset: 91956},
								expr: &actionExpr{
									pos: position{line: 2783, col: 5, offset: 92019},
									run: (*parser).callonTableColumnsAttribute5,
									expr: &seqExpr{
										pos: position{line: 2783, col: 5, offset: 92019},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2783, col: 5, offset: 92019},
												expr: &notExpr{
													pos: position{line: 2962, col: 8, offset: 97839},
													expr: &anyMatcher{
														line: 2962, col: 9, offset: 97840,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2786, col: 5, offset: 92143},
												label: "multiplier",
												expr: &zeroOrOneExpr{
													pos: position{line: 2786, col: 16, offset: 92154},
													expr: &actionExpr{
														pos: position{line: 2786, col: 17, offset: 92155},
														run: (*parser).callonTableColumnsAttribute12,
														expr: &seqExpr{
															pos: position{line: 2786, col: 17, offset: 92155},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 2786, col: 17, offset: 92155},
																	label: "n",
																	expr: &actionExpr{
																		pos: position{line: 2944, col: 11, offset: 97450},
																		run: (*parser).callonTableColumnsAttribute15,
																		expr: &seqExpr{
																			pos: position{line: 2944, col: 12, offset: 97451},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 2944, col: 12, offset: 97451},
																					expr: &litMatcher{
																						pos:        position{line: 2944, col: 12, offset: 97451},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2944, col: 17, offset: 97456},
																					expr: &actionExpr{
																						pos: position{line: 2940, col: 10, offset: 97390},
																						run: (*parser).callonTableColumnsAttribute20,
																						expr: &charClassMatcher{
																							pos:        position{line: 2940, col: 10, offset: 97390},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2786, col: 26, offset: 92164},
																	val:        "*",
																	ignoreCase: false,
																	want:       "\"*\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2787, col: 5, offset: 92192},
												label: "halign",
												expr: &zeroOrOneExpr{
													pos: position{line: 2787, col: 12, offset: 92199},
													expr: &choiceExpr{
														pos: position{line: 2788, col: 9, offset: 92209},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2788, col: 9, offset: 92209},
																run: (*parser).callonTableColumnsAttribute26,
																expr: &litMatcher{
																	pos:        position{line: 2788, col: 9, offset: 92209},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
															},
															&actionExpr{
																pos: position{line: 2789, col: 11, offset: 92256},
																run: (*parser).callonTableColumnsAttribute28,
																expr: &litMatcher{
																	pos:        position{line: 2789, col: 11, offset: 92256},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
															},
															&actionExpr{
																pos: position{line: 2790, col: 11, offset: 92304},
																run: (*parser).callonTableColumnsAttribute30,
																expr: &litMatcher{
																	pos:        position{line: 2790, col: 11, offset: 92304},
																	val:        "^",
																	ignoreCase: false,
																	want:       "\"^\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2792, col: 5, offset: 92354},
												label: "valign",
												expr: &zeroOrOneExpr{
													pos: position{line: 2792, col: 12, offset: 92361},
													expr: &choiceExpr{
														pos: position{line: 2793, col: 9, offset: 92371},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2793, col: 9, offset: 92371},
																run: (*parser).callonTableColumnsAttribute35,
																expr: &litMatcher{
																	pos:        position{line: 2793, col: 9, offset: 92371},
																	val:        ".<",
																	ignoreCase: false,
																	want:       "\".<\"",
																},
															},
															&actionExpr{
																pos: position{line: 2794, col: 11, offset: 92418},
																run: (*parser).callonTableColumnsAttribute37,
																expr: &litMatcher{
																	pos:        position{line: 2794, col: 11, offset: 92418},
																	val:        ".>",
																	ignoreCase: false,
																	want:       "\".>\"",
																},
															},
															&actionExpr{
																pos: position{line: 2795, col: 11, offset: 92468},
																run: (*parser).callonTableColumnsAttribute39,
																expr: &litMatcher{
																	pos:        position{line: 2795, col: 11, offset: 92468},
																	val:        ".^",
																	ignoreCase: false,
																	want:       "\".^\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2797, col: 5, offset: 92519},
												label: "weight",
												expr: &zeroOrOneExpr{
													pos: position{line: 2797, col: 12, offset: 92526},
													expr: &choiceExpr{
														pos: position{line: 2797, col: 13, offset: 92527},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2944, col: 11, offset: 97450},
																run: (*parser).callonTableColumnsAttribute44,
																expr: &seqExpr{
																	pos: position{line: 2944, col: 12, offset: 97451},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 2944, col: 12, offset: 97451},
																			expr: &litMatcher{
																				pos:        position{line: 2944, col: 12, offset: 97451},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2944, col: 17, offset: 97456},
																			expr: &actionExpr{
																				pos: position{line: 2940, col: 10, offset: 97390},
																				run: (*parser).callonTableColumnsAttribute49,
																				expr: &charClassMatcher{
																					pos:        position{line: 2940, col: 10, offset: 97390},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2797, col: 23, offset: 92537},
																run: (*parser).callonTableColumnsAttribute51,
																expr: &litMatcher{
																	pos:        position{line: 2797, col: 23, offset: 92537},
																	val:        "~",
																	ignoreCase: false,
																	want:       "\"~\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2798, col: 5, offset: 92579},
												label: "style",
												expr: &zeroOrOneExpr{
													pos: position{line: 2798, col: 11, offset: 92585},
													expr: &actionExpr{
														pos: position{line: 2798, col: 12, offset: 92586},
														run: (*parser).callonTableColumnsAttribute55,
														expr: &charClassMatcher{
															pos:        position{line: 2798, col: 12, offset: 92586},
															val:        "[adehlms]",
															chars:      []rune{'a', 'd', 'e', 'h', 'l', 'm', 's'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2800, col: 5, offset: 92716},
												label: "comma",
												expr: &zeroOrOneExpr{
													pos: position{line: 2800, col: 11, offset: 92722},
													expr: &litMatcher{
														pos:        position{line: 2800, col: 12, offset: 92723},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
											},
											&andCodeExpr{
												pos: position{line: 2801, col: 5, offset: 92733},
												run: (*parser).callonTableColumnsAttribute60,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2962, col: 8, offset: 97839},
							expr: &anyMatcher{
								line: 2962, col: 9, offset: 97840,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 2825, col: 1, offset: 93663},
			expr: &actionExpr{
				pos: position{line: 2826, col: 5, offset: 93686},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 2826, col: 5, offset: 93686},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2826, col: 5, offset: 93686},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 2849, col: 18, offset: 94475},
								run: (*parser).callonUserMacroBlock4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2849, col: 19, offset: 94476},
									expr: &charClassMatcher{
										pos:        position{line: 2849, col: 19, offset: 94476},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2827, col: 5, offset: 93712},
							run: (*parser).callonUserMacroBlock7,
						},
						&litMatcher{
							pos:        position{line: 2831, col: 5, offset: 93852},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 2832, col: 5, offset: 93862},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 2853, col: 19, offset: 94551},
								run: (*parser).callonUserMacroBlock10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 2853, col: 19, offset: 94551},
									expr: &charClassMatcher{
										pos:        position{line: 2853, col: 19, offset: 94551},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2833, col: 5, offset: 93890},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2833, col: 23, offset: 93908},
								name: "InlineAttributes",
							},
						},
						&choiceExpr{
							pos: position{line: 2965, col: 8, offset: 97889},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2958, col: 12, offset: 97749},
									run: (*parser).callonUserMacroBlock16,
									expr: &choiceExpr{
										pos: position{line: 2958, col: 13, offset: 97750},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2958, col: 13, offset: 97750},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 20, offset: 97757},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2958, col: 29, offset: 97766},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2962, col: 8, offset: 97839},
									expr: &anyMatcher{
										line: 2962, col: 9, offset: 97840,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 2837, col: 1, offset: 94062},
			expr: &actionExpr{
				pos: position{line: 2838, col: 5, offset: 94086},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 2838, col: 5, offset: 94086},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2838, col: 5, offset: 94086},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 2849, col: 18, offset: 94475},
								run: (*parser).callonInlineUserMacro4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2849, col: 19, offset: 94476},
									expr: &charClassMatcher{
										pos:        position{line: 2849, col: 19, offset: 94476},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2839, col: 5, offset: 94112},
							run: (*parser).callonInlineUserMacro7,
						},
						&litMatcher{
							pos:        position{line: 2843, col: 5, offset: 94252},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 2844, col: 5, offset: 94261},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 2853, col: 19, offset: 94551},
								run: (*parser).callonInlineUserMacro10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 2853, col: 19, offset: 94551},
									expr: &charClassMatcher{
										pos:        position{line: 2853, col: 19, offset: 94551},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2845, col: 5, offset: 94289},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2845, col: 23, offset: 94307},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2909, col: 1, offset: 96366},
			expr: &actionExpr{
				pos: position{line: 2909, col: 17, offset: 96382},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2909, col: 17, offset: 96382},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2909, col: 22, offset: 96387},
						expr: &choiceExpr{
							pos: position{line: 2909, col: 23, offset: 96388},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2921, col: 13, offset: 96792},
									run: (*parser).callonFileLocation5,
									expr: &labeledExpr{
										pos:   position{line: 2921, col: 13, offset: 96792},
										label: "elements",
										expr: &oneOrMoreExpr{
											pos: position{line: 2921, col: 22, offset: 96801},
											expr: &choiceExpr{
												pos: position{line: 2922, col: 5, offset: 96807},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2922, col: 5, offset: 96807},
														run: (*parser).callonFileLocation9,
														expr: &oneOrMoreExpr{
															pos: position{line: 2922, col: 5, offset: 96807},
															expr: &charClassMatcher{
																pos:        position{line: 2922, col: 6, offset: 96808},
																val:        "[^\\r\\n[]�&<>{ ]",
																chars:      []rune{'\r', '\n', '[', ']', '�', '&', '<', '>', '{', ' '},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
													&actionExpr{
														pos: position{line: 493, col: 5, offset: 15873},
														run: (*parser).callonFileLocation12,
														expr: &seqExpr{
															pos: position{line: 493, col: 5, offset: 15873},
															exprs: []interface{}{
																&andCodeExpr{
																	pos: position{line: 493, col: 5, offset: 15873},
																	run: (*parser).callonFileLocation14,
																},
																&labeledExpr{
																	pos:   position{line: 496, col: 5, offset: 15937},
																	label: "element",
																	expr: &choiceExpr{
																		pos: position{line: 496, col: 14, offset: 15946},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 507, col: 25, offset: 16408},
																				run: (*parser).callonFileLocation17,
																				expr: &seqExpr{
																					pos: position{line: 507, col: 25, offset: 16408},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 507, col: 25, offset: 16408},
																							val:        "{counter:",
																							ignoreCase: false,
																							want:       "\"{counter:\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 507, col: 37, offset: 16420},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 162, col: 18, offset: 4814},
																								run: (*parser).callonFileLocation21,
																								expr: &seqExpr{
																									pos: position{line: 162, col: 18, offset: 4814},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 162, col: 18, offset: 4814},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 162, col: 28, offset: 4824},
																											expr: &charClassMatcher{
																												pos:        position{line: 162, col: 29, offset: 4825},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 507, col: 56, offset: 16439},
																							label: "start",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 507, col: 62, offset: 16445},
																								expr: &actionExpr{
																									pos: position{line: 515, col: 17, offset: 16708},
																									run: (*parser).callonFileLocation28,
																									expr: &seqExpr{
																										pos: position{line: 515, col: 17, offset: 16708},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 515, col: 17, offset: 16708},
																												val:        ":",
																												ignoreCase: false,
																												want:       "\":\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 515, col: 21, offset: 16712},
																												label: "start",
																												expr: &choiceExpr{
																													pos: position{line: 515, col: 28, offset: 16719},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 515, col: 28, offset: 16719},
																															run: (*parser).callonFileLocation33,
																															expr: &charClassMatcher{
																																pos:        position{line: 515, col: 28, offset: 16719},
																																val:        "[A-Za-z]",
																																ranges:     []rune{'A', 'Z', 'a', 'z'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&actionExpr{
																															pos: position{line: 517, col: 9, offset: 16773},
																															run: (*parser).callonFileLocation35,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 517, col: 9, offset: 16773},
																																expr: &charClassMatcher{
																																	pos:        position{line: 517, col: 9, offset: 16773},
																																	val:        "[0-9]",
																																	ranges:     []rune{'0', '9'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 507, col: 78, offset: 16461},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 511, col: 25, offset: 16563},
																				run: (*parser).callonFileLocation39,
																				expr: &seqExpr{
																					pos: position{line: 511, col: 25, offset: 16563},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 511, col: 25, offset: 16563},
																							val:        "{counter2:",
																							ignoreCase: false,
																							want:       "\"{counter2:\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 511, col: 38, offset: 16576},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 162, col: 18, offset: 4814},
																								run: (*parser).callonFileLocation43,
																								expr: &seqExpr{
																									pos: position{line: 162, col: 18, offset: 4814},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 162, col: 18, offset: 4814},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 162, col: 28, offset: 4824},
																											expr: &charClassMatcher{
																												pos:        position{line: 162, col: 29, offset: 4825},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 511, col: 57, offset: 16595},
																							label: "start",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 511, col: 63, offset: 16601},
																								expr: &actionExpr{
																									pos: position{line: 515, col: 17, offset: 16708},
																									run: (*parser).callonFileLocation50,
																									expr: &seqExpr{
																										pos: position{line: 515, col: 17, offset: 16708},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 515, col: 17, offset: 16708},
																												val:        ":",
																												ignoreCase: false,
																												want:       "\":\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 515, col: 21, offset: 16712},
																												label: "start",
																												expr: &choiceExpr{
																													pos: position{line: 515, col: 28, offset: 16719},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 515, col: 28, offset: 16719},
																															run: (*parser).callonFileLocation55,
																															expr: &charClassMatcher{
																																pos:        position{line: 515, col: 28, offset: 16719},
																																val:        "[A-Za-z]",
																																ranges:     []rune{'A', 'Z', 'a', 'z'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&actionExpr{
																															pos: position{line: 517, col: 9, offset: 16773},
																															run: (*parser).callonFileLocation57,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 517, col: 9, offset: 16773},
																																expr: &charClassMatcher{
																																	pos:        position{line: 517, col: 9, offset: 16773},
																																	val:        "[0-9]",
																																	ranges:     []rune{'0', '9'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 511, col: 79, offset: 16617},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 500, col: 31, offset: 16063},
																				run: (*parser).callonFileLocation61,
																				expr: &seqExpr{
																					pos: position{line: 500, col: 31, offset: 16063},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 500, col: 31, offset: 16063},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 500, col: 35, offset: 16067},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 162, col: 18, offset: 4814},
																								run: (*parser).callonFileLocation65,
																								expr: &seqExpr{
																									pos: position{line: 162, col: 18, offset: 4814},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 162, col: 18, offset: 4814},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 162, col: 28, offset: 4824},
																											expr: &charClassMatcher{
																												pos:        position{line: 162, col: 29, offset: 4825},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 500, col: 54, offset: 16086},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2650, col: 5, offset: 88280},
														run: (*parser).callonFileLocation71,
														expr: &seqExpr{
															pos: position{line: 2650, col: 5, offset: 88280},
															exprs: []interface{}{
																&andCodeExpr{
																	pos: position{line: 2650, col: 5, offset: 88280},
																	run: (*parser).callonFileLocation73,
																},
																&labeledExpr{
																	pos:   position{line: 2653, col: 5, offset: 88351},
																	label: "element",
																	expr: &choiceExpr{
																		pos: position{line: 2655, col: 9, offset: 88449},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2655, col: 9, offset: 88449},
																				run: (*parser).callonFileLocation76,
																				expr: &choiceExpr{
																					pos: position{line: 535, col: 27, offset: 17427},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 535, col: 27, offset: 17427},
																							run: (*parser).callonFileLocation78,
																							expr: &seqExpr{
																								pos: position{line: 535, col: 27, offset: 17427},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 535, col: 27, offset: 17427},
																										val:        "<<",
																										ignoreCase: false,
																										want:       "\"<<\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 535, col: 32, offset: 17432},
																										label: "id",
																										expr: &actionExpr{
																											pos: position{line: 2936, col: 7, offset: 97248},
																											run: (*parser).callonFileLocation82,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2936, col: 7, offset: 97248},
																												expr: &charClassMatcher{
																													pos:        position{line: 2936, col: 7, offset: 97248},
																													val:        "[^[]<>,]",
																													chars:      []rune{'[', ']', '<', '>', ','},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 535, col: 40, offset: 17440},
																										expr: &actionExpr{
																											pos: position{line: 2948, col: 10, offset: 97526},
																											run: (*parser).callonFileLocation86,
																											expr: &charClassMatcher{
																												pos:        position{line: 2948, col: 11, offset: 97527},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 535, col: 47, offset: 17447},
																										val:        ",",
																										ignoreCase: false,
																										want:       "\",\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 535, col: 51, offset: 17451},
																										label: "label",
																										expr: &oneOrMoreExpr{
																											pos: position{line: 545, col: 24, offset: 17864},
																											expr: &choiceExpr{
																												pos: position{line: 546, col: 5, offset: 17870},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 546, col: 6, offset: 17871},
																														run: (*parser).callonFileLocation92,
																														expr: &seqExpr{
																															pos: position{line: 546, col: 6, offset: 17871},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 546, col: 6, offset: 17871},
																																	val:        "[0-9\\pL]",
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&oneOrMoreExpr{
																																	pos: position{line: 546, col: 14, offset: 17879},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 546, col: 14, offset: 17879},
																																		val:        "[^\\r\\n{<>]",
																																		chars:      []rune{'\r', '\n', '{', '<', '>'},
																																		ignoreCase: false,
																																		inverted:   true,
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 493, col: 5, offset: 15873},
																														run: (*parser).callonFileLocation97,
																														expr: &seqExpr{
																															pos: position{line: 493, col: 5, offset: 15873},
																															exprs: []interface{}{
																																&andCodeExpr{
																																	pos: position{line: 493, col: 5, offset: 15873},
																																	run: (*parser).callonFileLocation99,
																																},
																																&labeledExpr{
																																	pos:   position{line: 496, col: 5, offset: 15937},
																																	label: "element",
																																	expr: &choiceExpr{
																																		pos: position{line: 496, col: 14, offset: 15946},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 507, col: 25, offset: 16408},
																																				run: (*parser).callonFileLocation102,
																																				expr: &seqExpr{
																																					pos: position{line: 507, col: 25, offset: 16408},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 507, col: 25, offset: 16408},
																																							val:        "{counter:",
																																							ignoreCase: false,
																																							want:       "\"{counter:\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 507, col: 37, offset: 16420},
																																							label: "name",
																																							expr: &actionExpr{
																																								pos: position{line: 162, col: 18, offset: 4814},
																																								run: (*parser).callonFileLocation106,
																																								expr: &seqExpr{
																																									pos: position{line: 162, col: 18, offset: 4814},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 162, col: 18, offset: 4814},
																																											val:        "[_0-9\\pL]",
																																											chars:      []rune{'_'},
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 162, col: 28, offset: 4824},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 162, col: 29, offset: 4825},
																																												val:        "[-0-9\\pL]",
																																												chars:      []rune{'-'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 507, col: 56, offset: 16439},
																																							label: "start",
																																							expr: &zeroOrOneExpr{
																																								pos: position{line: 507, col: 62, offset: 16445},
																																								expr: &actionExpr{
																																									pos: position{line: 515, col: 17, offset: 16708},
																																									run: (*parser).callonFileLocation113,
																																									expr: &seqExpr{
																																										pos: position{line: 515, col: 17, offset: 16708},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 515, col: 17, offset: 16708},
																																												val:        ":",
																																												ignoreCase: false,
																																												want:       "\":\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 515, col: 21, offset: 16712},
																																												label: "start",
																																												expr: &choiceExpr{
																																													pos: position{line: 515, col: 28, offset: 16719},
																																													alternatives: []interface{}{
																																														&actionExpr{
																																															pos: position{line: 515, col: 28, offset: 16719},
																																															run: (*parser).callonFileLocation118,
																																															expr: &charClassMatcher{
																																																pos:        position{line: 515, col: 28, offset: 16719},
																																																val:        "[A-Za-z]",
																																																ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																														&actionExpr{
																																															pos: position{line: 517, col: 9, offset: 16773},
																																															run: (*parser).callonFileLocation120,
																																															expr: &oneOrMoreExpr{
																																																pos: position{line: 517, col: 9, offset: 16773},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 517, col: 9, offset: 16773},
																																																	val:        "[0-9]",
																																																	ranges:     []rune{'0', '9'},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 507, col: 78, offset: 16461},
																																							val:        "}",
																																							ignoreCase: false,
																																							want:       "\"}\"",
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 511, col: 25, offset: 16563},
																																				run: (*parser).callonFileLocation124,
																																				expr: &seqExpr{
																																					pos: position{line: 511, col: 25, offset: 16563},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 511, col: 25, offset: 16563},
																																							val:        "{counter2:",
																																							ignoreCase: false,
																																							want:       "\"{counter2:\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 511, col: 38, offset: 16576},
																																							label: "name",
																																							expr: &actionExpr{
																																								pos: position{line: 162, col: 18, offset: 4814},
																																								run: (*parser).callonFileLocation128,
																																								expr: &seqExpr{
																																									pos: position{line: 162, col: 18, offset: 4814},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 162, col: 18, offset: 4814},
																																											val:        "[_0-9\\pL]",
																																											chars:      []rune{'_'},
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 162, col: 28, offset: 4824},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 162, col: 29, offset: 4825},
																																												val:        "[-0-9\\pL]",
																																												chars:      []rune{'-'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 511, col: 57, offset: 16595},
																																							label: "start",
																																							expr: &zeroOrOneExpr{
																																								pos: position{line: 511, col: 63, offset: 16601},
																																								expr: &actionExpr{
																																									pos: position{line: 515, col: 17, offset: 16708},
																																									run: (*parser).callonFileLocation135,
																																									expr: &seqExpr{
																																										pos: position{line: 515, col: 17, offset: 16708},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 515, col: 17, offset: 16708},
																																												val:        ":",
																																												ignoreCase: false,
																																												want:       "\":\"",
																																											},
																																											&labeledExpr{
																																												pos:   position{line: 515, col: 21, offset: 16712},
																																												label: "start",
																																												expr: &choiceExpr{
																																													pos: position{line: 515, col: 28, offset: 16719},
																																													alternatives: []interface{}{
																																														&actionExpr{
																																															pos: position{line: 515, col: 28, offset: 16719},
																																															run: (*parser).callonFileLocation140,
																																															expr: &charClassMatcher{
																																																pos:        position{line: 515, col: 28, offset: 16719},
																																																val:        "[A-Za-z]",
																																																ranges:     []rune{'A', 'Z', 'a', 'z'},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																														&actionExpr{
																																															pos: position{line: 517, col: 9, offset: 16773},
																																															run: (*parser).callonFileLocation142,
																																															expr: &oneOrMoreExpr{
																																																pos: position{line: 517, col: 9, offset: 16773},
																																																expr: &charClassMatcher{
																																																	pos:        position{line: 517, col: 9, offset: 16773},
																																																	val:        "[0-9]",
																																																	ranges:     []rune{'0', '9'},
																																																	ignoreCase: false,
																																																	inverted:   false,
																																																},
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 511, col: 79, offset: 16617},
																																							val:        "}",
																																							ignoreCase: false,
																																							want:       "\"}\"",
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 500, col: 31, offset: 16063},
																																				run: (*parser).callonFileLocation146,
																																				expr: &seqExpr{
																																					pos: position{line: 500, col: 31, offset: 16063},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 500, col: 31, offset: 16063},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 500, col: 35, offset: 16067},
																																							label: "name",
																																							expr: &actionExpr{
																																								pos: position{line: 162, col: 18, offset: 4814},
																																								run: (*parser).callonFileLocation150,
																																								expr: &seqExpr{
																																									pos: position{line: 162, col: 18, offset: 4814},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 162, col: 18, offset: 4814},
																																											val:        "[_0-9\\pL]",
																																											chars:      []rune{'_'},
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 162, col: 28, offset: 4824},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 162, col: 29, offset: 4825},
																																												val:        "[-0-9\\pL]",
																																												chars:      []rune{'-'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 500, col: 54, offset: 16086},
																																							val:        "}",
																																							ignoreCase: false,
																																							want:       "\"}\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 550, col: 8, offset: 18103},
																														run: (*parser).callonFileLocation156,
																														expr: &litMatcher{
																															pos:        position{line: 550, col: 8, offset: 18103},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 535, col: 79, offset: 17479},
																										val:        ">>",
																										ignoreCase: false,
																										want:       "\">>\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 537, col: 9, offset: 17552},
																							run: (*parser).callonFileLocation159,
																							expr: &seqExpr{
																								pos: position{line: 537, col: 9, offset: 17552},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 537, col: 9, offset: 17552},
																										val:        "<<",
																										ignoreCase: false,
																										want:       "\"<<\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 537, col: 14, offset: 17557},
																										label: "id",
																										expr: &actionExpr{
																											pos: position{line: 2936, col: 7, offset: 97248},
																											run: (*parser).callonFileLocation163,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2936, col: 7, offset: 97248},
																												expr: &charClassMatcher{
																													pos:        position{line: 2936, col: 7, offset: 97248},
																													val:        "[^[]<>,]",
																													chars:      []rune{'[', ']', '<', '>', ','},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 537, col: 22, offset: 17565},
																										val:        ">>",
																										ignoreCase: false,
																										want:       "\">>\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2658, col: 11, offset: 88553},
																				run: (*parser).callonFileLocation167,
																				expr: &charClassMatcher{
																					pos:        position{line: 2658, col: 12, offset: 88554},
																					val:        "[<>&]",
																					chars:      []rune{'<', '>', '&'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2928, col: 7, offset: 97032},
														run: (*parser).callonFileLocation169,
														expr: &litMatcher{
															pos:        position{line: 2928, col: 7, offset: 97032},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 991, col: 23, offset: 31326},
									run: (*parser).callonFileLocation171,
									expr: &seqExpr{
										pos: position{line: 991, col: 23, offset: 31326},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 989, col: 32, offset: 31294},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 991, col: 51, offset: 31354},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 991, col: 56, offset: 31359},
													run: (*parser).callonFileLocation175,
													expr: &oneOrMoreExpr{
														pos: position{line: 991, col: 56, offset: 31359},
														expr: &charClassMatcher{
															pos:        position{line: 991, col: 56, offset: 31359},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 989, col: 32, offset: 31294},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onDocumentFragment23() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment23()
}

func (c *current) onDocumentFragment30() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonDocumentFragment30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment30()
}

func (c *current) onDocumentFragment33(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonDocumentFragment33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment33(stack["depth"])
}

func (c *current) onDocumentFragment27(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonDocumentFragment27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment27(stack["depth"])
}

func (c *current) onDocumentFragment34() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonDocumentFragment34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment34()
}

func (c *current) onDocumentFragment39() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonDocumentFragment39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment39()
}

func (c *current) onDocumentFragment43() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonDocumentFragment43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment43()
}

func (c *current) onDocumentFragment47() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonDocumentFragment47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment47()
}

func (c *current) onDocumentFragment52() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonDocumentFragment52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment52()
}

func (c *current) onDocumentFragment57(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment57(stack["prefix"])
}

func (c *current) onDocumentFragment20(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonDocumentFragment20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment20(stack["prefix"])
}

func (c *current) onDocumentFragment65() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment65()
}

func (c *current) onDocumentFragment72() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonDocumentFragment72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment72()
}

func (c *current) onDocumentFragment75(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonDocumentFragment75() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment75(stack["depth"])
}

func (c *current) onDocumentFragment69(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonDocumentFragment69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment69(stack["depth"])
}

func (c *current) onDocumentFragment77() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonDocumentFragment77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment77()
}

func (c *current) onDocumentFragment79(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment79(stack["prefix"])
}

func (c *current) onDocumentFragment62(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonDocumentFragment62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment62(stack["prefix"])
}

func (c *current) onDocumentFragment85() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonDocumentFragment85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment85()
}

func (c *current) onDocumentFragment87() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonDocumentFragment87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment87()
}

func (c *current) onDocumentFragment89() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonDocumentFragment89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment89()
}

func (c *current) onDocumentFragment91() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonDocumentFragment91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment91()
}

func (c *current) onDocumentFragment93() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonDocumentFragment93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment93()
}

func (c *current) onDocumentFragment99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment99()
}

func (c *current) onDocumentFragment102(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment102() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment102(stack["content"])
}

func (c *current) onDocumentFragment104() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment104()
}

func (c *current) onDocumentFragment96(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment96(stack["content"])
}

func (c *current) onDocumentFragment111(firstLine interface{}) (bool, error) {
	// also, make sure that there is no LabeledListElement delimiter (`::` - `::::`)
	//   in the middle of the line (with space afterwards)
	//   or at the end of the line
	return !strings.Contains(string(firstLine.(types.RawLine)), ":: ") &&
		!strings.HasSuffix(string(firstLine.(types.RawLine)), "::"), nil

}

func (p *parser) callonDocumentFragment111() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment111(stack["firstLine"])
}

func (c *current) onDocumentFragment126() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment126()
}

func (c *current) onDocumentFragment129() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment129()
}

func (c *current) onDocumentFragment120() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment120()
}

func (c *current) onDocumentFragment140() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment140()
}

func (c *current) onDocumentFragment142() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment142()
}

func (c *current) onDocumentFragment155() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment155()
}

func (c *current) onDocumentFragment159() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment159()
}

func (c *current) onDocumentFragment149(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment149(stack["content"])
}

func (c *current) onDocumentFragment169() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment169()
}

func (c *current) onDocumentFragment172(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment172() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment172(stack["content"])
}

func (c *current) onDocumentFragment174() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment174()
}

func (c *current) onDocumentFragment166(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment166(stack["content"])
}

func (c *current) onDocumentFragment114(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment114(stack["line"])
}

func (c *current) onDocumentFragment14(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...)...)

}

func (p *parser) callonDocumentFragment14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment14(stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment185() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment185()
}

func (c *current) onDocumentFragment195() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment195()
}

func (c *current) onDocumentFragment204() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment204()
}

func (c *current) onDocumentFragment213() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentFragment213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment213()
}

func (c *current) onDocumentFragment218() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDocumentFragment218() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment218()
}

func (c *current) onDocumentFragment225() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment225()
}

func (c *current) onDocumentFragment237() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment237()
}

func (c *current) onDocumentFragment239() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentFragment239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment239()
}

func (c *current) onDocumentFragment232(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDocumentFragment232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment232(stack["start"])
}

func (c *current) onDocumentFragment221(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDocumentFragment221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment221(stack["name"], stack["start"])
}

func (c *current) onDocumentFragment247() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment247()
}

func (c *current) onDocumentFragment259() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment259() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment259()
}

func (c *current) onDocumentFragment261() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentFragment261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment261()
}

func (c *current) onDocumentFragment254(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDocumentFragment254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment254(stack["start"])
}

func (c *current) onDocumentFragment243(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDocumentFragment243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment243(stack["name"], stack["start"])
}

func (c *current) onDocumentFragment269() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment269()
}

func (c *current) onDocumentFragment265(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentFragment265() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment265(stack["name"])
}

func (c *current) onDocumentFragment216(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDocumentFragment216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment216(stack["element"])
}

func (c *current) onDocumentFragment275() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentFragment275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment275()
}

func (c *current) onDocumentFragment200(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonDocumentFragment200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment200(stack["element"])
}

func (c *current) onDocumentFragment193(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonDocumentFragment193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment193(stack["elements"])
}

func (c *current) onDocumentFragment278() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment278() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment278()
}

func (c *current) onDocumentFragment181(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	return d, nil

}

func (p *parser) callonDocumentFragment181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment181(stack["name"], stack["value"])
}

func (c *current) onDocumentFragment289() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment289() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment289()
}

func (c *current) onDocumentFragment296() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment296()
}

func (c *current) onDocumentFragment299() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment299() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment299()
}

func (c *current) onDocumentFragment285(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonDocumentFragment285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment285(stack["name"])
}

func (c *current) onDocumentFragment310() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment310()
}

func (c *current) onDocumentFragment317() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment317()
}

func (c *current) onDocumentFragment320() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment320() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment320()
}

func (c *current) onDocumentFragment306(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonDocumentFragment306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment306(stack["name"])
}

func (c *current) onDocumentFragment329() (bool, error) {
	return c.isDocumentHeaderAllowed(), nil

}

func (p *parser) callonDocumentFragment329() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment329()
}

func (c *current) onDocumentFragment337() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment337() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment337()
}

func (c *current) onDocumentFragment340() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment340() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment340()
}

func (c *current) onDocumentFragment331() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment331() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment331()
}

func (c *current) onDocumentFragment351() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment351() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment351()
}

func (c *current) onDocumentFragment355() (interface{}, error) {
	// can't have empty title, that may collide with example block delimiter (`====`)
	return []interface{}{
		types.RawLine(c.text),
	}, nil
}

func (p *parser) callonDocumentFragment355() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment355()
}

func (c *current) onDocumentFragment359() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment359() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment359()
}

func (c *current) onDocumentFragment348(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonDocumentFragment348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment348(stack["title"])
}

func (c *current) onDocumentFragment377() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment377() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment377()
}

func (c *current) onDocumentFragment380() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment380() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment380()
}

func (c *current) onDocumentFragment371() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment371() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment371()
}

func (c *current) onDocumentFragment395() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment395()
}

func (c *current) onDocumentFragment399() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment399()
}

func (c *current) onDocumentFragment389(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment389(stack["content"])
}

func (c *current) onDocumentFragment408() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Comment), nil

}

func (p *parser) callonDocumentFragment408() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment408()
}

func (c *current) onDocumentFragment411() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment411() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment411()
}

func (c *current) onDocumentFragment414() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment414() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment414()
}

func (c *current) onDocumentFragment421() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Comment)
	return true, nil

}

func (p *parser) callonDocumentFragment421() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment421()
}

func (c *current) onDocumentFragment431() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment431() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment431()
}

func (c *current) onDocumentFragment434() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment434() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment434()
}

func (c *current) onDocumentFragment450() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment450() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment450()
}

func (c *current) onDocumentFragment454() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment454() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment454()
}

func (c *current) onDocumentFragment444(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment444() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment444(stack["content"])
}

func (c *current) onDocumentFragment424(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment424() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment424(stack["line"])
}

func (c *current) onDocumentFragment466() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment466() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment466()
}

func (c *current) onDocumentFragment469() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment469() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment469()
}

func (c *current) onDocumentFragment406(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentFragment406() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment406(stack["content"])
}

func (c *current) onDocumentFragment482() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment482() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment482()
}

func (c *current) onDocumentFragment499() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment499() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment499()
}

func (c *current) onDocumentFragment503() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment503() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment503()
}

func (c *current) onDocumentFragment507() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment507() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment507()
}

func (c *current) onDocumentFragment511() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment511() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment511()
}

func (c *current) onDocumentFragment515() (interface{}, error) {
	// spaces allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment515()
}

func (c *current) onDocumentFragment519() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment519() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment519()
}

func (c *current) onDocumentFragment496(part1, part2, part3 interface{}) (interface{}, error) {
	return types.NewDocumentAuthorFullName(part1.(string), part2, part3)

}

func (p *parser) callonDocumentFragment496() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment496(stack["part1"], stack["part2"], stack["part3"])
}

func (c *current) onDocumentFragment530() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment530() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment530()
}

func (c *current) onDocumentFragment523(email interface{}) (interface{}, error) {
	return email, nil

}

func (p *parser) callonDocumentFragment523() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment523(stack["email"])
}

func (c *current) onDocumentFragment535() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment535() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment535()
}

func (c *current) onDocumentFragment540() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment540() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment540()
}

func (c *current) onDocumentFragment542(fullName, email interface{}) (bool, error) {
	// at least 1 of [fullName, email] must be defined
	return fullName != nil || email != nil, nil

}

func (p *parser) callonDocumentFragment542() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment542(stack["fullName"], stack["email"])
}

func (c *current) onDocumentFragment492(fullName, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullName, email)

}

func (p *parser) callonDocumentFragment492() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment492(stack["fullName"], stack["email"])
}

func (c *current) onDocumentFragment486(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{})...)
}

func (p *parser) callonDocumentFragment486() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment486(stack["authors"])
}

func (c *current) onDocumentFragment547() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment547() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment547()
}

func (c *current) onDocumentFragment557() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment557() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment557()
}

func (c *current) onDocumentFragment561() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment561() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment561()
}

func (c *current) onDocumentFragment565() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment565() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment565()
}

func (c *current) onDocumentFragment569() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment569() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment569()
}

func (c *current) onDocumentFragment573() (interface{}, error) {
	// spaces allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment573() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment573()
}

func (c *current) onDocumentFragment577() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment577() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment577()
}

func (c *current) onDocumentFragment554(part1, part2, part3 interface{}) (interface{}, error) {
	return types.NewDocumentAuthorFullName(part1.(string), part2, part3)

}

func (p *parser) callonDocumentFragment554() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment554(stack["part1"], stack["part2"], stack["part3"])
}

func (c *current) onDocumentFragment588() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment588() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment588()
}

func (c *current) onDocumentFragment581(email interface{}) (interface{}, error) {
	return email, nil

}

func (p *parser) callonDocumentFragment581() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment581(stack["email"])
}

func (c *current) onDocumentFragment593() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment593() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment593()
}

func (c *current) onDocumentFragment598() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment598() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment598()
}

func (c *current) onDocumentFragment600(fullName, email interface{}) (bool, error) {
	// at least 1 of [fullName, email] must be defined
	return fullName != nil || email != nil, nil

}

func (p *parser) callonDocumentFragment600() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment600(stack["fullName"], stack["email"])
}

func (c *current) onDocumentFragment550(fullName, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullName, email)

}

func (p *parser) callonDocumentFragment550() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment550(stack["fullName"], stack["email"])
}

func (c *current) onDocumentFragment543(author interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(author)
}

func (p *parser) callonDocumentFragment543() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment543(stack["author"])
}

func (c *current) onDocumentFragment602() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment602() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment602()
}

func (c *current) onDocumentFragment479(authors interface{}) (interface{}, error) {
	return authors, nil
}

func (p *parser) callonDocumentFragment479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment479(stack["authors"])
}

func (c *current) onDocumentFragment617() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment617() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment617()
}

func (c *current) onDocumentFragment621() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment621() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment621()
}

func (c *current) onDocumentFragment611(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment611() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment611(stack["content"])
}

func (c *current) onDocumentFragment630() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Comment), nil

}

func (p *parser) callonDocumentFragment630() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment630()
}

func (c *current) onDocumentFragment633() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment633() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment633()
}

func (c *current) onDocumentFragment636() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment636() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment636()
}

func (c *current) onDocumentFragment643() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Comment)
	return true, nil

}

func (p *parser) callonDocumentFragment643() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment643()
}

func (c *current) onDocumentFragment653() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment653() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment653()
}

func (c *current) onDocumentFragment656() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment656() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment656()
}

func (c *current) onDocumentFragment672() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment672() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment672()
}

func (c *current) onDocumentFragment676() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment676() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment676()
}

func (c *current) onDocumentFragment666(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment666() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment666(stack["content"])
}

func (c *current) onDocumentFragment646(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment646() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment646(stack["line"])
}

func (c *current) onDocumentFragment688() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment688() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment688()
}

func (c *current) onDocumentFragment691() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment691() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment691()
}

func (c *current) onDocumentFragment628(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentFragment628() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment628(stack["content"])
}

func (c *current) onDocumentFragment705() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment705() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment705()
}

func (c *current) onDocumentFragment718() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment718() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment718()
}

func (c *current) onDocumentFragment715() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment715() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment715()
}

func (c *current) onDocumentFragment726() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment726() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment726()
}

func (c *current) onDocumentFragment731() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment731() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment731()
}

func (c *current) onDocumentFragment722() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment722() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment722()
}

func (c *current) onDocumentFragment739() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment739() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment739()
}

func (c *current) onDocumentFragment746() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment746() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment746()
}

func (c *current) onDocumentFragment711(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentFragment711() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment711(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentFragment752() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment752() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment752()
}

func (c *current) onDocumentFragment759() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment759() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment759()
}

func (c *current) onDocumentFragment749(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentFragment749() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment749(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentFragment763() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment763() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment763()
}

func (c *current) onDocumentFragment702(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentFragment702() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment702(stack["revision"])
}

func (c *current) onDocumentFragment368(authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentInformation(authors.(types.DocumentAuthors), revision)

}

func (p *parser) callonDocumentFragment368() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment368(stack["authors"], stack["revision"])
}

func (c *current) onDocumentFragment777() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment777() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment777()
}

func (c *current) onDocumentFragment787() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment787() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment787()
}

func (c *current) onDocumentFragment796() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment796() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment796()
}

func (c *current) onDocumentFragment805() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentFragment805() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment805()
}

func (c *current) onDocumentFragment810() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDocumentFragment810() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment810()
}

func (c *current) onDocumentFragment817() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment817() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment817()
}

func (c *current) onDocumentFragment829() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment829() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment829()
}

func (c *current) onDocumentFragment831() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentFragment831() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment831()
}

func (c *current) onDocumentFragment824(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDocumentFragment824() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment824(stack["start"])
}

func (c *current) onDocumentFragment813(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDocumentFragment813() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment813(stack["name"], stack["start"])
}

func (c *current) onDocumentFragment839() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment839() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment839()
}

func (c *current) onDocumentFragment851() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment851() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment851()
}

func (c *current) onDocumentFragment853() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentFragment853() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment853()
}

func (c *current) onDocumentFragment846(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDocumentFragment846() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment846(stack["start"])
}

func (c *current) onDocumentFragment835(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDocumentFragment835() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment835(stack["name"], stack["start"])
}

func (c *current) onDocumentFragment861() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment861() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment861()
}

func (c *current) onDocumentFragment857(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentFragment857() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment857(stack["name"])
}

func (c *current) onDocumentFragment808(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDocumentFragment808() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment808(stack["element"])
}

func (c *current) onDocumentFragment867() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentFragment867() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment867()
}

func (c *current) onDocumentFragment792(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonDocumentFragment792() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment792(stack["element"])
}

func (c *current) onDocumentFragment785(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonDocumentFragment785() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment785(stack["elements"])
}

func (c *current) onDocumentFragment870() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment870() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment870()
}

func (c *current) onDocumentFragment773(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	return d, nil

}

func (p *parser) callonDocumentFragment773() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment773(stack["name"], stack["value"])
}

func (c *current) onDocumentFragment881() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment881() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment881()
}

func (c *current) onDocumentFragment888() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment888() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment888()
}

func (c *current) onDocumentFragment891() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment891() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment891()
}

func (c *current) onDocumentFragment877(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonDocumentFragment877() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment877(stack["name"])
}

func (c *current) onDocumentFragment902() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment902() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment902()
}

func (c *current) onDocumentFragment909() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment909() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment909()
}

func (c *current) onDocumentFragment912() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment912() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment912()
}

func (c *current) onDocumentFragment898(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonDocumentFragment898() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment898(stack["name"])
}

func (c *current) onDocumentFragment327(title, info, extraAttrs interface{}) (interface{}, error) {
	c.setFrontMatterAllowed(false)    // not allowed anymore
	c.setDocumentHeaderAllowed(false) // not allowed anymore
	return types.NewDocumentHeader(title.([]interface{}), info, extraAttrs.([]interface{}))

}

func (p *parser) callonDocumentFragment327() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment327(stack["title"], stack["info"], stack["extraAttrs"])
}

func (c *current) onDocumentFragment925() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment925() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment925()
}

func (c *current) onDocumentFragment928() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment928() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment928()
}

func (c *current) onDocumentFragment919() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment919() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment919()
}

func (c *current) onDocumentFragment937() (bool, error) {

	return !c.isWithinDelimitedBlock(), nil

}

func (p *parser) callonDocumentFragment937() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment937()
}

func (c *current) onDocumentFragment939() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonDocumentFragment939() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment939()
}

func (c *current) onDocumentFragment942(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonDocumentFragment942() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment942(stack["level"])
}

func (c *current) onDocumentFragment943(level interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment943() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment943(stack["level"])
}

func (c *current) onDocumentFragment947() (interface{}, error) {
	// can't have empty title, that may collide with example block delimiter (`====`)
	return []interface{}{
		types.RawLine(c.text),
	}, nil
}

func (p *parser) callonDocumentFragment947() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment947()
}

func (c *current) onDocumentFragment951() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment951() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment951()
}

func (c *current) onDocumentFragment935(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.([]interface{}))

}

func (p *parser) callonDocumentFragment935() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment935(stack["level"], stack["title"])
}

func (c *current) onDocumentFragment959() (interface{}, error) {
	// TODO: Space* before EOF
	return types.NewThematicBreak()

}

func (p *parser) callonDocumentFragment959() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment959()
}

func (c *current) onDocumentFragment975() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment975() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment975()
}

func (c *current) onDocumentFragment978() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment978() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment978()
}

func (c *current) onDocumentFragment995() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment995() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment995()
}

func (c *current) onDocumentFragment1001() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1001() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1001()
}

func (c *current) onDocumentFragment999(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonDocumentFragment999() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment999(stack["content"])
}

func (c *current) onDocumentFragment991(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonDocumentFragment991() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment991(stack["content"])
}

func (c *current) onDocumentFragment1005() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1005() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1005()
}

func (c *current) onDocumentFragment1019() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1019() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1019()
}

func (c *current) onDocumentFragment1022() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1022() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1022()
}

func (c *current) onDocumentFragment1013() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1013() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1013()
}

func (c *current) onDocumentFragment987(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment987() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment987(stack["cells"])
}

func (c *current) onDocumentFragment1039() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1039() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1039()
}

func (c *current) onDocumentFragment1042() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1042() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1042()
}

func (c *current) onDocumentFragment1063() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1063() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1063()
}

func (c *current) onDocumentFragment1066() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1066() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1066()
}

func (c *current) onDocumentFragment1082() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1082() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1082()
}

func (c *current) onDocumentFragment1085() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1085() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1085()
}

func (c *current) onDocumentFragment1076() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1076() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1076()
}

func (c *current) onDocumentFragment1094() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1094() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1094()
}

func (c *current) onDocumentFragment1100() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1100()
}

func (c *current) onDocumentFragment1098(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonDocumentFragment1098() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1098(stack["content"])
}

func (c *current) onDocumentFragment1056(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonDocumentFragment1056() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1056(stack["content"])
}

func (c *current) onDocumentFragment1104() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1104()
}

func (c *current) onDocumentFragment1053(cell interface{}) (interface{}, error) {
	return cell, nil

}

func (p *parser) callonDocumentFragment1053() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1053(stack["cell"])
}

func (c *current) onDocumentFragment1119() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1119()
}

func (c *current) onDocumentFragment1122() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1122()
}

func (c *current) onDocumentFragment1113() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1113()
}

func (c *current) onDocumentFragment1134() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1134()
}

func (c *current) onDocumentFragment1137() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1137()
}

func (c *current) onDocumentFragment1032(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment1032() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1032(stack["cells"])
}

func (c *current) onDocumentFragment1153() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1153()
}

func (c *current) onDocumentFragment1156() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1156()
}

func (c *current) onDocumentFragment1174() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1174()
}

func (c *current) onDocumentFragment1177() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1177()
}

func (c *current) onDocumentFragment1193() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1193()
}

func (c *current) onDocumentFragment1196() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1196()
}

func (c *current) onDocumentFragment1187() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1187()
}

func (c *current) onDocumentFragment1205() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1205()
}

func (c *current) onDocumentFragment1211() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1211()
}

func (c *current) onDocumentFragment1209(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonDocumentFragment1209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1209(stack["content"])
}

func (c *current) onDocumentFragment1167(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonDocumentFragment1167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1167(stack["content"])
}

func (c *current) onDocumentFragment1215() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1215()
}

func (c *current) onDocumentFragment1229() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1229()
}

func (c *current) onDocumentFragment1232() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1232()
}

func (c *current) onDocumentFragment1223() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1223()
}

func (c *current) onDocumentFragment1146(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment1146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1146(stack["cells"])
}

func (c *current) onDocumentFragment1243() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1243()
}

func (c *current) onDocumentFragment1246() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1246()
}

func (c *current) onDocumentFragment971(header, rows interface{}) (interface{}, error) {
	return types.NewTable(header, rows.([]interface{}))

}

func (p *parser) callonDocumentFragment971() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment971(stack["header"], stack["rows"])
}

func (c *current) onDocumentFragment1261() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1261()
}

func (c *current) onDocumentFragment1265() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1265() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1265()
}

func (c *current) onDocumentFragment1255(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1255() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1255(stack["content"])
}

func (c *current) onDocumentFragment1276() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonDocumentFragment1276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1276()
}

func (c *current) onDocumentFragment1278() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonDocumentFragment1278() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1278()
}

func (c *current) onDocumentFragment1280() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonDocumentFragment1280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1280()
}

func (c *current) onDocumentFragment1282() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonDocumentFragment1282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1282()
}

func (c *current) onDocumentFragment1284() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonDocumentFragment1284() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1284()
}

func (c *current) onDocumentFragment1291() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1291() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1291()
}

func (c *current) onDocumentFragment1294(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment1294() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1294(stack["content"])
}

func (c *current) onDocumentFragment1296() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1296()
}

func (c *current) onDocumentFragment1288(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1288(stack["content"])
}

func (c *current) onDocumentFragment1311() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1311() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1311()
}

func (c *current) onDocumentFragment1313() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1313()
}

func (c *current) onDocumentFragment1326() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1326()
}

func (c *current) onDocumentFragment1330() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1330()
}

func (c *current) onDocumentFragment1320(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1320() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1320(stack["content"])
}

func (c *current) onDocumentFragment1340() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1340() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1340()
}

func (c *current) onDocumentFragment1343(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment1343() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1343(stack["content"])
}

func (c *current) onDocumentFragment1345() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1345() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1345()
}

func (c *current) onDocumentFragment1337(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1337() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1337(stack["content"])
}

func (c *current) onDocumentFragment1305(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment1305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1305(stack["line"])
}

func (c *current) onDocumentFragment1272(kind, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(kind.(string), append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDocumentFragment1272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1272(stack["kind"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment1360() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1360() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1360()
}

func (c *current) onDocumentFragment1358() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1358() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1358()
}

func (c *current) onDocumentFragment1365(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment1365() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1365(stack["content"])
}

func (c *current) onDocumentFragment1367() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1367() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1367()
}

func (c *current) onDocumentFragment1355(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1355() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1355(stack["content"])
}

func (c *current) onDocumentFragment1383() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1383()
}

func (c *current) onDocumentFragment1387() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1387() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1387()
}

func (c *current) onDocumentFragment1377(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1377() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1377(stack["content"])
}

func (c *current) onDocumentFragment1397() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1397() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1397()
}

func (c *current) onDocumentFragment1400(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment1400() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1400(stack["content"])
}

func (c *current) onDocumentFragment1402() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1402() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1402()
}

func (c *current) onDocumentFragment1394(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1394(stack["content"])
}

func (c *current) onDocumentFragment1352(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewLiteralParagraph(types.LiteralBlockWithSpacesOnFirstLine, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDocumentFragment1352() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1352(stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment1411() (bool, error) {
	return c.isFrontMatterAllowed(), nil

}

func (p *parser) callonDocumentFragment1411() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1411()
}

func (c *current) onDocumentFragment1417() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1417() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1417()
}

func (c *current) onDocumentFragment1420() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1420() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1420()
}

func (c *current) onDocumentFragment1437() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1437() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1437()
}

func (c *current) onDocumentFragment1440() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1440() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1440()
}

func (c *current) onDocumentFragment1429() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1429() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1429()
}

func (c *current) onDocumentFragment1450() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1450() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1450()
}

func (c *current) onDocumentFragment1453() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1453() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1453()
}

func (c *current) onDocumentFragment1413(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonDocumentFragment1413() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1413(stack["content"])
}

func (c *current) onDocumentFragment1409(frontmatter interface{}) (interface{}, error) {
	c.setFrontMatterAllowed(false) // not allowed anymore
	return frontmatter, nil

}

func (p *parser) callonDocumentFragment1409() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1409(stack["frontmatter"])
}

func (c *current) onDocumentFragment1466() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1466() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1466()
}

func (c *current) onDocumentFragment1469(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment1469() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1469(stack["content"])
}

func (c *current) onDocumentFragment1471() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1471() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1471()
}

func (c *current) onDocumentFragment1463(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1463() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1463(stack["content"])
}

func (c *current) onDocumentFragment1489() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1489() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1489()
}

func (c *current) onDocumentFragment1491() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1491() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1491()
}

func (c *current) onDocumentFragment1504() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1504() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1504()
}

func (c *current) onDocumentFragment1508() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1508() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1508()
}

func (c *current) onDocumentFragment1498(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1498() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1498(stack["content"])
}

func (c *current) onDocumentFragment1518() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1518() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1518()
}

func (c *current) onDocumentFragment1521(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment1521() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1521(stack["content"])
}

func (c *current) onDocumentFragment1523() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1523() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1523()
}

func (c *current) onDocumentFragment1515(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1515(stack["content"])
}

func (c *current) onDocumentFragment1480(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment1480() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1480(stack["line"])
}

func (c *current) onDocumentFragment1460(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...)...)

}

func (p *parser) callonDocumentFragment1460() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1460(stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment1(attributes, element interface{}) (interface{}, error) {
	c.setFrontMatterAllowed(false)    // not allowed anymore
	c.setDocumentHeaderAllowed(false) // not allowed anymore

	if element, ok := element.(types.BlockWithAttributes); ok && attributes != nil {
		element.AddAttributes(attributes.(types.Attributes))
	}
	return element, nil

}

func (p *parser) callonDocumentFragment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1(stack["attributes"], stack["element"])
}

func (c *current) onDocumentFragmentWithinVerbatimBlock13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragmentWithinVerbatimBlock13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentWithinVerbatimBlock13()
}

func (c *current) onDocumentFragmentWithinVerbatimBlock17() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragmentWithinVerbatimBlock17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentWithinVerbatimBlock17()
}

func (c *current) onDocumentFragmentWithinVerbatimBlock7(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragmentWithinVerbatimBlock7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentWithinVerbatimBlock7(stack["content"])
}

func (c *current) onDocumentFragmentWithinVerbatimBlock1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonDocumentFragmentWithinVerbatimBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragmentWithinVerbatimBlock1(stack["elements"])
}

func (c *current) onDelimitedBlockElements10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlockElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements10()
}

func (c *current) onDelimitedBlockElements6(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDelimitedBlockElements6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements6(stack["ref"])
}

func (c *current) onDelimitedBlockElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonDelimitedBlockElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements1(stack["elements"])
}

func (c *current) onBlockAttributes16() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes16()
}

func (c *current) onBlockAttributes23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes23()
}

func (c *current) onBlockAttributes19(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["ref"])
}

func (c *current) onBlockAttributes29() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonBlockAttributes29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes29()
}

func (c *current) onBlockAttributes36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes36()
}

func (c *current) onBlockAttributes48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes48()
}

func (c *current) onBlockAttributes50() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes50()
}

func (c *current) onBlockAttributes43(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes43(stack["start"])
}

func (c *current) onBlockAttributes32(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonBlockAttributes32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes32(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes58()
}

func (c *current) onBlockAttributes70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes70()
}

func (c *current) onBlockAttributes72() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes72()
}

func (c *current) onBlockAttributes65(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes65(stack["start"])
}

func (c *current) onBlockAttributes54(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonBlockAttributes54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes54(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes80()
}

func (c *current) onBlockAttributes76(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonBlockAttributes76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes76(stack["name"])
}

func (c *current) onBlockAttributes27(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonBlockAttributes27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes27(stack["element"])
}

func (c *current) onBlockAttributes86() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes86()
}

func (c *current) onBlockAttributes12(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonBlockAttributes12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes12(stack["elements"])
}

func (c *current) onBlockAttributes8(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonBlockAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes8(stack["id"])
}

func (c *current) onBlockAttributes90() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes90()
}

func (c *current) onBlockAttributes93() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes93()
}

func (c *current) onBlockAttributes5(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes114() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes114()
}

func (c *current) onBlockAttributes121() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes121()
}

func (c *current) onBlockAttributes117(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonBlockAttributes117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes117(stack["ref"])
}

func (c *current) onBlockAttributes127() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonBlockAttributes127() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes127()
}

func (c *current) onBlockAttributes134() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes134()
}

func (c *current) onBlockAttributes146() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes146()
}

func (c *current) onBlockAttributes148() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes148()
}

func (c *current) onBlockAttributes141(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes141(stack["start"])
}

func (c *current) onBlockAttributes130(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonBlockAttributes130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes130(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes156() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes156()
}

func (c *current) onBlockAttributes168() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes168()
}

func (c *current) onBlockAttributes170() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes170()
}

func (c *current) onBlockAttributes163(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes163(stack["start"])
}

func (c *current) onBlockAttributes152(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonBlockAttributes152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes152(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes178() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes178()
}

func (c *current) onBlockAttributes174(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonBlockAttributes174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes174(stack["name"])
}

func (c *current) onBlockAttributes125(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonBlockAttributes125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes125(stack["element"])
}

func (c *current) onBlockAttributes184() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes184()
}

func (c *current) onBlockAttributes107(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonBlockAttributes107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes107(stack["elements"])
}

func (c *current) onBlockAttributes103(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonBlockAttributes103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes103(stack["title"])
}

func (c *current) onBlockAttributes187() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes187()
}

func (c *current) onBlockAttributes190() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes190()
}

func (c *current) onBlockAttributes100(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes100(stack["title"])
}

func (c *current) onBlockAttributes202() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes202()
}

func (c *current) onBlockAttributes205() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes205()
}

func (c *current) onBlockAttributes197(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes197(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	// c.unsetCurrentSubstitution()
	return types.MergeAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes6(attribute interface{}) (interface{}, error) {
	return attribute, nil

}

func (p *parser) callonInlineAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes6(stack["attribute"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onLongHandAttributes25() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes25()
}

func (c *current) onLongHandAttributes28() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes28()
}

func (c *current) onLongHandAttributes32() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes32() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes32()
}

func (c *current) onLongHandAttributes39() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes39()
}

func (c *current) onLongHandAttributes51() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes51()
}

func (c *current) onLongHandAttributes53() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes53()
}

func (c *current) onLongHandAttributes46(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes46(stack["start"])
}

func (c *current) onLongHandAttributes35(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes35(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes61()
}

func (c *current) onLongHandAttributes73() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes73()
}

func (c *current) onLongHandAttributes75() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes75()
}

func (c *current) onLongHandAttributes68(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes68(stack["start"])
}

func (c *current) onLongHandAttributes57(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes57(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes83()
}

func (c *current) onLongHandAttributes79(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes79(stack["name"])
}

func (c *current) onLongHandAttributes30(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes30(stack["element"])
}

func (c *current) onLongHandAttributes89() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonLongHandAttributes89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes89()
}

func (c *current) onLongHandAttributes93() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes93()
}

func (c *current) onLongHandAttributes95() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes95()
}

func (c *current) onLongHandAttributes21(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes21(stack["elements"])
}

func (c *current) onLongHandAttributes15(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes15(stack["content"])
}

func (c *current) onLongHandAttributes109() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes109()
}

func (c *current) onLongHandAttributes112() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes112()
}

func (c *current) onLongHandAttributes116() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes116() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes116()
}

func (c *current) onLongHandAttributes123() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes123()
}

func (c *current) onLongHandAttributes135() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes135()
}

func (c *current) onLongHandAttributes137() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes137()
}

func (c *current) onLongHandAttributes130(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes130(stack["start"])
}

func (c *current) onLongHandAttributes119(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes119(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes145() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes145()
}

func (c *current) onLongHandAttributes157() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes157()
}

func (c *current) onLongHandAttributes159() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes159()
}

func (c *current) onLongHandAttributes152(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes152(stack["start"])
}

func (c *current) onLongHandAttributes141(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes141(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes167() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes167()
}

func (c *current) onLongHandAttributes163(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes163(stack["name"])
}

func (c *current) onLongHandAttributes114(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes114(stack["element"])
}

func (c *current) onLongHandAttributes173() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonLongHandAttributes173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes173()
}

func (c *current) onLongHandAttributes178() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes178()
}

func (c *current) onLongHandAttributes180() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes180()
}

func (c *current) onLongHandAttributes105(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes105(stack["elements"])
}

func (c *current) onLongHandAttributes188() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes188()
}

func (c *current) onLongHandAttributes99(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes99(stack["content"])
}

func (c *current) onLongHandAttributes196() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes196()
}

func (c *current) onLongHandAttributes203() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLongHandAttributes203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes203()
}

func (c *current) onLongHandAttributes199(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonLongHandAttributes199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes199(stack["ref"])
}

func (c *current) onLongHandAttributes209() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes209() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes209()
}

func (c *current) onLongHandAttributes216() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes216()
}

func (c *current) onLongHandAttributes228() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes228()
}

func (c *current) onLongHandAttributes230() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes230()
}

func (c *current) onLongHandAttributes223(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes223(stack["start"])
}

func (c *current) onLongHandAttributes212(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes212(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes238() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes238()
}

func (c *current) onLongHandAttributes250() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes250() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes250()
}

func (c *current) onLongHandAttributes252() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes252()
}

func (c *current) onLongHandAttributes245(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes245(stack["start"])
}

func (c *current) onLongHandAttributes234(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes234(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes260() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes260()
}

func (c *current) onLongHandAttributes256(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes256(stack["name"])
}

func (c *current) onLongHandAttributes207(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes207(stack["element"])
}

func (c *current) onLongHandAttributes266() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes266()
}

func (c *current) onLongHandAttributes272() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes272()
}

func (c *current) onLongHandAttributes191(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonLongHandAttributes191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes191(stack["elements"])
}

func (c *current) onLongHandAttributes12(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonLongHandAttributes12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes12(stack["value"])
}

func (c *current) onLongHandAttributes300() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes300()
}

func (c *current) onLongHandAttributes303() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes303() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes303()
}

func (c *current) onLongHandAttributes307() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes307() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes307()
}

func (c *current) onLongHandAttributes314() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes314()
}

func (c *current) onLongHandAttributes326() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes326()
}

func (c *current) onLongHandAttributes328() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes328()
}

func (c *current) onLongHandAttributes321(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes321(stack["start"])
}

func (c *current) onLongHandAttributes310(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes310(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes336() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes336() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes336()
}

func (c *current) onLongHandAttributes348() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes348()
}

func (c *current) onLongHandAttributes350() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes350() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes350()
}

func (c *current) onLongHandAttributes343(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes343(stack["start"])
}

func (c *current) onLongHandAttributes332(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes332() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes332(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes358() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes358() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes358()
}

func (c *current) onLongHandAttributes354(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes354() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes354(stack["name"])
}

func (c *current) onLongHandAttributes305(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes305(stack["element"])
}

func (c *current) onLongHandAttributes364() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonLongHandAttributes364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes364()
}

func (c *current) onLongHandAttributes368() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes368() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes368()
}

func (c *current) onLongHandAttributes370() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes370()
}

func (c *current) onLongHandAttributes296(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes296(stack["elements"])
}

func (c *current) onLongHandAttributes290(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes290(stack["content"])
}

func (c *current) onLongHandAttributes384() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes384() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes384()
}

func (c *current) onLongHandAttributes387() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes387() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes387()
}

func (c *current) onLongHandAttributes391() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes391() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes391()
}

func (c *current) onLongHandAttributes398() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes398() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes398()
}

func (c *current) onLongHandAttributes410() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes410() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes410()
}

func (c *current) onLongHandAttributes412() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes412() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes412()
}

func (c *current) onLongHandAttributes405(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes405() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes405(stack["start"])
}

func (c *current) onLongHandAttributes394(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes394(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes420() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes420() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes420()
}

func (c *current) onLongHandAttributes432() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes432() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes432()
}

func (c *current) onLongHandAttributes434() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes434() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes434()
}

func (c *current) onLongHandAttributes427(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes427() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes427(stack["start"])
}

func (c *current) onLongHandAttributes416(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes416() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes416(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes442() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes442() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes442()
}

func (c *current) onLongHandAttributes438(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes438() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes438(stack["name"])
}

func (c *current) onLongHandAttributes389(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes389(stack["element"])
}

func (c *current) onLongHandAttributes448() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonLongHandAttributes448() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes448()
}

func (c *current) onLongHandAttributes453() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes453() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes453()
}

func (c *current) onLongHandAttributes455() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes455() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes455()
}

func (c *current) onLongHandAttributes380(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes380() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes380(stack["elements"])
}

func (c *current) onLongHandAttributes463() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes463() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes463()
}

func (c *current) onLongHandAttributes374(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes374(stack["content"])
}

func (c *current) onLongHandAttributes471() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes471() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes471()
}

func (c *current) onLongHandAttributes478() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLongHandAttributes478() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes478()
}

func (c *current) onLongHandAttributes474(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonLongHandAttributes474() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes474(stack["ref"])
}

func (c *current) onLongHandAttributes484() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes484() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes484()
}

func (c *current) onLongHandAttributes491() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes491() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes491()
}

func (c *current) onLongHandAttributes503() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes503() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes503()
}

func (c *current) onLongHandAttributes505() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes505() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes505()
}

func (c *current) onLongHandAttributes498(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes498() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes498(stack["start"])
}

func (c *current) onLongHandAttributes487(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes487() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes487(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes513() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes513() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes513()
}

func (c *current) onLongHandAttributes525() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes525() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes525()
}

func (c *current) onLongHandAttributes527() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes527() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes527()
}

func (c *current) onLongHandAttributes520(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes520() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes520(stack["start"])
}

func (c *current) onLongHandAttributes509(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes509() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes509(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes535() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes535() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes535()
}

func (c *current) onLongHandAttributes531(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes531() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes531(stack["name"])
}

func (c *current) onLongHandAttributes482(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes482() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes482(stack["element"])
}

func (c *current) onLongHandAttributes541() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes541() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes541()
}

func (c *current) onLongHandAttributes547() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes547() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes547()
}

func (c *current) onLongHandAttributes466(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonLongHandAttributes466() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes466(stack["elements"])
}

func (c *current) onLongHandAttributes285(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonLongHandAttributes285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes285(stack["id"])
}

func (c *current) onLongHandAttributes565() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes565() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes565()
}

func (c *current) onLongHandAttributes568() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes568() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes568()
}

func (c *current) onLongHandAttributes572() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes572() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes572()
}

func (c *current) onLongHandAttributes579() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes579() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes579()
}

func (c *current) onLongHandAttributes591() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes591() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes591()
}

func (c *current) onLongHandAttributes593() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes593() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes593()
}

func (c *current) onLongHandAttributes586(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes586() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes586(stack["start"])
}

func (c *current) onLongHandAttributes575(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes575() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes575(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes601() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes601() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes601()
}

func (c *current) onLongHandAttributes613() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes613() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes613()
}

func (c *current) onLongHandAttributes615() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes615() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes615()
}

func (c *current) onLongHandAttributes608(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes608() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes608(stack["start"])
}

func (c *current) onLongHandAttributes597(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes597() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes597(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes623() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes623() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes623()
}

func (c *current) onLongHandAttributes619(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes619() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes619(stack["name"])
}

func (c *current) onLongHandAttributes570(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes570() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes570(stack["element"])
}

func (c *current) onLongHandAttributes629() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonLongHandAttributes629() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes629()
}

func (c *current) onLongHandAttributes633() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes633() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes633()
}

func (c *current) onLongHandAttributes635() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes635() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes635()
}

func (c *current) onLongHandAttributes561(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes561() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes561(stack["elements"])
}

func (c *current) onLongHandAttributes555(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes555() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes555(stack["content"])
}

func (c *current) onLongHandAttributes649() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes649() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes649()
}

func (c *current) onLongHandAttributes652() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes652() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes652()
}

func (c *current) onLongHandAttributes656() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes656() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes656()
}

func (c *current) onLongHandAttributes663() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes663() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes663()
}

func (c *current) onLongHandAttributes675() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes675() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes675()
}

func (c *current) onLongHandAttributes677() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes677() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes677()
}

func (c *current) onLongHandAttributes670(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes670() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes670(stack["start"])
}

func (c *current) onLongHandAttributes659(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes659() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes659(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes685() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes685() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes685()
}

func (c *current) onLongHandAttributes697() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes697() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes697()
}

func (c *current) onLongHandAttributes699() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes699() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes699()
}

func (c *current) onLongHandAttributes692(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes692() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes692(stack["start"])
}

func (c *current) onLongHandAttributes681(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes681() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes681(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes707() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes707() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes707()
}

func (c *current) onLongHandAttributes703(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes703() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes703(stack["name"])
}

func (c *current) onLongHandAttributes654(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes654() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes654(stack["element"])
}

func (c *current) onLongHandAttributes713() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonLongHandAttributes713() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes713()
}

func (c *current) onLongHandAttributes718() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes718() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes718()
}

func (c *current) onLongHandAttributes720() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes720() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes720()
}

func (c *current) onLongHandAttributes645(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes645() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes645(stack["elements"])
}

func (c *current) onLongHandAttributes728() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes728() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes728()
}

func (c *current) onLongHandAttributes639(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes639() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes639(stack["content"])
}

func (c *current) onLongHandAttributes736() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes736() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes736()
}

func (c *current) onLongHandAttributes743() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLongHandAttributes743() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes743()
}

func (c *current) onLongHandAttributes739(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonLongHandAttributes739() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes739(stack["ref"])
}

func (c *current) onLongHandAttributes749() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes749() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes749()
}

func (c *current) onLongHandAttributes756() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes756() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes756()
}

func (c *current) onLongHandAttributes768() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes768() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes768()
}

func (c *current) onLongHandAttributes770() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes770() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes770()
}

func (c *current) onLongHandAttributes763(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes763() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes763(stack["start"])
}

func (c *current) onLongHandAttributes752(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes752() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes752(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes778() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes778() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes778()
}

func (c *current) onLongHandAttributes790() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes790() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes790()
}

func (c *current) onLongHandAttributes792() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes792() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes792()
}

func (c *current) onLongHandAttributes785(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes785() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes785(stack["start"])
}

func (c *current) onLongHandAttributes774(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes774() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes774(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes800() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes800() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes800()
}

func (c *current) onLongHandAttributes796(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes796() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes796(stack["name"])
}

func (c *current) onLongHandAttributes747(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes747() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes747(stack["element"])
}

func (c *current) onLongHandAttributes806() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes806() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes806()
}

func (c *current) onLongHandAttributes812() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes812() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes812()
}

func (c *current) onLongHandAttributes731(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonLongHandAttributes731() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes731(stack["elements"])
}

func (c *current) onLongHandAttributes550(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonLongHandAttributes550() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes550(stack["option"])
}

func (c *current) onLongHandAttributes830() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes830() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes830()
}

func (c *current) onLongHandAttributes833() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes833() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes833()
}

func (c *current) onLongHandAttributes837() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes837() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes837()
}

func (c *current) onLongHandAttributes844() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes844() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes844()
}

func (c *current) onLongHandAttributes856() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes856() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes856()
}

func (c *current) onLongHandAttributes858() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes858() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes858()
}

func (c *current) onLongHandAttributes851(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes851() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes851(stack["start"])
}

func (c *current) onLongHandAttributes840(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes840() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes840(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes866() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes866() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes866()
}

func (c *current) onLongHandAttributes878() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes878() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes878()
}

func (c *current) onLongHandAttributes880() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes880() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes880()
}

func (c *current) onLongHandAttributes873(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes873() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes873(stack["start"])
}

func (c *current) onLongHandAttributes862(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes862() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes862(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes888() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes888() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes888()
}

func (c *current) onLongHandAttributes884(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes884() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes884(stack["name"])
}

func (c *current) onLongHandAttributes835(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes835() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes835(stack["element"])
}

func (c *current) onLongHandAttributes894() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonLongHandAttributes894() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes894()
}

func (c *current) onLongHandAttributes898() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes898() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes898()
}

func (c *current) onLongHandAttributes900() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes900() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes900()
}

func (c *current) onLongHandAttributes826(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes826() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes826(stack["elements"])
}

func (c *current) onLongHandAttributes820(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes820() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes820(stack["content"])
}

func (c *current) onLongHandAttributes914() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes914() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes914()
}

func (c *current) onLongHandAttributes917() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes917() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes917()
}

func (c *current) onLongHandAttributes921() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes921() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes921()
}

func (c *current) onLongHandAttributes928() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes928() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes928()
}

func (c *current) onLongHandAttributes940() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes940() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes940()
}

func (c *current) onLongHandAttributes942() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes942() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes942()
}

func (c *current) onLongHandAttributes935(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes935() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes935(stack["start"])
}

func (c *current) onLongHandAttributes924(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes924() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes924(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes950() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes950() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes950()
}

func (c *current) onLongHandAttributes962() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes962() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes962()
}

func (c *current) onLongHandAttributes964() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes964() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes964()
}

func (c *current) onLongHandAttributes957(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes957() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes957(stack["start"])
}

func (c *current) onLongHandAttributes946(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes946() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes946(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes972() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes972() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes972()
}

func (c *current) onLongHandAttributes968(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes968() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes968(stack["name"])
}

func (c *current) onLongHandAttributes919(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes919() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes919(stack["element"])
}

func (c *current) onLongHandAttributes978() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonLongHandAttributes978() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes978()
}

func (c *current) onLongHandAttributes983() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonLongHandAttributes983() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes983()
}

func (c *current) onLongHandAttributes985() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes985() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes985()
}

func (c *current) onLongHandAttributes910(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonLongHandAttributes910() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes910(stack["elements"])
}

func (c *current) onLongHandAttributes993() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes993() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes993()
}

func (c *current) onLongHandAttributes904(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonLongHandAttributes904() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes904(stack["content"])
}

func (c *current) onLongHandAttributes1001() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes1001() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1001()
}

func (c *current) onLongHandAttributes1008() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLongHandAttributes1008() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1008()
}

func (c *current) onLongHandAttributes1004(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonLongHandAttributes1004() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1004(stack["ref"])
}

func (c *current) onLongHandAttributes1014() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonLongHandAttributes1014() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1014()
}

func (c *current) onLongHandAttributes1021() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1021() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1021()
}

func (c *current) onLongHandAttributes1033() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1033() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1033()
}

func (c *current) onLongHandAttributes1035() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes1035() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1035()
}

func (c *current) onLongHandAttributes1028(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes1028() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1028(stack["start"])
}

func (c *current) onLongHandAttributes1017(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLongHandAttributes1017() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1017(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes1043() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1043() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1043()
}

func (c *current) onLongHandAttributes1055() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1055() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1055()
}

func (c *current) onLongHandAttributes1057() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLongHandAttributes1057() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1057()
}

func (c *current) onLongHandAttributes1050(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLongHandAttributes1050() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1050(stack["start"])
}

func (c *current) onLongHandAttributes1039(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLongHandAttributes1039() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1039(stack["name"], stack["start"])
}

func (c *current) onLongHandAttributes1065() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1065() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1065()
}

func (c *current) onLongHandAttributes1061(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLongHandAttributes1061() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1061(stack["name"])
}

func (c *current) onLongHandAttributes1012(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLongHandAttributes1012() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1012(stack["element"])
}

func (c *current) onLongHandAttributes1071() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLongHandAttributes1071() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1071()
}

func (c *current) onLongHandAttributes1077() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1077() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1077()
}

func (c *current) onLongHandAttributes996(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonLongHandAttributes996() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes996(stack["elements"])
}

func (c *current) onLongHandAttributes815(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonLongHandAttributes815() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes815(stack["role"])
}

func (c *current) onLongHandAttributes277(extra interface{}) (interface{}, error) {
	return extra, nil

}

func (p *parser) callonLongHandAttributes277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes277(stack["extra"])
}

func (c *current) onLongHandAttributes1084() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLongHandAttributes1084() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1084()
}

func (c *current) onLongHandAttributes1086(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonLongHandAttributes1086() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1086(stack["main"], stack["extras"])
}

func (c *current) onLongHandAttributes8(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonLongHandAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes8(stack["main"], stack["extras"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onPositionalAttribute11() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute11()
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute20() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute20()
}

func (c *current) onPositionalAttribute26() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute26()
}

func (c *current) onPositionalAttribute30(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute30(stack["value"])
}

func (c *current) onPositionalAttribute15(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute15(stack["value"])
}

func (c *current) onNamedAttribute7() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute7()
}

func (c *current) onNamedAttribute12() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute12()
}

func (c *current) onNamedAttribute4() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttribute4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute4()
}

func (c *current) onNamedAttribute16() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute16()
}

func (c *current) onNamedAttribute24() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute24()
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onAttributeRawValue15() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue15()
}

func (c *current) onAttributeRawValue18() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue18()
}

func (c *current) onAttributeRawValue22() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributeRawValue22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue22()
}

func (c *current) onAttributeRawValue29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue29()
}

func (c *current) onAttributeRawValue41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue41()
}

func (c *current) onAttributeRawValue43() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeRawValue43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue43()
}

func (c *current) onAttributeRawValue36(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeRawValue36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue36(stack["start"])
}

func (c *current) onAttributeRawValue25(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonAttributeRawValue25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue25(stack["name"], stack["start"])
}

func (c *current) onAttributeRawValue51() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue51()
}

func (c *current) onAttributeRawValue63() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue63()
}

func (c *current) onAttributeRawValue65() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeRawValue65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue65()
}

func (c *current) onAttributeRawValue58(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeRawValue58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue58(stack["start"])
}

func (c *current) onAttributeRawValue47(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonAttributeRawValue47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue47(stack["name"], stack["start"])
}

func (c *current) onAttributeRawValue73() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue73()
}

func (c *current) onAttributeRawValue69(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeRawValue69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue69(stack["name"])
}

func (c *current) onAttributeRawValue20(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributeRawValue20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue20(stack["element"])
}

func (c *current) onAttributeRawValue79() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonAttributeRawValue79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue79()
}

func (c *current) onAttributeRawValue83() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonAttributeRawValue83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue83()
}

func (c *current) onAttributeRawValue85() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeRawValue85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue85()
}

func (c *current) onAttributeRawValue11(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonAttributeRawValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue11(stack["elements"])
}

func (c *current) onAttributeRawValue5(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonAttributeRawValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue5(stack["content"])
}

func (c *current) onAttributeRawValue99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue99()
}

func (c *current) onAttributeRawValue102() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue102()
}

func (c *current) onAttributeRawValue106() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributeRawValue106() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue106()
}

func (c *current) onAttributeRawValue113() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue113()
}

func (c *current) onAttributeRawValue125() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue125()
}

func (c *current) onAttributeRawValue127() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeRawValue127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue127()
}

func (c *current) onAttributeRawValue120(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeRawValue120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue120(stack["start"])
}

func (c *current) onAttributeRawValue109(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonAttributeRawValue109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue109(stack["name"], stack["start"])
}

func (c *current) onAttributeRawValue135() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue135()
}

func (c *current) onAttributeRawValue147() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue147()
}

func (c *current) onAttributeRawValue149() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeRawValue149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue149()
}

func (c *current) onAttributeRawValue142(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeRawValue142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue142(stack["start"])
}

func (c *current) onAttributeRawValue131(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonAttributeRawValue131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue131(stack["name"], stack["start"])
}

func (c *current) onAttributeRawValue157() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue157()
}

func (c *current) onAttributeRawValue153(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeRawValue153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue153(stack["name"])
}

func (c *current) onAttributeRawValue104(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributeRawValue104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue104(stack["element"])
}

func (c *current) onAttributeRawValue163() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonAttributeRawValue163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue163()
}

func (c *current) onAttributeRawValue168() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonAttributeRawValue168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue168()
}

func (c *current) onAttributeRawValue170() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeRawValue170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue170()
}

func (c *current) onAttributeRawValue95(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonAttributeRawValue95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue95(stack["elements"])
}

func (c *current) onAttributeRawValue178() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue178()
}

func (c *current) onAttributeRawValue89(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonAttributeRawValue89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue89(stack["content"])
}

func (c *current) onAttributeRawValue186() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonAttributeRawValue186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue186()
}

func (c *current) onAttributeRawValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeRawValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeRawValue1(stack["value"])
}

func (c *current) onUnquotedAttributeRawValue4() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue4()
}

func (c *current) onUnquotedAttributeRawValue17() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUnquotedAttributeRawValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue17()
}

func (c *current) onUnquotedAttributeRawValue13(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonUnquotedAttributeRawValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue13(stack["ref"])
}

func (c *current) onUnquotedAttributeRawValue23() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonUnquotedAttributeRawValue23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue23()
}

func (c *current) onUnquotedAttributeRawValue30() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue30()
}

func (c *current) onUnquotedAttributeRawValue42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue42()
}

func (c *current) onUnquotedAttributeRawValue44() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeRawValue44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue44()
}

func (c *current) onUnquotedAttributeRawValue37(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeRawValue37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue37(stack["start"])
}

func (c *current) onUnquotedAttributeRawValue26(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonUnquotedAttributeRawValue26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue26(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeRawValue52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue52()
}

func (c *current) onUnquotedAttributeRawValue64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue64()
}

func (c *current) onUnquotedAttributeRawValue66() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeRawValue66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue66()
}

func (c *current) onUnquotedAttributeRawValue59(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeRawValue59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue59(stack["start"])
}

func (c *current) onUnquotedAttributeRawValue48(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonUnquotedAttributeRawValue48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue48(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeRawValue74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue74()
}

func (c *current) onUnquotedAttributeRawValue70(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonUnquotedAttributeRawValue70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue70(stack["name"])
}

func (c *current) onUnquotedAttributeRawValue21(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonUnquotedAttributeRawValue21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue21(stack["element"])
}

func (c *current) onUnquotedAttributeRawValue80() (interface{}, error) {
	// not within brackets and stop on space
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue80()
}

func (c *current) onUnquotedAttributeRawValue83() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeRawValue83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue83()
}

func (c *current) onUnquotedAttributeRawValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeRawValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeRawValue1(stack["elements"])
}

func (c *current) onCrossReference6() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference6()
}

func (c *current) onCrossReference10() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonCrossReference10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference10()
}

func (c *current) onCrossReference16() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference16()
}

func (c *current) onCrossReference23() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonCrossReference23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference23()
}

func (c *current) onCrossReference30() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference30()
}

func (c *current) onCrossReference42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference42()
}

func (c *current) onCrossReference44() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCrossReference44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference44()
}

func (c *current) onCrossReference37(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCrossReference37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference37(stack["start"])
}

func (c *current) onCrossReference26(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCrossReference26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference26(stack["name"], stack["start"])
}

func (c *current) onCrossReference52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference52()
}

func (c *current) onCrossReference64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference64()
}

func (c *current) onCrossReference66() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCrossReference66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference66()
}

func (c *current) onCrossReference59(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCrossReference59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference59(stack["start"])
}

func (c *current) onCrossReference48(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCrossReference48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference48(stack["name"], stack["start"])
}

func (c *current) onCrossReference74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference74()
}

func (c *current) onCrossReference70(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonCrossReference70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference70(stack["name"])
}

func (c *current) onCrossReference21(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonCrossReference21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference21(stack["element"])
}

func (c *current) onCrossReference80() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference80()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference87() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference87()
}

func (c *current) onCrossReference83(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonCrossReference83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference83(stack["id"])
}

func (c *current) onExternalCrossReference13() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference13()
}

func (c *current) onExternalCrossReference18() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonExternalCrossReference18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference18()
}

func (c *current) onExternalCrossReference25() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference25()
}

func (c *current) onExternalCrossReference37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference37()
}

func (c *current) onExternalCrossReference39() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference39()
}

func (c *current) onExternalCrossReference32(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference32(stack["start"])
}

func (c *current) onExternalCrossReference21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonExternalCrossReference21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference21(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference47()
}

func (c *current) onExternalCrossReference59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference59()
}

func (c *current) onExternalCrossReference61() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference61()
}

func (c *current) onExternalCrossReference54(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference54(stack["start"])
}

func (c *current) onExternalCrossReference43(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonExternalCrossReference43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference43(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference69()
}

func (c *current) onExternalCrossReference65(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonExternalCrossReference65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference65(stack["name"])
}

func (c *current) onExternalCrossReference16(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalCrossReference16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference16(stack["element"])
}

func (c *current) onExternalCrossReference77() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonExternalCrossReference77() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference77()
}

func (c *current) onExternalCrossReference86() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference86()
}

func (c *current) onExternalCrossReference90() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference90()
}

func (c *current) onExternalCrossReference96() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference96()
}

func (c *current) onExternalCrossReference103() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonExternalCrossReference103() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference103()
}

func (c *current) onExternalCrossReference110() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference110()
}

func (c *current) onExternalCrossReference122() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference122()
}

func (c *current) onExternalCrossReference124() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference124()
}

func (c *current) onExternalCrossReference117(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference117(stack["start"])
}

func (c *current) onExternalCrossReference106(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonExternalCrossReference106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference106(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference132() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference132()
}

func (c *current) onExternalCrossReference144() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference144()
}

func (c *current) onExternalCrossReference146() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference146()
}

func (c *current) onExternalCrossReference139(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference139(stack["start"])
}

func (c *current) onExternalCrossReference128(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonExternalCrossReference128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference128(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference154() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference154()
}

func (c *current) onExternalCrossReference150(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonExternalCrossReference150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference150(stack["name"])
}

func (c *current) onExternalCrossReference101(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalCrossReference101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference101(stack["element"])
}

func (c *current) onExternalCrossReference160() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference160()
}

func (c *current) onExternalCrossReference82(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonExternalCrossReference82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference82(stack["id"], stack["label"])
}

func (c *current) onExternalCrossReference167() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference167()
}

func (c *current) onExternalCrossReference163(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonExternalCrossReference163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference163(stack["id"])
}

func (c *current) onExternalCrossReference80() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference80()
}

func (c *current) onExternalCrossReference171() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonExternalCrossReference171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference171()
}

func (c *current) onExternalCrossReference75(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalCrossReference75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference75(stack["element"])
}

func (c *current) onExternalCrossReference173() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference173()
}

func (c *current) onExternalCrossReference9(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalCrossReference9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference9(stack["elements"])
}

func (c *current) onExternalCrossReference179() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalCrossReference179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference179()
}

func (c *current) onExternalCrossReference175(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonExternalCrossReference175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference175(stack["ref"])
}

func (c *current) onExternalCrossReference5(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonExternalCrossReference5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference5(stack["path"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onDelimitedBlock4() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Comment), nil

}

func (p *parser) callonDelimitedBlock4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock4()
}

func (c *current) onDelimitedBlock7() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock7()
}

func (c *current) onDelimitedBlock10() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock10()
}

func (c *current) onDelimitedBlock17() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Comment)
	return true, nil

}

func (p *parser) callonDelimitedBlock17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock17()
}

func (c *current) onDelimitedBlock27() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock27()
}

func (c *current) onDelimitedBlock30() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock30()
}

func (c *current) onDelimitedBlock46() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock46()
}

func (c *current) onDelimitedBlock50() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock50()
}

func (c *current) onDelimitedBlock40(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDelimitedBlock40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock40(stack["content"])
}

func (c *current) onDelimitedBlock20(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDelimitedBlock20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock20(stack["line"])
}

func (c *current) onDelimitedBlock62() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock62()
}

func (c *current) onDelimitedBlock65() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock65()
}

func (c *current) onDelimitedBlock2(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDelimitedBlock2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock2(stack["content"])
}

func (c *current) onDelimitedBlock90() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock90()
}

func (c *current) onDelimitedBlock93() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock93()
}

func (c *current) onDelimitedBlock84() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDelimitedBlock84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock84()
}

func (c *current) onDelimitedBlock102() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock102()
}

func (c *current) onDelimitedBlock106() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock106()
}

func (c *current) onDelimitedBlock81(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDelimitedBlock81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock81(stack["content"])
}

func (c *current) onDelimitedBlock125() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock125()
}

func (c *current) onDelimitedBlock128() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock128()
}

func (c *current) onDelimitedBlock119() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDelimitedBlock119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock119()
}

func (c *current) onDelimitedBlock137() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock137()
}

func (c *current) onDelimitedBlock141() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock141()
}

func (c *current) onDelimitedBlock116(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDelimitedBlock116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock116(stack["content"])
}

func (c *current) onDelimitedBlock151() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock151()
}

func (c *current) onDelimitedBlock154(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDelimitedBlock154() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock154(stack["content"])
}

func (c *current) onDelimitedBlock156() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock156()
}

func (c *current) onDelimitedBlock148(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDelimitedBlock148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock148(stack["content"])
}

func (c *current) onDelimitedBlock78(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDelimitedBlock78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock78(stack["firstLine"], stack["otherLines"])
}

func (c *current) onExampleBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Example), nil

}

func (p *parser) callonExampleBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock3()
}

func (c *current) onExampleBlock6() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExampleBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock6()
}

func (c *current) onExampleBlock9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExampleBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock9()
}

func (c *current) onExampleBlock16() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Example)
	return true, nil

}

func (p *parser) callonExampleBlock16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock16()
}

func (c *current) onExampleBlock23() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExampleBlock23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock23()
}

func (c *current) onExampleBlock26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExampleBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock26()
}

func (c *current) onExampleBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Example, content.([]interface{}))

}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["content"])
}

func (c *current) onExampleBlockContent9() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExampleBlockContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockContent9()
}

func (c *current) onExampleBlockContent12() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExampleBlockContent12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockContent12()
}

func (c *current) onExampleBlockContent30() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonExampleBlockContent30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockContent30()
}

func (c *current) onExampleBlockContent34() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExampleBlockContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockContent34()
}

func (c *current) onExampleBlockContent24(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonExampleBlockContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockContent24(stack["content"])
}

func (c *current) onExampleBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonExampleBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockContent2(stack["line"])
}

func (c *current) onFencedBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Fenced), nil

}

func (p *parser) callonFencedBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock3()
}

func (c *current) onFencedBlock6() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonFencedBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock6()
}

func (c *current) onFencedBlock9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFencedBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock9()
}

func (c *current) onFencedBlock16() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Fenced)
	return true, nil

}

func (p *parser) callonFencedBlock16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock16()
}

func (c *current) onFencedBlock23() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonFencedBlock23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock23()
}

func (c *current) onFencedBlock26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFencedBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock26()
}

func (c *current) onFencedBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}))

}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["content"])
}

func (c *current) onFencedBlockContent9() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonFencedBlockContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockContent9()
}

func (c *current) onFencedBlockContent12() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFencedBlockContent12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockContent12()
}

func (c *current) onFencedBlockContent30() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonFencedBlockContent30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockContent30()
}

func (c *current) onFencedBlockContent34() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFencedBlockContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockContent34()
}

func (c *current) onFencedBlockContent24(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonFencedBlockContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockContent24(stack["content"])
}

func (c *current) onFencedBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonFencedBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockContent2(stack["line"])
}

func (c *current) onListingBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Listing), nil

}

func (p *parser) callonListingBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock3()
}

func (c *current) onListingBlock6() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListingBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock6()
}

func (c *current) onListingBlock9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListingBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock9()
}

func (c *current) onListingBlock16() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Listing)
	return true, nil

}

func (p *parser) callonListingBlock16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock16()
}

func (c *current) onListingBlock23() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListingBlock23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock23()
}

func (c *current) onListingBlock26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListingBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock26()
}

func (c *current) onListingBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}))

}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["content"])
}

func (c *current) onListingBlockContent9() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListingBlockContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockContent9()
}

func (c *current) onListingBlockContent12() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListingBlockContent12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockContent12()
}

func (c *current) onListingBlockContent30() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListingBlockContent30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockContent30()
}

func (c *current) onListingBlockContent34() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListingBlockContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockContent34()
}

func (c *current) onListingBlockContent24(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListingBlockContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockContent24(stack["content"])
}

func (c *current) onListingBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListingBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockContent2(stack["line"])
}

func (c *current) onLiteralBlock5() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLiteralBlock5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock5()
}

func (c *current) onLiteralBlock8() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonLiteralBlock8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock8()
}

func (c *current) onLiteralBlock15() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Literal), nil

}

func (p *parser) callonLiteralBlock15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock15()
}

func (c *current) onLiteralBlock18(content interface{}) (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Literal)
	return true, nil

}

func (p *parser) callonLiteralBlock18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock18(stack["content"])
}

func (c *current) onLiteralBlock24() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLiteralBlock24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock24()
}

func (c *current) onLiteralBlock27() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonLiteralBlock27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock27()
}

func (c *current) onLiteralBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Literal, content.([]interface{}))

}

func (p *parser) callonLiteralBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlock1(stack["content"])
}

func (c *current) onLiteralBlockContent9() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonLiteralBlockContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent9()
}

func (c *current) onLiteralBlockContent12() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonLiteralBlockContent12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent12()
}

func (c *current) onLiteralBlockContent30() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonLiteralBlockContent30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent30()
}

func (c *current) onLiteralBlockContent34() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonLiteralBlockContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent34()
}

func (c *current) onLiteralBlockContent24(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonLiteralBlockContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent24(stack["content"])
}

func (c *current) onLiteralBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonLiteralBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent2(stack["line"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonMarkdownQuoteAttribution9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution9()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil

}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onPassthroughBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Passthrough), nil

}

func (p *parser) callonPassthroughBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock3()
}

func (c *current) onPassthroughBlock6() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonPassthroughBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock6()
}

func (c *current) onPassthroughBlock9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonPassthroughBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock9()
}

func (c *current) onPassthroughBlock16() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Passthrough)
	return true, nil

}

func (p *parser) callonPassthroughBlock16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock16()
}

func (c *current) onPassthroughBlock24() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonPassthroughBlock24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock24()
}

func (c *current) onPassthroughBlock27() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonPassthroughBlock27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock27()
}

func (c *current) onPassthroughBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}))

}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["content"])
}

func (c *current) onPassthroughBlockContent9() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonPassthroughBlockContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockContent9()
}

func (c *current) onPassthroughBlockContent12() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonPassthroughBlockContent12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockContent12()
}

func (c *current) onPassthroughBlockContent30() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonPassthroughBlockContent30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockContent30()
}

func (c *current) onPassthroughBlockContent34() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonPassthroughBlockContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockContent34()
}

func (c *current) onPassthroughBlockContent24(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonPassthroughBlockContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockContent24(stack["content"])
}

func (c *current) onPassthroughBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonPassthroughBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockContent2(stack["line"])
}

func (c *current) onQuoteBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Quote), nil

}

func (p *parser) callonQuoteBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock3()
}

func (c *current) onQuoteBlock6() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonQuoteBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock6()
}

func (c *current) onQuoteBlock9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonQuoteBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock9()
}

func (c *current) onQuoteBlock16() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Quote)
	return true, nil

}

func (p *parser) callonQuoteBlock16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock16()
}

func (c *current) onQuoteBlock23() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonQuoteBlock23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock23()
}

func (c *current) onQuoteBlock26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonQuoteBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock26()
}

func (c *current) onQuoteBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}))

}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["content"])
}

func (c *current) onQuoteBlockContent9() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonQuoteBlockContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockContent9()
}

func (c *current) onQuoteBlockContent12() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockContent12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockContent12()
}

func (c *current) onQuoteBlockContent30() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonQuoteBlockContent30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockContent30()
}

func (c *current) onQuoteBlockContent34() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockContent34()
}

func (c *current) onQuoteBlockContent24(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonQuoteBlockContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockContent24(stack["content"])
}

func (c *current) onQuoteBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonQuoteBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockContent2(stack["line"])
}

func (c *current) onSidebarBlock3() (bool, error) {
	// only accept if not already in a delimited block of this kind
	return !c.isWithinDelimitedBlockOfKind(types.Sidebar), nil

}

func (p *parser) callonSidebarBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock3()
}

func (c *current) onSidebarBlock6() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSidebarBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock6()
}

func (c *current) onSidebarBlock9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSidebarBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock9()
}

func (c *current) onSidebarBlock16() (bool, error) {
	// only accept if the delimiter matches the current delimited block or if no kind is registered yet
	c.setWithinDelimitedBlockOfKind(types.Sidebar)
	return true, nil

}

func (p *parser) callonSidebarBlock16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock16()
}

func (c *current) onSidebarBlock23() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSidebarBlock23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock23()
}

func (c *current) onSidebarBlock26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSidebarBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock26()
}

func (c *current) onSidebarBlock1(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}))

}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockContent9() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSidebarBlockContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockContent9()
}

func (c *current) onSidebarBlockContent12() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockContent12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockContent12()
}

func (c *current) onSidebarBlockContent30() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonSidebarBlockContent30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockContent30()
}

func (c *current) onSidebarBlockContent34() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockContent34()
}

func (c *current) onSidebarBlockContent24(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonSidebarBlockContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockContent24(stack["content"])
}

func (c *current) onSidebarBlockContent2(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonSidebarBlockContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockContent2(stack["line"])
}

func (c *current) onFileInclusion3() (bool, error) {
	// skip if disabled
	return c.isRuleEnabled(FileInclusion)

}

func (p *parser) callonFileInclusion3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion3()
}

func (c *current) onFileInclusion4() error {
	// force/enable attribute substitution
	// log.Debug("entering FileInclusion rule")
	return c.setCurrentSubstitution("attributes")

}

func (p *parser) callonFileInclusion4() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4()
}

func (c *current) onFileInclusion18() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion18()
}

func (c *current) onFileInclusion23() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonFileInclusion23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion23()
}

func (c *current) onFileInclusion30() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion30()
}

func (c *current) onFileInclusion42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion42()
}

func (c *current) onFileInclusion44() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion44()
}

func (c *current) onFileInclusion37(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion37(stack["start"])
}

func (c *current) onFileInclusion26(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonFileInclusion26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion26(stack["name"], stack["start"])
}

func (c *current) onFileInclusion52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion52()
}

func (c *current) onFileInclusion64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion64()
}

func (c *current) onFileInclusion66() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion66()
}

func (c *current) onFileInclusion59(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion59(stack["start"])
}

func (c *current) onFileInclusion48(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonFileInclusion48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion48(stack["name"], stack["start"])
}

func (c *current) onFileInclusion74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion74()
}

func (c *current) onFileInclusion70(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonFileInclusion70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion70(stack["name"])
}

func (c *current) onFileInclusion21(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileInclusion21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion21(stack["element"])
}

func (c *current) onFileInclusion82() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonFileInclusion82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion82()
}

func (c *current) onFileInclusion91() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileInclusion91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion91()
}

func (c *current) onFileInclusion95() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonFileInclusion95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion95()
}

func (c *current) onFileInclusion101() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion101()
}

func (c *current) onFileInclusion108() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonFileInclusion108() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion108()
}

func (c *current) onFileInclusion115() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion115()
}

func (c *current) onFileInclusion127() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion127()
}

func (c *current) onFileInclusion129() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion129()
}

func (c *current) onFileInclusion122(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion122(stack["start"])
}

func (c *current) onFileInclusion111(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonFileInclusion111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion111(stack["name"], stack["start"])
}

func (c *current) onFileInclusion137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion137()
}

func (c *current) onFileInclusion149() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion149()
}

func (c *current) onFileInclusion151() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion151()
}

func (c *current) onFileInclusion144(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion144(stack["start"])
}

func (c *current) onFileInclusion133(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonFileInclusion133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion133(stack["name"], stack["start"])
}

func (c *current) onFileInclusion159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion159()
}

func (c *current) onFileInclusion155(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonFileInclusion155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion155(stack["name"])
}

func (c *current) onFileInclusion106(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileInclusion106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion106(stack["element"])
}

func (c *current) onFileInclusion165() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion165()
}

func (c *current) onFileInclusion87(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonFileInclusion87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion87(stack["id"], stack["label"])
}

func (c *current) onFileInclusion172() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileInclusion172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion172()
}

func (c *current) onFileInclusion168(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonFileInclusion168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion168(stack["id"])
}

func (c *current) onFileInclusion85() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion85()
}

func (c *current) onFileInclusion176() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonFileInclusion176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion176()
}

func (c *current) onFileInclusion80(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileInclusion80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion80(stack["element"])
}

func (c *current) onFileInclusion178() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion178()
}

func (c *current) onFileInclusion14(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFileInclusion14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion14(stack["elements"])
}

func (c *current) onFileInclusion184() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileInclusion184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion184()
}

func (c *current) onFileInclusion180(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileInclusion180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion180(stack["ref"])
}

func (c *current) onFileInclusion10(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileInclusion10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion10(stack["path"])
}

func (c *current) onFileInclusion6(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(*types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion6(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion191() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonFileInclusion191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion191()
}

func (c *current) onFileInclusion194() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFileInclusion194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion194()
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(*types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges17()
}

func (c *current) onLineRanges12() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges12()
}

func (c *current) onLineRanges26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges26()
}

func (c *current) onLineRanges21() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges21()
}

func (c *current) onLineRanges9(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges9(stack["start"], stack["end"])
}

func (c *current) onLineRanges35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges35()
}

func (c *current) onLineRanges30() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges30()
}

func (c *current) onLineRanges28(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges28(stack["singleline"])
}

func (c *current) onLineRanges52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges52()
}

func (c *current) onLineRanges47() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges47()
}

func (c *current) onLineRanges61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges61()
}

func (c *current) onLineRanges56() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges56()
}

func (c *current) onLineRanges44(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges44(stack["start"], stack["end"])
}

func (c *current) onLineRanges70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges70()
}

func (c *current) onLineRanges65() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges65()
}

func (c *current) onLineRanges63(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges63(stack["singleline"])
}

func (c *current) onLineRanges39(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonLineRanges39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges39(stack["other"])
}

func (c *current) onLineRanges5(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonLineRanges5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges5(stack["first"], stack["others"])
}

func (c *current) onLineRanges80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges80()
}

func (c *current) onLineRanges75() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges75()
}

func (c *current) onLineRanges89() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges89()
}

func (c *current) onLineRanges84() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges84()
}

func (c *current) onLineRanges72(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges72(stack["start"], stack["end"])
}

func (c *current) onLineRanges98() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLineRanges98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges98()
}

func (c *current) onLineRanges93() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges93()
}

func (c *current) onLineRanges91(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges91(stack["singleline"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onTagRanges11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges11()
}

func (c *current) onTagRanges17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges17()
}

func (c *current) onTagRanges20(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges20(stack["stars"])
}

func (c *current) onTagRanges14(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges14(stack["stars"])
}

func (c *current) onTagRanges8(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges8(stack["tag"])
}

func (c *current) onTagRanges26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges26()
}

func (c *current) onTagRanges32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges32()
}

func (c *current) onTagRanges35(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges35() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges35(stack["stars"])
}

func (c *current) onTagRanges29(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges29(stack["stars"])
}

func (c *current) onTagRanges21(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges21(stack["tag"])
}

func (c *current) onTagRanges46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges46()
}

func (c *current) onTagRanges52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges52()
}

func (c *current) onTagRanges55(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges55(stack["stars"])
}

func (c *current) onTagRanges49(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges49(stack["stars"])
}

func (c *current) onTagRanges43(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges43(stack["tag"])
}

func (c *current) onTagRanges61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges61()
}

func (c *current) onTagRanges67() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges67()
}

func (c *current) onTagRanges70(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges70(stack["stars"])
}

func (c *current) onTagRanges64(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges64(stack["stars"])
}

func (c *current) onTagRanges56(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges56(stack["tag"])
}

func (c *current) onTagRanges38(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonTagRanges38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges38(stack["other"])
}

func (c *current) onTagRanges4(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonTagRanges4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges4(stack["first"], stack["others"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onIncludedFileLine11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine11()
}

func (c *current) onIncludedFileLine10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine10()
}

func (c *current) onIncludedFileLine6(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine6(stack["tag"])
}

func (c *current) onIncludedFileLine20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine20()
}

func (c *current) onIncludedFileLine19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine19()
}

func (c *current) onIncludedFileLine15(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileLine15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine15(stack["tag"])
}

func (c *current) onIncludedFileLine24() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine24()
}

func (c *current) onIncludedFileLine27() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine27()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onInlineElement9() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineElement9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement9()
}

func (c *current) onInlineElement14() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement14()
}

func (c *current) onInlineElement4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement4()
}

func (c *current) onInlineElement21() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonInlineElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement21()
}

func (c *current) onInlineElement26() (bool, error) {

	return c.isPreceededBySpace(), nil

}

func (p *parser) callonInlineElement26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement26()
}

func (c *current) onInlineElement29() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineElement29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement29()
}

func (c *current) onInlineElement33() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement33()
}

func (c *current) onInlineElement24() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonInlineElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement24()
}

func (c *current) onInlineElement43() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement43()
}

func (c *current) onInlineElement53() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonInlineElement53() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement53()
}

func (c *current) onInlineElement62() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement62()
}

func (c *current) onInlineElement66() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineElement66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement66()
}

func (c *current) onInlineElement72() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement72()
}

func (c *current) onInlineElement79() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonInlineElement79() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement79()
}

func (c *current) onInlineElement86() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement86()
}

func (c *current) onInlineElement98() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement98()
}

func (c *current) onInlineElement100() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement100()
}

func (c *current) onInlineElement93(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement93(stack["start"])
}

func (c *current) onInlineElement82(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonInlineElement82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement82(stack["name"], stack["start"])
}

func (c *current) onInlineElement108() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement108()
}

func (c *current) onInlineElement120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement120()
}

func (c *current) onInlineElement122() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement122()
}

func (c *current) onInlineElement115(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement115(stack["start"])
}

func (c *current) onInlineElement104(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonInlineElement104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement104(stack["name"], stack["start"])
}

func (c *current) onInlineElement130() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement130()
}

func (c *current) onInlineElement126(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonInlineElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement126(stack["name"])
}

func (c *current) onInlineElement77(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement77(stack["element"])
}

func (c *current) onInlineElement136() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement136()
}

func (c *current) onInlineElement58(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInlineElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement58(stack["id"], stack["label"])
}

func (c *current) onInlineElement143() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement143()
}

func (c *current) onInlineElement139(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInlineElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement139(stack["id"])
}

func (c *current) onInlineElement56() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement56()
}

func (c *current) onInlineElement147() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonInlineElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement147()
}

func (c *current) onInlineElement51(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement51(stack["element"])
}

func (c *current) onInlineElement152() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonInlineElement152() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement152()
}

func (c *current) onInlineElement159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement159()
}

func (c *current) onInlineElement171() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement171()
}

func (c *current) onInlineElement173() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement173()
}

func (c *current) onInlineElement166(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement166(stack["start"])
}

func (c *current) onInlineElement155(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonInlineElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement155(stack["name"], stack["start"])
}

func (c *current) onInlineElement181() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement181()
}

func (c *current) onInlineElement193() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement193()
}

func (c *current) onInlineElement195() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement195()
}

func (c *current) onInlineElement188(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement188(stack["start"])
}

func (c *current) onInlineElement177(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonInlineElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement177(stack["name"], stack["start"])
}

func (c *current) onInlineElement203() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement203()
}

func (c *current) onInlineElement199(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonInlineElement199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement199(stack["name"])
}

func (c *current) onInlineElement150(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement150(stack["element"])
}

func (c *current) onInlineElement210() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonInlineElement210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement210()
}

func (c *current) onInlineElement212() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonInlineElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement212()
}

func (c *current) onInlineElement214() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonInlineElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement214()
}

func (c *current) onInlineElement216() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonInlineElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement216()
}

func (c *current) onInlineElement218() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonInlineElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement218()
}

func (c *current) onInlineElement220() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonInlineElement220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement220()
}

func (c *current) onInlineElement230() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement230()
}

func (c *current) onInlineElement226(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineElement226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement226(stack["ref"])
}

func (c *current) onInlineElement234() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement234()
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))

}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent5()
}

func (c *current) onIndexTermContent14() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent14()
}

func (c *current) onIndexTermContent25() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent25()
}

func (c *current) onIndexTermContent29() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonIndexTermContent29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent29()
}

func (c *current) onIndexTermContent38() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent38()
}

func (c *current) onIndexTermContent42() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent42()
}

func (c *current) onIndexTermContent48() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent48()
}

func (c *current) onIndexTermContent55() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonIndexTermContent55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent55()
}

func (c *current) onIndexTermContent62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent62()
}

func (c *current) onIndexTermContent74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent74()
}

func (c *current) onIndexTermContent76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonIndexTermContent76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent76()
}

func (c *current) onIndexTermContent69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonIndexTermContent69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent69(stack["start"])
}

func (c *current) onIndexTermContent58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonIndexTermContent58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent58(stack["name"], stack["start"])
}

func (c *current) onIndexTermContent84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent84()
}

func (c *current) onIndexTermContent96() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent96()
}

func (c *current) onIndexTermContent98() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonIndexTermContent98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent98()
}

func (c *current) onIndexTermContent91(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonIndexTermContent91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent91(stack["start"])
}

func (c *current) onIndexTermContent80(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonIndexTermContent80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent80(stack["name"], stack["start"])
}

func (c *current) onIndexTermContent106() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent106()
}

func (c *current) onIndexTermContent102(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonIndexTermContent102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent102(stack["name"])
}

func (c *current) onIndexTermContent53(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonIndexTermContent53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent53(stack["element"])
}

func (c *current) onIndexTermContent112() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent112()
}

func (c *current) onIndexTermContent34(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonIndexTermContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent34(stack["id"], stack["label"])
}

func (c *current) onIndexTermContent119() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent119()
}

func (c *current) onIndexTermContent115(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonIndexTermContent115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent115(stack["id"])
}

func (c *current) onIndexTermContent32() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent32()
}

func (c *current) onIndexTermContent123() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonIndexTermContent123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent123()
}

func (c *current) onIndexTermContent27(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonIndexTermContent27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent27(stack["element"])
}

func (c *current) onIndexTermContent129() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent129()
}

func (c *current) onIndexTermContent125(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonIndexTermContent125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent125(stack["ref"])
}

func (c *current) onIndexTermContent133() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent133()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onImageBlock3() (bool, error) {
	// AttrPositional1 must not be set
	return types.HasNotAttribute(c.globalStore.getAttributes(), types.AttrPositional1), nil

}

func (p *parser) callonImageBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock23() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock23()
}

func (c *current) onImageBlock28() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonImageBlock28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock28()
}

func (c *current) onImageBlock35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock35()
}

func (c *current) onImageBlock47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock47()
}

func (c *current) onImageBlock49() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock49()
}

func (c *current) onImageBlock42(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock42(stack["start"])
}

func (c *current) onImageBlock31(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonImageBlock31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock31(stack["name"], stack["start"])
}

func (c *current) onImageBlock57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock57()
}

func (c *current) onImageBlock69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock69()
}

func (c *current) onImageBlock71() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock71()
}

func (c *current) onImageBlock64(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock64(stack["start"])
}

func (c *current) onImageBlock53(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonImageBlock53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock53(stack["name"], stack["start"])
}

func (c *current) onImageBlock79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock79()
}

func (c *current) onImageBlock75(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonImageBlock75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock75(stack["name"])
}

func (c *current) onImageBlock26(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonImageBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock26(stack["element"])
}

func (c *current) onImageBlock87() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonImageBlock87() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock87()
}

func (c *current) onImageBlock96() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonImageBlock96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock96()
}

func (c *current) onImageBlock100() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonImageBlock100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock100()
}

func (c *current) onImageBlock106() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock106()
}

func (c *current) onImageBlock113() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonImageBlock113() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock113()
}

func (c *current) onImageBlock120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock120()
}

func (c *current) onImageBlock132() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock132()
}

func (c *current) onImageBlock134() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock134()
}

func (c *current) onImageBlock127(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock127(stack["start"])
}

func (c *current) onImageBlock116(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonImageBlock116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock116(stack["name"], stack["start"])
}

func (c *current) onImageBlock142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock142()
}

func (c *current) onImageBlock154() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock154()
}

func (c *current) onImageBlock156() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock156()
}

func (c *current) onImageBlock149(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock149(stack["start"])
}

func (c *current) onImageBlock138(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonImageBlock138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock138(stack["name"], stack["start"])
}

func (c *current) onImageBlock164() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock164()
}

func (c *current) onImageBlock160(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonImageBlock160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock160(stack["name"])
}

func (c *current) onImageBlock111(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonImageBlock111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock111(stack["element"])
}

func (c *current) onImageBlock170() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock170()
}

func (c *current) onImageBlock92(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonImageBlock92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock92(stack["id"], stack["label"])
}

func (c *current) onImageBlock177() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonImageBlock177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock177()
}

func (c *current) onImageBlock173(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonImageBlock173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock173(stack["id"])
}

func (c *current) onImageBlock90() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock90()
}

func (c *current) onImageBlock181() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonImageBlock181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock181()
}

func (c *current) onImageBlock85(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonImageBlock85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock85(stack["element"])
}

func (c *current) onImageBlock183() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock183()
}

func (c *current) onImageBlock19(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonImageBlock19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock19(stack["elements"])
}

func (c *current) onImageBlock189() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImageBlock189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock189()
}

func (c *current) onImageBlock185(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonImageBlock185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock185(stack["ref"])
}

func (c *current) onImageBlock6(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonImageBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock6(stack["scheme"], stack["path"])
}

func (c *current) onImageBlock196() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonImageBlock196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock196()
}

func (c *current) onImageBlock199() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonImageBlock199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock199()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	// c.unsetCurrentSubstitution()
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage24() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage24()
}

func (c *current) onInlineImage29() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonInlineImage29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage29()
}

func (c *current) onInlineImage36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage36()
}

func (c *current) onInlineImage48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage48()
}

func (c *current) onInlineImage50() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage50()
}

func (c *current) onInlineImage43(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage43(stack["start"])
}

func (c *current) onInlineImage32(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonInlineImage32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage32(stack["name"], stack["start"])
}

func (c *current) onInlineImage58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage58()
}

func (c *current) onInlineImage70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage70()
}

func (c *current) onInlineImage72() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage72()
}

func (c *current) onInlineImage65(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage65(stack["start"])
}

func (c *current) onInlineImage54(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonInlineImage54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage54(stack["name"], stack["start"])
}

func (c *current) onInlineImage80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage80()
}

func (c *current) onInlineImage76(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonInlineImage76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage76(stack["name"])
}

func (c *current) onInlineImage27(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineImage27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage27(stack["element"])
}

func (c *current) onInlineImage88() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonInlineImage88() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage88()
}

func (c *current) onInlineImage97() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineImage97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage97()
}

func (c *current) onInlineImage101() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineImage101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage101()
}

func (c *current) onInlineImage107() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage107()
}

func (c *current) onInlineImage114() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonInlineImage114() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage114()
}

func (c *current) onInlineImage121() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage121()
}

func (c *current) onInlineImage133() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage133()
}

func (c *current) onInlineImage135() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage135()
}

func (c *current) onInlineImage128(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage128(stack["start"])
}

func (c *current) onInlineImage117(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonInlineImage117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage117(stack["name"], stack["start"])
}

func (c *current) onInlineImage143() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage143()
}

func (c *current) onInlineImage155() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage155()
}

func (c *current) onInlineImage157() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage157()
}

func (c *current) onInlineImage150(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage150(stack["start"])
}

func (c *current) onInlineImage139(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonInlineImage139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage139(stack["name"], stack["start"])
}

func (c *current) onInlineImage165() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage165()
}

func (c *current) onInlineImage161(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonInlineImage161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage161(stack["name"])
}

func (c *current) onInlineImage112(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineImage112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage112(stack["element"])
}

func (c *current) onInlineImage171() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage171()
}

func (c *current) onInlineImage93(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInlineImage93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage93(stack["id"], stack["label"])
}

func (c *current) onInlineImage178() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineImage178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage178()
}

func (c *current) onInlineImage174(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInlineImage174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage174(stack["id"])
}

func (c *current) onInlineImage91() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage91()
}

func (c *current) onInlineImage182() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonInlineImage182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage182()
}

func (c *current) onInlineImage86(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineImage86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage86(stack["element"])
}

func (c *current) onInlineImage184() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage184()
}

func (c *current) onInlineImage20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineImage20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage20(stack["elements"])
}

func (c *current) onInlineImage190() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineImage190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage190()
}

func (c *current) onInlineImage186(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineImage186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage186(stack["ref"])
}

func (c *current) onInlineImage7(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonInlineImage7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage7(stack["scheme"], stack["path"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(*types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content)

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineFootnote12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote12()
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	// TODO: use only this rule with `ref:(FootnoteRef)?`
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onPassthroughMacro7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro7()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro17()
}

func (c *current) onPassthroughMacro10(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro10(stack["content"])
}

func (c *current) onRelativeLink22() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink22()
}

func (c *current) onRelativeLink27() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonRelativeLink27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink27()
}

func (c *current) onRelativeLink34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink34()
}

func (c *current) onRelativeLink46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink46()
}

func (c *current) onRelativeLink48() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink48()
}

func (c *current) onRelativeLink41(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink41(stack["start"])
}

func (c *current) onRelativeLink30(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonRelativeLink30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink30(stack["name"], stack["start"])
}

func (c *current) onRelativeLink56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink56()
}

func (c *current) onRelativeLink68() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink68()
}

func (c *current) onRelativeLink70() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink70()
}

func (c *current) onRelativeLink63(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink63(stack["start"])
}

func (c *current) onRelativeLink52(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonRelativeLink52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink52(stack["name"], stack["start"])
}

func (c *current) onRelativeLink78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink78()
}

func (c *current) onRelativeLink74(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonRelativeLink74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink74(stack["name"])
}

func (c *current) onRelativeLink25(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink25(stack["element"])
}

func (c *current) onRelativeLink86() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonRelativeLink86() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink86()
}

func (c *current) onRelativeLink95() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonRelativeLink95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink95()
}

func (c *current) onRelativeLink99() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonRelativeLink99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink99()
}

func (c *current) onRelativeLink105() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink105()
}

func (c *current) onRelativeLink112() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonRelativeLink112() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink112()
}

func (c *current) onRelativeLink119() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink119()
}

func (c *current) onRelativeLink131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink131()
}

func (c *current) onRelativeLink133() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink133()
}

func (c *current) onRelativeLink126(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink126(stack["start"])
}

func (c *current) onRelativeLink115(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonRelativeLink115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink115(stack["name"], stack["start"])
}

func (c *current) onRelativeLink141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink141()
}

func (c *current) onRelativeLink153() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink153()
}

func (c *current) onRelativeLink155() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink155()
}

func (c *current) onRelativeLink148(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink148(stack["start"])
}

func (c *current) onRelativeLink137(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonRelativeLink137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink137(stack["name"], stack["start"])
}

func (c *current) onRelativeLink163() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink163()
}

func (c *current) onRelativeLink159(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonRelativeLink159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink159(stack["name"])
}

func (c *current) onRelativeLink110(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink110(stack["element"])
}

func (c *current) onRelativeLink169() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink169()
}

func (c *current) onRelativeLink91(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonRelativeLink91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink91(stack["id"], stack["label"])
}

func (c *current) onRelativeLink176() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonRelativeLink176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink176()
}

func (c *current) onRelativeLink172(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonRelativeLink172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink172(stack["id"])
}

func (c *current) onRelativeLink89() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink89()
}

func (c *current) onRelativeLink180() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonRelativeLink180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink180()
}

func (c *current) onRelativeLink84(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink84(stack["element"])
}

func (c *current) onRelativeLink182() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink182()
}

func (c *current) onRelativeLink18(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonRelativeLink18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink18(stack["elements"])
}

func (c *current) onRelativeLink188() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink188()
}

func (c *current) onRelativeLink184(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonRelativeLink184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink184(stack["ref"])
}

func (c *current) onRelativeLink5(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonRelativeLink5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink5(stack["scheme"], stack["path"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes.(types.Attributes))

}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink22() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink22()
}

func (c *current) onExternalLink27() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonExternalLink27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink27()
}

func (c *current) onExternalLink34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink34()
}

func (c *current) onExternalLink46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink46()
}

func (c *current) onExternalLink48() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink48()
}

func (c *current) onExternalLink41(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink41(stack["start"])
}

func (c *current) onExternalLink30(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonExternalLink30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink30(stack["name"], stack["start"])
}

func (c *current) onExternalLink56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink56()
}

func (c *current) onExternalLink68() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink68()
}

func (c *current) onExternalLink70() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink70()
}

func (c *current) onExternalLink63(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink63(stack["start"])
}

func (c *current) onExternalLink52(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonExternalLink52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink52(stack["name"], stack["start"])
}

func (c *current) onExternalLink78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink78()
}

func (c *current) onExternalLink74(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonExternalLink74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink74(stack["name"])
}

func (c *current) onExternalLink25(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink25(stack["element"])
}

func (c *current) onExternalLink86() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonExternalLink86() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink86()
}

func (c *current) onExternalLink95() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalLink95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink95()
}

func (c *current) onExternalLink99() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExternalLink99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink99()
}

func (c *current) onExternalLink105() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink105()
}

func (c *current) onExternalLink112() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonExternalLink112() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink112()
}

func (c *current) onExternalLink119() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink119()
}

func (c *current) onExternalLink131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink131()
}

func (c *current) onExternalLink133() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink133()
}

func (c *current) onExternalLink126(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink126(stack["start"])
}

func (c *current) onExternalLink115(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonExternalLink115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink115(stack["name"], stack["start"])
}

func (c *current) onExternalLink141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink141()
}

func (c *current) onExternalLink153() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink153()
}

func (c *current) onExternalLink155() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink155()
}

func (c *current) onExternalLink148(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink148(stack["start"])
}

func (c *current) onExternalLink137(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonExternalLink137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink137(stack["name"], stack["start"])
}

func (c *current) onExternalLink163() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink163()
}

func (c *current) onExternalLink159(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonExternalLink159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink159(stack["name"])
}

func (c *current) onExternalLink110(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink110(stack["element"])
}

func (c *current) onExternalLink169() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink169()
}

func (c *current) onExternalLink91(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonExternalLink91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink91(stack["id"], stack["label"])
}

func (c *current) onExternalLink176() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalLink176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink176()
}

func (c *current) onExternalLink172(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonExternalLink172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink172(stack["id"])
}

func (c *current) onExternalLink89() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink89()
}

func (c *current) onExternalLink180() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonExternalLink180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink180()
}

func (c *current) onExternalLink84(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink84(stack["element"])
}

func (c *current) onExternalLink182() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink182()
}

func (c *current) onExternalLink18(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalLink18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink18(stack["elements"])
}

func (c *current) onExternalLink188() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink188()
}

func (c *current) onExternalLink184(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonExternalLink184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink184(stack["ref"])
}

func (c *current) onExternalLink4(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonExternalLink4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink4(stack["scheme"], stack["path"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), inlineAttributes)

}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onListElements11() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements11()
}

func (c *current) onListElements18() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements18()
}

func (c *current) onListElements21(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements21(stack["depth"])
}

func (c *current) onListElements15(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElements15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements15(stack["depth"])
}

func (c *current) onListElements22() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElements22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements22()
}

func (c *current) onListElements27() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElements27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements27()
}

func (c *current) onListElements31() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElements31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements31()
}

func (c *current) onListElements35() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElements35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements35()
}

func (c *current) onListElements40() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElements40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements40()
}

func (c *current) onListElements45(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements45(stack["prefix"])
}

func (c *current) onListElements8(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements8(stack["prefix"])
}

func (c *current) onListElements52() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements52()
}

func (c *current) onListElements56() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements56()
}

func (c *current) onListElements49(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElements49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements49(stack["rawline"])
}

func (c *current) onListElements5(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonListElements5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements5(stack["prefix"], stack["content"])
}

func (c *current) onListElements69() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements69()
}

func (c *current) onListElements76() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements76()
}

func (c *current) onListElements79(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements79() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements79(stack["depth"])
}

func (c *current) onListElements73(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElements73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements73(stack["depth"])
}

func (c *current) onListElements81() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElements81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements81()
}

func (c *current) onListElements83(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements83(stack["prefix"])
}

func (c *current) onListElements66(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements66(stack["prefix"])
}

func (c *current) onListElements94() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonListElements94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements94()
}

func (c *current) onListElements96() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElements96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements96()
}

func (c *current) onListElements98() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElements98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements98()
}

func (c *current) onListElements100(style interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements100(stack["style"])
}

func (c *current) onListElements88(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonListElements88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements88(stack["style"])
}

func (c *current) onListElements107() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements107()
}

func (c *current) onListElements111() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements111()
}

func (c *current) onListElements104(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElements104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements104(stack["rawline"])
}

func (c *current) onListElements63(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonListElements63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements63(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onListElements125() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElements125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements125()
}

func (c *current) onListElements129(ref interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements129(stack["ref"])
}

func (c *current) onListElements121(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElements121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements121(stack["ref"])
}

func (c *current) onListElements136() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements136()
}

func (c *current) onListElements140() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements140()
}

func (c *current) onListElements133(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonListElements133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements133(stack["rawline"])
}

func (c *current) onListElements118(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonListElements118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements118(stack["ref"], stack["description"])
}

func (c *current) onListElements157() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements157()
}

func (c *current) onListElements160(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements160() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements160(stack["separator"])
}

func (c *current) onListElements154(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements154(stack["separator"])
}

func (c *current) onListElements163() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements163()
}

func (c *current) onListElements150() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements150()
}

func (c *current) onListElements175() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements175()
}

func (c *current) onListElements178(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements178() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements178(stack["separator"])
}

func (c *current) onListElements172(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements172(stack["separator"])
}

func (c *current) onListElements184() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements184()
}

func (c *current) onListElements187() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements187()
}

func (c *current) onListElements201() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements201()
}

func (c *current) onListElements204() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements204()
}

func (c *current) onListElements195() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElements195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements195()
}

func (c *current) onListElements222() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements222()
}

func (c *current) onListElements225() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements225()
}

func (c *current) onListElements216() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElements216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements216()
}

func (c *current) onListElements236() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements236()
}

func (c *current) onListElements238() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements238()
}

func (c *current) onListElements247() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements247()
}

func (c *current) onListElements254() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements254()
}

func (c *current) onListElements257(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements257() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements257(stack["depth"])
}

func (c *current) onListElements251(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElements251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements251(stack["depth"])
}

func (c *current) onListElements258() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElements258() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements258()
}

func (c *current) onListElements263() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElements263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements263()
}

func (c *current) onListElements267() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElements267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements267()
}

func (c *current) onListElements271() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElements271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements271()
}

func (c *current) onListElements276() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElements276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements276()
}

func (c *current) onListElements281(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements281() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements281(stack["prefix"])
}

func (c *current) onListElements244(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements244(stack["prefix"])
}

func (c *current) onListElements288() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements288()
}

func (c *current) onListElements295() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements295()
}

func (c *current) onListElements298(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements298() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements298(stack["depth"])
}

func (c *current) onListElements292(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElements292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements292(stack["depth"])
}

func (c *current) onListElements300() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElements300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements300()
}

func (c *current) onListElements302(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements302(stack["prefix"])
}

func (c *current) onListElements285(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements285(stack["prefix"])
}

func (c *current) onListElements310() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElements310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements310()
}

func (c *current) onListElements314(ref interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements314(stack["ref"])
}

func (c *current) onListElements306(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElements306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements306(stack["ref"])
}

func (c *current) onListElements326() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements326()
}

func (c *current) onListElements329(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements329() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements329(stack["separator"])
}

func (c *current) onListElements323(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements323() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements323(stack["separator"])
}

func (c *current) onListElements332() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements332() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements332()
}

func (c *current) onListElements319() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements319()
}

func (c *current) onListElements343() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements343()
}

func (c *current) onListElements346(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements346() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements346(stack["separator"])
}

func (c *current) onListElements340(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements340() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements340(stack["separator"])
}

func (c *current) onListElements357() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements357() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements357()
}

func (c *current) onListElements360() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements360() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements360()
}

func (c *current) onListElements370() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements370()
}

func (c *current) onListElements373() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements373() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements373()
}

func (c *current) onListElements383() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements383()
}

func (c *current) onListElements386() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements386() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements386()
}

func (c *current) onListElements396() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements396() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements396()
}

func (c *current) onListElements399() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements399()
}

func (c *current) onListElements409() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements409() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements409()
}

func (c *current) onListElements412() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements412() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements412()
}

func (c *current) onListElements422() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements422() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements422()
}

func (c *current) onListElements425() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements425() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements425()
}

func (c *current) onListElements435() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements435() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements435()
}

func (c *current) onListElements438() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements438() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements438()
}

func (c *current) onListElements448() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElements448() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements448()
}

func (c *current) onListElements451() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements451() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements451()
}

func (c *current) onListElements348(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonListElements348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements348(stack["delimiter"])
}

func (c *current) onListElements459() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonListElements459() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements459()
}

func (c *current) onListElements463() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements463() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements463()
}

func (c *current) onListElements213(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElements213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements213(stack["content"])
}

func (c *current) onListElements181(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonListElements181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements181(stack["content"])
}

func (c *current) onListElements472() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements472() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements472()
}

func (c *current) onListElements476() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements476() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements476()
}

func (c *current) onListElements480() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements480() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements480()
}

func (c *current) onListElements470(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonListElements470() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements470(stack["content"])
}

func (c *current) onListElements147(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonListElements147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements147(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onListElements1(firstElement, extraElements interface{}) (interface{}, error) {
	return types.NewListElements(append([]interface{}{firstElement}, extraElements.([]interface{})...))

}

func (p *parser) callonListElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements1(stack["firstElement"], stack["extraElements"])
}

func (c *current) onExtraListElements1(elements interface{}) (interface{}, error) {
	return types.Flatten(elements.([]interface{})), nil
}

func (p *parser) callonExtraListElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElements1(stack["elements"])
}

func (c *current) onExtraListElement17() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement17()
}

func (c *current) onExtraListElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement20()
}

func (c *current) onExtraListElement11() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement11()
}

func (c *current) onExtraListElement34() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement34()
}

func (c *current) onExtraListElement41() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement41()
}

func (c *current) onExtraListElement44(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement44() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement44(stack["depth"])
}

func (c *current) onExtraListElement38(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement38(stack["depth"])
}

func (c *current) onExtraListElement45() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement45()
}

func (c *current) onExtraListElement50() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement50()
}

func (c *current) onExtraListElement54() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement54()
}

func (c *current) onExtraListElement58() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement58()
}

func (c *current) onExtraListElement63() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement63()
}

func (c *current) onExtraListElement68(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement68(stack["prefix"])
}

func (c *current) onExtraListElement31(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement31(stack["prefix"])
}

func (c *current) onExtraListElement75() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement75()
}

func (c *current) onExtraListElement79() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement79()
}

func (c *current) onExtraListElement72(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement72(stack["rawline"])
}

func (c *current) onExtraListElement28(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonExtraListElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement28(stack["prefix"], stack["content"])
}

func (c *current) onExtraListElement8(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement8(stack["element"])
}

func (c *current) onExtraListElement98() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement98()
}

func (c *current) onExtraListElement105() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement105()
}

func (c *current) onExtraListElement108(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement108() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement108(stack["depth"])
}

func (c *current) onExtraListElement102(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement102(stack["depth"])
}

func (c *current) onExtraListElement109() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement109()
}

func (c *current) onExtraListElement114() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement114()
}

func (c *current) onExtraListElement118() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement118()
}

func (c *current) onExtraListElement122() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement122()
}

func (c *current) onExtraListElement127() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement127()
}

func (c *current) onExtraListElement132(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement132(stack["prefix"])
}

func (c *current) onExtraListElement95(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement95(stack["prefix"])
}

func (c *current) onExtraListElement139() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement139()
}

func (c *current) onExtraListElement143() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement143()
}

func (c *current) onExtraListElement136(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement136(stack["rawline"])
}

func (c *current) onExtraListElement92(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonExtraListElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement92(stack["prefix"], stack["content"])
}

func (c *current) onExtraListElement86(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement86(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement159() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement159()
}

func (c *current) onExtraListElement162() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement162()
}

func (c *current) onExtraListElement153() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement153()
}

func (c *current) onExtraListElement176() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement176()
}

func (c *current) onExtraListElement183() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement183()
}

func (c *current) onExtraListElement186(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement186() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement186(stack["depth"])
}

func (c *current) onExtraListElement180(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement180(stack["depth"])
}

func (c *current) onExtraListElement188() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement188()
}

func (c *current) onExtraListElement190(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement190(stack["prefix"])
}

func (c *current) onExtraListElement173(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement173(stack["prefix"])
}

func (c *current) onExtraListElement201() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonExtraListElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement201()
}

func (c *current) onExtraListElement203() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement203()
}

func (c *current) onExtraListElement205() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement205()
}

func (c *current) onExtraListElement207(style interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement207(stack["style"])
}

func (c *current) onExtraListElement195(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonExtraListElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement195(stack["style"])
}

func (c *current) onExtraListElement214() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement214()
}

func (c *current) onExtraListElement218() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement218()
}

func (c *current) onExtraListElement211(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement211(stack["rawline"])
}

func (c *current) onExtraListElement170(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonExtraListElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement170(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onExtraListElement150(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement150(stack["element"])
}

func (c *current) onExtraListElement237() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement237()
}

func (c *current) onExtraListElement244() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement244()
}

func (c *current) onExtraListElement247(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement247() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement247(stack["depth"])
}

func (c *current) onExtraListElement241(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement241(stack["depth"])
}

func (c *current) onExtraListElement249() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement249()
}

func (c *current) onExtraListElement251(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement251(stack["prefix"])
}

func (c *current) onExtraListElement234(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement234(stack["prefix"])
}

func (c *current) onExtraListElement262() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonExtraListElement262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement262()
}

func (c *current) onExtraListElement264() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement264()
}

func (c *current) onExtraListElement266() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement266()
}

func (c *current) onExtraListElement268(style interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement268(stack["style"])
}

func (c *current) onExtraListElement256(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonExtraListElement256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement256(stack["style"])
}

func (c *current) onExtraListElement275() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement275()
}

func (c *current) onExtraListElement279() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement279()
}

func (c *current) onExtraListElement272(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement272(stack["rawline"])
}

func (c *current) onExtraListElement231(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonExtraListElement231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement231(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onExtraListElement225(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement225(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement295() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement295()
}

func (c *current) onExtraListElement298() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement298()
}

func (c *current) onExtraListElement289() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement289() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement289()
}

func (c *current) onExtraListElement313() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement313()
}

func (c *current) onExtraListElement317(ref interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement317(stack["ref"])
}

func (c *current) onExtraListElement309(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement309() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement309(stack["ref"])
}

func (c *current) onExtraListElement324() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement324() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement324()
}

func (c *current) onExtraListElement328() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement328()
}

func (c *current) onExtraListElement321(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonExtraListElement321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement321(stack["rawline"])
}

func (c *current) onExtraListElement306(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonExtraListElement306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement306(stack["ref"], stack["description"])
}

func (c *current) onExtraListElement286(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement286(stack["element"])
}

func (c *current) onExtraListElement348() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement348()
}

func (c *current) onExtraListElement352(ref interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement352() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement352(stack["ref"])
}

func (c *current) onExtraListElement344(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement344() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement344(stack["ref"])
}

func (c *current) onExtraListElement359() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement359() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement359()
}

func (c *current) onExtraListElement363() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement363() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement363()
}

func (c *current) onExtraListElement356(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonExtraListElement356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement356(stack["rawline"])
}

func (c *current) onExtraListElement341(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonExtraListElement341() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement341(stack["ref"], stack["description"])
}

func (c *current) onExtraListElement335(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement335() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement335(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement380() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement380() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement380()
}

func (c *current) onExtraListElement383() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement383()
}

func (c *current) onExtraListElement374() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement374()
}

func (c *current) onExtraListElement401() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement401()
}

func (c *current) onExtraListElement404(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement404() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement404(stack["separator"])
}

func (c *current) onExtraListElement398(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement398() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement398(stack["separator"])
}

func (c *current) onExtraListElement407() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement407() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement407()
}

func (c *current) onExtraListElement394() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement394()
}

func (c *current) onExtraListElement419() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement419() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement419()
}

func (c *current) onExtraListElement422(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement422() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement422(stack["separator"])
}

func (c *current) onExtraListElement416(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement416() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement416(stack["separator"])
}

func (c *current) onExtraListElement428() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement428()
}

func (c *current) onExtraListElement431() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement431() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement431()
}

func (c *current) onExtraListElement445() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement445() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement445()
}

func (c *current) onExtraListElement448() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement448() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement448()
}

func (c *current) onExtraListElement439() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement439() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement439()
}

func (c *current) onExtraListElement466() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement466() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement466()
}

func (c *current) onExtraListElement469() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement469() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement469()
}

func (c *current) onExtraListElement460() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement460() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement460()
}

func (c *current) onExtraListElement480() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement480() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement480()
}

func (c *current) onExtraListElement482() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement482() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement482()
}

func (c *current) onExtraListElement491() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement491() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement491()
}

func (c *current) onExtraListElement498() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement498() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement498()
}

func (c *current) onExtraListElement501(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement501() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement501(stack["depth"])
}

func (c *current) onExtraListElement495(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement495() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement495(stack["depth"])
}

func (c *current) onExtraListElement502() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement502() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement502()
}

func (c *current) onExtraListElement507() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement507() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement507()
}

func (c *current) onExtraListElement511() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement511() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement511()
}

func (c *current) onExtraListElement515() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement515()
}

func (c *current) onExtraListElement520() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement520() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement520()
}

func (c *current) onExtraListElement525(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement525() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement525(stack["prefix"])
}

func (c *current) onExtraListElement488(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement488() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement488(stack["prefix"])
}

func (c *current) onExtraListElement532() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement532() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement532()
}

func (c *current) onExtraListElement539() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement539() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement539()
}

func (c *current) onExtraListElement542(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement542() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement542(stack["depth"])
}

func (c *current) onExtraListElement536(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement536() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement536(stack["depth"])
}

func (c *current) onExtraListElement544() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement544() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement544()
}

func (c *current) onExtraListElement546(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement546() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement546(stack["prefix"])
}

func (c *current) onExtraListElement529(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement529() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement529(stack["prefix"])
}

func (c *current) onExtraListElement554() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement554() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement554()
}

func (c *current) onExtraListElement558(ref interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement558() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement558(stack["ref"])
}

func (c *current) onExtraListElement550(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement550() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement550(stack["ref"])
}

func (c *current) onExtraListElement570() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement570() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement570()
}

func (c *current) onExtraListElement573(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement573() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement573(stack["separator"])
}

func (c *current) onExtraListElement567(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement567() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement567(stack["separator"])
}

func (c *current) onExtraListElement576() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement576() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement576()
}

func (c *current) onExtraListElement563() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement563() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement563()
}

func (c *current) onExtraListElement587() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement587() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement587()
}

func (c *current) onExtraListElement590(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement590() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement590(stack["separator"])
}

func (c *current) onExtraListElement584(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement584() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement584(stack["separator"])
}

func (c *current) onExtraListElement601() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement601() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement601()
}

func (c *current) onExtraListElement604() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement604() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement604()
}

func (c *current) onExtraListElement614() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement614() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement614()
}

func (c *current) onExtraListElement617() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement617() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement617()
}

func (c *current) onExtraListElement627() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement627() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement627()
}

func (c *current) onExtraListElement630() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement630() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement630()
}

func (c *current) onExtraListElement640() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement640() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement640()
}

func (c *current) onExtraListElement643() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement643() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement643()
}

func (c *current) onExtraListElement653() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement653() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement653()
}

func (c *current) onExtraListElement656() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement656() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement656()
}

func (c *current) onExtraListElement666() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement666() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement666()
}

func (c *current) onExtraListElement669() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement669() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement669()
}

func (c *current) onExtraListElement679() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement679() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement679()
}

func (c *current) onExtraListElement682() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement682() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement682()
}

func (c *current) onExtraListElement692() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement692() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement692()
}

func (c *current) onExtraListElement695() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement695() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement695()
}

func (c *current) onExtraListElement592(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonExtraListElement592() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement592(stack["delimiter"])
}

func (c *current) onExtraListElement703() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonExtraListElement703() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement703()
}

func (c *current) onExtraListElement707() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement707() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement707()
}

func (c *current) onExtraListElement457(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement457() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement457(stack["content"])
}

func (c *current) onExtraListElement425(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement425() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement425(stack["content"])
}

func (c *current) onExtraListElement716() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement716() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement716()
}

func (c *current) onExtraListElement720() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement720() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement720()
}

func (c *current) onExtraListElement724() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement724() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement724()
}

func (c *current) onExtraListElement714(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement714() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement714(stack["content"])
}

func (c *current) onExtraListElement391(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonExtraListElement391() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement391(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onExtraListElement371(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement371() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement371(stack["element"])
}

func (c *current) onExtraListElement747() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement747() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement747()
}

func (c *current) onExtraListElement750(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement750() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement750(stack["separator"])
}

func (c *current) onExtraListElement744(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement744() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement744(stack["separator"])
}

func (c *current) onExtraListElement753() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement753() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement753()
}

func (c *current) onExtraListElement740() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement740() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement740()
}

func (c *current) onExtraListElement765() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement765() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement765()
}

func (c *current) onExtraListElement768(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement768() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement768(stack["separator"])
}

func (c *current) onExtraListElement762(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement762() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement762(stack["separator"])
}

func (c *current) onExtraListElement774() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement774() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement774()
}

func (c *current) onExtraListElement777() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement777() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement777()
}

func (c *current) onExtraListElement791() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement791() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement791()
}

func (c *current) onExtraListElement794() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement794() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement794()
}

func (c *current) onExtraListElement785() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement785() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement785()
}

func (c *current) onExtraListElement812() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement812() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement812()
}

func (c *current) onExtraListElement815() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement815() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement815()
}

func (c *current) onExtraListElement806() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement806() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement806()
}

func (c *current) onExtraListElement826() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement826() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement826()
}

func (c *current) onExtraListElement828() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement828() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement828()
}

func (c *current) onExtraListElement837() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement837() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement837()
}

func (c *current) onExtraListElement844() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement844() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement844()
}

func (c *current) onExtraListElement847(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement847() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement847(stack["depth"])
}

func (c *current) onExtraListElement841(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement841() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement841(stack["depth"])
}

func (c *current) onExtraListElement848() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement848() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement848()
}

func (c *current) onExtraListElement853() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement853() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement853()
}

func (c *current) onExtraListElement857() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement857() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement857()
}

func (c *current) onExtraListElement861() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement861() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement861()
}

func (c *current) onExtraListElement866() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement866() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement866()
}

func (c *current) onExtraListElement871(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement871() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement871(stack["prefix"])
}

func (c *current) onExtraListElement834(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement834() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement834(stack["prefix"])
}

func (c *current) onExtraListElement878() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement878() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement878()
}

func (c *current) onExtraListElement885() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement885() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement885()
}

func (c *current) onExtraListElement888(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement888() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement888(stack["depth"])
}

func (c *current) onExtraListElement882(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement882() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement882(stack["depth"])
}

func (c *current) onExtraListElement890() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement890() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement890()
}

func (c *current) onExtraListElement892(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement892() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement892(stack["prefix"])
}

func (c *current) onExtraListElement875(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement875() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement875(stack["prefix"])
}

func (c *current) onExtraListElement900() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement900() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement900()
}

func (c *current) onExtraListElement904(ref interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement904() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement904(stack["ref"])
}

func (c *current) onExtraListElement896(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement896() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement896(stack["ref"])
}

func (c *current) onExtraListElement916() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement916() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement916()
}

func (c *current) onExtraListElement919(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement919() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement919(stack["separator"])
}

func (c *current) onExtraListElement913(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement913() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement913(stack["separator"])
}

func (c *current) onExtraListElement922() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement922() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement922()
}

func (c *current) onExtraListElement909() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement909() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement909()
}

func (c *current) onExtraListElement933() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement933() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement933()
}

func (c *current) onExtraListElement936(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement936() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement936(stack["separator"])
}

func (c *current) onExtraListElement930(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement930() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement930(stack["separator"])
}

func (c *current) onExtraListElement947() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement947() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement947()
}

func (c *current) onExtraListElement950() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement950() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement950()
}

func (c *current) onExtraListElement960() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement960() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement960()
}

func (c *current) onExtraListElement963() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement963() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement963()
}

func (c *current) onExtraListElement973() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement973() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement973()
}

func (c *current) onExtraListElement976() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement976() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement976()
}

func (c *current) onExtraListElement986() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement986() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement986()
}

func (c *current) onExtraListElement989() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement989() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement989()
}

func (c *current) onExtraListElement999() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement999() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement999()
}

func (c *current) onExtraListElement1002() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1002() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1002()
}

func (c *current) onExtraListElement1012() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1012() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1012()
}

func (c *current) onExtraListElement1015() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1015() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1015()
}

func (c *current) onExtraListElement1025() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1025() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1025()
}

func (c *current) onExtraListElement1028() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1028() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1028()
}

func (c *current) onExtraListElement1038() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1038() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1038()
}

func (c *current) onExtraListElement1041() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1041() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1041()
}

func (c *current) onExtraListElement938(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonExtraListElement938() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement938(stack["delimiter"])
}

func (c *current) onExtraListElement1049() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonExtraListElement1049() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1049()
}

func (c *current) onExtraListElement1053() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1053() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1053()
}

func (c *current) onExtraListElement803(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement803() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement803(stack["content"])
}

func (c *current) onExtraListElement771(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement771() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement771(stack["content"])
}

func (c *current) onExtraListElement1062() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1062() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1062()
}

func (c *current) onExtraListElement1066() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement1066() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1066()
}

func (c *current) onExtraListElement1070() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1070() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1070()
}

func (c *current) onExtraListElement1060(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement1060() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1060(stack["content"])
}

func (c *current) onExtraListElement737(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonExtraListElement737() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement737(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onExtraListElement731(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement731() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement731(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement1083() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1083() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1083()
}

func (c *current) onExtraListElement1087() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1087() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1087()
}

func (c *current) onExtraListElement1077(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonExtraListElement1077() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1077(stack["content"])
}

func (c *current) onExtraListElement1105() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1105()
}

func (c *current) onExtraListElement1108() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1108()
}

func (c *current) onExtraListElement1099() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement1099() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1099()
}

func (c *current) onExtraListElement1119() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1119()
}

func (c *current) onExtraListElement1121() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1121()
}

func (c *current) onExtraListElement1130() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1130()
}

func (c *current) onExtraListElement1137() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement1137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1137()
}

func (c *current) onExtraListElement1140(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement1140() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1140(stack["depth"])
}

func (c *current) onExtraListElement1134(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement1134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1134(stack["depth"])
}

func (c *current) onExtraListElement1141() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement1141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1141()
}

func (c *current) onExtraListElement1146() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement1146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1146()
}

func (c *current) onExtraListElement1150() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement1150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1150()
}

func (c *current) onExtraListElement1154() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement1154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1154()
}

func (c *current) onExtraListElement1159() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement1159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1159()
}

func (c *current) onExtraListElement1164(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1164(stack["prefix"])
}

func (c *current) onExtraListElement1127(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement1127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1127(stack["prefix"])
}

func (c *current) onExtraListElement1171() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1171()
}

func (c *current) onExtraListElement1178() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement1178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1178()
}

func (c *current) onExtraListElement1181(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement1181() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1181(stack["depth"])
}

func (c *current) onExtraListElement1175(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement1175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1175(stack["depth"])
}

func (c *current) onExtraListElement1183() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement1183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1183()
}

func (c *current) onExtraListElement1185(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1185(stack["prefix"])
}

func (c *current) onExtraListElement1168(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement1168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1168(stack["prefix"])
}

func (c *current) onExtraListElement1193() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement1193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1193()
}

func (c *current) onExtraListElement1197(ref interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1197(stack["ref"])
}

func (c *current) onExtraListElement1189(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement1189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1189(stack["ref"])
}

func (c *current) onExtraListElement1209() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement1209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1209()
}

func (c *current) onExtraListElement1212(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement1212() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1212(stack["separator"])
}

func (c *current) onExtraListElement1206(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement1206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1206(stack["separator"])
}

func (c *current) onExtraListElement1215() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1215()
}

func (c *current) onExtraListElement1202() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement1202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1202()
}

func (c *current) onExtraListElement1226() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement1226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1226()
}

func (c *current) onExtraListElement1229(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement1229() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1229(stack["separator"])
}

func (c *current) onExtraListElement1223(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement1223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1223(stack["separator"])
}

func (c *current) onExtraListElement1240() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1240()
}

func (c *current) onExtraListElement1243() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1243()
}

func (c *current) onExtraListElement1253() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1253()
}

func (c *current) onExtraListElement1256() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1256()
}

func (c *current) onExtraListElement1266() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1266()
}

func (c *current) onExtraListElement1269() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1269()
}

func (c *current) onExtraListElement1279() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1279()
}

func (c *current) onExtraListElement1282() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1282()
}

func (c *current) onExtraListElement1292() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1292()
}

func (c *current) onExtraListElement1295() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1295()
}

func (c *current) onExtraListElement1305() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1305()
}

func (c *current) onExtraListElement1308() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1308() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1308()
}

func (c *current) onExtraListElement1318() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1318() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1318()
}

func (c *current) onExtraListElement1321() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1321()
}

func (c *current) onExtraListElement1331() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1331() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1331()
}

func (c *current) onExtraListElement1334() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1334()
}

func (c *current) onExtraListElement1231(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonExtraListElement1231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1231(stack["delimiter"])
}

func (c *current) onExtraListElement1342() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonExtraListElement1342() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1342()
}

func (c *current) onExtraListElement1346() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1346() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1346()
}

func (c *current) onExtraListElement1096(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement1096() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1096(stack["content"])
}

func (c *current) onExtraListElement1094(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement1094() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1094(stack["element"])
}

func (c *current) onExtraListElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1(stack["element"])
}

func (c *current) onListElementContinuation7() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuation7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation7()
}

func (c *current) onListElementContinuation9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuation9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation9()
}

func (c *current) onListElementContinuation16() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuation16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation16()
}

func (c *current) onListElementContinuation18(offset interface{}) (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuation18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation18(stack["offset"])
}

func (c *current) onListElementContinuation1(offset, element interface{}) (interface{}, error) {
	return types.NewListElementContinuation(len(offset.([]interface{})), element)

}

func (p *parser) callonListElementContinuation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation1(stack["offset"], stack["element"])
}

func (c *current) onListElementContinuationElement14() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement14()
}

func (c *current) onListElementContinuationElement21() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement21()
}

func (c *current) onListElementContinuationElement24(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement24(stack["depth"])
}

func (c *current) onListElementContinuationElement18(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElementContinuationElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement18(stack["depth"])
}

func (c *current) onListElementContinuationElement25() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElementContinuationElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement25()
}

func (c *current) onListElementContinuationElement30() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElementContinuationElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement30()
}

func (c *current) onListElementContinuationElement34() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElementContinuationElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement34()
}

func (c *current) onListElementContinuationElement38() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElementContinuationElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement38()
}

func (c *current) onListElementContinuationElement43() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElementContinuationElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement43()
}

func (c *current) onListElementContinuationElement48(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement48(stack["prefix"])
}

func (c *current) onListElementContinuationElement11(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement11(stack["prefix"])
}

func (c *current) onListElementContinuationElement55() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContinuationElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement55()
}

func (c *current) onListElementContinuationElement59() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement59()
}

func (c *current) onListElementContinuationElement52(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElementContinuationElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement52(stack["rawline"])
}

func (c *current) onListElementContinuationElement8(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonListElementContinuationElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement8(stack["prefix"], stack["content"])
}

func (c *current) onListElementContinuationElement72() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement72()
}

func (c *current) onListElementContinuationElement79() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement79()
}

func (c *current) onListElementContinuationElement82(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement82(stack["depth"])
}

func (c *current) onListElementContinuationElement76(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElementContinuationElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement76(stack["depth"])
}

func (c *current) onListElementContinuationElement84() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElementContinuationElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement84()
}

func (c *current) onListElementContinuationElement86(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement86(stack["prefix"])
}

func (c *current) onListElementContinuationElement69(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement69(stack["prefix"])
}

func (c *current) onListElementContinuationElement97() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonListElementContinuationElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement97()
}

func (c *current) onListElementContinuationElement99() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElementContinuationElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement99()
}

func (c *current) onListElementContinuationElement101() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElementContinuationElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement101()
}

func (c *current) onListElementContinuationElement103(style interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement103(stack["style"])
}

func (c *current) onListElementContinuationElement91(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonListElementContinuationElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement91(stack["style"])
}

func (c *current) onListElementContinuationElement110() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContinuationElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement110()
}

func (c *current) onListElementContinuationElement114() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement114()
}

func (c *current) onListElementContinuationElement107(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElementContinuationElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement107(stack["rawline"])
}

func (c *current) onListElementContinuationElement66(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonListElementContinuationElement66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement66(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onListElementContinuationElement128() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElementContinuationElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement128()
}

func (c *current) onListElementContinuationElement132(ref interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement132(stack["ref"])
}

func (c *current) onListElementContinuationElement124(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElementContinuationElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement124(stack["ref"])
}

func (c *current) onListElementContinuationElement139() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement139()
}

func (c *current) onListElementContinuationElement143() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement143()
}

func (c *current) onListElementContinuationElement136(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonListElementContinuationElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement136(stack["rawline"])
}

func (c *current) onListElementContinuationElement121(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonListElementContinuationElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement121(stack["ref"], stack["description"])
}

func (c *current) onListElementContinuationElement160() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement160()
}

func (c *current) onListElementContinuationElement163(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement163() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement163(stack["separator"])
}

func (c *current) onListElementContinuationElement157(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement157(stack["separator"])
}

func (c *current) onListElementContinuationElement166() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement166()
}

func (c *current) onListElementContinuationElement153() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContinuationElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement153()
}

func (c *current) onListElementContinuationElement178() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement178()
}

func (c *current) onListElementContinuationElement181(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement181() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement181(stack["separator"])
}

func (c *current) onListElementContinuationElement175(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement175(stack["separator"])
}

func (c *current) onListElementContinuationElement187() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement187()
}

func (c *current) onListElementContinuationElement190() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement190()
}

func (c *current) onListElementContinuationElement204() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement204()
}

func (c *current) onListElementContinuationElement207() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement207()
}

func (c *current) onListElementContinuationElement198() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement198()
}

func (c *current) onListElementContinuationElement225() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement225()
}

func (c *current) onListElementContinuationElement228() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement228()
}

func (c *current) onListElementContinuationElement219() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement219()
}

func (c *current) onListElementContinuationElement239() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement239()
}

func (c *current) onListElementContinuationElement241() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement241()
}

func (c *current) onListElementContinuationElement250() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement250() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement250()
}

func (c *current) onListElementContinuationElement257() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement257()
}

func (c *current) onListElementContinuationElement260(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement260() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement260(stack["depth"])
}

func (c *current) onListElementContinuationElement254(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElementContinuationElement254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement254(stack["depth"])
}

func (c *current) onListElementContinuationElement261() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElementContinuationElement261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement261()
}

func (c *current) onListElementContinuationElement266() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElementContinuationElement266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement266()
}

func (c *current) onListElementContinuationElement270() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElementContinuationElement270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement270()
}

func (c *current) onListElementContinuationElement274() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElementContinuationElement274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement274()
}

func (c *current) onListElementContinuationElement279() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElementContinuationElement279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement279()
}

func (c *current) onListElementContinuationElement284(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement284() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement284(stack["prefix"])
}

func (c *current) onListElementContinuationElement247(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement247(stack["prefix"])
}

func (c *current) onListElementContinuationElement291() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement291() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement291()
}

func (c *current) onListElementContinuationElement298() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement298()
}

func (c *current) onListElementContinuationElement301(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement301() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement301(stack["depth"])
}

func (c *current) onListElementContinuationElement295(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElementContinuationElement295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement295(stack["depth"])
}

func (c *current) onListElementContinuationElement303() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElementContinuationElement303() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement303()
}

func (c *current) onListElementContinuationElement305(prefix interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement305(stack["prefix"])
}

func (c *current) onListElementContinuationElement288(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement288(stack["prefix"])
}

func (c *current) onListElementContinuationElement313() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElementContinuationElement313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement313()
}

func (c *current) onListElementContinuationElement317(ref interface{}) (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement317(stack["ref"])
}

func (c *current) onListElementContinuationElement309(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElementContinuationElement309() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement309(stack["ref"])
}

func (c *current) onListElementContinuationElement329() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement329() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement329()
}

func (c *current) onListElementContinuationElement332(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement332() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement332(stack["separator"])
}

func (c *current) onListElementContinuationElement326(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement326(stack["separator"])
}

func (c *current) onListElementContinuationElement335() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement335() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement335()
}

func (c *current) onListElementContinuationElement322() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContinuationElement322() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement322()
}

func (c *current) onListElementContinuationElement346() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement346() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement346()
}

func (c *current) onListElementContinuationElement349(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement349() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement349(stack["separator"])
}

func (c *current) onListElementContinuationElement343(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement343(stack["separator"])
}

func (c *current) onListElementContinuationElement360() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement360() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement360()
}

func (c *current) onListElementContinuationElement363() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement363() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement363()
}

func (c *current) onListElementContinuationElement373() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement373() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement373()
}

func (c *current) onListElementContinuationElement376() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement376() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement376()
}

func (c *current) onListElementContinuationElement386() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement386() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement386()
}

func (c *current) onListElementContinuationElement389() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement389()
}

func (c *current) onListElementContinuationElement399() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement399()
}

func (c *current) onListElementContinuationElement402() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement402() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement402()
}

func (c *current) onListElementContinuationElement412() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement412() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement412()
}

func (c *current) onListElementContinuationElement415() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement415() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement415()
}

func (c *current) onListElementContinuationElement425() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement425() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement425()
}

func (c *current) onListElementContinuationElement428() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement428()
}

func (c *current) onListElementContinuationElement438() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement438() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement438()
}

func (c *current) onListElementContinuationElement441() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement441() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement441()
}

func (c *current) onListElementContinuationElement451() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement451() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement451()
}

func (c *current) onListElementContinuationElement454() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement454() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement454()
}

func (c *current) onListElementContinuationElement351(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonListElementContinuationElement351() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement351(stack["delimiter"])
}

func (c *current) onListElementContinuationElement462() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonListElementContinuationElement462() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement462()
}

func (c *current) onListElementContinuationElement466() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement466() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement466()
}

func (c *current) onListElementContinuationElement216(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement216(stack["content"])
}

func (c *current) onListElementContinuationElement184(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonListElementContinuationElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement184(stack["content"])
}

func (c *current) onListElementContinuationElement475() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement475()
}

func (c *current) onListElementContinuationElement479() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContinuationElement479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement479()
}

func (c *current) onListElementContinuationElement483() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement483() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement483()
}

func (c *current) onListElementContinuationElement473(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonListElementContinuationElement473() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement473(stack["content"])
}

func (c *current) onListElementContinuationElement150(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonListElementContinuationElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement150(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onListElementContinuationElement501() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement501() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement501()
}

func (c *current) onListElementContinuationElement504() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement504() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement504()
}

func (c *current) onListElementContinuationElement495() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement495() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement495()
}

func (c *current) onListElementContinuationElement515() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement515()
}

func (c *current) onListElementContinuationElement525() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement525() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement525()
}

func (c *current) onListElementContinuationElement534() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement534() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement534()
}

func (c *current) onListElementContinuationElement543() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonListElementContinuationElement543() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement543()
}

func (c *current) onListElementContinuationElement548() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonListElementContinuationElement548() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement548()
}

func (c *current) onListElementContinuationElement555() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement555() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement555()
}

func (c *current) onListElementContinuationElement567() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement567() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement567()
}

func (c *current) onListElementContinuationElement569() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonListElementContinuationElement569() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement569()
}

func (c *current) onListElementContinuationElement562(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonListElementContinuationElement562() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement562(stack["start"])
}

func (c *current) onListElementContinuationElement551(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonListElementContinuationElement551() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement551(stack["name"], stack["start"])
}

func (c *current) onListElementContinuationElement577() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement577() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement577()
}

func (c *current) onListElementContinuationElement589() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement589() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement589()
}

func (c *current) onListElementContinuationElement591() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonListElementContinuationElement591() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement591()
}

func (c *current) onListElementContinuationElement584(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonListElementContinuationElement584() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement584(stack["start"])
}

func (c *current) onListElementContinuationElement573(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonListElementContinuationElement573() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement573(stack["name"], stack["start"])
}

func (c *current) onListElementContinuationElement599() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement599() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement599()
}

func (c *current) onListElementContinuationElement595(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonListElementContinuationElement595() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement595(stack["name"])
}

func (c *current) onListElementContinuationElement546(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonListElementContinuationElement546() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement546(stack["element"])
}

func (c *current) onListElementContinuationElement605() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonListElementContinuationElement605() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement605()
}

func (c *current) onListElementContinuationElement530(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonListElementContinuationElement530() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement530(stack["element"])
}

func (c *current) onListElementContinuationElement523(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonListElementContinuationElement523() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement523(stack["elements"])
}

func (c *current) onListElementContinuationElement608() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement608() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement608()
}

func (c *current) onListElementContinuationElement511(name, value interface{}) (interface{}, error) {
	d := types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
	return d, nil

}

func (p *parser) callonListElementContinuationElement511() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement511(stack["name"], stack["value"])
}

func (c *current) onListElementContinuationElement619() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement619() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement619()
}

func (c *current) onListElementContinuationElement626() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement626() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement626()
}

func (c *current) onListElementContinuationElement629() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement629() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement629()
}

func (c *current) onListElementContinuationElement615(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonListElementContinuationElement615() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement615(stack["name"])
}

func (c *current) onListElementContinuationElement640() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement640() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement640()
}

func (c *current) onListElementContinuationElement647() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement647() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement647()
}

func (c *current) onListElementContinuationElement650() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement650() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement650()
}

func (c *current) onListElementContinuationElement636(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonListElementContinuationElement636() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement636(stack["name"])
}

func (c *current) onListElementContinuationElement658() (interface{}, error) {
	// TODO: Space* before EOF
	return types.NewThematicBreak()

}

func (p *parser) callonListElementContinuationElement658() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement658()
}

func (c *current) onListElementContinuationElement675() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement675() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement675()
}

func (c *current) onListElementContinuationElement678() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement678() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement678()
}

func (c *current) onListElementContinuationElement695() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement695() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement695()
}

func (c *current) onListElementContinuationElement701() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement701() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement701()
}

func (c *current) onListElementContinuationElement699(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonListElementContinuationElement699() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement699(stack["content"])
}

func (c *current) onListElementContinuationElement691(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonListElementContinuationElement691() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement691(stack["content"])
}

func (c *current) onListElementContinuationElement705() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement705() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement705()
}

func (c *current) onListElementContinuationElement719() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement719() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement719()
}

func (c *current) onListElementContinuationElement722() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement722() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement722()
}

func (c *current) onListElementContinuationElement713() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement713() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement713()
}

func (c *current) onListElementContinuationElement687(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListElementContinuationElement687() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement687(stack["cells"])
}

func (c *current) onListElementContinuationElement739() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement739() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement739()
}

func (c *current) onListElementContinuationElement742() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement742() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement742()
}

func (c *current) onListElementContinuationElement763() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement763() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement763()
}

func (c *current) onListElementContinuationElement766() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement766() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement766()
}

func (c *current) onListElementContinuationElement782() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement782() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement782()
}

func (c *current) onListElementContinuationElement785() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement785() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement785()
}

func (c *current) onListElementContinuationElement776() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement776() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement776()
}

func (c *current) onListElementContinuationElement794() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement794() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement794()
}

func (c *current) onListElementContinuationElement800() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement800() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement800()
}

func (c *current) onListElementContinuationElement798(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonListElementContinuationElement798() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement798(stack["content"])
}

func (c *current) onListElementContinuationElement756(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonListElementContinuationElement756() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement756(stack["content"])
}

func (c *current) onListElementContinuationElement804() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement804() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement804()
}

func (c *current) onListElementContinuationElement753(cell interface{}) (interface{}, error) {
	return cell, nil

}

func (p *parser) callonListElementContinuationElement753() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement753(stack["cell"])
}

func (c *current) onListElementContinuationElement819() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement819() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement819()
}

func (c *current) onListElementContinuationElement822() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement822() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement822()
}

func (c *current) onListElementContinuationElement813() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement813() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement813()
}

func (c *current) onListElementContinuationElement834() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement834() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement834()
}

func (c *current) onListElementContinuationElement837() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement837() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement837()
}

func (c *current) onListElementContinuationElement732(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListElementContinuationElement732() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement732(stack["cells"])
}

func (c *current) onListElementContinuationElement853() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement853() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement853()
}

func (c *current) onListElementContinuationElement856() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement856() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement856()
}

func (c *current) onListElementContinuationElement874() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement874() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement874()
}

func (c *current) onListElementContinuationElement877() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement877() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement877()
}

func (c *current) onListElementContinuationElement893() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement893() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement893()
}

func (c *current) onListElementContinuationElement896() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement896() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement896()
}

func (c *current) onListElementContinuationElement887() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement887() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement887()
}

func (c *current) onListElementContinuationElement905() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement905() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement905()
}

func (c *current) onListElementContinuationElement911() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement911() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement911()
}

func (c *current) onListElementContinuationElement909(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonListElementContinuationElement909() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement909(stack["content"])
}

func (c *current) onListElementContinuationElement867(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonListElementContinuationElement867() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement867(stack["content"])
}

func (c *current) onListElementContinuationElement915() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement915() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement915()
}

func (c *current) onListElementContinuationElement929() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement929() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement929()
}

func (c *current) onListElementContinuationElement932() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement932() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement932()
}

func (c *current) onListElementContinuationElement923() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement923() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement923()
}

func (c *current) onListElementContinuationElement846(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListElementContinuationElement846() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement846(stack["cells"])
}

func (c *current) onListElementContinuationElement943() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement943() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement943()
}

func (c *current) onListElementContinuationElement946() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement946() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement946()
}

func (c *current) onListElementContinuationElement671(header, rows interface{}) (interface{}, error) {
	return types.NewTable(header, rows.([]interface{}))

}

func (p *parser) callonListElementContinuationElement671() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement671(stack["header"], stack["rows"])
}

func (c *current) onListElementContinuationElement961() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement961() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement961()
}

func (c *current) onListElementContinuationElement965() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement965() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement965()
}

func (c *current) onListElementContinuationElement955(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement955() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement955(stack["content"])
}

func (c *current) onListElementContinuationElement976() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonListElementContinuationElement976() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement976()
}

func (c *current) onListElementContinuationElement978() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonListElementContinuationElement978() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement978()
}

func (c *current) onListElementContinuationElement980() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonListElementContinuationElement980() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement980()
}

func (c *current) onListElementContinuationElement982() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonListElementContinuationElement982() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement982()
}

func (c *current) onListElementContinuationElement984() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonListElementContinuationElement984() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement984()
}

func (c *current) onListElementContinuationElement991() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement991() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement991()
}

func (c *current) onListElementContinuationElement994(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonListElementContinuationElement994() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement994(stack["content"])
}

func (c *current) onListElementContinuationElement996() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement996() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement996()
}

func (c *current) onListElementContinuationElement988(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement988() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement988(stack["content"])
}

func (c *current) onListElementContinuationElement1011() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1011() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1011()
}

func (c *current) onListElementContinuationElement1013() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1013() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1013()
}

func (c *current) onListElementContinuationElement1026() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1026() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1026()
}

func (c *current) onListElementContinuationElement1030() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1030() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1030()
}

func (c *current) onListElementContinuationElement1020(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement1020() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1020(stack["content"])
}

func (c *current) onListElementContinuationElement1040() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1040() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1040()
}

func (c *current) onListElementContinuationElement1043(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1043() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1043(stack["content"])
}

func (c *current) onListElementContinuationElement1045() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1045() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1045()
}

func (c *current) onListElementContinuationElement1037(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1037() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1037(stack["content"])
}

func (c *current) onListElementContinuationElement1005(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement1005() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1005(stack["line"])
}

func (c *current) onListElementContinuationElement972(kind, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(kind.(string), append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonListElementContinuationElement972() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement972(stack["kind"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onListElementContinuationElement1060() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1060() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1060()
}

func (c *current) onListElementContinuationElement1058() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1058() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1058()
}

func (c *current) onListElementContinuationElement1065(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1065() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1065(stack["content"])
}

func (c *current) onListElementContinuationElement1067() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1067() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1067()
}

func (c *current) onListElementContinuationElement1055(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1055() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1055(stack["content"])
}

func (c *current) onListElementContinuationElement1083() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1083() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1083()
}

func (c *current) onListElementContinuationElement1087() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1087() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1087()
}

func (c *current) onListElementContinuationElement1077(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement1077() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1077(stack["content"])
}

func (c *current) onListElementContinuationElement1097() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1097() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1097()
}

func (c *current) onListElementContinuationElement1100(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1100() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1100(stack["content"])
}

func (c *current) onListElementContinuationElement1102() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1102()
}

func (c *current) onListElementContinuationElement1094(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1094() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1094(stack["content"])
}

func (c *current) onListElementContinuationElement1052(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewLiteralParagraph(types.LiteralBlockWithSpacesOnFirstLine, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonListElementContinuationElement1052() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1052(stack["firstLine"], stack["otherLines"])
}

func (c *current) onListElementContinuationElement1112() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1112()
}

func (c *current) onListElementContinuationElement1116() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1116()
}

func (c *current) onListElementContinuationElement1109(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewParagraph(types.RawLine(content.(string)))

}

func (p *parser) callonListElementContinuationElement1109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1109(stack["content"])
}

func (c *current) onListElementContinuationElement1(attributes, element interface{}) (interface{}, error) {
	if element, ok := element.(types.BlockWithAttributes); ok && attributes != nil {
		element.AddAttributes(attributes.(types.Attributes))
	}
	// if log.IsLevelEnabled(log.DebugLevel) {
	//     log.Debugf("returning element '%s'\n", spew.Sdump(element))
	// }
	return element, nil

}

func (p *parser) callonListElementContinuationElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1(stack["attributes"], stack["element"])
}

func (c *current) onCallout3() (bool, error) {
	return c.isSubstitutionEnabled(Callouts)

}

func (p *parser) callonCallout3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout3()
}

func (c *current) onCallout6() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout6()
}

func (c *current) onCallout11() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonCallout11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout11()
}

func (c *current) onCallout15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonCallout15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout15()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onEscapedQuotedText1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonEscapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["element"])
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement13() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement13()
}

func (c *current) onDoubleQuoteBoldTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement7()
}

func (c *current) onDoubleQuoteBoldTextElement16() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement16()
}

func (c *current) onDoubleQuoteBoldTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement20()
}

func (c *current) onDoubleQuoteBoldTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement26()
}

func (c *current) onDoubleQuoteBoldTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteBoldTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement33()
}

func (c *current) onDoubleQuoteBoldTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement40()
}

func (c *current) onDoubleQuoteBoldTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement52()
}

func (c *current) onDoubleQuoteBoldTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement54()
}

func (c *current) onDoubleQuoteBoldTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteBoldTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement62()
}

func (c *current) onDoubleQuoteBoldTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement74()
}

func (c *current) onDoubleQuoteBoldTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement76()
}

func (c *current) onDoubleQuoteBoldTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteBoldTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement84()
}

func (c *current) onDoubleQuoteBoldTextElement80(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteBoldTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement92() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuoteBoldTextElement92() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement92()
}

func (c *current) onDoubleQuoteBoldTextElement101() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement101()
}

func (c *current) onDoubleQuoteBoldTextElement105() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement105()
}

func (c *current) onDoubleQuoteBoldTextElement111() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement111()
}

func (c *current) onDoubleQuoteBoldTextElement118() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteBoldTextElement118() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement118()
}

func (c *current) onDoubleQuoteBoldTextElement125() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement125()
}

func (c *current) onDoubleQuoteBoldTextElement137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement137()
}

func (c *current) onDoubleQuoteBoldTextElement139() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement139()
}

func (c *current) onDoubleQuoteBoldTextElement132(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement132(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement121(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteBoldTextElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement121(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement147() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement147()
}

func (c *current) onDoubleQuoteBoldTextElement159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement159()
}

func (c *current) onDoubleQuoteBoldTextElement161() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement161()
}

func (c *current) onDoubleQuoteBoldTextElement154(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement154(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement143(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteBoldTextElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement143(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement169() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement169()
}

func (c *current) onDoubleQuoteBoldTextElement165(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteBoldTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement165(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement116(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement116(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement175() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement175()
}

func (c *current) onDoubleQuoteBoldTextElement97(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteBoldTextElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement97(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteBoldTextElement182() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement182()
}

func (c *current) onDoubleQuoteBoldTextElement178(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteBoldTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement178(stack["id"])
}

func (c *current) onDoubleQuoteBoldTextElement95() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement95()
}

func (c *current) onDoubleQuoteBoldTextElement186() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement186()
}

func (c *current) onDoubleQuoteBoldTextElement90(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement90(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement188() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteBoldTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement188()
}

func (c *current) onDoubleQuoteBoldTextElement190() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteBoldTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement190()
}

func (c *current) onDoubleQuoteBoldTextElement192() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteBoldTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement192()
}

func (c *current) onDoubleQuoteBoldTextElement194() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteBoldTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement194()
}

func (c *current) onDoubleQuoteBoldTextElement196() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteBoldTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement196()
}

func (c *current) onDoubleQuoteBoldTextElement198() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonDoubleQuoteBoldTextElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement198()
}

func (c *current) onDoubleQuoteBoldTextElement211() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement211()
}

func (c *current) onDoubleQuoteBoldTextElement207(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteBoldTextElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement207(stack["ref"])
}

func (c *current) onDoubleQuoteBoldTextElement219() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement219()
}

func (c *current) onDoubleQuoteBoldTextElement216() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement216()
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText1(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements7() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements7()
}

func (c *current) onSingleQuoteBoldTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteBoldTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteBoldTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElement8() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement8()
}

func (c *current) onSingleQuoteBoldTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement2()
}

func (c *current) onSingleQuoteBoldTextElement11() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement11()
}

func (c *current) onSingleQuoteBoldTextElement15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement15()
}

func (c *current) onSingleQuoteBoldTextElement21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement21()
}

func (c *current) onSingleQuoteBoldTextElement28() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteBoldTextElement28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement28()
}

func (c *current) onSingleQuoteBoldTextElement35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement35()
}

func (c *current) onSingleQuoteBoldTextElement47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement47()
}

func (c *current) onSingleQuoteBoldTextElement49() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement49()
}

func (c *current) onSingleQuoteBoldTextElement42(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement42(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement31(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteBoldTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement31(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement57()
}

func (c *current) onSingleQuoteBoldTextElement69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement69()
}

func (c *current) onSingleQuoteBoldTextElement71() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement71()
}

func (c *current) onSingleQuoteBoldTextElement64(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement64(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement53(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteBoldTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement53(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement79()
}

func (c *current) onSingleQuoteBoldTextElement75(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteBoldTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement75(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement26(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement26(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement87() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuoteBoldTextElement87() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement87()
}

func (c *current) onSingleQuoteBoldTextElement96() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement96()
}

func (c *current) onSingleQuoteBoldTextElement100() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement100()
}

func (c *current) onSingleQuoteBoldTextElement106() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement106()
}

func (c *current) onSingleQuoteBoldTextElement113() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteBoldTextElement113() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement113()
}

func (c *current) onSingleQuoteBoldTextElement120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement120()
}

func (c *current) onSingleQuoteBoldTextElement132() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement132()
}

func (c *current) onSingleQuoteBoldTextElement134() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement134()
}

func (c *current) onSingleQuoteBoldTextElement127(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement127(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement116(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteBoldTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement116(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement142()
}

func (c *current) onSingleQuoteBoldTextElement154() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement154()
}

func (c *current) onSingleQuoteBoldTextElement156() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement156()
}

func (c *current) onSingleQuoteBoldTextElement149(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement149(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement138(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteBoldTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement138(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement164() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement164()
}

func (c *current) onSingleQuoteBoldTextElement160(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteBoldTextElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement160(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement111(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement111(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement170() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement170()
}

func (c *current) onSingleQuoteBoldTextElement92(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteBoldTextElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement92(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteBoldTextElement177() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement177()
}

func (c *current) onSingleQuoteBoldTextElement173(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteBoldTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement173(stack["id"])
}

func (c *current) onSingleQuoteBoldTextElement90() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement90()
}

func (c *current) onSingleQuoteBoldTextElement181() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement181()
}

func (c *current) onSingleQuoteBoldTextElement85(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement85(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement183() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteBoldTextElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement183()
}

func (c *current) onSingleQuoteBoldTextElement185() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteBoldTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement185()
}

func (c *current) onSingleQuoteBoldTextElement187() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteBoldTextElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement187()
}

func (c *current) onSingleQuoteBoldTextElement189() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteBoldTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement189()
}

func (c *current) onSingleQuoteBoldTextElement191() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteBoldTextElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement191()
}

func (c *current) onSingleQuoteBoldTextElement193() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuoteBoldTextElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement193()
}

func (c *current) onSingleQuoteBoldTextElement206() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement206()
}

func (c *current) onSingleQuoteBoldTextElement202(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteBoldTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement202(stack["ref"])
}

func (c *current) onSingleQuoteBoldTextElement214() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement214()
}

func (c *current) onSingleQuoteBoldTextElement211() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement211()
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedBoldText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText5()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText17()
}

func (c *current) onEscapedBoldText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText27()
}

func (c *current) onEscapedBoldText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement13() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement13()
}

func (c *current) onDoubleQuoteItalicTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement7()
}

func (c *current) onDoubleQuoteItalicTextElement16() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement16()
}

func (c *current) onDoubleQuoteItalicTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement20()
}

func (c *current) onDoubleQuoteItalicTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement26()
}

func (c *current) onDoubleQuoteItalicTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteItalicTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement33()
}

func (c *current) onDoubleQuoteItalicTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement40()
}

func (c *current) onDoubleQuoteItalicTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement52()
}

func (c *current) onDoubleQuoteItalicTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement54()
}

func (c *current) onDoubleQuoteItalicTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteItalicTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement62()
}

func (c *current) onDoubleQuoteItalicTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement74()
}

func (c *current) onDoubleQuoteItalicTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement76()
}

func (c *current) onDoubleQuoteItalicTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteItalicTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement84()
}

func (c *current) onDoubleQuoteItalicTextElement80(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteItalicTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement92() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuoteItalicTextElement92() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement92()
}

func (c *current) onDoubleQuoteItalicTextElement101() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement101()
}

func (c *current) onDoubleQuoteItalicTextElement105() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement105()
}

func (c *current) onDoubleQuoteItalicTextElement111() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement111()
}

func (c *current) onDoubleQuoteItalicTextElement118() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteItalicTextElement118() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement118()
}

func (c *current) onDoubleQuoteItalicTextElement125() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement125()
}

func (c *current) onDoubleQuoteItalicTextElement137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement137()
}

func (c *current) onDoubleQuoteItalicTextElement139() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement139()
}

func (c *current) onDoubleQuoteItalicTextElement132(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement132(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement121(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteItalicTextElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement121(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement147() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement147()
}

func (c *current) onDoubleQuoteItalicTextElement159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement159()
}

func (c *current) onDoubleQuoteItalicTextElement161() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement161()
}

func (c *current) onDoubleQuoteItalicTextElement154(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement154(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement143(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteItalicTextElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement143(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement169() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement169()
}

func (c *current) onDoubleQuoteItalicTextElement165(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteItalicTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement165(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement116(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement116(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement175() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement175()
}

func (c *current) onDoubleQuoteItalicTextElement97(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteItalicTextElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement97(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteItalicTextElement182() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement182()
}

func (c *current) onDoubleQuoteItalicTextElement178(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteItalicTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement178(stack["id"])
}

func (c *current) onDoubleQuoteItalicTextElement95() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement95()
}

func (c *current) onDoubleQuoteItalicTextElement186() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement186()
}

func (c *current) onDoubleQuoteItalicTextElement90(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement90(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement188() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteItalicTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement188()
}

func (c *current) onDoubleQuoteItalicTextElement190() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteItalicTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement190()
}

func (c *current) onDoubleQuoteItalicTextElement192() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteItalicTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement192()
}

func (c *current) onDoubleQuoteItalicTextElement194() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteItalicTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement194()
}

func (c *current) onDoubleQuoteItalicTextElement196() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteItalicTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement196()
}

func (c *current) onDoubleQuoteItalicTextElement198() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonDoubleQuoteItalicTextElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement198()
}

func (c *current) onDoubleQuoteItalicTextElement211() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement211()
}

func (c *current) onDoubleQuoteItalicTextElement207(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteItalicTextElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement207(stack["ref"])
}

func (c *current) onDoubleQuoteItalicTextElement219() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement219()
}

func (c *current) onDoubleQuoteItalicTextElement216() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement216()
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements7() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements7()
}

func (c *current) onSingleQuoteItalicTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteItalicTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteItalicTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElement8() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement8()
}

func (c *current) onSingleQuoteItalicTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement2()
}

func (c *current) onSingleQuoteItalicTextElement11() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement11()
}

func (c *current) onSingleQuoteItalicTextElement15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement15()
}

func (c *current) onSingleQuoteItalicTextElement21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement21()
}

func (c *current) onSingleQuoteItalicTextElement28() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteItalicTextElement28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement28()
}

func (c *current) onSingleQuoteItalicTextElement35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement35()
}

func (c *current) onSingleQuoteItalicTextElement47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement47()
}

func (c *current) onSingleQuoteItalicTextElement49() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement49()
}

func (c *current) onSingleQuoteItalicTextElement42(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement42(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement31(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteItalicTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement31(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement57()
}

func (c *current) onSingleQuoteItalicTextElement69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement69()
}

func (c *current) onSingleQuoteItalicTextElement71() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement71()
}

func (c *current) onSingleQuoteItalicTextElement64(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement64(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement53(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteItalicTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement53(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement79()
}

func (c *current) onSingleQuoteItalicTextElement75(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteItalicTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement75(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement26(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement26(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement87() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuoteItalicTextElement87() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement87()
}

func (c *current) onSingleQuoteItalicTextElement96() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement96()
}

func (c *current) onSingleQuoteItalicTextElement100() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement100()
}

func (c *current) onSingleQuoteItalicTextElement106() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement106()
}

func (c *current) onSingleQuoteItalicTextElement113() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteItalicTextElement113() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement113()
}

func (c *current) onSingleQuoteItalicTextElement120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement120()
}

func (c *current) onSingleQuoteItalicTextElement132() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement132()
}

func (c *current) onSingleQuoteItalicTextElement134() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement134()
}

func (c *current) onSingleQuoteItalicTextElement127(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement127(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement116(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteItalicTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement116(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement142()
}

func (c *current) onSingleQuoteItalicTextElement154() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement154()
}

func (c *current) onSingleQuoteItalicTextElement156() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement156()
}

func (c *current) onSingleQuoteItalicTextElement149(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement149(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement138(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteItalicTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement138(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement164() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement164()
}

func (c *current) onSingleQuoteItalicTextElement160(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteItalicTextElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement160(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement111(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement111(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement170() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement170()
}

func (c *current) onSingleQuoteItalicTextElement92(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteItalicTextElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement92(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteItalicTextElement177() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement177()
}

func (c *current) onSingleQuoteItalicTextElement173(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteItalicTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement173(stack["id"])
}

func (c *current) onSingleQuoteItalicTextElement90() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement90()
}

func (c *current) onSingleQuoteItalicTextElement181() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement181()
}

func (c *current) onSingleQuoteItalicTextElement85(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement85(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement183() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteItalicTextElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement183()
}

func (c *current) onSingleQuoteItalicTextElement185() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteItalicTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement185()
}

func (c *current) onSingleQuoteItalicTextElement187() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteItalicTextElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement187()
}

func (c *current) onSingleQuoteItalicTextElement189() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteItalicTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement189()
}

func (c *current) onSingleQuoteItalicTextElement191() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteItalicTextElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement191()
}

func (c *current) onSingleQuoteItalicTextElement193() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuoteItalicTextElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement193()
}

func (c *current) onSingleQuoteItalicTextElement206() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement206()
}

func (c *current) onSingleQuoteItalicTextElement202(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteItalicTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement202(stack["ref"])
}

func (c *current) onSingleQuoteItalicTextElement214() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement214()
}

func (c *current) onSingleQuoteItalicTextElement211() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement211()
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedItalicText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText5()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText17()
}

func (c *current) onEscapedItalicText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText27()
}

func (c *current) onEscapedItalicText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement13() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement13()
}

func (c *current) onDoubleQuoteMonospaceTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement7()
}

func (c *current) onDoubleQuoteMonospaceTextElement16() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement16()
}

func (c *current) onDoubleQuoteMonospaceTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement20()
}

func (c *current) onDoubleQuoteMonospaceTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement26()
}

func (c *current) onDoubleQuoteMonospaceTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement33()
}

func (c *current) onDoubleQuoteMonospaceTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement40()
}

func (c *current) onDoubleQuoteMonospaceTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement52()
}

func (c *current) onDoubleQuoteMonospaceTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement54()
}

func (c *current) onDoubleQuoteMonospaceTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteMonospaceTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement62()
}

func (c *current) onDoubleQuoteMonospaceTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement74()
}

func (c *current) onDoubleQuoteMonospaceTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement76()
}

func (c *current) onDoubleQuoteMonospaceTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteMonospaceTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement84()
}

func (c *current) onDoubleQuoteMonospaceTextElement80(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement92() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement92() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement92()
}

func (c *current) onDoubleQuoteMonospaceTextElement101() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement101()
}

func (c *current) onDoubleQuoteMonospaceTextElement105() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement105()
}

func (c *current) onDoubleQuoteMonospaceTextElement111() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement111()
}

func (c *current) onDoubleQuoteMonospaceTextElement118() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement118() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement118()
}

func (c *current) onDoubleQuoteMonospaceTextElement125() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement125()
}

func (c *current) onDoubleQuoteMonospaceTextElement137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement137()
}

func (c *current) onDoubleQuoteMonospaceTextElement139() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement139()
}

func (c *current) onDoubleQuoteMonospaceTextElement132(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement132(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement121(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteMonospaceTextElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement121(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement147() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement147()
}

func (c *current) onDoubleQuoteMonospaceTextElement159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement159()
}

func (c *current) onDoubleQuoteMonospaceTextElement161() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement161()
}

func (c *current) onDoubleQuoteMonospaceTextElement154(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement154(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement143(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteMonospaceTextElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement143(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement169() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement169()
}

func (c *current) onDoubleQuoteMonospaceTextElement165(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement165(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement116(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement116(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement175() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement175()
}

func (c *current) onDoubleQuoteMonospaceTextElement97(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement97(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteMonospaceTextElement182() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement182()
}

func (c *current) onDoubleQuoteMonospaceTextElement178(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement178(stack["id"])
}

func (c *current) onDoubleQuoteMonospaceTextElement95() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement95()
}

func (c *current) onDoubleQuoteMonospaceTextElement186() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement186()
}

func (c *current) onDoubleQuoteMonospaceTextElement90(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement90(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement188() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement188()
}

func (c *current) onDoubleQuoteMonospaceTextElement190() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement190()
}

func (c *current) onDoubleQuoteMonospaceTextElement192() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement192()
}

func (c *current) onDoubleQuoteMonospaceTextElement194() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement194()
}

func (c *current) onDoubleQuoteMonospaceTextElement196() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement196()
}

func (c *current) onDoubleQuoteMonospaceTextElement198() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement198()
}

func (c *current) onDoubleQuoteMonospaceTextElement212() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement212()
}

func (c *current) onDoubleQuoteMonospaceTextElement208(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement208(stack["ref"])
}

func (c *current) onDoubleQuoteMonospaceTextElement220() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement220()
}

func (c *current) onDoubleQuoteMonospaceTextElement217() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement217()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements7() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements7()
}

func (c *current) onSingleQuoteMonospaceTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMonospaceTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement2()
}

func (c *current) onSingleQuoteMonospaceTextElement11() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement11()
}

func (c *current) onSingleQuoteMonospaceTextElement20() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement20()
}

func (c *current) onSingleQuoteMonospaceTextElement24() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement24()
}

func (c *current) onSingleQuoteMonospaceTextElement30() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement30()
}

func (c *current) onSingleQuoteMonospaceTextElement37() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteMonospaceTextElement37() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement37()
}

func (c *current) onSingleQuoteMonospaceTextElement44() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement44()
}

func (c *current) onSingleQuoteMonospaceTextElement56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement56()
}

func (c *current) onSingleQuoteMonospaceTextElement58() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement58()
}

func (c *current) onSingleQuoteMonospaceTextElement51(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement51(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement40(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteMonospaceTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement40(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement66() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement66()
}

func (c *current) onSingleQuoteMonospaceTextElement78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement78()
}

func (c *current) onSingleQuoteMonospaceTextElement80() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement80()
}

func (c *current) onSingleQuoteMonospaceTextElement73(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement73(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement62(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteMonospaceTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement62(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement88() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement88()
}

func (c *current) onSingleQuoteMonospaceTextElement84(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteMonospaceTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement84(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement35(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement35(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement96() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuoteMonospaceTextElement96() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement96()
}

func (c *current) onSingleQuoteMonospaceTextElement105() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement105()
}

func (c *current) onSingleQuoteMonospaceTextElement109() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement109()
}

func (c *current) onSingleQuoteMonospaceTextElement115() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement115()
}

func (c *current) onSingleQuoteMonospaceTextElement122() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteMonospaceTextElement122() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement122()
}

func (c *current) onSingleQuoteMonospaceTextElement129() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement129()
}

func (c *current) onSingleQuoteMonospaceTextElement141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement141()
}

func (c *current) onSingleQuoteMonospaceTextElement143() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement143()
}

func (c *current) onSingleQuoteMonospaceTextElement136(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement136(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement125(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteMonospaceTextElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement125(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement151() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement151()
}

func (c *current) onSingleQuoteMonospaceTextElement163() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement163()
}

func (c *current) onSingleQuoteMonospaceTextElement165() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement165()
}

func (c *current) onSingleQuoteMonospaceTextElement158(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement158(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement147(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteMonospaceTextElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement147(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement173() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement173()
}

func (c *current) onSingleQuoteMonospaceTextElement169(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteMonospaceTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement169(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement120(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement120(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement179() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement179()
}

func (c *current) onSingleQuoteMonospaceTextElement101(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteMonospaceTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement101(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteMonospaceTextElement186() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement186()
}

func (c *current) onSingleQuoteMonospaceTextElement182(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteMonospaceTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement182(stack["id"])
}

func (c *current) onSingleQuoteMonospaceTextElement99() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement99()
}

func (c *current) onSingleQuoteMonospaceTextElement190() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement190()
}

func (c *current) onSingleQuoteMonospaceTextElement94(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement94(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement192() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteMonospaceTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement192()
}

func (c *current) onSingleQuoteMonospaceTextElement194() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteMonospaceTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement194()
}

func (c *current) onSingleQuoteMonospaceTextElement196() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteMonospaceTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement196()
}

func (c *current) onSingleQuoteMonospaceTextElement198() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteMonospaceTextElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement198()
}

func (c *current) onSingleQuoteMonospaceTextElement200() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteMonospaceTextElement200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement200()
}

func (c *current) onSingleQuoteMonospaceTextElement202() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuoteMonospaceTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement202()
}

func (c *current) onSingleQuoteMonospaceTextElement216() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement216()
}

func (c *current) onSingleQuoteMonospaceTextElement212(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteMonospaceTextElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement212(stack["ref"])
}

func (c *current) onSingleQuoteMonospaceTextElement225() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement225()
}

func (c *current) onSingleQuoteMonospaceTextElement220() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement220()
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedMonospaceText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText5()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText17()
}

func (c *current) onEscapedMonospaceText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText27()
}

func (c *current) onEscapedMonospaceText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextElement13() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement13()
}

func (c *current) onDoubleQuoteMarkedTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement7()
}

func (c *current) onDoubleQuoteMarkedTextElement16() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement16()
}

func (c *current) onDoubleQuoteMarkedTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement20()
}

func (c *current) onDoubleQuoteMarkedTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement26()
}

func (c *current) onDoubleQuoteMarkedTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteMarkedTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement33()
}

func (c *current) onDoubleQuoteMarkedTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement40()
}

func (c *current) onDoubleQuoteMarkedTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement52()
}

func (c *current) onDoubleQuoteMarkedTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement54()
}

func (c *current) onDoubleQuoteMarkedTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteMarkedTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement62()
}

func (c *current) onDoubleQuoteMarkedTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement74()
}

func (c *current) onDoubleQuoteMarkedTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement76()
}

func (c *current) onDoubleQuoteMarkedTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteMarkedTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement84()
}

func (c *current) onDoubleQuoteMarkedTextElement80(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteMarkedTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement92() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuoteMarkedTextElement92() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement92()
}

func (c *current) onDoubleQuoteMarkedTextElement101() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement101()
}

func (c *current) onDoubleQuoteMarkedTextElement105() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement105()
}

func (c *current) onDoubleQuoteMarkedTextElement111() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement111()
}

func (c *current) onDoubleQuoteMarkedTextElement118() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuoteMarkedTextElement118() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement118()
}

func (c *current) onDoubleQuoteMarkedTextElement125() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement125()
}

func (c *current) onDoubleQuoteMarkedTextElement137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement137()
}

func (c *current) onDoubleQuoteMarkedTextElement139() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement139()
}

func (c *current) onDoubleQuoteMarkedTextElement132(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement132(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement121(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuoteMarkedTextElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement121(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement147() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement147()
}

func (c *current) onDoubleQuoteMarkedTextElement159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement159()
}

func (c *current) onDoubleQuoteMarkedTextElement161() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement161()
}

func (c *current) onDoubleQuoteMarkedTextElement154(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement154(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement143(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuoteMarkedTextElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement143(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement169() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement169()
}

func (c *current) onDoubleQuoteMarkedTextElement165(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuoteMarkedTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement165(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement116(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement116(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement175() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement175()
}

func (c *current) onDoubleQuoteMarkedTextElement97(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteMarkedTextElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement97(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteMarkedTextElement182() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement182()
}

func (c *current) onDoubleQuoteMarkedTextElement178(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteMarkedTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement178(stack["id"])
}

func (c *current) onDoubleQuoteMarkedTextElement95() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement95()
}

func (c *current) onDoubleQuoteMarkedTextElement186() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement186()
}

func (c *current) onDoubleQuoteMarkedTextElement90(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement90(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement188() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteMarkedTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement188()
}

func (c *current) onDoubleQuoteMarkedTextElement190() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteMarkedTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement190()
}

func (c *current) onDoubleQuoteMarkedTextElement192() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteMarkedTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement192()
}

func (c *current) onDoubleQuoteMarkedTextElement194() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteMarkedTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement194()
}

func (c *current) onDoubleQuoteMarkedTextElement196() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteMarkedTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement196()
}

func (c *current) onDoubleQuoteMarkedTextElement198() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonDoubleQuoteMarkedTextElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement198()
}

func (c *current) onDoubleQuoteMarkedTextElement211() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement211()
}

func (c *current) onDoubleQuoteMarkedTextElement207(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteMarkedTextElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement207(stack["ref"])
}

func (c *current) onDoubleQuoteMarkedTextElement219() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement219()
}

func (c *current) onDoubleQuoteMarkedTextElement216() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement216()
}

func (c *current) onDoubleQuoteMarkedTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleMarkedBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleMarkedBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleMarkedBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText1(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements7() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements7()
}

func (c *current) onSingleQuoteMarkedTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMarkedTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMarkedTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElement8() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement8()
}

func (c *current) onSingleQuoteMarkedTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement2()
}

func (c *current) onSingleQuoteMarkedTextElement11() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement11()
}

func (c *current) onSingleQuoteMarkedTextElement15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement15()
}

func (c *current) onSingleQuoteMarkedTextElement21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement21()
}

func (c *current) onSingleQuoteMarkedTextElement28() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteMarkedTextElement28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement28()
}

func (c *current) onSingleQuoteMarkedTextElement35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement35()
}

func (c *current) onSingleQuoteMarkedTextElement47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement47()
}

func (c *current) onSingleQuoteMarkedTextElement49() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement49()
}

func (c *current) onSingleQuoteMarkedTextElement42(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement42(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement31(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteMarkedTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement31(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement57()
}

func (c *current) onSingleQuoteMarkedTextElement69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement69()
}

func (c *current) onSingleQuoteMarkedTextElement71() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement71()
}

func (c *current) onSingleQuoteMarkedTextElement64(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement64(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement53(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteMarkedTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement53(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement79()
}

func (c *current) onSingleQuoteMarkedTextElement75(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteMarkedTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement75(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement26(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement26(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement87() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuoteMarkedTextElement87() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement87()
}

func (c *current) onSingleQuoteMarkedTextElement96() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement96()
}

func (c *current) onSingleQuoteMarkedTextElement100() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement100()
}

func (c *current) onSingleQuoteMarkedTextElement106() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement106()
}

func (c *current) onSingleQuoteMarkedTextElement113() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuoteMarkedTextElement113() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement113()
}

func (c *current) onSingleQuoteMarkedTextElement120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement120()
}

func (c *current) onSingleQuoteMarkedTextElement132() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement132()
}

func (c *current) onSingleQuoteMarkedTextElement134() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement134()
}

func (c *current) onSingleQuoteMarkedTextElement127(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement127(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement116(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuoteMarkedTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement116(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement142()
}

func (c *current) onSingleQuoteMarkedTextElement154() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement154()
}

func (c *current) onSingleQuoteMarkedTextElement156() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement156()
}

func (c *current) onSingleQuoteMarkedTextElement149(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement149(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement138(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuoteMarkedTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement138(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement164() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement164()
}

func (c *current) onSingleQuoteMarkedTextElement160(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuoteMarkedTextElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement160(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement111(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement111(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement170() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement170()
}

func (c *current) onSingleQuoteMarkedTextElement92(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteMarkedTextElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement92(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteMarkedTextElement177() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement177()
}

func (c *current) onSingleQuoteMarkedTextElement173(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteMarkedTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement173(stack["id"])
}

func (c *current) onSingleQuoteMarkedTextElement90() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement90()
}

func (c *current) onSingleQuoteMarkedTextElement181() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement181()
}

func (c *current) onSingleQuoteMarkedTextElement85(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement85(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement183() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteMarkedTextElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement183()
}

func (c *current) onSingleQuoteMarkedTextElement185() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteMarkedTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement185()
}

func (c *current) onSingleQuoteMarkedTextElement187() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteMarkedTextElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement187()
}

func (c *current) onSingleQuoteMarkedTextElement189() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteMarkedTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement189()
}

func (c *current) onSingleQuoteMarkedTextElement191() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteMarkedTextElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement191()
}

func (c *current) onSingleQuoteMarkedTextElement193() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuoteMarkedTextElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement193()
}

func (c *current) onSingleQuoteMarkedTextElement206() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement206()
}

func (c *current) onSingleQuoteMarkedTextElement202(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteMarkedTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement202(stack["ref"])
}

func (c *current) onSingleQuoteMarkedTextElement214() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement214()
}

func (c *current) onSingleQuoteMarkedTextElement211() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement211()
}

func (c *current) onQuotedTextInSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedMarkedText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText5()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText17()
}

func (c *current) onEscapedMarkedText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText27()
}

func (c *current) onEscapedMarkedText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText24(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onSubscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonSubscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextElement3()
}

func (c *current) onEscapedSubscriptText4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSubscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText4()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onSuperscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonSuperscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextElement3()
}

func (c *current) onEscapedSuperscriptText4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSuperscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText4()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	c.resetSpaceSuffixTracking()
	return types.NewInlineElements(elements)

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement13() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement13()
}

func (c *current) onSingleQuotedStringElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement7()
}

func (c *current) onSingleQuotedStringElement17() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement17()
}

func (c *current) onSingleQuotedStringElement22() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedStringElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement22()
}

func (c *current) onSingleQuotedStringElement28() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedStringElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement28()
}

func (c *current) onSingleQuotedStringElement35() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuotedStringElement35() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement35()
}

func (c *current) onSingleQuotedStringElement42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement42()
}

func (c *current) onSingleQuotedStringElement54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement54()
}

func (c *current) onSingleQuotedStringElement56() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement56()
}

func (c *current) onSingleQuotedStringElement49(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedStringElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement49(stack["start"])
}

func (c *current) onSingleQuotedStringElement38(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuotedStringElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement38(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedStringElement64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement64()
}

func (c *current) onSingleQuotedStringElement76() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement76()
}

func (c *current) onSingleQuotedStringElement78() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement78()
}

func (c *current) onSingleQuotedStringElement71(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedStringElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement71(stack["start"])
}

func (c *current) onSingleQuotedStringElement60(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuotedStringElement60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement60(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedStringElement86() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement86()
}

func (c *current) onSingleQuotedStringElement82(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuotedStringElement82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement82(stack["name"])
}

func (c *current) onSingleQuotedStringElement33(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement33(stack["element"])
}

func (c *current) onSingleQuotedStringElement94() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSingleQuotedStringElement94() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement94()
}

func (c *current) onSingleQuotedStringElement103() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement103()
}

func (c *current) onSingleQuotedStringElement107() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement107()
}

func (c *current) onSingleQuotedStringElement113() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement113()
}

func (c *current) onSingleQuotedStringElement120() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSingleQuotedStringElement120() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement120()
}

func (c *current) onSingleQuotedStringElement127() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement127()
}

func (c *current) onSingleQuotedStringElement139() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement139()
}

func (c *current) onSingleQuotedStringElement141() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement141()
}

func (c *current) onSingleQuotedStringElement134(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedStringElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement134(stack["start"])
}

func (c *current) onSingleQuotedStringElement123(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSingleQuotedStringElement123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement123(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedStringElement149() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement149()
}

func (c *current) onSingleQuotedStringElement161() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement161()
}

func (c *current) onSingleQuotedStringElement163() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement163()
}

func (c *current) onSingleQuotedStringElement156(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedStringElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement156(stack["start"])
}

func (c *current) onSingleQuotedStringElement145(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSingleQuotedStringElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement145(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedStringElement171() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement171()
}

func (c *current) onSingleQuotedStringElement167(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuotedStringElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement167(stack["name"])
}

func (c *current) onSingleQuotedStringElement118(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement118(stack["element"])
}

func (c *current) onSingleQuotedStringElement177() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement177()
}

func (c *current) onSingleQuotedStringElement99(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuotedStringElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement99(stack["id"], stack["label"])
}

func (c *current) onSingleQuotedStringElement184() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement184()
}

func (c *current) onSingleQuotedStringElement180(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuotedStringElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement180(stack["id"])
}

func (c *current) onSingleQuotedStringElement97() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement97()
}

func (c *current) onSingleQuotedStringElement188() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement188()
}

func (c *current) onSingleQuotedStringElement92(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement92(stack["element"])
}

func (c *current) onSingleQuotedStringElement194() (bool, error) {

	return c.isPreceededBySpace(), nil

}

func (p *parser) callonSingleQuotedStringElement194() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement194()
}

func (c *current) onSingleQuotedStringElement197() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement197()
}

func (c *current) onSingleQuotedStringElement201() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedStringElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement201()
}

func (c *current) onSingleQuotedStringElement192() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonSingleQuotedStringElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement192()
}

func (c *current) onSingleQuotedStringElement210() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuotedStringElement210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement210()
}

func (c *current) onSingleQuotedStringElement212() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuotedStringElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement212()
}

func (c *current) onSingleQuotedStringElement214() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuotedStringElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement214()
}

func (c *current) onSingleQuotedStringElement216() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuotedStringElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement216()
}

func (c *current) onSingleQuotedStringElement218() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuotedStringElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement218()
}

func (c *current) onSingleQuotedStringElement220() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuotedStringElement220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement220()
}

func (c *current) onSingleQuotedStringElement229() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement229()
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	c.resetSpaceSuffixTracking()
	return types.NewInlineElements(elements)

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement13() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement13()
}

func (c *current) onDoubleQuotedStringElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement7()
}

func (c *current) onDoubleQuotedStringElement17() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement17()
}

func (c *current) onDoubleQuotedStringElement22() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedStringElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement22()
}

func (c *current) onDoubleQuotedStringElement28() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedStringElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement28()
}

func (c *current) onDoubleQuotedStringElement36() (bool, error) {

	return c.isPreceededBySpace(), nil

}

func (p *parser) callonDoubleQuotedStringElement36() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement36()
}

func (c *current) onDoubleQuotedStringElement39() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement39()
}

func (c *current) onDoubleQuotedStringElement43() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedStringElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement43()
}

func (c *current) onDoubleQuotedStringElement34() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonDoubleQuotedStringElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement34()
}

func (c *current) onDoubleQuotedStringElement54() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuotedStringElement54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement54()
}

func (c *current) onDoubleQuotedStringElement61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement61()
}

func (c *current) onDoubleQuotedStringElement73() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement73()
}

func (c *current) onDoubleQuotedStringElement75() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement75()
}

func (c *current) onDoubleQuotedStringElement68(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedStringElement68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement68(stack["start"])
}

func (c *current) onDoubleQuotedStringElement57(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuotedStringElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement57(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedStringElement83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement83()
}

func (c *current) onDoubleQuotedStringElement95() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement95()
}

func (c *current) onDoubleQuotedStringElement97() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement97()
}

func (c *current) onDoubleQuotedStringElement90(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedStringElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement90(stack["start"])
}

func (c *current) onDoubleQuotedStringElement79(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuotedStringElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement79(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedStringElement105() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement105()
}

func (c *current) onDoubleQuotedStringElement101(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuotedStringElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement101(stack["name"])
}

func (c *current) onDoubleQuotedStringElement52(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement52(stack["element"])
}

func (c *current) onDoubleQuotedStringElement113() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonDoubleQuotedStringElement113() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement113()
}

func (c *current) onDoubleQuotedStringElement122() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement122()
}

func (c *current) onDoubleQuotedStringElement126() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement126()
}

func (c *current) onDoubleQuotedStringElement132() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement132()
}

func (c *current) onDoubleQuotedStringElement139() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonDoubleQuotedStringElement139() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement139()
}

func (c *current) onDoubleQuotedStringElement146() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement146()
}

func (c *current) onDoubleQuotedStringElement158() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement158()
}

func (c *current) onDoubleQuotedStringElement160() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement160()
}

func (c *current) onDoubleQuotedStringElement153(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedStringElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement153(stack["start"])
}

func (c *current) onDoubleQuotedStringElement142(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDoubleQuotedStringElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement142(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedStringElement168() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement168()
}

func (c *current) onDoubleQuotedStringElement180() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement180()
}

func (c *current) onDoubleQuotedStringElement182() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement182()
}

func (c *current) onDoubleQuotedStringElement175(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedStringElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement175(stack["start"])
}

func (c *current) onDoubleQuotedStringElement164(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDoubleQuotedStringElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement164(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedStringElement190() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement190()
}

func (c *current) onDoubleQuotedStringElement186(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuotedStringElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement186(stack["name"])
}

func (c *current) onDoubleQuotedStringElement137(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement137(stack["element"])
}

func (c *current) onDoubleQuotedStringElement196() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement196()
}

func (c *current) onDoubleQuotedStringElement118(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuotedStringElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement118(stack["id"], stack["label"])
}

func (c *current) onDoubleQuotedStringElement203() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement203()
}

func (c *current) onDoubleQuotedStringElement199(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuotedStringElement199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement199(stack["id"])
}

func (c *current) onDoubleQuotedStringElement116() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement116()
}

func (c *current) onDoubleQuotedStringElement207() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement207()
}

func (c *current) onDoubleQuotedStringElement111(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement111(stack["element"])
}

func (c *current) onDoubleQuotedStringElement212() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement212()
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onAttributesGroup6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup6()
}

func (c *current) onAttributesGroup9() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup9()
}

func (c *current) onAttributesGroup13() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonAttributesGroup13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup13()
}

func (c *current) onAttributesGroup22() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup22()
}

func (c *current) onAttributesGroup26() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup26()
}

func (c *current) onAttributesGroup32() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributesGroup32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup32()
}

func (c *current) onAttributesGroup39() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributesGroup39() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup39()
}

func (c *current) onAttributesGroup46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup46()
}

func (c *current) onAttributesGroup58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup58()
}

func (c *current) onAttributesGroup60() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributesGroup60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup60()
}

func (c *current) onAttributesGroup53(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributesGroup53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup53(stack["start"])
}

func (c *current) onAttributesGroup42(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonAttributesGroup42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup42(stack["name"], stack["start"])
}

func (c *current) onAttributesGroup68() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup68()
}

func (c *current) onAttributesGroup80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup80()
}

func (c *current) onAttributesGroup82() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributesGroup82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup82()
}

func (c *current) onAttributesGroup75(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributesGroup75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup75(stack["start"])
}

func (c *current) onAttributesGroup64(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonAttributesGroup64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup64(stack["name"], stack["start"])
}

func (c *current) onAttributesGroup90() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup90()
}

func (c *current) onAttributesGroup86(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributesGroup86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup86(stack["name"])
}

func (c *current) onAttributesGroup37(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributesGroup37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup37(stack["element"])
}

func (c *current) onAttributesGroup96() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributesGroup96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup96()
}

func (c *current) onAttributesGroup18(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonAttributesGroup18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup18(stack["id"], stack["label"])
}

func (c *current) onAttributesGroup103() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup103()
}

func (c *current) onAttributesGroup99(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonAttributesGroup99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup99(stack["id"])
}

func (c *current) onAttributesGroup16() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributesGroup16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup16()
}

func (c *current) onAttributesGroup107() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonAttributesGroup107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup107()
}

func (c *current) onAttributesGroup11(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributesGroup11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup11(stack["element"])
}

func (c *current) onAttributesGroup113() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonAttributesGroup113() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup113()
}

func (c *current) onAttributesGroup120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup120()
}

func (c *current) onAttributesGroup132() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup132()
}

func (c *current) onAttributesGroup134() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributesGroup134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup134()
}

func (c *current) onAttributesGroup127(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributesGroup127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup127(stack["start"])
}

func (c *current) onAttributesGroup116(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonAttributesGroup116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup116(stack["name"], stack["start"])
}

func (c *current) onAttributesGroup142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup142()
}

func (c *current) onAttributesGroup154() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup154()
}

func (c *current) onAttributesGroup156() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributesGroup156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup156()
}

func (c *current) onAttributesGroup149(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributesGroup149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup149(stack["start"])
}

func (c *current) onAttributesGroup138(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonAttributesGroup138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup138(stack["name"], stack["start"])
}

func (c *current) onAttributesGroup164() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributesGroup164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup164()
}

func (c *current) onAttributesGroup160(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributesGroup160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup160(stack["name"])
}

func (c *current) onAttributesGroup111(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributesGroup111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup111(stack["element"])
}

func (c *current) onAttributesGroup174() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributesGroup174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup174()
}

func (c *current) onAttributesGroup170(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonAttributesGroup170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup170(stack["ref"])
}

func (c *current) onAttributesGroup178() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributesGroup178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup178()
}

func (c *current) onAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesGroup1(stack["elements"])
}

func (c *current) onElementAttributesGroup11() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup11()
}

func (c *current) onElementAttributesGroup16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonElementAttributesGroup16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup16()
}

func (c *current) onElementAttributesGroup6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementAttributesGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup6()
}

func (c *current) onElementAttributesGroup23() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup23()
}

func (c *current) onElementAttributesGroup27() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonElementAttributesGroup27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup27()
}

func (c *current) onElementAttributesGroup34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup34()
}

func (c *current) onElementAttributesGroup46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup46()
}

func (c *current) onElementAttributesGroup48() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonElementAttributesGroup48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup48()
}

func (c *current) onElementAttributesGroup41(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonElementAttributesGroup41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup41(stack["start"])
}

func (c *current) onElementAttributesGroup30(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonElementAttributesGroup30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup30(stack["name"], stack["start"])
}

func (c *current) onElementAttributesGroup56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup56()
}

func (c *current) onElementAttributesGroup68() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup68()
}

func (c *current) onElementAttributesGroup70() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonElementAttributesGroup70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup70()
}

func (c *current) onElementAttributesGroup63(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonElementAttributesGroup63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup63(stack["start"])
}

func (c *current) onElementAttributesGroup52(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonElementAttributesGroup52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup52(stack["name"], stack["start"])
}

func (c *current) onElementAttributesGroup78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup78()
}

func (c *current) onElementAttributesGroup74(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonElementAttributesGroup74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup74(stack["name"])
}

func (c *current) onElementAttributesGroup25(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonElementAttributesGroup25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup25(stack["element"])
}

func (c *current) onElementAttributesGroup87() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonElementAttributesGroup87() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup87()
}

func (c *current) onElementAttributesGroup96() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup96()
}

func (c *current) onElementAttributesGroup100() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup100()
}

func (c *current) onElementAttributesGroup106() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementAttributesGroup106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup106()
}

func (c *current) onElementAttributesGroup113() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonElementAttributesGroup113() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup113()
}

func (c *current) onElementAttributesGroup120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup120()
}

func (c *current) onElementAttributesGroup132() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup132()
}

func (c *current) onElementAttributesGroup134() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonElementAttributesGroup134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup134()
}

func (c *current) onElementAttributesGroup127(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonElementAttributesGroup127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup127(stack["start"])
}

func (c *current) onElementAttributesGroup116(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonElementAttributesGroup116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup116(stack["name"], stack["start"])
}

func (c *current) onElementAttributesGroup142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup142()
}

func (c *current) onElementAttributesGroup154() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup154()
}

func (c *current) onElementAttributesGroup156() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonElementAttributesGroup156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup156()
}

func (c *current) onElementAttributesGroup149(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonElementAttributesGroup149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup149(stack["start"])
}

func (c *current) onElementAttributesGroup138(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonElementAttributesGroup138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup138(stack["name"], stack["start"])
}

func (c *current) onElementAttributesGroup164() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup164()
}

func (c *current) onElementAttributesGroup160(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonElementAttributesGroup160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup160(stack["name"])
}

func (c *current) onElementAttributesGroup111(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonElementAttributesGroup111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup111(stack["element"])
}

func (c *current) onElementAttributesGroup170() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementAttributesGroup170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup170()
}

func (c *current) onElementAttributesGroup92(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonElementAttributesGroup92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup92(stack["id"], stack["label"])
}

func (c *current) onElementAttributesGroup177() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonElementAttributesGroup177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup177()
}

func (c *current) onElementAttributesGroup173(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonElementAttributesGroup173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup173(stack["id"])
}

func (c *current) onElementAttributesGroup90() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementAttributesGroup90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup90()
}

func (c *current) onElementAttributesGroup181() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonElementAttributesGroup181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup181()
}

func (c *current) onElementAttributesGroup85(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonElementAttributesGroup85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup85(stack["element"])
}

func (c *current) onElementAttributesGroup187() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementAttributesGroup187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup187()
}

func (c *current) onElementAttributesGroup183(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementAttributesGroup183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup183(stack["ref"])
}

func (c *current) onElementAttributesGroup191() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementAttributesGroup191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup191()
}

func (c *current) onElementAttributesGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonElementAttributesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributesGroup1(stack["elements"])
}

func (c *current) onHeaderGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonHeaderGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup1(stack["elements"])
}

func (c *current) onHeaderGroupElement13() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement13()
}

func (c *current) onHeaderGroupElement18() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonHeaderGroupElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement18()
}

func (c *current) onHeaderGroupElement8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement8()
}

func (c *current) onHeaderGroupElement25() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement25()
}

func (c *current) onHeaderGroupElement30() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonHeaderGroupElement30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement30()
}

func (c *current) onHeaderGroupElement39() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement39()
}

func (c *current) onHeaderGroupElement43() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement43()
}

func (c *current) onHeaderGroupElement49() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement49()
}

func (c *current) onHeaderGroupElement56() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonHeaderGroupElement56() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement56()
}

func (c *current) onHeaderGroupElement63() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement63()
}

func (c *current) onHeaderGroupElement75() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement75()
}

func (c *current) onHeaderGroupElement77() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement77()
}

func (c *current) onHeaderGroupElement70(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement70(stack["start"])
}

func (c *current) onHeaderGroupElement59(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonHeaderGroupElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement59(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement85() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement85()
}

func (c *current) onHeaderGroupElement97() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement97()
}

func (c *current) onHeaderGroupElement99() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement99()
}

func (c *current) onHeaderGroupElement92(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement92(stack["start"])
}

func (c *current) onHeaderGroupElement81(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonHeaderGroupElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement81(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement107() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement107()
}

func (c *current) onHeaderGroupElement103(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonHeaderGroupElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement103(stack["name"])
}

func (c *current) onHeaderGroupElement54(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement54(stack["element"])
}

func (c *current) onHeaderGroupElement113() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement113()
}

func (c *current) onHeaderGroupElement35(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonHeaderGroupElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement35(stack["id"], stack["label"])
}

func (c *current) onHeaderGroupElement120() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement120()
}

func (c *current) onHeaderGroupElement116(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonHeaderGroupElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement116(stack["id"])
}

func (c *current) onHeaderGroupElement33() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement33()
}

func (c *current) onHeaderGroupElement124() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonHeaderGroupElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement124()
}

func (c *current) onHeaderGroupElement28(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement28(stack["element"])
}

func (c *current) onHeaderGroupElement131() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonHeaderGroupElement131() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement131()
}

func (c *current) onHeaderGroupElement138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement138()
}

func (c *current) onHeaderGroupElement150() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement150()
}

func (c *current) onHeaderGroupElement152() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement152()
}

func (c *current) onHeaderGroupElement145(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement145(stack["start"])
}

func (c *current) onHeaderGroupElement134(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonHeaderGroupElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement134(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement160() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement160()
}

func (c *current) onHeaderGroupElement172() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement172()
}

func (c *current) onHeaderGroupElement174() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement174()
}

func (c *current) onHeaderGroupElement167(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement167(stack["start"])
}

func (c *current) onHeaderGroupElement156(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonHeaderGroupElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement156(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement182() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement182()
}

func (c *current) onHeaderGroupElement178(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonHeaderGroupElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement178(stack["name"])
}

func (c *current) onHeaderGroupElement129(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement129(stack["element"])
}

func (c *current) onHeaderGroupElement192() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHeaderGroupElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement192()
}

func (c *current) onHeaderGroupElement188(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonHeaderGroupElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement188(stack["ref"])
}

func (c *current) onHeaderGroupElement198() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonHeaderGroupElement198() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement198()
}

func (c *current) onHeaderGroupElement201() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonHeaderGroupElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement201()
}

func (c *current) onHeaderGroupElement203() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonHeaderGroupElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement203()
}

func (c *current) onHeaderGroupElement205() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonHeaderGroupElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement205()
}

func (c *current) onHeaderGroupElement207() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonHeaderGroupElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement207()
}

func (c *current) onHeaderGroupElement209() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonHeaderGroupElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement209()
}

func (c *current) onHeaderGroupElement211() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonHeaderGroupElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement211()
}

func (c *current) onHeaderGroupElement196(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement196(stack["element"])
}

func (c *current) onHeaderGroupElement225() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement225()
}

func (c *current) onHeaderGroupElement232() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHeaderGroupElement232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement232()
}

func (c *current) onHeaderGroupElement228(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonHeaderGroupElement228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement228(stack["ref"])
}

func (c *current) onHeaderGroupElement238() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonHeaderGroupElement238() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement238()
}

func (c *current) onHeaderGroupElement245() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement245()
}

func (c *current) onHeaderGroupElement257() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement257()
}

func (c *current) onHeaderGroupElement259() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement259() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement259()
}

func (c *current) onHeaderGroupElement252(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement252(stack["start"])
}

func (c *current) onHeaderGroupElement241(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonHeaderGroupElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement241(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement267() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement267()
}

func (c *current) onHeaderGroupElement279() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement279()
}

func (c *current) onHeaderGroupElement281() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement281() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement281()
}

func (c *current) onHeaderGroupElement274(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement274(stack["start"])
}

func (c *current) onHeaderGroupElement263(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonHeaderGroupElement263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement263(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement289() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement289() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement289()
}

func (c *current) onHeaderGroupElement285(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonHeaderGroupElement285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement285(stack["name"])
}

func (c *current) onHeaderGroupElement236(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement236(stack["element"])
}

func (c *current) onHeaderGroupElement295() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement295()
}

func (c *current) onHeaderGroupElement221(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonHeaderGroupElement221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement221(stack["elements"])
}

func (c *current) onHeaderGroupElement217(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonHeaderGroupElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement217(stack["id"])
}

func (c *current) onHeaderGroupElement299() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement299() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement299()
}

func (c *current) onHeaderGroupElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement1(stack["element"])
}

func (c *current) onMacrosGroup11() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonMacrosGroup11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup11()
}

func (c *current) onMacrosGroup16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonMacrosGroup16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup16()
}

func (c *current) onMacrosGroup6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonMacrosGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup6()
}

func (c *current) onMacrosGroup28() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMacrosGroup28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup28()
}

func (c *current) onMacrosGroup24(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonMacrosGroup24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup24(stack["ref"])
}

func (c *current) onMacrosGroup32() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonMacrosGroup32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup32()
}

func (c *current) onMacrosGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonMacrosGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacrosGroup1(stack["elements"])
}

func (c *current) onNoneGroup18() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNoneGroup18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup18()
}

func (c *current) onNoneGroup23() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNoneGroup23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup23()
}

func (c *current) onNoneGroup13() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneGroup13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup13()
}

func (c *current) onNoneGroup34() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNoneGroup34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup34()
}

func (c *current) onNoneGroup30(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonNoneGroup30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup30(stack["ref"])
}

func (c *current) onNoneGroup38() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneGroup38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup38()
}

func (c *current) onNoneGroup5(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNoneGroup5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup5(stack["element"])
}

func (c *current) onNoneGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonNoneGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneGroup1(stack["elements"])
}

func (c *current) onNormalGroup1(elements interface{}) (interface{}, error) {

	c.resetSpaceSuffixTracking()
	return types.NewInlineElements(elements)

}

func (p *parser) callonNormalGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup1(stack["elements"])
}

func (c *current) onNormalGroupElement13() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement13()
}

func (c *current) onNormalGroupElement18() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroupElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement18()
}

func (c *current) onNormalGroupElement8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement8()
}

func (c *current) onNormalGroupElement25() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement25()
}

func (c *current) onNormalGroupElement27() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroupElement27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement27()
}

func (c *current) onNormalGroupElement36() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNormalGroupElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement36()
}

func (c *current) onNormalGroupElement32(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonNormalGroupElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement32(stack["ref"])
}

func (c *current) onNormalGroupElement42() (bool, error) {

	return c.isPreceededBySpace(), nil

}

func (p *parser) callonNormalGroupElement42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement42()
}

func (c *current) onNormalGroupElement45() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement45()
}

func (c *current) onNormalGroupElement49() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroupElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement49()
}

func (c *current) onNormalGroupElement40() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonNormalGroupElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement40()
}

func (c *current) onNormalGroupElement61() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement61()
}

func (c *current) onNormalGroupElement63() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroupElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement63()
}

func (c *current) onNormalGroupElement56() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNormalGroupElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement56()
}

func (c *current) onNormalGroupElement75() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonNormalGroupElement75() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement75()
}

func (c *current) onNormalGroupElement84() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement84()
}

func (c *current) onNormalGroupElement88() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement88()
}

func (c *current) onNormalGroupElement94() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement94()
}

func (c *current) onNormalGroupElement101() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonNormalGroupElement101() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement101()
}

func (c *current) onNormalGroupElement108() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement108()
}

func (c *current) onNormalGroupElement120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement120()
}

func (c *current) onNormalGroupElement122() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroupElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement122()
}

func (c *current) onNormalGroupElement115(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroupElement115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement115(stack["start"])
}

func (c *current) onNormalGroupElement104(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonNormalGroupElement104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement104(stack["name"], stack["start"])
}

func (c *current) onNormalGroupElement130() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement130()
}

func (c *current) onNormalGroupElement142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement142()
}

func (c *current) onNormalGroupElement144() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroupElement144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement144()
}

func (c *current) onNormalGroupElement137(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroupElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement137(stack["start"])
}

func (c *current) onNormalGroupElement126(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonNormalGroupElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement126(stack["name"], stack["start"])
}

func (c *current) onNormalGroupElement152() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement152()
}

func (c *current) onNormalGroupElement148(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonNormalGroupElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement148(stack["name"])
}

func (c *current) onNormalGroupElement99(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement99(stack["element"])
}

func (c *current) onNormalGroupElement158() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement158()
}

func (c *current) onNormalGroupElement80(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonNormalGroupElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement80(stack["id"], stack["label"])
}

func (c *current) onNormalGroupElement165() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement165()
}

func (c *current) onNormalGroupElement161(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonNormalGroupElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement161(stack["id"])
}

func (c *current) onNormalGroupElement78() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement78()
}

func (c *current) onNormalGroupElement169() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonNormalGroupElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement169()
}

func (c *current) onNormalGroupElement73(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement73(stack["element"])
}

func (c *current) onNormalGroupElement173() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonNormalGroupElement173() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement173()
}

func (c *current) onNormalGroupElement180() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement180()
}

func (c *current) onNormalGroupElement192() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement192()
}

func (c *current) onNormalGroupElement194() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroupElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement194()
}

func (c *current) onNormalGroupElement187(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroupElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement187(stack["start"])
}

func (c *current) onNormalGroupElement176(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonNormalGroupElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement176(stack["name"], stack["start"])
}

func (c *current) onNormalGroupElement202() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement202()
}

func (c *current) onNormalGroupElement214() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement214()
}

func (c *current) onNormalGroupElement216() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroupElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement216()
}

func (c *current) onNormalGroupElement209(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroupElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement209(stack["start"])
}

func (c *current) onNormalGroupElement198(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonNormalGroupElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement198(stack["name"], stack["start"])
}

func (c *current) onNormalGroupElement224() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroupElement224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement224()
}

func (c *current) onNormalGroupElement220(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonNormalGroupElement220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement220(stack["name"])
}

func (c *current) onNormalGroupElement171(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroupElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement171(stack["element"])
}

func (c *current) onNormalGroupElement230() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonNormalGroupElement230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement230()
}

func (c *current) onNormalGroupElement232() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonNormalGroupElement232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement232()
}

func (c *current) onNormalGroupElement234() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonNormalGroupElement234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement234()
}

func (c *current) onNormalGroupElement236() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonNormalGroupElement236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement236()
}

func (c *current) onNormalGroupElement238() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonNormalGroupElement238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement238()
}

func (c *current) onNormalGroupElement240() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonNormalGroupElement240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement240()
}

func (c *current) onNormalGroupElement246() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroupElement246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement246()
}

func (c *current) onNormalGroupElement1(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil

}

func (p *parser) callonNormalGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroupElement1(stack["element"])
}

func (c *current) onPostReplacementsGroup17() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonPostReplacementsGroup17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup17()
}

func (c *current) onPostReplacementsGroup22() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonPostReplacementsGroup22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup22()
}

func (c *current) onPostReplacementsGroup12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPostReplacementsGroup12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup12()
}

func (c *current) onPostReplacementsGroup29() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonPostReplacementsGroup29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup29()
}

func (c *current) onPostReplacementsGroup33() (bool, error) {

	return c.isPreceededBySpace(), nil

}

func (p *parser) callonPostReplacementsGroup33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup33()
}

func (c *current) onPostReplacementsGroup36() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonPostReplacementsGroup36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup36()
}

func (c *current) onPostReplacementsGroup40() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonPostReplacementsGroup40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup40()
}

func (c *current) onPostReplacementsGroup31() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonPostReplacementsGroup31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup31()
}

func (c *current) onPostReplacementsGroup47() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonPostReplacementsGroup47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup47()
}

func (c *current) onPostReplacementsGroup56() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPostReplacementsGroup56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup56()
}

func (c *current) onPostReplacementsGroup52(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonPostReplacementsGroup52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup52(stack["ref"])
}

func (c *current) onPostReplacementsGroup60() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPostReplacementsGroup60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup60()
}

func (c *current) onPostReplacementsGroup5(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil

}

func (p *parser) callonPostReplacementsGroup5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup5(stack["element"])
}

func (c *current) onPostReplacementsGroup1(elements interface{}) (interface{}, error) {
	c.resetSpaceSuffixTracking()
	return types.NewInlineElements(elements)

}

func (p *parser) callonPostReplacementsGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementsGroup1(stack["elements"])
}

func (c *current) onQuotesGroup11() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonQuotesGroup11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup11()
}

func (c *current) onQuotesGroup16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonQuotesGroup16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup16()
}

func (c *current) onQuotesGroup6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotesGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup6()
}

func (c *current) onQuotesGroup28() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuotesGroup28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup28()
}

func (c *current) onQuotesGroup24(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonQuotesGroup24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup24(stack["ref"])
}

func (c *current) onQuotesGroup32() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotesGroup32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup32()
}

func (c *current) onQuotesGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonQuotesGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotesGroup1(stack["elements"])
}

func (c *current) onReplacementsGroup11() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonReplacementsGroup11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup11()
}

func (c *current) onReplacementsGroup16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonReplacementsGroup16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup16()
}

func (c *current) onReplacementsGroup6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonReplacementsGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup6()
}

func (c *current) onReplacementsGroup25() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonReplacementsGroup25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup25()
}

func (c *current) onReplacementsGroup28() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonReplacementsGroup28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup28()
}

func (c *current) onReplacementsGroup30() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonReplacementsGroup30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup30()
}

func (c *current) onReplacementsGroup32() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonReplacementsGroup32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup32()
}

func (c *current) onReplacementsGroup34() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonReplacementsGroup34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup34()
}

func (c *current) onReplacementsGroup36() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonReplacementsGroup36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup36()
}

func (c *current) onReplacementsGroup38() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonReplacementsGroup38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup38()
}

func (c *current) onReplacementsGroup23(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonReplacementsGroup23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup23(stack["element"])
}

func (c *current) onReplacementsGroup48() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonReplacementsGroup48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup48()
}

func (c *current) onReplacementsGroup44(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonReplacementsGroup44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup44(stack["ref"])
}

func (c *current) onReplacementsGroup52() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonReplacementsGroup52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup52()
}

func (c *current) onReplacementsGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonReplacementsGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementsGroup1(stack["elements"])
}

func (c *current) onSpecialCharactersGroup11() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup11()
}

func (c *current) onSpecialCharactersGroup16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSpecialCharactersGroup16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup16()
}

func (c *current) onSpecialCharactersGroup6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup6()
}

func (c *current) onSpecialCharactersGroup25() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSpecialCharactersGroup25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup25()
}

func (c *current) onSpecialCharactersGroup34() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup34()
}

func (c *current) onSpecialCharactersGroup38() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup38()
}

func (c *current) onSpecialCharactersGroup44() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup44()
}

func (c *current) onSpecialCharactersGroup51() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonSpecialCharactersGroup51() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup51()
}

func (c *current) onSpecialCharactersGroup58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup58()
}

func (c *current) onSpecialCharactersGroup70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup70()
}

func (c *current) onSpecialCharactersGroup72() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup72()
}

func (c *current) onSpecialCharactersGroup65(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSpecialCharactersGroup65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup65(stack["start"])
}

func (c *current) onSpecialCharactersGroup54(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonSpecialCharactersGroup54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup54(stack["name"], stack["start"])
}

func (c *current) onSpecialCharactersGroup80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup80()
}

func (c *current) onSpecialCharactersGroup92() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup92()
}

func (c *current) onSpecialCharactersGroup94() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup94()
}

func (c *current) onSpecialCharactersGroup87(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSpecialCharactersGroup87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup87(stack["start"])
}

func (c *current) onSpecialCharactersGroup76(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonSpecialCharactersGroup76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup76(stack["name"], stack["start"])
}

func (c *current) onSpecialCharactersGroup102() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup102()
}

func (c *current) onSpecialCharactersGroup98(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSpecialCharactersGroup98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup98(stack["name"])
}

func (c *current) onSpecialCharactersGroup49(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSpecialCharactersGroup49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup49(stack["element"])
}

func (c *current) onSpecialCharactersGroup108() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup108()
}

func (c *current) onSpecialCharactersGroup30(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSpecialCharactersGroup30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup30(stack["id"], stack["label"])
}

func (c *current) onSpecialCharactersGroup115() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSpecialCharactersGroup115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup115()
}

func (c *current) onSpecialCharactersGroup111(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSpecialCharactersGroup111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup111(stack["id"])
}

func (c *current) onSpecialCharactersGroup28() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup28()
}

func (c *current) onSpecialCharactersGroup119() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup119()
}

func (c *current) onSpecialCharactersGroup23(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSpecialCharactersGroup23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup23(stack["element"])
}

func (c *current) onSpecialCharactersGroup125() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpecialCharactersGroup125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup125()
}

func (c *current) onSpecialCharactersGroup121(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSpecialCharactersGroup121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup121(stack["ref"])
}

func (c *current) onSpecialCharactersGroup129() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharactersGroup129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup129()
}

func (c *current) onSpecialCharactersGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonSpecialCharactersGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersGroup1(stack["elements"])
}

func (c *current) onVerbatimGroup11() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup11()
}

func (c *current) onVerbatimGroup16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonVerbatimGroup16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup16()
}

func (c *current) onVerbatimGroup6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup6()
}

func (c *current) onVerbatimGroup26() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonVerbatimGroup26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup26()
}

func (c *current) onVerbatimGroup35() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup35()
}

func (c *current) onVerbatimGroup39() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup39()
}

func (c *current) onVerbatimGroup45() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup45()
}

func (c *current) onVerbatimGroup52() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonVerbatimGroup52() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup52()
}

func (c *current) onVerbatimGroup59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup59()
}

func (c *current) onVerbatimGroup71() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup71()
}

func (c *current) onVerbatimGroup73() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonVerbatimGroup73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup73()
}

func (c *current) onVerbatimGroup66(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonVerbatimGroup66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup66(stack["start"])
}

func (c *current) onVerbatimGroup55(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonVerbatimGroup55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup55(stack["name"], stack["start"])
}

func (c *current) onVerbatimGroup81() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup81()
}

func (c *current) onVerbatimGroup93() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup93()
}

func (c *current) onVerbatimGroup95() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonVerbatimGroup95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup95()
}

func (c *current) onVerbatimGroup88(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonVerbatimGroup88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup88(stack["start"])
}

func (c *current) onVerbatimGroup77(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonVerbatimGroup77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup77(stack["name"], stack["start"])
}

func (c *current) onVerbatimGroup103() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup103()
}

func (c *current) onVerbatimGroup99(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonVerbatimGroup99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup99(stack["name"])
}

func (c *current) onVerbatimGroup50(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonVerbatimGroup50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup50(stack["element"])
}

func (c *current) onVerbatimGroup109() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup109()
}

func (c *current) onVerbatimGroup31(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonVerbatimGroup31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup31(stack["id"], stack["label"])
}

func (c *current) onVerbatimGroup116() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonVerbatimGroup116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup116()
}

func (c *current) onVerbatimGroup112(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonVerbatimGroup112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup112(stack["id"])
}

func (c *current) onVerbatimGroup29() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup29()
}

func (c *current) onVerbatimGroup120() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonVerbatimGroup120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup120()
}

func (c *current) onVerbatimGroup24(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonVerbatimGroup24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup24(stack["element"])
}

func (c *current) onVerbatimGroup126() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimGroup126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup126()
}

func (c *current) onVerbatimGroup122(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonVerbatimGroup122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup122(stack["ref"])
}

func (c *current) onVerbatimGroup130() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonVerbatimGroup130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup130()
}

func (c *current) onVerbatimGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonVerbatimGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimGroup1(stack["elements"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros)

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro17() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineMacro17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro17()
}

func (c *current) onInlineMacro22() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineMacro22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro22()
}

func (c *current) onInlineMacro13(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineMacro13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro13(stack["id"])
}

func (c *current) onInlineMacro32() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineMacro32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro32()
}

func (c *current) onInlineMacro28() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro28()
}

func (c *current) onInlineMacro39() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineMacro39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro39()
}

func (c *current) onInlineMacro43() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineMacro43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro43()
}

func (c *current) onInlineMacro50() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineMacro50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro50()
}

func (c *current) onInlineMacro46() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro46()
}

func (c *current) onInlineMacro36(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacro36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro36(stack["content"])
}

func (c *current) onInlineMacro57() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineMacro57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro57()
}

func (c *current) onInlineMacro61() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineMacro61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro61()
}

func (c *current) onInlineMacro68() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlineMacro68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro68()
}

func (c *current) onInlineMacro64() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro64()
}

func (c *current) onInlineMacro54(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacro54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro54(stack["content"])
}

func (c *current) onInlineMacro24(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonInlineMacro24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro24(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs)

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough11() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough11()
}

func (c *current) onInlinePassthrough21() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough21()
}

func (c *current) onInlinePassthrough24() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough24()
}

func (c *current) onInlinePassthrough17() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough17()
}

func (c *current) onInlinePassthrough6(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough6(stack["content"])
}

func (c *current) onInlinePassthrough45() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough45()
}

func (c *current) onInlinePassthrough48() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough48()
}

func (c *current) onInlinePassthrough58() (interface{}, error) {
	log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough58()
}

func (c *current) onInlinePassthrough65() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough65()
}

func (c *current) onInlinePassthrough40() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough40()
}

func (c *current) onInlinePassthrough74() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough74()
}

func (c *current) onInlinePassthrough77() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough77()
}

func (c *current) onInlinePassthrough71() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough71()
}

func (c *current) onInlinePassthrough35(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough35(stack["content"])
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onQuote3() (bool, error) {
	return c.isSubstitutionEnabled(Quotes)

}

func (p *parser) callonQuote3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote3()
}

func (c *current) onQuote1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["element"])
}

func (c *current) onTableColumnsAttribute20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTableColumnsAttribute20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute20()
}

func (c *current) onTableColumnsAttribute15() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonTableColumnsAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute15()
}

func (c *current) onTableColumnsAttribute12(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTableColumnsAttribute12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute12(stack["n"])
}

func (c *current) onTableColumnsAttribute26() (interface{}, error) {
	return types.HAlignLeft, nil
}

func (p *parser) callonTableColumnsAttribute26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute26()
}

func (c *current) onTableColumnsAttribute28() (interface{}, error) {
	return types.HAlignRight, nil
}

func (p *parser) callonTableColumnsAttribute28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute28()
}

func (c *current) onTableColumnsAttribute30() (interface{}, error) {
	return types.HAlignCenter, nil
}

func (p *parser) callonTableColumnsAttribute30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute30()
}

func (c *current) onTableColumnsAttribute35() (interface{}, error) {
	return types.VAlignTop, nil
}

func (p *parser) callonTableColumnsAttribute35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute35()
}

func (c *current) onTableColumnsAttribute37() (interface{}, error) {
	return types.VAlignBottom, nil
}

func (p *parser) callonTableColumnsAttribute37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute37()
}

func (c *current) onTableColumnsAttribute39() (interface{}, error) {
	return types.VAlignMiddle, nil
}

func (p *parser) callonTableColumnsAttribute39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute39()
}

func (c *current) onTableColumnsAttribute49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTableColumnsAttribute49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute49()
}

func (c *current) onTableColumnsAttribute44() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonTableColumnsAttribute44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute44()
}

func (c *current) onTableColumnsAttribute51() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableColumnsAttribute51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute51()
}

func (c *current) onTableColumnsAttribute55() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableColumnsAttribute55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute55()
}

func (c *current) onTableColumnsAttribute60(multiplier, halign, valign, weight, style, comma interface{}) (bool, error) {
	// make sure that at least something was set
	// (otherwise the parser will run indefinitely)
	return multiplier != nil ||
		halign != nil ||
		valign != nil ||
		weight != nil ||
		style != nil ||
		comma != nil, nil

}

func (p *parser) callonTableColumnsAttribute60() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute60(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onTableColumnsAttribute5(multiplier, halign, valign, weight, style, comma interface{}) (interface{}, error) {
	return types.NewTableColumn(multiplier, halign, valign, weight, style)

}

func (p *parser) callonTableColumnsAttribute5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute5(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onTableColumnsAttribute1(cols interface{}) (interface{}, error) {
	return cols, nil

}

func (p *parser) callonTableColumnsAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute1(stack["cols"])
}

func (c *current) onUserMacroBlock4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroBlock4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock4()
}

func (c *current) onUserMacroBlock7(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock7(stack["name"])
}

func (c *current) onUserMacroBlock10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroBlock10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock10()
}

func (c *current) onUserMacroBlock16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonUserMacroBlock16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock16()
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro4()
}

func (c *current) onInlineUserMacro7(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro7(stack["name"])
}

func (c *current) onInlineUserMacro10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro10()
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onFileLocation9() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]"
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation9()
}

func (c *current) onFileLocation14() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonFileLocation14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation14()
}

func (c *current) onFileLocation21() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation21()
}

func (c *current) onFileLocation33() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation33()
}

func (c *current) onFileLocation35() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation35()
}

func (c *current) onFileLocation28(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation28(stack["start"])
}

func (c *current) onFileLocation17(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonFileLocation17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation17(stack["name"], stack["start"])
}

func (c *current) onFileLocation43() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation43()
}

func (c *current) onFileLocation55() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation55()
}

func (c *current) onFileLocation57() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation57()
}

func (c *current) onFileLocation50(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation50(stack["start"])
}

func (c *current) onFileLocation39(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonFileLocation39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation39(stack["name"], stack["start"])
}

func (c *current) onFileLocation65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation65()
}

func (c *current) onFileLocation61(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonFileLocation61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation61(stack["name"])
}

func (c *current) onFileLocation12(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileLocation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation12(stack["element"])
}

func (c *current) onFileLocation73() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonFileLocation73() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation73()
}

func (c *current) onFileLocation82() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileLocation82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation82()
}

func (c *current) onFileLocation86() (interface{}, error) {
	log.Debug("matched single space")
	return string(c.text), nil

}

func (p *parser) callonFileLocation86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation86()
}

func (c *current) onFileLocation92() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation92()
}

func (c *current) onFileLocation99() (bool, error) {
	return c.isSubstitutionEnabled(Attributes)

}

func (p *parser) callonFileLocation99() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation99()
}

func (c *current) onFileLocation106() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation106()
}

func (c *current) onFileLocation118() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation118()
}

func (c *current) onFileLocation120() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation120()
}

func (c *current) onFileLocation113(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation113(stack["start"])
}

func (c *current) onFileLocation102(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonFileLocation102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation102(stack["name"], stack["start"])
}

func (c *current) onFileLocation128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation128()
}

func (c *current) onFileLocation140() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation140()
}

func (c *current) onFileLocation142() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation142()
}

func (c *current) onFileLocation135(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation135(stack["start"])
}

func (c *current) onFileLocation124(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonFileLocation124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation124(stack["name"], stack["start"])
}

func (c *current) onFileLocation150() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation150()
}

func (c *current) onFileLocation146(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonFileLocation146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation146(stack["name"])
}

func (c *current) onFileLocation97(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileLocation97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation97(stack["element"])
}

func (c *current) onFileLocation156() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation156()
}

func (c *current) onFileLocation78(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonFileLocation78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation78(stack["id"], stack["label"])
}

func (c *current) onFileLocation163() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileLocation163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation163()
}

func (c *current) onFileLocation159(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonFileLocation159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation159(stack["id"])
}

func (c *current) onFileLocation76() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation76()
}

func (c *current) onFileLocation167() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonFileLocation167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation167()
}

func (c *current) onFileLocation71(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileLocation71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation71(stack["element"])
}

func (c *current) onFileLocation169() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation169()
}

func (c *current) onFileLocation5(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFileLocation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation5(stack["elements"])
}

func (c *current) onFileLocation175() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileLocation175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation175()
}

func (c *current) onFileLocation171(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileLocation171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation171(stack["ref"])
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
