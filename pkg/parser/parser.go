// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "RawSource",
			pos:  position{line: 20, col: 1, offset: 412},
			expr: &actionExpr{
				pos: position{line: 20, col: 14, offset: 425},
				run: (*parser).callonRawSource1,
				expr: &labeledExpr{
					pos:   position{line: 20, col: 14, offset: 425},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 20, col: 20, offset: 431},
						expr: &choiceExpr{
							pos: position{line: 20, col: 21, offset: 432},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 182, col: 25, offset: 5755},
									run: (*parser).callonRawSource5,
									expr: &seqExpr{
										pos: position{line: 182, col: 25, offset: 5755},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 182, col: 25, offset: 5755},
												val:        ":",
												ignoreCase: false,
												want:       "\":\"",
											},
											&labeledExpr{
												pos:   position{line: 182, col: 29, offset: 5759},
												label: "name",
												expr: &actionExpr{
													pos: position{line: 190, col: 18, offset: 6118},
													run: (*parser).callonRawSource9,
													expr: &seqExpr{
														pos: position{line: 190, col: 18, offset: 6118},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 190, col: 18, offset: 6118},
																val:        "[_0-9\\pL]",
																chars:      []rune{'_'},
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 190, col: 28, offset: 6128},
																expr: &charClassMatcher{
																	pos:        position{line: 190, col: 29, offset: 6129},
																	val:        "[-0-9\\pL]",
																	chars:      []rune{'-'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 182, col: 50, offset: 5780},
												val:        ":",
												ignoreCase: false,
												want:       "\":\"",
											},
											&labeledExpr{
												pos:   position{line: 183, col: 9, offset: 5793},
												label: "value",
												expr: &zeroOrOneExpr{
													pos: position{line: 183, col: 15, offset: 5799},
													expr: &actionExpr{
														pos: position{line: 194, col: 30, offset: 6206},
														run: (*parser).callonRawSource17,
														expr: &seqExpr{
															pos: position{line: 194, col: 30, offset: 6206},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 194, col: 30, offset: 6206},
																	expr: &choiceExpr{
																		pos: position{line: 2271, col: 10, offset: 79961},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2271, col: 10, offset: 79961},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2271, col: 16, offset: 79967},
																				run: (*parser).callonRawSource22,
																				expr: &litMatcher{
																					pos:        position{line: 2271, col: 16, offset: 79967},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 194, col: 37, offset: 6213},
																	label: "elements",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 194, col: 46, offset: 6222},
																		expr: &choiceExpr{
																			pos: position{line: 195, col: 5, offset: 6228},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 195, col: 6, offset: 6229},
																					run: (*parser).callonRawSource27,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 195, col: 6, offset: 6229},
																						expr: &charClassMatcher{
																							pos:        position{line: 195, col: 6, offset: 6229},
																							val:        "[^\\r\\n{]",
																							chars:      []rune{'\r', '\n', '{'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 221, col: 25, offset: 7126},
																					run: (*parser).callonRawSource30,
																					expr: &seqExpr{
																						pos: position{line: 221, col: 25, offset: 7126},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 221, col: 25, offset: 7126},
																								val:        "{counter:",
																								ignoreCase: false,
																								want:       "\"{counter:\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 221, col: 37, offset: 7138},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 190, col: 18, offset: 6118},
																									run: (*parser).callonRawSource34,
																									expr: &seqExpr{
																										pos: position{line: 190, col: 18, offset: 6118},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 190, col: 18, offset: 6118},
																												val:        "[_0-9\\pL]",
																												chars:      []rune{'_'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 190, col: 28, offset: 6128},
																												expr: &charClassMatcher{
																													pos:        position{line: 190, col: 29, offset: 6129},
																													val:        "[-0-9\\pL]",
																													chars:      []rune{'-'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 221, col: 56, offset: 7157},
																								label: "start",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 221, col: 62, offset: 7163},
																									expr: &actionExpr{
																										pos: position{line: 229, col: 17, offset: 7426},
																										run: (*parser).callonRawSource41,
																										expr: &seqExpr{
																											pos: position{line: 229, col: 17, offset: 7426},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 229, col: 17, offset: 7426},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 229, col: 21, offset: 7430},
																													label: "start",
																													expr: &choiceExpr{
																														pos: position{line: 229, col: 28, offset: 7437},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 229, col: 28, offset: 7437},
																																run: (*parser).callonRawSource46,
																																expr: &charClassMatcher{
																																	pos:        position{line: 229, col: 28, offset: 7437},
																																	val:        "[A-Za-z]",
																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 231, col: 9, offset: 7491},
																																run: (*parser).callonRawSource48,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 231, col: 9, offset: 7491},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 231, col: 9, offset: 7491},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 221, col: 78, offset: 7179},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 225, col: 25, offset: 7281},
																					run: (*parser).callonRawSource52,
																					expr: &seqExpr{
																						pos: position{line: 225, col: 25, offset: 7281},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 225, col: 25, offset: 7281},
																								val:        "{counter2:",
																								ignoreCase: false,
																								want:       "\"{counter2:\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 225, col: 38, offset: 7294},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 190, col: 18, offset: 6118},
																									run: (*parser).callonRawSource56,
																									expr: &seqExpr{
																										pos: position{line: 190, col: 18, offset: 6118},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 190, col: 18, offset: 6118},
																												val:        "[_0-9\\pL]",
																												chars:      []rune{'_'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 190, col: 28, offset: 6128},
																												expr: &charClassMatcher{
																													pos:        position{line: 190, col: 29, offset: 6129},
																													val:        "[-0-9\\pL]",
																													chars:      []rune{'-'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 225, col: 57, offset: 7313},
																								label: "start",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 225, col: 63, offset: 7319},
																									expr: &actionExpr{
																										pos: position{line: 229, col: 17, offset: 7426},
																										run: (*parser).callonRawSource63,
																										expr: &seqExpr{
																											pos: position{line: 229, col: 17, offset: 7426},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 229, col: 17, offset: 7426},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 229, col: 21, offset: 7430},
																													label: "start",
																													expr: &choiceExpr{
																														pos: position{line: 229, col: 28, offset: 7437},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 229, col: 28, offset: 7437},
																																run: (*parser).callonRawSource68,
																																expr: &charClassMatcher{
																																	pos:        position{line: 229, col: 28, offset: 7437},
																																	val:        "[A-Za-z]",
																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 231, col: 9, offset: 7491},
																																run: (*parser).callonRawSource70,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 231, col: 9, offset: 7491},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 231, col: 9, offset: 7491},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 225, col: 79, offset: 7335},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 214, col: 12, offset: 6782},
																					run: (*parser).callonRawSource74,
																					expr: &seqExpr{
																						pos: position{line: 214, col: 12, offset: 6782},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 214, col: 12, offset: 6782},
																								val:        "{",
																								ignoreCase: false,
																								want:       "\"{\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 214, col: 16, offset: 6786},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 190, col: 18, offset: 6118},
																									run: (*parser).callonRawSource78,
																									expr: &seqExpr{
																										pos: position{line: 190, col: 18, offset: 6118},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 190, col: 18, offset: 6118},
																												val:        "[_0-9\\pL]",
																												chars:      []rune{'_'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 190, col: 28, offset: 6128},
																												expr: &charClassMatcher{
																													pos:        position{line: 190, col: 29, offset: 6129},
																													val:        "[-0-9\\pL]",
																													chars:      []rune{'-'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 214, col: 35, offset: 6805},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 199, col: 6, offset: 6337},
																					run: (*parser).callonRawSource84,
																					expr: &litMatcher{
																						pos:        position{line: 199, col: 6, offset: 6337},
																						val:        "{",
																						ignoreCase: false,
																						want:       "\"{\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2279, col: 8, offset: 80059},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 26, col: 5, offset: 648},
									run: (*parser).callonRawSource91,
									expr: &seqExpr{
										pos: position{line: 26, col: 5, offset: 648},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 26, col: 5, offset: 648},
												label: "level",
												expr: &actionExpr{
													pos: position{line: 26, col: 12, offset: 655},
													run: (*parser).callonRawSource94,
													expr: &oneOrMoreExpr{
														pos: position{line: 26, col: 12, offset: 655},
														expr: &litMatcher{
															pos:        position{line: 26, col: 13, offset: 656},
															val:        "=",
															ignoreCase: false,
															want:       "\"=\"",
														},
													},
												},
											},
											&andCodeExpr{
												pos: position{line: 30, col: 5, offset: 747},
												run: (*parser).callonRawSource97,
											},
											&oneOrMoreExpr{
												pos: position{line: 34, col: 5, offset: 899},
												expr: &choiceExpr{
													pos: position{line: 2271, col: 10, offset: 79961},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2271, col: 10, offset: 79961},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2271, col: 16, offset: 79967},
															run: (*parser).callonRawSource101,
															expr: &litMatcher{
																pos:        position{line: 2271, col: 16, offset: 79967},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 34, col: 12, offset: 906},
												label: "title",
												expr: &actionExpr{
													pos: position{line: 38, col: 20, offset: 1019},
													run: (*parser).callonRawSource104,
													expr: &zeroOrMoreExpr{
														pos: position{line: 38, col: 20, offset: 1019},
														expr: &charClassMatcher{
															pos:        position{line: 38, col: 20, offset: 1019},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2279, col: 8, offset: 80059},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 20, col: 57, offset: 468},
									name: "FileInclusion",
								},
								&actionExpr{
									pos: position{line: 42, col: 12, offset: 1077},
									run: (*parser).callonRawSource113,
									expr: &seqExpr{
										pos: position{line: 42, col: 12, offset: 1077},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 42, col: 12, offset: 1077},
												expr: &notExpr{
													pos: position{line: 2277, col: 8, offset: 80048},
													expr: &anyMatcher{
														line: 2277, col: 9, offset: 80049,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 42, col: 17, offset: 1082},
												label: "content",
												expr: &actionExpr{
													pos: position{line: 42, col: 26, offset: 1091},
													run: (*parser).callonRawSource119,
													expr: &zeroOrMoreExpr{
														pos: position{line: 42, col: 26, offset: 1091},
														expr: &charClassMatcher{
															pos:        position{line: 42, col: 26, offset: 1091},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2279, col: 8, offset: 80059},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawDocument",
			pos:  position{line: 51, col: 1, offset: 1425},
			expr: &actionExpr{
				pos: position{line: 51, col: 16, offset: 1440},
				run: (*parser).callonRawDocument1,
				expr: &seqExpr{
					pos: position{line: 51, col: 16, offset: 1440},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 51, col: 16, offset: 1440},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 51, col: 29, offset: 1453},
								expr: &actionExpr{
									pos: position{line: 107, col: 20, offset: 3133},
									run: (*parser).callonRawDocument5,
									expr: &seqExpr{
										pos: position{line: 107, col: 20, offset: 3133},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 111, col: 26, offset: 3293},
												val:        "---",
												ignoreCase: false,
												want:       "\"---\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 111, col: 32, offset: 3299},
												expr: &choiceExpr{
													pos: position{line: 2271, col: 10, offset: 79961},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2271, col: 10, offset: 79961},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2271, col: 16, offset: 79967},
															run: (*parser).callonRawDocument11,
															expr: &litMatcher{
																pos:        position{line: 2271, col: 16, offset: 79967},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2279, col: 8, offset: 80059},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 107, col: 41, offset: 3154},
												label: "content",
												expr: &zeroOrOneExpr{
													pos: position{line: 107, col: 49, offset: 3162},
													expr: &actionExpr{
														pos: position{line: 113, col: 27, offset: 3337},
														run: (*parser).callonRawDocument20,
														expr: &zeroOrMoreExpr{
															pos: position{line: 113, col: 27, offset: 3337},
															expr: &oneOrMoreExpr{
																pos: position{line: 113, col: 28, offset: 3338},
																expr: &seqExpr{
																	pos: position{line: 113, col: 29, offset: 3339},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 113, col: 29, offset: 3339},
																			expr: &seqExpr{
																				pos: position{line: 111, col: 26, offset: 3293},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 111, col: 26, offset: 3293},
																						val:        "---",
																						ignoreCase: false,
																						want:       "\"---\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 111, col: 32, offset: 3299},
																						expr: &choiceExpr{
																							pos: position{line: 2271, col: 10, offset: 79961},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2271, col: 10, offset: 79961},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2271, col: 16, offset: 79967},
																									run: (*parser).callonRawDocument30,
																									expr: &litMatcher{
																										pos:        position{line: 2271, col: 16, offset: 79967},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2279, col: 8, offset: 80059},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2275, col: 12, offset: 80019},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2275, col: 21, offset: 80028},
																								val:        "[\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&anyMatcher{
																			line: 113, col: 51, offset: 3361,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 111, col: 26, offset: 3293},
												val:        "---",
												ignoreCase: false,
												want:       "\"---\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 111, col: 32, offset: 3299},
												expr: &choiceExpr{
													pos: position{line: 2271, col: 10, offset: 79961},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2271, col: 10, offset: 79961},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2271, col: 16, offset: 79967},
															run: (*parser).callonRawDocument42,
															expr: &litMatcher{
																pos:        position{line: 2271, col: 16, offset: 79967},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2279, col: 8, offset: 80059},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 51, col: 43, offset: 1467},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 51, col: 51, offset: 1475},
								name: "DocumentBlocks",
							},
						},
						&notExpr{
							pos: position{line: 2277, col: 8, offset: 80048},
							expr: &anyMatcher{
								line: 2277, col: 9, offset: 80049,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocks",
			pos:  position{line: 58, col: 1, offset: 1680},
			expr: &actionExpr{
				pos: position{line: 58, col: 19, offset: 1698},
				run: (*parser).callonDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 58, col: 19, offset: 1698},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 58, col: 19, offset: 1698},
							expr: &choiceExpr{
								pos: position{line: 2275, col: 12, offset: 80019},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2275, col: 12, offset: 80019},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&charClassMatcher{
										pos:        position{line: 2275, col: 21, offset: 80028},
										val:        "[\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 58, col: 28, offset: 1707},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 58, col: 36, offset: 1715},
								expr: &actionExpr{
									pos: position{line: 120, col: 19, offset: 3545},
									run: (*parser).callonDocumentBlocks9,
									expr: &seqExpr{
										pos: position{line: 120, col: 19, offset: 3545},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 120, col: 19, offset: 3545},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&oneOrMoreExpr{
												pos: position{line: 120, col: 23, offset: 3549},
												expr: &choiceExpr{
													pos: position{line: 2271, col: 10, offset: 79961},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2271, col: 10, offset: 79961},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2271, col: 16, offset: 79967},
															run: (*parser).callonDocumentBlocks15,
															expr: &litMatcher{
																pos:        position{line: 2271, col: 16, offset: 79967},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 120, col: 30, offset: 3556},
												label: "title",
												expr: &actionExpr{
													pos: position{line: 504, col: 18, offset: 16057},
													run: (*parser).callonDocumentBlocks18,
													expr: &labeledExpr{
														pos:   position{line: 504, col: 18, offset: 16057},
														label: "elements",
														expr: &oneOrMoreExpr{
															pos: position{line: 504, col: 27, offset: 16066},
															expr: &seqExpr{
																pos: position{line: 504, col: 28, offset: 16067},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 504, col: 28, offset: 16067},
																		expr: &choiceExpr{
																			pos: position{line: 2275, col: 12, offset: 80019},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2275, col: 12, offset: 80019},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2275, col: 21, offset: 80028},
																					val:        "[\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 504, col: 37, offset: 16076},
																		expr: &actionExpr{
																			pos: position{line: 237, col: 20, offset: 7607},
																			run: (*parser).callonDocumentBlocks27,
																			expr: &seqExpr{
																				pos: position{line: 237, col: 20, offset: 7607},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 237, col: 20, offset: 7607},
																						val:        "[[",
																						ignoreCase: false,
																						want:       "\"[[\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 237, col: 25, offset: 7612},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2259, col: 7, offset: 79709},
																							run: (*parser).callonDocumentBlocks31,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2259, col: 7, offset: 79709},
																								expr: &charClassMatcher{
																									pos:        position{line: 2259, col: 7, offset: 79709},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 237, col: 33, offset: 7620},
																						val:        "]]",
																						ignoreCase: false,
																						want:       "\"]]\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 237, col: 38, offset: 7625},
																						expr: &choiceExpr{
																							pos: position{line: 2271, col: 10, offset: 79961},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2271, col: 10, offset: 79961},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2271, col: 16, offset: 79967},
																									run: (*parser).callonDocumentBlocks38,
																									expr: &litMatcher{
																										pos:        position{line: 2271, col: 16, offset: 79967},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 508, col: 17, offset: 16230},
																		run: (*parser).callonDocumentBlocks40,
																		expr: &labeledExpr{
																			pos:   position{line: 508, col: 17, offset: 16230},
																			label: "element",
																			expr: &choiceExpr{
																				pos: position{line: 508, col: 26, offset: 16239},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2225, col: 5, offset: 78563},
																						run: (*parser).callonDocumentBlocks43,
																						expr: &seqExpr{
																							pos: position{line: 2225, col: 5, offset: 78563},
																							exprs: []interface{}{
																								&oneOrMoreExpr{
																									pos: position{line: 2225, col: 5, offset: 78563},
																									expr: &charClassMatcher{
																										pos:        position{line: 2225, col: 5, offset: 78563},
																										val:        "[0-9\\pL]",
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&andExpr{
																									pos: position{line: 2225, col: 15, offset: 78573},
																									expr: &choiceExpr{
																										pos: position{line: 2225, col: 17, offset: 78575},
																										alternatives: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 2225, col: 17, offset: 78575},
																												val:        "[\\r\\n ,]]",
																												chars:      []rune{'\r', '\n', ' ', ',', ']'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2227, col: 9, offset: 78658},
																						run: (*parser).callonDocumentBlocks52,
																						expr: &seqExpr{
																							pos: position{line: 2227, col: 9, offset: 78658},
																							exprs: []interface{}{
																								&oneOrMoreExpr{
																									pos: position{line: 2227, col: 9, offset: 78658},
																									expr: &charClassMatcher{
																										pos:        position{line: 2227, col: 9, offset: 78658},
																										val:        "[0-9\\pL]",
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 2227, col: 19, offset: 78668},
																									expr: &seqExpr{
																										pos: position{line: 2227, col: 20, offset: 78669},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 2227, col: 20, offset: 78669},
																												val:        "[=*_`]",
																												chars:      []rune{'=', '*', '_', '`'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 2227, col: 27, offset: 78676},
																												expr: &charClassMatcher{
																													pos:        position{line: 2227, col: 27, offset: 78676},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 995, col: 14, offset: 32701},
																						run: (*parser).callonDocumentBlocks61,
																						expr: &seqExpr{
																							pos: position{line: 995, col: 14, offset: 32701},
																							exprs: []interface{}{
																								&choiceExpr{
																									pos: position{line: 2271, col: 10, offset: 79961},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2271, col: 10, offset: 79961},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2271, col: 16, offset: 79967},
																											run: (*parser).callonDocumentBlocks65,
																											expr: &litMatcher{
																												pos:        position{line: 2271, col: 16, offset: 79967},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 995, col: 20, offset: 32707},
																									val:        "+",
																									ignoreCase: false,
																									want:       "\"+\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 995, col: 24, offset: 32711},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonDocumentBlocks71,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&andExpr{
																									pos: position{line: 995, col: 31, offset: 32718},
																									expr: &choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 510, col: 11, offset: 16299},
																						expr: &choiceExpr{
																							pos: position{line: 2271, col: 10, offset: 79961},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2271, col: 10, offset: 79961},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2271, col: 16, offset: 79967},
																									run: (*parser).callonDocumentBlocks82,
																									expr: &litMatcher{
																										pos:        position{line: 2271, col: 16, offset: 79967},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1940, col: 23, offset: 69003},
																						run: (*parser).callonDocumentBlocks84,
																						expr: &seqExpr{
																							pos: position{line: 1940, col: 23, offset: 69003},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1940, col: 23, offset: 69003},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 1940, col: 32, offset: 69012},
																									label: "ref",
																									expr: &actionExpr{
																										pos: position{line: 1940, col: 37, offset: 69017},
																										run: (*parser).callonDocumentBlocks88,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1940, col: 37, offset: 69017},
																											expr: &charClassMatcher{
																												pos:        position{line: 1940, col: 37, offset: 69017},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1940, col: 76, offset: 69056},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2237, col: 12, offset: 79050},
																						run: (*parser).callonDocumentBlocks92,
																						expr: &charClassMatcher{
																							pos:        position{line: 2237, col: 12, offset: 79050},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 120, col: 52, offset: 3578},
												label: "id",
												expr: &zeroOrMoreExpr{
													pos: position{line: 120, col: 56, offset: 3582},
													expr: &actionExpr{
														pos: position{line: 237, col: 20, offset: 7607},
														run: (*parser).callonDocumentBlocks96,
														expr: &seqExpr{
															pos: position{line: 237, col: 20, offset: 7607},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 237, col: 20, offset: 7607},
																	val:        "[[",
																	ignoreCase: false,
																	want:       "\"[[\"",
																},
																&labeledExpr{
																	pos:   position{line: 237, col: 25, offset: 7612},
																	label: "id",
																	expr: &actionExpr{
																		pos: position{line: 2259, col: 7, offset: 79709},
																		run: (*parser).callonDocumentBlocks100,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2259, col: 7, offset: 79709},
																			expr: &charClassMatcher{
																				pos:        position{line: 2259, col: 7, offset: 79709},
																				val:        "[^[]<>,]",
																				chars:      []rune{'[', ']', '<', '>', ','},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 237, col: 33, offset: 7620},
																	val:        "]]",
																	ignoreCase: false,
																	want:       "\"]]\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 237, col: 38, offset: 7625},
																	expr: &choiceExpr{
																		pos: position{line: 2271, col: 10, offset: 79961},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2271, col: 10, offset: 79961},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2271, col: 16, offset: 79967},
																				run: (*parser).callonDocumentBlocks107,
																				expr: &litMatcher{
																					pos:        position{line: 2271, col: 16, offset: 79967},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2279, col: 8, offset: 80059},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 121, col: 9, offset: 3612},
												expr: &choiceExpr{
													pos: position{line: 121, col: 10, offset: 3613},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 121, col: 10, offset: 3613},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 121, col: 10, offset: 3613},
																	expr: &choiceExpr{
																		pos: position{line: 2271, col: 10, offset: 79961},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2271, col: 10, offset: 79961},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2271, col: 16, offset: 79967},
																				run: (*parser).callonDocumentBlocks120,
																				expr: &litMatcher{
																					pos:        position{line: 2271, col: 16, offset: 79967},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1916, col: 22, offset: 68317},
																	run: (*parser).callonDocumentBlocks122,
																	expr: &seqExpr{
																		pos: position{line: 1916, col: 22, offset: 68317},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1916, col: 22, offset: 68317},
																				expr: &seqExpr{
																					pos: position{line: 1902, col: 26, offset: 67906},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1902, col: 26, offset: 67906},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1902, col: 33, offset: 67913},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlocks130,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1916, col: 45, offset: 68340},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1916, col: 50, offset: 68345},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 1920, col: 29, offset: 68473},
																					run: (*parser).callonDocumentBlocks139,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 1920, col: 29, offset: 68473},
																						expr: &charClassMatcher{
																							pos:        position{line: 1920, col: 29, offset: 68473},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1908, col: 17, offset: 68045},
															run: (*parser).callonDocumentBlocks147,
															expr: &seqExpr{
																pos: position{line: 1908, col: 17, offset: 68045},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1904, col: 31, offset: 67955},
																		val:        "////",
																		ignoreCase: false,
																		want:       "\"////\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1904, col: 38, offset: 67962},
																		expr: &choiceExpr{
																			pos: position{line: 2271, col: 10, offset: 79961},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2271, col: 10, offset: 79961},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2271, col: 16, offset: 79967},
																					run: (*parser).callonDocumentBlocks153,
																					expr: &litMatcher{
																						pos:        position{line: 2271, col: 16, offset: 79967},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2279, col: 8, offset: 80059},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2275, col: 12, offset: 80019},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2275, col: 21, offset: 80028},
																				val:        "[\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&notExpr{
																				pos: position{line: 2277, col: 8, offset: 80048},
																				expr: &anyMatcher{
																					line: 2277, col: 9, offset: 80049,
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1908, col: 44, offset: 68072},
																		label: "content",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 1912, col: 27, offset: 68225},
																			expr: &actionExpr{
																				pos: position{line: 1912, col: 28, offset: 68226},
																				run: (*parser).callonDocumentBlocks162,
																				expr: &seqExpr{
																					pos: position{line: 1912, col: 28, offset: 68226},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 1912, col: 28, offset: 68226},
																							expr: &choiceExpr{
																								pos: position{line: 1906, col: 29, offset: 68002},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 1906, col: 30, offset: 68003},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1906, col: 30, offset: 68003},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1906, col: 37, offset: 68010},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonDocumentBlocks171,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1912, col: 54, offset: 68252},
																							label: "line",
																							expr: &actionExpr{
																								pos: position{line: 42, col: 12, offset: 1077},
																								run: (*parser).callonDocumentBlocks181,
																								expr: &seqExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 42, col: 12, offset: 1077},
																											expr: &notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 42, col: 17, offset: 1082},
																											label: "content",
																											expr: &actionExpr{
																												pos: position{line: 42, col: 26, offset: 1091},
																												run: (*parser).callonDocumentBlocks187,
																												expr: &zeroOrMoreExpr{
																													pos: position{line: 42, col: 26, offset: 1091},
																													expr: &charClassMatcher{
																														pos:        position{line: 42, col: 26, offset: 1091},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2279, col: 8, offset: 80059},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2275, col: 12, offset: 80019},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2275, col: 21, offset: 80028},
																													val:        "[\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&notExpr{
																													pos: position{line: 2277, col: 8, offset: 80048},
																													expr: &anyMatcher{
																														line: 2277, col: 9, offset: 80049,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 1906, col: 29, offset: 68002},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 1906, col: 30, offset: 68003},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 1906, col: 30, offset: 68003},
																						val:        "////",
																						ignoreCase: false,
																						want:       "\"////\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 1906, col: 37, offset: 68010},
																						expr: &choiceExpr{
																							pos: position{line: 2271, col: 10, offset: 79961},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2271, col: 10, offset: 79961},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2271, col: 16, offset: 79967},
																									run: (*parser).callonDocumentBlocks201,
																									expr: &litMatcher{
																										pos:        position{line: 2271, col: 16, offset: 79967},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2279, col: 8, offset: 80059},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2275, col: 12, offset: 80019},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2275, col: 21, offset: 80028},
																								val:        "[\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2277, col: 8, offset: 80048},
																				expr: &anyMatcher{
																					line: 2277, col: 9, offset: 80049,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 122, col: 9, offset: 3663},
												label: "authors",
												expr: &zeroOrOneExpr{
													pos: position{line: 122, col: 18, offset: 3672},
													expr: &choiceExpr{
														pos: position{line: 128, col: 20, offset: 3880},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 130, col: 30, offset: 3967},
																run: (*parser).callonDocumentBlocks213,
																expr: &seqExpr{
																	pos: position{line: 130, col: 30, offset: 3967},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 130, col: 30, offset: 3967},
																			expr: &choiceExpr{
																				pos: position{line: 2271, col: 10, offset: 79961},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2271, col: 10, offset: 79961},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																					&actionExpr{
																						pos: position{line: 2271, col: 16, offset: 79967},
																						run: (*parser).callonDocumentBlocks218,
																						expr: &litMatcher{
																							pos:        position{line: 2271, col: 16, offset: 79967},
																							val:        "\t",
																							ignoreCase: false,
																							want:       "\"\\t\"",
																						},
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 130, col: 37, offset: 3974},
																			expr: &litMatcher{
																				pos:        position{line: 130, col: 38, offset: 3975},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 130, col: 42, offset: 3979},
																			label: "authors",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 130, col: 51, offset: 3988},
																				expr: &actionExpr{
																					pos: position{line: 138, col: 19, offset: 4246},
																					run: (*parser).callonDocumentBlocks224,
																					expr: &seqExpr{
																						pos: position{line: 138, col: 19, offset: 4246},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 138, col: 19, offset: 4246},
																								expr: &choiceExpr{
																									pos: position{line: 2271, col: 10, offset: 79961},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2271, col: 10, offset: 79961},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2271, col: 16, offset: 79967},
																											run: (*parser).callonDocumentBlocks229,
																											expr: &litMatcher{
																												pos:        position{line: 2271, col: 16, offset: 79967},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 138, col: 26, offset: 4253},
																								label: "fullname",
																								expr: &actionExpr{
																									pos: position{line: 143, col: 23, offset: 4491},
																									run: (*parser).callonDocumentBlocks232,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 143, col: 23, offset: 4491},
																										expr: &charClassMatcher{
																											pos:        position{line: 143, col: 23, offset: 4491},
																											val:        "[^<;\\r\\n]",
																											chars:      []rune{'<', ';', '\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 138, col: 56, offset: 4283},
																								label: "email",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 138, col: 62, offset: 4289},
																									expr: &actionExpr{
																										pos: position{line: 147, col: 24, offset: 4561},
																										run: (*parser).callonDocumentBlocks237,
																										expr: &seqExpr{
																											pos: position{line: 147, col: 24, offset: 4561},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 147, col: 24, offset: 4561},
																													val:        "<",
																													ignoreCase: false,
																													want:       "\"<\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 147, col: 28, offset: 4565},
																													label: "email",
																													expr: &actionExpr{
																														pos: position{line: 147, col: 35, offset: 4572},
																														run: (*parser).callonDocumentBlocks241,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 147, col: 36, offset: 4573},
																															expr: &charClassMatcher{
																																pos:        position{line: 147, col: 36, offset: 4573},
																																val:        "[^>\\r\\n]",
																																chars:      []rune{'>', '\r', '\n'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 149, col: 4, offset: 4620},
																													val:        ">",
																													ignoreCase: false,
																													want:       "\">\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 138, col: 85, offset: 4312},
																								expr: &choiceExpr{
																									pos: position{line: 2271, col: 10, offset: 79961},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2271, col: 10, offset: 79961},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2271, col: 16, offset: 79967},
																											run: (*parser).callonDocumentBlocks248,
																											expr: &litMatcher{
																												pos:        position{line: 2271, col: 16, offset: 79967},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 138, col: 92, offset: 4319},
																								expr: &litMatcher{
																									pos:        position{line: 138, col: 92, offset: 4319},
																									val:        ";",
																									ignoreCase: false,
																									want:       "\";\"",
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 138, col: 97, offset: 4324},
																								expr: &choiceExpr{
																									pos: position{line: 2271, col: 10, offset: 79961},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2271, col: 10, offset: 79961},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2271, col: 16, offset: 79967},
																											run: (*parser).callonDocumentBlocks255,
																											expr: &litMatcher{
																												pos:        position{line: 2271, col: 16, offset: 79967},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2279, col: 8, offset: 80059},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2275, col: 12, offset: 80019},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2275, col: 21, offset: 80028},
																					val:        "[\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&notExpr{
																					pos: position{line: 2277, col: 8, offset: 80048},
																					expr: &anyMatcher{
																						line: 2277, col: 9, offset: 80049,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 134, col: 33, offset: 4107},
																run: (*parser).callonDocumentBlocks262,
																expr: &seqExpr{
																	pos: position{line: 134, col: 33, offset: 4107},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 134, col: 33, offset: 4107},
																			expr: &choiceExpr{
																				pos: position{line: 2271, col: 10, offset: 79961},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2271, col: 10, offset: 79961},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																					&actionExpr{
																						pos: position{line: 2271, col: 16, offset: 79967},
																						run: (*parser).callonDocumentBlocks267,
																						expr: &litMatcher{
																							pos:        position{line: 2271, col: 16, offset: 79967},
																							val:        "\t",
																							ignoreCase: false,
																							want:       "\"\\t\"",
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 134, col: 40, offset: 4114},
																			val:        ":author:",
																			ignoreCase: false,
																			want:       "\":author:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 134, col: 51, offset: 4125},
																			label: "author",
																			expr: &actionExpr{
																				pos: position{line: 138, col: 19, offset: 4246},
																				run: (*parser).callonDocumentBlocks271,
																				expr: &seqExpr{
																					pos: position{line: 138, col: 19, offset: 4246},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 138, col: 19, offset: 4246},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlocks276,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 138, col: 26, offset: 4253},
																							label: "fullname",
																							expr: &actionExpr{
																								pos: position{line: 143, col: 23, offset: 4491},
																								run: (*parser).callonDocumentBlocks279,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 143, col: 23, offset: 4491},
																									expr: &charClassMatcher{
																										pos:        position{line: 143, col: 23, offset: 4491},
																										val:        "[^<;\\r\\n]",
																										chars:      []rune{'<', ';', '\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 138, col: 56, offset: 4283},
																							label: "email",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 138, col: 62, offset: 4289},
																								expr: &actionExpr{
																									pos: position{line: 147, col: 24, offset: 4561},
																									run: (*parser).callonDocumentBlocks284,
																									expr: &seqExpr{
																										pos: position{line: 147, col: 24, offset: 4561},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 147, col: 24, offset: 4561},
																												val:        "<",
																												ignoreCase: false,
																												want:       "\"<\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 147, col: 28, offset: 4565},
																												label: "email",
																												expr: &actionExpr{
																													pos: position{line: 147, col: 35, offset: 4572},
																													run: (*parser).callonDocumentBlocks288,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 147, col: 36, offset: 4573},
																														expr: &charClassMatcher{
																															pos:        position{line: 147, col: 36, offset: 4573},
																															val:        "[^>\\r\\n]",
																															chars:      []rune{'>', '\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 149, col: 4, offset: 4620},
																												val:        ">",
																												ignoreCase: false,
																												want:       "\">\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 138, col: 85, offset: 4312},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlocks295,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 138, col: 92, offset: 4319},
																							expr: &litMatcher{
																								pos:        position{line: 138, col: 92, offset: 4319},
																								val:        ";",
																								ignoreCase: false,
																								want:       "\";\"",
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 138, col: 97, offset: 4324},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlocks302,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2279, col: 8, offset: 80059},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2275, col: 12, offset: 80019},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2275, col: 21, offset: 80028},
																					val:        "[\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&notExpr{
																					pos: position{line: 2277, col: 8, offset: 80048},
																					expr: &anyMatcher{
																						line: 2277, col: 9, offset: 80049,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 123, col: 9, offset: 3699},
												expr: &choiceExpr{
													pos: position{line: 123, col: 10, offset: 3700},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 123, col: 10, offset: 3700},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 123, col: 10, offset: 3700},
																	expr: &choiceExpr{
																		pos: position{line: 2271, col: 10, offset: 79961},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2271, col: 10, offset: 79961},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2271, col: 16, offset: 79967},
																				run: (*parser).callonDocumentBlocks315,
																				expr: &litMatcher{
																					pos:        position{line: 2271, col: 16, offset: 79967},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1916, col: 22, offset: 68317},
																	run: (*parser).callonDocumentBlocks317,
																	expr: &seqExpr{
																		pos: position{line: 1916, col: 22, offset: 68317},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1916, col: 22, offset: 68317},
																				expr: &seqExpr{
																					pos: position{line: 1902, col: 26, offset: 67906},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1902, col: 26, offset: 67906},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1902, col: 33, offset: 67913},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlocks325,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1916, col: 45, offset: 68340},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1916, col: 50, offset: 68345},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 1920, col: 29, offset: 68473},
																					run: (*parser).callonDocumentBlocks334,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 1920, col: 29, offset: 68473},
																						expr: &charClassMatcher{
																							pos:        position{line: 1920, col: 29, offset: 68473},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1908, col: 17, offset: 68045},
															run: (*parser).callonDocumentBlocks342,
															expr: &seqExpr{
																pos: position{line: 1908, col: 17, offset: 68045},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1904, col: 31, offset: 67955},
																		val:        "////",
																		ignoreCase: false,
																		want:       "\"////\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1904, col: 38, offset: 67962},
																		expr: &choiceExpr{
																			pos: position{line: 2271, col: 10, offset: 79961},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2271, col: 10, offset: 79961},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2271, col: 16, offset: 79967},
																					run: (*parser).callonDocumentBlocks348,
																					expr: &litMatcher{
																						pos:        position{line: 2271, col: 16, offset: 79967},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2279, col: 8, offset: 80059},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2275, col: 12, offset: 80019},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2275, col: 21, offset: 80028},
																				val:        "[\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&notExpr{
																				pos: position{line: 2277, col: 8, offset: 80048},
																				expr: &anyMatcher{
																					line: 2277, col: 9, offset: 80049,
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1908, col: 44, offset: 68072},
																		label: "content",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 1912, col: 27, offset: 68225},
																			expr: &actionExpr{
																				pos: position{line: 1912, col: 28, offset: 68226},
																				run: (*parser).callonDocumentBlocks357,
																				expr: &seqExpr{
																					pos: position{line: 1912, col: 28, offset: 68226},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 1912, col: 28, offset: 68226},
																							expr: &choiceExpr{
																								pos: position{line: 1906, col: 29, offset: 68002},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 1906, col: 30, offset: 68003},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1906, col: 30, offset: 68003},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1906, col: 37, offset: 68010},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonDocumentBlocks366,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1912, col: 54, offset: 68252},
																							label: "line",
																							expr: &actionExpr{
																								pos: position{line: 42, col: 12, offset: 1077},
																								run: (*parser).callonDocumentBlocks376,
																								expr: &seqExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 42, col: 12, offset: 1077},
																											expr: &notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 42, col: 17, offset: 1082},
																											label: "content",
																											expr: &actionExpr{
																												pos: position{line: 42, col: 26, offset: 1091},
																												run: (*parser).callonDocumentBlocks382,
																												expr: &zeroOrMoreExpr{
																													pos: position{line: 42, col: 26, offset: 1091},
																													expr: &charClassMatcher{
																														pos:        position{line: 42, col: 26, offset: 1091},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2279, col: 8, offset: 80059},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2275, col: 12, offset: 80019},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2275, col: 21, offset: 80028},
																													val:        "[\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&notExpr{
																													pos: position{line: 2277, col: 8, offset: 80048},
																													expr: &anyMatcher{
																														line: 2277, col: 9, offset: 80049,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 1906, col: 29, offset: 68002},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 1906, col: 30, offset: 68003},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 1906, col: 30, offset: 68003},
																						val:        "////",
																						ignoreCase: false,
																						want:       "\"////\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 1906, col: 37, offset: 68010},
																						expr: &choiceExpr{
																							pos: position{line: 2271, col: 10, offset: 79961},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2271, col: 10, offset: 79961},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2271, col: 16, offset: 79967},
																									run: (*parser).callonDocumentBlocks396,
																									expr: &litMatcher{
																										pos:        position{line: 2271, col: 16, offset: 79967},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2279, col: 8, offset: 80059},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2275, col: 12, offset: 80019},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2275, col: 21, offset: 80028},
																								val:        "[\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2277, col: 8, offset: 80048},
																				expr: &anyMatcher{
																					line: 2277, col: 9, offset: 80049,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 124, col: 9, offset: 3750},
												label: "revision",
												expr: &zeroOrOneExpr{
													pos: position{line: 124, col: 19, offset: 3760},
													expr: &actionExpr{
														pos: position{line: 155, col: 21, offset: 4801},
														run: (*parser).callonDocumentBlocks407,
														expr: &seqExpr{
															pos: position{line: 155, col: 21, offset: 4801},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 155, col: 21, offset: 4801},
																	expr: &choiceExpr{
																		pos: position{line: 2271, col: 10, offset: 79961},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2271, col: 10, offset: 79961},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2271, col: 16, offset: 79967},
																				run: (*parser).callonDocumentBlocks412,
																				expr: &litMatcher{
																					pos:        position{line: 2271, col: 16, offset: 79967},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 155, col: 28, offset: 4808},
																	expr: &litMatcher{
																		pos:        position{line: 155, col: 29, offset: 4809},
																		val:        ":",
																		ignoreCase: false,
																		want:       "\":\"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 155, col: 33, offset: 4813},
																	label: "revision",
																	expr: &choiceExpr{
																		pos: position{line: 156, col: 9, offset: 4832},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 156, col: 10, offset: 4833},
																				run: (*parser).callonDocumentBlocks418,
																				expr: &seqExpr{
																					pos: position{line: 156, col: 10, offset: 4833},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 156, col: 10, offset: 4833},
																							label: "revnumber",
																							expr: &choiceExpr{
																								pos: position{line: 165, col: 27, offset: 5350},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 165, col: 27, offset: 5350},
																										run: (*parser).callonDocumentBlocks422,
																										expr: &seqExpr{
																											pos: position{line: 165, col: 27, offset: 5350},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 165, col: 27, offset: 5350},
																													val:        "v",
																													ignoreCase: true,
																													want:       "\"v\"i",
																												},
																												&actionExpr{
																													pos: position{line: 2263, col: 10, offset: 79843},
																													run: (*parser).callonDocumentBlocks425,
																													expr: &charClassMatcher{
																														pos:        position{line: 2263, col: 10, offset: 79843},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 165, col: 39, offset: 5362},
																													expr: &charClassMatcher{
																														pos:        position{line: 165, col: 39, offset: 5362},
																														val:        "[^:,\\r\\n]",
																														chars:      []rune{':', ',', '\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 167, col: 5, offset: 5410},
																										run: (*parser).callonDocumentBlocks429,
																										expr: &seqExpr{
																											pos: position{line: 167, col: 5, offset: 5410},
																											exprs: []interface{}{
																												&zeroOrOneExpr{
																													pos: position{line: 167, col: 5, offset: 5410},
																													expr: &litMatcher{
																														pos:        position{line: 167, col: 5, offset: 5410},
																														val:        "v",
																														ignoreCase: true,
																														want:       "\"v\"i",
																													},
																												},
																												&actionExpr{
																													pos: position{line: 2263, col: 10, offset: 79843},
																													run: (*parser).callonDocumentBlocks433,
																													expr: &charClassMatcher{
																														pos:        position{line: 2263, col: 10, offset: 79843},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 167, col: 18, offset: 5423},
																													expr: &charClassMatcher{
																														pos:        position{line: 167, col: 18, offset: 5423},
																														val:        "[^:,\\r\\n]",
																														chars:      []rune{':', ',', '\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 167, col: 29, offset: 5434},
																													expr: &choiceExpr{
																														pos: position{line: 2271, col: 10, offset: 79961},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2271, col: 10, offset: 79961},
																																val:        " ",
																																ignoreCase: false,
																																want:       "\" \"",
																															},
																															&actionExpr{
																																pos: position{line: 2271, col: 16, offset: 79967},
																																run: (*parser).callonDocumentBlocks440,
																																expr: &litMatcher{
																																	pos:        position{line: 2271, col: 16, offset: 79967},
																																	val:        "\t",
																																	ignoreCase: false,
																																	want:       "\"\\t\"",
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 167, col: 36, offset: 5441},
																													expr: &litMatcher{
																														pos:        position{line: 167, col: 37, offset: 5442},
																														val:        ",",
																														ignoreCase: false,
																														want:       "\",\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 156, col: 45, offset: 4868},
																							expr: &litMatcher{
																								pos:        position{line: 156, col: 45, offset: 4868},
																								val:        ",",
																								ignoreCase: false,
																								want:       "\",\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 156, col: 50, offset: 4873},
																							label: "revdate",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 156, col: 58, offset: 4881},
																								expr: &actionExpr{
																									pos: position{line: 171, col: 25, offset: 5506},
																									run: (*parser).callonDocumentBlocks448,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 171, col: 25, offset: 5506},
																										expr: &charClassMatcher{
																											pos:        position{line: 171, col: 25, offset: 5506},
																											val:        "[^:\\r\\n]",
																											chars:      []rune{':', '\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 156, col: 82, offset: 4905},
																							expr: &litMatcher{
																								pos:        position{line: 156, col: 82, offset: 4905},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 156, col: 87, offset: 4910},
																							label: "revremark",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 156, col: 97, offset: 4920},
																								expr: &actionExpr{
																									pos: position{line: 175, col: 27, offset: 5578},
																									run: (*parser).callonDocumentBlocks455,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 175, col: 27, offset: 5578},
																										expr: &charClassMatcher{
																											pos:        position{line: 175, col: 27, offset: 5578},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 158, col: 15, offset: 5038},
																				run: (*parser).callonDocumentBlocks458,
																				expr: &seqExpr{
																					pos: position{line: 158, col: 15, offset: 5038},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 158, col: 15, offset: 5038},
																							label: "revdate",
																							expr: &actionExpr{
																								pos: position{line: 171, col: 25, offset: 5506},
																								run: (*parser).callonDocumentBlocks461,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 171, col: 25, offset: 5506},
																									expr: &charClassMatcher{
																										pos:        position{line: 171, col: 25, offset: 5506},
																										val:        "[^:\\r\\n]",
																										chars:      []rune{':', '\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 158, col: 46, offset: 5069},
																							expr: &litMatcher{
																								pos:        position{line: 158, col: 46, offset: 5069},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 158, col: 51, offset: 5074},
																							label: "revremark",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 158, col: 61, offset: 5084},
																								expr: &actionExpr{
																									pos: position{line: 175, col: 27, offset: 5578},
																									run: (*parser).callonDocumentBlocks468,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 175, col: 27, offset: 5578},
																										expr: &charClassMatcher{
																											pos:        position{line: 175, col: 27, offset: 5578},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2279, col: 8, offset: 80059},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2275, col: 12, offset: 80019},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2275, col: 21, offset: 80028},
																			val:        "[\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&notExpr{
																			pos: position{line: 2277, col: 8, offset: 80048},
																			expr: &anyMatcher{
																				line: 2277, col: 9, offset: 80049,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 58, col: 53, offset: 1732},
							label: "blocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 61, offset: 1740},
								expr: &ruleRefExpr{
									pos:  position{line: 58, col: 61, offset: 1740},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 67, col: 1, offset: 1989},
			expr: &actionExpr{
				pos: position{line: 68, col: 5, offset: 2011},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 68, col: 5, offset: 2011},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 68, col: 5, offset: 2011},
							expr: &notExpr{
								pos: position{line: 2277, col: 8, offset: 80048},
								expr: &anyMatcher{
									line: 2277, col: 9, offset: 80049,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 69, col: 5, offset: 2020},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 69, col: 16, offset: 2031},
								expr: &ruleRefExpr{
									pos:  position{line: 69, col: 17, offset: 2032},
									name: "BlockAttributes",
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 70, col: 5, offset: 2054},
							run: (*parser).callonDocumentBlock9,
						},
						&labeledExpr{
							pos:   position{line: 74, col: 5, offset: 2136},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 75, col: 9, offset: 2152},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 75, col: 9, offset: 2152},
										name: "LabeledListItem",
									},
									&actionExpr{
										pos: position{line: 920, col: 5, offset: 29951},
										run: (*parser).callonDocumentBlock13,
										expr: &seqExpr{
											pos: position{line: 920, col: 5, offset: 29951},
											exprs: []interface{}{
												&notCodeExpr{
													pos: position{line: 920, col: 5, offset: 29951},
													run: (*parser).callonDocumentBlock15,
												},
												&labeledExpr{
													pos:   position{line: 923, col: 5, offset: 30081},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 929, col: 5, offset: 30339},
														run: (*parser).callonDocumentBlock17,
														expr: &seqExpr{
															pos: position{line: 929, col: 5, offset: 30339},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 929, col: 5, offset: 30339},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 929, col: 14, offset: 30348},
																		run: (*parser).callonDocumentBlock20,
																		expr: &seqExpr{
																			pos: position{line: 929, col: 14, offset: 30348},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 929, col: 14, offset: 30348},
																					label: "elements",
																					expr: &choiceExpr{
																						pos: position{line: 2225, col: 5, offset: 78563},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2225, col: 5, offset: 78563},
																								run: (*parser).callonDocumentBlock24,
																								expr: &seqExpr{
																									pos: position{line: 2225, col: 5, offset: 78563},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 2225, col: 5, offset: 78563},
																											expr: &charClassMatcher{
																												pos:        position{line: 2225, col: 5, offset: 78563},
																												val:        "[0-9\\pL]",
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&andExpr{
																											pos: position{line: 2225, col: 15, offset: 78573},
																											expr: &choiceExpr{
																												pos: position{line: 2225, col: 17, offset: 78575},
																												alternatives: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 2225, col: 17, offset: 78575},
																														val:        "[\\r\\n ,]]",
																														chars:      []rune{'\r', '\n', ' ', ',', ']'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2227, col: 9, offset: 78658},
																								run: (*parser).callonDocumentBlock33,
																								expr: &seqExpr{
																									pos: position{line: 2227, col: 9, offset: 78658},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 2227, col: 9, offset: 78658},
																											expr: &charClassMatcher{
																												pos:        position{line: 2227, col: 9, offset: 78658},
																												val:        "[0-9\\pL]",
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&oneOrMoreExpr{
																											pos: position{line: 2227, col: 19, offset: 78668},
																											expr: &seqExpr{
																												pos: position{line: 2227, col: 20, offset: 78669},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 2227, col: 20, offset: 78669},
																														val:        "[=*_`]",
																														chars:      []rune{'=', '*', '_', '`'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 2227, col: 27, offset: 78676},
																														expr: &charClassMatcher{
																															pos:        position{line: 2227, col: 27, offset: 78676},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 929, col: 28, offset: 30362},
																					expr: &charClassMatcher{
																						pos:        position{line: 929, col: 28, offset: 30362},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2279, col: 8, offset: 80059},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2275, col: 12, offset: 80019},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2275, col: 21, offset: 80028},
																			val:        "[\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&notExpr{
																			pos: position{line: 2277, col: 8, offset: 80048},
																			expr: &anyMatcher{
																				line: 2277, col: 9, offset: 80049,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 924, col: 5, offset: 30118},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 924, col: 16, offset: 30129},
														expr: &choiceExpr{
															pos: position{line: 924, col: 17, offset: 30130},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 1916, col: 22, offset: 68317},
																	run: (*parser).callonDocumentBlock52,
																	expr: &seqExpr{
																		pos: position{line: 1916, col: 22, offset: 68317},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1916, col: 22, offset: 68317},
																				expr: &seqExpr{
																					pos: position{line: 1902, col: 26, offset: 67906},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1902, col: 26, offset: 67906},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1902, col: 33, offset: 67913},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlock60,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1916, col: 45, offset: 68340},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1916, col: 50, offset: 68345},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 1920, col: 29, offset: 68473},
																					run: (*parser).callonDocumentBlock69,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 1920, col: 29, offset: 68473},
																						expr: &charClassMatcher{
																							pos:        position{line: 1920, col: 29, offset: 68473},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 903, col: 21, offset: 29486},
																	run: (*parser).callonDocumentBlock77,
																	expr: &seqExpr{
																		pos: position{line: 903, col: 21, offset: 29486},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 903, col: 21, offset: 29486},
																				expr: &choiceExpr{
																					pos: position{line: 1654, col: 19, offset: 59095},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 1654, col: 19, offset: 59095},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 1654, col: 19, offset: 59095},
																									expr: &charClassMatcher{
																										pos:        position{line: 2213, col: 13, offset: 78116},
																										val:        "[0-9\\pL]",
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2077, col: 26, offset: 73358},
																									val:        "....",
																									ignoreCase: false,
																									want:       "\"....\"",
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 1839, col: 25, offset: 65436},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1839, col: 25, offset: 65436},
																									val:        "```",
																									ignoreCase: false,
																									want:       "\"```\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1839, col: 31, offset: 65442},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonDocumentBlock90,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 1856, col: 26, offset: 66120},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1856, col: 26, offset: 66120},
																									val:        "----",
																									ignoreCase: false,
																									want:       "\"----\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1856, col: 33, offset: 66127},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonDocumentBlock102,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 1674, col: 26, offset: 59888},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1674, col: 26, offset: 59888},
																									val:        "====",
																									ignoreCase: false,
																									want:       "\"====\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1674, col: 33, offset: 59895},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonDocumentBlock114,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 1902, col: 26, offset: 67906},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1902, col: 26, offset: 67906},
																									val:        "////",
																									ignoreCase: false,
																									want:       "\"////\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1902, col: 33, offset: 67913},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonDocumentBlock126,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 1736, col: 24, offset: 61955},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1736, col: 24, offset: 61955},
																									val:        "____",
																									ignoreCase: false,
																									want:       "\"____\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1736, col: 31, offset: 61962},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonDocumentBlock138,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 1788, col: 26, offset: 63733},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1788, col: 26, offset: 63733},
																									val:        "****",
																									ignoreCase: false,
																									want:       "\"****\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1788, col: 33, offset: 63740},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonDocumentBlock150,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 1889, col: 30, offset: 67449},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1889, col: 30, offset: 67449},
																									val:        "++++",
																									ignoreCase: false,
																									want:       "\"++++\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1889, col: 37, offset: 67456},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonDocumentBlock162,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 904, col: 5, offset: 29507},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 914, col: 28, offset: 29807},
																					run: (*parser).callonDocumentBlock170,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 914, col: 28, offset: 29807},
																						expr: &charClassMatcher{
																							pos:        position{line: 914, col: 28, offset: 29807},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 904, col: 43, offset: 29545},
																				run: (*parser).callonDocumentBlock178,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2161, col: 14, offset: 76486},
										run: (*parser).callonDocumentBlock179,
										expr: &seqExpr{
											pos: position{line: 2161, col: 14, offset: 76486},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2161, col: 14, offset: 76486},
													expr: &notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2161, col: 19, offset: 76491},
													expr: &choiceExpr{
														pos: position{line: 2271, col: 10, offset: 79961},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2271, col: 10, offset: 79961},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2271, col: 16, offset: 79967},
																run: (*parser).callonDocumentBlock187,
																expr: &litMatcher{
																	pos:        position{line: 2271, col: 16, offset: 79967},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2279, col: 8, offset: 80059},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 492, col: 5, offset: 15613},
										run: (*parser).callonDocumentBlock194,
										expr: &seqExpr{
											pos: position{line: 492, col: 5, offset: 15613},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 492, col: 5, offset: 15613},
													label: "level",
													expr: &actionExpr{
														pos: position{line: 492, col: 12, offset: 15620},
														run: (*parser).callonDocumentBlock197,
														expr: &oneOrMoreExpr{
															pos: position{line: 492, col: 12, offset: 15620},
															expr: &litMatcher{
																pos:        position{line: 492, col: 13, offset: 15621},
																val:        "=",
																ignoreCase: false,
																want:       "\"=\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 496, col: 5, offset: 15712},
													run: (*parser).callonDocumentBlock200,
												},
												&oneOrMoreExpr{
													pos: position{line: 500, col: 5, offset: 15864},
													expr: &choiceExpr{
														pos: position{line: 2271, col: 10, offset: 79961},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2271, col: 10, offset: 79961},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2271, col: 16, offset: 79967},
																run: (*parser).callonDocumentBlock204,
																expr: &litMatcher{
																	pos:        position{line: 2271, col: 16, offset: 79967},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 500, col: 12, offset: 15871},
													label: "title",
													expr: &actionExpr{
														pos: position{line: 504, col: 18, offset: 16057},
														run: (*parser).callonDocumentBlock207,
														expr: &labeledExpr{
															pos:   position{line: 504, col: 18, offset: 16057},
															label: "elements",
															expr: &oneOrMoreExpr{
																pos: position{line: 504, col: 27, offset: 16066},
																expr: &seqExpr{
																	pos: position{line: 504, col: 28, offset: 16067},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 504, col: 28, offset: 16067},
																			expr: &choiceExpr{
																				pos: position{line: 2275, col: 12, offset: 80019},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 504, col: 37, offset: 16076},
																			expr: &actionExpr{
																				pos: position{line: 237, col: 20, offset: 7607},
																				run: (*parser).callonDocumentBlock216,
																				expr: &seqExpr{
																					pos: position{line: 237, col: 20, offset: 7607},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 237, col: 20, offset: 7607},
																							val:        "[[",
																							ignoreCase: false,
																							want:       "\"[[\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 237, col: 25, offset: 7612},
																							label: "id",
																							expr: &actionExpr{
																								pos: position{line: 2259, col: 7, offset: 79709},
																								run: (*parser).callonDocumentBlock220,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2259, col: 7, offset: 79709},
																									expr: &charClassMatcher{
																										pos:        position{line: 2259, col: 7, offset: 79709},
																										val:        "[^[]<>,]",
																										chars:      []rune{'[', ']', '<', '>', ','},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 237, col: 33, offset: 7620},
																							val:        "]]",
																							ignoreCase: false,
																							want:       "\"]]\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 237, col: 38, offset: 7625},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlock227,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 508, col: 17, offset: 16230},
																			run: (*parser).callonDocumentBlock229,
																			expr: &labeledExpr{
																				pos:   position{line: 508, col: 17, offset: 16230},
																				label: "element",
																				expr: &choiceExpr{
																					pos: position{line: 508, col: 26, offset: 16239},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2225, col: 5, offset: 78563},
																							run: (*parser).callonDocumentBlock232,
																							expr: &seqExpr{
																								pos: position{line: 2225, col: 5, offset: 78563},
																								exprs: []interface{}{
																									&oneOrMoreExpr{
																										pos: position{line: 2225, col: 5, offset: 78563},
																										expr: &charClassMatcher{
																											pos:        position{line: 2225, col: 5, offset: 78563},
																											val:        "[0-9\\pL]",
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 2225, col: 15, offset: 78573},
																										expr: &choiceExpr{
																											pos: position{line: 2225, col: 17, offset: 78575},
																											alternatives: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 2225, col: 17, offset: 78575},
																													val:        "[\\r\\n ,]]",
																													chars:      []rune{'\r', '\n', ' ', ',', ']'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&notExpr{
																													pos: position{line: 2277, col: 8, offset: 80048},
																													expr: &anyMatcher{
																														line: 2277, col: 9, offset: 80049,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2227, col: 9, offset: 78658},
																							run: (*parser).callonDocumentBlock241,
																							expr: &seqExpr{
																								pos: position{line: 2227, col: 9, offset: 78658},
																								exprs: []interface{}{
																									&oneOrMoreExpr{
																										pos: position{line: 2227, col: 9, offset: 78658},
																										expr: &charClassMatcher{
																											pos:        position{line: 2227, col: 9, offset: 78658},
																											val:        "[0-9\\pL]",
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 2227, col: 19, offset: 78668},
																										expr: &seqExpr{
																											pos: position{line: 2227, col: 20, offset: 78669},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 2227, col: 20, offset: 78669},
																													val:        "[=*_`]",
																													chars:      []rune{'=', '*', '_', '`'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 2227, col: 27, offset: 78676},
																													expr: &charClassMatcher{
																														pos:        position{line: 2227, col: 27, offset: 78676},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 995, col: 14, offset: 32701},
																							run: (*parser).callonDocumentBlock250,
																							expr: &seqExpr{
																								pos: position{line: 995, col: 14, offset: 32701},
																								exprs: []interface{}{
																									&choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonDocumentBlock254,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 995, col: 20, offset: 32707},
																										val:        "+",
																										ignoreCase: false,
																										want:       "\"+\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 995, col: 24, offset: 32711},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonDocumentBlock260,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&andExpr{
																										pos: position{line: 995, col: 31, offset: 32718},
																										expr: &choiceExpr{
																											pos: position{line: 2279, col: 8, offset: 80059},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2275, col: 12, offset: 80019},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2275, col: 21, offset: 80028},
																													val:        "[\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&notExpr{
																													pos: position{line: 2277, col: 8, offset: 80048},
																													expr: &anyMatcher{
																														line: 2277, col: 9, offset: 80049,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 510, col: 11, offset: 16299},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlock271,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 1940, col: 23, offset: 69003},
																							run: (*parser).callonDocumentBlock273,
																							expr: &seqExpr{
																								pos: position{line: 1940, col: 23, offset: 69003},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1940, col: 23, offset: 69003},
																										val:        "�",
																										ignoreCase: false,
																										want:       "\"�\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 1940, col: 32, offset: 69012},
																										label: "ref",
																										expr: &actionExpr{
																											pos: position{line: 1940, col: 37, offset: 69017},
																											run: (*parser).callonDocumentBlock277,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1940, col: 37, offset: 69017},
																												expr: &charClassMatcher{
																													pos:        position{line: 1940, col: 37, offset: 69017},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 1940, col: 76, offset: 69056},
																										val:        "�",
																										ignoreCase: false,
																										want:       "\"�\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2237, col: 12, offset: 79050},
																							run: (*parser).callonDocumentBlock281,
																							expr: &charClassMatcher{
																								pos:        position{line: 2237, col: 12, offset: 79050},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 500, col: 34, offset: 15893},
													label: "id",
													expr: &zeroOrMoreExpr{
														pos: position{line: 500, col: 38, offset: 15897},
														expr: &actionExpr{
															pos: position{line: 237, col: 20, offset: 7607},
															run: (*parser).callonDocumentBlock285,
															expr: &seqExpr{
																pos: position{line: 237, col: 20, offset: 7607},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 237, col: 20, offset: 7607},
																		val:        "[[",
																		ignoreCase: false,
																		want:       "\"[[\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 237, col: 25, offset: 7612},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2259, col: 7, offset: 79709},
																			run: (*parser).callonDocumentBlock289,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2259, col: 7, offset: 79709},
																				expr: &charClassMatcher{
																					pos:        position{line: 2259, col: 7, offset: 79709},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 237, col: 33, offset: 7620},
																		val:        "]]",
																		ignoreCase: false,
																		want:       "\"]]\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 237, col: 38, offset: 7625},
																		expr: &choiceExpr{
																			pos: position{line: 2271, col: 10, offset: 79961},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2271, col: 10, offset: 79961},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2271, col: 16, offset: 79967},
																					run: (*parser).callonDocumentBlock296,
																					expr: &litMatcher{
																						pos:        position{line: 2271, col: 16, offset: 79967},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2279, col: 8, offset: 80059},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2316},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2341},
										name: "ImageBlock",
									},
									&actionExpr{
										pos: position{line: 1916, col: 22, offset: 68317},
										run: (*parser).callonDocumentBlock305,
										expr: &seqExpr{
											pos: position{line: 1916, col: 22, offset: 68317},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1916, col: 22, offset: 68317},
													expr: &seqExpr{
														pos: position{line: 1902, col: 26, offset: 67906},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1902, col: 26, offset: 67906},
																val:        "////",
																ignoreCase: false,
																want:       "\"////\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1902, col: 33, offset: 67913},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonDocumentBlock313,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1916, col: 45, offset: 68340},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&labeledExpr{
													pos:   position{line: 1916, col: 50, offset: 68345},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1920, col: 29, offset: 68473},
														run: (*parser).callonDocumentBlock322,
														expr: &zeroOrMoreExpr{
															pos: position{line: 1920, col: 29, offset: 68473},
															expr: &charClassMatcher{
																pos:        position{line: 1920, col: 29, offset: 68473},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2279, col: 8, offset: 80059},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2390},
										name: "Table",
									},
									&actionExpr{
										pos: position{line: 1632, col: 18, offset: 58455},
										run: (*parser).callonDocumentBlock331,
										expr: &seqExpr{
											pos: position{line: 1632, col: 18, offset: 58455},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 1632, col: 19, offset: 58456},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 1632, col: 19, offset: 58456},
															val:        "***",
															ignoreCase: false,
															want:       "\"***\"",
														},
														&litMatcher{
															pos:        position{line: 1632, col: 27, offset: 58464},
															val:        "* * *",
															ignoreCase: false,
															want:       "\"* * *\"",
														},
														&litMatcher{
															pos:        position{line: 1632, col: 37, offset: 58474},
															val:        "---",
															ignoreCase: false,
															want:       "\"---\"",
														},
														&litMatcher{
															pos:        position{line: 1632, col: 45, offset: 58482},
															val:        "- - -",
															ignoreCase: false,
															want:       "\"- - -\"",
														},
														&litMatcher{
															pos:        position{line: 1632, col: 55, offset: 58492},
															val:        "___",
															ignoreCase: false,
															want:       "\"___\"",
														},
														&litMatcher{
															pos:        position{line: 1632, col: 63, offset: 58500},
															val:        "_ _ _",
															ignoreCase: false,
															want:       "\"_ _ _\"",
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2279, col: 8, offset: 80059},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 84, col: 11, offset: 2430},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 85, col: 11, offset: 2456},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 86, col: 11, offset: 2485},
										name: "CalloutListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 87, col: 11, offset: 2511},
										name: "ContinuedListItemElement",
									},
									&actionExpr{
										pos: position{line: 2116, col: 5, offset: 74964},
										run: (*parser).callonDocumentBlock349,
										expr: &seqExpr{
											pos: position{line: 2116, col: 5, offset: 74964},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2116, col: 5, offset: 74964},
													run: (*parser).callonDocumentBlock351,
												},
												&labeledExpr{
													pos:   position{line: 2120, col: 5, offset: 75117},
													label: "lines",
													expr: &oneOrMoreExpr{
														pos: position{line: 2120, col: 11, offset: 75123},
														expr: &actionExpr{
															pos: position{line: 2128, col: 25, offset: 75365},
															run: (*parser).callonDocumentBlock354,
															expr: &seqExpr{
																pos: position{line: 2128, col: 25, offset: 75365},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 2128, col: 25, offset: 75365},
																		expr: &actionExpr{
																			pos: position{line: 2161, col: 14, offset: 76486},
																			run: (*parser).callonDocumentBlock357,
																			expr: &seqExpr{
																				pos: position{line: 2161, col: 14, offset: 76486},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 2161, col: 14, offset: 76486},
																						expr: &notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 2161, col: 19, offset: 76491},
																						expr: &choiceExpr{
																							pos: position{line: 2271, col: 10, offset: 79961},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2271, col: 10, offset: 79961},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2271, col: 16, offset: 79967},
																									run: (*parser).callonDocumentBlock365,
																									expr: &litMatcher{
																										pos:        position{line: 2271, col: 16, offset: 79967},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2279, col: 8, offset: 80059},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2275, col: 12, offset: 80019},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2275, col: 21, offset: 80028},
																								val:        "[\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2128, col: 36, offset: 75376},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2128, col: 45, offset: 75385},
																			run: (*parser).callonDocumentBlock373,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2128, col: 45, offset: 75385},
																				expr: &charClassMatcher{
																					pos:        position{line: 2128, col: 45, offset: 75385},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2279, col: 8, offset: 80059},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2275, col: 12, offset: 80019},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2275, col: 21, offset: 80028},
																				val:        "[\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&notExpr{
																				pos: position{line: 2277, col: 8, offset: 80048},
																				expr: &anyMatcher{
																					line: 2277, col: 9, offset: 80049,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2080, col: 31, offset: 73460},
										run: (*parser).callonDocumentBlock381,
										expr: &labeledExpr{
											pos:   position{line: 2080, col: 31, offset: 73460},
											label: "lines",
											expr: &actionExpr{
												pos: position{line: 2086, col: 5, offset: 73756},
												run: (*parser).callonDocumentBlock383,
												expr: &seqExpr{
													pos: position{line: 2086, col: 5, offset: 73756},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 2086, col: 5, offset: 73756},
															label: "firstLine",
															expr: &actionExpr{
																pos: position{line: 2091, col: 35, offset: 73958},
																run: (*parser).callonDocumentBlock386,
																expr: &seqExpr{
																	pos: position{line: 2091, col: 35, offset: 73958},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 2091, col: 35, offset: 73958},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 2091, col: 41, offset: 73964},
																				run: (*parser).callonDocumentBlock389,
																				expr: &seqExpr{
																					pos: position{line: 2091, col: 41, offset: 73964},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 2091, col: 41, offset: 73964},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlock394,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2091, col: 48, offset: 73971},
																							expr: &charClassMatcher{
																								pos:        position{line: 2091, col: 48, offset: 73971},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2279, col: 8, offset: 80059},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2275, col: 12, offset: 80019},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2275, col: 21, offset: 80028},
																					val:        "[\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&notExpr{
																					pos: position{line: 2277, col: 8, offset: 80048},
																					expr: &anyMatcher{
																						line: 2277, col: 9, offset: 80049,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2087, col: 5, offset: 73803},
															label: "otherLines",
															expr: &zeroOrMoreExpr{
																pos: position{line: 2087, col: 16, offset: 73814},
																expr: &actionExpr{
																	pos: position{line: 2128, col: 25, offset: 75365},
																	run: (*parser).callonDocumentBlock405,
																	expr: &seqExpr{
																		pos: position{line: 2128, col: 25, offset: 75365},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2128, col: 25, offset: 75365},
																				expr: &actionExpr{
																					pos: position{line: 2161, col: 14, offset: 76486},
																					run: (*parser).callonDocumentBlock408,
																					expr: &seqExpr{
																						pos: position{line: 2161, col: 14, offset: 76486},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 2161, col: 14, offset: 76486},
																								expr: &notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2161, col: 19, offset: 76491},
																								expr: &choiceExpr{
																									pos: position{line: 2271, col: 10, offset: 79961},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2271, col: 10, offset: 79961},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2271, col: 16, offset: 79967},
																											run: (*parser).callonDocumentBlock416,
																											expr: &litMatcher{
																												pos:        position{line: 2271, col: 16, offset: 79967},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2279, col: 8, offset: 80059},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2275, col: 12, offset: 80019},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2275, col: 21, offset: 80028},
																										val:        "[\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2128, col: 36, offset: 75376},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 2128, col: 45, offset: 75385},
																					run: (*parser).callonDocumentBlock424,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2128, col: 45, offset: 75385},
																						expr: &charClassMatcher{
																							pos:        position{line: 2128, col: 45, offset: 75385},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2098, col: 39, offset: 74215},
										run: (*parser).callonDocumentBlock432,
										expr: &seqExpr{
											pos: position{line: 2098, col: 39, offset: 74215},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2077, col: 26, offset: 73358},
													val:        "....",
													ignoreCase: false,
													want:       "\"....\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2098, col: 61, offset: 74237},
													expr: &choiceExpr{
														pos: position{line: 2271, col: 10, offset: 79961},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2271, col: 10, offset: 79961},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2271, col: 16, offset: 79967},
																run: (*parser).callonDocumentBlock438,
																expr: &litMatcher{
																	pos:        position{line: 2271, col: 16, offset: 79967},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2275, col: 12, offset: 80019},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2098, col: 76, offset: 74252},
													label: "lines",
													expr: &actionExpr{
														pos: position{line: 2103, col: 44, offset: 74559},
														run: (*parser).callonDocumentBlock444,
														expr: &labeledExpr{
															pos:   position{line: 2103, col: 44, offset: 74559},
															label: "lines",
															expr: &zeroOrMoreExpr{
																pos: position{line: 2103, col: 50, offset: 74565},
																expr: &actionExpr{
																	pos: position{line: 2108, col: 5, offset: 74705},
																	run: (*parser).callonDocumentBlock447,
																	expr: &seqExpr{
																		pos: position{line: 2108, col: 5, offset: 74705},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 2108, col: 5, offset: 74705},
																				label: "line",
																				expr: &actionExpr{
																					pos: position{line: 2108, col: 11, offset: 74711},
																					run: (*parser).callonDocumentBlock450,
																					expr: &seqExpr{
																						pos: position{line: 2108, col: 11, offset: 74711},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 2108, col: 11, offset: 74711},
																								expr: &litMatcher{
																									pos:        position{line: 2077, col: 26, offset: 73358},
																									val:        "....",
																									ignoreCase: false,
																									want:       "\"....\"",
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2108, col: 34, offset: 74734},
																								expr: &charClassMatcher{
																									pos:        position{line: 2108, col: 34, offset: 74734},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2098, col: 125, offset: 74301},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 2098, col: 126, offset: 74302},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2077, col: 26, offset: 73358},
																	val:        "....",
																	ignoreCase: false,
																	want:       "\"....\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2098, col: 148, offset: 74324},
																	expr: &choiceExpr{
																		pos: position{line: 2271, col: 10, offset: 79961},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2271, col: 10, offset: 79961},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2271, col: 16, offset: 79967},
																				run: (*parser).callonDocumentBlock467,
																				expr: &litMatcher{
																					pos:        position{line: 2271, col: 16, offset: 79967},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2279, col: 8, offset: 80059},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2275, col: 12, offset: 80019},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2275, col: 21, offset: 80028},
																			val:        "[\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&notExpr{
																			pos: position{line: 2277, col: 8, offset: 80048},
																			expr: &anyMatcher{
																				line: 2277, col: 9, offset: 80049,
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 182, col: 25, offset: 5755},
										run: (*parser).callonDocumentBlock476,
										expr: &seqExpr{
											pos: position{line: 182, col: 25, offset: 5755},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 182, col: 25, offset: 5755},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 182, col: 29, offset: 5759},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 190, col: 18, offset: 6118},
														run: (*parser).callonDocumentBlock480,
														expr: &seqExpr{
															pos: position{line: 190, col: 18, offset: 6118},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 190, col: 18, offset: 6118},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 190, col: 28, offset: 6128},
																	expr: &charClassMatcher{
																		pos:        position{line: 190, col: 29, offset: 6129},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 182, col: 50, offset: 5780},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 183, col: 9, offset: 5793},
													label: "value",
													expr: &zeroOrOneExpr{
														pos: position{line: 183, col: 15, offset: 5799},
														expr: &actionExpr{
															pos: position{line: 194, col: 30, offset: 6206},
															run: (*parser).callonDocumentBlock488,
															expr: &seqExpr{
																pos: position{line: 194, col: 30, offset: 6206},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 194, col: 30, offset: 6206},
																		expr: &choiceExpr{
																			pos: position{line: 2271, col: 10, offset: 79961},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2271, col: 10, offset: 79961},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2271, col: 16, offset: 79967},
																					run: (*parser).callonDocumentBlock493,
																					expr: &litMatcher{
																						pos:        position{line: 2271, col: 16, offset: 79967},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 194, col: 37, offset: 6213},
																		label: "elements",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 194, col: 46, offset: 6222},
																			expr: &choiceExpr{
																				pos: position{line: 195, col: 5, offset: 6228},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 195, col: 6, offset: 6229},
																						run: (*parser).callonDocumentBlock498,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 195, col: 6, offset: 6229},
																							expr: &charClassMatcher{
																								pos:        position{line: 195, col: 6, offset: 6229},
																								val:        "[^\\r\\n{]",
																								chars:      []rune{'\r', '\n', '{'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 221, col: 25, offset: 7126},
																						run: (*parser).callonDocumentBlock501,
																						expr: &seqExpr{
																							pos: position{line: 221, col: 25, offset: 7126},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 221, col: 25, offset: 7126},
																									val:        "{counter:",
																									ignoreCase: false,
																									want:       "\"{counter:\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 221, col: 37, offset: 7138},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 190, col: 18, offset: 6118},
																										run: (*parser).callonDocumentBlock505,
																										expr: &seqExpr{
																											pos: position{line: 190, col: 18, offset: 6118},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 190, col: 18, offset: 6118},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 190, col: 28, offset: 6128},
																													expr: &charClassMatcher{
																														pos:        position{line: 190, col: 29, offset: 6129},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 221, col: 56, offset: 7157},
																									label: "start",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 221, col: 62, offset: 7163},
																										expr: &actionExpr{
																											pos: position{line: 229, col: 17, offset: 7426},
																											run: (*parser).callonDocumentBlock512,
																											expr: &seqExpr{
																												pos: position{line: 229, col: 17, offset: 7426},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 229, col: 17, offset: 7426},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 229, col: 21, offset: 7430},
																														label: "start",
																														expr: &choiceExpr{
																															pos: position{line: 229, col: 28, offset: 7437},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 229, col: 28, offset: 7437},
																																	run: (*parser).callonDocumentBlock517,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 229, col: 28, offset: 7437},
																																		val:        "[A-Za-z]",
																																		ranges:     []rune{'A', 'Z', 'a', 'z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 231, col: 9, offset: 7491},
																																	run: (*parser).callonDocumentBlock519,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 231, col: 9, offset: 7491},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 231, col: 9, offset: 7491},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 221, col: 78, offset: 7179},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 225, col: 25, offset: 7281},
																						run: (*parser).callonDocumentBlock523,
																						expr: &seqExpr{
																							pos: position{line: 225, col: 25, offset: 7281},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 225, col: 25, offset: 7281},
																									val:        "{counter2:",
																									ignoreCase: false,
																									want:       "\"{counter2:\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 225, col: 38, offset: 7294},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 190, col: 18, offset: 6118},
																										run: (*parser).callonDocumentBlock527,
																										expr: &seqExpr{
																											pos: position{line: 190, col: 18, offset: 6118},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 190, col: 18, offset: 6118},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 190, col: 28, offset: 6128},
																													expr: &charClassMatcher{
																														pos:        position{line: 190, col: 29, offset: 6129},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 225, col: 57, offset: 7313},
																									label: "start",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 225, col: 63, offset: 7319},
																										expr: &actionExpr{
																											pos: position{line: 229, col: 17, offset: 7426},
																											run: (*parser).callonDocumentBlock534,
																											expr: &seqExpr{
																												pos: position{line: 229, col: 17, offset: 7426},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 229, col: 17, offset: 7426},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 229, col: 21, offset: 7430},
																														label: "start",
																														expr: &choiceExpr{
																															pos: position{line: 229, col: 28, offset: 7437},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 229, col: 28, offset: 7437},
																																	run: (*parser).callonDocumentBlock539,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 229, col: 28, offset: 7437},
																																		val:        "[A-Za-z]",
																																		ranges:     []rune{'A', 'Z', 'a', 'z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 231, col: 9, offset: 7491},
																																	run: (*parser).callonDocumentBlock541,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 231, col: 9, offset: 7491},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 231, col: 9, offset: 7491},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 225, col: 79, offset: 7335},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 214, col: 12, offset: 6782},
																						run: (*parser).callonDocumentBlock545,
																						expr: &seqExpr{
																							pos: position{line: 214, col: 12, offset: 6782},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 214, col: 12, offset: 6782},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 214, col: 16, offset: 6786},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 190, col: 18, offset: 6118},
																										run: (*parser).callonDocumentBlock549,
																										expr: &seqExpr{
																											pos: position{line: 190, col: 18, offset: 6118},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 190, col: 18, offset: 6118},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 190, col: 28, offset: 6128},
																													expr: &charClassMatcher{
																														pos:        position{line: 190, col: 29, offset: 6129},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 214, col: 35, offset: 6805},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 199, col: 6, offset: 6337},
																						run: (*parser).callonDocumentBlock555,
																						expr: &litMatcher{
																							pos:        position{line: 199, col: 6, offset: 6337},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2279, col: 8, offset: 80059},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 206, col: 19, offset: 6522},
										run: (*parser).callonDocumentBlock562,
										expr: &seqExpr{
											pos: position{line: 206, col: 19, offset: 6522},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 206, col: 19, offset: 6522},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 206, col: 24, offset: 6527},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 190, col: 18, offset: 6118},
														run: (*parser).callonDocumentBlock566,
														expr: &seqExpr{
															pos: position{line: 190, col: 18, offset: 6118},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 190, col: 18, offset: 6118},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 190, col: 28, offset: 6128},
																	expr: &charClassMatcher{
																		pos:        position{line: 190, col: 29, offset: 6129},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 206, col: 45, offset: 6548},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 206, col: 49, offset: 6552},
													expr: &choiceExpr{
														pos: position{line: 2271, col: 10, offset: 79961},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2271, col: 10, offset: 79961},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2271, col: 16, offset: 79967},
																run: (*parser).callonDocumentBlock575,
																expr: &litMatcher{
																	pos:        position{line: 2271, col: 16, offset: 79967},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2279, col: 8, offset: 80059},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 208, col: 5, offset: 6619},
										run: (*parser).callonDocumentBlock582,
										expr: &seqExpr{
											pos: position{line: 208, col: 5, offset: 6619},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 208, col: 5, offset: 6619},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 208, col: 9, offset: 6623},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 190, col: 18, offset: 6118},
														run: (*parser).callonDocumentBlock586,
														expr: &seqExpr{
															pos: position{line: 190, col: 18, offset: 6118},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 190, col: 18, offset: 6118},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 190, col: 28, offset: 6128},
																	expr: &charClassMatcher{
																		pos:        position{line: 190, col: 29, offset: 6129},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 208, col: 30, offset: 6644},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 208, col: 35, offset: 6649},
													expr: &choiceExpr{
														pos: position{line: 2271, col: 10, offset: 79961},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2271, col: 10, offset: 79961},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2271, col: 16, offset: 79967},
																run: (*parser).callonDocumentBlock595,
																expr: &litMatcher{
																	pos:        position{line: 2271, col: 16, offset: 79967},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2279, col: 8, offset: 80059},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 519, col: 31, offset: 16527},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 519, col: 31, offset: 16527},
												val:        "toc::[]",
												ignoreCase: false,
												want:       "\"toc::[]\"",
											},
											&choiceExpr{
												pos: position{line: 2279, col: 8, offset: 80059},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 92, col: 11, offset: 2665},
										name: "UserMacroBlock",
									},
									&actionExpr{
										pos: position{line: 879, col: 6, offset: 28334},
										run: (*parser).callonDocumentBlock610,
										expr: &seqExpr{
											pos: position{line: 879, col: 6, offset: 28334},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 879, col: 6, offset: 28334},
													label: "t",
													expr: &choiceExpr{
														pos: position{line: 856, col: 19, offset: 27732},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 856, col: 19, offset: 27732},
																run: (*parser).callonDocumentBlock614,
																expr: &litMatcher{
																	pos:        position{line: 856, col: 19, offset: 27732},
																	val:        "TIP",
																	ignoreCase: false,
																	want:       "\"TIP\"",
																},
															},
															&actionExpr{
																pos: position{line: 858, col: 5, offset: 27770},
																run: (*parser).callonDocumentBlock616,
																expr: &litMatcher{
																	pos:        position{line: 858, col: 5, offset: 27770},
																	val:        "NOTE",
																	ignoreCase: false,
																	want:       "\"NOTE\"",
																},
															},
															&actionExpr{
																pos: position{line: 860, col: 5, offset: 27810},
																run: (*parser).callonDocumentBlock618,
																expr: &litMatcher{
																	pos:        position{line: 860, col: 5, offset: 27810},
																	val:        "IMPORTANT",
																	ignoreCase: false,
																	want:       "\"IMPORTANT\"",
																},
															},
															&actionExpr{
																pos: position{line: 862, col: 5, offset: 27860},
																run: (*parser).callonDocumentBlock620,
																expr: &litMatcher{
																	pos:        position{line: 862, col: 5, offset: 27860},
																	val:        "WARNING",
																	ignoreCase: false,
																	want:       "\"WARNING\"",
																},
															},
															&actionExpr{
																pos: position{line: 864, col: 5, offset: 27906},
																run: (*parser).callonDocumentBlock622,
																expr: &litMatcher{
																	pos:        position{line: 864, col: 5, offset: 27906},
																	val:        "CAUTION",
																	ignoreCase: false,
																	want:       "\"CAUTION\"",
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 879, col: 25, offset: 28353},
													val:        ": ",
													ignoreCase: false,
													want:       "\": \"",
												},
												&labeledExpr{
													pos:   position{line: 879, col: 30, offset: 28358},
													label: "lines",
													expr: &oneOrMoreExpr{
														pos: position{line: 879, col: 36, offset: 28364},
														expr: &choiceExpr{
															pos: position{line: 879, col: 37, offset: 28365},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 1916, col: 22, offset: 68317},
																	run: (*parser).callonDocumentBlock628,
																	expr: &seqExpr{
																		pos: position{line: 1916, col: 22, offset: 68317},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1916, col: 22, offset: 68317},
																				expr: &seqExpr{
																					pos: position{line: 1902, col: 26, offset: 67906},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1902, col: 26, offset: 67906},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1902, col: 33, offset: 67913},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlock636,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1916, col: 45, offset: 68340},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1916, col: 50, offset: 68345},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 1920, col: 29, offset: 68473},
																					run: (*parser).callonDocumentBlock645,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 1920, col: 29, offset: 68473},
																						expr: &charClassMatcher{
																							pos:        position{line: 1920, col: 29, offset: 68473},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 903, col: 21, offset: 29486},
																	run: (*parser).callonDocumentBlock653,
																	expr: &seqExpr{
																		pos: position{line: 903, col: 21, offset: 29486},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 903, col: 21, offset: 29486},
																				expr: &choiceExpr{
																					pos: position{line: 1654, col: 19, offset: 59095},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 1654, col: 19, offset: 59095},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 1654, col: 19, offset: 59095},
																									expr: &charClassMatcher{
																										pos:        position{line: 2213, col: 13, offset: 78116},
																										val:        "[0-9\\pL]",
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2077, col: 26, offset: 73358},
																									val:        "....",
																									ignoreCase: false,
																									want:       "\"....\"",
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 1839, col: 25, offset: 65436},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1839, col: 25, offset: 65436},
																									val:        "```",
																									ignoreCase: false,
																									want:       "\"```\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1839, col: 31, offset: 65442},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonDocumentBlock666,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 1856, col: 26, offset: 66120},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1856, col: 26, offset: 66120},
																									val:        "----",
																									ignoreCase: false,
																									want:       "\"----\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1856, col: 33, offset: 66127},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonDocumentBlock678,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 1674, col: 26, offset: 59888},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1674, col: 26, offset: 59888},
																									val:        "====",
																									ignoreCase: false,
																									want:       "\"====\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1674, col: 33, offset: 59895},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonDocumentBlock690,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 1902, col: 26, offset: 67906},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1902, col: 26, offset: 67906},
																									val:        "////",
																									ignoreCase: false,
																									want:       "\"////\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1902, col: 33, offset: 67913},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonDocumentBlock702,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 1736, col: 24, offset: 61955},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1736, col: 24, offset: 61955},
																									val:        "____",
																									ignoreCase: false,
																									want:       "\"____\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1736, col: 31, offset: 61962},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonDocumentBlock714,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 1788, col: 26, offset: 63733},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1788, col: 26, offset: 63733},
																									val:        "****",
																									ignoreCase: false,
																									want:       "\"****\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1788, col: 33, offset: 63740},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonDocumentBlock726,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 1889, col: 30, offset: 67449},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1889, col: 30, offset: 67449},
																									val:        "++++",
																									ignoreCase: false,
																									want:       "\"++++\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1889, col: 37, offset: 67456},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonDocumentBlock738,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 904, col: 5, offset: 29507},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 914, col: 28, offset: 29807},
																					run: (*parser).callonDocumentBlock746,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 914, col: 28, offset: 29807},
																						expr: &charClassMatcher{
																							pos:        position{line: 914, col: 28, offset: 29807},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 904, col: 43, offset: 29545},
																				run: (*parser).callonDocumentBlock754,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 884, col: 5, offset: 28625},
										run: (*parser).callonDocumentBlock755,
										expr: &seqExpr{
											pos: position{line: 884, col: 5, offset: 28625},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 884, col: 5, offset: 28625},
													val:        "> ",
													ignoreCase: false,
													want:       "\"> \"",
												},
												&labeledExpr{
													pos:   position{line: 884, col: 10, offset: 28630},
													label: "content",
													expr: &oneOrMoreExpr{
														pos: position{line: 899, col: 33, offset: 29398},
														expr: &actionExpr{
															pos: position{line: 899, col: 34, offset: 29399},
															run: (*parser).callonDocumentBlock760,
															expr: &seqExpr{
																pos: position{line: 899, col: 34, offset: 29399},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 899, col: 34, offset: 29399},
																		expr: &actionExpr{
																			pos: position{line: 2161, col: 14, offset: 76486},
																			run: (*parser).callonDocumentBlock763,
																			expr: &seqExpr{
																				pos: position{line: 2161, col: 14, offset: 76486},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 2161, col: 14, offset: 76486},
																						expr: &notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 2161, col: 19, offset: 76491},
																						expr: &choiceExpr{
																							pos: position{line: 2271, col: 10, offset: 79961},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2271, col: 10, offset: 79961},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2271, col: 16, offset: 79967},
																									run: (*parser).callonDocumentBlock771,
																									expr: &litMatcher{
																										pos:        position{line: 2271, col: 16, offset: 79967},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2279, col: 8, offset: 80059},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2275, col: 12, offset: 80019},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2275, col: 21, offset: 80028},
																								val:        "[\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 899, col: 45, offset: 29410},
																		expr: &litMatcher{
																			pos:        position{line: 899, col: 45, offset: 29410},
																			val:        "> ",
																			ignoreCase: false,
																			want:       "\"> \"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 899, col: 51, offset: 29416},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 42, col: 12, offset: 1077},
																			run: (*parser).callonDocumentBlock781,
																			expr: &seqExpr{
																				pos: position{line: 42, col: 12, offset: 1077},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						expr: &notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 42, col: 17, offset: 1082},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 42, col: 26, offset: 1091},
																							run: (*parser).callonDocumentBlock787,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 42, col: 26, offset: 1091},
																								expr: &charClassMatcher{
																									pos:        position{line: 42, col: 26, offset: 1091},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2279, col: 8, offset: 80059},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2275, col: 12, offset: 80019},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2275, col: 21, offset: 80028},
																								val:        "[\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 888, col: 5, offset: 28831},
										run: (*parser).callonDocumentBlock795,
										expr: &seqExpr{
											pos: position{line: 888, col: 5, offset: 28831},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 888, col: 5, offset: 28831},
													run: (*parser).callonDocumentBlock797,
												},
												&labeledExpr{
													pos:   position{line: 891, col: 7, offset: 29028},
													label: "content",
													expr: &oneOrMoreExpr{
														pos: position{line: 891, col: 15, offset: 29036},
														expr: &actionExpr{
															pos: position{line: 903, col: 21, offset: 29486},
															run: (*parser).callonDocumentBlock800,
															expr: &seqExpr{
																pos: position{line: 903, col: 21, offset: 29486},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 903, col: 21, offset: 29486},
																		expr: &choiceExpr{
																			pos: position{line: 1654, col: 19, offset: 59095},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 1654, col: 19, offset: 59095},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 1654, col: 19, offset: 59095},
																							expr: &charClassMatcher{
																								pos:        position{line: 2213, col: 13, offset: 78116},
																								val:        "[0-9\\pL]",
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2077, col: 26, offset: 73358},
																							val:        "....",
																							ignoreCase: false,
																							want:       "\"....\"",
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 1839, col: 25, offset: 65436},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1839, col: 25, offset: 65436},
																							val:        "```",
																							ignoreCase: false,
																							want:       "\"```\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1839, col: 31, offset: 65442},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlock813,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 1856, col: 26, offset: 66120},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1856, col: 26, offset: 66120},
																							val:        "----",
																							ignoreCase: false,
																							want:       "\"----\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1856, col: 33, offset: 66127},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlock825,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 1674, col: 26, offset: 59888},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1674, col: 26, offset: 59888},
																							val:        "====",
																							ignoreCase: false,
																							want:       "\"====\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1674, col: 33, offset: 59895},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlock837,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 1902, col: 26, offset: 67906},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1902, col: 26, offset: 67906},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1902, col: 33, offset: 67913},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlock849,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 1736, col: 24, offset: 61955},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1736, col: 24, offset: 61955},
																							val:        "____",
																							ignoreCase: false,
																							want:       "\"____\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1736, col: 31, offset: 61962},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlock861,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 1788, col: 26, offset: 63733},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1788, col: 26, offset: 63733},
																							val:        "****",
																							ignoreCase: false,
																							want:       "\"****\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1788, col: 33, offset: 63740},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlock873,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 1889, col: 30, offset: 67449},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1889, col: 30, offset: 67449},
																							val:        "++++",
																							ignoreCase: false,
																							want:       "\"++++\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1889, col: 37, offset: 67456},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlock885,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 904, col: 5, offset: 29507},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 914, col: 28, offset: 29807},
																			run: (*parser).callonDocumentBlock893,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 914, col: 28, offset: 29807},
																				expr: &charClassMatcher{
																					pos:        position{line: 914, col: 28, offset: 29807},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2279, col: 8, offset: 80059},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2275, col: 12, offset: 80019},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2275, col: 21, offset: 80028},
																				val:        "[\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&notExpr{
																				pos: position{line: 2277, col: 8, offset: 80048},
																				expr: &anyMatcher{
																					line: 2277, col: 9, offset: 80049,
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 904, col: 43, offset: 29545},
																		run: (*parser).callonDocumentBlock901,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 895, col: 5, offset: 29222},
										run: (*parser).callonDocumentBlock902,
										expr: &labeledExpr{
											pos:   position{line: 895, col: 5, offset: 29222},
											label: "lines",
											expr: &oneOrMoreExpr{
												pos: position{line: 895, col: 11, offset: 29228},
												expr: &choiceExpr{
													pos: position{line: 895, col: 12, offset: 29229},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 1916, col: 22, offset: 68317},
															run: (*parser).callonDocumentBlock906,
															expr: &seqExpr{
																pos: position{line: 1916, col: 22, offset: 68317},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1916, col: 22, offset: 68317},
																		expr: &seqExpr{
																			pos: position{line: 1902, col: 26, offset: 67906},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1902, col: 26, offset: 67906},
																					val:        "////",
																					ignoreCase: false,
																					want:       "\"////\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1902, col: 33, offset: 67913},
																					expr: &choiceExpr{
																						pos: position{line: 2271, col: 10, offset: 79961},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2271, col: 10, offset: 79961},
																								val:        " ",
																								ignoreCase: false,
																								want:       "\" \"",
																							},
																							&actionExpr{
																								pos: position{line: 2271, col: 16, offset: 79967},
																								run: (*parser).callonDocumentBlock914,
																								expr: &litMatcher{
																									pos:        position{line: 2271, col: 16, offset: 79967},
																									val:        "\t",
																									ignoreCase: false,
																									want:       "\"\\t\"",
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2279, col: 8, offset: 80059},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2275, col: 12, offset: 80019},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2275, col: 21, offset: 80028},
																							val:        "[\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1916, col: 45, offset: 68340},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1916, col: 50, offset: 68345},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1920, col: 29, offset: 68473},
																			run: (*parser).callonDocumentBlock923,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 1920, col: 29, offset: 68473},
																				expr: &charClassMatcher{
																					pos:        position{line: 1920, col: 29, offset: 68473},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2279, col: 8, offset: 80059},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2275, col: 12, offset: 80019},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2275, col: 21, offset: 80028},
																				val:        "[\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&notExpr{
																				pos: position{line: 2277, col: 8, offset: 80048},
																				expr: &anyMatcher{
																					line: 2277, col: 9, offset: 80049,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 903, col: 21, offset: 29486},
															run: (*parser).callonDocumentBlock931,
															expr: &seqExpr{
																pos: position{line: 903, col: 21, offset: 29486},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 903, col: 21, offset: 29486},
																		expr: &choiceExpr{
																			pos: position{line: 1654, col: 19, offset: 59095},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 1654, col: 19, offset: 59095},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 1654, col: 19, offset: 59095},
																							expr: &charClassMatcher{
																								pos:        position{line: 2213, col: 13, offset: 78116},
																								val:        "[0-9\\pL]",
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2077, col: 26, offset: 73358},
																							val:        "....",
																							ignoreCase: false,
																							want:       "\"....\"",
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 1839, col: 25, offset: 65436},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1839, col: 25, offset: 65436},
																							val:        "```",
																							ignoreCase: false,
																							want:       "\"```\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1839, col: 31, offset: 65442},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlock944,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 1856, col: 26, offset: 66120},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1856, col: 26, offset: 66120},
																							val:        "----",
																							ignoreCase: false,
																							want:       "\"----\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1856, col: 33, offset: 66127},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlock956,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 1674, col: 26, offset: 59888},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1674, col: 26, offset: 59888},
																							val:        "====",
																							ignoreCase: false,
																							want:       "\"====\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1674, col: 33, offset: 59895},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlock968,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 1902, col: 26, offset: 67906},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1902, col: 26, offset: 67906},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1902, col: 33, offset: 67913},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlock980,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 1736, col: 24, offset: 61955},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1736, col: 24, offset: 61955},
																							val:        "____",
																							ignoreCase: false,
																							want:       "\"____\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1736, col: 31, offset: 61962},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlock992,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 1788, col: 26, offset: 63733},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1788, col: 26, offset: 63733},
																							val:        "****",
																							ignoreCase: false,
																							want:       "\"****\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1788, col: 33, offset: 63740},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlock1004,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 1889, col: 30, offset: 67449},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1889, col: 30, offset: 67449},
																							val:        "++++",
																							ignoreCase: false,
																							want:       "\"++++\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1889, col: 37, offset: 67456},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDocumentBlock1016,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 904, col: 5, offset: 29507},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 914, col: 28, offset: 29807},
																			run: (*parser).callonDocumentBlock1024,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 914, col: 28, offset: 29807},
																				expr: &charClassMatcher{
																					pos:        position{line: 914, col: 28, offset: 29807},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2279, col: 8, offset: 80059},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2275, col: 12, offset: 80019},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2275, col: 21, offset: 80028},
																				val:        "[\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&notExpr{
																				pos: position{line: 2277, col: 8, offset: 80048},
																				expr: &anyMatcher{
																					line: 2277, col: 9, offset: 80049,
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 904, col: 43, offset: 29545},
																		run: (*parser).callonDocumentBlock1032,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 94, col: 11, offset: 2713},
										run: (*parser).callonDocumentBlock1033,
										expr: &notExpr{
											pos: position{line: 2277, col: 8, offset: 80048},
											expr: &anyMatcher{
												line: 2277, col: 9, offset: 80049,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 248, col: 1, offset: 8058},
			expr: &actionExpr{
				pos: position{line: 249, col: 5, offset: 8082},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 249, col: 5, offset: 8082},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 249, col: 16, offset: 8093},
						expr: &choiceExpr{
							pos: position{line: 251, col: 9, offset: 8160},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 251, col: 10, offset: 8161},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 251, col: 10, offset: 8161},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 251, col: 10, offset: 8161},
												label: "anchor",
												expr: &actionExpr{
													pos: position{line: 275, col: 4, offset: 8843},
													run: (*parser).callonBlockAttributes8,
													expr: &seqExpr{
														pos: position{line: 275, col: 4, offset: 8843},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 275, col: 4, offset: 8843},
																val:        "[[",
																ignoreCase: false,
																want:       "\"[[\"",
															},
															&labeledExpr{
																pos:   position{line: 276, col: 5, offset: 8853},
																label: "id",
																expr: &actionExpr{
																	pos: position{line: 277, col: 9, offset: 8866},
																	run: (*parser).callonBlockAttributes12,
																	expr: &labeledExpr{
																		pos:   position{line: 277, col: 9, offset: 8866},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 277, col: 18, offset: 8875},
																			expr: &choiceExpr{
																				pos: position{line: 278, col: 13, offset: 8889},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 278, col: 14, offset: 8890},
																						run: (*parser).callonBlockAttributes16,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 278, col: 14, offset: 8890},
																							expr: &charClassMatcher{
																								pos:        position{line: 278, col: 14, offset: 8890},
																								val:        "[^=\\r\\n�{]]",
																								chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1940, col: 23, offset: 69003},
																						run: (*parser).callonBlockAttributes19,
																						expr: &seqExpr{
																							pos: position{line: 1940, col: 23, offset: 69003},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1940, col: 23, offset: 69003},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 1940, col: 32, offset: 69012},
																									label: "ref",
																									expr: &actionExpr{
																										pos: position{line: 1940, col: 37, offset: 69017},
																										run: (*parser).callonBlockAttributes23,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1940, col: 37, offset: 69017},
																											expr: &charClassMatcher{
																												pos:        position{line: 1940, col: 37, offset: 69017},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1940, col: 76, offset: 69056},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 214, col: 12, offset: 6782},
																						run: (*parser).callonBlockAttributes27,
																						expr: &seqExpr{
																							pos: position{line: 214, col: 12, offset: 6782},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 214, col: 12, offset: 6782},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 214, col: 16, offset: 6786},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 190, col: 18, offset: 6118},
																										run: (*parser).callonBlockAttributes31,
																										expr: &seqExpr{
																											pos: position{line: 190, col: 18, offset: 6118},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 190, col: 18, offset: 6118},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 190, col: 28, offset: 6128},
																													expr: &charClassMatcher{
																														pos:        position{line: 190, col: 29, offset: 6129},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 214, col: 35, offset: 6805},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 283, col: 14, offset: 9113},
																						run: (*parser).callonBlockAttributes37,
																						expr: &litMatcher{
																							pos:        position{line: 283, col: 14, offset: 9113},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 289, col: 5, offset: 9299},
																val:        "]]",
																ignoreCase: false,
																want:       "\"]]\"",
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 251, col: 35, offset: 8186},
												expr: &choiceExpr{
													pos: position{line: 2271, col: 10, offset: 79961},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2271, col: 10, offset: 79961},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2271, col: 16, offset: 79967},
															run: (*parser).callonBlockAttributes43,
															expr: &litMatcher{
																pos:        position{line: 2271, col: 16, offset: 79967},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2275, col: 12, offset: 80019},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 255, col: 12, offset: 8311},
									run: (*parser).callonBlockAttributes48,
									expr: &seqExpr{
										pos: position{line: 255, col: 12, offset: 8311},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 255, col: 12, offset: 8311},
												label: "title",
												expr: &actionExpr{
													pos: position{line: 294, col: 19, offset: 9418},
													run: (*parser).callonBlockAttributes51,
													expr: &seqExpr{
														pos: position{line: 294, col: 19, offset: 9418},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 294, col: 19, offset: 9418},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&labeledExpr{
																pos:   position{line: 294, col: 23, offset: 9422},
																label: "title",
																expr: &actionExpr{
																	pos: position{line: 295, col: 5, offset: 9434},
																	run: (*parser).callonBlockAttributes55,
																	expr: &seqExpr{
																		pos: position{line: 295, col: 5, offset: 9434},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 295, col: 5, offset: 9434},
																				expr: &charClassMatcher{
																					pos:        position{line: 295, col: 6, offset: 9435},
																					val:        "[. ]",
																					chars:      []rune{'.', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 296, col: 5, offset: 9547},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 296, col: 14, offset: 9556},
																					expr: &choiceExpr{
																						pos: position{line: 297, col: 9, offset: 9566},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 297, col: 10, offset: 9567},
																								run: (*parser).callonBlockAttributes62,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 297, col: 10, offset: 9567},
																									expr: &charClassMatcher{
																										pos:        position{line: 297, col: 10, offset: 9567},
																										val:        "[^\\r\\n�{]",
																										chars:      []rune{'\r', '\n', '�', '{'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1940, col: 23, offset: 69003},
																								run: (*parser).callonBlockAttributes65,
																								expr: &seqExpr{
																									pos: position{line: 1940, col: 23, offset: 69003},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 1940, col: 23, offset: 69003},
																											val:        "�",
																											ignoreCase: false,
																											want:       "\"�\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 1940, col: 32, offset: 69012},
																											label: "ref",
																											expr: &actionExpr{
																												pos: position{line: 1940, col: 37, offset: 69017},
																												run: (*parser).callonBlockAttributes69,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1940, col: 37, offset: 69017},
																													expr: &charClassMatcher{
																														pos:        position{line: 1940, col: 37, offset: 69017},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1940, col: 76, offset: 69056},
																											val:        "�",
																											ignoreCase: false,
																											want:       "\"�\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 214, col: 12, offset: 6782},
																								run: (*parser).callonBlockAttributes73,
																								expr: &seqExpr{
																									pos: position{line: 214, col: 12, offset: 6782},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 214, col: 12, offset: 6782},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 214, col: 16, offset: 6786},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 190, col: 18, offset: 6118},
																												run: (*parser).callonBlockAttributes77,
																												expr: &seqExpr{
																													pos: position{line: 190, col: 18, offset: 6118},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 190, col: 18, offset: 6118},
																															val:        "[_0-9\\pL]",
																															chars:      []rune{'_'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 190, col: 28, offset: 6128},
																															expr: &charClassMatcher{
																																pos:        position{line: 190, col: 29, offset: 6129},
																																val:        "[-0-9\\pL]",
																																chars:      []rune{'-'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 214, col: 35, offset: 6805},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 302, col: 10, offset: 9713},
																								run: (*parser).callonBlockAttributes83,
																								expr: &litMatcher{
																									pos:        position{line: 302, col: 10, offset: 9713},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 255, col: 35, offset: 8334},
												expr: &choiceExpr{
													pos: position{line: 2271, col: 10, offset: 79961},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2271, col: 10, offset: 79961},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2271, col: 16, offset: 79967},
															run: (*parser).callonBlockAttributes88,
															expr: &litMatcher{
																pos:        position{line: 2271, col: 16, offset: 79967},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2275, col: 12, offset: 80019},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 259, col: 12, offset: 8429},
									run: (*parser).callonBlockAttributes93,
									expr: &seqExpr{
										pos: position{line: 259, col: 12, offset: 8429},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 259, col: 12, offset: 8429},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 259, col: 24, offset: 8441},
													name: "LongHandAttributes",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 259, col: 44, offset: 8461},
												expr: &choiceExpr{
													pos: position{line: 2271, col: 10, offset: 79961},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2271, col: 10, offset: 79961},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2271, col: 16, offset: 79967},
															run: (*parser).callonBlockAttributes100,
															expr: &litMatcher{
																pos:        position{line: 2271, col: 16, offset: 79967},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2275, col: 12, offset: 80019},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 266, col: 1, offset: 8608},
			expr: &actionExpr{
				pos: position{line: 267, col: 5, offset: 8632},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 267, col: 5, offset: 8632},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 267, col: 5, offset: 8632},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 268, col: 5, offset: 8640},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 268, col: 16, offset: 8651},
								expr: &choiceExpr{
									pos: position{line: 268, col: 17, offset: 8652},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 268, col: 17, offset: 8652},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 268, col: 37, offset: 8672},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 269, col: 5, offset: 8693},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 313, col: 1, offset: 10113},
			expr: &actionExpr{
				pos: position{line: 314, col: 5, offset: 10139},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 314, col: 5, offset: 10139},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 314, col: 5, offset: 10139},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 314, col: 9, offset: 10143},
							expr: &litMatcher{
								pos:        position{line: 314, col: 10, offset: 10144},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 316, col: 5, offset: 10314},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 316, col: 31, offset: 10340},
								expr: &ruleRefExpr{
									pos:  position{line: 316, col: 32, offset: 10341},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 317, col: 5, offset: 10373},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 317, col: 21, offset: 10389},
								expr: &choiceExpr{
									pos: position{line: 317, col: 22, offset: 10390},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 317, col: 22, offset: 10390},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 317, col: 44, offset: 10412},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 318, col: 5, offset: 10433},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 329, col: 1, offset: 10893},
			expr: &actionExpr{
				pos: position{line: 330, col: 5, offset: 10927},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 330, col: 5, offset: 10927},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 330, col: 5, offset: 10927},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 330, col: 10, offset: 10932},
								expr: &ruleRefExpr{
									pos:  position{line: 331, col: 9, offset: 10942},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 333, col: 5, offset: 10972},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 333, col: 12, offset: 10979},
								expr: &choiceExpr{
									pos: position{line: 334, col: 9, offset: 10990},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 334, col: 9, offset: 10990},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 335, col: 11, offset: 11022},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 336, col: 11, offset: 11057},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 337, col: 8, offset: 11090},
							expr: &seqExpr{
								pos: position{line: 337, col: 9, offset: 11091},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 337, col: 9, offset: 11091},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 337, col: 13, offset: 11095},
										expr: &choiceExpr{
											pos: position{line: 2271, col: 10, offset: 79961},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2271, col: 10, offset: 79961},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
												&actionExpr{
													pos: position{line: 2271, col: 16, offset: 79967},
													run: (*parser).callonFirstPositionalAttributes18,
													expr: &litMatcher{
														pos:        position{line: 2271, col: 16, offset: 79967},
														val:        "\t",
														ignoreCase: false,
														want:       "\"\\t\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 338, col: 5, offset: 11109},
							run: (*parser).callonFirstPositionalAttributes20,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 352, col: 1, offset: 11466},
			expr: &actionExpr{
				pos: position{line: 352, col: 25, offset: 11490},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 352, col: 25, offset: 11490},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 352, col: 25, offset: 11490},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 352, col: 29, offset: 11494},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 352, col: 33, offset: 11498},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 356, col: 1, offset: 11564},
			expr: &actionExpr{
				pos: position{line: 356, col: 23, offset: 11586},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 356, col: 23, offset: 11586},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 356, col: 30, offset: 11593},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 361, col: 1, offset: 11711},
			expr: &actionExpr{
				pos: position{line: 361, col: 30, offset: 11740},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 361, col: 30, offset: 11740},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 361, col: 30, offset: 11740},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 361, col: 34, offset: 11744},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 361, col: 40, offset: 11750},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 366, col: 1, offset: 11864},
			expr: &actionExpr{
				pos: position{line: 366, col: 29, offset: 11892},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 366, col: 29, offset: 11892},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 366, col: 29, offset: 11892},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 366, col: 33, offset: 11896},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 366, col: 41, offset: 11904},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 371, col: 1, offset: 12009},
			expr: &choiceExpr{
				pos: position{line: 372, col: 5, offset: 12041},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 372, col: 5, offset: 12041},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 373, col: 7, offset: 12075},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 374, col: 7, offset: 12109},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 374, col: 7, offset: 12109},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 374, col: 7, offset: 12109},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 374, col: 16, offset: 12118},
										expr: &choiceExpr{
											pos: position{line: 377, col: 5, offset: 12288},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 377, col: 6, offset: 12289},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 377, col: 6, offset: 12289},
														expr: &charClassMatcher{
															pos:        position{line: 377, col: 6, offset: 12289},
															val:        "[^,=.%# \\r\\n�{]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 380, col: 5, offset: 12383},
													name: "QuotedText",
												},
												&actionExpr{
													pos: position{line: 1940, col: 23, offset: 69003},
													run: (*parser).callonShortHandAttributeValue13,
													expr: &seqExpr{
														pos: position{line: 1940, col: 23, offset: 69003},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1940, col: 23, offset: 69003},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
															&labeledExpr{
																pos:   position{line: 1940, col: 32, offset: 69012},
																label: "ref",
																expr: &actionExpr{
																	pos: position{line: 1940, col: 37, offset: 69017},
																	run: (*parser).callonShortHandAttributeValue17,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1940, col: 37, offset: 69017},
																		expr: &charClassMatcher{
																			pos:        position{line: 1940, col: 37, offset: 69017},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1940, col: 76, offset: 69056},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 214, col: 12, offset: 6782},
													run: (*parser).callonShortHandAttributeValue21,
													expr: &seqExpr{
														pos: position{line: 214, col: 12, offset: 6782},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 214, col: 12, offset: 6782},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
															&labeledExpr{
																pos:   position{line: 214, col: 16, offset: 6786},
																label: "name",
																expr: &actionExpr{
																	pos: position{line: 190, col: 18, offset: 6118},
																	run: (*parser).callonShortHandAttributeValue25,
																	expr: &seqExpr{
																		pos: position{line: 190, col: 18, offset: 6118},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 190, col: 18, offset: 6118},
																				val:        "[_0-9\\pL]",
																				chars:      []rune{'_'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 190, col: 28, offset: 6128},
																				expr: &charClassMatcher{
																					pos:        position{line: 190, col: 29, offset: 6129},
																					val:        "[-0-9\\pL]",
																					chars:      []rune{'-'},
																					ranges:     []rune{'0', '9'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 214, col: 35, offset: 6805},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 383, col: 6, offset: 12440},
													run: (*parser).callonShortHandAttributeValue31,
													expr: &litMatcher{
														pos:        position{line: 383, col: 6, offset: 12440},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 385, col: 10, offset: 12510},
									expr: &charClassMatcher{
										pos:        position{line: 385, col: 11, offset: 12511},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 389, col: 1, offset: 12587},
			expr: &choiceExpr{
				pos: position{line: 389, col: 24, offset: 12610},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 390, col: 5, offset: 12616},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 390, col: 5, offset: 12616},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 390, col: 5, offset: 12616},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 390, col: 12, offset: 12623},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 390, col: 29, offset: 12640},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 390, col: 29, offset: 12640},
											expr: &seqExpr{
												pos: position{line: 390, col: 30, offset: 12641},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 390, col: 30, offset: 12641},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 390, col: 34, offset: 12645},
														expr: &choiceExpr{
															pos: position{line: 2271, col: 10, offset: 79961},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2271, col: 10, offset: 79961},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2271, col: 16, offset: 79967},
																	run: (*parser).callonPositionalAttribute13,
																	expr: &litMatcher{
																		pos:        position{line: 2271, col: 16, offset: 79967},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 390, col: 45, offset: 12656},
											expr: &litMatcher{
												pos:        position{line: 390, col: 46, offset: 12657},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 395, col: 6, offset: 12894},
						run: (*parser).callonPositionalAttribute17,
						expr: &seqExpr{
							pos: position{line: 395, col: 6, offset: 12894},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 395, col: 6, offset: 12894},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 395, col: 13, offset: 12901},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 395, col: 13, offset: 12901},
												expr: &choiceExpr{
													pos: position{line: 2271, col: 10, offset: 79961},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2271, col: 10, offset: 79961},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2271, col: 16, offset: 79967},
															run: (*parser).callonPositionalAttribute24,
															expr: &litMatcher{
																pos:        position{line: 2271, col: 16, offset: 79967},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 395, col: 21, offset: 12909},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 395, col: 22, offset: 12910},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 395, col: 22, offset: 12910},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 395, col: 26, offset: 12914},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonPositionalAttribute32,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 395, col: 36, offset: 12924},
														expr: &litMatcher{
															pos:        position{line: 395, col: 37, offset: 12925},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 396, col: 5, offset: 12935},
									run: (*parser).callonPositionalAttribute36,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 407, col: 1, offset: 13248},
			expr: &actionExpr{
				pos: position{line: 407, col: 19, offset: 13266},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 407, col: 19, offset: 13266},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 407, col: 19, offset: 13266},
							label: "key",
							expr: &actionExpr{
								pos: position{line: 412, col: 22, offset: 13566},
								run: (*parser).callonNamedAttribute4,
								expr: &seqExpr{
									pos: position{line: 412, col: 22, offset: 13566},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 412, col: 22, offset: 13566},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonNamedAttribute9,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 412, col: 29, offset: 13573},
											expr: &charClassMatcher{
												pos:        position{line: 412, col: 29, offset: 13573},
												val:        "[^\\r\\n=,]]",
												chars:      []rune{'\r', '\n', '=', ',', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 412, col: 42, offset: 13586},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonNamedAttribute16,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 407, col: 43, offset: 13290},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 407, col: 47, offset: 13294},
							expr: &choiceExpr{
								pos: position{line: 2271, col: 10, offset: 79961},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2271, col: 10, offset: 79961},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2271, col: 16, offset: 79967},
										run: (*parser).callonNamedAttribute22,
										expr: &litMatcher{
											pos:        position{line: 2271, col: 16, offset: 79967},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 407, col: 54, offset: 13301},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 407, col: 61, offset: 13308},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 407, col: 77, offset: 13324},
							expr: &seqExpr{
								pos: position{line: 407, col: 78, offset: 13325},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 407, col: 78, offset: 13325},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 407, col: 82, offset: 13329},
										expr: &choiceExpr{
											pos: position{line: 2271, col: 10, offset: 79961},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2271, col: 10, offset: 79961},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
												&actionExpr{
													pos: position{line: 2271, col: 16, offset: 79967},
													run: (*parser).callonNamedAttribute32,
													expr: &litMatcher{
														pos:        position{line: 2271, col: 16, offset: 79967},
														val:        "\t",
														ignoreCase: false,
														want:       "\"\\t\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 416, col: 1, offset: 13648},
			expr: &actionExpr{
				pos: position{line: 417, col: 5, offset: 13671},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 417, col: 5, offset: 13671},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 417, col: 5, offset: 13671},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 418, col: 9, offset: 13687},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 418, col: 9, offset: 13687},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 419, col: 11, offset: 13725},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 420, col: 11, offset: 13763},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 422, col: 5, offset: 13797},
							expr: &notExpr{
								pos: position{line: 422, col: 7, offset: 13799},
								expr: &seqExpr{
									pos: position{line: 422, col: 9, offset: 13801},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 422, col: 9, offset: 13801},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonAttributeValue14,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 422, col: 16, offset: 13808},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 426, col: 1, offset: 13849},
			expr: &actionExpr{
				pos: position{line: 427, col: 5, offset: 13884},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 427, col: 5, offset: 13884},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 427, col: 5, offset: 13884},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 428, col: 5, offset: 13893},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 428, col: 14, offset: 13902},
								expr: &choiceExpr{
									pos: position{line: 429, col: 9, offset: 13912},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 429, col: 9, offset: 13912},
											name: "QuotedText",
										},
										&actionExpr{
											pos: position{line: 430, col: 12, offset: 13935},
											run: (*parser).callonSingleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 430, col: 12, offset: 13935},
												expr: &charClassMatcher{
													pos:        position{line: 430, col: 12, offset: 13935},
													val:        "[^\\\\r\\n�\\\\{]",
													chars:      []rune{'\'', '\r', '\n', '�', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&actionExpr{
											pos: position{line: 1940, col: 23, offset: 69003},
											run: (*parser).callonSingleQuotedAttributeValue11,
											expr: &seqExpr{
												pos: position{line: 1940, col: 23, offset: 69003},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1940, col: 23, offset: 69003},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 1940, col: 32, offset: 69012},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 1940, col: 37, offset: 69017},
															run: (*parser).callonSingleQuotedAttributeValue15,
															expr: &oneOrMoreExpr{
																pos: position{line: 1940, col: 37, offset: 69017},
																expr: &charClassMatcher{
																	pos:        position{line: 1940, col: 37, offset: 69017},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1940, col: 76, offset: 69056},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 214, col: 12, offset: 6782},
											run: (*parser).callonSingleQuotedAttributeValue19,
											expr: &seqExpr{
												pos: position{line: 214, col: 12, offset: 6782},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 214, col: 12, offset: 6782},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
													&labeledExpr{
														pos:   position{line: 214, col: 16, offset: 6786},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 190, col: 18, offset: 6118},
															run: (*parser).callonSingleQuotedAttributeValue23,
															expr: &seqExpr{
																pos: position{line: 190, col: 18, offset: 6118},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 190, col: 18, offset: 6118},
																		val:        "[_0-9\\pL]",
																		chars:      []rune{'_'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 190, col: 28, offset: 6128},
																		expr: &charClassMatcher{
																			pos:        position{line: 190, col: 29, offset: 6129},
																			val:        "[-0-9\\pL]",
																			chars:      []rune{'-'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 214, col: 35, offset: 6805},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 435, col: 12, offset: 14129},
											run: (*parser).callonSingleQuotedAttributeValue29,
											expr: &litMatcher{
												pos:        position{line: 435, col: 12, offset: 14129},
												val:        "\\'",
												ignoreCase: false,
												want:       "\"\\\\'\"",
											},
										},
										&litMatcher{
											pos:        position{line: 438, col: 11, offset: 14221},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
										&actionExpr{
											pos: position{line: 438, col: 17, offset: 14227},
											run: (*parser).callonSingleQuotedAttributeValue32,
											expr: &litMatcher{
												pos:        position{line: 438, col: 17, offset: 14227},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 442, col: 5, offset: 14316},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 446, col: 1, offset: 14372},
			expr: &actionExpr{
				pos: position{line: 447, col: 5, offset: 14407},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 447, col: 5, offset: 14407},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 447, col: 5, offset: 14407},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 448, col: 5, offset: 14417},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 448, col: 14, offset: 14426},
								expr: &choiceExpr{
									pos: position{line: 449, col: 9, offset: 14436},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 449, col: 9, offset: 14436},
											name: "QuotedText",
										},
										&actionExpr{
											pos: position{line: 450, col: 12, offset: 14459},
											run: (*parser).callonDoubleQuotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 450, col: 12, offset: 14459},
												expr: &charClassMatcher{
													pos:        position{line: 450, col: 12, offset: 14459},
													val:        "[^\\r\\n�\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&actionExpr{
											pos: position{line: 1940, col: 23, offset: 69003},
											run: (*parser).callonDoubleQuotedAttributeValue11,
											expr: &seqExpr{
												pos: position{line: 1940, col: 23, offset: 69003},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1940, col: 23, offset: 69003},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 1940, col: 32, offset: 69012},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 1940, col: 37, offset: 69017},
															run: (*parser).callonDoubleQuotedAttributeValue15,
															expr: &oneOrMoreExpr{
																pos: position{line: 1940, col: 37, offset: 69017},
																expr: &charClassMatcher{
																	pos:        position{line: 1940, col: 37, offset: 69017},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1940, col: 76, offset: 69056},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 214, col: 12, offset: 6782},
											run: (*parser).callonDoubleQuotedAttributeValue19,
											expr: &seqExpr{
												pos: position{line: 214, col: 12, offset: 6782},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 214, col: 12, offset: 6782},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
													&labeledExpr{
														pos:   position{line: 214, col: 16, offset: 6786},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 190, col: 18, offset: 6118},
															run: (*parser).callonDoubleQuotedAttributeValue23,
															expr: &seqExpr{
																pos: position{line: 190, col: 18, offset: 6118},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 190, col: 18, offset: 6118},
																		val:        "[_0-9\\pL]",
																		chars:      []rune{'_'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 190, col: 28, offset: 6128},
																		expr: &charClassMatcher{
																			pos:        position{line: 190, col: 29, offset: 6129},
																			val:        "[-0-9\\pL]",
																			chars:      []rune{'-'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 214, col: 35, offset: 6805},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 455, col: 12, offset: 14653},
											run: (*parser).callonDoubleQuotedAttributeValue29,
											expr: &litMatcher{
												pos:        position{line: 455, col: 12, offset: 14653},
												val:        "\\\"",
												ignoreCase: false,
												want:       "\"\\\\\\\"\"",
											},
										},
										&litMatcher{
											pos:        position{line: 458, col: 11, offset: 14745},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
										&actionExpr{
											pos: position{line: 458, col: 17, offset: 14751},
											run: (*parser).callonDoubleQuotedAttributeValue32,
											expr: &litMatcher{
												pos:        position{line: 458, col: 17, offset: 14751},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 462, col: 5, offset: 14840},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 467, col: 1, offset: 14975},
			expr: &actionExpr{
				pos: position{line: 468, col: 5, offset: 15006},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 468, col: 5, offset: 15006},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 468, col: 5, offset: 15006},
							expr: &choiceExpr{
								pos: position{line: 2271, col: 10, offset: 79961},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2271, col: 10, offset: 79961},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2271, col: 16, offset: 79967},
										run: (*parser).callonUnquotedAttributeValue6,
										expr: &litMatcher{
											pos:        position{line: 2271, col: 16, offset: 79967},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 469, col: 5, offset: 15017},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 469, col: 14, offset: 15026},
								expr: &choiceExpr{
									pos: position{line: 470, col: 9, offset: 15036},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 470, col: 9, offset: 15036},
											name: "QuotedText",
										},
										&actionExpr{
											pos: position{line: 471, col: 12, offset: 15058},
											run: (*parser).callonUnquotedAttributeValue12,
											expr: &oneOrMoreExpr{
												pos: position{line: 471, col: 12, offset: 15058},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 12, offset: 15058},
													val:        "[^,=\\r\\n�{]]",
													chars:      []rune{',', '=', '\r', '\n', '�', '{', ']'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&actionExpr{
											pos: position{line: 1940, col: 23, offset: 69003},
											run: (*parser).callonUnquotedAttributeValue15,
											expr: &seqExpr{
												pos: position{line: 1940, col: 23, offset: 69003},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1940, col: 23, offset: 69003},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 1940, col: 32, offset: 69012},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 1940, col: 37, offset: 69017},
															run: (*parser).callonUnquotedAttributeValue19,
															expr: &oneOrMoreExpr{
																pos: position{line: 1940, col: 37, offset: 69017},
																expr: &charClassMatcher{
																	pos:        position{line: 1940, col: 37, offset: 69017},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1940, col: 76, offset: 69056},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 214, col: 12, offset: 6782},
											run: (*parser).callonUnquotedAttributeValue23,
											expr: &seqExpr{
												pos: position{line: 214, col: 12, offset: 6782},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 214, col: 12, offset: 6782},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
													&labeledExpr{
														pos:   position{line: 214, col: 16, offset: 6786},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 190, col: 18, offset: 6118},
															run: (*parser).callonUnquotedAttributeValue27,
															expr: &seqExpr{
																pos: position{line: 190, col: 18, offset: 6118},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 190, col: 18, offset: 6118},
																		val:        "[_0-9\\pL]",
																		chars:      []rune{'_'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 190, col: 28, offset: 6128},
																		expr: &charClassMatcher{
																			pos:        position{line: 190, col: 29, offset: 6129},
																			val:        "[-0-9\\pL]",
																			chars:      []rune{'-'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 214, col: 35, offset: 6805},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 476, col: 12, offset: 15208},
											run: (*parser).callonUnquotedAttributeValue33,
											expr: &litMatcher{
												pos:        position{line: 476, col: 12, offset: 15208},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 480, col: 5, offset: 15296},
							run: (*parser).callonUnquotedAttributeValue35,
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 524, col: 1, offset: 16648},
			expr: &actionExpr{
				pos: position{line: 525, col: 5, offset: 16671},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 525, col: 5, offset: 16671},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 525, col: 5, offset: 16671},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 548, col: 18, offset: 17418},
								run: (*parser).callonUserMacroBlock4,
								expr: &oneOrMoreExpr{
									pos: position{line: 548, col: 19, offset: 17419},
									expr: &charClassMatcher{
										pos:        position{line: 548, col: 19, offset: 17419},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 526, col: 5, offset: 16697},
							run: (*parser).callonUserMacroBlock7,
						},
						&litMatcher{
							pos:        position{line: 530, col: 5, offset: 16837},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 531, col: 5, offset: 16847},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 552, col: 19, offset: 17486},
								run: (*parser).callonUserMacroBlock10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 552, col: 19, offset: 17486},
									expr: &charClassMatcher{
										pos:        position{line: 552, col: 19, offset: 17486},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 532, col: 5, offset: 16875},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 23, offset: 16893},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 536, col: 1, offset: 17024},
			expr: &actionExpr{
				pos: position{line: 537, col: 5, offset: 17048},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 537, col: 5, offset: 17048},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 537, col: 5, offset: 17048},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 548, col: 18, offset: 17418},
								run: (*parser).callonInlineUserMacro4,
								expr: &oneOrMoreExpr{
									pos: position{line: 548, col: 19, offset: 17419},
									expr: &charClassMatcher{
										pos:        position{line: 548, col: 19, offset: 17419},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 538, col: 5, offset: 17074},
							run: (*parser).callonInlineUserMacro7,
						},
						&litMatcher{
							pos:        position{line: 542, col: 5, offset: 17214},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 5, offset: 17223},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 552, col: 19, offset: 17486},
								run: (*parser).callonInlineUserMacro10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 552, col: 19, offset: 17486},
									expr: &charClassMatcher{
										pos:        position{line: 552, col: 19, offset: 17486},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 544, col: 5, offset: 17251},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 544, col: 23, offset: 17269},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 559, col: 1, offset: 17645},
			expr: &actionExpr{
				pos: position{line: 560, col: 5, offset: 17667},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 560, col: 5, offset: 17667},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 560, col: 5, offset: 17667},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 561, col: 9, offset: 17682},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 561, col: 9, offset: 17682},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 561, col: 9, offset: 17682},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 562, col: 9, offset: 17703},
											label: "path",
											expr: &actionExpr{
												pos: position{line: 2241, col: 17, offset: 79131},
												run: (*parser).callonFileInclusion8,
												expr: &labeledExpr{
													pos:   position{line: 2241, col: 17, offset: 79131},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 2241, col: 22, offset: 79136},
														expr: &choiceExpr{
															pos: position{line: 2241, col: 23, offset: 79137},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2253, col: 13, offset: 79512},
																	run: (*parser).callonFileInclusion12,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2253, col: 13, offset: 79512},
																		expr: &charClassMatcher{
																			pos:        position{line: 2253, col: 14, offset: 79513},
																			val:        "[^\\r\\n[]� ]",
																			chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1940, col: 23, offset: 69003},
																	run: (*parser).callonFileInclusion15,
																	expr: &seqExpr{
																		pos: position{line: 1940, col: 23, offset: 69003},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1940, col: 23, offset: 69003},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1940, col: 32, offset: 69012},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 1940, col: 37, offset: 69017},
																					run: (*parser).callonFileInclusion19,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1940, col: 37, offset: 69017},
																						expr: &charClassMatcher{
																							pos:        position{line: 1940, col: 37, offset: 69017},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1940, col: 76, offset: 69056},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 563, col: 9, offset: 17732},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 563, col: 27, offset: 17750},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 567, col: 5, offset: 17910},
							expr: &choiceExpr{
								pos: position{line: 2271, col: 10, offset: 79961},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2271, col: 10, offset: 79961},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2271, col: 16, offset: 79967},
										run: (*parser).callonFileInclusion28,
										expr: &litMatcher{
											pos:        position{line: 2271, col: 16, offset: 79967},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2279, col: 8, offset: 80059},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
								&notExpr{
									pos: position{line: 2277, col: 8, offset: 80048},
									expr: &anyMatcher{
										line: 2277, col: 9, offset: 80049,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 574, col: 1, offset: 18042},
			expr: &actionExpr{
				pos: position{line: 574, col: 15, offset: 18056},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 574, col: 15, offset: 18056},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 574, col: 15, offset: 18056},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 574, col: 22, offset: 18063},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 581, col: 23, offset: 18250},
										run: (*parser).callonLineRanges5,
										expr: &seqExpr{
											pos: position{line: 581, col: 23, offset: 18250},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 581, col: 23, offset: 18250},
													label: "first",
													expr: &choiceExpr{
														pos: position{line: 581, col: 30, offset: 18257},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 590, col: 19, offset: 18615},
																run: (*parser).callonLineRanges9,
																expr: &seqExpr{
																	pos: position{line: 590, col: 19, offset: 18615},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 590, col: 19, offset: 18615},
																			label: "start",
																			expr: &actionExpr{
																				pos: position{line: 2267, col: 11, offset: 79895},
																				run: (*parser).callonLineRanges12,
																				expr: &seqExpr{
																					pos: position{line: 2267, col: 11, offset: 79895},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 2267, col: 11, offset: 79895},
																							expr: &litMatcher{
																								pos:        position{line: 2267, col: 11, offset: 79895},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2267, col: 16, offset: 79900},
																							expr: &actionExpr{
																								pos: position{line: 2263, col: 10, offset: 79843},
																								run: (*parser).callonLineRanges17,
																								expr: &charClassMatcher{
																									pos:        position{line: 2263, col: 10, offset: 79843},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 590, col: 34, offset: 18630},
																			val:        "..",
																			ignoreCase: false,
																			want:       "\"..\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 590, col: 39, offset: 18635},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 2267, col: 11, offset: 79895},
																				run: (*parser).callonLineRanges21,
																				expr: &seqExpr{
																					pos: position{line: 2267, col: 11, offset: 79895},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 2267, col: 11, offset: 79895},
																							expr: &litMatcher{
																								pos:        position{line: 2267, col: 11, offset: 79895},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2267, col: 16, offset: 79900},
																							expr: &actionExpr{
																								pos: position{line: 2263, col: 10, offset: 79843},
																								run: (*parser).callonLineRanges26,
																								expr: &charClassMatcher{
																									pos:        position{line: 2263, col: 10, offset: 79843},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 594, col: 20, offset: 18747},
																run: (*parser).callonLineRanges28,
																expr: &labeledExpr{
																	pos:   position{line: 594, col: 20, offset: 18747},
																	label: "singleline",
																	expr: &actionExpr{
																		pos: position{line: 2267, col: 11, offset: 79895},
																		run: (*parser).callonLineRanges30,
																		expr: &seqExpr{
																			pos: position{line: 2267, col: 11, offset: 79895},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 2267, col: 11, offset: 79895},
																					expr: &litMatcher{
																						pos:        position{line: 2267, col: 11, offset: 79895},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2267, col: 16, offset: 79900},
																					expr: &actionExpr{
																						pos: position{line: 2263, col: 10, offset: 79843},
																						run: (*parser).callonLineRanges35,
																						expr: &charClassMatcher{
																							pos:        position{line: 2263, col: 10, offset: 79843},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 582, col: 5, offset: 18296},
													label: "others",
													expr: &oneOrMoreExpr{
														pos: position{line: 582, col: 12, offset: 18303},
														expr: &actionExpr{
															pos: position{line: 583, col: 9, offset: 18313},
															run: (*parser).callonLineRanges39,
															expr: &seqExpr{
																pos: position{line: 583, col: 9, offset: 18313},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 583, col: 10, offset: 18314},
																		val:        "[,;]",
																		chars:      []rune{',', ';'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&labeledExpr{
																		pos:   position{line: 584, col: 9, offset: 18431},
																		label: "other",
																		expr: &choiceExpr{
																			pos: position{line: 584, col: 16, offset: 18438},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 590, col: 19, offset: 18615},
																					run: (*parser).callonLineRanges44,
																					expr: &seqExpr{
																						pos: position{line: 590, col: 19, offset: 18615},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 590, col: 19, offset: 18615},
																								label: "start",
																								expr: &actionExpr{
																									pos: position{line: 2267, col: 11, offset: 79895},
																									run: (*parser).callonLineRanges47,
																									expr: &seqExpr{
																										pos: position{line: 2267, col: 11, offset: 79895},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 2267, col: 11, offset: 79895},
																												expr: &litMatcher{
																													pos:        position{line: 2267, col: 11, offset: 79895},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 2267, col: 16, offset: 79900},
																												expr: &actionExpr{
																													pos: position{line: 2263, col: 10, offset: 79843},
																													run: (*parser).callonLineRanges52,
																													expr: &charClassMatcher{
																														pos:        position{line: 2263, col: 10, offset: 79843},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 590, col: 34, offset: 18630},
																								val:        "..",
																								ignoreCase: false,
																								want:       "\"..\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 590, col: 39, offset: 18635},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 2267, col: 11, offset: 79895},
																									run: (*parser).callonLineRanges56,
																									expr: &seqExpr{
																										pos: position{line: 2267, col: 11, offset: 79895},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 2267, col: 11, offset: 79895},
																												expr: &litMatcher{
																													pos:        position{line: 2267, col: 11, offset: 79895},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 2267, col: 16, offset: 79900},
																												expr: &actionExpr{
																													pos: position{line: 2263, col: 10, offset: 79843},
																													run: (*parser).callonLineRanges61,
																													expr: &charClassMatcher{
																														pos:        position{line: 2263, col: 10, offset: 79843},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 594, col: 20, offset: 18747},
																					run: (*parser).callonLineRanges63,
																					expr: &labeledExpr{
																						pos:   position{line: 594, col: 20, offset: 18747},
																						label: "singleline",
																						expr: &actionExpr{
																							pos: position{line: 2267, col: 11, offset: 79895},
																							run: (*parser).callonLineRanges65,
																							expr: &seqExpr{
																								pos: position{line: 2267, col: 11, offset: 79895},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 2267, col: 11, offset: 79895},
																										expr: &litMatcher{
																											pos:        position{line: 2267, col: 11, offset: 79895},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 2267, col: 16, offset: 79900},
																										expr: &actionExpr{
																											pos: position{line: 2263, col: 10, offset: 79843},
																											run: (*parser).callonLineRanges70,
																											expr: &charClassMatcher{
																												pos:        position{line: 2263, col: 10, offset: 79843},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 590, col: 19, offset: 18615},
										run: (*parser).callonLineRanges72,
										expr: &seqExpr{
											pos: position{line: 590, col: 19, offset: 18615},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 590, col: 19, offset: 18615},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 2267, col: 11, offset: 79895},
														run: (*parser).callonLineRanges75,
														expr: &seqExpr{
															pos: position{line: 2267, col: 11, offset: 79895},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 2267, col: 11, offset: 79895},
																	expr: &litMatcher{
																		pos:        position{line: 2267, col: 11, offset: 79895},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 2267, col: 16, offset: 79900},
																	expr: &actionExpr{
																		pos: position{line: 2263, col: 10, offset: 79843},
																		run: (*parser).callonLineRanges80,
																		expr: &charClassMatcher{
																			pos:        position{line: 2263, col: 10, offset: 79843},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 590, col: 34, offset: 18630},
													val:        "..",
													ignoreCase: false,
													want:       "\"..\"",
												},
												&labeledExpr{
													pos:   position{line: 590, col: 39, offset: 18635},
													label: "end",
													expr: &actionExpr{
														pos: position{line: 2267, col: 11, offset: 79895},
														run: (*parser).callonLineRanges84,
														expr: &seqExpr{
															pos: position{line: 2267, col: 11, offset: 79895},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 2267, col: 11, offset: 79895},
																	expr: &litMatcher{
																		pos:        position{line: 2267, col: 11, offset: 79895},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 2267, col: 16, offset: 79900},
																	expr: &actionExpr{
																		pos: position{line: 2263, col: 10, offset: 79843},
																		run: (*parser).callonLineRanges89,
																		expr: &charClassMatcher{
																			pos:        position{line: 2263, col: 10, offset: 79843},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 594, col: 20, offset: 18747},
										run: (*parser).callonLineRanges91,
										expr: &labeledExpr{
											pos:   position{line: 594, col: 20, offset: 18747},
											label: "singleline",
											expr: &actionExpr{
												pos: position{line: 2267, col: 11, offset: 79895},
												run: (*parser).callonLineRanges93,
												expr: &seqExpr{
													pos: position{line: 2267, col: 11, offset: 79895},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 2267, col: 11, offset: 79895},
															expr: &litMatcher{
																pos:        position{line: 2267, col: 11, offset: 79895},
																val:        "-",
																ignoreCase: false,
																want:       "\"-\"",
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 2267, col: 16, offset: 79900},
															expr: &actionExpr{
																pos: position{line: 2263, col: 10, offset: 79843},
																run: (*parser).callonLineRanges98,
																expr: &charClassMatcher{
																	pos:        position{line: 2263, col: 10, offset: 79843},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2277, col: 8, offset: 80048},
							expr: &anyMatcher{
								line: 2277, col: 9, offset: 80049,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 599, col: 1, offset: 18874},
			expr: &actionExpr{
				pos: position{line: 599, col: 14, offset: 18887},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 599, col: 14, offset: 18887},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 599, col: 14, offset: 18887},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 603, col: 22, offset: 19016},
								run: (*parser).callonTagRanges4,
								expr: &seqExpr{
									pos: position{line: 603, col: 22, offset: 19016},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 603, col: 22, offset: 19016},
											label: "first",
											expr: &choiceExpr{
												pos: position{line: 612, col: 13, offset: 19326},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 612, col: 13, offset: 19326},
														run: (*parser).callonTagRanges8,
														expr: &labeledExpr{
															pos:   position{line: 612, col: 13, offset: 19326},
															label: "tag",
															expr: &choiceExpr{
																pos: position{line: 612, col: 18, offset: 19331},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2217, col: 14, offset: 78190},
																		run: (*parser).callonTagRanges11,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2217, col: 14, offset: 78190},
																			expr: &charClassMatcher{
																				pos:        position{line: 2217, col: 14, offset: 78190},
																				val:        "[0-9\\pL]",
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 618, col: 16, offset: 19515},
																		run: (*parser).callonTagRanges14,
																		expr: &seqExpr{
																			pos: position{line: 618, col: 16, offset: 19515},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 618, col: 16, offset: 19515},
																					label: "stars",
																					expr: &actionExpr{
																						pos: position{line: 618, col: 23, offset: 19522},
																						run: (*parser).callonTagRanges17,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 618, col: 23, offset: 19522},
																							expr: &litMatcher{
																								pos:        position{line: 618, col: 24, offset: 19523},
																								val:        "*",
																								ignoreCase: false,
																								want:       "\"*\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 621, col: 5, offset: 19577},
																					run: (*parser).callonTagRanges20,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 614, col: 5, offset: 19411},
														run: (*parser).callonTagRanges21,
														expr: &seqExpr{
															pos: position{line: 614, col: 5, offset: 19411},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 614, col: 5, offset: 19411},
																	val:        "!",
																	ignoreCase: false,
																	want:       "\"!\"",
																},
																&labeledExpr{
																	pos:   position{line: 614, col: 9, offset: 19415},
																	label: "tag",
																	expr: &choiceExpr{
																		pos: position{line: 614, col: 14, offset: 19420},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2217, col: 14, offset: 78190},
																				run: (*parser).callonTagRanges26,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2217, col: 14, offset: 78190},
																					expr: &charClassMatcher{
																						pos:        position{line: 2217, col: 14, offset: 78190},
																						val:        "[0-9\\pL]",
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 618, col: 16, offset: 19515},
																				run: (*parser).callonTagRanges29,
																				expr: &seqExpr{
																					pos: position{line: 618, col: 16, offset: 19515},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 618, col: 16, offset: 19515},
																							label: "stars",
																							expr: &actionExpr{
																								pos: position{line: 618, col: 23, offset: 19522},
																								run: (*parser).callonTagRanges32,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 618, col: 23, offset: 19522},
																									expr: &litMatcher{
																										pos:        position{line: 618, col: 24, offset: 19523},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 621, col: 5, offset: 19577},
																							run: (*parser).callonTagRanges35,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 604, col: 5, offset: 19037},
											label: "others",
											expr: &zeroOrMoreExpr{
												pos: position{line: 604, col: 12, offset: 19044},
												expr: &actionExpr{
													pos: position{line: 605, col: 9, offset: 19054},
													run: (*parser).callonTagRanges38,
													expr: &seqExpr{
														pos: position{line: 605, col: 9, offset: 19054},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 605, col: 10, offset: 19055},
																val:        "[,;]",
																chars:      []rune{',', ';'},
																ignoreCase: false,
																inverted:   false,
															},
															&labeledExpr{
																pos:   position{line: 606, col: 9, offset: 19172},
																label: "other",
																expr: &choiceExpr{
																	pos: position{line: 612, col: 13, offset: 19326},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 612, col: 13, offset: 19326},
																			run: (*parser).callonTagRanges43,
																			expr: &labeledExpr{
																				pos:   position{line: 612, col: 13, offset: 19326},
																				label: "tag",
																				expr: &choiceExpr{
																					pos: position{line: 612, col: 18, offset: 19331},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2217, col: 14, offset: 78190},
																							run: (*parser).callonTagRanges46,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2217, col: 14, offset: 78190},
																								expr: &charClassMatcher{
																									pos:        position{line: 2217, col: 14, offset: 78190},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 618, col: 16, offset: 19515},
																							run: (*parser).callonTagRanges49,
																							expr: &seqExpr{
																								pos: position{line: 618, col: 16, offset: 19515},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 618, col: 16, offset: 19515},
																										label: "stars",
																										expr: &actionExpr{
																											pos: position{line: 618, col: 23, offset: 19522},
																											run: (*parser).callonTagRanges52,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 618, col: 23, offset: 19522},
																												expr: &litMatcher{
																													pos:        position{line: 618, col: 24, offset: 19523},
																													val:        "*",
																													ignoreCase: false,
																													want:       "\"*\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 621, col: 5, offset: 19577},
																										run: (*parser).callonTagRanges55,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 614, col: 5, offset: 19411},
																			run: (*parser).callonTagRanges56,
																			expr: &seqExpr{
																				pos: position{line: 614, col: 5, offset: 19411},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 614, col: 5, offset: 19411},
																						val:        "!",
																						ignoreCase: false,
																						want:       "\"!\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 614, col: 9, offset: 19415},
																						label: "tag",
																						expr: &choiceExpr{
																							pos: position{line: 614, col: 14, offset: 19420},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2217, col: 14, offset: 78190},
																									run: (*parser).callonTagRanges61,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2217, col: 14, offset: 78190},
																										expr: &charClassMatcher{
																											pos:        position{line: 2217, col: 14, offset: 78190},
																											val:        "[0-9\\pL]",
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 618, col: 16, offset: 19515},
																									run: (*parser).callonTagRanges64,
																									expr: &seqExpr{
																										pos: position{line: 618, col: 16, offset: 19515},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 618, col: 16, offset: 19515},
																												label: "stars",
																												expr: &actionExpr{
																													pos: position{line: 618, col: 23, offset: 19522},
																													run: (*parser).callonTagRanges67,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 618, col: 23, offset: 19522},
																														expr: &litMatcher{
																															pos:        position{line: 618, col: 24, offset: 19523},
																															val:        "*",
																															ignoreCase: false,
																															want:       "\"*\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 621, col: 5, offset: 19577},
																												run: (*parser).callonTagRanges70,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2277, col: 8, offset: 80048},
							expr: &anyMatcher{
								line: 2277, col: 9, offset: 80049,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 631, col: 1, offset: 19871},
			expr: &actionExpr{
				pos: position{line: 631, col: 21, offset: 19891},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 631, col: 21, offset: 19891},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 631, col: 21, offset: 19891},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 631, col: 29, offset: 19899},
								expr: &choiceExpr{
									pos: position{line: 631, col: 30, offset: 19900},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 635, col: 25, offset: 20072},
											run: (*parser).callonIncludedFileLine6,
											expr: &seqExpr{
												pos: position{line: 635, col: 25, offset: 20072},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 635, col: 25, offset: 20072},
														val:        "tag::",
														ignoreCase: false,
														want:       "\"tag::\"",
													},
													&labeledExpr{
														pos:   position{line: 635, col: 33, offset: 20080},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 635, col: 38, offset: 20085},
															run: (*parser).callonIncludedFileLine10,
															expr: &actionExpr{
																pos: position{line: 2217, col: 14, offset: 78190},
																run: (*parser).callonIncludedFileLine11,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2217, col: 14, offset: 78190},
																	expr: &charClassMatcher{
																		pos:        position{line: 2217, col: 14, offset: 78190},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 635, col: 78, offset: 20125},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 639, col: 23, offset: 20212},
											run: (*parser).callonIncludedFileLine15,
											expr: &seqExpr{
												pos: position{line: 639, col: 23, offset: 20212},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 639, col: 23, offset: 20212},
														val:        "end::",
														ignoreCase: false,
														want:       "\"end::\"",
													},
													&labeledExpr{
														pos:   position{line: 639, col: 31, offset: 20220},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 639, col: 36, offset: 20225},
															run: (*parser).callonIncludedFileLine19,
															expr: &actionExpr{
																pos: position{line: 2217, col: 14, offset: 78190},
																run: (*parser).callonIncludedFileLine20,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2217, col: 14, offset: 78190},
																	expr: &charClassMatcher{
																		pos:        position{line: 2217, col: 14, offset: 78190},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 639, col: 76, offset: 20265},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 631, col: 74, offset: 19944},
											run: (*parser).callonIncludedFileLine24,
											expr: &anyMatcher{
												line: 631, col: 74, offset: 19944,
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2279, col: 8, offset: 80059},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
								&notExpr{
									pos: position{line: 2277, col: 8, offset: 80048},
									expr: &anyMatcher{
										line: 2277, col: 9, offset: 80049,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 646, col: 1, offset: 20429},
			expr: &choiceExpr{
				pos: position{line: 646, col: 18, offset: 20446},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 646, col: 18, offset: 20446},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 646, col: 18, offset: 20446},
							label: "comment",
							expr: &actionExpr{
								pos: position{line: 1916, col: 22, offset: 68317},
								run: (*parser).callonListParagraph4,
								expr: &seqExpr{
									pos: position{line: 1916, col: 22, offset: 68317},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1916, col: 22, offset: 68317},
											expr: &seqExpr{
												pos: position{line: 1902, col: 26, offset: 67906},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1902, col: 26, offset: 67906},
														val:        "////",
														ignoreCase: false,
														want:       "\"////\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 1902, col: 33, offset: 67913},
														expr: &choiceExpr{
															pos: position{line: 2271, col: 10, offset: 79961},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2271, col: 10, offset: 79961},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2271, col: 16, offset: 79967},
																	run: (*parser).callonListParagraph12,
																	expr: &litMatcher{
																		pos:        position{line: 2271, col: 16, offset: 79967},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2279, col: 8, offset: 80059},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2275, col: 12, offset: 80019},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&charClassMatcher{
																pos:        position{line: 2275, col: 21, offset: 80028},
																val:        "[\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
															&notExpr{
																pos: position{line: 2277, col: 8, offset: 80048},
																expr: &anyMatcher{
																	line: 2277, col: 9, offset: 80049,
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1916, col: 45, offset: 68340},
											val:        "//",
											ignoreCase: false,
											want:       "\"//\"",
										},
										&labeledExpr{
											pos:   position{line: 1916, col: 50, offset: 68345},
											label: "content",
											expr: &actionExpr{
												pos: position{line: 1920, col: 29, offset: 68473},
												run: (*parser).callonListParagraph21,
												expr: &zeroOrMoreExpr{
													pos: position{line: 1920, col: 29, offset: 68473},
													expr: &charClassMatcher{
														pos:        position{line: 1920, col: 29, offset: 68473},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2279, col: 8, offset: 80059},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2275, col: 12, offset: 80019},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&charClassMatcher{
													pos:        position{line: 2275, col: 21, offset: 80028},
													val:        "[\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
												&notExpr{
													pos: position{line: 2277, col: 8, offset: 80048},
													expr: &anyMatcher{
														line: 2277, col: 9, offset: 80049,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 648, col: 9, offset: 20512},
						run: (*parser).callonListParagraph29,
						expr: &labeledExpr{
							pos:   position{line: 648, col: 9, offset: 20512},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 648, col: 15, offset: 20518},
								expr: &ruleRefExpr{
									pos:  position{line: 648, col: 16, offset: 20519},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 652, col: 1, offset: 20611},
			expr: &actionExpr{
				pos: position{line: 652, col: 22, offset: 20632},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 652, col: 22, offset: 20632},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 652, col: 22, offset: 20632},
							expr: &notExpr{
								pos: position{line: 2277, col: 8, offset: 80048},
								expr: &anyMatcher{
									line: 2277, col: 9, offset: 80049,
								},
							},
						},
						&notExpr{
							pos: position{line: 653, col: 5, offset: 20641},
							expr: &actionExpr{
								pos: position{line: 2161, col: 14, offset: 76486},
								run: (*parser).callonListParagraphLine7,
								expr: &seqExpr{
									pos: position{line: 2161, col: 14, offset: 76486},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2161, col: 14, offset: 76486},
											expr: &notExpr{
												pos: position{line: 2277, col: 8, offset: 80048},
												expr: &anyMatcher{
													line: 2277, col: 9, offset: 80049,
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2161, col: 19, offset: 76491},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonListParagraphLine15,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2279, col: 8, offset: 80059},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2275, col: 12, offset: 80019},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&charClassMatcher{
													pos:        position{line: 2275, col: 21, offset: 80028},
													val:        "[\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
												&notExpr{
													pos: position{line: 2277, col: 8, offset: 80048},
													expr: &anyMatcher{
														line: 2277, col: 9, offset: 80049,
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 654, col: 5, offset: 20656},
							expr: &actionExpr{
								pos: position{line: 1916, col: 22, offset: 68317},
								run: (*parser).callonListParagraphLine23,
								expr: &seqExpr{
									pos: position{line: 1916, col: 22, offset: 68317},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1916, col: 22, offset: 68317},
											expr: &seqExpr{
												pos: position{line: 1902, col: 26, offset: 67906},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1902, col: 26, offset: 67906},
														val:        "////",
														ignoreCase: false,
														want:       "\"////\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 1902, col: 33, offset: 67913},
														expr: &choiceExpr{
															pos: position{line: 2271, col: 10, offset: 79961},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2271, col: 10, offset: 79961},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2271, col: 16, offset: 79967},
																	run: (*parser).callonListParagraphLine31,
																	expr: &litMatcher{
																		pos:        position{line: 2271, col: 16, offset: 79967},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2279, col: 8, offset: 80059},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2275, col: 12, offset: 80019},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&charClassMatcher{
																pos:        position{line: 2275, col: 21, offset: 80028},
																val:        "[\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
															&notExpr{
																pos: position{line: 2277, col: 8, offset: 80048},
																expr: &anyMatcher{
																	line: 2277, col: 9, offset: 80049,
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1916, col: 45, offset: 68340},
											val:        "//",
											ignoreCase: false,
											want:       "\"//\"",
										},
										&labeledExpr{
											pos:   position{line: 1916, col: 50, offset: 68345},
											label: "content",
											expr: &actionExpr{
												pos: position{line: 1920, col: 29, offset: 68473},
												run: (*parser).callonListParagraphLine40,
												expr: &zeroOrMoreExpr{
													pos: position{line: 1920, col: 29, offset: 68473},
													expr: &charClassMatcher{
														pos:        position{line: 1920, col: 29, offset: 68473},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2279, col: 8, offset: 80059},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2275, col: 12, offset: 80019},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&charClassMatcher{
													pos:        position{line: 2275, col: 21, offset: 80028},
													val:        "[\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
												&notExpr{
													pos: position{line: 2277, col: 8, offset: 80048},
													expr: &anyMatcher{
														line: 2277, col: 9, offset: 80049,
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 655, col: 5, offset: 20679},
							expr: &actionExpr{
								pos: position{line: 701, col: 5, offset: 22141},
								run: (*parser).callonListParagraphLine49,
								expr: &seqExpr{
									pos: position{line: 701, col: 5, offset: 22141},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 701, col: 5, offset: 22141},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonListParagraphLine54,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 701, col: 12, offset: 22148},
											label: "prefix",
											expr: &choiceExpr{
												pos: position{line: 703, col: 9, offset: 22211},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 703, col: 9, offset: 22211},
														run: (*parser).callonListParagraphLine58,
														expr: &seqExpr{
															pos: position{line: 703, col: 9, offset: 22211},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 703, col: 9, offset: 22211},
																	label: "depth",
																	expr: &actionExpr{
																		pos: position{line: 703, col: 16, offset: 22218},
																		run: (*parser).callonListParagraphLine61,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 703, col: 16, offset: 22218},
																			expr: &litMatcher{
																				pos:        position{line: 703, col: 17, offset: 22219},
																				val:        ".",
																				ignoreCase: false,
																				want:       "\".\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 707, col: 9, offset: 22319},
																	run: (*parser).callonListParagraphLine64,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 726, col: 11, offset: 23036},
														run: (*parser).callonListParagraphLine65,
														expr: &seqExpr{
															pos: position{line: 726, col: 11, offset: 23036},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 726, col: 11, offset: 23036},
																	expr: &charClassMatcher{
																		pos:        position{line: 726, col: 12, offset: 23037},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&litMatcher{
																	pos:        position{line: 726, col: 20, offset: 23045},
																	val:        ".",
																	ignoreCase: false,
																	want:       "\".\"",
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 728, col: 13, offset: 23156},
														run: (*parser).callonListParagraphLine70,
														expr: &seqExpr{
															pos: position{line: 728, col: 13, offset: 23156},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 728, col: 14, offset: 23157},
																	val:        "[a-z]",
																	ranges:     []rune{'a', 'z'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&litMatcher{
																	pos:        position{line: 728, col: 21, offset: 23164},
																	val:        ".",
																	ignoreCase: false,
																	want:       "\".\"",
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 730, col: 13, offset: 23278},
														run: (*parser).callonListParagraphLine74,
														expr: &seqExpr{
															pos: position{line: 730, col: 13, offset: 23278},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 730, col: 14, offset: 23279},
																	val:        "[A-Z]",
																	ranges:     []rune{'A', 'Z'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&litMatcher{
																	pos:        position{line: 730, col: 21, offset: 23286},
																	val:        ".",
																	ignoreCase: false,
																	want:       "\".\"",
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 732, col: 13, offset: 23400},
														run: (*parser).callonListParagraphLine78,
														expr: &seqExpr{
															pos: position{line: 732, col: 13, offset: 23400},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 732, col: 13, offset: 23400},
																	expr: &charClassMatcher{
																		pos:        position{line: 732, col: 14, offset: 23401},
																		val:        "[ivxdlcm]",
																		chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&litMatcher{
																	pos:        position{line: 732, col: 26, offset: 23413},
																	val:        ")",
																	ignoreCase: false,
																	want:       "\")\"",
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 734, col: 13, offset: 23527},
														run: (*parser).callonListParagraphLine83,
														expr: &seqExpr{
															pos: position{line: 734, col: 13, offset: 23527},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 734, col: 13, offset: 23527},
																	expr: &charClassMatcher{
																		pos:        position{line: 734, col: 14, offset: 23528},
																		val:        "[IVXDLCM]",
																		chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&litMatcher{
																	pos:        position{line: 734, col: 26, offset: 23540},
																	val:        ")",
																	ignoreCase: false,
																	want:       "\")\"",
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 736, col: 12, offset: 23653},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonListParagraphLine91,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 656, col: 5, offset: 20706},
							expr: &actionExpr{
								pos: position{line: 755, col: 5, offset: 24261},
								run: (*parser).callonListParagraphLine94,
								expr: &seqExpr{
									pos: position{line: 755, col: 5, offset: 24261},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 755, col: 5, offset: 24261},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonListParagraphLine99,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 755, col: 12, offset: 24268},
											label: "prefix",
											expr: &choiceExpr{
												pos: position{line: 755, col: 20, offset: 24276},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 757, col: 9, offset: 24333},
														run: (*parser).callonListParagraphLine103,
														expr: &seqExpr{
															pos: position{line: 757, col: 9, offset: 24333},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 757, col: 9, offset: 24333},
																	label: "depth",
																	expr: &actionExpr{
																		pos: position{line: 757, col: 16, offset: 24340},
																		run: (*parser).callonListParagraphLine106,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 757, col: 16, offset: 24340},
																			expr: &litMatcher{
																				pos:        position{line: 757, col: 17, offset: 24341},
																				val:        "*",
																				ignoreCase: false,
																				want:       "\"*\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 761, col: 9, offset: 24441},
																	run: (*parser).callonListParagraphLine109,
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 778, col: 14, offset: 25148},
														label: "depth",
														expr: &actionExpr{
															pos: position{line: 778, col: 21, offset: 25155},
															run: (*parser).callonListParagraphLine111,
															expr: &litMatcher{
																pos:        position{line: 778, col: 22, offset: 25156},
																val:        "-",
																ignoreCase: false,
																want:       "\"-\"",
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 780, col: 13, offset: 25242},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonListParagraphLine116,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 657, col: 5, offset: 20735},
							expr: &actionExpr{
								pos: position{line: 1623, col: 26, offset: 58130},
								run: (*parser).callonListParagraphLine119,
								expr: &seqExpr{
									pos: position{line: 1623, col: 26, offset: 58130},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1623, col: 26, offset: 58130},
											val:        "<",
											ignoreCase: false,
											want:       "\"<\"",
										},
										&labeledExpr{
											pos:   position{line: 1623, col: 30, offset: 58134},
											label: "ref",
											expr: &actionExpr{
												pos: position{line: 1623, col: 35, offset: 58139},
												run: (*parser).callonListParagraphLine123,
												expr: &oneOrMoreExpr{
													pos: position{line: 1623, col: 35, offset: 58139},
													expr: &charClassMatcher{
														pos:        position{line: 1623, col: 35, offset: 58139},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1623, col: 83, offset: 58187},
											val:        ">",
											ignoreCase: false,
											want:       "\">\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 1623, col: 87, offset: 58191},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonListParagraphLine130,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 658, col: 5, offset: 20762},
							expr: &seqExpr{
								pos: position{line: 668, col: 25, offset: 21042},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 668, col: 25, offset: 21042},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 668, col: 29, offset: 21046},
										expr: &choiceExpr{
											pos: position{line: 2271, col: 10, offset: 79961},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2271, col: 10, offset: 79961},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
												&actionExpr{
													pos: position{line: 2271, col: 16, offset: 79967},
													run: (*parser).callonListParagraphLine138,
													expr: &litMatcher{
														pos:        position{line: 2271, col: 16, offset: 79967},
														val:        "\t",
														ignoreCase: false,
														want:       "\"\\t\"",
													},
												},
											},
										},
									},
									&choiceExpr{
										pos: position{line: 2275, col: 12, offset: 80019},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2275, col: 12, offset: 80019},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&charClassMatcher{
												pos:        position{line: 2275, col: 21, offset: 80028},
												val:        "[\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 659, col: 5, offset: 20788},
							expr: &ruleRefExpr{
								pos:  position{line: 659, col: 6, offset: 20789},
								name: "BlockAttributes",
							},
						},
						&notExpr{
							pos: position{line: 660, col: 5, offset: 20809},
							expr: &choiceExpr{
								pos: position{line: 1654, col: 19, offset: 59095},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 1654, col: 19, offset: 59095},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1654, col: 19, offset: 59095},
												expr: &charClassMatcher{
													pos:        position{line: 2213, col: 13, offset: 78116},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 2077, col: 26, offset: 73358},
												val:        "....",
												ignoreCase: false,
												want:       "\"....\"",
											},
										},
									},
									&seqExpr{
										pos: position{line: 1839, col: 25, offset: 65436},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1839, col: 25, offset: 65436},
												val:        "```",
												ignoreCase: false,
												want:       "\"```\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1839, col: 31, offset: 65442},
												expr: &choiceExpr{
													pos: position{line: 2271, col: 10, offset: 79961},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2271, col: 10, offset: 79961},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2271, col: 16, offset: 79967},
															run: (*parser).callonListParagraphLine156,
															expr: &litMatcher{
																pos:        position{line: 2271, col: 16, offset: 79967},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2279, col: 8, offset: 80059},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 1856, col: 26, offset: 66120},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1856, col: 26, offset: 66120},
												val:        "----",
												ignoreCase: false,
												want:       "\"----\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1856, col: 33, offset: 66127},
												expr: &choiceExpr{
													pos: position{line: 2271, col: 10, offset: 79961},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2271, col: 10, offset: 79961},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2271, col: 16, offset: 79967},
															run: (*parser).callonListParagraphLine168,
															expr: &litMatcher{
																pos:        position{line: 2271, col: 16, offset: 79967},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2279, col: 8, offset: 80059},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 1674, col: 26, offset: 59888},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1674, col: 26, offset: 59888},
												val:        "====",
												ignoreCase: false,
												want:       "\"====\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1674, col: 33, offset: 59895},
												expr: &choiceExpr{
													pos: position{line: 2271, col: 10, offset: 79961},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2271, col: 10, offset: 79961},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2271, col: 16, offset: 79967},
															run: (*parser).callonListParagraphLine180,
															expr: &litMatcher{
																pos:        position{line: 2271, col: 16, offset: 79967},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2279, col: 8, offset: 80059},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 1902, col: 26, offset: 67906},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1902, col: 26, offset: 67906},
												val:        "////",
												ignoreCase: false,
												want:       "\"////\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1902, col: 33, offset: 67913},
												expr: &choiceExpr{
													pos: position{line: 2271, col: 10, offset: 79961},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2271, col: 10, offset: 79961},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2271, col: 16, offset: 79967},
															run: (*parser).callonListParagraphLine192,
															expr: &litMatcher{
																pos:        position{line: 2271, col: 16, offset: 79967},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2279, col: 8, offset: 80059},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 1736, col: 24, offset: 61955},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1736, col: 24, offset: 61955},
												val:        "____",
												ignoreCase: false,
												want:       "\"____\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1736, col: 31, offset: 61962},
												expr: &choiceExpr{
													pos: position{line: 2271, col: 10, offset: 79961},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2271, col: 10, offset: 79961},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2271, col: 16, offset: 79967},
															run: (*parser).callonListParagraphLine204,
															expr: &litMatcher{
																pos:        position{line: 2271, col: 16, offset: 79967},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2279, col: 8, offset: 80059},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 1788, col: 26, offset: 63733},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1788, col: 26, offset: 63733},
												val:        "****",
												ignoreCase: false,
												want:       "\"****\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1788, col: 33, offset: 63740},
												expr: &choiceExpr{
													pos: position{line: 2271, col: 10, offset: 79961},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2271, col: 10, offset: 79961},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2271, col: 16, offset: 79967},
															run: (*parser).callonListParagraphLine216,
															expr: &litMatcher{
																pos:        position{line: 2271, col: 16, offset: 79967},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2279, col: 8, offset: 80059},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 1889, col: 30, offset: 67449},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1889, col: 30, offset: 67449},
												val:        "++++",
												ignoreCase: false,
												want:       "\"++++\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1889, col: 37, offset: 67456},
												expr: &choiceExpr{
													pos: position{line: 2271, col: 10, offset: 79961},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2271, col: 10, offset: 79961},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2271, col: 16, offset: 79967},
															run: (*parser).callonListParagraphLine228,
															expr: &litMatcher{
																pos:        position{line: 2271, col: 16, offset: 79967},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2279, col: 8, offset: 80059},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 661, col: 5, offset: 20829},
							expr: &seqExpr{
								pos: position{line: 803, col: 26, offset: 26148},
								exprs: []interface{}{
									&actionExpr{
										pos: position{line: 806, col: 32, offset: 26286},
										run: (*parser).callonListParagraphLine237,
										expr: &labeledExpr{
											pos:   position{line: 806, col: 32, offset: 26286},
											label: "content",
											expr: &actionExpr{
												pos: position{line: 806, col: 42, offset: 26296},
												run: (*parser).callonListParagraphLine239,
												expr: &oneOrMoreExpr{
													pos: position{line: 806, col: 42, offset: 26296},
													expr: &choiceExpr{
														pos: position{line: 805, col: 33, offset: 26234},
														alternatives: []interface{}{
															&oneOrMoreExpr{
																pos: position{line: 805, col: 33, offset: 26234},
																expr: &charClassMatcher{
																	pos:        position{line: 805, col: 33, offset: 26234},
																	val:        "[^:\\r\\n]",
																	chars:      []rune{':', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&seqExpr{
																pos: position{line: 805, col: 45, offset: 26246},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 805, col: 45, offset: 26246},
																		val:        ":",
																		ignoreCase: false,
																		want:       "\":\"",
																	},
																	&notExpr{
																		pos: position{line: 805, col: 49, offset: 26250},
																		expr: &litMatcher{
																			pos:        position{line: 805, col: 50, offset: 26251},
																			val:        ":",
																			ignoreCase: false,
																			want:       "\":\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 838, col: 5, offset: 27176},
										run: (*parser).callonListParagraphLine248,
										expr: &seqExpr{
											pos: position{line: 838, col: 5, offset: 27176},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 838, col: 5, offset: 27176},
													label: "separator",
													expr: &actionExpr{
														pos: position{line: 838, col: 16, offset: 27187},
														run: (*parser).callonListParagraphLine251,
														expr: &oneOrMoreExpr{
															pos: position{line: 838, col: 16, offset: 27187},
															expr: &litMatcher{
																pos:        position{line: 838, col: 17, offset: 27188},
																val:        ":",
																ignoreCase: false,
																want:       "\":\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 841, col: 5, offset: 27246},
													run: (*parser).callonListParagraphLine254,
												},
												&choiceExpr{
													pos: position{line: 845, col: 6, offset: 27422},
													alternatives: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 845, col: 6, offset: 27422},
															expr: &choiceExpr{
																pos: position{line: 845, col: 7, offset: 27423},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2271, col: 10, offset: 79961},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2271, col: 16, offset: 79967},
																		run: (*parser).callonListParagraphLine259,
																		expr: &litMatcher{
																			pos:        position{line: 2271, col: 16, offset: 79967},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 662, col: 5, offset: 20857},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 662, col: 11, offset: 20863},
								run: (*parser).callonListParagraphLine268,
								expr: &seqExpr{
									pos: position{line: 662, col: 11, offset: 20863},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 662, col: 11, offset: 20863},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonListParagraphLine273,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 662, col: 18, offset: 20870},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 662, col: 27, offset: 20879},
												expr: &ruleRefExpr{
													pos:  position{line: 662, col: 28, offset: 20880},
													name: "InlineElement",
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2279, col: 8, offset: 80059},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
								&notExpr{
									pos: position{line: 2277, col: 8, offset: 80048},
									expr: &anyMatcher{
										line: 2277, col: 9, offset: 80049,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 670, col: 1, offset: 21125},
			expr: &actionExpr{
				pos: position{line: 670, col: 29, offset: 21153},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 670, col: 29, offset: 21153},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 668, col: 25, offset: 21042},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 668, col: 29, offset: 21046},
							expr: &choiceExpr{
								pos: position{line: 2271, col: 10, offset: 79961},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2271, col: 10, offset: 79961},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2271, col: 16, offset: 79967},
										run: (*parser).callonContinuedListItemElement7,
										expr: &litMatcher{
											pos:        position{line: 2271, col: 16, offset: 79967},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2275, col: 12, offset: 80019},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 670, col: 50, offset: 21174},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 670, col: 58, offset: 21182},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 674, col: 1, offset: 21288},
			expr: &actionExpr{
				pos: position{line: 674, col: 29, offset: 21316},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 674, col: 29, offset: 21316},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 674, col: 29, offset: 21316},
							expr: &notExpr{
								pos: position{line: 2277, col: 8, offset: 80048},
								expr: &anyMatcher{
									line: 2277, col: 9, offset: 80049,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 675, col: 5, offset: 21326},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 675, col: 14, offset: 21335},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 675, col: 14, offset: 21335},
										name: "DelimitedBlock",
									},
									&actionExpr{
										pos: position{line: 1916, col: 22, offset: 68317},
										run: (*parser).callonContinuedListItemContent9,
										expr: &seqExpr{
											pos: position{line: 1916, col: 22, offset: 68317},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1916, col: 22, offset: 68317},
													expr: &seqExpr{
														pos: position{line: 1902, col: 26, offset: 67906},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1902, col: 26, offset: 67906},
																val:        "////",
																ignoreCase: false,
																want:       "\"////\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1902, col: 33, offset: 67913},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonContinuedListItemContent17,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1916, col: 45, offset: 68340},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&labeledExpr{
													pos:   position{line: 1916, col: 50, offset: 68345},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1920, col: 29, offset: 68473},
														run: (*parser).callonContinuedListItemContent26,
														expr: &zeroOrMoreExpr{
															pos: position{line: 1920, col: 29, offset: 68473},
															expr: &charClassMatcher{
																pos:        position{line: 1920, col: 29, offset: 68473},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2279, col: 8, offset: 80059},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 677, col: 11, offset: 21388},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 678, col: 11, offset: 21404},
										name: "ImageBlock",
									},
									&actionExpr{
										pos: position{line: 1632, col: 18, offset: 58455},
										run: (*parser).callonContinuedListItemContent36,
										expr: &seqExpr{
											pos: position{line: 1632, col: 18, offset: 58455},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 1632, col: 19, offset: 58456},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 1632, col: 19, offset: 58456},
															val:        "***",
															ignoreCase: false,
															want:       "\"***\"",
														},
														&litMatcher{
															pos:        position{line: 1632, col: 27, offset: 58464},
															val:        "* * *",
															ignoreCase: false,
															want:       "\"* * *\"",
														},
														&litMatcher{
															pos:        position{line: 1632, col: 37, offset: 58474},
															val:        "---",
															ignoreCase: false,
															want:       "\"---\"",
														},
														&litMatcher{
															pos:        position{line: 1632, col: 45, offset: 58482},
															val:        "- - -",
															ignoreCase: false,
															want:       "\"- - -\"",
														},
														&litMatcher{
															pos:        position{line: 1632, col: 55, offset: 58492},
															val:        "___",
															ignoreCase: false,
															want:       "\"___\"",
														},
														&litMatcher{
															pos:        position{line: 1632, col: 63, offset: 58500},
															val:        "_ _ _",
															ignoreCase: false,
															want:       "\"_ _ _\"",
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2279, col: 8, offset: 80059},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 680, col: 11, offset: 21449},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 681, col: 11, offset: 21476},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 682, col: 11, offset: 21505},
										name: "LabeledListItem",
									},
									&actionExpr{
										pos: position{line: 2161, col: 14, offset: 76486},
										run: (*parser).callonContinuedListItemContent53,
										expr: &seqExpr{
											pos: position{line: 2161, col: 14, offset: 76486},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2161, col: 14, offset: 76486},
													expr: &notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2161, col: 19, offset: 76491},
													expr: &choiceExpr{
														pos: position{line: 2271, col: 10, offset: 79961},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2271, col: 10, offset: 79961},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2271, col: 16, offset: 79967},
																run: (*parser).callonContinuedListItemContent61,
																expr: &litMatcher{
																	pos:        position{line: 2271, col: 16, offset: 79967},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2279, col: 8, offset: 80059},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2116, col: 5, offset: 74964},
										run: (*parser).callonContinuedListItemContent68,
										expr: &seqExpr{
											pos: position{line: 2116, col: 5, offset: 74964},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2116, col: 5, offset: 74964},
													run: (*parser).callonContinuedListItemContent70,
												},
												&labeledExpr{
													pos:   position{line: 2120, col: 5, offset: 75117},
													label: "lines",
													expr: &oneOrMoreExpr{
														pos: position{line: 2120, col: 11, offset: 75123},
														expr: &actionExpr{
															pos: position{line: 2128, col: 25, offset: 75365},
															run: (*parser).callonContinuedListItemContent73,
															expr: &seqExpr{
																pos: position{line: 2128, col: 25, offset: 75365},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 2128, col: 25, offset: 75365},
																		expr: &actionExpr{
																			pos: position{line: 2161, col: 14, offset: 76486},
																			run: (*parser).callonContinuedListItemContent76,
																			expr: &seqExpr{
																				pos: position{line: 2161, col: 14, offset: 76486},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 2161, col: 14, offset: 76486},
																						expr: &notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 2161, col: 19, offset: 76491},
																						expr: &choiceExpr{
																							pos: position{line: 2271, col: 10, offset: 79961},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2271, col: 10, offset: 79961},
																									val:        " ",
																									ignoreCase: false,
																									want:       "\" \"",
																								},
																								&actionExpr{
																									pos: position{line: 2271, col: 16, offset: 79967},
																									run: (*parser).callonContinuedListItemContent84,
																									expr: &litMatcher{
																										pos:        position{line: 2271, col: 16, offset: 79967},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2279, col: 8, offset: 80059},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2275, col: 12, offset: 80019},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2275, col: 21, offset: 80028},
																								val:        "[\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2128, col: 36, offset: 75376},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2128, col: 45, offset: 75385},
																			run: (*parser).callonContinuedListItemContent92,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2128, col: 45, offset: 75385},
																				expr: &charClassMatcher{
																					pos:        position{line: 2128, col: 45, offset: 75385},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2279, col: 8, offset: 80059},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2275, col: 12, offset: 80019},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2275, col: 21, offset: 80028},
																				val:        "[\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&notExpr{
																				pos: position{line: 2277, col: 8, offset: 80048},
																				expr: &anyMatcher{
																					line: 2277, col: 9, offset: 80049,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2080, col: 31, offset: 73460},
										run: (*parser).callonContinuedListItemContent100,
										expr: &labeledExpr{
											pos:   position{line: 2080, col: 31, offset: 73460},
											label: "lines",
											expr: &actionExpr{
												pos: position{line: 2086, col: 5, offset: 73756},
												run: (*parser).callonContinuedListItemContent102,
												expr: &seqExpr{
													pos: position{line: 2086, col: 5, offset: 73756},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 2086, col: 5, offset: 73756},
															label: "firstLine",
															expr: &actionExpr{
																pos: position{line: 2091, col: 35, offset: 73958},
																run: (*parser).callonContinuedListItemContent105,
																expr: &seqExpr{
																	pos: position{line: 2091, col: 35, offset: 73958},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 2091, col: 35, offset: 73958},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 2091, col: 41, offset: 73964},
																				run: (*parser).callonContinuedListItemContent108,
																				expr: &seqExpr{
																					pos: position{line: 2091, col: 41, offset: 73964},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 2091, col: 41, offset: 73964},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonContinuedListItemContent113,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2091, col: 48, offset: 73971},
																							expr: &charClassMatcher{
																								pos:        position{line: 2091, col: 48, offset: 73971},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2279, col: 8, offset: 80059},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2275, col: 12, offset: 80019},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2275, col: 21, offset: 80028},
																					val:        "[\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&notExpr{
																					pos: position{line: 2277, col: 8, offset: 80048},
																					expr: &anyMatcher{
																						line: 2277, col: 9, offset: 80049,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2087, col: 5, offset: 73803},
															label: "otherLines",
															expr: &zeroOrMoreExpr{
																pos: position{line: 2087, col: 16, offset: 73814},
																expr: &actionExpr{
																	pos: position{line: 2128, col: 25, offset: 75365},
																	run: (*parser).callonContinuedListItemContent124,
																	expr: &seqExpr{
																		pos: position{line: 2128, col: 25, offset: 75365},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2128, col: 25, offset: 75365},
																				expr: &actionExpr{
																					pos: position{line: 2161, col: 14, offset: 76486},
																					run: (*parser).callonContinuedListItemContent127,
																					expr: &seqExpr{
																						pos: position{line: 2161, col: 14, offset: 76486},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 2161, col: 14, offset: 76486},
																								expr: &notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2161, col: 19, offset: 76491},
																								expr: &choiceExpr{
																									pos: position{line: 2271, col: 10, offset: 79961},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2271, col: 10, offset: 79961},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2271, col: 16, offset: 79967},
																											run: (*parser).callonContinuedListItemContent135,
																											expr: &litMatcher{
																												pos:        position{line: 2271, col: 16, offset: 79967},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2279, col: 8, offset: 80059},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2275, col: 12, offset: 80019},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2275, col: 21, offset: 80028},
																										val:        "[\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2128, col: 36, offset: 75376},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 2128, col: 45, offset: 75385},
																					run: (*parser).callonContinuedListItemContent143,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2128, col: 45, offset: 75385},
																						expr: &charClassMatcher{
																							pos:        position{line: 2128, col: 45, offset: 75385},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2098, col: 39, offset: 74215},
										run: (*parser).callonContinuedListItemContent151,
										expr: &seqExpr{
											pos: position{line: 2098, col: 39, offset: 74215},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2077, col: 26, offset: 73358},
													val:        "....",
													ignoreCase: false,
													want:       "\"....\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2098, col: 61, offset: 74237},
													expr: &choiceExpr{
														pos: position{line: 2271, col: 10, offset: 79961},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2271, col: 10, offset: 79961},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2271, col: 16, offset: 79967},
																run: (*parser).callonContinuedListItemContent157,
																expr: &litMatcher{
																	pos:        position{line: 2271, col: 16, offset: 79967},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2275, col: 12, offset: 80019},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2098, col: 76, offset: 74252},
													label: "lines",
													expr: &actionExpr{
														pos: position{line: 2103, col: 44, offset: 74559},
														run: (*parser).callonContinuedListItemContent163,
														expr: &labeledExpr{
															pos:   position{line: 2103, col: 44, offset: 74559},
															label: "lines",
															expr: &zeroOrMoreExpr{
																pos: position{line: 2103, col: 50, offset: 74565},
																expr: &actionExpr{
																	pos: position{line: 2108, col: 5, offset: 74705},
																	run: (*parser).callonContinuedListItemContent166,
																	expr: &seqExpr{
																		pos: position{line: 2108, col: 5, offset: 74705},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 2108, col: 5, offset: 74705},
																				label: "line",
																				expr: &actionExpr{
																					pos: position{line: 2108, col: 11, offset: 74711},
																					run: (*parser).callonContinuedListItemContent169,
																					expr: &seqExpr{
																						pos: position{line: 2108, col: 11, offset: 74711},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 2108, col: 11, offset: 74711},
																								expr: &litMatcher{
																									pos:        position{line: 2077, col: 26, offset: 73358},
																									val:        "....",
																									ignoreCase: false,
																									want:       "\"....\"",
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2108, col: 34, offset: 74734},
																								expr: &charClassMatcher{
																									pos:        position{line: 2108, col: 34, offset: 74734},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2098, col: 125, offset: 74301},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 2098, col: 126, offset: 74302},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2077, col: 26, offset: 73358},
																	val:        "....",
																	ignoreCase: false,
																	want:       "\"....\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2098, col: 148, offset: 74324},
																	expr: &choiceExpr{
																		pos: position{line: 2271, col: 10, offset: 79961},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2271, col: 10, offset: 79961},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2271, col: 16, offset: 79967},
																				run: (*parser).callonContinuedListItemContent186,
																				expr: &litMatcher{
																					pos:        position{line: 2271, col: 16, offset: 79967},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2279, col: 8, offset: 80059},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2275, col: 12, offset: 80019},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2275, col: 21, offset: 80028},
																			val:        "[\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&notExpr{
																			pos: position{line: 2277, col: 8, offset: 80048},
																			expr: &anyMatcher{
																				line: 2277, col: 9, offset: 80049,
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 182, col: 25, offset: 5755},
										run: (*parser).callonContinuedListItemContent195,
										expr: &seqExpr{
											pos: position{line: 182, col: 25, offset: 5755},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 182, col: 25, offset: 5755},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 182, col: 29, offset: 5759},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 190, col: 18, offset: 6118},
														run: (*parser).callonContinuedListItemContent199,
														expr: &seqExpr{
															pos: position{line: 190, col: 18, offset: 6118},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 190, col: 18, offset: 6118},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 190, col: 28, offset: 6128},
																	expr: &charClassMatcher{
																		pos:        position{line: 190, col: 29, offset: 6129},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 182, col: 50, offset: 5780},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 183, col: 9, offset: 5793},
													label: "value",
													expr: &zeroOrOneExpr{
														pos: position{line: 183, col: 15, offset: 5799},
														expr: &actionExpr{
															pos: position{line: 194, col: 30, offset: 6206},
															run: (*parser).callonContinuedListItemContent207,
															expr: &seqExpr{
																pos: position{line: 194, col: 30, offset: 6206},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 194, col: 30, offset: 6206},
																		expr: &choiceExpr{
																			pos: position{line: 2271, col: 10, offset: 79961},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2271, col: 10, offset: 79961},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2271, col: 16, offset: 79967},
																					run: (*parser).callonContinuedListItemContent212,
																					expr: &litMatcher{
																						pos:        position{line: 2271, col: 16, offset: 79967},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 194, col: 37, offset: 6213},
																		label: "elements",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 194, col: 46, offset: 6222},
																			expr: &choiceExpr{
																				pos: position{line: 195, col: 5, offset: 6228},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 195, col: 6, offset: 6229},
																						run: (*parser).callonContinuedListItemContent217,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 195, col: 6, offset: 6229},
																							expr: &charClassMatcher{
																								pos:        position{line: 195, col: 6, offset: 6229},
																								val:        "[^\\r\\n{]",
																								chars:      []rune{'\r', '\n', '{'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 221, col: 25, offset: 7126},
																						run: (*parser).callonContinuedListItemContent220,
																						expr: &seqExpr{
																							pos: position{line: 221, col: 25, offset: 7126},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 221, col: 25, offset: 7126},
																									val:        "{counter:",
																									ignoreCase: false,
																									want:       "\"{counter:\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 221, col: 37, offset: 7138},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 190, col: 18, offset: 6118},
																										run: (*parser).callonContinuedListItemContent224,
																										expr: &seqExpr{
																											pos: position{line: 190, col: 18, offset: 6118},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 190, col: 18, offset: 6118},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 190, col: 28, offset: 6128},
																													expr: &charClassMatcher{
																														pos:        position{line: 190, col: 29, offset: 6129},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 221, col: 56, offset: 7157},
																									label: "start",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 221, col: 62, offset: 7163},
																										expr: &actionExpr{
																											pos: position{line: 229, col: 17, offset: 7426},
																											run: (*parser).callonContinuedListItemContent231,
																											expr: &seqExpr{
																												pos: position{line: 229, col: 17, offset: 7426},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 229, col: 17, offset: 7426},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 229, col: 21, offset: 7430},
																														label: "start",
																														expr: &choiceExpr{
																															pos: position{line: 229, col: 28, offset: 7437},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 229, col: 28, offset: 7437},
																																	run: (*parser).callonContinuedListItemContent236,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 229, col: 28, offset: 7437},
																																		val:        "[A-Za-z]",
																																		ranges:     []rune{'A', 'Z', 'a', 'z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 231, col: 9, offset: 7491},
																																	run: (*parser).callonContinuedListItemContent238,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 231, col: 9, offset: 7491},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 231, col: 9, offset: 7491},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 221, col: 78, offset: 7179},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 225, col: 25, offset: 7281},
																						run: (*parser).callonContinuedListItemContent242,
																						expr: &seqExpr{
																							pos: position{line: 225, col: 25, offset: 7281},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 225, col: 25, offset: 7281},
																									val:        "{counter2:",
																									ignoreCase: false,
																									want:       "\"{counter2:\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 225, col: 38, offset: 7294},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 190, col: 18, offset: 6118},
																										run: (*parser).callonContinuedListItemContent246,
																										expr: &seqExpr{
																											pos: position{line: 190, col: 18, offset: 6118},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 190, col: 18, offset: 6118},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 190, col: 28, offset: 6128},
																													expr: &charClassMatcher{
																														pos:        position{line: 190, col: 29, offset: 6129},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 225, col: 57, offset: 7313},
																									label: "start",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 225, col: 63, offset: 7319},
																										expr: &actionExpr{
																											pos: position{line: 229, col: 17, offset: 7426},
																											run: (*parser).callonContinuedListItemContent253,
																											expr: &seqExpr{
																												pos: position{line: 229, col: 17, offset: 7426},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 229, col: 17, offset: 7426},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 229, col: 21, offset: 7430},
																														label: "start",
																														expr: &choiceExpr{
																															pos: position{line: 229, col: 28, offset: 7437},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 229, col: 28, offset: 7437},
																																	run: (*parser).callonContinuedListItemContent258,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 229, col: 28, offset: 7437},
																																		val:        "[A-Za-z]",
																																		ranges:     []rune{'A', 'Z', 'a', 'z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 231, col: 9, offset: 7491},
																																	run: (*parser).callonContinuedListItemContent260,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 231, col: 9, offset: 7491},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 231, col: 9, offset: 7491},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 225, col: 79, offset: 7335},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 214, col: 12, offset: 6782},
																						run: (*parser).callonContinuedListItemContent264,
																						expr: &seqExpr{
																							pos: position{line: 214, col: 12, offset: 6782},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 214, col: 12, offset: 6782},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 214, col: 16, offset: 6786},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 190, col: 18, offset: 6118},
																										run: (*parser).callonContinuedListItemContent268,
																										expr: &seqExpr{
																											pos: position{line: 190, col: 18, offset: 6118},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 190, col: 18, offset: 6118},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 190, col: 28, offset: 6128},
																													expr: &charClassMatcher{
																														pos:        position{line: 190, col: 29, offset: 6129},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 214, col: 35, offset: 6805},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 199, col: 6, offset: 6337},
																						run: (*parser).callonContinuedListItemContent274,
																						expr: &litMatcher{
																							pos:        position{line: 199, col: 6, offset: 6337},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2279, col: 8, offset: 80059},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 206, col: 19, offset: 6522},
										run: (*parser).callonContinuedListItemContent281,
										expr: &seqExpr{
											pos: position{line: 206, col: 19, offset: 6522},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 206, col: 19, offset: 6522},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 206, col: 24, offset: 6527},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 190, col: 18, offset: 6118},
														run: (*parser).callonContinuedListItemContent285,
														expr: &seqExpr{
															pos: position{line: 190, col: 18, offset: 6118},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 190, col: 18, offset: 6118},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 190, col: 28, offset: 6128},
																	expr: &charClassMatcher{
																		pos:        position{line: 190, col: 29, offset: 6129},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 206, col: 45, offset: 6548},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 206, col: 49, offset: 6552},
													expr: &choiceExpr{
														pos: position{line: 2271, col: 10, offset: 79961},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2271, col: 10, offset: 79961},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2271, col: 16, offset: 79967},
																run: (*parser).callonContinuedListItemContent294,
																expr: &litMatcher{
																	pos:        position{line: 2271, col: 16, offset: 79967},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2279, col: 8, offset: 80059},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 208, col: 5, offset: 6619},
										run: (*parser).callonContinuedListItemContent301,
										expr: &seqExpr{
											pos: position{line: 208, col: 5, offset: 6619},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 208, col: 5, offset: 6619},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 208, col: 9, offset: 6623},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 190, col: 18, offset: 6118},
														run: (*parser).callonContinuedListItemContent305,
														expr: &seqExpr{
															pos: position{line: 190, col: 18, offset: 6118},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 190, col: 18, offset: 6118},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 190, col: 28, offset: 6128},
																	expr: &charClassMatcher{
																		pos:        position{line: 190, col: 29, offset: 6129},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 208, col: 30, offset: 6644},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 208, col: 35, offset: 6649},
													expr: &choiceExpr{
														pos: position{line: 2271, col: 10, offset: 79961},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2271, col: 10, offset: 79961},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2271, col: 16, offset: 79967},
																run: (*parser).callonContinuedListItemContent314,
																expr: &litMatcher{
																	pos:        position{line: 2271, col: 16, offset: 79967},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2279, col: 8, offset: 80059},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 519, col: 31, offset: 16527},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 519, col: 31, offset: 16527},
												val:        "toc::[]",
												ignoreCase: false,
												want:       "\"toc::[]\"",
											},
											&choiceExpr{
												pos: position{line: 2279, col: 8, offset: 80059},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 688, col: 11, offset: 21702},
										name: "UserMacroBlock",
									},
									&actionExpr{
										pos: position{line: 942, col: 5, offset: 30713},
										run: (*parser).callonContinuedListItemContent329,
										expr: &seqExpr{
											pos: position{line: 942, col: 5, offset: 30713},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 942, col: 5, offset: 30713},
													label: "t",
													expr: &choiceExpr{
														pos: position{line: 856, col: 19, offset: 27732},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 856, col: 19, offset: 27732},
																run: (*parser).callonContinuedListItemContent333,
																expr: &litMatcher{
																	pos:        position{line: 856, col: 19, offset: 27732},
																	val:        "TIP",
																	ignoreCase: false,
																	want:       "\"TIP\"",
																},
															},
															&actionExpr{
																pos: position{line: 858, col: 5, offset: 27770},
																run: (*parser).callonContinuedListItemContent335,
																expr: &litMatcher{
																	pos:        position{line: 858, col: 5, offset: 27770},
																	val:        "NOTE",
																	ignoreCase: false,
																	want:       "\"NOTE\"",
																},
															},
															&actionExpr{
																pos: position{line: 860, col: 5, offset: 27810},
																run: (*parser).callonContinuedListItemContent337,
																expr: &litMatcher{
																	pos:        position{line: 860, col: 5, offset: 27810},
																	val:        "IMPORTANT",
																	ignoreCase: false,
																	want:       "\"IMPORTANT\"",
																},
															},
															&actionExpr{
																pos: position{line: 862, col: 5, offset: 27860},
																run: (*parser).callonContinuedListItemContent339,
																expr: &litMatcher{
																	pos:        position{line: 862, col: 5, offset: 27860},
																	val:        "WARNING",
																	ignoreCase: false,
																	want:       "\"WARNING\"",
																},
															},
															&actionExpr{
																pos: position{line: 864, col: 5, offset: 27906},
																run: (*parser).callonContinuedListItemContent341,
																expr: &litMatcher{
																	pos:        position{line: 864, col: 5, offset: 27906},
																	val:        "CAUTION",
																	ignoreCase: false,
																	want:       "\"CAUTION\"",
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 942, col: 24, offset: 30732},
													val:        ": ",
													ignoreCase: false,
													want:       "\": \"",
												},
												&labeledExpr{
													pos:   position{line: 942, col: 29, offset: 30737},
													label: "lines",
													expr: &actionExpr{
														pos: position{line: 950, col: 31, offset: 31112},
														run: (*parser).callonContinuedListItemContent345,
														expr: &seqExpr{
															pos: position{line: 950, col: 31, offset: 31112},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 950, col: 31, offset: 31112},
																	label: "firstLine",
																	expr: &actionExpr{
																		pos: position{line: 929, col: 5, offset: 30339},
																		run: (*parser).callonContinuedListItemContent348,
																		expr: &seqExpr{
																			pos: position{line: 929, col: 5, offset: 30339},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 929, col: 5, offset: 30339},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 929, col: 14, offset: 30348},
																						run: (*parser).callonContinuedListItemContent351,
																						expr: &seqExpr{
																							pos: position{line: 929, col: 14, offset: 30348},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 929, col: 14, offset: 30348},
																									label: "elements",
																									expr: &choiceExpr{
																										pos: position{line: 2225, col: 5, offset: 78563},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2225, col: 5, offset: 78563},
																												run: (*parser).callonContinuedListItemContent355,
																												expr: &seqExpr{
																													pos: position{line: 2225, col: 5, offset: 78563},
																													exprs: []interface{}{
																														&oneOrMoreExpr{
																															pos: position{line: 2225, col: 5, offset: 78563},
																															expr: &charClassMatcher{
																																pos:        position{line: 2225, col: 5, offset: 78563},
																																val:        "[0-9\\pL]",
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&andExpr{
																															pos: position{line: 2225, col: 15, offset: 78573},
																															expr: &choiceExpr{
																																pos: position{line: 2225, col: 17, offset: 78575},
																																alternatives: []interface{}{
																																	&charClassMatcher{
																																		pos:        position{line: 2225, col: 17, offset: 78575},
																																		val:        "[\\r\\n ,]]",
																																		chars:      []rune{'\r', '\n', ' ', ',', ']'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&notExpr{
																																		pos: position{line: 2277, col: 8, offset: 80048},
																																		expr: &anyMatcher{
																																			line: 2277, col: 9, offset: 80049,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2227, col: 9, offset: 78658},
																												run: (*parser).callonContinuedListItemContent364,
																												expr: &seqExpr{
																													pos: position{line: 2227, col: 9, offset: 78658},
																													exprs: []interface{}{
																														&oneOrMoreExpr{
																															pos: position{line: 2227, col: 9, offset: 78658},
																															expr: &charClassMatcher{
																																pos:        position{line: 2227, col: 9, offset: 78658},
																																val:        "[0-9\\pL]",
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&oneOrMoreExpr{
																															pos: position{line: 2227, col: 19, offset: 78668},
																															expr: &seqExpr{
																																pos: position{line: 2227, col: 20, offset: 78669},
																																exprs: []interface{}{
																																	&charClassMatcher{
																																		pos:        position{line: 2227, col: 20, offset: 78669},
																																		val:        "[=*_`]",
																																		chars:      []rune{'=', '*', '_', '`'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&oneOrMoreExpr{
																																		pos: position{line: 2227, col: 27, offset: 78676},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2227, col: 27, offset: 78676},
																																			val:        "[0-9\\pL]",
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 929, col: 28, offset: 30362},
																									expr: &charClassMatcher{
																										pos:        position{line: 929, col: 28, offset: 30362},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2279, col: 8, offset: 80059},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2275, col: 12, offset: 80019},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2275, col: 21, offset: 80028},
																							val:        "[\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 950, col: 65, offset: 31146},
																	label: "otherLines",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 950, col: 76, offset: 31157},
																		expr: &actionExpr{
																			pos: position{line: 950, col: 77, offset: 31158},
																			run: (*parser).callonContinuedListItemContent382,
																			expr: &seqExpr{
																				pos: position{line: 950, col: 77, offset: 31158},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 950, col: 77, offset: 31158},
																						expr: &seqExpr{
																							pos: position{line: 668, col: 25, offset: 21042},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 668, col: 25, offset: 21042},
																									val:        "+",
																									ignoreCase: false,
																									want:       "\"+\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 668, col: 29, offset: 21046},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonContinuedListItemContent390,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2275, col: 12, offset: 80019},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 950, col: 99, offset: 31180},
																						label: "line",
																						expr: &choiceExpr{
																							pos: position{line: 950, col: 105, offset: 31186},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 1916, col: 22, offset: 68317},
																									run: (*parser).callonContinuedListItemContent397,
																									expr: &seqExpr{
																										pos: position{line: 1916, col: 22, offset: 68317},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 1916, col: 22, offset: 68317},
																												expr: &seqExpr{
																													pos: position{line: 1902, col: 26, offset: 67906},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 1902, col: 26, offset: 67906},
																															val:        "////",
																															ignoreCase: false,
																															want:       "\"////\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1902, col: 33, offset: 67913},
																															expr: &choiceExpr{
																																pos: position{line: 2271, col: 10, offset: 79961},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2271, col: 10, offset: 79961},
																																		val:        " ",
																																		ignoreCase: false,
																																		want:       "\" \"",
																																	},
																																	&actionExpr{
																																		pos: position{line: 2271, col: 16, offset: 79967},
																																		run: (*parser).callonContinuedListItemContent405,
																																		expr: &litMatcher{
																																			pos:        position{line: 2271, col: 16, offset: 79967},
																																			val:        "\t",
																																			ignoreCase: false,
																																			want:       "\"\\t\"",
																																		},
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 2279, col: 8, offset: 80059},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2275, col: 12, offset: 80019},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2275, col: 21, offset: 80028},
																																	val:        "[\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&notExpr{
																																	pos: position{line: 2277, col: 8, offset: 80048},
																																	expr: &anyMatcher{
																																		line: 2277, col: 9, offset: 80049,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 1916, col: 45, offset: 68340},
																												val:        "//",
																												ignoreCase: false,
																												want:       "\"//\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 1916, col: 50, offset: 68345},
																												label: "content",
																												expr: &actionExpr{
																													pos: position{line: 1920, col: 29, offset: 68473},
																													run: (*parser).callonContinuedListItemContent414,
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 1920, col: 29, offset: 68473},
																														expr: &charClassMatcher{
																															pos:        position{line: 1920, col: 29, offset: 68473},
																															val:        "[^\\r\\n]",
																															chars:      []rune{'\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 903, col: 21, offset: 29486},
																									run: (*parser).callonContinuedListItemContent422,
																									expr: &seqExpr{
																										pos: position{line: 903, col: 21, offset: 29486},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 903, col: 21, offset: 29486},
																												expr: &choiceExpr{
																													pos: position{line: 1654, col: 19, offset: 59095},
																													alternatives: []interface{}{
																														&seqExpr{
																															pos: position{line: 1654, col: 19, offset: 59095},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 1654, col: 19, offset: 59095},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2213, col: 13, offset: 78116},
																																		val:        "[0-9\\pL]",
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 2077, col: 26, offset: 73358},
																																	val:        "....",
																																	ignoreCase: false,
																																	want:       "\"....\"",
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 1839, col: 25, offset: 65436},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 1839, col: 25, offset: 65436},
																																	val:        "```",
																																	ignoreCase: false,
																																	want:       "\"```\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 1839, col: 31, offset: 65442},
																																	expr: &choiceExpr{
																																		pos: position{line: 2271, col: 10, offset: 79961},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2271, col: 10, offset: 79961},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2271, col: 16, offset: 79967},
																																				run: (*parser).callonContinuedListItemContent435,
																																				expr: &litMatcher{
																																					pos:        position{line: 2271, col: 16, offset: 79967},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2279, col: 8, offset: 80059},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2275, col: 12, offset: 80019},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2275, col: 21, offset: 80028},
																																			val:        "[\\r\\n]",
																																			chars:      []rune{'\r', '\n'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&notExpr{
																																			pos: position{line: 2277, col: 8, offset: 80048},
																																			expr: &anyMatcher{
																																				line: 2277, col: 9, offset: 80049,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 1856, col: 26, offset: 66120},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 1856, col: 26, offset: 66120},
																																	val:        "----",
																																	ignoreCase: false,
																																	want:       "\"----\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 1856, col: 33, offset: 66127},
																																	expr: &choiceExpr{
																																		pos: position{line: 2271, col: 10, offset: 79961},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2271, col: 10, offset: 79961},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2271, col: 16, offset: 79967},
																																				run: (*parser).callonContinuedListItemContent447,
																																				expr: &litMatcher{
																																					pos:        position{line: 2271, col: 16, offset: 79967},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2279, col: 8, offset: 80059},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2275, col: 12, offset: 80019},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2275, col: 21, offset: 80028},
																																			val:        "[\\r\\n]",
																																			chars:      []rune{'\r', '\n'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&notExpr{
																																			pos: position{line: 2277, col: 8, offset: 80048},
																																			expr: &anyMatcher{
																																				line: 2277, col: 9, offset: 80049,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 1674, col: 26, offset: 59888},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 1674, col: 26, offset: 59888},
																																	val:        "====",
																																	ignoreCase: false,
																																	want:       "\"====\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 1674, col: 33, offset: 59895},
																																	expr: &choiceExpr{
																																		pos: position{line: 2271, col: 10, offset: 79961},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2271, col: 10, offset: 79961},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2271, col: 16, offset: 79967},
																																				run: (*parser).callonContinuedListItemContent459,
																																				expr: &litMatcher{
																																					pos:        position{line: 2271, col: 16, offset: 79967},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2279, col: 8, offset: 80059},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2275, col: 12, offset: 80019},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2275, col: 21, offset: 80028},
																																			val:        "[\\r\\n]",
																																			chars:      []rune{'\r', '\n'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&notExpr{
																																			pos: position{line: 2277, col: 8, offset: 80048},
																																			expr: &anyMatcher{
																																				line: 2277, col: 9, offset: 80049,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 1902, col: 26, offset: 67906},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 1902, col: 26, offset: 67906},
																																	val:        "////",
																																	ignoreCase: false,
																																	want:       "\"////\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 1902, col: 33, offset: 67913},
																																	expr: &choiceExpr{
																																		pos: position{line: 2271, col: 10, offset: 79961},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2271, col: 10, offset: 79961},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2271, col: 16, offset: 79967},
																																				run: (*parser).callonContinuedListItemContent471,
																																				expr: &litMatcher{
																																					pos:        position{line: 2271, col: 16, offset: 79967},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2279, col: 8, offset: 80059},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2275, col: 12, offset: 80019},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2275, col: 21, offset: 80028},
																																			val:        "[\\r\\n]",
																																			chars:      []rune{'\r', '\n'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&notExpr{
																																			pos: position{line: 2277, col: 8, offset: 80048},
																																			expr: &anyMatcher{
																																				line: 2277, col: 9, offset: 80049,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 1736, col: 24, offset: 61955},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 1736, col: 24, offset: 61955},
																																	val:        "____",
																																	ignoreCase: false,
																																	want:       "\"____\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 1736, col: 31, offset: 61962},
																																	expr: &choiceExpr{
																																		pos: position{line: 2271, col: 10, offset: 79961},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2271, col: 10, offset: 79961},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2271, col: 16, offset: 79967},
																																				run: (*parser).callonContinuedListItemContent483,
																																				expr: &litMatcher{
																																					pos:        position{line: 2271, col: 16, offset: 79967},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2279, col: 8, offset: 80059},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2275, col: 12, offset: 80019},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2275, col: 21, offset: 80028},
																																			val:        "[\\r\\n]",
																																			chars:      []rune{'\r', '\n'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&notExpr{
																																			pos: position{line: 2277, col: 8, offset: 80048},
																																			expr: &anyMatcher{
																																				line: 2277, col: 9, offset: 80049,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 1788, col: 26, offset: 63733},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 1788, col: 26, offset: 63733},
																																	val:        "****",
																																	ignoreCase: false,
																																	want:       "\"****\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 1788, col: 33, offset: 63740},
																																	expr: &choiceExpr{
																																		pos: position{line: 2271, col: 10, offset: 79961},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2271, col: 10, offset: 79961},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2271, col: 16, offset: 79967},
																																				run: (*parser).callonContinuedListItemContent495,
																																				expr: &litMatcher{
																																					pos:        position{line: 2271, col: 16, offset: 79967},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2279, col: 8, offset: 80059},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2275, col: 12, offset: 80019},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2275, col: 21, offset: 80028},
																																			val:        "[\\r\\n]",
																																			chars:      []rune{'\r', '\n'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&notExpr{
																																			pos: position{line: 2277, col: 8, offset: 80048},
																																			expr: &anyMatcher{
																																				line: 2277, col: 9, offset: 80049,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&seqExpr{
																															pos: position{line: 1889, col: 30, offset: 67449},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 1889, col: 30, offset: 67449},
																																	val:        "++++",
																																	ignoreCase: false,
																																	want:       "\"++++\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 1889, col: 37, offset: 67456},
																																	expr: &choiceExpr{
																																		pos: position{line: 2271, col: 10, offset: 79961},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2271, col: 10, offset: 79961},
																																				val:        " ",
																																				ignoreCase: false,
																																				want:       "\" \"",
																																			},
																																			&actionExpr{
																																				pos: position{line: 2271, col: 16, offset: 79967},
																																				run: (*parser).callonContinuedListItemContent507,
																																				expr: &litMatcher{
																																					pos:        position{line: 2271, col: 16, offset: 79967},
																																					val:        "\t",
																																					ignoreCase: false,
																																					want:       "\"\\t\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2279, col: 8, offset: 80059},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2275, col: 12, offset: 80019},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2275, col: 21, offset: 80028},
																																			val:        "[\\r\\n]",
																																			chars:      []rune{'\r', '\n'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&notExpr{
																																			pos: position{line: 2277, col: 8, offset: 80048},
																																			expr: &anyMatcher{
																																				line: 2277, col: 9, offset: 80049,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 904, col: 5, offset: 29507},
																												label: "content",
																												expr: &actionExpr{
																													pos: position{line: 914, col: 28, offset: 29807},
																													run: (*parser).callonContinuedListItemContent515,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 914, col: 28, offset: 29807},
																														expr: &charClassMatcher{
																															pos:        position{line: 914, col: 28, offset: 29807},
																															val:        "[^\\r\\n]",
																															chars:      []rune{'\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 904, col: 43, offset: 29545},
																												run: (*parser).callonContinuedListItemContent523,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 946, col: 5, offset: 30952},
										run: (*parser).callonContinuedListItemContent524,
										expr: &labeledExpr{
											pos:   position{line: 946, col: 5, offset: 30952},
											label: "lines",
											expr: &actionExpr{
												pos: position{line: 950, col: 31, offset: 31112},
												run: (*parser).callonContinuedListItemContent526,
												expr: &seqExpr{
													pos: position{line: 950, col: 31, offset: 31112},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 950, col: 31, offset: 31112},
															label: "firstLine",
															expr: &actionExpr{
																pos: position{line: 929, col: 5, offset: 30339},
																run: (*parser).callonContinuedListItemContent529,
																expr: &seqExpr{
																	pos: position{line: 929, col: 5, offset: 30339},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 929, col: 5, offset: 30339},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 929, col: 14, offset: 30348},
																				run: (*parser).callonContinuedListItemContent532,
																				expr: &seqExpr{
																					pos: position{line: 929, col: 14, offset: 30348},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 929, col: 14, offset: 30348},
																							label: "elements",
																							expr: &choiceExpr{
																								pos: position{line: 2225, col: 5, offset: 78563},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2225, col: 5, offset: 78563},
																										run: (*parser).callonContinuedListItemContent536,
																										expr: &seqExpr{
																											pos: position{line: 2225, col: 5, offset: 78563},
																											exprs: []interface{}{
																												&oneOrMoreExpr{
																													pos: position{line: 2225, col: 5, offset: 78563},
																													expr: &charClassMatcher{
																														pos:        position{line: 2225, col: 5, offset: 78563},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&andExpr{
																													pos: position{line: 2225, col: 15, offset: 78573},
																													expr: &choiceExpr{
																														pos: position{line: 2225, col: 17, offset: 78575},
																														alternatives: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 2225, col: 17, offset: 78575},
																																val:        "[\\r\\n ,]]",
																																chars:      []rune{'\r', '\n', ' ', ',', ']'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&notExpr{
																																pos: position{line: 2277, col: 8, offset: 80048},
																																expr: &anyMatcher{
																																	line: 2277, col: 9, offset: 80049,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2227, col: 9, offset: 78658},
																										run: (*parser).callonContinuedListItemContent545,
																										expr: &seqExpr{
																											pos: position{line: 2227, col: 9, offset: 78658},
																											exprs: []interface{}{
																												&oneOrMoreExpr{
																													pos: position{line: 2227, col: 9, offset: 78658},
																													expr: &charClassMatcher{
																														pos:        position{line: 2227, col: 9, offset: 78658},
																														val:        "[0-9\\pL]",
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 2227, col: 19, offset: 78668},
																													expr: &seqExpr{
																														pos: position{line: 2227, col: 20, offset: 78669},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 2227, col: 20, offset: 78669},
																																val:        "[=*_`]",
																																chars:      []rune{'=', '*', '_', '`'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&oneOrMoreExpr{
																																pos: position{line: 2227, col: 27, offset: 78676},
																																expr: &charClassMatcher{
																																	pos:        position{line: 2227, col: 27, offset: 78676},
																																	val:        "[0-9\\pL]",
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 929, col: 28, offset: 30362},
																							expr: &charClassMatcher{
																								pos:        position{line: 929, col: 28, offset: 30362},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2279, col: 8, offset: 80059},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2275, col: 12, offset: 80019},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2275, col: 21, offset: 80028},
																					val:        "[\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&notExpr{
																					pos: position{line: 2277, col: 8, offset: 80048},
																					expr: &anyMatcher{
																						line: 2277, col: 9, offset: 80049,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 950, col: 65, offset: 31146},
															label: "otherLines",
															expr: &zeroOrMoreExpr{
																pos: position{line: 950, col: 76, offset: 31157},
																expr: &actionExpr{
																	pos: position{line: 950, col: 77, offset: 31158},
																	run: (*parser).callonContinuedListItemContent563,
																	expr: &seqExpr{
																		pos: position{line: 950, col: 77, offset: 31158},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 950, col: 77, offset: 31158},
																				expr: &seqExpr{
																					pos: position{line: 668, col: 25, offset: 21042},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 668, col: 25, offset: 21042},
																							val:        "+",
																							ignoreCase: false,
																							want:       "\"+\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 668, col: 29, offset: 21046},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonContinuedListItemContent571,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2275, col: 12, offset: 80019},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 950, col: 99, offset: 31180},
																				label: "line",
																				expr: &choiceExpr{
																					pos: position{line: 950, col: 105, offset: 31186},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 1916, col: 22, offset: 68317},
																							run: (*parser).callonContinuedListItemContent578,
																							expr: &seqExpr{
																								pos: position{line: 1916, col: 22, offset: 68317},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 1916, col: 22, offset: 68317},
																										expr: &seqExpr{
																											pos: position{line: 1902, col: 26, offset: 67906},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 1902, col: 26, offset: 67906},
																													val:        "////",
																													ignoreCase: false,
																													want:       "\"////\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 1902, col: 33, offset: 67913},
																													expr: &choiceExpr{
																														pos: position{line: 2271, col: 10, offset: 79961},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2271, col: 10, offset: 79961},
																																val:        " ",
																																ignoreCase: false,
																																want:       "\" \"",
																															},
																															&actionExpr{
																																pos: position{line: 2271, col: 16, offset: 79967},
																																run: (*parser).callonContinuedListItemContent586,
																																expr: &litMatcher{
																																	pos:        position{line: 2271, col: 16, offset: 79967},
																																	val:        "\t",
																																	ignoreCase: false,
																																	want:       "\"\\t\"",
																																},
																															},
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2279, col: 8, offset: 80059},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2275, col: 12, offset: 80019},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&charClassMatcher{
																															pos:        position{line: 2275, col: 21, offset: 80028},
																															val:        "[\\r\\n]",
																															chars:      []rune{'\r', '\n'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&notExpr{
																															pos: position{line: 2277, col: 8, offset: 80048},
																															expr: &anyMatcher{
																																line: 2277, col: 9, offset: 80049,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 1916, col: 45, offset: 68340},
																										val:        "//",
																										ignoreCase: false,
																										want:       "\"//\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 1916, col: 50, offset: 68345},
																										label: "content",
																										expr: &actionExpr{
																											pos: position{line: 1920, col: 29, offset: 68473},
																											run: (*parser).callonContinuedListItemContent595,
																											expr: &zeroOrMoreExpr{
																												pos: position{line: 1920, col: 29, offset: 68473},
																												expr: &charClassMatcher{
																													pos:        position{line: 1920, col: 29, offset: 68473},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 903, col: 21, offset: 29486},
																							run: (*parser).callonContinuedListItemContent603,
																							expr: &seqExpr{
																								pos: position{line: 903, col: 21, offset: 29486},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 903, col: 21, offset: 29486},
																										expr: &choiceExpr{
																											pos: position{line: 1654, col: 19, offset: 59095},
																											alternatives: []interface{}{
																												&seqExpr{
																													pos: position{line: 1654, col: 19, offset: 59095},
																													exprs: []interface{}{
																														&notExpr{
																															pos: position{line: 1654, col: 19, offset: 59095},
																															expr: &charClassMatcher{
																																pos:        position{line: 2213, col: 13, offset: 78116},
																																val:        "[0-9\\pL]",
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 2077, col: 26, offset: 73358},
																															val:        "....",
																															ignoreCase: false,
																															want:       "\"....\"",
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 1839, col: 25, offset: 65436},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 1839, col: 25, offset: 65436},
																															val:        "```",
																															ignoreCase: false,
																															want:       "\"```\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1839, col: 31, offset: 65442},
																															expr: &choiceExpr{
																																pos: position{line: 2271, col: 10, offset: 79961},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2271, col: 10, offset: 79961},
																																		val:        " ",
																																		ignoreCase: false,
																																		want:       "\" \"",
																																	},
																																	&actionExpr{
																																		pos: position{line: 2271, col: 16, offset: 79967},
																																		run: (*parser).callonContinuedListItemContent616,
																																		expr: &litMatcher{
																																			pos:        position{line: 2271, col: 16, offset: 79967},
																																			val:        "\t",
																																			ignoreCase: false,
																																			want:       "\"\\t\"",
																																		},
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 2279, col: 8, offset: 80059},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2275, col: 12, offset: 80019},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2275, col: 21, offset: 80028},
																																	val:        "[\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&notExpr{
																																	pos: position{line: 2277, col: 8, offset: 80048},
																																	expr: &anyMatcher{
																																		line: 2277, col: 9, offset: 80049,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 1856, col: 26, offset: 66120},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 1856, col: 26, offset: 66120},
																															val:        "----",
																															ignoreCase: false,
																															want:       "\"----\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1856, col: 33, offset: 66127},
																															expr: &choiceExpr{
																																pos: position{line: 2271, col: 10, offset: 79961},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2271, col: 10, offset: 79961},
																																		val:        " ",
																																		ignoreCase: false,
																																		want:       "\" \"",
																																	},
																																	&actionExpr{
																																		pos: position{line: 2271, col: 16, offset: 79967},
																																		run: (*parser).callonContinuedListItemContent628,
																																		expr: &litMatcher{
																																			pos:        position{line: 2271, col: 16, offset: 79967},
																																			val:        "\t",
																																			ignoreCase: false,
																																			want:       "\"\\t\"",
																																		},
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 2279, col: 8, offset: 80059},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2275, col: 12, offset: 80019},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2275, col: 21, offset: 80028},
																																	val:        "[\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&notExpr{
																																	pos: position{line: 2277, col: 8, offset: 80048},
																																	expr: &anyMatcher{
																																		line: 2277, col: 9, offset: 80049,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 1674, col: 26, offset: 59888},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 1674, col: 26, offset: 59888},
																															val:        "====",
																															ignoreCase: false,
																															want:       "\"====\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1674, col: 33, offset: 59895},
																															expr: &choiceExpr{
																																pos: position{line: 2271, col: 10, offset: 79961},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2271, col: 10, offset: 79961},
																																		val:        " ",
																																		ignoreCase: false,
																																		want:       "\" \"",
																																	},
																																	&actionExpr{
																																		pos: position{line: 2271, col: 16, offset: 79967},
																																		run: (*parser).callonContinuedListItemContent640,
																																		expr: &litMatcher{
																																			pos:        position{line: 2271, col: 16, offset: 79967},
																																			val:        "\t",
																																			ignoreCase: false,
																																			want:       "\"\\t\"",
																																		},
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 2279, col: 8, offset: 80059},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2275, col: 12, offset: 80019},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2275, col: 21, offset: 80028},
																																	val:        "[\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&notExpr{
																																	pos: position{line: 2277, col: 8, offset: 80048},
																																	expr: &anyMatcher{
																																		line: 2277, col: 9, offset: 80049,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 1902, col: 26, offset: 67906},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 1902, col: 26, offset: 67906},
																															val:        "////",
																															ignoreCase: false,
																															want:       "\"////\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1902, col: 33, offset: 67913},
																															expr: &choiceExpr{
																																pos: position{line: 2271, col: 10, offset: 79961},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2271, col: 10, offset: 79961},
																																		val:        " ",
																																		ignoreCase: false,
																																		want:       "\" \"",
																																	},
																																	&actionExpr{
																																		pos: position{line: 2271, col: 16, offset: 79967},
																																		run: (*parser).callonContinuedListItemContent652,
																																		expr: &litMatcher{
																																			pos:        position{line: 2271, col: 16, offset: 79967},
																																			val:        "\t",
																																			ignoreCase: false,
																																			want:       "\"\\t\"",
																																		},
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 2279, col: 8, offset: 80059},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2275, col: 12, offset: 80019},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2275, col: 21, offset: 80028},
																																	val:        "[\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&notExpr{
																																	pos: position{line: 2277, col: 8, offset: 80048},
																																	expr: &anyMatcher{
																																		line: 2277, col: 9, offset: 80049,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 1736, col: 24, offset: 61955},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 1736, col: 24, offset: 61955},
																															val:        "____",
																															ignoreCase: false,
																															want:       "\"____\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1736, col: 31, offset: 61962},
																															expr: &choiceExpr{
																																pos: position{line: 2271, col: 10, offset: 79961},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2271, col: 10, offset: 79961},
																																		val:        " ",
																																		ignoreCase: false,
																																		want:       "\" \"",
																																	},
																																	&actionExpr{
																																		pos: position{line: 2271, col: 16, offset: 79967},
																																		run: (*parser).callonContinuedListItemContent664,
																																		expr: &litMatcher{
																																			pos:        position{line: 2271, col: 16, offset: 79967},
																																			val:        "\t",
																																			ignoreCase: false,
																																			want:       "\"\\t\"",
																																		},
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 2279, col: 8, offset: 80059},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2275, col: 12, offset: 80019},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2275, col: 21, offset: 80028},
																																	val:        "[\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&notExpr{
																																	pos: position{line: 2277, col: 8, offset: 80048},
																																	expr: &anyMatcher{
																																		line: 2277, col: 9, offset: 80049,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 1788, col: 26, offset: 63733},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 1788, col: 26, offset: 63733},
																															val:        "****",
																															ignoreCase: false,
																															want:       "\"****\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1788, col: 33, offset: 63740},
																															expr: &choiceExpr{
																																pos: position{line: 2271, col: 10, offset: 79961},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2271, col: 10, offset: 79961},
																																		val:        " ",
																																		ignoreCase: false,
																																		want:       "\" \"",
																																	},
																																	&actionExpr{
																																		pos: position{line: 2271, col: 16, offset: 79967},
																																		run: (*parser).callonContinuedListItemContent676,
																																		expr: &litMatcher{
																																			pos:        position{line: 2271, col: 16, offset: 79967},
																																			val:        "\t",
																																			ignoreCase: false,
																																			want:       "\"\\t\"",
																																		},
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 2279, col: 8, offset: 80059},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2275, col: 12, offset: 80019},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2275, col: 21, offset: 80028},
																																	val:        "[\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&notExpr{
																																	pos: position{line: 2277, col: 8, offset: 80048},
																																	expr: &anyMatcher{
																																		line: 2277, col: 9, offset: 80049,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 1889, col: 30, offset: 67449},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 1889, col: 30, offset: 67449},
																															val:        "++++",
																															ignoreCase: false,
																															want:       "\"++++\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1889, col: 37, offset: 67456},
																															expr: &choiceExpr{
																																pos: position{line: 2271, col: 10, offset: 79961},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2271, col: 10, offset: 79961},
																																		val:        " ",
																																		ignoreCase: false,
																																		want:       "\" \"",
																																	},
																																	&actionExpr{
																																		pos: position{line: 2271, col: 16, offset: 79967},
																																		run: (*parser).callonContinuedListItemContent688,
																																		expr: &litMatcher{
																																			pos:        position{line: 2271, col: 16, offset: 79967},
																																			val:        "\t",
																																			ignoreCase: false,
																																			want:       "\"\\t\"",
																																		},
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 2279, col: 8, offset: 80059},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2275, col: 12, offset: 80019},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2275, col: 21, offset: 80028},
																																	val:        "[\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&notExpr{
																																	pos: position{line: 2277, col: 8, offset: 80048},
																																	expr: &anyMatcher{
																																		line: 2277, col: 9, offset: 80049,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 904, col: 5, offset: 29507},
																										label: "content",
																										expr: &actionExpr{
																											pos: position{line: 914, col: 28, offset: 29807},
																											run: (*parser).callonContinuedListItemContent696,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 914, col: 28, offset: 29807},
																												expr: &charClassMatcher{
																													pos:        position{line: 914, col: 28, offset: 29807},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 904, col: 43, offset: 29545},
																										run: (*parser).callonContinuedListItemContent704,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 696, col: 1, offset: 21893},
			expr: &actionExpr{
				pos: position{line: 696, col: 20, offset: 21912},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 696, col: 20, offset: 21912},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 696, col: 20, offset: 21912},
							label: "prefix",
							expr: &actionExpr{
								pos: position{line: 701, col: 5, offset: 22141},
								run: (*parser).callonOrderedListItem4,
								expr: &seqExpr{
									pos: position{line: 701, col: 5, offset: 22141},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 701, col: 5, offset: 22141},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonOrderedListItem9,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 701, col: 12, offset: 22148},
											label: "prefix",
											expr: &choiceExpr{
												pos: position{line: 703, col: 9, offset: 22211},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 703, col: 9, offset: 22211},
														run: (*parser).callonOrderedListItem13,
														expr: &seqExpr{
															pos: position{line: 703, col: 9, offset: 22211},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 703, col: 9, offset: 22211},
																	label: "depth",
																	expr: &actionExpr{
																		pos: position{line: 703, col: 16, offset: 22218},
																		run: (*parser).callonOrderedListItem16,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 703, col: 16, offset: 22218},
																			expr: &litMatcher{
																				pos:        position{line: 703, col: 17, offset: 22219},
																				val:        ".",
																				ignoreCase: false,
																				want:       "\".\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 707, col: 9, offset: 22319},
																	run: (*parser).callonOrderedListItem19,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 726, col: 11, offset: 23036},
														run: (*parser).callonOrderedListItem20,
														expr: &seqExpr{
															pos: position{line: 726, col: 11, offset: 23036},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 726, col: 11, offset: 23036},
																	expr: &charClassMatcher{
																		pos:        position{line: 726, col: 12, offset: 23037},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&litMatcher{
																	pos:        position{line: 726, col: 20, offset: 23045},
																	val:        ".",
																	ignoreCase: false,
																	want:       "\".\"",
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 728, col: 13, offset: 23156},
														run: (*parser).callonOrderedListItem25,
														expr: &seqExpr{
															pos: position{line: 728, col: 13, offset: 23156},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 728, col: 14, offset: 23157},
																	val:        "[a-z]",
																	ranges:     []rune{'a', 'z'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&litMatcher{
																	pos:        position{line: 728, col: 21, offset: 23164},
																	val:        ".",
																	ignoreCase: false,
																	want:       "\".\"",
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 730, col: 13, offset: 23278},
														run: (*parser).callonOrderedListItem29,
														expr: &seqExpr{
															pos: position{line: 730, col: 13, offset: 23278},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 730, col: 14, offset: 23279},
																	val:        "[A-Z]",
																	ranges:     []rune{'A', 'Z'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&litMatcher{
																	pos:        position{line: 730, col: 21, offset: 23286},
																	val:        ".",
																	ignoreCase: false,
																	want:       "\".\"",
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 732, col: 13, offset: 23400},
														run: (*parser).callonOrderedListItem33,
														expr: &seqExpr{
															pos: position{line: 732, col: 13, offset: 23400},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 732, col: 13, offset: 23400},
																	expr: &charClassMatcher{
																		pos:        position{line: 732, col: 14, offset: 23401},
																		val:        "[ivxdlcm]",
																		chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&litMatcher{
																	pos:        position{line: 732, col: 26, offset: 23413},
																	val:        ")",
																	ignoreCase: false,
																	want:       "\")\"",
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 734, col: 13, offset: 23527},
														run: (*parser).callonOrderedListItem38,
														expr: &seqExpr{
															pos: position{line: 734, col: 13, offset: 23527},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 734, col: 13, offset: 23527},
																	expr: &charClassMatcher{
																		pos:        position{line: 734, col: 14, offset: 23528},
																		val:        "[IVXDLCM]",
																		chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&litMatcher{
																	pos:        position{line: 734, col: 26, offset: 23540},
																	val:        ")",
																	ignoreCase: false,
																	want:       "\")\"",
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 736, col: 12, offset: 23653},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonOrderedListItem46,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 696, col: 51, offset: 21943},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 696, col: 60, offset: 21952},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 740, col: 1, offset: 23688},
			expr: &actionExpr{
				pos: position{line: 740, col: 27, offset: 23714},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 740, col: 27, offset: 23714},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 740, col: 37, offset: 23724},
						expr: &ruleRefExpr{
							pos:  position{line: 740, col: 37, offset: 23724},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 747, col: 1, offset: 23924},
			expr: &actionExpr{
				pos: position{line: 748, col: 5, offset: 23950},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 748, col: 5, offset: 23950},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 748, col: 5, offset: 23950},
							label: "prefix",
							expr: &actionExpr{
								pos: position{line: 755, col: 5, offset: 24261},
								run: (*parser).callonUnorderedListItem4,
								expr: &seqExpr{
									pos: position{line: 755, col: 5, offset: 24261},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 755, col: 5, offset: 24261},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonUnorderedListItem9,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 755, col: 12, offset: 24268},
											label: "prefix",
											expr: &choiceExpr{
												pos: position{line: 755, col: 20, offset: 24276},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 757, col: 9, offset: 24333},
														run: (*parser).callonUnorderedListItem13,
														expr: &seqExpr{
															pos: position{line: 757, col: 9, offset: 24333},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 757, col: 9, offset: 24333},
																	label: "depth",
																	expr: &actionExpr{
																		pos: position{line: 757, col: 16, offset: 24340},
																		run: (*parser).callonUnorderedListItem16,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 757, col: 16, offset: 24340},
																			expr: &litMatcher{
																				pos:        position{line: 757, col: 17, offset: 24341},
																				val:        "*",
																				ignoreCase: false,
																				want:       "\"*\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 761, col: 9, offset: 24441},
																	run: (*parser).callonUnorderedListItem19,
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 778, col: 14, offset: 25148},
														label: "depth",
														expr: &actionExpr{
															pos: position{line: 778, col: 21, offset: 25155},
															run: (*parser).callonUnorderedListItem21,
															expr: &litMatcher{
																pos:        position{line: 778, col: 22, offset: 25156},
																val:        "-",
																ignoreCase: false,
																want:       "\"-\"",
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 780, col: 13, offset: 25242},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonUnorderedListItem26,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 749, col: 5, offset: 23988},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 749, col: 16, offset: 23999},
								expr: &actionExpr{
									pos: position{line: 784, col: 32, offset: 25309},
									run: (*parser).callonUnorderedListItem30,
									expr: &seqExpr{
										pos: position{line: 784, col: 32, offset: 25309},
										exprs: []interface{}{
											&andExpr{
												pos: position{line: 784, col: 32, offset: 25309},
												expr: &litMatcher{
													pos:        position{line: 784, col: 33, offset: 25310},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 784, col: 37, offset: 25314},
												label: "style",
												expr: &choiceExpr{
													pos: position{line: 785, col: 7, offset: 25328},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 785, col: 7, offset: 25328},
															run: (*parser).callonUnorderedListItem36,
															expr: &litMatcher{
																pos:        position{line: 785, col: 7, offset: 25328},
																val:        "[ ]",
																ignoreCase: false,
																want:       "\"[ ]\"",
															},
														},
														&actionExpr{
															pos: position{line: 786, col: 7, offset: 25373},
															run: (*parser).callonUnorderedListItem38,
															expr: &litMatcher{
																pos:        position{line: 786, col: 7, offset: 25373},
																val:        "[*]",
																ignoreCase: false,
																want:       "\"[*]\"",
															},
														},
														&actionExpr{
															pos: position{line: 787, col: 7, offset: 25416},
															run: (*parser).callonUnorderedListItem40,
															expr: &litMatcher{
																pos:        position{line: 787, col: 7, offset: 25416},
																val:        "[x]",
																ignoreCase: false,
																want:       "\"[x]\"",
															},
														},
													},
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 788, col: 7, offset: 25458},
												expr: &choiceExpr{
													pos: position{line: 2271, col: 10, offset: 79961},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2271, col: 10, offset: 79961},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2271, col: 16, offset: 79967},
															run: (*parser).callonUnorderedListItem45,
															expr: &litMatcher{
																pos:        position{line: 2271, col: 16, offset: 79967},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 750, col: 5, offset: 24035},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 14, offset: 24044},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 792, col: 1, offset: 25500},
			expr: &actionExpr{
				pos: position{line: 792, col: 29, offset: 25528},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 792, col: 29, offset: 25528},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 792, col: 39, offset: 25538},
						expr: &ruleRefExpr{
							pos:  position{line: 792, col: 39, offset: 25538},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 799, col: 1, offset: 25854},
			expr: &actionExpr{
				pos: position{line: 799, col: 20, offset: 25873},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 799, col: 20, offset: 25873},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 799, col: 20, offset: 25873},
							label: "term",
							expr: &actionExpr{
								pos: position{line: 806, col: 32, offset: 26286},
								run: (*parser).callonLabeledListItem4,
								expr: &labeledExpr{
									pos:   position{line: 806, col: 32, offset: 26286},
									label: "content",
									expr: &actionExpr{
										pos: position{line: 806, col: 42, offset: 26296},
										run: (*parser).callonLabeledListItem6,
										expr: &oneOrMoreExpr{
											pos: position{line: 806, col: 42, offset: 26296},
											expr: &choiceExpr{
												pos: position{line: 805, col: 33, offset: 26234},
												alternatives: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 805, col: 33, offset: 26234},
														expr: &charClassMatcher{
															pos:        position{line: 805, col: 33, offset: 26234},
															val:        "[^:\\r\\n]",
															chars:      []rune{':', '\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&seqExpr{
														pos: position{line: 805, col: 45, offset: 26246},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 805, col: 45, offset: 26246},
																val:        ":",
																ignoreCase: false,
																want:       "\":\"",
															},
															&notExpr{
																pos: position{line: 805, col: 49, offset: 26250},
																expr: &litMatcher{
																	pos:        position{line: 805, col: 50, offset: 26251},
																	val:        ":",
																	ignoreCase: false,
																	want:       "\":\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 799, col: 55, offset: 25908},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 838, col: 5, offset: 27176},
								run: (*parser).callonLabeledListItem16,
								expr: &seqExpr{
									pos: position{line: 838, col: 5, offset: 27176},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 838, col: 5, offset: 27176},
											label: "separator",
											expr: &actionExpr{
												pos: position{line: 838, col: 16, offset: 27187},
												run: (*parser).callonLabeledListItem19,
												expr: &oneOrMoreExpr{
													pos: position{line: 838, col: 16, offset: 27187},
													expr: &litMatcher{
														pos:        position{line: 838, col: 17, offset: 27188},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 841, col: 5, offset: 27246},
											run: (*parser).callonLabeledListItem22,
										},
										&choiceExpr{
											pos: position{line: 845, col: 6, offset: 27422},
											alternatives: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 845, col: 6, offset: 27422},
													expr: &choiceExpr{
														pos: position{line: 845, col: 7, offset: 27423},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2271, col: 10, offset: 79961},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2271, col: 16, offset: 79967},
																run: (*parser).callonLabeledListItem27,
																expr: &litMatcher{
																	pos:        position{line: 2271, col: 16, offset: 79967},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2275, col: 12, offset: 80019},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&charClassMatcher{
																pos:        position{line: 2275, col: 21, offset: 80028},
																val:        "[\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2275, col: 12, offset: 80019},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&charClassMatcher{
													pos:        position{line: 2275, col: 21, offset: 80028},
													val:        "[\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
												&notExpr{
													pos: position{line: 2277, col: 8, offset: 80048},
													expr: &anyMatcher{
														line: 2277, col: 9, offset: 80049,
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 799, col: 92, offset: 25945},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 799, col: 104, offset: 25957},
								expr: &ruleRefExpr{
									pos:  position{line: 799, col: 105, offset: 25958},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 813, col: 1, offset: 26471},
			expr: &actionExpr{
				pos: position{line: 813, col: 24, offset: 26494},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 813, col: 24, offset: 26494},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 813, col: 33, offset: 26503},
						expr: &seqExpr{
							pos: position{line: 813, col: 34, offset: 26504},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 813, col: 34, offset: 26504},
									expr: &choiceExpr{
										pos: position{line: 2275, col: 12, offset: 80019},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2275, col: 12, offset: 80019},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&charClassMatcher{
												pos:        position{line: 2275, col: 21, offset: 80028},
												val:        "[\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 813, col: 43, offset: 26513},
									expr: &litMatcher{
										pos:        position{line: 813, col: 44, offset: 26514},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 813, col: 49, offset: 26519},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 817, col: 1, offset: 26616},
			expr: &actionExpr{
				pos: position{line: 817, col: 31, offset: 26646},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 817, col: 31, offset: 26646},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 817, col: 40, offset: 26655},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 2225, col: 5, offset: 78563},
								run: (*parser).callonLabeledListItemTermElement4,
								expr: &seqExpr{
									pos: position{line: 2225, col: 5, offset: 78563},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2225, col: 5, offset: 78563},
											expr: &charClassMatcher{
												pos:        position{line: 2225, col: 5, offset: 78563},
												val:        "[0-9\\pL]",
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&andExpr{
											pos: position{line: 2225, col: 15, offset: 78573},
											expr: &choiceExpr{
												pos: position{line: 2225, col: 17, offset: 78575},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2225, col: 17, offset: 78575},
														val:        "[\\r\\n ,]]",
														chars:      []rune{'\r', '\n', ' ', ',', ']'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2227, col: 9, offset: 78658},
								run: (*parser).callonLabeledListItemTermElement13,
								expr: &seqExpr{
									pos: position{line: 2227, col: 9, offset: 78658},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2227, col: 9, offset: 78658},
											expr: &charClassMatcher{
												pos:        position{line: 2227, col: 9, offset: 78658},
												val:        "[0-9\\pL]",
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2227, col: 19, offset: 78668},
											expr: &seqExpr{
												pos: position{line: 2227, col: 20, offset: 78669},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2227, col: 20, offset: 78669},
														val:        "[=*_`]",
														chars:      []rune{'=', '*', '_', '`'},
														ignoreCase: false,
														inverted:   false,
													},
													&oneOrMoreExpr{
														pos: position{line: 2227, col: 27, offset: 78676},
														expr: &charClassMatcher{
															pos:        position{line: 2227, col: 27, offset: 78676},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 995, col: 14, offset: 32701},
								run: (*parser).callonLabeledListItemTermElement22,
								expr: &seqExpr{
									pos: position{line: 995, col: 14, offset: 32701},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 2271, col: 10, offset: 79961},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2271, col: 10, offset: 79961},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
												&actionExpr{
													pos: position{line: 2271, col: 16, offset: 79967},
													run: (*parser).callonLabeledListItemTermElement26,
													expr: &litMatcher{
														pos:        position{line: 2271, col: 16, offset: 79967},
														val:        "\t",
														ignoreCase: false,
														want:       "\"\\t\"",
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 995, col: 20, offset: 32707},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 995, col: 24, offset: 32711},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonLabeledListItemTermElement32,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 995, col: 31, offset: 32718},
											expr: &choiceExpr{
												pos: position{line: 2279, col: 8, offset: 80059},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
									},
								},
							},
							&oneOrMoreExpr{
								pos: position{line: 819, col: 11, offset: 26719},
								expr: &choiceExpr{
									pos: position{line: 2271, col: 10, offset: 79961},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2271, col: 10, offset: 79961},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
										&actionExpr{
											pos: position{line: 2271, col: 16, offset: 79967},
											run: (*parser).callonLabeledListItemTermElement43,
											expr: &litMatcher{
												pos:        position{line: 2271, col: 16, offset: 79967},
												val:        "\t",
												ignoreCase: false,
												want:       "\"\\t\"",
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 820, col: 11, offset: 26737},
								name: "CrossReference",
							},
							&actionExpr{
								pos: position{line: 2147, col: 23, offset: 75975},
								run: (*parser).callonLabeledListItemTermElement46,
								expr: &seqExpr{
									pos: position{line: 2147, col: 23, offset: 75975},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2147, col: 23, offset: 75975},
											val:        "(((",
											ignoreCase: false,
											want:       "\"(((\"",
										},
										&labeledExpr{
											pos:   position{line: 2147, col: 29, offset: 75981},
											label: "term1",
											expr: &actionExpr{
												pos: position{line: 2154, col: 30, offset: 76312},
												run: (*parser).callonLabeledListItemTermElement50,
												expr: &oneOrMoreExpr{
													pos: position{line: 2154, col: 30, offset: 76312},
													expr: &choiceExpr{
														pos: position{line: 2154, col: 31, offset: 76313},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2213, col: 13, offset: 78116},
																val:        "[ 0-9\\pL]",
																chars:      []rune{' '},
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&actionExpr{
																pos: position{line: 2271, col: 16, offset: 79967},
																run: (*parser).callonLabeledListItemTermElement54,
																expr: &litMatcher{
																	pos:        position{line: 2271, col: 16, offset: 79967},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2148, col: 5, offset: 76020},
											label: "term2",
											expr: &zeroOrOneExpr{
												pos: position{line: 2148, col: 11, offset: 76026},
												expr: &actionExpr{
													pos: position{line: 2148, col: 12, offset: 76027},
													run: (*parser).callonLabeledListItemTermElement58,
													expr: &seqExpr{
														pos: position{line: 2148, col: 12, offset: 76027},
														exprs: []interface{}{
															&zeroOrMoreExpr{
																pos: position{line: 2148, col: 12, offset: 76027},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonLabeledListItemTermElement63,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2148, col: 19, offset: 76034},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2148, col: 23, offset: 76038},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonLabeledListItemTermElement69,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 2148, col: 30, offset: 76045},
																label: "content",
																expr: &actionExpr{
																	pos: position{line: 2154, col: 30, offset: 76312},
																	run: (*parser).callonLabeledListItemTermElement72,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2154, col: 30, offset: 76312},
																		expr: &choiceExpr{
																			pos: position{line: 2154, col: 31, offset: 76313},
																			alternatives: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 2213, col: 13, offset: 78116},
																					val:        "[ 0-9\\pL]",
																					chars:      []rune{' '},
																					ranges:     []rune{'0', '9'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&actionExpr{
																					pos: position{line: 2271, col: 16, offset: 79967},
																					run: (*parser).callonLabeledListItemTermElement76,
																					expr: &litMatcher{
																						pos:        position{line: 2271, col: 16, offset: 79967},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2149, col: 5, offset: 76112},
											label: "term3",
											expr: &zeroOrOneExpr{
												pos: position{line: 2149, col: 11, offset: 76118},
												expr: &actionExpr{
													pos: position{line: 2149, col: 12, offset: 76119},
													run: (*parser).callonLabeledListItemTermElement80,
													expr: &seqExpr{
														pos: position{line: 2149, col: 12, offset: 76119},
														exprs: []interface{}{
															&zeroOrMoreExpr{
																pos: position{line: 2149, col: 12, offset: 76119},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonLabeledListItemTermElement85,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2149, col: 19, offset: 76126},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2149, col: 23, offset: 76130},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonLabeledListItemTermElement91,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 2149, col: 30, offset: 76137},
																label: "content",
																expr: &actionExpr{
																	pos: position{line: 2154, col: 30, offset: 76312},
																	run: (*parser).callonLabeledListItemTermElement94,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2154, col: 30, offset: 76312},
																		expr: &choiceExpr{
																			pos: position{line: 2154, col: 31, offset: 76313},
																			alternatives: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 2213, col: 13, offset: 78116},
																					val:        "[ 0-9\\pL]",
																					chars:      []rune{' '},
																					ranges:     []rune{'0', '9'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&actionExpr{
																					pos: position{line: 2271, col: 16, offset: 79967},
																					run: (*parser).callonLabeledListItemTermElement98,
																					expr: &litMatcher{
																						pos:        position{line: 2271, col: 16, offset: 79967},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2150, col: 5, offset: 76204},
											val:        ")))",
											ignoreCase: false,
											want:       "\")))\"",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 822, col: 11, offset: 26791},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 823, col: 11, offset: 26811},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 824, col: 11, offset: 26900},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 825, col: 11, offset: 26921},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 826, col: 11, offset: 26944},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 827, col: 11, offset: 26959},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 828, col: 11, offset: 26984},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 829, col: 11, offset: 27007},
								name: "QuotedText",
							},
							&actionExpr{
								pos: position{line: 2203, col: 21, offset: 77750},
								run: (*parser).callonLabeledListItemTermElement109,
								expr: &choiceExpr{
									pos: position{line: 1538, col: 27, offset: 54613},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 1538, col: 27, offset: 54613},
											run: (*parser).callonLabeledListItemTermElement111,
											expr: &seqExpr{
												pos: position{line: 1538, col: 27, offset: 54613},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1538, col: 27, offset: 54613},
														val:        "<<",
														ignoreCase: false,
														want:       "\"<<\"",
													},
													&labeledExpr{
														pos:   position{line: 1538, col: 32, offset: 54618},
														label: "id",
														expr: &actionExpr{
															pos: position{line: 2259, col: 7, offset: 79709},
															run: (*parser).callonLabeledListItemTermElement115,
															expr: &oneOrMoreExpr{
																pos: position{line: 2259, col: 7, offset: 79709},
																expr: &charClassMatcher{
																	pos:        position{line: 2259, col: 7, offset: 79709},
																	val:        "[^[]<>,]",
																	chars:      []rune{'[', ']', '<', '>', ','},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 1538, col: 40, offset: 54626},
														expr: &choiceExpr{
															pos: position{line: 2271, col: 10, offset: 79961},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2271, col: 10, offset: 79961},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2271, col: 16, offset: 79967},
																	run: (*parser).callonLabeledListItemTermElement121,
																	expr: &litMatcher{
																		pos:        position{line: 2271, col: 16, offset: 79967},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1538, col: 47, offset: 54633},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&labeledExpr{
														pos:   position{line: 1538, col: 51, offset: 54637},
														label: "label",
														expr: &oneOrMoreExpr{
															pos: position{line: 1548, col: 24, offset: 55025},
															expr: &choiceExpr{
																pos: position{line: 1549, col: 5, offset: 55031},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 1549, col: 6, offset: 55032},
																		run: (*parser).callonLabeledListItemTermElement127,
																		expr: &seqExpr{
																			pos: position{line: 1549, col: 6, offset: 55032},
																			exprs: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 1549, col: 6, offset: 55032},
																					val:        "[0-9\\pL]",
																					ranges:     []rune{'0', '9'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1549, col: 14, offset: 55040},
																					expr: &charClassMatcher{
																						pos:        position{line: 1549, col: 14, offset: 55040},
																						val:        "[^\\r\\n{<>]",
																						chars:      []rune{'\r', '\n', '{', '<', '>'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 214, col: 12, offset: 6782},
																		run: (*parser).callonLabeledListItemTermElement132,
																		expr: &seqExpr{
																			pos: position{line: 214, col: 12, offset: 6782},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 214, col: 12, offset: 6782},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 214, col: 16, offset: 6786},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 190, col: 18, offset: 6118},
																						run: (*parser).callonLabeledListItemTermElement136,
																						expr: &seqExpr{
																							pos: position{line: 190, col: 18, offset: 6118},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 190, col: 18, offset: 6118},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 190, col: 28, offset: 6128},
																									expr: &charClassMatcher{
																										pos:        position{line: 190, col: 29, offset: 6129},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 214, col: 35, offset: 6805},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1553, col: 6, offset: 55250},
																		run: (*parser).callonLabeledListItemTermElement142,
																		expr: &litMatcher{
																			pos:        position{line: 1553, col: 6, offset: 55250},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1538, col: 79, offset: 54665},
														val:        ">>",
														ignoreCase: false,
														want:       "\">>\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1540, col: 5, offset: 54730},
											run: (*parser).callonLabeledListItemTermElement145,
											expr: &seqExpr{
												pos: position{line: 1540, col: 5, offset: 54730},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1540, col: 5, offset: 54730},
														val:        "<<",
														ignoreCase: false,
														want:       "\"<<\"",
													},
													&labeledExpr{
														pos:   position{line: 1540, col: 10, offset: 54735},
														label: "id",
														expr: &actionExpr{
															pos: position{line: 2259, col: 7, offset: 79709},
															run: (*parser).callonLabeledListItemTermElement149,
															expr: &oneOrMoreExpr{
																pos: position{line: 2259, col: 7, offset: 79709},
																expr: &charClassMatcher{
																	pos:        position{line: 2259, col: 7, offset: 79709},
																	val:        "[^[]<>,]",
																	chars:      []rune{'[', ']', '<', '>', ','},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1540, col: 18, offset: 54743},
														val:        ">>",
														ignoreCase: false,
														want:       "\">>\"",
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2206, col: 9, offset: 77913},
								run: (*parser).callonLabeledListItemTermElement153,
								expr: &charClassMatcher{
									pos:        position{line: 2206, col: 10, offset: 77914},
									val:        "[<>&]",
									chars:      []rune{'<', '>', '&'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&actionExpr{
								pos: position{line: 2171, col: 15, offset: 76747},
								run: (*parser).callonLabeledListItemTermElement155,
								expr: &litMatcher{
									pos:        position{line: 2171, col: 15, offset: 76747},
									val:        "`'",
									ignoreCase: false,
									want:       "\"`'\"",
								},
							},
							&actionExpr{
								pos: position{line: 2177, col: 14, offset: 76854},
								run: (*parser).callonLabeledListItemTermElement157,
								expr: &litMatcher{
									pos:        position{line: 2177, col: 14, offset: 76854},
									val:        "(C)",
									ignoreCase: false,
									want:       "\"(C)\"",
								},
							},
							&actionExpr{
								pos: position{line: 2180, col: 14, offset: 76921},
								run: (*parser).callonLabeledListItemTermElement159,
								expr: &litMatcher{
									pos:        position{line: 2180, col: 14, offset: 76921},
									val:        "(TM)",
									ignoreCase: false,
									want:       "\"(TM)\"",
								},
							},
							&actionExpr{
								pos: position{line: 2183, col: 15, offset: 76990},
								run: (*parser).callonLabeledListItemTermElement161,
								expr: &litMatcher{
									pos:        position{line: 2183, col: 15, offset: 76990},
									val:        "(R)",
									ignoreCase: false,
									want:       "\"(R)\"",
								},
							},
							&actionExpr{
								pos: position{line: 2186, col: 13, offset: 77056},
								run: (*parser).callonLabeledListItemTermElement163,
								expr: &litMatcher{
									pos:        position{line: 2186, col: 13, offset: 77056},
									val:        "...",
									ignoreCase: false,
									want:       "\"...\"",
								},
							},
							&actionExpr{
								pos: position{line: 2194, col: 22, offset: 77354},
								run: (*parser).callonLabeledListItemTermElement165,
								expr: &seqExpr{
									pos: position{line: 2194, col: 22, offset: 77354},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 2213, col: 13, offset: 78116},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&litMatcher{
											pos:        position{line: 2194, col: 31, offset: 77363},
											val:        "'",
											ignoreCase: false,
											want:       "\"'\"",
										},
										&andExpr{
											pos: position{line: 2194, col: 35, offset: 77367},
											expr: &charClassMatcher{
												pos:        position{line: 2194, col: 36, offset: 77368},
												val:        "[\\pL]",
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 221, col: 25, offset: 7126},
								run: (*parser).callonLabeledListItemTermElement171,
								expr: &seqExpr{
									pos: position{line: 221, col: 25, offset: 7126},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 221, col: 25, offset: 7126},
											val:        "{counter:",
											ignoreCase: false,
											want:       "\"{counter:\"",
										},
										&labeledExpr{
											pos:   position{line: 221, col: 37, offset: 7138},
											label: "name",
											expr: &actionExpr{
												pos: position{line: 190, col: 18, offset: 6118},
												run: (*parser).callonLabeledListItemTermElement175,
												expr: &seqExpr{
													pos: position{line: 190, col: 18, offset: 6118},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 190, col: 18, offset: 6118},
															val:        "[_0-9\\pL]",
															chars:      []rune{'_'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
														&zeroOrMoreExpr{
															pos: position{line: 190, col: 28, offset: 6128},
															expr: &charClassMatcher{
																pos:        position{line: 190, col: 29, offset: 6129},
																val:        "[-0-9\\pL]",
																chars:      []rune{'-'},
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 221, col: 56, offset: 7157},
											label: "start",
											expr: &zeroOrOneExpr{
												pos: position{line: 221, col: 62, offset: 7163},
												expr: &actionExpr{
													pos: position{line: 229, col: 17, offset: 7426},
													run: (*parser).callonLabeledListItemTermElement182,
													expr: &seqExpr{
														pos: position{line: 229, col: 17, offset: 7426},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 229, col: 17, offset: 7426},
																val:        ":",
																ignoreCase: false,
																want:       "\":\"",
															},
															&labeledExpr{
																pos:   position{line: 229, col: 21, offset: 7430},
																label: "start",
																expr: &choiceExpr{
																	pos: position{line: 229, col: 28, offset: 7437},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 229, col: 28, offset: 7437},
																			run: (*parser).callonLabeledListItemTermElement187,
																			expr: &charClassMatcher{
																				pos:        position{line: 229, col: 28, offset: 7437},
																				val:        "[A-Za-z]",
																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&actionExpr{
																			pos: position{line: 231, col: 9, offset: 7491},
																			run: (*parser).callonLabeledListItemTermElement189,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 231, col: 9, offset: 7491},
																				expr: &charClassMatcher{
																					pos:        position{line: 231, col: 9, offset: 7491},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 221, col: 78, offset: 7179},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 225, col: 25, offset: 7281},
								run: (*parser).callonLabeledListItemTermElement193,
								expr: &seqExpr{
									pos: position{line: 225, col: 25, offset: 7281},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 225, col: 25, offset: 7281},
											val:        "{counter2:",
											ignoreCase: false,
											want:       "\"{counter2:\"",
										},
										&labeledExpr{
											pos:   position{line: 225, col: 38, offset: 7294},
											label: "name",
											expr: &actionExpr{
												pos: position{line: 190, col: 18, offset: 6118},
												run: (*parser).callonLabeledListItemTermElement197,
												expr: &seqExpr{
													pos: position{line: 190, col: 18, offset: 6118},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 190, col: 18, offset: 6118},
															val:        "[_0-9\\pL]",
															chars:      []rune{'_'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
														&zeroOrMoreExpr{
															pos: position{line: 190, col: 28, offset: 6128},
															expr: &charClassMatcher{
																pos:        position{line: 190, col: 29, offset: 6129},
																val:        "[-0-9\\pL]",
																chars:      []rune{'-'},
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 225, col: 57, offset: 7313},
											label: "start",
											expr: &zeroOrOneExpr{
												pos: position{line: 225, col: 63, offset: 7319},
												expr: &actionExpr{
													pos: position{line: 229, col: 17, offset: 7426},
													run: (*parser).callonLabeledListItemTermElement204,
													expr: &seqExpr{
														pos: position{line: 229, col: 17, offset: 7426},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 229, col: 17, offset: 7426},
																val:        ":",
																ignoreCase: false,
																want:       "\":\"",
															},
															&labeledExpr{
																pos:   position{line: 229, col: 21, offset: 7430},
																label: "start",
																expr: &choiceExpr{
																	pos: position{line: 229, col: 28, offset: 7437},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 229, col: 28, offset: 7437},
																			run: (*parser).callonLabeledListItemTermElement209,
																			expr: &charClassMatcher{
																				pos:        position{line: 229, col: 28, offset: 7437},
																				val:        "[A-Za-z]",
																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&actionExpr{
																			pos: position{line: 231, col: 9, offset: 7491},
																			run: (*parser).callonLabeledListItemTermElement211,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 231, col: 9, offset: 7491},
																				expr: &charClassMatcher{
																					pos:        position{line: 231, col: 9, offset: 7491},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 225, col: 79, offset: 7335},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 214, col: 12, offset: 6782},
								run: (*parser).callonLabeledListItemTermElement215,
								expr: &seqExpr{
									pos: position{line: 214, col: 12, offset: 6782},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 214, col: 12, offset: 6782},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
										&labeledExpr{
											pos:   position{line: 214, col: 16, offset: 6786},
											label: "name",
											expr: &actionExpr{
												pos: position{line: 190, col: 18, offset: 6118},
												run: (*parser).callonLabeledListItemTermElement219,
												expr: &seqExpr{
													pos: position{line: 190, col: 18, offset: 6118},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 190, col: 18, offset: 6118},
															val:        "[_0-9\\pL]",
															chars:      []rune{'_'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
														&zeroOrMoreExpr{
															pos: position{line: 190, col: 28, offset: 6128},
															expr: &charClassMatcher{
																pos:        position{line: 190, col: 29, offset: 6129},
																val:        "[-0-9\\pL]",
																chars:      []rune{'-'},
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 214, col: 35, offset: 6805},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2237, col: 12, offset: 79050},
								run: (*parser).callonLabeledListItemTermElement225,
								expr: &charClassMatcher{
									pos:        position{line: 2237, col: 12, offset: 79050},
									val:        "[^\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 849, col: 1, offset: 27483},
			expr: &actionExpr{
				pos: position{line: 849, col: 31, offset: 27513},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 849, col: 31, offset: 27513},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 849, col: 40, offset: 27522},
						expr: &ruleRefExpr{
							pos:  position{line: 849, col: 41, offset: 27523},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 967, col: 1, offset: 31735},
			expr: &actionExpr{
				pos: position{line: 968, col: 5, offset: 31758},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 968, col: 5, offset: 31758},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 968, col: 14, offset: 31767},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 2232, col: 5, offset: 78844},
								run: (*parser).callonInlineElement4,
								expr: &seqExpr{
									pos: position{line: 2232, col: 5, offset: 78844},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2232, col: 5, offset: 78844},
											expr: &charClassMatcher{
												pos:        position{line: 2232, col: 5, offset: 78844},
												val:        "[,?!;0-9\\pL]",
												chars:      []rune{',', '?', '!', ';'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&andExpr{
											pos: position{line: 2232, col: 19, offset: 78858},
											expr: &choiceExpr{
												pos: position{line: 2232, col: 21, offset: 78860},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2232, col: 21, offset: 78860},
														val:        "[\\r\\n ]",
														chars:      []rune{'\r', '\n', ' '},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2225, col: 5, offset: 78563},
								run: (*parser).callonInlineElement13,
								expr: &seqExpr{
									pos: position{line: 2225, col: 5, offset: 78563},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2225, col: 5, offset: 78563},
											expr: &charClassMatcher{
												pos:        position{line: 2225, col: 5, offset: 78563},
												val:        "[0-9\\pL]",
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&andExpr{
											pos: position{line: 2225, col: 15, offset: 78573},
											expr: &choiceExpr{
												pos: position{line: 2225, col: 17, offset: 78575},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2225, col: 17, offset: 78575},
														val:        "[\\r\\n ,]]",
														chars:      []rune{'\r', '\n', ' ', ',', ']'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2227, col: 9, offset: 78658},
								run: (*parser).callonInlineElement22,
								expr: &seqExpr{
									pos: position{line: 2227, col: 9, offset: 78658},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2227, col: 9, offset: 78658},
											expr: &charClassMatcher{
												pos:        position{line: 2227, col: 9, offset: 78658},
												val:        "[0-9\\pL]",
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2227, col: 19, offset: 78668},
											expr: &seqExpr{
												pos: position{line: 2227, col: 20, offset: 78669},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2227, col: 20, offset: 78669},
														val:        "[=*_`]",
														chars:      []rune{'=', '*', '_', '`'},
														ignoreCase: false,
														inverted:   false,
													},
													&oneOrMoreExpr{
														pos: position{line: 2227, col: 27, offset: 78676},
														expr: &charClassMatcher{
															pos:        position{line: 2227, col: 27, offset: 78676},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 995, col: 14, offset: 32701},
								run: (*parser).callonInlineElement31,
								expr: &seqExpr{
									pos: position{line: 995, col: 14, offset: 32701},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 2271, col: 10, offset: 79961},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2271, col: 10, offset: 79961},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
												&actionExpr{
													pos: position{line: 2271, col: 16, offset: 79967},
													run: (*parser).callonInlineElement35,
													expr: &litMatcher{
														pos:        position{line: 2271, col: 16, offset: 79967},
														val:        "\t",
														ignoreCase: false,
														want:       "\"\\t\"",
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 995, col: 20, offset: 32707},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 995, col: 24, offset: 32711},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonInlineElement41,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 995, col: 31, offset: 32718},
											expr: &choiceExpr{
												pos: position{line: 2279, col: 8, offset: 80059},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
									},
								},
							},
							&oneOrMoreExpr{
								pos: position{line: 970, col: 11, offset: 31873},
								expr: &choiceExpr{
									pos: position{line: 2271, col: 10, offset: 79961},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2271, col: 10, offset: 79961},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
										&actionExpr{
											pos: position{line: 2271, col: 16, offset: 79967},
											run: (*parser).callonInlineElement52,
											expr: &litMatcher{
												pos:        position{line: 2271, col: 16, offset: 79967},
												val:        "\t",
												ignoreCase: false,
												want:       "\"\\t\"",
											},
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 971, col: 11, offset: 31891},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 971, col: 11, offset: 31891},
										expr: &choiceExpr{
											pos: position{line: 2279, col: 8, offset: 80059},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2275, col: 12, offset: 80019},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&charClassMatcher{
													pos:        position{line: 2275, col: 21, offset: 80028},
													val:        "[\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
												&notExpr{
													pos: position{line: 2277, col: 8, offset: 80048},
													expr: &anyMatcher{
														line: 2277, col: 9, offset: 80049,
													},
												},
											},
										},
									},
									&choiceExpr{
										pos: position{line: 972, col: 13, offset: 31910},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 972, col: 13, offset: 31910},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 973, col: 15, offset: 31937},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 974, col: 15, offset: 31962},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 975, col: 15, offset: 31987},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 976, col: 15, offset: 32014},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 977, col: 15, offset: 32034},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 978, col: 15, offset: 32127},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 979, col: 15, offset: 32157},
												name: "CrossReference",
											},
											&actionExpr{
												pos: position{line: 2203, col: 21, offset: 77750},
												run: (*parser).callonInlineElement70,
												expr: &choiceExpr{
													pos: position{line: 1538, col: 27, offset: 54613},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 1538, col: 27, offset: 54613},
															run: (*parser).callonInlineElement72,
															expr: &seqExpr{
																pos: position{line: 1538, col: 27, offset: 54613},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1538, col: 27, offset: 54613},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1538, col: 32, offset: 54618},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2259, col: 7, offset: 79709},
																			run: (*parser).callonInlineElement76,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2259, col: 7, offset: 79709},
																				expr: &charClassMatcher{
																					pos:        position{line: 2259, col: 7, offset: 79709},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1538, col: 40, offset: 54626},
																		expr: &choiceExpr{
																			pos: position{line: 2271, col: 10, offset: 79961},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2271, col: 10, offset: 79961},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2271, col: 16, offset: 79967},
																					run: (*parser).callonInlineElement82,
																					expr: &litMatcher{
																						pos:        position{line: 2271, col: 16, offset: 79967},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1538, col: 47, offset: 54633},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1538, col: 51, offset: 54637},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1548, col: 24, offset: 55025},
																			expr: &choiceExpr{
																				pos: position{line: 1549, col: 5, offset: 55031},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 1549, col: 6, offset: 55032},
																						run: (*parser).callonInlineElement88,
																						expr: &seqExpr{
																							pos: position{line: 1549, col: 6, offset: 55032},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 1549, col: 6, offset: 55032},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 1549, col: 14, offset: 55040},
																									expr: &charClassMatcher{
																										pos:        position{line: 1549, col: 14, offset: 55040},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 214, col: 12, offset: 6782},
																						run: (*parser).callonInlineElement93,
																						expr: &seqExpr{
																							pos: position{line: 214, col: 12, offset: 6782},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 214, col: 12, offset: 6782},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 214, col: 16, offset: 6786},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 190, col: 18, offset: 6118},
																										run: (*parser).callonInlineElement97,
																										expr: &seqExpr{
																											pos: position{line: 190, col: 18, offset: 6118},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 190, col: 18, offset: 6118},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 190, col: 28, offset: 6128},
																													expr: &charClassMatcher{
																														pos:        position{line: 190, col: 29, offset: 6129},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 214, col: 35, offset: 6805},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1553, col: 6, offset: 55250},
																						run: (*parser).callonInlineElement103,
																						expr: &litMatcher{
																							pos:        position{line: 1553, col: 6, offset: 55250},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1538, col: 79, offset: 54665},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1540, col: 5, offset: 54730},
															run: (*parser).callonInlineElement106,
															expr: &seqExpr{
																pos: position{line: 1540, col: 5, offset: 54730},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1540, col: 5, offset: 54730},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1540, col: 10, offset: 54735},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2259, col: 7, offset: 79709},
																			run: (*parser).callonInlineElement110,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2259, col: 7, offset: 79709},
																				expr: &charClassMatcher{
																					pos:        position{line: 2259, col: 7, offset: 79709},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1540, col: 18, offset: 54743},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2206, col: 9, offset: 77913},
												run: (*parser).callonInlineElement114,
												expr: &charClassMatcher{
													pos:        position{line: 2206, col: 10, offset: 77914},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&actionExpr{
												pos: position{line: 2171, col: 15, offset: 76747},
												run: (*parser).callonInlineElement116,
												expr: &litMatcher{
													pos:        position{line: 2171, col: 15, offset: 76747},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
											&actionExpr{
												pos: position{line: 2177, col: 14, offset: 76854},
												run: (*parser).callonInlineElement118,
												expr: &litMatcher{
													pos:        position{line: 2177, col: 14, offset: 76854},
													val:        "(C)",
													ignoreCase: false,
													want:       "\"(C)\"",
												},
											},
											&actionExpr{
												pos: position{line: 2180, col: 14, offset: 76921},
												run: (*parser).callonInlineElement120,
												expr: &litMatcher{
													pos:        position{line: 2180, col: 14, offset: 76921},
													val:        "(TM)",
													ignoreCase: false,
													want:       "\"(TM)\"",
												},
											},
											&actionExpr{
												pos: position{line: 2183, col: 15, offset: 76990},
												run: (*parser).callonInlineElement122,
												expr: &litMatcher{
													pos:        position{line: 2183, col: 15, offset: 76990},
													val:        "(R)",
													ignoreCase: false,
													want:       "\"(R)\"",
												},
											},
											&actionExpr{
												pos: position{line: 2186, col: 13, offset: 77056},
												run: (*parser).callonInlineElement124,
												expr: &litMatcher{
													pos:        position{line: 2186, col: 13, offset: 77056},
													val:        "...",
													ignoreCase: false,
													want:       "\"...\"",
												},
											},
											&actionExpr{
												pos: position{line: 2194, col: 22, offset: 77354},
												run: (*parser).callonInlineElement126,
												expr: &seqExpr{
													pos: position{line: 2194, col: 22, offset: 77354},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2213, col: 13, offset: 78116},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
														&litMatcher{
															pos:        position{line: 2194, col: 31, offset: 77363},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
														&andExpr{
															pos: position{line: 2194, col: 35, offset: 77367},
															expr: &charClassMatcher{
																pos:        position{line: 2194, col: 36, offset: 77368},
																val:        "[\\pL]",
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 982, col: 15, offset: 32277},
												name: "InlineUserMacro",
											},
											&actionExpr{
												pos: position{line: 221, col: 25, offset: 7126},
												run: (*parser).callonInlineElement133,
												expr: &seqExpr{
													pos: position{line: 221, col: 25, offset: 7126},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 221, col: 25, offset: 7126},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 221, col: 37, offset: 7138},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 190, col: 18, offset: 6118},
																run: (*parser).callonInlineElement137,
																expr: &seqExpr{
																	pos: position{line: 190, col: 18, offset: 6118},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 190, col: 18, offset: 6118},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 190, col: 28, offset: 6128},
																			expr: &charClassMatcher{
																				pos:        position{line: 190, col: 29, offset: 6129},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 221, col: 56, offset: 7157},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 221, col: 62, offset: 7163},
																expr: &actionExpr{
																	pos: position{line: 229, col: 17, offset: 7426},
																	run: (*parser).callonInlineElement144,
																	expr: &seqExpr{
																		pos: position{line: 229, col: 17, offset: 7426},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 229, col: 17, offset: 7426},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 229, col: 21, offset: 7430},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 229, col: 28, offset: 7437},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 229, col: 28, offset: 7437},
																							run: (*parser).callonInlineElement149,
																							expr: &charClassMatcher{
																								pos:        position{line: 229, col: 28, offset: 7437},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 231, col: 9, offset: 7491},
																							run: (*parser).callonInlineElement151,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 231, col: 9, offset: 7491},
																								expr: &charClassMatcher{
																									pos:        position{line: 231, col: 9, offset: 7491},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 221, col: 78, offset: 7179},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 225, col: 25, offset: 7281},
												run: (*parser).callonInlineElement155,
												expr: &seqExpr{
													pos: position{line: 225, col: 25, offset: 7281},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 225, col: 25, offset: 7281},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 225, col: 38, offset: 7294},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 190, col: 18, offset: 6118},
																run: (*parser).callonInlineElement159,
																expr: &seqExpr{
																	pos: position{line: 190, col: 18, offset: 6118},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 190, col: 18, offset: 6118},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 190, col: 28, offset: 6128},
																			expr: &charClassMatcher{
																				pos:        position{line: 190, col: 29, offset: 6129},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 225, col: 57, offset: 7313},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 225, col: 63, offset: 7319},
																expr: &actionExpr{
																	pos: position{line: 229, col: 17, offset: 7426},
																	run: (*parser).callonInlineElement166,
																	expr: &seqExpr{
																		pos: position{line: 229, col: 17, offset: 7426},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 229, col: 17, offset: 7426},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 229, col: 21, offset: 7430},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 229, col: 28, offset: 7437},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 229, col: 28, offset: 7437},
																							run: (*parser).callonInlineElement171,
																							expr: &charClassMatcher{
																								pos:        position{line: 229, col: 28, offset: 7437},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 231, col: 9, offset: 7491},
																							run: (*parser).callonInlineElement173,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 231, col: 9, offset: 7491},
																								expr: &charClassMatcher{
																									pos:        position{line: 231, col: 9, offset: 7491},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 225, col: 79, offset: 7335},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 214, col: 12, offset: 6782},
												run: (*parser).callonInlineElement177,
												expr: &seqExpr{
													pos: position{line: 214, col: 12, offset: 6782},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 214, col: 12, offset: 6782},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 214, col: 16, offset: 6786},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 190, col: 18, offset: 6118},
																run: (*parser).callonInlineElement181,
																expr: &seqExpr{
																	pos: position{line: 190, col: 18, offset: 6118},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 190, col: 18, offset: 6118},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 190, col: 28, offset: 6128},
																			expr: &charClassMatcher{
																				pos:        position{line: 190, col: 29, offset: 6129},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 214, col: 35, offset: 6805},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 237, col: 20, offset: 7607},
												run: (*parser).callonInlineElement187,
												expr: &seqExpr{
													pos: position{line: 237, col: 20, offset: 7607},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 237, col: 20, offset: 7607},
															val:        "[[",
															ignoreCase: false,
															want:       "\"[[\"",
														},
														&labeledExpr{
															pos:   position{line: 237, col: 25, offset: 7612},
															label: "id",
															expr: &actionExpr{
																pos: position{line: 2259, col: 7, offset: 79709},
																run: (*parser).callonInlineElement191,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2259, col: 7, offset: 79709},
																	expr: &charClassMatcher{
																		pos:        position{line: 2259, col: 7, offset: 79709},
																		val:        "[^[]<>,]",
																		chars:      []rune{'[', ']', '<', '>', ','},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 237, col: 33, offset: 7620},
															val:        "]]",
															ignoreCase: false,
															want:       "\"]]\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 237, col: 38, offset: 7625},
															expr: &choiceExpr{
																pos: position{line: 2271, col: 10, offset: 79961},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2271, col: 10, offset: 79961},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2271, col: 16, offset: 79967},
																		run: (*parser).callonInlineElement198,
																		expr: &litMatcher{
																			pos:        position{line: 2271, col: 16, offset: 79967},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2147, col: 23, offset: 75975},
												run: (*parser).callonInlineElement200,
												expr: &seqExpr{
													pos: position{line: 2147, col: 23, offset: 75975},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 2147, col: 23, offset: 75975},
															val:        "(((",
															ignoreCase: false,
															want:       "\"(((\"",
														},
														&labeledExpr{
															pos:   position{line: 2147, col: 29, offset: 75981},
															label: "term1",
															expr: &actionExpr{
																pos: position{line: 2154, col: 30, offset: 76312},
																run: (*parser).callonInlineElement204,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2154, col: 30, offset: 76312},
																	expr: &choiceExpr{
																		pos: position{line: 2154, col: 31, offset: 76313},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2213, col: 13, offset: 78116},
																				val:        "[ 0-9\\pL]",
																				chars:      []rune{' '},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&actionExpr{
																				pos: position{line: 2271, col: 16, offset: 79967},
																				run: (*parser).callonInlineElement208,
																				expr: &litMatcher{
																					pos:        position{line: 2271, col: 16, offset: 79967},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2148, col: 5, offset: 76020},
															label: "term2",
															expr: &zeroOrOneExpr{
																pos: position{line: 2148, col: 11, offset: 76026},
																expr: &actionExpr{
																	pos: position{line: 2148, col: 12, offset: 76027},
																	run: (*parser).callonInlineElement212,
																	expr: &seqExpr{
																		pos: position{line: 2148, col: 12, offset: 76027},
																		exprs: []interface{}{
																			&zeroOrMoreExpr{
																				pos: position{line: 2148, col: 12, offset: 76027},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonInlineElement217,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2148, col: 19, offset: 76034},
																				val:        ",",
																				ignoreCase: false,
																				want:       "\",\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2148, col: 23, offset: 76038},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonInlineElement223,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2148, col: 30, offset: 76045},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 2154, col: 30, offset: 76312},
																					run: (*parser).callonInlineElement226,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2154, col: 30, offset: 76312},
																						expr: &choiceExpr{
																							pos: position{line: 2154, col: 31, offset: 76313},
																							alternatives: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 2213, col: 13, offset: 78116},
																									val:        "[ 0-9\\pL]",
																									chars:      []rune{' '},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&actionExpr{
																									pos: position{line: 2271, col: 16, offset: 79967},
																									run: (*parser).callonInlineElement230,
																									expr: &litMatcher{
																										pos:        position{line: 2271, col: 16, offset: 79967},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2149, col: 5, offset: 76112},
															label: "term3",
															expr: &zeroOrOneExpr{
																pos: position{line: 2149, col: 11, offset: 76118},
																expr: &actionExpr{
																	pos: position{line: 2149, col: 12, offset: 76119},
																	run: (*parser).callonInlineElement234,
																	expr: &seqExpr{
																		pos: position{line: 2149, col: 12, offset: 76119},
																		exprs: []interface{}{
																			&zeroOrMoreExpr{
																				pos: position{line: 2149, col: 12, offset: 76119},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonInlineElement239,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2149, col: 19, offset: 76126},
																				val:        ",",
																				ignoreCase: false,
																				want:       "\",\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2149, col: 23, offset: 76130},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonInlineElement245,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2149, col: 30, offset: 76137},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 2154, col: 30, offset: 76312},
																					run: (*parser).callonInlineElement248,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2154, col: 30, offset: 76312},
																						expr: &choiceExpr{
																							pos: position{line: 2154, col: 31, offset: 76313},
																							alternatives: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 2213, col: 13, offset: 78116},
																									val:        "[ 0-9\\pL]",
																									chars:      []rune{' '},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&actionExpr{
																									pos: position{line: 2271, col: 16, offset: 79967},
																									run: (*parser).callonInlineElement252,
																									expr: &litMatcher{
																										pos:        position{line: 2271, col: 16, offset: 79967},
																										val:        "\t",
																										ignoreCase: false,
																										want:       "\"\\t\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2150, col: 5, offset: 76204},
															val:        ")))",
															ignoreCase: false,
															want:       "\")))\"",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 986, col: 15, offset: 32408},
												name: "IndexTerm",
											},
											&actionExpr{
												pos: position{line: 1940, col: 23, offset: 69003},
												run: (*parser).callonInlineElement256,
												expr: &seqExpr{
													pos: position{line: 1940, col: 23, offset: 69003},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1940, col: 23, offset: 69003},
															val:        "�",
															ignoreCase: false,
															want:       "\"�\"",
														},
														&labeledExpr{
															pos:   position{line: 1940, col: 32, offset: 69012},
															label: "ref",
															expr: &actionExpr{
																pos: position{line: 1940, col: 37, offset: 69017},
																run: (*parser).callonInlineElement260,
																expr: &oneOrMoreExpr{
																	pos: position{line: 1940, col: 37, offset: 69017},
																	expr: &charClassMatcher{
																		pos:        position{line: 1940, col: 37, offset: 69017},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1940, col: 76, offset: 69056},
															val:        "�",
															ignoreCase: false,
															want:       "\"�\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2237, col: 12, offset: 79050},
												run: (*parser).callonInlineElement264,
												expr: &charClassMatcher{
													pos:        position{line: 2237, col: 12, offset: 79050},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1002, col: 1, offset: 33003},
			expr: &choiceExpr{
				pos: position{line: 1003, col: 5, offset: 33022},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1004, col: 9, offset: 33032},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 1004, col: 9, offset: 33032},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1004, col: 9, offset: 33032},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1004, col: 20, offset: 33043},
										expr: &ruleRefExpr{
											pos:  position{line: 1004, col: 21, offset: 33044},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1005, col: 9, offset: 33074},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 1005, col: 15, offset: 33080},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1005, col: 15, offset: 33080},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1005, col: 41, offset: 33106},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1009, col: 7, offset: 33224},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1015, col: 1, offset: 33389},
			expr: &choiceExpr{
				pos: position{line: 1016, col: 5, offset: 33419},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1016, col: 5, offset: 33419},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1017, col: 7, offset: 33446},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1018, col: 7, offset: 33474},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1019, col: 7, offset: 33502},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1020, col: 7, offset: 33534},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1021, col: 7, offset: 33555},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1023, col: 1, offset: 33573},
			expr: &choiceExpr{
				pos: position{line: 1024, col: 5, offset: 33605},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1024, col: 5, offset: 33605},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 7, offset: 33631},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1026, col: 7, offset: 33659},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1027, col: 7, offset: 33687},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1029, col: 1, offset: 33713},
			expr: &choiceExpr{
				pos: position{line: 1030, col: 5, offset: 33739},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1030, col: 5, offset: 33739},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1031, col: 7, offset: 33762},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1032, col: 7, offset: 33786},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1033, col: 7, offset: 33810},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1034, col: 7, offset: 33838},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1035, col: 7, offset: 33866},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1053, col: 1, offset: 34253},
			expr: &choiceExpr{
				pos: position{line: 1053, col: 13, offset: 34265},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1053, col: 13, offset: 34265},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1053, col: 35, offset: 34287},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1055, col: 1, offset: 34354},
			expr: &actionExpr{
				pos: position{line: 1055, col: 24, offset: 34377},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1055, col: 24, offset: 34377},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1055, col: 24, offset: 34377},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1055, col: 29, offset: 34382},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1055, col: 39, offset: 34392},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1055, col: 68, offset: 34421},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1059, col: 1, offset: 34512},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1059, col: 32, offset: 34543},
				expr: &ruleRefExpr{
					pos:  position{line: 1059, col: 32, offset: 34543},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1061, col: 1, offset: 34574},
			expr: &actionExpr{
				pos: position{line: 1061, col: 31, offset: 34604},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1061, col: 31, offset: 34604},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1061, col: 31, offset: 34604},
							expr: &litMatcher{
								pos:        position{line: 1061, col: 33, offset: 34606},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1061, col: 39, offset: 34612},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1061, col: 48, offset: 34621},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2225, col: 5, offset: 78563},
										run: (*parser).callonDoubleQuoteBoldTextElement7,
										expr: &seqExpr{
											pos: position{line: 2225, col: 5, offset: 78563},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2225, col: 5, offset: 78563},
													expr: &charClassMatcher{
														pos:        position{line: 2225, col: 5, offset: 78563},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2225, col: 15, offset: 78573},
													expr: &choiceExpr{
														pos: position{line: 2225, col: 17, offset: 78575},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2225, col: 17, offset: 78575},
																val:        "[\\r\\n ,]]",
																chars:      []rune{'\r', '\n', ' ', ',', ']'},
																ignoreCase: false,
																inverted:   false,
															},
															&notExpr{
																pos: position{line: 2277, col: 8, offset: 80048},
																expr: &anyMatcher{
																	line: 2277, col: 9, offset: 80049,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2227, col: 9, offset: 78658},
										run: (*parser).callonDoubleQuoteBoldTextElement16,
										expr: &seqExpr{
											pos: position{line: 2227, col: 9, offset: 78658},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2227, col: 9, offset: 78658},
													expr: &charClassMatcher{
														pos:        position{line: 2227, col: 9, offset: 78658},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 2227, col: 19, offset: 78668},
													expr: &seqExpr{
														pos: position{line: 2227, col: 20, offset: 78669},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2227, col: 20, offset: 78669},
																val:        "[=*_`]",
																chars:      []rune{'=', '*', '_', '`'},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 2227, col: 27, offset: 78676},
																expr: &charClassMatcher{
																	pos:        position{line: 2227, col: 27, offset: 78676},
																	val:        "[0-9\\pL]",
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2271, col: 10, offset: 79961},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2271, col: 16, offset: 79967},
										run: (*parser).callonDoubleQuoteBoldTextElement26,
										expr: &litMatcher{
											pos:        position{line: 2271, col: 16, offset: 79967},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
									&seqExpr{
										pos: position{line: 1063, col: 7, offset: 34677},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 2275, col: 12, offset: 80019},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&notExpr{
												pos: position{line: 1063, col: 15, offset: 34685},
												expr: &choiceExpr{
													pos: position{line: 2275, col: 12, offset: 80019},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1064, col: 7, offset: 34700},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1065, col: 7, offset: 34719},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&actionExpr{
										pos: position{line: 1940, col: 23, offset: 69003},
										run: (*parser).callonDoubleQuoteBoldTextElement38,
										expr: &seqExpr{
											pos: position{line: 1940, col: 23, offset: 69003},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1940, col: 23, offset: 69003},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1940, col: 32, offset: 69012},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1940, col: 37, offset: 69017},
														run: (*parser).callonDoubleQuoteBoldTextElement42,
														expr: &oneOrMoreExpr{
															pos: position{line: 1940, col: 37, offset: 69017},
															expr: &charClassMatcher{
																pos:        position{line: 1940, col: 37, offset: 69017},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1940, col: 76, offset: 69056},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 1083, col: 5, offset: 35205},
										val:        "[^\\r\\n*]",
										chars:      []rune{'\r', '\n', '*'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 1084, col: 7, offset: 35302},
										run: (*parser).callonDoubleQuoteBoldTextElement47,
										expr: &seqExpr{
											pos: position{line: 1084, col: 7, offset: 35302},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1084, col: 7, offset: 35302},
													val:        "**",
													ignoreCase: false,
													want:       "\"**\"",
												},
												&actionExpr{
													pos: position{line: 2217, col: 14, offset: 78190},
													run: (*parser).callonDoubleQuoteBoldTextElement50,
													expr: &oneOrMoreExpr{
														pos: position{line: 2217, col: 14, offset: 78190},
														expr: &charClassMatcher{
															pos:        position{line: 2217, col: 14, offset: 78190},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 1071, col: 1, offset: 34857},
			expr: &actionExpr{
				pos: position{line: 1072, col: 5, offset: 34897},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1072, col: 5, offset: 34897},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1072, col: 5, offset: 34897},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1072, col: 16, offset: 34908},
								expr: &ruleRefExpr{
									pos:  position{line: 1072, col: 17, offset: 34909},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1073, col: 5, offset: 34935},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1073, col: 11, offset: 34941},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1073, col: 11, offset: 34941},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1074, col: 11, offset: 34971},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1075, col: 11, offset: 34992},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1076, col: 11, offset: 35013},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1077, col: 11, offset: 35037},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1078, col: 11, offset: 35061},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1088, col: 1, offset: 35478},
			expr: &choiceExpr{
				pos: position{line: 1089, col: 5, offset: 35506},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1089, col: 5, offset: 35506},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1089, col: 5, offset: 35506},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1089, col: 6, offset: 35507},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&notExpr{
									pos: position{line: 1089, col: 10, offset: 35511},
									expr: &litMatcher{
										pos:        position{line: 1089, col: 11, offset: 35512},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1089, col: 16, offset: 35517},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1089, col: 26, offset: 35527},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1089, col: 55, offset: 35556},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1089, col: 59, offset: 35560},
									expr: &notExpr{
										pos: position{line: 1089, col: 61, offset: 35562},
										expr: &charClassMatcher{
											pos:        position{line: 2213, col: 13, offset: 78116},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1091, col: 9, offset: 35769},
						run: (*parser).callonSingleQuoteBoldText13,
						expr: &seqExpr{
							pos: position{line: 1091, col: 9, offset: 35769},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1091, col: 9, offset: 35769},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1091, col: 13, offset: 35773},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1091, col: 23, offset: 35783},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1091, col: 23, offset: 35783},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1091, col: 27, offset: 35787},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1091, col: 56, offset: 35816},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1095, col: 1, offset: 36034},
			expr: &seqExpr{
				pos: position{line: 1095, col: 32, offset: 36065},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1095, col: 32, offset: 36065},
						expr: &choiceExpr{
							pos: position{line: 2271, col: 10, offset: 79961},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2271, col: 10, offset: 79961},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
								&actionExpr{
									pos: position{line: 2271, col: 16, offset: 79967},
									run: (*parser).callonSingleQuoteBoldTextElements5,
									expr: &litMatcher{
										pos:        position{line: 2271, col: 16, offset: 79967},
										val:        "\t",
										ignoreCase: false,
										want:       "\"\\t\"",
									},
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1095, col: 39, offset: 36072},
						expr: &ruleRefExpr{
							pos:  position{line: 1095, col: 39, offset: 36072},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1097, col: 1, offset: 36101},
			expr: &choiceExpr{
				pos: position{line: 1098, col: 5, offset: 36136},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2225, col: 5, offset: 78563},
						run: (*parser).callonSingleQuoteBoldTextElement2,
						expr: &seqExpr{
							pos: position{line: 2225, col: 5, offset: 78563},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2225, col: 5, offset: 78563},
									expr: &charClassMatcher{
										pos:        position{line: 2225, col: 5, offset: 78563},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2225, col: 15, offset: 78573},
									expr: &choiceExpr{
										pos: position{line: 2225, col: 17, offset: 78575},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2225, col: 17, offset: 78575},
												val:        "[\\r\\n ,]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&notExpr{
												pos: position{line: 2277, col: 8, offset: 80048},
												expr: &anyMatcher{
													line: 2277, col: 9, offset: 80049,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2227, col: 9, offset: 78658},
						run: (*parser).callonSingleQuoteBoldTextElement11,
						expr: &seqExpr{
							pos: position{line: 2227, col: 9, offset: 78658},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2227, col: 9, offset: 78658},
									expr: &charClassMatcher{
										pos:        position{line: 2227, col: 9, offset: 78658},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2227, col: 19, offset: 78668},
									expr: &seqExpr{
										pos: position{line: 2227, col: 20, offset: 78669},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2227, col: 20, offset: 78669},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 27, offset: 78676},
												expr: &charClassMatcher{
													pos:        position{line: 2227, col: 27, offset: 78676},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1099, col: 7, offset: 36147},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 2275, col: 12, offset: 80019},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2275, col: 12, offset: 80019},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&charClassMatcher{
										pos:        position{line: 2275, col: 21, offset: 80028},
										val:        "[\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
							&notExpr{
								pos: position{line: 1099, col: 15, offset: 36155},
								expr: &choiceExpr{
									pos: position{line: 2275, col: 12, offset: 80019},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2275, col: 12, offset: 80019},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&charClassMatcher{
											pos:        position{line: 2275, col: 21, offset: 80028},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1100, col: 7, offset: 36170},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1101, col: 7, offset: 36189},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1101, col: 7, offset: 36189},
								expr: &choiceExpr{
									pos: position{line: 2271, col: 10, offset: 79961},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2271, col: 10, offset: 79961},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
										&actionExpr{
											pos: position{line: 2271, col: 16, offset: 79967},
											run: (*parser).callonSingleQuoteBoldTextElement33,
											expr: &litMatcher{
												pos:        position{line: 2271, col: 16, offset: 79967},
												val:        "\t",
												ignoreCase: false,
												want:       "\"\\t\"",
											},
										},
									},
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1101, col: 14, offset: 36196},
								expr: &seqExpr{
									pos: position{line: 1101, col: 15, offset: 36197},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1101, col: 15, offset: 36197},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1101, col: 19, offset: 36201},
											expr: &litMatcher{
												pos:        position{line: 1101, col: 20, offset: 36202},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1102, col: 7, offset: 36214},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&actionExpr{
						pos: position{line: 1940, col: 23, offset: 69003},
						run: (*parser).callonSingleQuoteBoldTextElement41,
						expr: &seqExpr{
							pos: position{line: 1940, col: 23, offset: 69003},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1940, col: 23, offset: 69003},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 1940, col: 32, offset: 69012},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1940, col: 37, offset: 69017},
										run: (*parser).callonSingleQuoteBoldTextElement45,
										expr: &oneOrMoreExpr{
											pos: position{line: 1940, col: 37, offset: 69017},
											expr: &charClassMatcher{
												pos:        position{line: 1940, col: 37, offset: 69017},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1940, col: 76, offset: 69056},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 1117, col: 5, offset: 36662},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1118, col: 7, offset: 36759},
						run: (*parser).callonSingleQuoteBoldTextElement50,
						expr: &seqExpr{
							pos: position{line: 1118, col: 7, offset: 36759},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1118, col: 7, offset: 36759},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&actionExpr{
									pos: position{line: 2217, col: 14, offset: 78190},
									run: (*parser).callonSingleQuoteBoldTextElement53,
									expr: &oneOrMoreExpr{
										pos: position{line: 2217, col: 14, offset: 78190},
										expr: &charClassMatcher{
											pos:        position{line: 2217, col: 14, offset: 78190},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 1106, col: 1, offset: 36315},
			expr: &actionExpr{
				pos: position{line: 1107, col: 5, offset: 36355},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1107, col: 5, offset: 36355},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1107, col: 5, offset: 36355},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1107, col: 16, offset: 36366},
								expr: &ruleRefExpr{
									pos:  position{line: 1107, col: 17, offset: 36367},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1108, col: 5, offset: 36393},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1108, col: 11, offset: 36399},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1108, col: 11, offset: 36399},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1109, col: 11, offset: 36429},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1110, col: 11, offset: 36450},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1111, col: 11, offset: 36471},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1112, col: 11, offset: 36495},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1113, col: 11, offset: 36519},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1122, col: 1, offset: 36934},
			expr: &choiceExpr{
				pos: position{line: 1123, col: 5, offset: 36958},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1123, col: 5, offset: 36958},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1123, col: 5, offset: 36958},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1123, col: 5, offset: 36958},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1045, col: 25, offset: 34151},
										run: (*parser).callonEscapedBoldText5,
										expr: &seqExpr{
											pos: position{line: 1045, col: 25, offset: 34151},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1045, col: 25, offset: 34151},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1045, col: 30, offset: 34156},
													expr: &litMatcher{
														pos:        position{line: 1045, col: 30, offset: 34156},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1123, col: 40, offset: 36993},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1123, col: 45, offset: 36998},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1123, col: 55, offset: 37008},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1123, col: 84, offset: 37037},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1125, col: 9, offset: 37194},
						run: (*parser).callonEscapedBoldText14,
						expr: &seqExpr{
							pos: position{line: 1125, col: 9, offset: 37194},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1125, col: 9, offset: 37194},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1041, col: 25, offset: 34086},
										run: (*parser).callonEscapedBoldText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1041, col: 25, offset: 34086},
											expr: &litMatcher{
												pos:        position{line: 1041, col: 25, offset: 34086},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1125, col: 44, offset: 37229},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1125, col: 49, offset: 37234},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1125, col: 59, offset: 37244},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1125, col: 88, offset: 37273},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1128, col: 9, offset: 37473},
						run: (*parser).callonEscapedBoldText24,
						expr: &seqExpr{
							pos: position{line: 1128, col: 9, offset: 37473},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1128, col: 9, offset: 37473},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1041, col: 25, offset: 34086},
										run: (*parser).callonEscapedBoldText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1041, col: 25, offset: 34086},
											expr: &litMatcher{
												pos:        position{line: 1041, col: 25, offset: 34086},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1128, col: 44, offset: 37508},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1128, col: 48, offset: 37512},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1128, col: 58, offset: 37522},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1128, col: 87, offset: 37551},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1136, col: 1, offset: 37759},
			expr: &choiceExpr{
				pos: position{line: 1136, col: 15, offset: 37773},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1136, col: 15, offset: 37773},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1136, col: 39, offset: 37797},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1138, col: 1, offset: 37820},
			expr: &actionExpr{
				pos: position{line: 1138, col: 26, offset: 37845},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1138, col: 26, offset: 37845},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1138, col: 26, offset: 37845},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1138, col: 31, offset: 37850},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1138, col: 41, offset: 37860},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1138, col: 72, offset: 37891},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1142, col: 1, offset: 38029},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1142, col: 34, offset: 38062},
				expr: &ruleRefExpr{
					pos:  position{line: 1142, col: 34, offset: 38062},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1144, col: 1, offset: 38094},
			expr: &actionExpr{
				pos: position{line: 1145, col: 5, offset: 38131},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1145, col: 5, offset: 38131},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1145, col: 5, offset: 38131},
							expr: &litMatcher{
								pos:        position{line: 1145, col: 7, offset: 38133},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1145, col: 13, offset: 38139},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1145, col: 22, offset: 38148},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2225, col: 5, offset: 78563},
										run: (*parser).callonDoubleQuoteItalicTextElement7,
										expr: &seqExpr{
											pos: position{line: 2225, col: 5, offset: 78563},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2225, col: 5, offset: 78563},
													expr: &charClassMatcher{
														pos:        position{line: 2225, col: 5, offset: 78563},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2225, col: 15, offset: 78573},
													expr: &choiceExpr{
														pos: position{line: 2225, col: 17, offset: 78575},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2225, col: 17, offset: 78575},
																val:        "[\\r\\n ,]]",
																chars:      []rune{'\r', '\n', ' ', ',', ']'},
																ignoreCase: false,
																inverted:   false,
															},
															&notExpr{
																pos: position{line: 2277, col: 8, offset: 80048},
																expr: &anyMatcher{
																	line: 2277, col: 9, offset: 80049,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2227, col: 9, offset: 78658},
										run: (*parser).callonDoubleQuoteItalicTextElement16,
										expr: &seqExpr{
											pos: position{line: 2227, col: 9, offset: 78658},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2227, col: 9, offset: 78658},
													expr: &charClassMatcher{
														pos:        position{line: 2227, col: 9, offset: 78658},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 2227, col: 19, offset: 78668},
													expr: &seqExpr{
														pos: position{line: 2227, col: 20, offset: 78669},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2227, col: 20, offset: 78669},
																val:        "[=*_`]",
																chars:      []rune{'=', '*', '_', '`'},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 2227, col: 27, offset: 78676},
																expr: &charClassMatcher{
																	pos:        position{line: 2227, col: 27, offset: 78676},
																	val:        "[0-9\\pL]",
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2271, col: 10, offset: 79961},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2271, col: 16, offset: 79967},
										run: (*parser).callonDoubleQuoteItalicTextElement26,
										expr: &litMatcher{
											pos:        position{line: 2271, col: 16, offset: 79967},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
									&seqExpr{
										pos: position{line: 1147, col: 7, offset: 38204},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 2275, col: 12, offset: 80019},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&notExpr{
												pos: position{line: 1147, col: 15, offset: 38212},
												expr: &choiceExpr{
													pos: position{line: 2275, col: 12, offset: 80019},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1148, col: 7, offset: 38227},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1149, col: 7, offset: 38246},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&actionExpr{
										pos: position{line: 1940, col: 23, offset: 69003},
										run: (*parser).callonDoubleQuoteItalicTextElement38,
										expr: &seqExpr{
											pos: position{line: 1940, col: 23, offset: 69003},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1940, col: 23, offset: 69003},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1940, col: 32, offset: 69012},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1940, col: 37, offset: 69017},
														run: (*parser).callonDoubleQuoteItalicTextElement42,
														expr: &oneOrMoreExpr{
															pos: position{line: 1940, col: 37, offset: 69017},
															expr: &charClassMatcher{
																pos:        position{line: 1940, col: 37, offset: 69017},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1940, col: 76, offset: 69056},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 1167, col: 5, offset: 38740},
										val:        "[^\\r\\n_]",
										chars:      []rune{'\r', '\n', '_'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 1168, col: 7, offset: 38839},
										run: (*parser).callonDoubleQuoteItalicTextElement47,
										expr: &seqExpr{
											pos: position{line: 1168, col: 7, offset: 38839},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1168, col: 7, offset: 38839},
													val:        "__",
													ignoreCase: false,
													want:       "\"__\"",
												},
												&actionExpr{
													pos: position{line: 2217, col: 14, offset: 78190},
													run: (*parser).callonDoubleQuoteItalicTextElement50,
													expr: &oneOrMoreExpr{
														pos: position{line: 2217, col: 14, offset: 78190},
														expr: &charClassMatcher{
															pos:        position{line: 2217, col: 14, offset: 78190},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 1155, col: 1, offset: 38388},
			expr: &actionExpr{
				pos: position{line: 1156, col: 5, offset: 38430},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1156, col: 5, offset: 38430},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1156, col: 5, offset: 38430},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1156, col: 16, offset: 38441},
								expr: &ruleRefExpr{
									pos:  position{line: 1156, col: 17, offset: 38442},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1157, col: 5, offset: 38468},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1157, col: 11, offset: 38474},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1157, col: 11, offset: 38474},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1158, col: 11, offset: 38506},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1159, col: 11, offset: 38525},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1160, col: 11, offset: 38546},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1161, col: 11, offset: 38570},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1162, col: 11, offset: 38594},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1172, col: 1, offset: 39017},
			expr: &choiceExpr{
				pos: position{line: 1173, col: 5, offset: 39047},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1173, col: 5, offset: 39047},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1173, col: 5, offset: 39047},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1173, col: 6, offset: 39048},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&notExpr{
									pos: position{line: 1173, col: 10, offset: 39052},
									expr: &litMatcher{
										pos:        position{line: 1173, col: 11, offset: 39053},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1173, col: 16, offset: 39058},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1173, col: 26, offset: 39068},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1173, col: 57, offset: 39099},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1175, col: 9, offset: 39301},
						run: (*parser).callonSingleQuoteItalicText10,
						expr: &seqExpr{
							pos: position{line: 1175, col: 9, offset: 39301},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1175, col: 9, offset: 39301},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1175, col: 13, offset: 39305},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1175, col: 23, offset: 39315},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1175, col: 23, offset: 39315},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1175, col: 27, offset: 39319},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1175, col: 58, offset: 39350},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1179, col: 1, offset: 39572},
			expr: &seqExpr{
				pos: position{line: 1179, col: 34, offset: 39605},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1179, col: 34, offset: 39605},
						expr: &choiceExpr{
							pos: position{line: 2271, col: 10, offset: 79961},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2271, col: 10, offset: 79961},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
								&actionExpr{
									pos: position{line: 2271, col: 16, offset: 79967},
									run: (*parser).callonSingleQuoteItalicTextElements5,
									expr: &litMatcher{
										pos:        position{line: 2271, col: 16, offset: 79967},
										val:        "\t",
										ignoreCase: false,
										want:       "\"\\t\"",
									},
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1179, col: 41, offset: 39612},
						expr: &ruleRefExpr{
							pos:  position{line: 1179, col: 41, offset: 39612},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1181, col: 1, offset: 39643},
			expr: &choiceExpr{
				pos: position{line: 1182, col: 5, offset: 39680},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2225, col: 5, offset: 78563},
						run: (*parser).callonSingleQuoteItalicTextElement2,
						expr: &seqExpr{
							pos: position{line: 2225, col: 5, offset: 78563},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2225, col: 5, offset: 78563},
									expr: &charClassMatcher{
										pos:        position{line: 2225, col: 5, offset: 78563},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2225, col: 15, offset: 78573},
									expr: &choiceExpr{
										pos: position{line: 2225, col: 17, offset: 78575},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2225, col: 17, offset: 78575},
												val:        "[\\r\\n ,]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&notExpr{
												pos: position{line: 2277, col: 8, offset: 80048},
												expr: &anyMatcher{
													line: 2277, col: 9, offset: 80049,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2227, col: 9, offset: 78658},
						run: (*parser).callonSingleQuoteItalicTextElement11,
						expr: &seqExpr{
							pos: position{line: 2227, col: 9, offset: 78658},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2227, col: 9, offset: 78658},
									expr: &charClassMatcher{
										pos:        position{line: 2227, col: 9, offset: 78658},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2227, col: 19, offset: 78668},
									expr: &seqExpr{
										pos: position{line: 2227, col: 20, offset: 78669},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2227, col: 20, offset: 78669},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 27, offset: 78676},
												expr: &charClassMatcher{
													pos:        position{line: 2227, col: 27, offset: 78676},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1183, col: 7, offset: 39691},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 2275, col: 12, offset: 80019},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2275, col: 12, offset: 80019},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&charClassMatcher{
										pos:        position{line: 2275, col: 21, offset: 80028},
										val:        "[\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
							&notExpr{
								pos: position{line: 1183, col: 15, offset: 39699},
								expr: &choiceExpr{
									pos: position{line: 2275, col: 12, offset: 80019},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2275, col: 12, offset: 80019},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&charClassMatcher{
											pos:        position{line: 2275, col: 21, offset: 80028},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1184, col: 7, offset: 39714},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1185, col: 7, offset: 39733},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1185, col: 7, offset: 39733},
								expr: &choiceExpr{
									pos: position{line: 2271, col: 10, offset: 79961},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2271, col: 10, offset: 79961},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
										&actionExpr{
											pos: position{line: 2271, col: 16, offset: 79967},
											run: (*parser).callonSingleQuoteItalicTextElement33,
											expr: &litMatcher{
												pos:        position{line: 2271, col: 16, offset: 79967},
												val:        "\t",
												ignoreCase: false,
												want:       "\"\\t\"",
											},
										},
									},
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1185, col: 14, offset: 39740},
								expr: &seqExpr{
									pos: position{line: 1185, col: 15, offset: 39741},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1185, col: 15, offset: 39741},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1185, col: 19, offset: 39745},
											expr: &litMatcher{
												pos:        position{line: 1185, col: 20, offset: 39746},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1186, col: 7, offset: 39758},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&actionExpr{
						pos: position{line: 1940, col: 23, offset: 69003},
						run: (*parser).callonSingleQuoteItalicTextElement41,
						expr: &seqExpr{
							pos: position{line: 1940, col: 23, offset: 69003},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1940, col: 23, offset: 69003},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 1940, col: 32, offset: 69012},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1940, col: 37, offset: 69017},
										run: (*parser).callonSingleQuoteItalicTextElement45,
										expr: &oneOrMoreExpr{
											pos: position{line: 1940, col: 37, offset: 69017},
											expr: &charClassMatcher{
												pos:        position{line: 1940, col: 37, offset: 69017},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1940, col: 76, offset: 69056},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 1202, col: 5, offset: 40214},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1203, col: 7, offset: 40313},
						run: (*parser).callonSingleQuoteItalicTextElement50,
						expr: &seqExpr{
							pos: position{line: 1203, col: 7, offset: 40313},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1203, col: 7, offset: 40313},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&actionExpr{
									pos: position{line: 2217, col: 14, offset: 78190},
									run: (*parser).callonSingleQuoteItalicTextElement53,
									expr: &oneOrMoreExpr{
										pos: position{line: 2217, col: 14, offset: 78190},
										expr: &charClassMatcher{
											pos:        position{line: 2217, col: 14, offset: 78190},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 1190, col: 1, offset: 39863},
			expr: &actionExpr{
				pos: position{line: 1191, col: 5, offset: 39904},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1191, col: 5, offset: 39904},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1191, col: 5, offset: 39904},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1191, col: 16, offset: 39915},
								expr: &ruleRefExpr{
									pos:  position{line: 1191, col: 17, offset: 39916},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1192, col: 5, offset: 39942},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1192, col: 11, offset: 39948},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1192, col: 11, offset: 39948},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1193, col: 11, offset: 39967},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1194, col: 11, offset: 39999},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1195, col: 11, offset: 40020},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1196, col: 11, offset: 40044},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1197, col: 11, offset: 40068},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1207, col: 1, offset: 40483},
			expr: &choiceExpr{
				pos: position{line: 1208, col: 5, offset: 40509},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1208, col: 5, offset: 40509},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1208, col: 5, offset: 40509},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1208, col: 5, offset: 40509},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1045, col: 25, offset: 34151},
										run: (*parser).callonEscapedItalicText5,
										expr: &seqExpr{
											pos: position{line: 1045, col: 25, offset: 34151},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1045, col: 25, offset: 34151},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1045, col: 30, offset: 34156},
													expr: &litMatcher{
														pos:        position{line: 1045, col: 30, offset: 34156},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1208, col: 40, offset: 40544},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1208, col: 45, offset: 40549},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1208, col: 55, offset: 40559},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1208, col: 86, offset: 40590},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1210, col: 9, offset: 40747},
						run: (*parser).callonEscapedItalicText14,
						expr: &seqExpr{
							pos: position{line: 1210, col: 9, offset: 40747},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1210, col: 9, offset: 40747},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1041, col: 25, offset: 34086},
										run: (*parser).callonEscapedItalicText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1041, col: 25, offset: 34086},
											expr: &litMatcher{
												pos:        position{line: 1041, col: 25, offset: 34086},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1210, col: 44, offset: 40782},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1210, col: 49, offset: 40787},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1210, col: 59, offset: 40797},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1210, col: 90, offset: 40828},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1213, col: 9, offset: 41028},
						run: (*parser).callonEscapedItalicText24,
						expr: &seqExpr{
							pos: position{line: 1213, col: 9, offset: 41028},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1213, col: 9, offset: 41028},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1041, col: 25, offset: 34086},
										run: (*parser).callonEscapedItalicText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1041, col: 25, offset: 34086},
											expr: &litMatcher{
												pos:        position{line: 1041, col: 25, offset: 34086},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1213, col: 44, offset: 41063},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1213, col: 48, offset: 41067},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1213, col: 58, offset: 41077},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1213, col: 89, offset: 41108},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1220, col: 1, offset: 41318},
			expr: &choiceExpr{
				pos: position{line: 1220, col: 18, offset: 41335},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1220, col: 18, offset: 41335},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 45, offset: 41362},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1222, col: 1, offset: 41388},
			expr: &actionExpr{
				pos: position{line: 1222, col: 29, offset: 41416},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1222, col: 29, offset: 41416},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1222, col: 29, offset: 41416},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1222, col: 34, offset: 41421},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1222, col: 44, offset: 41431},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1222, col: 78, offset: 41465},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1226, col: 1, offset: 41606},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1226, col: 37, offset: 41642},
				expr: &ruleRefExpr{
					pos:  position{line: 1226, col: 37, offset: 41642},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1228, col: 1, offset: 41709},
			expr: &actionExpr{
				pos: position{line: 1229, col: 5, offset: 41749},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1229, col: 5, offset: 41749},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1229, col: 5, offset: 41749},
							expr: &litMatcher{
								pos:        position{line: 1229, col: 7, offset: 41751},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1229, col: 13, offset: 41757},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1229, col: 22, offset: 41766},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2225, col: 5, offset: 78563},
										run: (*parser).callonDoubleQuoteMonospaceTextElement7,
										expr: &seqExpr{
											pos: position{line: 2225, col: 5, offset: 78563},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2225, col: 5, offset: 78563},
													expr: &charClassMatcher{
														pos:        position{line: 2225, col: 5, offset: 78563},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2225, col: 15, offset: 78573},
													expr: &choiceExpr{
														pos: position{line: 2225, col: 17, offset: 78575},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2225, col: 17, offset: 78575},
																val:        "[\\r\\n ,]]",
																chars:      []rune{'\r', '\n', ' ', ',', ']'},
																ignoreCase: false,
																inverted:   false,
															},
															&notExpr{
																pos: position{line: 2277, col: 8, offset: 80048},
																expr: &anyMatcher{
																	line: 2277, col: 9, offset: 80049,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2227, col: 9, offset: 78658},
										run: (*parser).callonDoubleQuoteMonospaceTextElement16,
										expr: &seqExpr{
											pos: position{line: 2227, col: 9, offset: 78658},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2227, col: 9, offset: 78658},
													expr: &charClassMatcher{
														pos:        position{line: 2227, col: 9, offset: 78658},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 2227, col: 19, offset: 78668},
													expr: &seqExpr{
														pos: position{line: 2227, col: 20, offset: 78669},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2227, col: 20, offset: 78669},
																val:        "[=*_`]",
																chars:      []rune{'=', '*', '_', '`'},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 2227, col: 27, offset: 78676},
																expr: &charClassMatcher{
																	pos:        position{line: 2227, col: 27, offset: 78676},
																	val:        "[0-9\\pL]",
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2271, col: 10, offset: 79961},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2271, col: 16, offset: 79967},
										run: (*parser).callonDoubleQuoteMonospaceTextElement26,
										expr: &litMatcher{
											pos:        position{line: 2271, col: 16, offset: 79967},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
									&seqExpr{
										pos: position{line: 1231, col: 7, offset: 41822},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 2275, col: 12, offset: 80019},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&notExpr{
												pos: position{line: 1231, col: 15, offset: 41830},
												expr: &choiceExpr{
													pos: position{line: 2275, col: 12, offset: 80019},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1232, col: 7, offset: 41845},
										name: "QuotedString",
									},
									&litMatcher{
										pos:        position{line: 2175, col: 18, offset: 76818},
										val:        "`'",
										ignoreCase: false,
										want:       "\"`'\"",
									},
									&ruleRefExpr{
										pos:  position{line: 1234, col: 7, offset: 41927},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&actionExpr{
										pos: position{line: 1940, col: 23, offset: 69003},
										run: (*parser).callonDoubleQuoteMonospaceTextElement39,
										expr: &seqExpr{
											pos: position{line: 1940, col: 23, offset: 69003},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1940, col: 23, offset: 69003},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1940, col: 32, offset: 69012},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1940, col: 37, offset: 69017},
														run: (*parser).callonDoubleQuoteMonospaceTextElement43,
														expr: &oneOrMoreExpr{
															pos: position{line: 1940, col: 37, offset: 69017},
															expr: &charClassMatcher{
																pos:        position{line: 1940, col: 37, offset: 69017},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1940, col: 76, offset: 69056},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 1252, col: 5, offset: 42433},
										val:        "[^\\r\\n`]",
										chars:      []rune{'\r', '\n', '`'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 1253, col: 7, offset: 42535},
										run: (*parser).callonDoubleQuoteMonospaceTextElement48,
										expr: &seqExpr{
											pos: position{line: 1253, col: 7, offset: 42535},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1253, col: 7, offset: 42535},
													val:        "``",
													ignoreCase: false,
													want:       "\"``\"",
												},
												&actionExpr{
													pos: position{line: 2217, col: 14, offset: 78190},
													run: (*parser).callonDoubleQuoteMonospaceTextElement51,
													expr: &oneOrMoreExpr{
														pos: position{line: 2217, col: 14, offset: 78190},
														expr: &charClassMatcher{
															pos:        position{line: 2217, col: 14, offset: 78190},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 1240, col: 1, offset: 42075},
			expr: &actionExpr{
				pos: position{line: 1241, col: 5, offset: 42119},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1241, col: 5, offset: 42119},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1241, col: 5, offset: 42119},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1241, col: 16, offset: 42130},
								expr: &ruleRefExpr{
									pos:  position{line: 1241, col: 17, offset: 42131},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1242, col: 5, offset: 42157},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1242, col: 11, offset: 42163},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1242, col: 11, offset: 42163},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1243, col: 11, offset: 42198},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1244, col: 11, offset: 42217},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1245, col: 11, offset: 42238},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1246, col: 11, offset: 42259},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1247, col: 11, offset: 42283},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1257, col: 1, offset: 42718},
			expr: &choiceExpr{
				pos: position{line: 1258, col: 5, offset: 42751},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1258, col: 5, offset: 42751},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1258, col: 5, offset: 42751},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1258, col: 6, offset: 42752},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1258, col: 10, offset: 42756},
									expr: &litMatcher{
										pos:        position{line: 1258, col: 11, offset: 42757},
										val:        "`",
										ignoreCase: false,
										want:       "\"`\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1258, col: 16, offset: 42762},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1258, col: 26, offset: 42772},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1258, col: 60, offset: 42806},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1260, col: 9, offset: 43011},
						run: (*parser).callonSingleQuoteMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1260, col: 9, offset: 43011},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1260, col: 9, offset: 43011},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1260, col: 13, offset: 43015},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1260, col: 23, offset: 43025},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1260, col: 23, offset: 43025},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1260, col: 27, offset: 43029},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1260, col: 61, offset: 43063},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1264, col: 1, offset: 43289},
			expr: &seqExpr{
				pos: position{line: 1264, col: 37, offset: 43325},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1264, col: 37, offset: 43325},
						expr: &choiceExpr{
							pos: position{line: 2271, col: 10, offset: 79961},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2271, col: 10, offset: 79961},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
								&actionExpr{
									pos: position{line: 2271, col: 16, offset: 79967},
									run: (*parser).callonSingleQuoteMonospaceTextElements5,
									expr: &litMatcher{
										pos:        position{line: 2271, col: 16, offset: 79967},
										val:        "\t",
										ignoreCase: false,
										want:       "\"\\t\"",
									},
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1264, col: 44, offset: 43332},
						expr: &ruleRefExpr{
							pos:  position{line: 1264, col: 44, offset: 43332},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1266, col: 1, offset: 43366},
			expr: &choiceExpr{
				pos: position{line: 1267, col: 5, offset: 43407},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2225, col: 5, offset: 78563},
						run: (*parser).callonSingleQuoteMonospaceTextElement2,
						expr: &seqExpr{
							pos: position{line: 2225, col: 5, offset: 78563},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2225, col: 5, offset: 78563},
									expr: &charClassMatcher{
										pos:        position{line: 2225, col: 5, offset: 78563},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2225, col: 15, offset: 78573},
									expr: &choiceExpr{
										pos: position{line: 2225, col: 17, offset: 78575},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2225, col: 17, offset: 78575},
												val:        "[\\r\\n ,]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&notExpr{
												pos: position{line: 2277, col: 8, offset: 80048},
												expr: &anyMatcher{
													line: 2277, col: 9, offset: 80049,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2227, col: 9, offset: 78658},
						run: (*parser).callonSingleQuoteMonospaceTextElement11,
						expr: &seqExpr{
							pos: position{line: 2227, col: 9, offset: 78658},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2227, col: 9, offset: 78658},
									expr: &charClassMatcher{
										pos:        position{line: 2227, col: 9, offset: 78658},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2227, col: 19, offset: 78668},
									expr: &seqExpr{
										pos: position{line: 2227, col: 20, offset: 78669},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2227, col: 20, offset: 78669},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 27, offset: 78676},
												expr: &charClassMatcher{
													pos:        position{line: 2227, col: 27, offset: 78676},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1268, col: 7, offset: 43418},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 2275, col: 12, offset: 80019},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2275, col: 12, offset: 80019},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&charClassMatcher{
										pos:        position{line: 2275, col: 21, offset: 80028},
										val:        "[\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
							&notExpr{
								pos: position{line: 1268, col: 15, offset: 43426},
								expr: &choiceExpr{
									pos: position{line: 2275, col: 12, offset: 80019},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2275, col: 12, offset: 80019},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&charClassMatcher{
											pos:        position{line: 2275, col: 21, offset: 80028},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1269, col: 7, offset: 43441},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1270, col: 7, offset: 43460},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1270, col: 7, offset: 43460},
								expr: &choiceExpr{
									pos: position{line: 2271, col: 10, offset: 79961},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2271, col: 10, offset: 79961},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
										&actionExpr{
											pos: position{line: 2271, col: 16, offset: 79967},
											run: (*parser).callonSingleQuoteMonospaceTextElement33,
											expr: &litMatcher{
												pos:        position{line: 2271, col: 16, offset: 79967},
												val:        "\t",
												ignoreCase: false,
												want:       "\"\\t\"",
											},
										},
									},
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1270, col: 14, offset: 43467},
								expr: &seqExpr{
									pos: position{line: 1270, col: 15, offset: 43468},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1270, col: 15, offset: 43468},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1270, col: 19, offset: 43472},
											expr: &litMatcher{
												pos:        position{line: 1270, col: 20, offset: 43473},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1271, col: 7, offset: 43597},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&litMatcher{
						pos:        position{line: 2175, col: 18, offset: 76818},
						val:        "`'",
						ignoreCase: false,
						want:       "\"`'\"",
					},
					&actionExpr{
						pos: position{line: 1940, col: 23, offset: 69003},
						run: (*parser).callonSingleQuoteMonospaceTextElement42,
						expr: &seqExpr{
							pos: position{line: 1940, col: 23, offset: 69003},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1940, col: 23, offset: 69003},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 1940, col: 32, offset: 69012},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1940, col: 37, offset: 69017},
										run: (*parser).callonSingleQuoteMonospaceTextElement46,
										expr: &oneOrMoreExpr{
											pos: position{line: 1940, col: 37, offset: 69017},
											expr: &charClassMatcher{
												pos:        position{line: 1940, col: 37, offset: 69017},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1940, col: 76, offset: 69056},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1288, col: 5, offset: 44086},
						run: (*parser).callonSingleQuoteMonospaceTextElement50,
						expr: &choiceExpr{
							pos: position{line: 1288, col: 6, offset: 44087},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 1288, col: 6, offset: 44087},
									val:        "[^\\r\\n`]",
									chars:      []rune{'\r', '\n', '`'},
									ignoreCase: false,
									inverted:   true,
								},
								&seqExpr{
									pos: position{line: 1289, col: 7, offset: 44191},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1289, col: 7, offset: 44191},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&actionExpr{
											pos: position{line: 2217, col: 14, offset: 78190},
											run: (*parser).callonSingleQuoteMonospaceTextElement55,
											expr: &oneOrMoreExpr{
												pos: position{line: 2217, col: 14, offset: 78190},
												expr: &charClassMatcher{
													pos:        position{line: 2217, col: 14, offset: 78190},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 1276, col: 1, offset: 43728},
			expr: &actionExpr{
				pos: position{line: 1277, col: 5, offset: 43772},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1277, col: 5, offset: 43772},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1277, col: 5, offset: 43772},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1277, col: 16, offset: 43783},
								expr: &ruleRefExpr{
									pos:  position{line: 1277, col: 17, offset: 43784},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1278, col: 5, offset: 43810},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1278, col: 11, offset: 43816},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1278, col: 11, offset: 43816},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1279, col: 11, offset: 43851},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1280, col: 11, offset: 43870},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1281, col: 11, offset: 43891},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1282, col: 11, offset: 43912},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1283, col: 11, offset: 43936},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1293, col: 1, offset: 44373},
			expr: &choiceExpr{
				pos: position{line: 1294, col: 5, offset: 44402},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1294, col: 5, offset: 44402},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1294, col: 5, offset: 44402},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1294, col: 5, offset: 44402},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1045, col: 25, offset: 34151},
										run: (*parser).callonEscapedMonospaceText5,
										expr: &seqExpr{
											pos: position{line: 1045, col: 25, offset: 34151},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1045, col: 25, offset: 34151},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1045, col: 30, offset: 34156},
													expr: &litMatcher{
														pos:        position{line: 1045, col: 30, offset: 34156},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1294, col: 40, offset: 44437},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1294, col: 45, offset: 44442},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1294, col: 55, offset: 44452},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1294, col: 89, offset: 44486},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1296, col: 9, offset: 44643},
						run: (*parser).callonEscapedMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1296, col: 9, offset: 44643},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1296, col: 9, offset: 44643},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1041, col: 25, offset: 34086},
										run: (*parser).callonEscapedMonospaceText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1041, col: 25, offset: 34086},
											expr: &litMatcher{
												pos:        position{line: 1041, col: 25, offset: 34086},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1296, col: 44, offset: 44678},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1296, col: 49, offset: 44683},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1296, col: 59, offset: 44693},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1296, col: 93, offset: 44727},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1299, col: 9, offset: 44927},
						run: (*parser).callonEscapedMonospaceText24,
						expr: &seqExpr{
							pos: position{line: 1299, col: 9, offset: 44927},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1299, col: 9, offset: 44927},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1041, col: 25, offset: 34086},
										run: (*parser).callonEscapedMonospaceText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1041, col: 25, offset: 34086},
											expr: &litMatcher{
												pos:        position{line: 1041, col: 25, offset: 34086},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1299, col: 44, offset: 44962},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1299, col: 48, offset: 44966},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1299, col: 58, offset: 44976},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1299, col: 92, offset: 45010},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1307, col: 1, offset: 45335},
			expr: &choiceExpr{
				pos: position{line: 1307, col: 17, offset: 45351},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1307, col: 17, offset: 45351},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1307, col: 38, offset: 45372},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1309, col: 1, offset: 45392},
			expr: &actionExpr{
				pos: position{line: 1309, col: 23, offset: 45414},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1309, col: 23, offset: 45414},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1317, col: 27, offset: 45721},
							val:        "'`",
							ignoreCase: false,
							want:       "\"'`\"",
						},
						&notExpr{
							pos: position{line: 1317, col: 32, offset: 45726},
							expr: &charClassMatcher{
								pos:        position{line: 1317, col: 33, offset: 45727},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1309, col: 46, offset: 45437},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1309, col: 55, offset: 45446},
								name: "SingleQuotedStringElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1319, col: 25, offset: 45762},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1313, col: 1, offset: 45577},
			expr: &actionExpr{
				pos: position{line: 1313, col: 31, offset: 45607},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1313, col: 31, offset: 45607},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1313, col: 41, offset: 45617},
						expr: &ruleRefExpr{
							pos:  position{line: 1313, col: 41, offset: 45617},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1322, col: 1, offset: 45850},
			expr: &actionExpr{
				pos: position{line: 1323, col: 5, offset: 45884},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1323, col: 5, offset: 45884},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1324, col: 9, offset: 45902},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1324, col: 9, offset: 45902},
								exprs: []interface{}{
									&actionExpr{
										pos: position{line: 995, col: 14, offset: 32701},
										run: (*parser).callonSingleQuotedStringElement5,
										expr: &seqExpr{
											pos: position{line: 995, col: 14, offset: 32701},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2271, col: 10, offset: 79961},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2271, col: 10, offset: 79961},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2271, col: 16, offset: 79967},
															run: (*parser).callonSingleQuotedStringElement9,
															expr: &litMatcher{
																pos:        position{line: 2271, col: 16, offset: 79967},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 995, col: 20, offset: 32707},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 995, col: 24, offset: 32711},
													expr: &choiceExpr{
														pos: position{line: 2271, col: 10, offset: 79961},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2271, col: 10, offset: 79961},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2271, col: 16, offset: 79967},
																run: (*parser).callonSingleQuotedStringElement15,
																expr: &litMatcher{
																	pos:        position{line: 2271, col: 16, offset: 79967},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 995, col: 31, offset: 32718},
													expr: &choiceExpr{
														pos: position{line: 2279, col: 8, offset: 80059},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2275, col: 12, offset: 80019},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&charClassMatcher{
																pos:        position{line: 2275, col: 21, offset: 80028},
																val:        "[\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
															&notExpr{
																pos: position{line: 2277, col: 8, offset: 80048},
																expr: &anyMatcher{
																	line: 2277, col: 9, offset: 80049,
																},
															},
														},
													},
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 1324, col: 19, offset: 45912},
										expr: &litMatcher{
											pos:        position{line: 1319, col: 25, offset: 45762},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1325, col: 11, offset: 45969},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1325, col: 11, offset: 45969},
										expr: &choiceExpr{
											pos: position{line: 2271, col: 10, offset: 79961},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2271, col: 10, offset: 79961},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
												&actionExpr{
													pos: position{line: 2271, col: 16, offset: 79967},
													run: (*parser).callonSingleQuotedStringElement29,
													expr: &litMatcher{
														pos:        position{line: 2271, col: 16, offset: 79967},
														val:        "\t",
														ignoreCase: false,
														want:       "\"\\t\"",
													},
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 1325, col: 18, offset: 45976},
										expr: &litMatcher{
											pos:        position{line: 1319, col: 25, offset: 45762},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1326, col: 12, offset: 46009},
								run: (*parser).callonSingleQuotedStringElement33,
								expr: &seqExpr{
									pos: position{line: 1326, col: 12, offset: 46009},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1326, col: 12, offset: 46009},
											expr: &litMatcher{
												pos:        position{line: 1326, col: 13, offset: 46010},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
										&labeledExpr{
											pos:   position{line: 1326, col: 17, offset: 46014},
											label: "element",
											expr: &choiceExpr{
												pos: position{line: 2169, col: 11, offset: 76653},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2171, col: 15, offset: 76747},
														run: (*parser).callonSingleQuotedStringElement39,
														expr: &litMatcher{
															pos:        position{line: 2171, col: 15, offset: 76747},
															val:        "`'",
															ignoreCase: false,
															want:       "\"`'\"",
														},
													},
													&actionExpr{
														pos: position{line: 2177, col: 14, offset: 76854},
														run: (*parser).callonSingleQuotedStringElement41,
														expr: &litMatcher{
															pos:        position{line: 2177, col: 14, offset: 76854},
															val:        "(C)",
															ignoreCase: false,
															want:       "\"(C)\"",
														},
													},
													&actionExpr{
														pos: position{line: 2180, col: 14, offset: 76921},
														run: (*parser).callonSingleQuotedStringElement43,
														expr: &litMatcher{
															pos:        position{line: 2180, col: 14, offset: 76921},
															val:        "(TM)",
															ignoreCase: false,
															want:       "\"(TM)\"",
														},
													},
													&actionExpr{
														pos: position{line: 2183, col: 15, offset: 76990},
														run: (*parser).callonSingleQuotedStringElement45,
														expr: &litMatcher{
															pos:        position{line: 2183, col: 15, offset: 76990},
															val:        "(R)",
															ignoreCase: false,
															want:       "\"(R)\"",
														},
													},
													&actionExpr{
														pos: position{line: 2186, col: 13, offset: 77056},
														run: (*parser).callonSingleQuotedStringElement47,
														expr: &litMatcher{
															pos:        position{line: 2186, col: 13, offset: 77056},
															val:        "...",
															ignoreCase: false,
															want:       "\"...\"",
														},
													},
													&actionExpr{
														pos: position{line: 2194, col: 22, offset: 77354},
														run: (*parser).callonSingleQuotedStringElement49,
														expr: &seqExpr{
															pos: position{line: 2194, col: 22, offset: 77354},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2213, col: 13, offset: 78116},
																	val:        "[0-9\\pL]",
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&litMatcher{
																	pos:        position{line: 2194, col: 31, offset: 77363},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&andExpr{
																	pos: position{line: 2194, col: 35, offset: 77367},
																	expr: &charClassMatcher{
																		pos:        position{line: 2194, col: 36, offset: 77368},
																		val:        "[\\pL]",
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1327, col: 11, offset: 46095},
								name: "QuotedTextInSingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1328, col: 11, offset: 46136},
								name: "DoubleQuotedString",
							},
							&charClassMatcher{
								pos:        position{line: 1345, col: 41, offset: 46617},
								val:        "[^\\r\\n\\t `]",
								chars:      []rune{'\r', '\n', '\t', ' ', '`'},
								ignoreCase: false,
								inverted:   true,
							},
							&actionExpr{
								pos: position{line: 1345, col: 55, offset: 46631},
								run: (*parser).callonSingleQuotedStringElement58,
								expr: &seqExpr{
									pos: position{line: 1345, col: 55, offset: 46631},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1345, col: 55, offset: 46631},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1345, col: 59, offset: 46635},
											expr: &litMatcher{
												pos:        position{line: 1345, col: 60, offset: 46636},
												val:        "'",
												ignoreCase: false,
												want:       "\"'\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 1334, col: 1, offset: 46244},
			expr: &actionExpr{
				pos: position{line: 1335, col: 5, offset: 46282},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1335, col: 5, offset: 46282},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1335, col: 5, offset: 46282},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1335, col: 16, offset: 46293},
								expr: &ruleRefExpr{
									pos:  position{line: 1335, col: 17, offset: 46294},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1336, col: 5, offset: 46320},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1336, col: 11, offset: 46326},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1336, col: 11, offset: 46326},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1337, col: 11, offset: 46345},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1338, col: 12, offset: 46367},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1338, col: 12, offset: 46367},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1338, col: 12, offset: 46367},
													expr: &litMatcher{
														pos:        position{line: 1338, col: 13, offset: 46368},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1338, col: 18, offset: 46373},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1338, col: 27, offset: 46382},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1339, col: 11, offset: 46431},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1340, col: 11, offset: 46455},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1341, col: 11, offset: 46481},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1349, col: 1, offset: 46700},
			expr: &actionExpr{
				pos: position{line: 1349, col: 23, offset: 46722},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 23, offset: 46722},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1378, col: 27, offset: 47742},
							val:        "\"`",
							ignoreCase: false,
							want:       "\"\\\"`\"",
						},
						&notExpr{
							pos: position{line: 1378, col: 33, offset: 47748},
							expr: &charClassMatcher{
								pos:        position{line: 1378, col: 34, offset: 47749},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1349, col: 46, offset: 46745},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1349, col: 55, offset: 46754},
								name: "DoubleQuotedStringElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1380, col: 25, offset: 47784},
							val:        "`\"",
							ignoreCase: false,
							want:       "\"`\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1353, col: 1, offset: 46885},
			expr: &actionExpr{
				pos: position{line: 1353, col: 31, offset: 46915},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1353, col: 31, offset: 46915},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1353, col: 41, offset: 46925},
						expr: &ruleRefExpr{
							pos:  position{line: 1353, col: 41, offset: 46925},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1358, col: 1, offset: 47085},
			expr: &actionExpr{
				pos: position{line: 1358, col: 30, offset: 47114},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1358, col: 30, offset: 47114},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1359, col: 9, offset: 47132},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1359, col: 9, offset: 47132},
								exprs: []interface{}{
									&actionExpr{
										pos: position{line: 995, col: 14, offset: 32701},
										run: (*parser).callonDoubleQuotedStringElement5,
										expr: &seqExpr{
											pos: position{line: 995, col: 14, offset: 32701},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2271, col: 10, offset: 79961},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2271, col: 10, offset: 79961},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2271, col: 16, offset: 79967},
															run: (*parser).callonDoubleQuotedStringElement9,
															expr: &litMatcher{
																pos:        position{line: 2271, col: 16, offset: 79967},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 995, col: 20, offset: 32707},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 995, col: 24, offset: 32711},
													expr: &choiceExpr{
														pos: position{line: 2271, col: 10, offset: 79961},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2271, col: 10, offset: 79961},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2271, col: 16, offset: 79967},
																run: (*parser).callonDoubleQuotedStringElement15,
																expr: &litMatcher{
																	pos:        position{line: 2271, col: 16, offset: 79967},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 995, col: 31, offset: 32718},
													expr: &choiceExpr{
														pos: position{line: 2279, col: 8, offset: 80059},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2275, col: 12, offset: 80019},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&charClassMatcher{
																pos:        position{line: 2275, col: 21, offset: 80028},
																val:        "[\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
															&notExpr{
																pos: position{line: 2277, col: 8, offset: 80048},
																expr: &anyMatcher{
																	line: 2277, col: 9, offset: 80049,
																},
															},
														},
													},
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 1359, col: 19, offset: 47142},
										expr: &litMatcher{
											pos:        position{line: 1380, col: 25, offset: 47784},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1360, col: 11, offset: 47199},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1360, col: 11, offset: 47199},
										expr: &choiceExpr{
											pos: position{line: 2271, col: 10, offset: 79961},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2271, col: 10, offset: 79961},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
												&actionExpr{
													pos: position{line: 2271, col: 16, offset: 79967},
													run: (*parser).callonDoubleQuotedStringElement29,
													expr: &litMatcher{
														pos:        position{line: 2271, col: 16, offset: 79967},
														val:        "\t",
														ignoreCase: false,
														want:       "\"\\t\"",
													},
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 1360, col: 18, offset: 47206},
										expr: &litMatcher{
											pos:        position{line: 1380, col: 25, offset: 47784},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1361, col: 11, offset: 47238},
								name: "QuotedTextInDoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1362, col: 11, offset: 47279},
								name: "SingleQuotedString",
							},
							&actionExpr{
								pos: position{line: 1382, col: 41, offset: 47831},
								run: (*parser).callonDoubleQuotedStringElement35,
								expr: &choiceExpr{
									pos: position{line: 1382, col: 42, offset: 47832},
									alternatives: []interface{}{
										&charClassMatcher{
											pos:        position{line: 1382, col: 42, offset: 47832},
											val:        "[^\\r\\n\\t `]",
											chars:      []rune{'\r', '\n', '\t', ' ', '`'},
											ignoreCase: false,
											inverted:   true,
										},
										&seqExpr{
											pos: position{line: 1382, col: 56, offset: 47846},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1382, col: 56, offset: 47846},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
												&notExpr{
													pos: position{line: 1382, col: 60, offset: 47850},
													expr: &litMatcher{
														pos:        position{line: 1382, col: 61, offset: 47851},
														val:        "\"",
														ignoreCase: false,
														want:       "\"\\\"\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 1367, col: 1, offset: 47382},
			expr: &actionExpr{
				pos: position{line: 1368, col: 5, offset: 47420},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1368, col: 5, offset: 47420},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1368, col: 5, offset: 47420},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1368, col: 16, offset: 47431},
								expr: &ruleRefExpr{
									pos:  position{line: 1368, col: 17, offset: 47432},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1369, col: 5, offset: 47458},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1369, col: 11, offset: 47464},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1369, col: 11, offset: 47464},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1370, col: 11, offset: 47483},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 1371, col: 12, offset: 47505},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 1371, col: 12, offset: 47505},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1371, col: 12, offset: 47505},
													expr: &litMatcher{
														pos:        position{line: 1371, col: 13, offset: 47506},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1371, col: 19, offset: 47512},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 1371, col: 28, offset: 47521},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1372, col: 11, offset: 47570},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1373, col: 11, offset: 47594},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1374, col: 11, offset: 47620},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1391, col: 1, offset: 47971},
			expr: &choiceExpr{
				pos: position{line: 1391, col: 15, offset: 47985},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1391, col: 15, offset: 47985},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1391, col: 39, offset: 48009},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1393, col: 1, offset: 48032},
			expr: &actionExpr{
				pos: position{line: 1393, col: 26, offset: 48057},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1393, col: 26, offset: 48057},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1393, col: 26, offset: 48057},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1393, col: 31, offset: 48062},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1393, col: 41, offset: 48072},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1393, col: 72, offset: 48103},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1397, col: 1, offset: 48241},
			expr: &seqExpr{
				pos: position{line: 1397, col: 34, offset: 48274},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1397, col: 34, offset: 48274},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1397, col: 63, offset: 48303},
						expr: &seqExpr{
							pos: position{line: 1397, col: 64, offset: 48304},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1397, col: 64, offset: 48304},
									expr: &litMatcher{
										pos:        position{line: 1397, col: 66, offset: 48306},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1397, col: 73, offset: 48313},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2271, col: 10, offset: 79961},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
										&actionExpr{
											pos: position{line: 2271, col: 16, offset: 79967},
											run: (*parser).callonDoubleQuoteMarkedTextElements9,
											expr: &litMatcher{
												pos:        position{line: 2271, col: 16, offset: 79967},
												val:        "\t",
												ignoreCase: false,
												want:       "\"\\t\"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1397, col: 81, offset: 48321},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1399, col: 1, offset: 48388},
			expr: &choiceExpr{
				pos: position{line: 1399, col: 33, offset: 48420},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2225, col: 5, offset: 78563},
						run: (*parser).callonDoubleQuoteMarkedTextElement2,
						expr: &seqExpr{
							pos: position{line: 2225, col: 5, offset: 78563},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2225, col: 5, offset: 78563},
									expr: &charClassMatcher{
										pos:        position{line: 2225, col: 5, offset: 78563},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2225, col: 15, offset: 78573},
									expr: &choiceExpr{
										pos: position{line: 2225, col: 17, offset: 78575},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2225, col: 17, offset: 78575},
												val:        "[\\r\\n ,]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&notExpr{
												pos: position{line: 2277, col: 8, offset: 80048},
												expr: &anyMatcher{
													line: 2277, col: 9, offset: 80049,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2227, col: 9, offset: 78658},
						run: (*parser).callonDoubleQuoteMarkedTextElement11,
						expr: &seqExpr{
							pos: position{line: 2227, col: 9, offset: 78658},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2227, col: 9, offset: 78658},
									expr: &charClassMatcher{
										pos:        position{line: 2227, col: 9, offset: 78658},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2227, col: 19, offset: 78668},
									expr: &seqExpr{
										pos: position{line: 2227, col: 20, offset: 78669},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2227, col: 20, offset: 78669},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 27, offset: 78676},
												expr: &charClassMatcher{
													pos:        position{line: 2227, col: 27, offset: 78676},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1400, col: 11, offset: 48435},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 2275, col: 12, offset: 80019},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2275, col: 12, offset: 80019},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&charClassMatcher{
										pos:        position{line: 2275, col: 21, offset: 80028},
										val:        "[\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
							&notExpr{
								pos: position{line: 1400, col: 19, offset: 48443},
								expr: &choiceExpr{
									pos: position{line: 2275, col: 12, offset: 80019},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2275, col: 12, offset: 80019},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&charClassMatcher{
											pos:        position{line: 2275, col: 21, offset: 80028},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1401, col: 11, offset: 48462},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1402, col: 11, offset: 48485},
						name: "NonDoubleQuoteMarkedText",
					},
					&actionExpr{
						pos: position{line: 1940, col: 23, offset: 69003},
						run: (*parser).callonDoubleQuoteMarkedTextElement30,
						expr: &seqExpr{
							pos: position{line: 1940, col: 23, offset: 69003},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1940, col: 23, offset: 69003},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 1940, col: 32, offset: 69012},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1940, col: 37, offset: 69017},
										run: (*parser).callonDoubleQuoteMarkedTextElement34,
										expr: &oneOrMoreExpr{
											pos: position{line: 1940, col: 37, offset: 69017},
											expr: &charClassMatcher{
												pos:        position{line: 1940, col: 37, offset: 69017},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1940, col: 76, offset: 69056},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 1418, col: 5, offset: 48932},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1419, col: 7, offset: 49031},
						run: (*parser).callonDoubleQuoteMarkedTextElement39,
						expr: &seqExpr{
							pos: position{line: 1419, col: 7, offset: 49031},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1419, col: 7, offset: 49031},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&actionExpr{
									pos: position{line: 2217, col: 14, offset: 78190},
									run: (*parser).callonDoubleQuoteMarkedTextElement42,
									expr: &oneOrMoreExpr{
										pos: position{line: 2217, col: 14, offset: 78190},
										expr: &charClassMatcher{
											pos:        position{line: 2217, col: 14, offset: 78190},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMarkedText",
			pos:  position{line: 1406, col: 1, offset: 48589},
			expr: &actionExpr{
				pos: position{line: 1407, col: 5, offset: 48621},
				run: (*parser).callonNonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1407, col: 5, offset: 48621},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1407, col: 5, offset: 48621},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1407, col: 16, offset: 48632},
								expr: &ruleRefExpr{
									pos:  position{line: 1407, col: 17, offset: 48633},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1408, col: 5, offset: 48659},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1408, col: 11, offset: 48665},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1408, col: 11, offset: 48665},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1409, col: 11, offset: 48684},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1410, col: 11, offset: 48705},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1411, col: 11, offset: 48729},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1412, col: 11, offset: 48761},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1413, col: 11, offset: 48785},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1423, col: 1, offset: 49201},
			expr: &choiceExpr{
				pos: position{line: 1423, col: 26, offset: 49226},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1423, col: 26, offset: 49226},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1423, col: 26, offset: 49226},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1423, col: 27, offset: 49227},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&notExpr{
									pos: position{line: 1423, col: 31, offset: 49231},
									expr: &litMatcher{
										pos:        position{line: 1423, col: 32, offset: 49232},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1423, col: 37, offset: 49237},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1423, col: 47, offset: 49247},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1423, col: 78, offset: 49278},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1425, col: 5, offset: 49472},
						run: (*parser).callonSingleQuoteMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1425, col: 5, offset: 49472},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1425, col: 5, offset: 49472},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1425, col: 9, offset: 49476},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1425, col: 19, offset: 49486},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1425, col: 19, offset: 49486},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1425, col: 23, offset: 49490},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1425, col: 54, offset: 49521},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1429, col: 1, offset: 49734},
			expr: &seqExpr{
				pos: position{line: 1429, col: 34, offset: 49767},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1429, col: 34, offset: 49767},
						expr: &choiceExpr{
							pos: position{line: 2271, col: 10, offset: 79961},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2271, col: 10, offset: 79961},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
								&actionExpr{
									pos: position{line: 2271, col: 16, offset: 79967},
									run: (*parser).callonSingleQuoteMarkedTextElements5,
									expr: &litMatcher{
										pos:        position{line: 2271, col: 16, offset: 79967},
										val:        "\t",
										ignoreCase: false,
										want:       "\"\\t\"",
									},
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1429, col: 41, offset: 49774},
						expr: &ruleRefExpr{
							pos:  position{line: 1429, col: 41, offset: 49774},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1431, col: 1, offset: 49805},
			expr: &choiceExpr{
				pos: position{line: 1431, col: 33, offset: 49837},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2225, col: 5, offset: 78563},
						run: (*parser).callonSingleQuoteMarkedTextElement2,
						expr: &seqExpr{
							pos: position{line: 2225, col: 5, offset: 78563},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2225, col: 5, offset: 78563},
									expr: &charClassMatcher{
										pos:        position{line: 2225, col: 5, offset: 78563},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2225, col: 15, offset: 78573},
									expr: &choiceExpr{
										pos: position{line: 2225, col: 17, offset: 78575},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2225, col: 17, offset: 78575},
												val:        "[\\r\\n ,]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&notExpr{
												pos: position{line: 2277, col: 8, offset: 80048},
												expr: &anyMatcher{
													line: 2277, col: 9, offset: 80049,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2227, col: 9, offset: 78658},
						run: (*parser).callonSingleQuoteMarkedTextElement11,
						expr: &seqExpr{
							pos: position{line: 2227, col: 9, offset: 78658},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2227, col: 9, offset: 78658},
									expr: &charClassMatcher{
										pos:        position{line: 2227, col: 9, offset: 78658},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2227, col: 19, offset: 78668},
									expr: &seqExpr{
										pos: position{line: 2227, col: 20, offset: 78669},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2227, col: 20, offset: 78669},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 27, offset: 78676},
												expr: &charClassMatcher{
													pos:        position{line: 2227, col: 27, offset: 78676},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1432, col: 11, offset: 49852},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 2275, col: 12, offset: 80019},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2275, col: 12, offset: 80019},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&charClassMatcher{
										pos:        position{line: 2275, col: 21, offset: 80028},
										val:        "[\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
							&notExpr{
								pos: position{line: 1432, col: 19, offset: 49860},
								expr: &choiceExpr{
									pos: position{line: 2275, col: 12, offset: 80019},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2275, col: 12, offset: 80019},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&charClassMatcher{
											pos:        position{line: 2275, col: 21, offset: 80028},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1433, col: 11, offset: 49879},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1434, col: 11, offset: 49902},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1434, col: 11, offset: 49902},
								expr: &choiceExpr{
									pos: position{line: 2271, col: 10, offset: 79961},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2271, col: 10, offset: 79961},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
										&actionExpr{
											pos: position{line: 2271, col: 16, offset: 79967},
											run: (*parser).callonSingleQuoteMarkedTextElement33,
											expr: &litMatcher{
												pos:        position{line: 2271, col: 16, offset: 79967},
												val:        "\t",
												ignoreCase: false,
												want:       "\"\\t\"",
											},
										},
									},
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1434, col: 18, offset: 49909},
								expr: &seqExpr{
									pos: position{line: 1434, col: 19, offset: 49910},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1434, col: 19, offset: 49910},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1434, col: 23, offset: 49914},
											expr: &litMatcher{
												pos:        position{line: 1434, col: 24, offset: 49915},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1435, col: 11, offset: 49931},
						name: "NonSingleQuoteMarkedText",
					},
					&actionExpr{
						pos: position{line: 1940, col: 23, offset: 69003},
						run: (*parser).callonSingleQuoteMarkedTextElement41,
						expr: &seqExpr{
							pos: position{line: 1940, col: 23, offset: 69003},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1940, col: 23, offset: 69003},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 1940, col: 32, offset: 69012},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1940, col: 37, offset: 69017},
										run: (*parser).callonSingleQuoteMarkedTextElement45,
										expr: &oneOrMoreExpr{
											pos: position{line: 1940, col: 37, offset: 69017},
											expr: &charClassMatcher{
												pos:        position{line: 1940, col: 37, offset: 69017},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1940, col: 76, offset: 69056},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 1450, col: 5, offset: 50377},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1451, col: 7, offset: 50474},
						run: (*parser).callonSingleQuoteMarkedTextElement50,
						expr: &seqExpr{
							pos: position{line: 1451, col: 7, offset: 50474},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1451, col: 7, offset: 50474},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&actionExpr{
									pos: position{line: 2217, col: 14, offset: 78190},
									run: (*parser).callonSingleQuoteMarkedTextElement53,
									expr: &oneOrMoreExpr{
										pos: position{line: 2217, col: 14, offset: 78190},
										expr: &charClassMatcher{
											pos:        position{line: 2217, col: 14, offset: 78190},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMarkedText",
			pos:  position{line: 1439, col: 1, offset: 50035},
			expr: &actionExpr{
				pos: position{line: 1440, col: 5, offset: 50067},
				run: (*parser).callonNonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1440, col: 5, offset: 50067},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1440, col: 5, offset: 50067},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1440, col: 16, offset: 50078},
								expr: &ruleRefExpr{
									pos:  position{line: 1440, col: 17, offset: 50079},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1441, col: 5, offset: 50105},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1441, col: 11, offset: 50111},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1441, col: 11, offset: 50111},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1442, col: 11, offset: 50143},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1443, col: 11, offset: 50162},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1444, col: 11, offset: 50183},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1445, col: 11, offset: 50207},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1446, col: 11, offset: 50231},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1455, col: 1, offset: 50641},
			expr: &choiceExpr{
				pos: position{line: 1456, col: 5, offset: 50666},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1456, col: 5, offset: 50666},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1456, col: 5, offset: 50666},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1456, col: 5, offset: 50666},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1045, col: 25, offset: 34151},
										run: (*parser).callonEscapedMarkedText5,
										expr: &seqExpr{
											pos: position{line: 1045, col: 25, offset: 34151},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1045, col: 25, offset: 34151},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1045, col: 30, offset: 34156},
													expr: &litMatcher{
														pos:        position{line: 1045, col: 30, offset: 34156},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1456, col: 40, offset: 50701},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1456, col: 45, offset: 50706},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1456, col: 55, offset: 50716},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1456, col: 86, offset: 50747},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1458, col: 9, offset: 50904},
						run: (*parser).callonEscapedMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1458, col: 9, offset: 50904},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1458, col: 9, offset: 50904},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1041, col: 25, offset: 34086},
										run: (*parser).callonEscapedMarkedText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1041, col: 25, offset: 34086},
											expr: &litMatcher{
												pos:        position{line: 1041, col: 25, offset: 34086},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1458, col: 44, offset: 50939},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1458, col: 49, offset: 50944},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1458, col: 59, offset: 50954},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1458, col: 90, offset: 50985},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1461, col: 9, offset: 51185},
						run: (*parser).callonEscapedMarkedText24,
						expr: &seqExpr{
							pos: position{line: 1461, col: 9, offset: 51185},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1461, col: 9, offset: 51185},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1041, col: 25, offset: 34086},
										run: (*parser).callonEscapedMarkedText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1041, col: 25, offset: 34086},
											expr: &litMatcher{
												pos:        position{line: 1041, col: 25, offset: 34086},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1461, col: 44, offset: 51220},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1461, col: 48, offset: 51224},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1461, col: 58, offset: 51234},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1461, col: 89, offset: 51265},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1466, col: 1, offset: 51415},
			expr: &actionExpr{
				pos: position{line: 1466, col: 18, offset: 51432},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1466, col: 18, offset: 51432},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1466, col: 18, offset: 51432},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1466, col: 22, offset: 51436},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1466, col: 31, offset: 51445},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1466, col: 53, offset: 51467},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1470, col: 1, offset: 51567},
			expr: &choiceExpr{
				pos: position{line: 1470, col: 25, offset: 51591},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1470, col: 25, offset: 51591},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 1472, col: 21, offset: 51643},
						run: (*parser).callonSubscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 1472, col: 21, offset: 51643},
							expr: &charClassMatcher{
								pos:        position{line: 1472, col: 21, offset: 51643},
								val:        "[^\\r\\n ~]",
								chars:      []rune{'\r', '\n', ' ', '~'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1476, col: 1, offset: 51720},
			expr: &actionExpr{
				pos: position{line: 1476, col: 25, offset: 51744},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1476, col: 25, offset: 51744},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1476, col: 25, offset: 51744},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1041, col: 25, offset: 34086},
								run: (*parser).callonEscapedSubscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1041, col: 25, offset: 34086},
									expr: &litMatcher{
										pos:        position{line: 1041, col: 25, offset: 34086},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1476, col: 60, offset: 51779},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1476, col: 64, offset: 51783},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1476, col: 73, offset: 51792},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1476, col: 95, offset: 51814},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1480, col: 1, offset: 51943},
			expr: &actionExpr{
				pos: position{line: 1480, col: 20, offset: 51962},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1480, col: 20, offset: 51962},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1480, col: 20, offset: 51962},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1480, col: 24, offset: 51966},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1480, col: 33, offset: 51975},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1480, col: 57, offset: 51999},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1484, col: 1, offset: 52101},
			expr: &choiceExpr{
				pos: position{line: 1484, col: 27, offset: 52127},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1484, col: 27, offset: 52127},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 1486, col: 23, offset: 52183},
						run: (*parser).callonSuperscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 1486, col: 23, offset: 52183},
							expr: &charClassMatcher{
								pos:        position{line: 1486, col: 23, offset: 52183},
								val:        "[^\\r\\n ^]",
								chars:      []rune{'\r', '\n', ' ', '^'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1490, col: 1, offset: 52260},
			expr: &actionExpr{
				pos: position{line: 1490, col: 27, offset: 52286},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1490, col: 27, offset: 52286},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1490, col: 27, offset: 52286},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1041, col: 25, offset: 34086},
								run: (*parser).callonEscapedSuperscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1041, col: 25, offset: 34086},
									expr: &litMatcher{
										pos:        position{line: 1041, col: 25, offset: 34086},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1490, col: 62, offset: 52321},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1490, col: 66, offset: 52325},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1490, col: 75, offset: 52334},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1490, col: 99, offset: 52358},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1497, col: 1, offset: 52600},
			expr: &choiceExpr{
				pos: position{line: 1497, col: 22, offset: 52621},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1513, col: 26, offset: 53441},
						run: (*parser).callonInlinePassthrough2,
						expr: &seqExpr{
							pos: position{line: 1513, col: 26, offset: 53441},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1511, col: 32, offset: 53409},
									val:        "+++",
									ignoreCase: false,
									want:       "\"+++\"",
								},
								&labeledExpr{
									pos:   position{line: 1513, col: 54, offset: 53469},
									label: "content",
									expr: &choiceExpr{
										pos: position{line: 1517, col: 33, offset: 53674},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1517, col: 34, offset: 53675},
												run: (*parser).callonInlinePassthrough7,
												expr: &zeroOrMoreExpr{
													pos: position{line: 1517, col: 34, offset: 53675},
													expr: &seqExpr{
														pos: position{line: 1517, col: 35, offset: 53676},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1517, col: 35, offset: 53676},
																expr: &litMatcher{
																	pos:        position{line: 1511, col: 32, offset: 53409},
																	val:        "+++",
																	ignoreCase: false,
																	want:       "\"+++\"",
																},
															},
															&anyMatcher{
																line: 1517, col: 64, offset: 53705,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1519, col: 7, offset: 53870},
												run: (*parser).callonInlinePassthrough13,
												expr: &zeroOrOneExpr{
													pos: position{line: 1519, col: 7, offset: 53870},
													expr: &seqExpr{
														pos: position{line: 1519, col: 8, offset: 53871},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1519, col: 8, offset: 53871},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonInlinePassthrough19,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 1519, col: 15, offset: 53878},
																expr: &choiceExpr{
																	pos: position{line: 2275, col: 12, offset: 80019},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2275, col: 12, offset: 80019},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2275, col: 21, offset: 80028},
																			val:        "[\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 1519, col: 24, offset: 53887},
																expr: &litMatcher{
																	pos:        position{line: 1511, col: 32, offset: 53409},
																	val:        "+++",
																	ignoreCase: false,
																	want:       "\"+++\"",
																},
															},
															&anyMatcher{
																line: 1519, col: 53, offset: 53916,
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1511, col: 32, offset: 53409},
									val:        "+++",
									ignoreCase: false,
									want:       "\"+++\"",
								},
								&notExpr{
									pos: position{line: 1513, col: 121, offset: 53536},
									expr: &charClassMatcher{
										pos:        position{line: 2213, col: 13, offset: 78116},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1501, col: 26, offset: 52748},
						run: (*parser).callonInlinePassthrough31,
						expr: &seqExpr{
							pos: position{line: 1501, col: 26, offset: 52748},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1499, col: 32, offset: 52718},
									val:        "+",
									ignoreCase: false,
									want:       "\"+\"",
								},
								&labeledExpr{
									pos:   position{line: 1501, col: 54, offset: 52776},
									label: "content",
									expr: &choiceExpr{
										pos: position{line: 1505, col: 33, offset: 52981},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1505, col: 34, offset: 52982},
												run: (*parser).callonInlinePassthrough36,
												expr: &seqExpr{
													pos: position{line: 1505, col: 34, offset: 52982},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1505, col: 35, offset: 52983},
															expr: &litMatcher{
																pos:        position{line: 1499, col: 32, offset: 52718},
																val:        "+",
																ignoreCase: false,
																want:       "\"+\"",
															},
														},
														&notExpr{
															pos: position{line: 1505, col: 64, offset: 53012},
															expr: &choiceExpr{
																pos: position{line: 2271, col: 10, offset: 79961},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2271, col: 10, offset: 79961},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2271, col: 16, offset: 79967},
																		run: (*parser).callonInlinePassthrough43,
																		expr: &litMatcher{
																			pos:        position{line: 2271, col: 16, offset: 79967},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1505, col: 71, offset: 53019},
															expr: &choiceExpr{
																pos: position{line: 2275, col: 12, offset: 80019},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&anyMatcher{
															line: 1505, col: 80, offset: 53028,
														},
														&zeroOrMoreExpr{
															pos: position{line: 1505, col: 83, offset: 53031},
															expr: &seqExpr{
																pos: position{line: 1505, col: 84, offset: 53032},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1505, col: 84, offset: 53032},
																		expr: &seqExpr{
																			pos: position{line: 1505, col: 86, offset: 53034},
																			exprs: []interface{}{
																				&oneOrMoreExpr{
																					pos: position{line: 1505, col: 86, offset: 53034},
																					expr: &choiceExpr{
																						pos: position{line: 2271, col: 10, offset: 79961},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2271, col: 10, offset: 79961},
																								val:        " ",
																								ignoreCase: false,
																								want:       "\" \"",
																							},
																							&actionExpr{
																								pos: position{line: 2271, col: 16, offset: 79967},
																								run: (*parser).callonInlinePassthrough57,
																								expr: &litMatcher{
																									pos:        position{line: 2271, col: 16, offset: 79967},
																									val:        "\t",
																									ignoreCase: false,
																									want:       "\"\\t\"",
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1499, col: 32, offset: 52718},
																					val:        "+",
																					ignoreCase: false,
																					want:       "\"+\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1505, col: 122, offset: 53070},
																		expr: &litMatcher{
																			pos:        position{line: 1499, col: 32, offset: 52718},
																			val:        "+",
																			ignoreCase: false,
																			want:       "\"+\"",
																		},
																	},
																	&notExpr{
																		pos: position{line: 1505, col: 151, offset: 53099},
																		expr: &choiceExpr{
																			pos: position{line: 2275, col: 12, offset: 80019},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2275, col: 12, offset: 80019},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2275, col: 21, offset: 80028},
																					val:        "[\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1505, col: 160, offset: 53108,
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1507, col: 7, offset: 53250},
												run: (*parser).callonInlinePassthrough67,
												expr: &seqExpr{
													pos: position{line: 1507, col: 8, offset: 53251},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1507, col: 8, offset: 53251},
															expr: &choiceExpr{
																pos: position{line: 2271, col: 10, offset: 79961},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2271, col: 10, offset: 79961},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2271, col: 16, offset: 79967},
																		run: (*parser).callonInlinePassthrough72,
																		expr: &litMatcher{
																			pos:        position{line: 2271, col: 16, offset: 79967},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1507, col: 15, offset: 53258},
															expr: &choiceExpr{
																pos: position{line: 2275, col: 12, offset: 80019},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1507, col: 24, offset: 53267},
															expr: &litMatcher{
																pos:        position{line: 1499, col: 32, offset: 52718},
																val:        "+",
																ignoreCase: false,
																want:       "\"+\"",
															},
														},
														&anyMatcher{
															line: 1507, col: 53, offset: 53296,
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1499, col: 32, offset: 52718},
									val:        "+",
									ignoreCase: false,
									want:       "\"+\"",
								},
								&notExpr{
									pos: position{line: 1501, col: 121, offset: 52843},
									expr: &charClassMatcher{
										pos:        position{line: 2213, col: 13, offset: 78116},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1497, col: 70, offset: 52669},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1523, col: 1, offset: 53999},
			expr: &choiceExpr{
				pos: position{line: 1523, col: 21, offset: 54019},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1523, col: 21, offset: 54019},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1523, col: 21, offset: 54019},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1523, col: 21, offset: 54019},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1523, col: 30, offset: 54028},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1523, col: 38, offset: 54036},
										expr: &actionExpr{
											pos: position{line: 1529, col: 30, offset: 54346},
											run: (*parser).callonPassthroughMacro7,
											expr: &charClassMatcher{
												pos:        position{line: 1529, col: 30, offset: 54346},
												val:        "[^]]",
												chars:      []rune{']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1523, col: 67, offset: 54065},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1525, col: 5, offset: 54161},
						run: (*parser).callonPassthroughMacro10,
						expr: &seqExpr{
							pos: position{line: 1525, col: 5, offset: 54161},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1525, col: 5, offset: 54161},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1525, col: 15, offset: 54171},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1525, col: 23, offset: 54179},
										expr: &choiceExpr{
											pos: position{line: 1525, col: 24, offset: 54180},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1525, col: 24, offset: 54180},
													name: "QuotedText",
												},
												&actionExpr{
													pos: position{line: 1529, col: 30, offset: 54346},
													run: (*parser).callonPassthroughMacro17,
													expr: &charClassMatcher{
														pos:        position{line: 1529, col: 30, offset: 54346},
														val:        "[^]]",
														chars:      []rune{']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1525, col: 65, offset: 54221},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1536, col: 1, offset: 54519},
			expr: &choiceExpr{
				pos: position{line: 1536, col: 19, offset: 54537},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1538, col: 27, offset: 54613},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1538, col: 27, offset: 54613},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1538, col: 27, offset: 54613},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1538, col: 32, offset: 54618},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 2259, col: 7, offset: 79709},
										run: (*parser).callonCrossReference6,
										expr: &oneOrMoreExpr{
											pos: position{line: 2259, col: 7, offset: 79709},
											expr: &charClassMatcher{
												pos:        position{line: 2259, col: 7, offset: 79709},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1538, col: 40, offset: 54626},
									expr: &choiceExpr{
										pos: position{line: 2271, col: 10, offset: 79961},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2271, col: 10, offset: 79961},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2271, col: 16, offset: 79967},
												run: (*parser).callonCrossReference12,
												expr: &litMatcher{
													pos:        position{line: 2271, col: 16, offset: 79967},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1538, col: 47, offset: 54633},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1538, col: 51, offset: 54637},
									label: "label",
									expr: &oneOrMoreExpr{
										pos: position{line: 1548, col: 24, offset: 55025},
										expr: &choiceExpr{
											pos: position{line: 1549, col: 5, offset: 55031},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 1549, col: 6, offset: 55032},
													run: (*parser).callonCrossReference18,
													expr: &seqExpr{
														pos: position{line: 1549, col: 6, offset: 55032},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 1549, col: 6, offset: 55032},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 1549, col: 14, offset: 55040},
																expr: &charClassMatcher{
																	pos:        position{line: 1549, col: 14, offset: 55040},
																	val:        "[^\\r\\n{<>]",
																	chars:      []rune{'\r', '\n', '{', '<', '>'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 214, col: 12, offset: 6782},
													run: (*parser).callonCrossReference23,
													expr: &seqExpr{
														pos: position{line: 214, col: 12, offset: 6782},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 214, col: 12, offset: 6782},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
															&labeledExpr{
																pos:   position{line: 214, col: 16, offset: 6786},
																label: "name",
																expr: &actionExpr{
																	pos: position{line: 190, col: 18, offset: 6118},
																	run: (*parser).callonCrossReference27,
																	expr: &seqExpr{
																		pos: position{line: 190, col: 18, offset: 6118},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 190, col: 18, offset: 6118},
																				val:        "[_0-9\\pL]",
																				chars:      []rune{'_'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 190, col: 28, offset: 6128},
																				expr: &charClassMatcher{
																					pos:        position{line: 190, col: 29, offset: 6129},
																					val:        "[-0-9\\pL]",
																					chars:      []rune{'-'},
																					ranges:     []rune{'0', '9'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 214, col: 35, offset: 6805},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1553, col: 6, offset: 55250},
													run: (*parser).callonCrossReference33,
													expr: &litMatcher{
														pos:        position{line: 1553, col: 6, offset: 55250},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1538, col: 79, offset: 54665},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1540, col: 5, offset: 54730},
						run: (*parser).callonCrossReference36,
						expr: &seqExpr{
							pos: position{line: 1540, col: 5, offset: 54730},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1540, col: 5, offset: 54730},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1540, col: 10, offset: 54735},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 2259, col: 7, offset: 79709},
										run: (*parser).callonCrossReference40,
										expr: &oneOrMoreExpr{
											pos: position{line: 2259, col: 7, offset: 79709},
											expr: &charClassMatcher{
												pos:        position{line: 2259, col: 7, offset: 79709},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1540, col: 18, offset: 54743},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1536, col: 44, offset: 54562},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1544, col: 1, offset: 54806},
			expr: &actionExpr{
				pos: position{line: 1544, col: 27, offset: 54832},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1544, col: 27, offset: 54832},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1544, col: 27, offset: 54832},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 35, offset: 54840},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2241, col: 17, offset: 79131},
								run: (*parser).callonExternalCrossReference5,
								expr: &labeledExpr{
									pos:   position{line: 2241, col: 17, offset: 79131},
									label: "path",
									expr: &oneOrMoreExpr{
										pos: position{line: 2241, col: 22, offset: 79136},
										expr: &choiceExpr{
											pos: position{line: 2241, col: 23, offset: 79137},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2253, col: 13, offset: 79512},
													run: (*parser).callonExternalCrossReference9,
													expr: &oneOrMoreExpr{
														pos: position{line: 2253, col: 13, offset: 79512},
														expr: &charClassMatcher{
															pos:        position{line: 2253, col: 14, offset: 79513},
															val:        "[^\\r\\n[]� ]",
															chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&actionExpr{
													pos: position{line: 1940, col: 23, offset: 69003},
													run: (*parser).callonExternalCrossReference12,
													expr: &seqExpr{
														pos: position{line: 1940, col: 23, offset: 69003},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1940, col: 23, offset: 69003},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
															&labeledExpr{
																pos:   position{line: 1940, col: 32, offset: 69012},
																label: "ref",
																expr: &actionExpr{
																	pos: position{line: 1940, col: 37, offset: 69017},
																	run: (*parser).callonExternalCrossReference16,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1940, col: 37, offset: 69017},
																		expr: &charClassMatcher{
																			pos:        position{line: 1940, col: 37, offset: 69017},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1940, col: 76, offset: 69056},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 54, offset: 54859},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1544, col: 72, offset: 54877},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1561, col: 1, offset: 55427},
			expr: &choiceExpr{
				pos: position{line: 1561, col: 9, offset: 55435},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1561, col: 9, offset: 55435},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1561, col: 24, offset: 55450},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1564, col: 1, offset: 55531},
			expr: &actionExpr{
				pos: position{line: 1564, col: 17, offset: 55547},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1564, col: 17, offset: 55547},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1564, col: 17, offset: 55547},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1564, col: 25, offset: 55555},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2245, col: 13, offset: 79241},
								run: (*parser).callonRelativeLink5,
								expr: &seqExpr{
									pos: position{line: 2245, col: 13, offset: 79241},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2245, col: 13, offset: 79241},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2245, col: 20, offset: 79248},
												expr: &choiceExpr{
													pos: position{line: 2257, col: 11, offset: 79645},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2257, col: 11, offset: 79645},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 2257, col: 23, offset: 79657},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 2257, col: 36, offset: 79670},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 2257, col: 47, offset: 79681},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 2257, col: 58, offset: 79692},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2245, col: 30, offset: 79258},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2245, col: 35, offset: 79263},
												expr: &choiceExpr{
													pos: position{line: 2245, col: 36, offset: 79264},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2253, col: 13, offset: 79512},
															run: (*parser).callonRelativeLink18,
															expr: &oneOrMoreExpr{
																pos: position{line: 2253, col: 13, offset: 79512},
																expr: &charClassMatcher{
																	pos:        position{line: 2253, col: 14, offset: 79513},
																	val:        "[^\\r\\n[]� ]",
																	chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&actionExpr{
															pos: position{line: 1940, col: 23, offset: 69003},
															run: (*parser).callonRelativeLink21,
															expr: &seqExpr{
																pos: position{line: 1940, col: 23, offset: 69003},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1940, col: 23, offset: 69003},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1940, col: 32, offset: 69012},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1940, col: 37, offset: 69017},
																			run: (*parser).callonRelativeLink25,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1940, col: 37, offset: 69017},
																				expr: &charClassMatcher{
																					pos:        position{line: 1940, col: 37, offset: 69017},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1940, col: 76, offset: 69056},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1564, col: 40, offset: 55570},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1564, col: 58, offset: 55588},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1568, col: 1, offset: 55701},
			expr: &actionExpr{
				pos: position{line: 1568, col: 17, offset: 55717},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1568, col: 17, offset: 55717},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1568, col: 17, offset: 55717},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2249, col: 23, offset: 79382},
								run: (*parser).callonExternalLink4,
								expr: &seqExpr{
									pos: position{line: 2249, col: 23, offset: 79382},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2249, col: 23, offset: 79382},
											label: "scheme",
											expr: &choiceExpr{
												pos: position{line: 2257, col: 11, offset: 79645},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2257, col: 11, offset: 79645},
														val:        "http://",
														ignoreCase: false,
														want:       "\"http://\"",
													},
													&litMatcher{
														pos:        position{line: 2257, col: 23, offset: 79657},
														val:        "https://",
														ignoreCase: false,
														want:       "\"https://\"",
													},
													&litMatcher{
														pos:        position{line: 2257, col: 36, offset: 79670},
														val:        "ftp://",
														ignoreCase: false,
														want:       "\"ftp://\"",
													},
													&litMatcher{
														pos:        position{line: 2257, col: 47, offset: 79681},
														val:        "irc://",
														ignoreCase: false,
														want:       "\"irc://\"",
													},
													&litMatcher{
														pos:        position{line: 2257, col: 58, offset: 79692},
														val:        "mailto:",
														ignoreCase: false,
														want:       "\"mailto:\"",
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2249, col: 39, offset: 79398},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2249, col: 44, offset: 79403},
												expr: &choiceExpr{
													pos: position{line: 2249, col: 45, offset: 79404},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2253, col: 13, offset: 79512},
															run: (*parser).callonExternalLink16,
															expr: &oneOrMoreExpr{
																pos: position{line: 2253, col: 13, offset: 79512},
																expr: &charClassMatcher{
																	pos:        position{line: 2253, col: 14, offset: 79513},
																	val:        "[^\\r\\n[]� ]",
																	chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&actionExpr{
															pos: position{line: 1940, col: 23, offset: 69003},
															run: (*parser).callonExternalLink19,
															expr: &seqExpr{
																pos: position{line: 1940, col: 23, offset: 69003},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1940, col: 23, offset: 69003},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1940, col: 32, offset: 69012},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1940, col: 37, offset: 69017},
																			run: (*parser).callonExternalLink23,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1940, col: 37, offset: 69017},
																				expr: &charClassMatcher{
																					pos:        position{line: 1940, col: 37, offset: 69017},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1940, col: 76, offset: 69056},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1568, col: 42, offset: 55742},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1568, col: 59, offset: 55759},
								expr: &ruleRefExpr{
									pos:  position{line: 1568, col: 60, offset: 55760},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1575, col: 1, offset: 55957},
			expr: &actionExpr{
				pos: position{line: 1576, col: 5, offset: 55976},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1576, col: 5, offset: 55976},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1576, col: 5, offset: 55976},
							run: (*parser).callonImageBlock3,
						},
						&litMatcher{
							pos:        position{line: 1580, col: 5, offset: 56128},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1580, col: 15, offset: 56138},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 2245, col: 13, offset: 79241},
								run: (*parser).callonImageBlock6,
								expr: &seqExpr{
									pos: position{line: 2245, col: 13, offset: 79241},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2245, col: 13, offset: 79241},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2245, col: 20, offset: 79248},
												expr: &choiceExpr{
													pos: position{line: 2257, col: 11, offset: 79645},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2257, col: 11, offset: 79645},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 2257, col: 23, offset: 79657},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 2257, col: 36, offset: 79670},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 2257, col: 47, offset: 79681},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 2257, col: 58, offset: 79692},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2245, col: 30, offset: 79258},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2245, col: 35, offset: 79263},
												expr: &choiceExpr{
													pos: position{line: 2245, col: 36, offset: 79264},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2253, col: 13, offset: 79512},
															run: (*parser).callonImageBlock19,
															expr: &oneOrMoreExpr{
																pos: position{line: 2253, col: 13, offset: 79512},
																expr: &charClassMatcher{
																	pos:        position{line: 2253, col: 14, offset: 79513},
																	val:        "[^\\r\\n[]� ]",
																	chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&actionExpr{
															pos: position{line: 1940, col: 23, offset: 69003},
															run: (*parser).callonImageBlock22,
															expr: &seqExpr{
																pos: position{line: 1940, col: 23, offset: 69003},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1940, col: 23, offset: 69003},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1940, col: 32, offset: 69012},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1940, col: 37, offset: 69017},
																			run: (*parser).callonImageBlock26,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1940, col: 37, offset: 69017},
																				expr: &charClassMatcher{
																					pos:        position{line: 1940, col: 37, offset: 69017},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1940, col: 76, offset: 69056},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1580, col: 31, offset: 56154},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1580, col: 49, offset: 56172},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1580, col: 67, offset: 56190},
							expr: &choiceExpr{
								pos: position{line: 2271, col: 10, offset: 79961},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2271, col: 10, offset: 79961},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2271, col: 16, offset: 79967},
										run: (*parser).callonImageBlock35,
										expr: &litMatcher{
											pos:        position{line: 2271, col: 16, offset: 79967},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2279, col: 8, offset: 80059},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
								&notExpr{
									pos: position{line: 2277, col: 8, offset: 80048},
									expr: &anyMatcher{
										line: 2277, col: 9, offset: 80049,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1585, col: 1, offset: 56431},
			expr: &actionExpr{
				pos: position{line: 1585, col: 16, offset: 56446},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1585, col: 16, offset: 56446},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1585, col: 16, offset: 56446},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1585, col: 25, offset: 56455},
							expr: &litMatcher{
								pos:        position{line: 1585, col: 26, offset: 56456},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1585, col: 30, offset: 56460},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 2245, col: 13, offset: 79241},
								run: (*parser).callonInlineImage7,
								expr: &seqExpr{
									pos: position{line: 2245, col: 13, offset: 79241},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2245, col: 13, offset: 79241},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2245, col: 20, offset: 79248},
												expr: &choiceExpr{
													pos: position{line: 2257, col: 11, offset: 79645},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2257, col: 11, offset: 79645},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 2257, col: 23, offset: 79657},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 2257, col: 36, offset: 79670},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 2257, col: 47, offset: 79681},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 2257, col: 58, offset: 79692},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2245, col: 30, offset: 79258},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2245, col: 35, offset: 79263},
												expr: &choiceExpr{
													pos: position{line: 2245, col: 36, offset: 79264},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2253, col: 13, offset: 79512},
															run: (*parser).callonInlineImage20,
															expr: &oneOrMoreExpr{
																pos: position{line: 2253, col: 13, offset: 79512},
																expr: &charClassMatcher{
																	pos:        position{line: 2253, col: 14, offset: 79513},
																	val:        "[^\\r\\n[]� ]",
																	chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&actionExpr{
															pos: position{line: 1940, col: 23, offset: 69003},
															run: (*parser).callonInlineImage23,
															expr: &seqExpr{
																pos: position{line: 1940, col: 23, offset: 69003},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1940, col: 23, offset: 69003},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1940, col: 32, offset: 69012},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1940, col: 37, offset: 69017},
																			run: (*parser).callonInlineImage27,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1940, col: 37, offset: 69017},
																				expr: &charClassMatcher{
																					pos:        position{line: 1940, col: 37, offset: 69017},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1940, col: 76, offset: 69056},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1585, col: 46, offset: 56476},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1585, col: 64, offset: 56494},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1592, col: 1, offset: 56829},
			expr: &actionExpr{
				pos: position{line: 1592, col: 15, offset: 56843},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1592, col: 15, offset: 56843},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1592, col: 15, offset: 56843},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1592, col: 23, offset: 56851},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1592, col: 29, offset: 56857},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1592, col: 29, offset: 56857},
									expr: &charClassMatcher{
										pos:        position{line: 1592, col: 29, offset: 56857},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1592, col: 73, offset: 56901},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1592, col: 85, offset: 56913},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1599, col: 1, offset: 57185},
			expr: &choiceExpr{
				pos: position{line: 1599, col: 19, offset: 57203},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1599, col: 19, offset: 57203},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1599, col: 19, offset: 57203},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1599, col: 19, offset: 57203},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1599, col: 32, offset: 57216},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1599, col: 41, offset: 57225},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1599, col: 58, offset: 57242},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1601, col: 5, offset: 57310},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1601, col: 5, offset: 57310},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1601, col: 5, offset: 57310},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1601, col: 17, offset: 57322},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 2217, col: 14, offset: 78190},
										run: (*parser).callonInlineFootnote12,
										expr: &oneOrMoreExpr{
											pos: position{line: 2217, col: 14, offset: 78190},
											expr: &charClassMatcher{
												pos:        position{line: 2217, col: 14, offset: 78190},
												val:        "[0-9\\pL]",
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1601, col: 35, offset: 57340},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1601, col: 39, offset: 57344},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1601, col: 47, offset: 57352},
										expr: &ruleRefExpr{
											pos:  position{line: 1601, col: 48, offset: 57353},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1601, col: 66, offset: 57371},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1607, col: 1, offset: 57458},
			expr: &actionExpr{
				pos: position{line: 1607, col: 20, offset: 57477},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1607, col: 20, offset: 57477},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1607, col: 29, offset: 57486},
						expr: &seqExpr{
							pos: position{line: 1607, col: 30, offset: 57487},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1607, col: 30, offset: 57487},
									expr: &litMatcher{
										pos:        position{line: 1607, col: 31, offset: 57488},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1607, col: 35, offset: 57492},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1615, col: 1, offset: 57808},
			expr: &actionExpr{
				pos: position{line: 1615, col: 12, offset: 57819},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1615, col: 12, offset: 57819},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1615, col: 12, offset: 57819},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1615, col: 16, offset: 57823},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1615, col: 21, offset: 57828},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1615, col: 21, offset: 57828},
									expr: &charClassMatcher{
										pos:        position{line: 1615, col: 21, offset: 57828},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1615, col: 69, offset: 57876},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1615, col: 73, offset: 57880},
							expr: &choiceExpr{
								pos: position{line: 2271, col: 10, offset: 79961},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2271, col: 10, offset: 79961},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2271, col: 16, offset: 79967},
										run: (*parser).callonCallout12,
										expr: &litMatcher{
											pos:        position{line: 2271, col: 16, offset: 79967},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 1615, col: 80, offset: 57887},
							expr: &choiceExpr{
								pos: position{line: 1615, col: 82, offset: 57889},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2275, col: 12, offset: 80019},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&charClassMatcher{
										pos:        position{line: 2275, col: 21, offset: 80028},
										val:        "[\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&notExpr{
										pos: position{line: 2277, col: 8, offset: 80048},
										expr: &anyMatcher{
											line: 2277, col: 9, offset: 80049,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1615, col: 88, offset: 57895},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1619, col: 1, offset: 57948},
			expr: &actionExpr{
				pos: position{line: 1619, col: 20, offset: 57967},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1619, col: 20, offset: 57967},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1619, col: 20, offset: 57967},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1623, col: 26, offset: 58130},
								run: (*parser).callonCalloutListItem4,
								expr: &seqExpr{
									pos: position{line: 1623, col: 26, offset: 58130},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1623, col: 26, offset: 58130},
											val:        "<",
											ignoreCase: false,
											want:       "\"<\"",
										},
										&labeledExpr{
											pos:   position{line: 1623, col: 30, offset: 58134},
											label: "ref",
											expr: &actionExpr{
												pos: position{line: 1623, col: 35, offset: 58139},
												run: (*parser).callonCalloutListItem8,
												expr: &oneOrMoreExpr{
													pos: position{line: 1623, col: 35, offset: 58139},
													expr: &charClassMatcher{
														pos:        position{line: 1623, col: 35, offset: 58139},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1623, col: 83, offset: 58187},
											val:        ">",
											ignoreCase: false,
											want:       "\">\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 1623, col: 87, offset: 58191},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonCalloutListItem15,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1619, col: 48, offset: 57995},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1619, col: 61, offset: 58008},
								expr: &ruleRefExpr{
									pos:  position{line: 1619, col: 61, offset: 58008},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1642, col: 1, offset: 58759},
			expr: &actionExpr{
				pos: position{line: 1642, col: 19, offset: 58777},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1642, col: 19, offset: 58777},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1642, col: 19, offset: 58777},
							expr: &charClassMatcher{
								pos:        position{line: 2213, col: 13, offset: 78116},
								val:        "[0-9\\pL]",
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1643, col: 5, offset: 58866},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1643, col: 12, offset: 58873},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1835, col: 16, offset: 65237},
										run: (*parser).callonDelimitedBlock7,
										expr: &seqExpr{
											pos: position{line: 1835, col: 16, offset: 65237},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1841, col: 30, offset: 65538},
													val:        "```",
													ignoreCase: false,
													want:       "\"```\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1841, col: 36, offset: 65544},
													expr: &choiceExpr{
														pos: position{line: 2271, col: 10, offset: 79961},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2271, col: 10, offset: 79961},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2271, col: 16, offset: 79967},
																run: (*parser).callonDelimitedBlock13,
																expr: &litMatcher{
																	pos:        position{line: 2271, col: 16, offset: 79967},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2279, col: 8, offset: 80059},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1835, col: 42, offset: 65263},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1845, col: 26, offset: 65634},
														expr: &actionExpr{
															pos: position{line: 1845, col: 27, offset: 65635},
															run: (*parser).callonDelimitedBlock22,
															expr: &seqExpr{
																pos: position{line: 1845, col: 27, offset: 65635},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1845, col: 27, offset: 65635},
																		expr: &choiceExpr{
																			pos: position{line: 1843, col: 28, offset: 65583},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 1843, col: 29, offset: 65584},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1843, col: 29, offset: 65584},
																							val:        "```",
																							ignoreCase: false,
																							want:       "\"```\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1843, col: 35, offset: 65590},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDelimitedBlock31,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2277, col: 8, offset: 80048},
																					expr: &anyMatcher{
																						line: 2277, col: 9, offset: 80049,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1845, col: 52, offset: 65660},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 42, col: 12, offset: 1077},
																			run: (*parser).callonDelimitedBlock41,
																			expr: &seqExpr{
																				pos: position{line: 42, col: 12, offset: 1077},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						expr: &notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 42, col: 17, offset: 1082},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 42, col: 26, offset: 1091},
																							run: (*parser).callonDelimitedBlock47,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 42, col: 26, offset: 1091},
																								expr: &charClassMatcher{
																									pos:        position{line: 42, col: 26, offset: 1091},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2279, col: 8, offset: 80059},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2275, col: 12, offset: 80019},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2275, col: 21, offset: 80028},
																								val:        "[\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1843, col: 28, offset: 65583},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 1843, col: 29, offset: 65584},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1843, col: 29, offset: 65584},
																	val:        "```",
																	ignoreCase: false,
																	want:       "\"```\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1843, col: 35, offset: 65590},
																	expr: &choiceExpr{
																		pos: position{line: 2271, col: 10, offset: 79961},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2271, col: 10, offset: 79961},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2271, col: 16, offset: 79967},
																				run: (*parser).callonDelimitedBlock61,
																				expr: &litMatcher{
																					pos:        position{line: 2271, col: 16, offset: 79967},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2279, col: 8, offset: 80059},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2275, col: 12, offset: 80019},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2275, col: 21, offset: 80028},
																			val:        "[\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&notExpr{
																			pos: position{line: 2277, col: 8, offset: 80048},
																			expr: &anyMatcher{
																				line: 2277, col: 9, offset: 80049,
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1852, col: 17, offset: 65916},
										run: (*parser).callonDelimitedBlock70,
										expr: &seqExpr{
											pos: position{line: 1852, col: 17, offset: 65916},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1858, col: 31, offset: 66169},
													val:        "----",
													ignoreCase: false,
													want:       "\"----\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1858, col: 38, offset: 66176},
													expr: &choiceExpr{
														pos: position{line: 2271, col: 10, offset: 79961},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2271, col: 10, offset: 79961},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2271, col: 16, offset: 79967},
																run: (*parser).callonDelimitedBlock76,
																expr: &litMatcher{
																	pos:        position{line: 2271, col: 16, offset: 79967},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2279, col: 8, offset: 80059},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1852, col: 44, offset: 65943},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1862, col: 27, offset: 66269},
														expr: &actionExpr{
															pos: position{line: 1862, col: 28, offset: 66270},
															run: (*parser).callonDelimitedBlock85,
															expr: &seqExpr{
																pos: position{line: 1862, col: 28, offset: 66270},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1862, col: 28, offset: 66270},
																		expr: &choiceExpr{
																			pos: position{line: 1860, col: 29, offset: 66216},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 1860, col: 30, offset: 66217},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1860, col: 30, offset: 66217},
																							val:        "----",
																							ignoreCase: false,
																							want:       "\"----\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1860, col: 37, offset: 66224},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDelimitedBlock94,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2277, col: 8, offset: 80048},
																					expr: &anyMatcher{
																						line: 2277, col: 9, offset: 80049,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1862, col: 54, offset: 66296},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 42, col: 12, offset: 1077},
																			run: (*parser).callonDelimitedBlock104,
																			expr: &seqExpr{
																				pos: position{line: 42, col: 12, offset: 1077},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						expr: &notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 42, col: 17, offset: 1082},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 42, col: 26, offset: 1091},
																							run: (*parser).callonDelimitedBlock110,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 42, col: 26, offset: 1091},
																								expr: &charClassMatcher{
																									pos:        position{line: 42, col: 26, offset: 1091},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2279, col: 8, offset: 80059},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2275, col: 12, offset: 80019},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2275, col: 21, offset: 80028},
																								val:        "[\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1860, col: 29, offset: 66216},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 1860, col: 30, offset: 66217},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1860, col: 30, offset: 66217},
																	val:        "----",
																	ignoreCase: false,
																	want:       "\"----\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1860, col: 37, offset: 66224},
																	expr: &choiceExpr{
																		pos: position{line: 2271, col: 10, offset: 79961},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2271, col: 10, offset: 79961},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2271, col: 16, offset: 79967},
																				run: (*parser).callonDelimitedBlock124,
																				expr: &litMatcher{
																					pos:        position{line: 2271, col: 16, offset: 79967},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2279, col: 8, offset: 80059},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2275, col: 12, offset: 80019},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2275, col: 21, offset: 80028},
																			val:        "[\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&notExpr{
																			pos: position{line: 2277, col: 8, offset: 80048},
																			expr: &anyMatcher{
																				line: 2277, col: 9, offset: 80049,
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1645, col: 11, offset: 58920},
										name: "ExampleBlock",
									},
									&actionExpr{
										pos: position{line: 1870, col: 5, offset: 66553},
										run: (*parser).callonDelimitedBlock134,
										expr: &seqExpr{
											pos: position{line: 1870, col: 5, offset: 66553},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 1870, col: 5, offset: 66553},
													run: (*parser).callonDelimitedBlock136,
												},
												&litMatcher{
													pos:        position{line: 1738, col: 29, offset: 62027},
													val:        "____",
													ignoreCase: false,
													want:       "\"____\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1738, col: 36, offset: 62034},
													expr: &choiceExpr{
														pos: position{line: 2271, col: 10, offset: 79961},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2271, col: 10, offset: 79961},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2271, col: 16, offset: 79967},
																run: (*parser).callonDelimitedBlock141,
																expr: &litMatcher{
																	pos:        position{line: 2271, col: 16, offset: 79967},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2279, col: 8, offset: 80059},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1874, col: 30, offset: 66758},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1878, col: 25, offset: 66936},
														expr: &actionExpr{
															pos: position{line: 1878, col: 26, offset: 66937},
															run: (*parser).callonDelimitedBlock150,
															expr: &seqExpr{
																pos: position{line: 1878, col: 26, offset: 66937},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1878, col: 26, offset: 66937},
																		expr: &choiceExpr{
																			pos: position{line: 1740, col: 27, offset: 62097},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 1740, col: 28, offset: 62098},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1740, col: 28, offset: 62098},
																							val:        "____",
																							ignoreCase: false,
																							want:       "\"____\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1740, col: 35, offset: 62105},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDelimitedBlock159,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2277, col: 8, offset: 80048},
																					expr: &anyMatcher{
																						line: 2277, col: 9, offset: 80049,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1878, col: 50, offset: 66961},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 42, col: 12, offset: 1077},
																			run: (*parser).callonDelimitedBlock169,
																			expr: &seqExpr{
																				pos: position{line: 42, col: 12, offset: 1077},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						expr: &notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 42, col: 17, offset: 1082},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 42, col: 26, offset: 1091},
																							run: (*parser).callonDelimitedBlock175,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 42, col: 26, offset: 1091},
																								expr: &charClassMatcher{
																									pos:        position{line: 42, col: 26, offset: 1091},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2279, col: 8, offset: 80059},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2275, col: 12, offset: 80019},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2275, col: 21, offset: 80028},
																								val:        "[\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1740, col: 27, offset: 62097},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 1740, col: 28, offset: 62098},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1740, col: 28, offset: 62098},
																	val:        "____",
																	ignoreCase: false,
																	want:       "\"____\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1740, col: 35, offset: 62105},
																	expr: &choiceExpr{
																		pos: position{line: 2271, col: 10, offset: 79961},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2271, col: 10, offset: 79961},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2271, col: 16, offset: 79967},
																				run: (*parser).callonDelimitedBlock189,
																				expr: &litMatcher{
																					pos:        position{line: 2271, col: 16, offset: 79967},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2279, col: 8, offset: 80059},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2275, col: 12, offset: 80019},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2275, col: 21, offset: 80028},
																			val:        "[\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&notExpr{
																			pos: position{line: 2277, col: 8, offset: 80048},
																			expr: &anyMatcher{
																				line: 2277, col: 9, offset: 80049,
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1647, col: 11, offset: 58965},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1648, col: 11, offset: 58986},
										name: "SidebarBlock",
									},
									&actionExpr{
										pos: position{line: 1885, col: 21, offset: 67225},
										run: (*parser).callonDelimitedBlock200,
										expr: &seqExpr{
											pos: position{line: 1885, col: 21, offset: 67225},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1891, col: 35, offset: 67502},
													val:        "++++",
													ignoreCase: false,
													want:       "\"++++\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1891, col: 42, offset: 67509},
													expr: &choiceExpr{
														pos: position{line: 2271, col: 10, offset: 79961},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2271, col: 10, offset: 79961},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2271, col: 16, offset: 79967},
																run: (*parser).callonDelimitedBlock206,
																expr: &litMatcher{
																	pos:        position{line: 2271, col: 16, offset: 79967},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2279, col: 8, offset: 80059},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1885, col: 52, offset: 67256},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1895, col: 31, offset: 67610},
														expr: &actionExpr{
															pos: position{line: 1895, col: 32, offset: 67611},
															run: (*parser).callonDelimitedBlock215,
															expr: &seqExpr{
																pos: position{line: 1895, col: 32, offset: 67611},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1895, col: 32, offset: 67611},
																		expr: &choiceExpr{
																			pos: position{line: 1893, col: 33, offset: 67553},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 1893, col: 34, offset: 67554},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1893, col: 34, offset: 67554},
																							val:        "++++",
																							ignoreCase: false,
																							want:       "\"++++\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1893, col: 41, offset: 67561},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDelimitedBlock224,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2277, col: 8, offset: 80048},
																					expr: &anyMatcher{
																						line: 2277, col: 9, offset: 80049,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1895, col: 62, offset: 67641},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 42, col: 12, offset: 1077},
																			run: (*parser).callonDelimitedBlock234,
																			expr: &seqExpr{
																				pos: position{line: 42, col: 12, offset: 1077},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						expr: &notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 42, col: 17, offset: 1082},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 42, col: 26, offset: 1091},
																							run: (*parser).callonDelimitedBlock240,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 42, col: 26, offset: 1091},
																								expr: &charClassMatcher{
																									pos:        position{line: 42, col: 26, offset: 1091},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2279, col: 8, offset: 80059},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2275, col: 12, offset: 80019},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2275, col: 21, offset: 80028},
																								val:        "[\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1893, col: 33, offset: 67553},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 1893, col: 34, offset: 67554},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1893, col: 34, offset: 67554},
																	val:        "++++",
																	ignoreCase: false,
																	want:       "\"++++\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1893, col: 41, offset: 67561},
																	expr: &choiceExpr{
																		pos: position{line: 2271, col: 10, offset: 79961},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2271, col: 10, offset: 79961},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2271, col: 16, offset: 79967},
																				run: (*parser).callonDelimitedBlock254,
																				expr: &litMatcher{
																					pos:        position{line: 2271, col: 16, offset: 79967},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2279, col: 8, offset: 80059},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2275, col: 12, offset: 80019},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2275, col: 21, offset: 80028},
																			val:        "[\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&notExpr{
																			pos: position{line: 2277, col: 8, offset: 80048},
																			expr: &anyMatcher{
																				line: 2277, col: 9, offset: 80049,
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1908, col: 17, offset: 68045},
										run: (*parser).callonDelimitedBlock263,
										expr: &seqExpr{
											pos: position{line: 1908, col: 17, offset: 68045},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1904, col: 31, offset: 67955},
													val:        "////",
													ignoreCase: false,
													want:       "\"////\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1904, col: 38, offset: 67962},
													expr: &choiceExpr{
														pos: position{line: 2271, col: 10, offset: 79961},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2271, col: 10, offset: 79961},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
															&actionExpr{
																pos: position{line: 2271, col: 16, offset: 79967},
																run: (*parser).callonDelimitedBlock269,
																expr: &litMatcher{
																	pos:        position{line: 2271, col: 16, offset: 79967},
																	val:        "\t",
																	ignoreCase: false,
																	want:       "\"\\t\"",
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2279, col: 8, offset: 80059},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1908, col: 44, offset: 68072},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1912, col: 27, offset: 68225},
														expr: &actionExpr{
															pos: position{line: 1912, col: 28, offset: 68226},
															run: (*parser).callonDelimitedBlock278,
															expr: &seqExpr{
																pos: position{line: 1912, col: 28, offset: 68226},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1912, col: 28, offset: 68226},
																		expr: &choiceExpr{
																			pos: position{line: 1906, col: 29, offset: 68002},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 1906, col: 30, offset: 68003},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1906, col: 30, offset: 68003},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1906, col: 37, offset: 68010},
																							expr: &choiceExpr{
																								pos: position{line: 2271, col: 10, offset: 79961},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2271, col: 10, offset: 79961},
																										val:        " ",
																										ignoreCase: false,
																										want:       "\" \"",
																									},
																									&actionExpr{
																										pos: position{line: 2271, col: 16, offset: 79967},
																										run: (*parser).callonDelimitedBlock287,
																										expr: &litMatcher{
																											pos:        position{line: 2271, col: 16, offset: 79967},
																											val:        "\t",
																											ignoreCase: false,
																											want:       "\"\\t\"",
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2277, col: 8, offset: 80048},
																					expr: &anyMatcher{
																						line: 2277, col: 9, offset: 80049,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1912, col: 54, offset: 68252},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 42, col: 12, offset: 1077},
																			run: (*parser).callonDelimitedBlock297,
																			expr: &seqExpr{
																				pos: position{line: 42, col: 12, offset: 1077},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						expr: &notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 42, col: 17, offset: 1082},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 42, col: 26, offset: 1091},
																							run: (*parser).callonDelimitedBlock303,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 42, col: 26, offset: 1091},
																								expr: &charClassMatcher{
																									pos:        position{line: 42, col: 26, offset: 1091},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2279, col: 8, offset: 80059},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2275, col: 12, offset: 80019},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2275, col: 21, offset: 80028},
																								val:        "[\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1906, col: 29, offset: 68002},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 1906, col: 30, offset: 68003},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1906, col: 30, offset: 68003},
																	val:        "////",
																	ignoreCase: false,
																	want:       "\"////\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1906, col: 37, offset: 68010},
																	expr: &choiceExpr{
																		pos: position{line: 2271, col: 10, offset: 79961},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2271, col: 10, offset: 79961},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																			&actionExpr{
																				pos: position{line: 2271, col: 16, offset: 79967},
																				run: (*parser).callonDelimitedBlock317,
																				expr: &litMatcher{
																					pos:        position{line: 2271, col: 16, offset: 79967},
																					val:        "\t",
																					ignoreCase: false,
																					want:       "\"\\t\"",
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2279, col: 8, offset: 80059},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2275, col: 12, offset: 80019},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2275, col: 21, offset: 80028},
																			val:        "[\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&notExpr{
																			pos: position{line: 2277, col: 8, offset: 80048},
																			expr: &anyMatcher{
																				line: 2277, col: 9, offset: 80049,
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1666, col: 1, offset: 59642},
			expr: &actionExpr{
				pos: position{line: 1667, col: 5, offset: 59663},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1667, col: 5, offset: 59663},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1676, col: 31, offset: 59937},
							val:        "====",
							ignoreCase: false,
							want:       "\"====\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1676, col: 38, offset: 59944},
							expr: &choiceExpr{
								pos: position{line: 2271, col: 10, offset: 79961},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2271, col: 10, offset: 79961},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2271, col: 16, offset: 79967},
										run: (*parser).callonExampleBlock7,
										expr: &litMatcher{
											pos:        position{line: 2271, col: 16, offset: 79967},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2279, col: 8, offset: 80059},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
								&notExpr{
									pos: position{line: 2277, col: 8, offset: 80048},
									expr: &anyMatcher{
										line: 2277, col: 9, offset: 80049,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1668, col: 5, offset: 59695},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 1668, col: 13, offset: 59703},
								name: "ExampleBlockRawContent",
							},
						},
						&choiceExpr{
							pos: position{line: 1678, col: 29, offset: 59984},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1678, col: 30, offset: 59985},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1678, col: 30, offset: 59985},
											val:        "====",
											ignoreCase: false,
											want:       "\"====\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1678, col: 37, offset: 59992},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonExampleBlock22,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2279, col: 8, offset: 80059},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2275, col: 12, offset: 80019},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&charClassMatcher{
													pos:        position{line: 2275, col: 21, offset: 80028},
													val:        "[\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
												&notExpr{
													pos: position{line: 2277, col: 8, offset: 80048},
													expr: &anyMatcher{
														line: 2277, col: 9, offset: 80049,
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2277, col: 8, offset: 80048},
									expr: &anyMatcher{
										line: 2277, col: 9, offset: 80049,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1680, col: 1, offset: 60011},
			expr: &actionExpr{
				pos: position{line: 1681, col: 5, offset: 60042},
				run: (*parser).callonExampleBlockRawContent1,
				expr: &labeledExpr{
					pos:   position{line: 1681, col: 5, offset: 60042},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1681, col: 14, offset: 60051},
						expr: &actionExpr{
							pos: position{line: 1682, col: 9, offset: 60061},
							run: (*parser).callonExampleBlockRawContent4,
							expr: &seqExpr{
								pos: position{line: 1682, col: 9, offset: 60061},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1682, col: 9, offset: 60061},
										expr: &choiceExpr{
											pos: position{line: 1678, col: 29, offset: 59984},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 1678, col: 30, offset: 59985},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1678, col: 30, offset: 59985},
															val:        "====",
															ignoreCase: false,
															want:       "\"====\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1678, col: 37, offset: 59992},
															expr: &choiceExpr{
																pos: position{line: 2271, col: 10, offset: 79961},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2271, col: 10, offset: 79961},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2271, col: 16, offset: 79967},
																		run: (*parser).callonExampleBlockRawContent13,
																		expr: &litMatcher{
																			pos:        position{line: 2271, col: 16, offset: 79967},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 2279, col: 8, offset: 80059},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2275, col: 12, offset: 80019},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2275, col: 21, offset: 80028},
																	val:        "[\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2277, col: 8, offset: 80048},
																	expr: &anyMatcher{
																		line: 2277, col: 9, offset: 80049,
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2277, col: 8, offset: 80048},
													expr: &anyMatcher{
														line: 2277, col: 9, offset: 80049,
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 1683, col: 9, offset: 60096},
										label: "attributes",
										expr: &zeroOrOneExpr{
											pos: position{line: 1683, col: 20, offset: 60107},
											expr: &ruleRefExpr{
												pos:  position{line: 1683, col: 21, offset: 60108},
												name: "BlockAttributes",
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 1684, col: 9, offset: 60134},
										run: (*parser).callonExampleBlockRawContent25,
									},
									&labeledExpr{
										pos:   position{line: 1688, col: 9, offset: 60232},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 1689, col: 13, offset: 60254},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1689, col: 13, offset: 60254},
													name: "LabeledListItem",
												},
												&actionExpr{
													pos: position{line: 920, col: 5, offset: 29951},
													run: (*parser).callonExampleBlockRawContent29,
													expr: &seqExpr{
														pos: position{line: 920, col: 5, offset: 29951},
														exprs: []interface{}{
															&notCodeExpr{
																pos: position{line: 920, col: 5, offset: 29951},
																run: (*parser).callonExampleBlockRawContent31,
															},
															&labeledExpr{
																pos:   position{line: 923, col: 5, offset: 30081},
																label: "firstLine",
																expr: &actionExpr{
																	pos: position{line: 929, col: 5, offset: 30339},
																	run: (*parser).callonExampleBlockRawContent33,
																	expr: &seqExpr{
																		pos: position{line: 929, col: 5, offset: 30339},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 929, col: 5, offset: 30339},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 929, col: 14, offset: 30348},
																					run: (*parser).callonExampleBlockRawContent36,
																					expr: &seqExpr{
																						pos: position{line: 929, col: 14, offset: 30348},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 929, col: 14, offset: 30348},
																								label: "elements",
																								expr: &choiceExpr{
																									pos: position{line: 2225, col: 5, offset: 78563},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2225, col: 5, offset: 78563},
																											run: (*parser).callonExampleBlockRawContent40,
																											expr: &seqExpr{
																												pos: position{line: 2225, col: 5, offset: 78563},
																												exprs: []interface{}{
																													&oneOrMoreExpr{
																														pos: position{line: 2225, col: 5, offset: 78563},
																														expr: &charClassMatcher{
																															pos:        position{line: 2225, col: 5, offset: 78563},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&andExpr{
																														pos: position{line: 2225, col: 15, offset: 78573},
																														expr: &choiceExpr{
																															pos: position{line: 2225, col: 17, offset: 78575},
																															alternatives: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 2225, col: 17, offset: 78575},
																																	val:        "[\\r\\n ,]]",
																																	chars:      []rune{'\r', '\n', ' ', ',', ']'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&notExpr{
																																	pos: position{line: 2277, col: 8, offset: 80048},
																																	expr: &anyMatcher{
																																		line: 2277, col: 9, offset: 80049,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2227, col: 9, offset: 78658},
																											run: (*parser).callonExampleBlockRawContent49,
																											expr: &seqExpr{
																												pos: position{line: 2227, col: 9, offset: 78658},
																												exprs: []interface{}{
																													&oneOrMoreExpr{
																														pos: position{line: 2227, col: 9, offset: 78658},
																														expr: &charClassMatcher{
																															pos:        position{line: 2227, col: 9, offset: 78658},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 2227, col: 19, offset: 78668},
																														expr: &seqExpr{
																															pos: position{line: 2227, col: 20, offset: 78669},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 2227, col: 20, offset: 78669},
																																	val:        "[=*_`]",
																																	chars:      []rune{'=', '*', '_', '`'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&oneOrMoreExpr{
																																	pos: position{line: 2227, col: 27, offset: 78676},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2227, col: 27, offset: 78676},
																																		val:        "[0-9\\pL]",
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 929, col: 28, offset: 30362},
																								expr: &charClassMatcher{
																									pos:        position{line: 929, col: 28, offset: 30362},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 924, col: 5, offset: 30118},
																label: "otherLines",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 924, col: 16, offset: 30129},
																	expr: &choiceExpr{
																		pos: position{line: 924, col: 17, offset: 30130},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1916, col: 22, offset: 68317},
																				run: (*parser).callonExampleBlockRawContent68,
																				expr: &seqExpr{
																					pos: position{line: 1916, col: 22, offset: 68317},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 1916, col: 22, offset: 68317},
																							expr: &seqExpr{
																								pos: position{line: 1902, col: 26, offset: 67906},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1902, col: 26, offset: 67906},
																										val:        "////",
																										ignoreCase: false,
																										want:       "\"////\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1902, col: 33, offset: 67913},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent76,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1916, col: 45, offset: 68340},
																							val:        "//",
																							ignoreCase: false,
																							want:       "\"//\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 1916, col: 50, offset: 68345},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 1920, col: 29, offset: 68473},
																								run: (*parser).callonExampleBlockRawContent85,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 1920, col: 29, offset: 68473},
																									expr: &charClassMatcher{
																										pos:        position{line: 1920, col: 29, offset: 68473},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 903, col: 21, offset: 29486},
																				run: (*parser).callonExampleBlockRawContent93,
																				expr: &seqExpr{
																					pos: position{line: 903, col: 21, offset: 29486},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 903, col: 21, offset: 29486},
																							expr: &choiceExpr{
																								pos: position{line: 1654, col: 19, offset: 59095},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 1654, col: 19, offset: 59095},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 1654, col: 19, offset: 59095},
																												expr: &charClassMatcher{
																													pos:        position{line: 2213, col: 13, offset: 78116},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 2077, col: 26, offset: 73358},
																												val:        "....",
																												ignoreCase: false,
																												want:       "\"....\"",
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1839, col: 25, offset: 65436},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1839, col: 25, offset: 65436},
																												val:        "```",
																												ignoreCase: false,
																												want:       "\"```\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1839, col: 31, offset: 65442},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonExampleBlockRawContent106,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1856, col: 26, offset: 66120},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1856, col: 26, offset: 66120},
																												val:        "----",
																												ignoreCase: false,
																												want:       "\"----\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1856, col: 33, offset: 66127},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonExampleBlockRawContent118,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1674, col: 26, offset: 59888},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1674, col: 26, offset: 59888},
																												val:        "====",
																												ignoreCase: false,
																												want:       "\"====\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1674, col: 33, offset: 59895},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonExampleBlockRawContent130,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1902, col: 26, offset: 67906},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1902, col: 26, offset: 67906},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1902, col: 33, offset: 67913},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonExampleBlockRawContent142,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1736, col: 24, offset: 61955},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1736, col: 24, offset: 61955},
																												val:        "____",
																												ignoreCase: false,
																												want:       "\"____\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1736, col: 31, offset: 61962},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonExampleBlockRawContent154,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1788, col: 26, offset: 63733},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1788, col: 26, offset: 63733},
																												val:        "****",
																												ignoreCase: false,
																												want:       "\"****\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1788, col: 33, offset: 63740},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonExampleBlockRawContent166,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1889, col: 30, offset: 67449},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1889, col: 30, offset: 67449},
																												val:        "++++",
																												ignoreCase: false,
																												want:       "\"++++\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1889, col: 37, offset: 67456},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonExampleBlockRawContent178,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 904, col: 5, offset: 29507},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 914, col: 28, offset: 29807},
																								run: (*parser).callonExampleBlockRawContent186,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 914, col: 28, offset: 29807},
																									expr: &charClassMatcher{
																										pos:        position{line: 914, col: 28, offset: 29807},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 904, col: 43, offset: 29545},
																							run: (*parser).callonExampleBlockRawContent194,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2161, col: 14, offset: 76486},
													run: (*parser).callonExampleBlockRawContent195,
													expr: &seqExpr{
														pos: position{line: 2161, col: 14, offset: 76486},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 2161, col: 14, offset: 76486},
																expr: &notExpr{
																	pos: position{line: 2277, col: 8, offset: 80048},
																	expr: &anyMatcher{
																		line: 2277, col: 9, offset: 80049,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 2161, col: 19, offset: 76491},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonExampleBlockRawContent203,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1692, col: 15, offset: 60380},
													name: "ImageBlock",
												},
												&actionExpr{
													pos: position{line: 1632, col: 18, offset: 58455},
													run: (*parser).callonExampleBlockRawContent211,
													expr: &seqExpr{
														pos: position{line: 1632, col: 18, offset: 58455},
														exprs: []interface{}{
															&choiceExpr{
																pos: position{line: 1632, col: 19, offset: 58456},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1632, col: 19, offset: 58456},
																		val:        "***",
																		ignoreCase: false,
																		want:       "\"***\"",
																	},
																	&litMatcher{
																		pos:        position{line: 1632, col: 27, offset: 58464},
																		val:        "* * *",
																		ignoreCase: false,
																		want:       "\"* * *\"",
																	},
																	&litMatcher{
																		pos:        position{line: 1632, col: 37, offset: 58474},
																		val:        "---",
																		ignoreCase: false,
																		want:       "\"---\"",
																	},
																	&litMatcher{
																		pos:        position{line: 1632, col: 45, offset: 58482},
																		val:        "- - -",
																		ignoreCase: false,
																		want:       "\"- - -\"",
																	},
																	&litMatcher{
																		pos:        position{line: 1632, col: 55, offset: 58492},
																		val:        "___",
																		ignoreCase: false,
																		want:       "\"___\"",
																	},
																	&litMatcher{
																		pos:        position{line: 1632, col: 63, offset: 58500},
																		val:        "_ _ _",
																		ignoreCase: false,
																		want:       "\"_ _ _\"",
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1694, col: 15, offset: 60433},
													name: "OrderedListItem",
												},
												&ruleRefExpr{
													pos:  position{line: 1695, col: 15, offset: 60464},
													name: "UnorderedListItem",
												},
												&ruleRefExpr{
													pos:  position{line: 1696, col: 15, offset: 60497},
													name: "ContinuedListItemElement",
												},
												&actionExpr{
													pos: position{line: 1835, col: 16, offset: 65237},
													run: (*parser).callonExampleBlockRawContent228,
													expr: &seqExpr{
														pos: position{line: 1835, col: 16, offset: 65237},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1841, col: 30, offset: 65538},
																val:        "```",
																ignoreCase: false,
																want:       "\"```\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1841, col: 36, offset: 65544},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonExampleBlockRawContent234,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1835, col: 42, offset: 65263},
																label: "content",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1845, col: 26, offset: 65634},
																	expr: &actionExpr{
																		pos: position{line: 1845, col: 27, offset: 65635},
																		run: (*parser).callonExampleBlockRawContent243,
																		expr: &seqExpr{
																			pos: position{line: 1845, col: 27, offset: 65635},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 1845, col: 27, offset: 65635},
																					expr: &choiceExpr{
																						pos: position{line: 1843, col: 28, offset: 65583},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1843, col: 29, offset: 65584},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1843, col: 29, offset: 65584},
																										val:        "```",
																										ignoreCase: false,
																										want:       "\"```\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1843, col: 35, offset: 65590},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent252,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1845, col: 52, offset: 65660},
																					label: "line",
																					expr: &actionExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						run: (*parser).callonExampleBlockRawContent262,
																						expr: &seqExpr{
																							pos: position{line: 42, col: 12, offset: 1077},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 42, col: 17, offset: 1082},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 42, col: 26, offset: 1091},
																										run: (*parser).callonExampleBlockRawContent268,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 42, col: 26, offset: 1091},
																											expr: &charClassMatcher{
																												pos:        position{line: 42, col: 26, offset: 1091},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1843, col: 28, offset: 65583},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1843, col: 29, offset: 65584},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1843, col: 29, offset: 65584},
																				val:        "```",
																				ignoreCase: false,
																				want:       "\"```\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1843, col: 35, offset: 65590},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonExampleBlockRawContent282,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1852, col: 17, offset: 65916},
													run: (*parser).callonExampleBlockRawContent291,
													expr: &seqExpr{
														pos: position{line: 1852, col: 17, offset: 65916},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1858, col: 31, offset: 66169},
																val:        "----",
																ignoreCase: false,
																want:       "\"----\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1858, col: 38, offset: 66176},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonExampleBlockRawContent297,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1852, col: 44, offset: 65943},
																label: "content",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1862, col: 27, offset: 66269},
																	expr: &actionExpr{
																		pos: position{line: 1862, col: 28, offset: 66270},
																		run: (*parser).callonExampleBlockRawContent306,
																		expr: &seqExpr{
																			pos: position{line: 1862, col: 28, offset: 66270},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 1862, col: 28, offset: 66270},
																					expr: &choiceExpr{
																						pos: position{line: 1860, col: 29, offset: 66216},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1860, col: 30, offset: 66217},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1860, col: 30, offset: 66217},
																										val:        "----",
																										ignoreCase: false,
																										want:       "\"----\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1860, col: 37, offset: 66224},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent315,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1862, col: 54, offset: 66296},
																					label: "line",
																					expr: &actionExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						run: (*parser).callonExampleBlockRawContent325,
																						expr: &seqExpr{
																							pos: position{line: 42, col: 12, offset: 1077},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 42, col: 17, offset: 1082},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 42, col: 26, offset: 1091},
																										run: (*parser).callonExampleBlockRawContent331,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 42, col: 26, offset: 1091},
																											expr: &charClassMatcher{
																												pos:        position{line: 42, col: 26, offset: 1091},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1860, col: 29, offset: 66216},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1860, col: 30, offset: 66217},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1860, col: 30, offset: 66217},
																				val:        "----",
																				ignoreCase: false,
																				want:       "\"----\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1860, col: 37, offset: 66224},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonExampleBlockRawContent345,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1870, col: 5, offset: 66553},
													run: (*parser).callonExampleBlockRawContent354,
													expr: &seqExpr{
														pos: position{line: 1870, col: 5, offset: 66553},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 1870, col: 5, offset: 66553},
																run: (*parser).callonExampleBlockRawContent356,
															},
															&litMatcher{
																pos:        position{line: 1738, col: 29, offset: 62027},
																val:        "____",
																ignoreCase: false,
																want:       "\"____\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1738, col: 36, offset: 62034},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonExampleBlockRawContent361,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1874, col: 30, offset: 66758},
																label: "content",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1878, col: 25, offset: 66936},
																	expr: &actionExpr{
																		pos: position{line: 1878, col: 26, offset: 66937},
																		run: (*parser).callonExampleBlockRawContent370,
																		expr: &seqExpr{
																			pos: position{line: 1878, col: 26, offset: 66937},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 1878, col: 26, offset: 66937},
																					expr: &choiceExpr{
																						pos: position{line: 1740, col: 27, offset: 62097},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1740, col: 28, offset: 62098},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1740, col: 28, offset: 62098},
																										val:        "____",
																										ignoreCase: false,
																										want:       "\"____\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1740, col: 35, offset: 62105},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent379,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1878, col: 50, offset: 66961},
																					label: "line",
																					expr: &actionExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						run: (*parser).callonExampleBlockRawContent389,
																						expr: &seqExpr{
																							pos: position{line: 42, col: 12, offset: 1077},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 42, col: 17, offset: 1082},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 42, col: 26, offset: 1091},
																										run: (*parser).callonExampleBlockRawContent395,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 42, col: 26, offset: 1091},
																											expr: &charClassMatcher{
																												pos:        position{line: 42, col: 26, offset: 1091},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1740, col: 27, offset: 62097},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1740, col: 28, offset: 62098},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1740, col: 28, offset: 62098},
																				val:        "____",
																				ignoreCase: false,
																				want:       "\"____\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1740, col: 35, offset: 62105},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonExampleBlockRawContent409,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1700, col: 15, offset: 60616},
													name: "QuoteBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1701, col: 15, offset: 60641},
													name: "SidebarBlock",
												},
												&actionExpr{
													pos: position{line: 1916, col: 22, offset: 68317},
													run: (*parser).callonExampleBlockRawContent420,
													expr: &seqExpr{
														pos: position{line: 1916, col: 22, offset: 68317},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1916, col: 22, offset: 68317},
																expr: &seqExpr{
																	pos: position{line: 1902, col: 26, offset: 67906},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1902, col: 26, offset: 67906},
																			val:        "////",
																			ignoreCase: false,
																			want:       "\"////\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1902, col: 33, offset: 67913},
																			expr: &choiceExpr{
																				pos: position{line: 2271, col: 10, offset: 79961},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2271, col: 10, offset: 79961},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																					&actionExpr{
																						pos: position{line: 2271, col: 16, offset: 79967},
																						run: (*parser).callonExampleBlockRawContent428,
																						expr: &litMatcher{
																							pos:        position{line: 2271, col: 16, offset: 79967},
																							val:        "\t",
																							ignoreCase: false,
																							want:       "\"\\t\"",
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2279, col: 8, offset: 80059},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2275, col: 12, offset: 80019},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2275, col: 21, offset: 80028},
																					val:        "[\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&notExpr{
																					pos: position{line: 2277, col: 8, offset: 80048},
																					expr: &anyMatcher{
																						line: 2277, col: 9, offset: 80049,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1916, col: 45, offset: 68340},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
															&labeledExpr{
																pos:   position{line: 1916, col: 50, offset: 68345},
																label: "content",
																expr: &actionExpr{
																	pos: position{line: 1920, col: 29, offset: 68473},
																	run: (*parser).callonExampleBlockRawContent437,
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 1920, col: 29, offset: 68473},
																		expr: &charClassMatcher{
																			pos:        position{line: 1920, col: 29, offset: 68473},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1885, col: 21, offset: 67225},
													run: (*parser).callonExampleBlockRawContent445,
													expr: &seqExpr{
														pos: position{line: 1885, col: 21, offset: 67225},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1891, col: 35, offset: 67502},
																val:        "++++",
																ignoreCase: false,
																want:       "\"++++\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1891, col: 42, offset: 67509},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonExampleBlockRawContent451,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1885, col: 52, offset: 67256},
																label: "content",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1895, col: 31, offset: 67610},
																	expr: &actionExpr{
																		pos: position{line: 1895, col: 32, offset: 67611},
																		run: (*parser).callonExampleBlockRawContent460,
																		expr: &seqExpr{
																			pos: position{line: 1895, col: 32, offset: 67611},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 1895, col: 32, offset: 67611},
																					expr: &choiceExpr{
																						pos: position{line: 1893, col: 33, offset: 67553},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1893, col: 34, offset: 67554},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1893, col: 34, offset: 67554},
																										val:        "++++",
																										ignoreCase: false,
																										want:       "\"++++\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1893, col: 41, offset: 67561},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent469,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1895, col: 62, offset: 67641},
																					label: "line",
																					expr: &actionExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						run: (*parser).callonExampleBlockRawContent479,
																						expr: &seqExpr{
																							pos: position{line: 42, col: 12, offset: 1077},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 42, col: 17, offset: 1082},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 42, col: 26, offset: 1091},
																										run: (*parser).callonExampleBlockRawContent485,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 42, col: 26, offset: 1091},
																											expr: &charClassMatcher{
																												pos:        position{line: 42, col: 26, offset: 1091},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1893, col: 33, offset: 67553},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1893, col: 34, offset: 67554},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1893, col: 34, offset: 67554},
																				val:        "++++",
																				ignoreCase: false,
																				want:       "\"++++\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1893, col: 41, offset: 67561},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonExampleBlockRawContent499,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1704, col: 15, offset: 60731},
													name: "Table",
												},
												&actionExpr{
													pos: position{line: 1908, col: 17, offset: 68045},
													run: (*parser).callonExampleBlockRawContent509,
													expr: &seqExpr{
														pos: position{line: 1908, col: 17, offset: 68045},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1904, col: 31, offset: 67955},
																val:        "////",
																ignoreCase: false,
																want:       "\"////\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1904, col: 38, offset: 67962},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonExampleBlockRawContent515,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1908, col: 44, offset: 68072},
																label: "content",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1912, col: 27, offset: 68225},
																	expr: &actionExpr{
																		pos: position{line: 1912, col: 28, offset: 68226},
																		run: (*parser).callonExampleBlockRawContent524,
																		expr: &seqExpr{
																			pos: position{line: 1912, col: 28, offset: 68226},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 1912, col: 28, offset: 68226},
																					expr: &choiceExpr{
																						pos: position{line: 1906, col: 29, offset: 68002},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1906, col: 30, offset: 68003},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1906, col: 30, offset: 68003},
																										val:        "////",
																										ignoreCase: false,
																										want:       "\"////\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1906, col: 37, offset: 68010},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent533,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1912, col: 54, offset: 68252},
																					label: "line",
																					expr: &actionExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						run: (*parser).callonExampleBlockRawContent543,
																						expr: &seqExpr{
																							pos: position{line: 42, col: 12, offset: 1077},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 42, col: 17, offset: 1082},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 42, col: 26, offset: 1091},
																										run: (*parser).callonExampleBlockRawContent549,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 42, col: 26, offset: 1091},
																											expr: &charClassMatcher{
																												pos:        position{line: 42, col: 26, offset: 1091},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1906, col: 29, offset: 68002},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1906, col: 30, offset: 68003},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1906, col: 30, offset: 68003},
																				val:        "////",
																				ignoreCase: false,
																				want:       "\"////\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1906, col: 37, offset: 68010},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonExampleBlockRawContent563,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2116, col: 5, offset: 74964},
													run: (*parser).callonExampleBlockRawContent572,
													expr: &seqExpr{
														pos: position{line: 2116, col: 5, offset: 74964},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 2116, col: 5, offset: 74964},
																run: (*parser).callonExampleBlockRawContent574,
															},
															&labeledExpr{
																pos:   position{line: 2120, col: 5, offset: 75117},
																label: "lines",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2120, col: 11, offset: 75123},
																	expr: &actionExpr{
																		pos: position{line: 2128, col: 25, offset: 75365},
																		run: (*parser).callonExampleBlockRawContent577,
																		expr: &seqExpr{
																			pos: position{line: 2128, col: 25, offset: 75365},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 2128, col: 25, offset: 75365},
																					expr: &actionExpr{
																						pos: position{line: 2161, col: 14, offset: 76486},
																						run: (*parser).callonExampleBlockRawContent580,
																						expr: &seqExpr{
																							pos: position{line: 2161, col: 14, offset: 76486},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 2161, col: 14, offset: 76486},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2161, col: 19, offset: 76491},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonExampleBlockRawContent588,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2128, col: 36, offset: 75376},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 2128, col: 45, offset: 75385},
																						run: (*parser).callonExampleBlockRawContent596,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2128, col: 45, offset: 75385},
																							expr: &charClassMatcher{
																								pos:        position{line: 2128, col: 45, offset: 75385},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2279, col: 8, offset: 80059},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2275, col: 12, offset: 80019},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2275, col: 21, offset: 80028},
																							val:        "[\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2080, col: 31, offset: 73460},
													run: (*parser).callonExampleBlockRawContent604,
													expr: &labeledExpr{
														pos:   position{line: 2080, col: 31, offset: 73460},
														label: "lines",
														expr: &actionExpr{
															pos: position{line: 2086, col: 5, offset: 73756},
															run: (*parser).callonExampleBlockRawContent606,
															expr: &seqExpr{
																pos: position{line: 2086, col: 5, offset: 73756},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 2086, col: 5, offset: 73756},
																		label: "firstLine",
																		expr: &actionExpr{
																			pos: position{line: 2091, col: 35, offset: 73958},
																			run: (*parser).callonExampleBlockRawContent609,
																			expr: &seqExpr{
																				pos: position{line: 2091, col: 35, offset: 73958},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 2091, col: 35, offset: 73958},
																						label: "line",
																						expr: &actionExpr{
																							pos: position{line: 2091, col: 41, offset: 73964},
																							run: (*parser).callonExampleBlockRawContent612,
																							expr: &seqExpr{
																								pos: position{line: 2091, col: 41, offset: 73964},
																								exprs: []interface{}{
																									&oneOrMoreExpr{
																										pos: position{line: 2091, col: 41, offset: 73964},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent617,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 2091, col: 48, offset: 73971},
																										expr: &charClassMatcher{
																											pos:        position{line: 2091, col: 48, offset: 73971},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2279, col: 8, offset: 80059},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2275, col: 12, offset: 80019},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2275, col: 21, offset: 80028},
																								val:        "[\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2087, col: 5, offset: 73803},
																		label: "otherLines",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 2087, col: 16, offset: 73814},
																			expr: &actionExpr{
																				pos: position{line: 2128, col: 25, offset: 75365},
																				run: (*parser).callonExampleBlockRawContent628,
																				expr: &seqExpr{
																					pos: position{line: 2128, col: 25, offset: 75365},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 2128, col: 25, offset: 75365},
																							expr: &actionExpr{
																								pos: position{line: 2161, col: 14, offset: 76486},
																								run: (*parser).callonExampleBlockRawContent631,
																								expr: &seqExpr{
																									pos: position{line: 2161, col: 14, offset: 76486},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 2161, col: 14, offset: 76486},
																											expr: &notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 2161, col: 19, offset: 76491},
																											expr: &choiceExpr{
																												pos: position{line: 2271, col: 10, offset: 79961},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2271, col: 10, offset: 79961},
																														val:        " ",
																														ignoreCase: false,
																														want:       "\" \"",
																													},
																													&actionExpr{
																														pos: position{line: 2271, col: 16, offset: 79967},
																														run: (*parser).callonExampleBlockRawContent639,
																														expr: &litMatcher{
																															pos:        position{line: 2271, col: 16, offset: 79967},
																															val:        "\t",
																															ignoreCase: false,
																															want:       "\"\\t\"",
																														},
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2279, col: 8, offset: 80059},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2275, col: 12, offset: 80019},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2275, col: 21, offset: 80028},
																													val:        "[\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&notExpr{
																													pos: position{line: 2277, col: 8, offset: 80048},
																													expr: &anyMatcher{
																														line: 2277, col: 9, offset: 80049,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 2128, col: 36, offset: 75376},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2128, col: 45, offset: 75385},
																								run: (*parser).callonExampleBlockRawContent647,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2128, col: 45, offset: 75385},
																									expr: &charClassMatcher{
																										pos:        position{line: 2128, col: 45, offset: 75385},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2098, col: 39, offset: 74215},
													run: (*parser).callonExampleBlockRawContent655,
													expr: &seqExpr{
														pos: position{line: 2098, col: 39, offset: 74215},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2077, col: 26, offset: 73358},
																val:        "....",
																ignoreCase: false,
																want:       "\"....\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2098, col: 61, offset: 74237},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonExampleBlockRawContent661,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2275, col: 12, offset: 80019},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 2098, col: 76, offset: 74252},
																label: "lines",
																expr: &actionExpr{
																	pos: position{line: 2103, col: 44, offset: 74559},
																	run: (*parser).callonExampleBlockRawContent667,
																	expr: &labeledExpr{
																		pos:   position{line: 2103, col: 44, offset: 74559},
																		label: "lines",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 2103, col: 50, offset: 74565},
																			expr: &actionExpr{
																				pos: position{line: 2108, col: 5, offset: 74705},
																				run: (*parser).callonExampleBlockRawContent670,
																				expr: &seqExpr{
																					pos: position{line: 2108, col: 5, offset: 74705},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 2108, col: 5, offset: 74705},
																							label: "line",
																							expr: &actionExpr{
																								pos: position{line: 2108, col: 11, offset: 74711},
																								run: (*parser).callonExampleBlockRawContent673,
																								expr: &seqExpr{
																									pos: position{line: 2108, col: 11, offset: 74711},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 2108, col: 11, offset: 74711},
																											expr: &litMatcher{
																												pos:        position{line: 2077, col: 26, offset: 73358},
																												val:        "....",
																												ignoreCase: false,
																												want:       "\"....\"",
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 2108, col: 34, offset: 74734},
																											expr: &charClassMatcher{
																												pos:        position{line: 2108, col: 34, offset: 74734},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2098, col: 125, offset: 74301},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2098, col: 126, offset: 74302},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2077, col: 26, offset: 73358},
																				val:        "....",
																				ignoreCase: false,
																				want:       "\"....\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2098, col: 148, offset: 74324},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonExampleBlockRawContent690,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 879, col: 6, offset: 28334},
													run: (*parser).callonExampleBlockRawContent699,
													expr: &seqExpr{
														pos: position{line: 879, col: 6, offset: 28334},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 879, col: 6, offset: 28334},
																label: "t",
																expr: &choiceExpr{
																	pos: position{line: 856, col: 19, offset: 27732},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 856, col: 19, offset: 27732},
																			run: (*parser).callonExampleBlockRawContent703,
																			expr: &litMatcher{
																				pos:        position{line: 856, col: 19, offset: 27732},
																				val:        "TIP",
																				ignoreCase: false,
																				want:       "\"TIP\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 858, col: 5, offset: 27770},
																			run: (*parser).callonExampleBlockRawContent705,
																			expr: &litMatcher{
																				pos:        position{line: 858, col: 5, offset: 27770},
																				val:        "NOTE",
																				ignoreCase: false,
																				want:       "\"NOTE\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 860, col: 5, offset: 27810},
																			run: (*parser).callonExampleBlockRawContent707,
																			expr: &litMatcher{
																				pos:        position{line: 860, col: 5, offset: 27810},
																				val:        "IMPORTANT",
																				ignoreCase: false,
																				want:       "\"IMPORTANT\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 862, col: 5, offset: 27860},
																			run: (*parser).callonExampleBlockRawContent709,
																			expr: &litMatcher{
																				pos:        position{line: 862, col: 5, offset: 27860},
																				val:        "WARNING",
																				ignoreCase: false,
																				want:       "\"WARNING\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 864, col: 5, offset: 27906},
																			run: (*parser).callonExampleBlockRawContent711,
																			expr: &litMatcher{
																				pos:        position{line: 864, col: 5, offset: 27906},
																				val:        "CAUTION",
																				ignoreCase: false,
																				want:       "\"CAUTION\"",
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 879, col: 25, offset: 28353},
																val:        ": ",
																ignoreCase: false,
																want:       "\": \"",
															},
															&labeledExpr{
																pos:   position{line: 879, col: 30, offset: 28358},
																label: "lines",
																expr: &oneOrMoreExpr{
																	pos: position{line: 879, col: 36, offset: 28364},
																	expr: &choiceExpr{
																		pos: position{line: 879, col: 37, offset: 28365},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1916, col: 22, offset: 68317},
																				run: (*parser).callonExampleBlockRawContent717,
																				expr: &seqExpr{
																					pos: position{line: 1916, col: 22, offset: 68317},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 1916, col: 22, offset: 68317},
																							expr: &seqExpr{
																								pos: position{line: 1902, col: 26, offset: 67906},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1902, col: 26, offset: 67906},
																										val:        "////",
																										ignoreCase: false,
																										want:       "\"////\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1902, col: 33, offset: 67913},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent725,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1916, col: 45, offset: 68340},
																							val:        "//",
																							ignoreCase: false,
																							want:       "\"//\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 1916, col: 50, offset: 68345},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 1920, col: 29, offset: 68473},
																								run: (*parser).callonExampleBlockRawContent734,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 1920, col: 29, offset: 68473},
																									expr: &charClassMatcher{
																										pos:        position{line: 1920, col: 29, offset: 68473},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 903, col: 21, offset: 29486},
																				run: (*parser).callonExampleBlockRawContent742,
																				expr: &seqExpr{
																					pos: position{line: 903, col: 21, offset: 29486},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 903, col: 21, offset: 29486},
																							expr: &choiceExpr{
																								pos: position{line: 1654, col: 19, offset: 59095},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 1654, col: 19, offset: 59095},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 1654, col: 19, offset: 59095},
																												expr: &charClassMatcher{
																													pos:        position{line: 2213, col: 13, offset: 78116},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 2077, col: 26, offset: 73358},
																												val:        "....",
																												ignoreCase: false,
																												want:       "\"....\"",
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1839, col: 25, offset: 65436},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1839, col: 25, offset: 65436},
																												val:        "```",
																												ignoreCase: false,
																												want:       "\"```\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1839, col: 31, offset: 65442},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonExampleBlockRawContent755,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1856, col: 26, offset: 66120},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1856, col: 26, offset: 66120},
																												val:        "----",
																												ignoreCase: false,
																												want:       "\"----\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1856, col: 33, offset: 66127},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonExampleBlockRawContent767,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1674, col: 26, offset: 59888},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1674, col: 26, offset: 59888},
																												val:        "====",
																												ignoreCase: false,
																												want:       "\"====\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1674, col: 33, offset: 59895},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonExampleBlockRawContent779,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1902, col: 26, offset: 67906},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1902, col: 26, offset: 67906},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1902, col: 33, offset: 67913},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonExampleBlockRawContent791,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1736, col: 24, offset: 61955},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1736, col: 24, offset: 61955},
																												val:        "____",
																												ignoreCase: false,
																												want:       "\"____\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1736, col: 31, offset: 61962},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonExampleBlockRawContent803,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1788, col: 26, offset: 63733},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1788, col: 26, offset: 63733},
																												val:        "****",
																												ignoreCase: false,
																												want:       "\"****\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1788, col: 33, offset: 63740},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonExampleBlockRawContent815,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1889, col: 30, offset: 67449},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1889, col: 30, offset: 67449},
																												val:        "++++",
																												ignoreCase: false,
																												want:       "\"++++\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1889, col: 37, offset: 67456},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonExampleBlockRawContent827,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 904, col: 5, offset: 29507},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 914, col: 28, offset: 29807},
																								run: (*parser).callonExampleBlockRawContent835,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 914, col: 28, offset: 29807},
																									expr: &charClassMatcher{
																										pos:        position{line: 914, col: 28, offset: 29807},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 904, col: 43, offset: 29545},
																							run: (*parser).callonExampleBlockRawContent843,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 884, col: 5, offset: 28625},
													run: (*parser).callonExampleBlockRawContent844,
													expr: &seqExpr{
														pos: position{line: 884, col: 5, offset: 28625},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 884, col: 5, offset: 28625},
																val:        "> ",
																ignoreCase: false,
																want:       "\"> \"",
															},
															&labeledExpr{
																pos:   position{line: 884, col: 10, offset: 28630},
																label: "content",
																expr: &oneOrMoreExpr{
																	pos: position{line: 899, col: 33, offset: 29398},
																	expr: &actionExpr{
																		pos: position{line: 899, col: 34, offset: 29399},
																		run: (*parser).callonExampleBlockRawContent849,
																		expr: &seqExpr{
																			pos: position{line: 899, col: 34, offset: 29399},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 899, col: 34, offset: 29399},
																					expr: &actionExpr{
																						pos: position{line: 2161, col: 14, offset: 76486},
																						run: (*parser).callonExampleBlockRawContent852,
																						expr: &seqExpr{
																							pos: position{line: 2161, col: 14, offset: 76486},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 2161, col: 14, offset: 76486},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2161, col: 19, offset: 76491},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonExampleBlockRawContent860,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 899, col: 45, offset: 29410},
																					expr: &litMatcher{
																						pos:        position{line: 899, col: 45, offset: 29410},
																						val:        "> ",
																						ignoreCase: false,
																						want:       "\"> \"",
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 899, col: 51, offset: 29416},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						run: (*parser).callonExampleBlockRawContent870,
																						expr: &seqExpr{
																							pos: position{line: 42, col: 12, offset: 1077},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 42, col: 17, offset: 1082},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 42, col: 26, offset: 1091},
																										run: (*parser).callonExampleBlockRawContent876,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 42, col: 26, offset: 1091},
																											expr: &charClassMatcher{
																												pos:        position{line: 42, col: 26, offset: 1091},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 888, col: 5, offset: 28831},
													run: (*parser).callonExampleBlockRawContent884,
													expr: &seqExpr{
														pos: position{line: 888, col: 5, offset: 28831},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 888, col: 5, offset: 28831},
																run: (*parser).callonExampleBlockRawContent886,
															},
															&labeledExpr{
																pos:   position{line: 891, col: 7, offset: 29028},
																label: "content",
																expr: &oneOrMoreExpr{
																	pos: position{line: 891, col: 15, offset: 29036},
																	expr: &actionExpr{
																		pos: position{line: 903, col: 21, offset: 29486},
																		run: (*parser).callonExampleBlockRawContent889,
																		expr: &seqExpr{
																			pos: position{line: 903, col: 21, offset: 29486},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 903, col: 21, offset: 29486},
																					expr: &choiceExpr{
																						pos: position{line: 1654, col: 19, offset: 59095},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1654, col: 19, offset: 59095},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 1654, col: 19, offset: 59095},
																										expr: &charClassMatcher{
																											pos:        position{line: 2213, col: 13, offset: 78116},
																											val:        "[0-9\\pL]",
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2077, col: 26, offset: 73358},
																										val:        "....",
																										ignoreCase: false,
																										want:       "\"....\"",
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1839, col: 25, offset: 65436},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1839, col: 25, offset: 65436},
																										val:        "```",
																										ignoreCase: false,
																										want:       "\"```\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1839, col: 31, offset: 65442},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent902,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1856, col: 26, offset: 66120},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1856, col: 26, offset: 66120},
																										val:        "----",
																										ignoreCase: false,
																										want:       "\"----\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1856, col: 33, offset: 66127},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent914,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1674, col: 26, offset: 59888},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1674, col: 26, offset: 59888},
																										val:        "====",
																										ignoreCase: false,
																										want:       "\"====\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1674, col: 33, offset: 59895},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent926,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1902, col: 26, offset: 67906},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1902, col: 26, offset: 67906},
																										val:        "////",
																										ignoreCase: false,
																										want:       "\"////\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1902, col: 33, offset: 67913},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent938,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1736, col: 24, offset: 61955},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1736, col: 24, offset: 61955},
																										val:        "____",
																										ignoreCase: false,
																										want:       "\"____\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1736, col: 31, offset: 61962},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent950,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1788, col: 26, offset: 63733},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1788, col: 26, offset: 63733},
																										val:        "****",
																										ignoreCase: false,
																										want:       "\"****\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1788, col: 33, offset: 63740},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent962,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1889, col: 30, offset: 67449},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1889, col: 30, offset: 67449},
																										val:        "++++",
																										ignoreCase: false,
																										want:       "\"++++\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1889, col: 37, offset: 67456},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent974,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 904, col: 5, offset: 29507},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 914, col: 28, offset: 29807},
																						run: (*parser).callonExampleBlockRawContent982,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 914, col: 28, offset: 29807},
																							expr: &charClassMatcher{
																								pos:        position{line: 914, col: 28, offset: 29807},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2279, col: 8, offset: 80059},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2275, col: 12, offset: 80019},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2275, col: 21, offset: 80028},
																							val:        "[\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 904, col: 43, offset: 29545},
																					run: (*parser).callonExampleBlockRawContent990,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 895, col: 5, offset: 29222},
													run: (*parser).callonExampleBlockRawContent991,
													expr: &labeledExpr{
														pos:   position{line: 895, col: 5, offset: 29222},
														label: "lines",
														expr: &oneOrMoreExpr{
															pos: position{line: 895, col: 11, offset: 29228},
															expr: &choiceExpr{
																pos: position{line: 895, col: 12, offset: 29229},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 1916, col: 22, offset: 68317},
																		run: (*parser).callonExampleBlockRawContent995,
																		expr: &seqExpr{
																			pos: position{line: 1916, col: 22, offset: 68317},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 1916, col: 22, offset: 68317},
																					expr: &seqExpr{
																						pos: position{line: 1902, col: 26, offset: 67906},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 1902, col: 26, offset: 67906},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 1902, col: 33, offset: 67913},
																								expr: &choiceExpr{
																									pos: position{line: 2271, col: 10, offset: 79961},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2271, col: 10, offset: 79961},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2271, col: 16, offset: 79967},
																											run: (*parser).callonExampleBlockRawContent1003,
																											expr: &litMatcher{
																												pos:        position{line: 2271, col: 16, offset: 79967},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2279, col: 8, offset: 80059},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2275, col: 12, offset: 80019},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2275, col: 21, offset: 80028},
																										val:        "[\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1916, col: 45, offset: 68340},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1916, col: 50, offset: 68345},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 1920, col: 29, offset: 68473},
																						run: (*parser).callonExampleBlockRawContent1012,
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 1920, col: 29, offset: 68473},
																							expr: &charClassMatcher{
																								pos:        position{line: 1920, col: 29, offset: 68473},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2279, col: 8, offset: 80059},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2275, col: 12, offset: 80019},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2275, col: 21, offset: 80028},
																							val:        "[\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 903, col: 21, offset: 29486},
																		run: (*parser).callonExampleBlockRawContent1020,
																		expr: &seqExpr{
																			pos: position{line: 903, col: 21, offset: 29486},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 903, col: 21, offset: 29486},
																					expr: &choiceExpr{
																						pos: position{line: 1654, col: 19, offset: 59095},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1654, col: 19, offset: 59095},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 1654, col: 19, offset: 59095},
																										expr: &charClassMatcher{
																											pos:        position{line: 2213, col: 13, offset: 78116},
																											val:        "[0-9\\pL]",
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2077, col: 26, offset: 73358},
																										val:        "....",
																										ignoreCase: false,
																										want:       "\"....\"",
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1839, col: 25, offset: 65436},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1839, col: 25, offset: 65436},
																										val:        "```",
																										ignoreCase: false,
																										want:       "\"```\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1839, col: 31, offset: 65442},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent1033,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1856, col: 26, offset: 66120},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1856, col: 26, offset: 66120},
																										val:        "----",
																										ignoreCase: false,
																										want:       "\"----\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1856, col: 33, offset: 66127},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent1045,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1674, col: 26, offset: 59888},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1674, col: 26, offset: 59888},
																										val:        "====",
																										ignoreCase: false,
																										want:       "\"====\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1674, col: 33, offset: 59895},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent1057,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1902, col: 26, offset: 67906},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1902, col: 26, offset: 67906},
																										val:        "////",
																										ignoreCase: false,
																										want:       "\"////\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1902, col: 33, offset: 67913},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent1069,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1736, col: 24, offset: 61955},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1736, col: 24, offset: 61955},
																										val:        "____",
																										ignoreCase: false,
																										want:       "\"____\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1736, col: 31, offset: 61962},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent1081,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1788, col: 26, offset: 63733},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1788, col: 26, offset: 63733},
																										val:        "****",
																										ignoreCase: false,
																										want:       "\"****\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1788, col: 33, offset: 63740},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent1093,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1889, col: 30, offset: 67449},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1889, col: 30, offset: 67449},
																										val:        "++++",
																										ignoreCase: false,
																										want:       "\"++++\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1889, col: 37, offset: 67456},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonExampleBlockRawContent1105,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 904, col: 5, offset: 29507},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 914, col: 28, offset: 29807},
																						run: (*parser).callonExampleBlockRawContent1113,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 914, col: 28, offset: 29807},
																							expr: &charClassMatcher{
																								pos:        position{line: 914, col: 28, offset: 29807},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2279, col: 8, offset: 80059},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2275, col: 12, offset: 80019},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2275, col: 21, offset: 80028},
																							val:        "[\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 904, col: 43, offset: 29545},
																					run: (*parser).callonExampleBlockRawContent1121,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1708, col: 15, offset: 60833},
													run: (*parser).callonExampleBlockRawContent1122,
													expr: &seqExpr{
														pos: position{line: 1674, col: 26, offset: 59888},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1674, col: 26, offset: 59888},
																val:        "====",
																ignoreCase: false,
																want:       "\"====\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1674, col: 33, offset: 59895},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonExampleBlockRawContent1128,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1722, col: 1, offset: 61387},
			expr: &actionExpr{
				pos: position{line: 1723, col: 5, offset: 61406},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1723, col: 5, offset: 61406},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1723, col: 5, offset: 61406},
							run: (*parser).callonQuoteBlock3,
						},
						&litMatcher{
							pos:        position{line: 1738, col: 29, offset: 62027},
							val:        "____",
							ignoreCase: false,
							want:       "\"____\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1738, col: 36, offset: 62034},
							expr: &choiceExpr{
								pos: position{line: 2271, col: 10, offset: 79961},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2271, col: 10, offset: 79961},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2271, col: 16, offset: 79967},
										run: (*parser).callonQuoteBlock8,
										expr: &litMatcher{
											pos:        position{line: 2271, col: 16, offset: 79967},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2279, col: 8, offset: 80059},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
								&notExpr{
									pos: position{line: 2277, col: 8, offset: 80048},
									expr: &anyMatcher{
										line: 2277, col: 9, offset: 80049,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1732, col: 30, offset: 61778},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1732, col: 39, offset: 61787},
								name: "QuoteBlockRawContent",
							},
						},
						&choiceExpr{
							pos: position{line: 1740, col: 27, offset: 62097},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1740, col: 28, offset: 62098},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1740, col: 28, offset: 62098},
											val:        "____",
											ignoreCase: false,
											want:       "\"____\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1740, col: 35, offset: 62105},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonQuoteBlock23,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2279, col: 8, offset: 80059},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2275, col: 12, offset: 80019},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&charClassMatcher{
													pos:        position{line: 2275, col: 21, offset: 80028},
													val:        "[\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
												&notExpr{
													pos: position{line: 2277, col: 8, offset: 80048},
													expr: &anyMatcher{
														line: 2277, col: 9, offset: 80049,
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2277, col: 8, offset: 80048},
									expr: &anyMatcher{
										line: 2277, col: 9, offset: 80049,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockRawContent",
			pos:  position{line: 1742, col: 1, offset: 62149},
			expr: &actionExpr{
				pos: position{line: 1743, col: 5, offset: 62177},
				run: (*parser).callonQuoteBlockRawContent1,
				expr: &labeledExpr{
					pos:   position{line: 1743, col: 5, offset: 62177},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1743, col: 14, offset: 62186},
						expr: &actionExpr{
							pos: position{line: 1744, col: 9, offset: 62196},
							run: (*parser).callonQuoteBlockRawContent4,
							expr: &seqExpr{
								pos: position{line: 1744, col: 9, offset: 62196},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1744, col: 9, offset: 62196},
										expr: &choiceExpr{
											pos: position{line: 1740, col: 27, offset: 62097},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 1740, col: 28, offset: 62098},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1740, col: 28, offset: 62098},
															val:        "____",
															ignoreCase: false,
															want:       "\"____\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1740, col: 35, offset: 62105},
															expr: &choiceExpr{
																pos: position{line: 2271, col: 10, offset: 79961},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2271, col: 10, offset: 79961},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2271, col: 16, offset: 79967},
																		run: (*parser).callonQuoteBlockRawContent13,
																		expr: &litMatcher{
																			pos:        position{line: 2271, col: 16, offset: 79967},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 2279, col: 8, offset: 80059},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2275, col: 12, offset: 80019},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2275, col: 21, offset: 80028},
																	val:        "[\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2277, col: 8, offset: 80048},
																	expr: &anyMatcher{
																		line: 2277, col: 9, offset: 80049,
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2277, col: 8, offset: 80048},
													expr: &anyMatcher{
														line: 2277, col: 9, offset: 80049,
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 1745, col: 9, offset: 62229},
										label: "attributes",
										expr: &zeroOrOneExpr{
											pos: position{line: 1745, col: 20, offset: 62240},
											expr: &ruleRefExpr{
												pos:  position{line: 1745, col: 21, offset: 62241},
												name: "BlockAttributes",
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 1746, col: 9, offset: 62267},
										run: (*parser).callonQuoteBlockRawContent25,
									},
									&labeledExpr{
										pos:   position{line: 1750, col: 9, offset: 62365},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 1750, col: 18, offset: 62374},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1750, col: 18, offset: 62374},
													name: "LabeledListItem",
												},
												&actionExpr{
													pos: position{line: 920, col: 5, offset: 29951},
													run: (*parser).callonQuoteBlockRawContent29,
													expr: &seqExpr{
														pos: position{line: 920, col: 5, offset: 29951},
														exprs: []interface{}{
															&notCodeExpr{
																pos: position{line: 920, col: 5, offset: 29951},
																run: (*parser).callonQuoteBlockRawContent31,
															},
															&labeledExpr{
																pos:   position{line: 923, col: 5, offset: 30081},
																label: "firstLine",
																expr: &actionExpr{
																	pos: position{line: 929, col: 5, offset: 30339},
																	run: (*parser).callonQuoteBlockRawContent33,
																	expr: &seqExpr{
																		pos: position{line: 929, col: 5, offset: 30339},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 929, col: 5, offset: 30339},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 929, col: 14, offset: 30348},
																					run: (*parser).callonQuoteBlockRawContent36,
																					expr: &seqExpr{
																						pos: position{line: 929, col: 14, offset: 30348},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 929, col: 14, offset: 30348},
																								label: "elements",
																								expr: &choiceExpr{
																									pos: position{line: 2225, col: 5, offset: 78563},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2225, col: 5, offset: 78563},
																											run: (*parser).callonQuoteBlockRawContent40,
																											expr: &seqExpr{
																												pos: position{line: 2225, col: 5, offset: 78563},
																												exprs: []interface{}{
																													&oneOrMoreExpr{
																														pos: position{line: 2225, col: 5, offset: 78563},
																														expr: &charClassMatcher{
																															pos:        position{line: 2225, col: 5, offset: 78563},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&andExpr{
																														pos: position{line: 2225, col: 15, offset: 78573},
																														expr: &choiceExpr{
																															pos: position{line: 2225, col: 17, offset: 78575},
																															alternatives: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 2225, col: 17, offset: 78575},
																																	val:        "[\\r\\n ,]]",
																																	chars:      []rune{'\r', '\n', ' ', ',', ']'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&notExpr{
																																	pos: position{line: 2277, col: 8, offset: 80048},
																																	expr: &anyMatcher{
																																		line: 2277, col: 9, offset: 80049,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2227, col: 9, offset: 78658},
																											run: (*parser).callonQuoteBlockRawContent49,
																											expr: &seqExpr{
																												pos: position{line: 2227, col: 9, offset: 78658},
																												exprs: []interface{}{
																													&oneOrMoreExpr{
																														pos: position{line: 2227, col: 9, offset: 78658},
																														expr: &charClassMatcher{
																															pos:        position{line: 2227, col: 9, offset: 78658},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 2227, col: 19, offset: 78668},
																														expr: &seqExpr{
																															pos: position{line: 2227, col: 20, offset: 78669},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 2227, col: 20, offset: 78669},
																																	val:        "[=*_`]",
																																	chars:      []rune{'=', '*', '_', '`'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&oneOrMoreExpr{
																																	pos: position{line: 2227, col: 27, offset: 78676},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2227, col: 27, offset: 78676},
																																		val:        "[0-9\\pL]",
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 929, col: 28, offset: 30362},
																								expr: &charClassMatcher{
																									pos:        position{line: 929, col: 28, offset: 30362},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 924, col: 5, offset: 30118},
																label: "otherLines",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 924, col: 16, offset: 30129},
																	expr: &choiceExpr{
																		pos: position{line: 924, col: 17, offset: 30130},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1916, col: 22, offset: 68317},
																				run: (*parser).callonQuoteBlockRawContent68,
																				expr: &seqExpr{
																					pos: position{line: 1916, col: 22, offset: 68317},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 1916, col: 22, offset: 68317},
																							expr: &seqExpr{
																								pos: position{line: 1902, col: 26, offset: 67906},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1902, col: 26, offset: 67906},
																										val:        "////",
																										ignoreCase: false,
																										want:       "\"////\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1902, col: 33, offset: 67913},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent76,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1916, col: 45, offset: 68340},
																							val:        "//",
																							ignoreCase: false,
																							want:       "\"//\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 1916, col: 50, offset: 68345},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 1920, col: 29, offset: 68473},
																								run: (*parser).callonQuoteBlockRawContent85,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 1920, col: 29, offset: 68473},
																									expr: &charClassMatcher{
																										pos:        position{line: 1920, col: 29, offset: 68473},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 903, col: 21, offset: 29486},
																				run: (*parser).callonQuoteBlockRawContent93,
																				expr: &seqExpr{
																					pos: position{line: 903, col: 21, offset: 29486},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 903, col: 21, offset: 29486},
																							expr: &choiceExpr{
																								pos: position{line: 1654, col: 19, offset: 59095},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 1654, col: 19, offset: 59095},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 1654, col: 19, offset: 59095},
																												expr: &charClassMatcher{
																													pos:        position{line: 2213, col: 13, offset: 78116},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 2077, col: 26, offset: 73358},
																												val:        "....",
																												ignoreCase: false,
																												want:       "\"....\"",
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1839, col: 25, offset: 65436},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1839, col: 25, offset: 65436},
																												val:        "```",
																												ignoreCase: false,
																												want:       "\"```\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1839, col: 31, offset: 65442},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonQuoteBlockRawContent106,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1856, col: 26, offset: 66120},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1856, col: 26, offset: 66120},
																												val:        "----",
																												ignoreCase: false,
																												want:       "\"----\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1856, col: 33, offset: 66127},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonQuoteBlockRawContent118,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1674, col: 26, offset: 59888},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1674, col: 26, offset: 59888},
																												val:        "====",
																												ignoreCase: false,
																												want:       "\"====\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1674, col: 33, offset: 59895},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonQuoteBlockRawContent130,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1902, col: 26, offset: 67906},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1902, col: 26, offset: 67906},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1902, col: 33, offset: 67913},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonQuoteBlockRawContent142,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1736, col: 24, offset: 61955},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1736, col: 24, offset: 61955},
																												val:        "____",
																												ignoreCase: false,
																												want:       "\"____\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1736, col: 31, offset: 61962},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonQuoteBlockRawContent154,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1788, col: 26, offset: 63733},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1788, col: 26, offset: 63733},
																												val:        "****",
																												ignoreCase: false,
																												want:       "\"****\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1788, col: 33, offset: 63740},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonQuoteBlockRawContent166,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1889, col: 30, offset: 67449},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1889, col: 30, offset: 67449},
																												val:        "++++",
																												ignoreCase: false,
																												want:       "\"++++\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1889, col: 37, offset: 67456},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonQuoteBlockRawContent178,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 904, col: 5, offset: 29507},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 914, col: 28, offset: 29807},
																								run: (*parser).callonQuoteBlockRawContent186,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 914, col: 28, offset: 29807},
																									expr: &charClassMatcher{
																										pos:        position{line: 914, col: 28, offset: 29807},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 904, col: 43, offset: 29545},
																							run: (*parser).callonQuoteBlockRawContent194,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2161, col: 14, offset: 76486},
													run: (*parser).callonQuoteBlockRawContent195,
													expr: &seqExpr{
														pos: position{line: 2161, col: 14, offset: 76486},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 2161, col: 14, offset: 76486},
																expr: &notExpr{
																	pos: position{line: 2277, col: 8, offset: 80048},
																	expr: &anyMatcher{
																		line: 2277, col: 9, offset: 80049,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 2161, col: 19, offset: 76491},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonQuoteBlockRawContent203,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1753, col: 15, offset: 62500},
													name: "ImageBlock",
												},
												&actionExpr{
													pos: position{line: 1632, col: 18, offset: 58455},
													run: (*parser).callonQuoteBlockRawContent211,
													expr: &seqExpr{
														pos: position{line: 1632, col: 18, offset: 58455},
														exprs: []interface{}{
															&choiceExpr{
																pos: position{line: 1632, col: 19, offset: 58456},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1632, col: 19, offset: 58456},
																		val:        "***",
																		ignoreCase: false,
																		want:       "\"***\"",
																	},
																	&litMatcher{
																		pos:        position{line: 1632, col: 27, offset: 58464},
																		val:        "* * *",
																		ignoreCase: false,
																		want:       "\"* * *\"",
																	},
																	&litMatcher{
																		pos:        position{line: 1632, col: 37, offset: 58474},
																		val:        "---",
																		ignoreCase: false,
																		want:       "\"---\"",
																	},
																	&litMatcher{
																		pos:        position{line: 1632, col: 45, offset: 58482},
																		val:        "- - -",
																		ignoreCase: false,
																		want:       "\"- - -\"",
																	},
																	&litMatcher{
																		pos:        position{line: 1632, col: 55, offset: 58492},
																		val:        "___",
																		ignoreCase: false,
																		want:       "\"___\"",
																	},
																	&litMatcher{
																		pos:        position{line: 1632, col: 63, offset: 58500},
																		val:        "_ _ _",
																		ignoreCase: false,
																		want:       "\"_ _ _\"",
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1755, col: 15, offset: 62553},
													name: "OrderedListItem",
												},
												&ruleRefExpr{
													pos:  position{line: 1756, col: 15, offset: 62584},
													name: "UnorderedListItem",
												},
												&ruleRefExpr{
													pos:  position{line: 1757, col: 15, offset: 62617},
													name: "ContinuedListItemElement",
												},
												&actionExpr{
													pos: position{line: 1835, col: 16, offset: 65237},
													run: (*parser).callonQuoteBlockRawContent228,
													expr: &seqExpr{
														pos: position{line: 1835, col: 16, offset: 65237},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1841, col: 30, offset: 65538},
																val:        "```",
																ignoreCase: false,
																want:       "\"```\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1841, col: 36, offset: 65544},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonQuoteBlockRawContent234,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1835, col: 42, offset: 65263},
																label: "content",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1845, col: 26, offset: 65634},
																	expr: &actionExpr{
																		pos: position{line: 1845, col: 27, offset: 65635},
																		run: (*parser).callonQuoteBlockRawContent243,
																		expr: &seqExpr{
																			pos: position{line: 1845, col: 27, offset: 65635},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 1845, col: 27, offset: 65635},
																					expr: &choiceExpr{
																						pos: position{line: 1843, col: 28, offset: 65583},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1843, col: 29, offset: 65584},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1843, col: 29, offset: 65584},
																										val:        "```",
																										ignoreCase: false,
																										want:       "\"```\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1843, col: 35, offset: 65590},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent252,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1845, col: 52, offset: 65660},
																					label: "line",
																					expr: &actionExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						run: (*parser).callonQuoteBlockRawContent262,
																						expr: &seqExpr{
																							pos: position{line: 42, col: 12, offset: 1077},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 42, col: 17, offset: 1082},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 42, col: 26, offset: 1091},
																										run: (*parser).callonQuoteBlockRawContent268,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 42, col: 26, offset: 1091},
																											expr: &charClassMatcher{
																												pos:        position{line: 42, col: 26, offset: 1091},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1843, col: 28, offset: 65583},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1843, col: 29, offset: 65584},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1843, col: 29, offset: 65584},
																				val:        "```",
																				ignoreCase: false,
																				want:       "\"```\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1843, col: 35, offset: 65590},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonQuoteBlockRawContent282,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1852, col: 17, offset: 65916},
													run: (*parser).callonQuoteBlockRawContent291,
													expr: &seqExpr{
														pos: position{line: 1852, col: 17, offset: 65916},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1858, col: 31, offset: 66169},
																val:        "----",
																ignoreCase: false,
																want:       "\"----\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1858, col: 38, offset: 66176},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonQuoteBlockRawContent297,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1852, col: 44, offset: 65943},
																label: "content",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1862, col: 27, offset: 66269},
																	expr: &actionExpr{
																		pos: position{line: 1862, col: 28, offset: 66270},
																		run: (*parser).callonQuoteBlockRawContent306,
																		expr: &seqExpr{
																			pos: position{line: 1862, col: 28, offset: 66270},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 1862, col: 28, offset: 66270},
																					expr: &choiceExpr{
																						pos: position{line: 1860, col: 29, offset: 66216},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1860, col: 30, offset: 66217},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1860, col: 30, offset: 66217},
																										val:        "----",
																										ignoreCase: false,
																										want:       "\"----\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1860, col: 37, offset: 66224},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent315,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1862, col: 54, offset: 66296},
																					label: "line",
																					expr: &actionExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						run: (*parser).callonQuoteBlockRawContent325,
																						expr: &seqExpr{
																							pos: position{line: 42, col: 12, offset: 1077},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 42, col: 17, offset: 1082},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 42, col: 26, offset: 1091},
																										run: (*parser).callonQuoteBlockRawContent331,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 42, col: 26, offset: 1091},
																											expr: &charClassMatcher{
																												pos:        position{line: 42, col: 26, offset: 1091},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1860, col: 29, offset: 66216},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1860, col: 30, offset: 66217},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1860, col: 30, offset: 66217},
																				val:        "----",
																				ignoreCase: false,
																				want:       "\"----\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1860, col: 37, offset: 66224},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonQuoteBlockRawContent345,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1870, col: 5, offset: 66553},
													run: (*parser).callonQuoteBlockRawContent354,
													expr: &seqExpr{
														pos: position{line: 1870, col: 5, offset: 66553},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 1870, col: 5, offset: 66553},
																run: (*parser).callonQuoteBlockRawContent356,
															},
															&litMatcher{
																pos:        position{line: 1738, col: 29, offset: 62027},
																val:        "____",
																ignoreCase: false,
																want:       "\"____\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1738, col: 36, offset: 62034},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonQuoteBlockRawContent361,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1874, col: 30, offset: 66758},
																label: "content",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1878, col: 25, offset: 66936},
																	expr: &actionExpr{
																		pos: position{line: 1878, col: 26, offset: 66937},
																		run: (*parser).callonQuoteBlockRawContent370,
																		expr: &seqExpr{
																			pos: position{line: 1878, col: 26, offset: 66937},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 1878, col: 26, offset: 66937},
																					expr: &choiceExpr{
																						pos: position{line: 1740, col: 27, offset: 62097},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1740, col: 28, offset: 62098},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1740, col: 28, offset: 62098},
																										val:        "____",
																										ignoreCase: false,
																										want:       "\"____\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1740, col: 35, offset: 62105},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent379,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1878, col: 50, offset: 66961},
																					label: "line",
																					expr: &actionExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						run: (*parser).callonQuoteBlockRawContent389,
																						expr: &seqExpr{
																							pos: position{line: 42, col: 12, offset: 1077},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 42, col: 17, offset: 1082},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 42, col: 26, offset: 1091},
																										run: (*parser).callonQuoteBlockRawContent395,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 42, col: 26, offset: 1091},
																											expr: &charClassMatcher{
																												pos:        position{line: 42, col: 26, offset: 1091},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1740, col: 27, offset: 62097},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1740, col: 28, offset: 62098},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1740, col: 28, offset: 62098},
																				val:        "____",
																				ignoreCase: false,
																				want:       "\"____\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1740, col: 35, offset: 62105},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonQuoteBlockRawContent409,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1761, col: 15, offset: 62736},
													name: "ExampleBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1762, col: 15, offset: 62763},
													name: "SidebarBlock",
												},
												&actionExpr{
													pos: position{line: 1916, col: 22, offset: 68317},
													run: (*parser).callonQuoteBlockRawContent420,
													expr: &seqExpr{
														pos: position{line: 1916, col: 22, offset: 68317},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1916, col: 22, offset: 68317},
																expr: &seqExpr{
																	pos: position{line: 1902, col: 26, offset: 67906},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1902, col: 26, offset: 67906},
																			val:        "////",
																			ignoreCase: false,
																			want:       "\"////\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1902, col: 33, offset: 67913},
																			expr: &choiceExpr{
																				pos: position{line: 2271, col: 10, offset: 79961},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2271, col: 10, offset: 79961},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																					&actionExpr{
																						pos: position{line: 2271, col: 16, offset: 79967},
																						run: (*parser).callonQuoteBlockRawContent428,
																						expr: &litMatcher{
																							pos:        position{line: 2271, col: 16, offset: 79967},
																							val:        "\t",
																							ignoreCase: false,
																							want:       "\"\\t\"",
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2279, col: 8, offset: 80059},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2275, col: 12, offset: 80019},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2275, col: 21, offset: 80028},
																					val:        "[\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&notExpr{
																					pos: position{line: 2277, col: 8, offset: 80048},
																					expr: &anyMatcher{
																						line: 2277, col: 9, offset: 80049,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1916, col: 45, offset: 68340},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
															&labeledExpr{
																pos:   position{line: 1916, col: 50, offset: 68345},
																label: "content",
																expr: &actionExpr{
																	pos: position{line: 1920, col: 29, offset: 68473},
																	run: (*parser).callonQuoteBlockRawContent437,
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 1920, col: 29, offset: 68473},
																		expr: &charClassMatcher{
																			pos:        position{line: 1920, col: 29, offset: 68473},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1885, col: 21, offset: 67225},
													run: (*parser).callonQuoteBlockRawContent445,
													expr: &seqExpr{
														pos: position{line: 1885, col: 21, offset: 67225},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1891, col: 35, offset: 67502},
																val:        "++++",
																ignoreCase: false,
																want:       "\"++++\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1891, col: 42, offset: 67509},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonQuoteBlockRawContent451,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1885, col: 52, offset: 67256},
																label: "content",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1895, col: 31, offset: 67610},
																	expr: &actionExpr{
																		pos: position{line: 1895, col: 32, offset: 67611},
																		run: (*parser).callonQuoteBlockRawContent460,
																		expr: &seqExpr{
																			pos: position{line: 1895, col: 32, offset: 67611},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 1895, col: 32, offset: 67611},
																					expr: &choiceExpr{
																						pos: position{line: 1893, col: 33, offset: 67553},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1893, col: 34, offset: 67554},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1893, col: 34, offset: 67554},
																										val:        "++++",
																										ignoreCase: false,
																										want:       "\"++++\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1893, col: 41, offset: 67561},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent469,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1895, col: 62, offset: 67641},
																					label: "line",
																					expr: &actionExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						run: (*parser).callonQuoteBlockRawContent479,
																						expr: &seqExpr{
																							pos: position{line: 42, col: 12, offset: 1077},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 42, col: 17, offset: 1082},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 42, col: 26, offset: 1091},
																										run: (*parser).callonQuoteBlockRawContent485,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 42, col: 26, offset: 1091},
																											expr: &charClassMatcher{
																												pos:        position{line: 42, col: 26, offset: 1091},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1893, col: 33, offset: 67553},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1893, col: 34, offset: 67554},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1893, col: 34, offset: 67554},
																				val:        "++++",
																				ignoreCase: false,
																				want:       "\"++++\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1893, col: 41, offset: 67561},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonQuoteBlockRawContent499,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1765, col: 15, offset: 62853},
													name: "Table",
												},
												&actionExpr{
													pos: position{line: 1908, col: 17, offset: 68045},
													run: (*parser).callonQuoteBlockRawContent509,
													expr: &seqExpr{
														pos: position{line: 1908, col: 17, offset: 68045},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1904, col: 31, offset: 67955},
																val:        "////",
																ignoreCase: false,
																want:       "\"////\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1904, col: 38, offset: 67962},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonQuoteBlockRawContent515,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1908, col: 44, offset: 68072},
																label: "content",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1912, col: 27, offset: 68225},
																	expr: &actionExpr{
																		pos: position{line: 1912, col: 28, offset: 68226},
																		run: (*parser).callonQuoteBlockRawContent524,
																		expr: &seqExpr{
																			pos: position{line: 1912, col: 28, offset: 68226},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 1912, col: 28, offset: 68226},
																					expr: &choiceExpr{
																						pos: position{line: 1906, col: 29, offset: 68002},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1906, col: 30, offset: 68003},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1906, col: 30, offset: 68003},
																										val:        "////",
																										ignoreCase: false,
																										want:       "\"////\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1906, col: 37, offset: 68010},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent533,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1912, col: 54, offset: 68252},
																					label: "line",
																					expr: &actionExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						run: (*parser).callonQuoteBlockRawContent543,
																						expr: &seqExpr{
																							pos: position{line: 42, col: 12, offset: 1077},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 42, col: 17, offset: 1082},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 42, col: 26, offset: 1091},
																										run: (*parser).callonQuoteBlockRawContent549,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 42, col: 26, offset: 1091},
																											expr: &charClassMatcher{
																												pos:        position{line: 42, col: 26, offset: 1091},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1906, col: 29, offset: 68002},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1906, col: 30, offset: 68003},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1906, col: 30, offset: 68003},
																				val:        "////",
																				ignoreCase: false,
																				want:       "\"////\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1906, col: 37, offset: 68010},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonQuoteBlockRawContent563,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2116, col: 5, offset: 74964},
													run: (*parser).callonQuoteBlockRawContent572,
													expr: &seqExpr{
														pos: position{line: 2116, col: 5, offset: 74964},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 2116, col: 5, offset: 74964},
																run: (*parser).callonQuoteBlockRawContent574,
															},
															&labeledExpr{
																pos:   position{line: 2120, col: 5, offset: 75117},
																label: "lines",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2120, col: 11, offset: 75123},
																	expr: &actionExpr{
																		pos: position{line: 2128, col: 25, offset: 75365},
																		run: (*parser).callonQuoteBlockRawContent577,
																		expr: &seqExpr{
																			pos: position{line: 2128, col: 25, offset: 75365},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 2128, col: 25, offset: 75365},
																					expr: &actionExpr{
																						pos: position{line: 2161, col: 14, offset: 76486},
																						run: (*parser).callonQuoteBlockRawContent580,
																						expr: &seqExpr{
																							pos: position{line: 2161, col: 14, offset: 76486},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 2161, col: 14, offset: 76486},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2161, col: 19, offset: 76491},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonQuoteBlockRawContent588,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2128, col: 36, offset: 75376},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 2128, col: 45, offset: 75385},
																						run: (*parser).callonQuoteBlockRawContent596,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2128, col: 45, offset: 75385},
																							expr: &charClassMatcher{
																								pos:        position{line: 2128, col: 45, offset: 75385},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2279, col: 8, offset: 80059},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2275, col: 12, offset: 80019},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2275, col: 21, offset: 80028},
																							val:        "[\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2080, col: 31, offset: 73460},
													run: (*parser).callonQuoteBlockRawContent604,
													expr: &labeledExpr{
														pos:   position{line: 2080, col: 31, offset: 73460},
														label: "lines",
														expr: &actionExpr{
															pos: position{line: 2086, col: 5, offset: 73756},
															run: (*parser).callonQuoteBlockRawContent606,
															expr: &seqExpr{
																pos: position{line: 2086, col: 5, offset: 73756},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 2086, col: 5, offset: 73756},
																		label: "firstLine",
																		expr: &actionExpr{
																			pos: position{line: 2091, col: 35, offset: 73958},
																			run: (*parser).callonQuoteBlockRawContent609,
																			expr: &seqExpr{
																				pos: position{line: 2091, col: 35, offset: 73958},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 2091, col: 35, offset: 73958},
																						label: "line",
																						expr: &actionExpr{
																							pos: position{line: 2091, col: 41, offset: 73964},
																							run: (*parser).callonQuoteBlockRawContent612,
																							expr: &seqExpr{
																								pos: position{line: 2091, col: 41, offset: 73964},
																								exprs: []interface{}{
																									&oneOrMoreExpr{
																										pos: position{line: 2091, col: 41, offset: 73964},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent617,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 2091, col: 48, offset: 73971},
																										expr: &charClassMatcher{
																											pos:        position{line: 2091, col: 48, offset: 73971},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2279, col: 8, offset: 80059},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2275, col: 12, offset: 80019},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2275, col: 21, offset: 80028},
																								val:        "[\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2087, col: 5, offset: 73803},
																		label: "otherLines",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 2087, col: 16, offset: 73814},
																			expr: &actionExpr{
																				pos: position{line: 2128, col: 25, offset: 75365},
																				run: (*parser).callonQuoteBlockRawContent628,
																				expr: &seqExpr{
																					pos: position{line: 2128, col: 25, offset: 75365},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 2128, col: 25, offset: 75365},
																							expr: &actionExpr{
																								pos: position{line: 2161, col: 14, offset: 76486},
																								run: (*parser).callonQuoteBlockRawContent631,
																								expr: &seqExpr{
																									pos: position{line: 2161, col: 14, offset: 76486},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 2161, col: 14, offset: 76486},
																											expr: &notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 2161, col: 19, offset: 76491},
																											expr: &choiceExpr{
																												pos: position{line: 2271, col: 10, offset: 79961},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2271, col: 10, offset: 79961},
																														val:        " ",
																														ignoreCase: false,
																														want:       "\" \"",
																													},
																													&actionExpr{
																														pos: position{line: 2271, col: 16, offset: 79967},
																														run: (*parser).callonQuoteBlockRawContent639,
																														expr: &litMatcher{
																															pos:        position{line: 2271, col: 16, offset: 79967},
																															val:        "\t",
																															ignoreCase: false,
																															want:       "\"\\t\"",
																														},
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2279, col: 8, offset: 80059},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2275, col: 12, offset: 80019},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2275, col: 21, offset: 80028},
																													val:        "[\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&notExpr{
																													pos: position{line: 2277, col: 8, offset: 80048},
																													expr: &anyMatcher{
																														line: 2277, col: 9, offset: 80049,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 2128, col: 36, offset: 75376},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2128, col: 45, offset: 75385},
																								run: (*parser).callonQuoteBlockRawContent647,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2128, col: 45, offset: 75385},
																									expr: &charClassMatcher{
																										pos:        position{line: 2128, col: 45, offset: 75385},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2098, col: 39, offset: 74215},
													run: (*parser).callonQuoteBlockRawContent655,
													expr: &seqExpr{
														pos: position{line: 2098, col: 39, offset: 74215},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2077, col: 26, offset: 73358},
																val:        "....",
																ignoreCase: false,
																want:       "\"....\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2098, col: 61, offset: 74237},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonQuoteBlockRawContent661,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2275, col: 12, offset: 80019},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 2098, col: 76, offset: 74252},
																label: "lines",
																expr: &actionExpr{
																	pos: position{line: 2103, col: 44, offset: 74559},
																	run: (*parser).callonQuoteBlockRawContent667,
																	expr: &labeledExpr{
																		pos:   position{line: 2103, col: 44, offset: 74559},
																		label: "lines",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 2103, col: 50, offset: 74565},
																			expr: &actionExpr{
																				pos: position{line: 2108, col: 5, offset: 74705},
																				run: (*parser).callonQuoteBlockRawContent670,
																				expr: &seqExpr{
																					pos: position{line: 2108, col: 5, offset: 74705},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 2108, col: 5, offset: 74705},
																							label: "line",
																							expr: &actionExpr{
																								pos: position{line: 2108, col: 11, offset: 74711},
																								run: (*parser).callonQuoteBlockRawContent673,
																								expr: &seqExpr{
																									pos: position{line: 2108, col: 11, offset: 74711},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 2108, col: 11, offset: 74711},
																											expr: &litMatcher{
																												pos:        position{line: 2077, col: 26, offset: 73358},
																												val:        "....",
																												ignoreCase: false,
																												want:       "\"....\"",
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 2108, col: 34, offset: 74734},
																											expr: &charClassMatcher{
																												pos:        position{line: 2108, col: 34, offset: 74734},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2098, col: 125, offset: 74301},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2098, col: 126, offset: 74302},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2077, col: 26, offset: 73358},
																				val:        "....",
																				ignoreCase: false,
																				want:       "\"....\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2098, col: 148, offset: 74324},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonQuoteBlockRawContent690,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 879, col: 6, offset: 28334},
													run: (*parser).callonQuoteBlockRawContent699,
													expr: &seqExpr{
														pos: position{line: 879, col: 6, offset: 28334},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 879, col: 6, offset: 28334},
																label: "t",
																expr: &choiceExpr{
																	pos: position{line: 856, col: 19, offset: 27732},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 856, col: 19, offset: 27732},
																			run: (*parser).callonQuoteBlockRawContent703,
																			expr: &litMatcher{
																				pos:        position{line: 856, col: 19, offset: 27732},
																				val:        "TIP",
																				ignoreCase: false,
																				want:       "\"TIP\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 858, col: 5, offset: 27770},
																			run: (*parser).callonQuoteBlockRawContent705,
																			expr: &litMatcher{
																				pos:        position{line: 858, col: 5, offset: 27770},
																				val:        "NOTE",
																				ignoreCase: false,
																				want:       "\"NOTE\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 860, col: 5, offset: 27810},
																			run: (*parser).callonQuoteBlockRawContent707,
																			expr: &litMatcher{
																				pos:        position{line: 860, col: 5, offset: 27810},
																				val:        "IMPORTANT",
																				ignoreCase: false,
																				want:       "\"IMPORTANT\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 862, col: 5, offset: 27860},
																			run: (*parser).callonQuoteBlockRawContent709,
																			expr: &litMatcher{
																				pos:        position{line: 862, col: 5, offset: 27860},
																				val:        "WARNING",
																				ignoreCase: false,
																				want:       "\"WARNING\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 864, col: 5, offset: 27906},
																			run: (*parser).callonQuoteBlockRawContent711,
																			expr: &litMatcher{
																				pos:        position{line: 864, col: 5, offset: 27906},
																				val:        "CAUTION",
																				ignoreCase: false,
																				want:       "\"CAUTION\"",
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 879, col: 25, offset: 28353},
																val:        ": ",
																ignoreCase: false,
																want:       "\": \"",
															},
															&labeledExpr{
																pos:   position{line: 879, col: 30, offset: 28358},
																label: "lines",
																expr: &oneOrMoreExpr{
																	pos: position{line: 879, col: 36, offset: 28364},
																	expr: &choiceExpr{
																		pos: position{line: 879, col: 37, offset: 28365},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1916, col: 22, offset: 68317},
																				run: (*parser).callonQuoteBlockRawContent717,
																				expr: &seqExpr{
																					pos: position{line: 1916, col: 22, offset: 68317},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 1916, col: 22, offset: 68317},
																							expr: &seqExpr{
																								pos: position{line: 1902, col: 26, offset: 67906},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1902, col: 26, offset: 67906},
																										val:        "////",
																										ignoreCase: false,
																										want:       "\"////\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1902, col: 33, offset: 67913},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent725,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1916, col: 45, offset: 68340},
																							val:        "//",
																							ignoreCase: false,
																							want:       "\"//\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 1916, col: 50, offset: 68345},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 1920, col: 29, offset: 68473},
																								run: (*parser).callonQuoteBlockRawContent734,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 1920, col: 29, offset: 68473},
																									expr: &charClassMatcher{
																										pos:        position{line: 1920, col: 29, offset: 68473},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 903, col: 21, offset: 29486},
																				run: (*parser).callonQuoteBlockRawContent742,
																				expr: &seqExpr{
																					pos: position{line: 903, col: 21, offset: 29486},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 903, col: 21, offset: 29486},
																							expr: &choiceExpr{
																								pos: position{line: 1654, col: 19, offset: 59095},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 1654, col: 19, offset: 59095},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 1654, col: 19, offset: 59095},
																												expr: &charClassMatcher{
																													pos:        position{line: 2213, col: 13, offset: 78116},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 2077, col: 26, offset: 73358},
																												val:        "....",
																												ignoreCase: false,
																												want:       "\"....\"",
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1839, col: 25, offset: 65436},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1839, col: 25, offset: 65436},
																												val:        "```",
																												ignoreCase: false,
																												want:       "\"```\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1839, col: 31, offset: 65442},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonQuoteBlockRawContent755,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1856, col: 26, offset: 66120},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1856, col: 26, offset: 66120},
																												val:        "----",
																												ignoreCase: false,
																												want:       "\"----\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1856, col: 33, offset: 66127},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonQuoteBlockRawContent767,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1674, col: 26, offset: 59888},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1674, col: 26, offset: 59888},
																												val:        "====",
																												ignoreCase: false,
																												want:       "\"====\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1674, col: 33, offset: 59895},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonQuoteBlockRawContent779,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1902, col: 26, offset: 67906},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1902, col: 26, offset: 67906},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1902, col: 33, offset: 67913},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonQuoteBlockRawContent791,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1736, col: 24, offset: 61955},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1736, col: 24, offset: 61955},
																												val:        "____",
																												ignoreCase: false,
																												want:       "\"____\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1736, col: 31, offset: 61962},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonQuoteBlockRawContent803,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1788, col: 26, offset: 63733},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1788, col: 26, offset: 63733},
																												val:        "****",
																												ignoreCase: false,
																												want:       "\"****\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1788, col: 33, offset: 63740},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonQuoteBlockRawContent815,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1889, col: 30, offset: 67449},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1889, col: 30, offset: 67449},
																												val:        "++++",
																												ignoreCase: false,
																												want:       "\"++++\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1889, col: 37, offset: 67456},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonQuoteBlockRawContent827,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 904, col: 5, offset: 29507},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 914, col: 28, offset: 29807},
																								run: (*parser).callonQuoteBlockRawContent835,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 914, col: 28, offset: 29807},
																									expr: &charClassMatcher{
																										pos:        position{line: 914, col: 28, offset: 29807},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 904, col: 43, offset: 29545},
																							run: (*parser).callonQuoteBlockRawContent843,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 884, col: 5, offset: 28625},
													run: (*parser).callonQuoteBlockRawContent844,
													expr: &seqExpr{
														pos: position{line: 884, col: 5, offset: 28625},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 884, col: 5, offset: 28625},
																val:        "> ",
																ignoreCase: false,
																want:       "\"> \"",
															},
															&labeledExpr{
																pos:   position{line: 884, col: 10, offset: 28630},
																label: "content",
																expr: &oneOrMoreExpr{
																	pos: position{line: 899, col: 33, offset: 29398},
																	expr: &actionExpr{
																		pos: position{line: 899, col: 34, offset: 29399},
																		run: (*parser).callonQuoteBlockRawContent849,
																		expr: &seqExpr{
																			pos: position{line: 899, col: 34, offset: 29399},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 899, col: 34, offset: 29399},
																					expr: &actionExpr{
																						pos: position{line: 2161, col: 14, offset: 76486},
																						run: (*parser).callonQuoteBlockRawContent852,
																						expr: &seqExpr{
																							pos: position{line: 2161, col: 14, offset: 76486},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 2161, col: 14, offset: 76486},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2161, col: 19, offset: 76491},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonQuoteBlockRawContent860,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 899, col: 45, offset: 29410},
																					expr: &litMatcher{
																						pos:        position{line: 899, col: 45, offset: 29410},
																						val:        "> ",
																						ignoreCase: false,
																						want:       "\"> \"",
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 899, col: 51, offset: 29416},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						run: (*parser).callonQuoteBlockRawContent870,
																						expr: &seqExpr{
																							pos: position{line: 42, col: 12, offset: 1077},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 42, col: 17, offset: 1082},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 42, col: 26, offset: 1091},
																										run: (*parser).callonQuoteBlockRawContent876,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 42, col: 26, offset: 1091},
																											expr: &charClassMatcher{
																												pos:        position{line: 42, col: 26, offset: 1091},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 888, col: 5, offset: 28831},
													run: (*parser).callonQuoteBlockRawContent884,
													expr: &seqExpr{
														pos: position{line: 888, col: 5, offset: 28831},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 888, col: 5, offset: 28831},
																run: (*parser).callonQuoteBlockRawContent886,
															},
															&labeledExpr{
																pos:   position{line: 891, col: 7, offset: 29028},
																label: "content",
																expr: &oneOrMoreExpr{
																	pos: position{line: 891, col: 15, offset: 29036},
																	expr: &actionExpr{
																		pos: position{line: 903, col: 21, offset: 29486},
																		run: (*parser).callonQuoteBlockRawContent889,
																		expr: &seqExpr{
																			pos: position{line: 903, col: 21, offset: 29486},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 903, col: 21, offset: 29486},
																					expr: &choiceExpr{
																						pos: position{line: 1654, col: 19, offset: 59095},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1654, col: 19, offset: 59095},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 1654, col: 19, offset: 59095},
																										expr: &charClassMatcher{
																											pos:        position{line: 2213, col: 13, offset: 78116},
																											val:        "[0-9\\pL]",
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2077, col: 26, offset: 73358},
																										val:        "....",
																										ignoreCase: false,
																										want:       "\"....\"",
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1839, col: 25, offset: 65436},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1839, col: 25, offset: 65436},
																										val:        "```",
																										ignoreCase: false,
																										want:       "\"```\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1839, col: 31, offset: 65442},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent902,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1856, col: 26, offset: 66120},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1856, col: 26, offset: 66120},
																										val:        "----",
																										ignoreCase: false,
																										want:       "\"----\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1856, col: 33, offset: 66127},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent914,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1674, col: 26, offset: 59888},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1674, col: 26, offset: 59888},
																										val:        "====",
																										ignoreCase: false,
																										want:       "\"====\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1674, col: 33, offset: 59895},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent926,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1902, col: 26, offset: 67906},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1902, col: 26, offset: 67906},
																										val:        "////",
																										ignoreCase: false,
																										want:       "\"////\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1902, col: 33, offset: 67913},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent938,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1736, col: 24, offset: 61955},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1736, col: 24, offset: 61955},
																										val:        "____",
																										ignoreCase: false,
																										want:       "\"____\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1736, col: 31, offset: 61962},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent950,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1788, col: 26, offset: 63733},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1788, col: 26, offset: 63733},
																										val:        "****",
																										ignoreCase: false,
																										want:       "\"****\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1788, col: 33, offset: 63740},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent962,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1889, col: 30, offset: 67449},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1889, col: 30, offset: 67449},
																										val:        "++++",
																										ignoreCase: false,
																										want:       "\"++++\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1889, col: 37, offset: 67456},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent974,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 904, col: 5, offset: 29507},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 914, col: 28, offset: 29807},
																						run: (*parser).callonQuoteBlockRawContent982,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 914, col: 28, offset: 29807},
																							expr: &charClassMatcher{
																								pos:        position{line: 914, col: 28, offset: 29807},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2279, col: 8, offset: 80059},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2275, col: 12, offset: 80019},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2275, col: 21, offset: 80028},
																							val:        "[\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 904, col: 43, offset: 29545},
																					run: (*parser).callonQuoteBlockRawContent990,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 895, col: 5, offset: 29222},
													run: (*parser).callonQuoteBlockRawContent991,
													expr: &labeledExpr{
														pos:   position{line: 895, col: 5, offset: 29222},
														label: "lines",
														expr: &oneOrMoreExpr{
															pos: position{line: 895, col: 11, offset: 29228},
															expr: &choiceExpr{
																pos: position{line: 895, col: 12, offset: 29229},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 1916, col: 22, offset: 68317},
																		run: (*parser).callonQuoteBlockRawContent995,
																		expr: &seqExpr{
																			pos: position{line: 1916, col: 22, offset: 68317},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 1916, col: 22, offset: 68317},
																					expr: &seqExpr{
																						pos: position{line: 1902, col: 26, offset: 67906},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 1902, col: 26, offset: 67906},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 1902, col: 33, offset: 67913},
																								expr: &choiceExpr{
																									pos: position{line: 2271, col: 10, offset: 79961},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2271, col: 10, offset: 79961},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2271, col: 16, offset: 79967},
																											run: (*parser).callonQuoteBlockRawContent1003,
																											expr: &litMatcher{
																												pos:        position{line: 2271, col: 16, offset: 79967},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2279, col: 8, offset: 80059},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2275, col: 12, offset: 80019},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2275, col: 21, offset: 80028},
																										val:        "[\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1916, col: 45, offset: 68340},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1916, col: 50, offset: 68345},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 1920, col: 29, offset: 68473},
																						run: (*parser).callonQuoteBlockRawContent1012,
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 1920, col: 29, offset: 68473},
																							expr: &charClassMatcher{
																								pos:        position{line: 1920, col: 29, offset: 68473},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2279, col: 8, offset: 80059},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2275, col: 12, offset: 80019},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2275, col: 21, offset: 80028},
																							val:        "[\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 903, col: 21, offset: 29486},
																		run: (*parser).callonQuoteBlockRawContent1020,
																		expr: &seqExpr{
																			pos: position{line: 903, col: 21, offset: 29486},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 903, col: 21, offset: 29486},
																					expr: &choiceExpr{
																						pos: position{line: 1654, col: 19, offset: 59095},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1654, col: 19, offset: 59095},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 1654, col: 19, offset: 59095},
																										expr: &charClassMatcher{
																											pos:        position{line: 2213, col: 13, offset: 78116},
																											val:        "[0-9\\pL]",
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2077, col: 26, offset: 73358},
																										val:        "....",
																										ignoreCase: false,
																										want:       "\"....\"",
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1839, col: 25, offset: 65436},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1839, col: 25, offset: 65436},
																										val:        "```",
																										ignoreCase: false,
																										want:       "\"```\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1839, col: 31, offset: 65442},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent1033,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1856, col: 26, offset: 66120},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1856, col: 26, offset: 66120},
																										val:        "----",
																										ignoreCase: false,
																										want:       "\"----\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1856, col: 33, offset: 66127},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent1045,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1674, col: 26, offset: 59888},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1674, col: 26, offset: 59888},
																										val:        "====",
																										ignoreCase: false,
																										want:       "\"====\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1674, col: 33, offset: 59895},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent1057,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1902, col: 26, offset: 67906},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1902, col: 26, offset: 67906},
																										val:        "////",
																										ignoreCase: false,
																										want:       "\"////\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1902, col: 33, offset: 67913},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent1069,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1736, col: 24, offset: 61955},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1736, col: 24, offset: 61955},
																										val:        "____",
																										ignoreCase: false,
																										want:       "\"____\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1736, col: 31, offset: 61962},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent1081,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1788, col: 26, offset: 63733},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1788, col: 26, offset: 63733},
																										val:        "****",
																										ignoreCase: false,
																										want:       "\"****\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1788, col: 33, offset: 63740},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent1093,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1889, col: 30, offset: 67449},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1889, col: 30, offset: 67449},
																										val:        "++++",
																										ignoreCase: false,
																										want:       "\"++++\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1889, col: 37, offset: 67456},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonQuoteBlockRawContent1105,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 904, col: 5, offset: 29507},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 914, col: 28, offset: 29807},
																						run: (*parser).callonQuoteBlockRawContent1113,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 914, col: 28, offset: 29807},
																							expr: &charClassMatcher{
																								pos:        position{line: 914, col: 28, offset: 29807},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2279, col: 8, offset: 80059},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2275, col: 12, offset: 80019},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2275, col: 21, offset: 80028},
																							val:        "[\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 904, col: 43, offset: 29545},
																					run: (*parser).callonQuoteBlockRawContent1121,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1769, col: 15, offset: 62955},
													run: (*parser).callonQuoteBlockRawContent1122,
													expr: &choiceExpr{
														pos: position{line: 1740, col: 27, offset: 62097},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 1740, col: 28, offset: 62098},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1740, col: 28, offset: 62098},
																		val:        "____",
																		ignoreCase: false,
																		want:       "\"____\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1740, col: 35, offset: 62105},
																		expr: &choiceExpr{
																			pos: position{line: 2271, col: 10, offset: 79961},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2271, col: 10, offset: 79961},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2271, col: 16, offset: 79967},
																					run: (*parser).callonQuoteBlockRawContent1129,
																					expr: &litMatcher{
																						pos:        position{line: 2271, col: 16, offset: 79967},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2279, col: 8, offset: 80059},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2275, col: 12, offset: 80019},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2275, col: 21, offset: 80028},
																				val:        "[\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&notExpr{
																				pos: position{line: 2277, col: 8, offset: 80048},
																				expr: &anyMatcher{
																					line: 2277, col: 9, offset: 80049,
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2277, col: 8, offset: 80048},
																expr: &anyMatcher{
																	line: 2277, col: 9, offset: 80049,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1784, col: 1, offset: 63513},
			expr: &actionExpr{
				pos: position{line: 1784, col: 17, offset: 63529},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1784, col: 17, offset: 63529},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1790, col: 31, offset: 63782},
							val:        "****",
							ignoreCase: false,
							want:       "\"****\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1790, col: 38, offset: 63789},
							expr: &choiceExpr{
								pos: position{line: 2271, col: 10, offset: 79961},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2271, col: 10, offset: 79961},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2271, col: 16, offset: 79967},
										run: (*parser).callonSidebarBlock7,
										expr: &litMatcher{
											pos:        position{line: 2271, col: 16, offset: 79967},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2279, col: 8, offset: 80059},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
								&notExpr{
									pos: position{line: 2277, col: 8, offset: 80048},
									expr: &anyMatcher{
										line: 2277, col: 9, offset: 80049,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1784, col: 44, offset: 63556},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1784, col: 53, offset: 63565},
								name: "SidebarBlockRawContent",
							},
						},
						&choiceExpr{
							pos: position{line: 1792, col: 29, offset: 63829},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1792, col: 30, offset: 63830},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1792, col: 30, offset: 63830},
											val:        "****",
											ignoreCase: false,
											want:       "\"****\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1792, col: 37, offset: 63837},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonSidebarBlock22,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2279, col: 8, offset: 80059},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2275, col: 12, offset: 80019},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&charClassMatcher{
													pos:        position{line: 2275, col: 21, offset: 80028},
													val:        "[\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
												&notExpr{
													pos: position{line: 2277, col: 8, offset: 80048},
													expr: &anyMatcher{
														line: 2277, col: 9, offset: 80049,
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2277, col: 8, offset: 80048},
									expr: &anyMatcher{
										line: 2277, col: 9, offset: 80049,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1794, col: 1, offset: 63856},
			expr: &actionExpr{
				pos: position{line: 1795, col: 5, offset: 63886},
				run: (*parser).callonSidebarBlockRawContent1,
				expr: &labeledExpr{
					pos:   position{line: 1795, col: 5, offset: 63886},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1795, col: 14, offset: 63895},
						expr: &actionExpr{
							pos: position{line: 1796, col: 9, offset: 63905},
							run: (*parser).callonSidebarBlockRawContent4,
							expr: &seqExpr{
								pos: position{line: 1796, col: 9, offset: 63905},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1796, col: 9, offset: 63905},
										expr: &choiceExpr{
											pos: position{line: 1792, col: 29, offset: 63829},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 1792, col: 30, offset: 63830},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1792, col: 30, offset: 63830},
															val:        "****",
															ignoreCase: false,
															want:       "\"****\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1792, col: 37, offset: 63837},
															expr: &choiceExpr{
																pos: position{line: 2271, col: 10, offset: 79961},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2271, col: 10, offset: 79961},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2271, col: 16, offset: 79967},
																		run: (*parser).callonSidebarBlockRawContent13,
																		expr: &litMatcher{
																			pos:        position{line: 2271, col: 16, offset: 79967},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 2279, col: 8, offset: 80059},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2275, col: 12, offset: 80019},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2275, col: 21, offset: 80028},
																	val:        "[\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2277, col: 8, offset: 80048},
																	expr: &anyMatcher{
																		line: 2277, col: 9, offset: 80049,
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2277, col: 8, offset: 80048},
													expr: &anyMatcher{
														line: 2277, col: 9, offset: 80049,
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 1797, col: 9, offset: 63940},
										label: "attributes",
										expr: &zeroOrOneExpr{
											pos: position{line: 1797, col: 20, offset: 63951},
											expr: &ruleRefExpr{
												pos:  position{line: 1797, col: 21, offset: 63952},
												name: "BlockAttributes",
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 1798, col: 9, offset: 63978},
										run: (*parser).callonSidebarBlockRawContent25,
									},
									&labeledExpr{
										pos:   position{line: 1802, col: 9, offset: 64076},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 1802, col: 18, offset: 64085},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1802, col: 18, offset: 64085},
													name: "LabeledListItem",
												},
												&actionExpr{
													pos: position{line: 920, col: 5, offset: 29951},
													run: (*parser).callonSidebarBlockRawContent29,
													expr: &seqExpr{
														pos: position{line: 920, col: 5, offset: 29951},
														exprs: []interface{}{
															&notCodeExpr{
																pos: position{line: 920, col: 5, offset: 29951},
																run: (*parser).callonSidebarBlockRawContent31,
															},
															&labeledExpr{
																pos:   position{line: 923, col: 5, offset: 30081},
																label: "firstLine",
																expr: &actionExpr{
																	pos: position{line: 929, col: 5, offset: 30339},
																	run: (*parser).callonSidebarBlockRawContent33,
																	expr: &seqExpr{
																		pos: position{line: 929, col: 5, offset: 30339},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 929, col: 5, offset: 30339},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 929, col: 14, offset: 30348},
																					run: (*parser).callonSidebarBlockRawContent36,
																					expr: &seqExpr{
																						pos: position{line: 929, col: 14, offset: 30348},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 929, col: 14, offset: 30348},
																								label: "elements",
																								expr: &choiceExpr{
																									pos: position{line: 2225, col: 5, offset: 78563},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2225, col: 5, offset: 78563},
																											run: (*parser).callonSidebarBlockRawContent40,
																											expr: &seqExpr{
																												pos: position{line: 2225, col: 5, offset: 78563},
																												exprs: []interface{}{
																													&oneOrMoreExpr{
																														pos: position{line: 2225, col: 5, offset: 78563},
																														expr: &charClassMatcher{
																															pos:        position{line: 2225, col: 5, offset: 78563},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&andExpr{
																														pos: position{line: 2225, col: 15, offset: 78573},
																														expr: &choiceExpr{
																															pos: position{line: 2225, col: 17, offset: 78575},
																															alternatives: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 2225, col: 17, offset: 78575},
																																	val:        "[\\r\\n ,]]",
																																	chars:      []rune{'\r', '\n', ' ', ',', ']'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&notExpr{
																																	pos: position{line: 2277, col: 8, offset: 80048},
																																	expr: &anyMatcher{
																																		line: 2277, col: 9, offset: 80049,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2227, col: 9, offset: 78658},
																											run: (*parser).callonSidebarBlockRawContent49,
																											expr: &seqExpr{
																												pos: position{line: 2227, col: 9, offset: 78658},
																												exprs: []interface{}{
																													&oneOrMoreExpr{
																														pos: position{line: 2227, col: 9, offset: 78658},
																														expr: &charClassMatcher{
																															pos:        position{line: 2227, col: 9, offset: 78658},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 2227, col: 19, offset: 78668},
																														expr: &seqExpr{
																															pos: position{line: 2227, col: 20, offset: 78669},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 2227, col: 20, offset: 78669},
																																	val:        "[=*_`]",
																																	chars:      []rune{'=', '*', '_', '`'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&oneOrMoreExpr{
																																	pos: position{line: 2227, col: 27, offset: 78676},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2227, col: 27, offset: 78676},
																																		val:        "[0-9\\pL]",
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 929, col: 28, offset: 30362},
																								expr: &charClassMatcher{
																									pos:        position{line: 929, col: 28, offset: 30362},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 924, col: 5, offset: 30118},
																label: "otherLines",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 924, col: 16, offset: 30129},
																	expr: &choiceExpr{
																		pos: position{line: 924, col: 17, offset: 30130},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1916, col: 22, offset: 68317},
																				run: (*parser).callonSidebarBlockRawContent68,
																				expr: &seqExpr{
																					pos: position{line: 1916, col: 22, offset: 68317},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 1916, col: 22, offset: 68317},
																							expr: &seqExpr{
																								pos: position{line: 1902, col: 26, offset: 67906},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1902, col: 26, offset: 67906},
																										val:        "////",
																										ignoreCase: false,
																										want:       "\"////\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1902, col: 33, offset: 67913},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent76,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1916, col: 45, offset: 68340},
																							val:        "//",
																							ignoreCase: false,
																							want:       "\"//\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 1916, col: 50, offset: 68345},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 1920, col: 29, offset: 68473},
																								run: (*parser).callonSidebarBlockRawContent85,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 1920, col: 29, offset: 68473},
																									expr: &charClassMatcher{
																										pos:        position{line: 1920, col: 29, offset: 68473},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 903, col: 21, offset: 29486},
																				run: (*parser).callonSidebarBlockRawContent93,
																				expr: &seqExpr{
																					pos: position{line: 903, col: 21, offset: 29486},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 903, col: 21, offset: 29486},
																							expr: &choiceExpr{
																								pos: position{line: 1654, col: 19, offset: 59095},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 1654, col: 19, offset: 59095},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 1654, col: 19, offset: 59095},
																												expr: &charClassMatcher{
																													pos:        position{line: 2213, col: 13, offset: 78116},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 2077, col: 26, offset: 73358},
																												val:        "....",
																												ignoreCase: false,
																												want:       "\"....\"",
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1839, col: 25, offset: 65436},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1839, col: 25, offset: 65436},
																												val:        "```",
																												ignoreCase: false,
																												want:       "\"```\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1839, col: 31, offset: 65442},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonSidebarBlockRawContent106,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1856, col: 26, offset: 66120},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1856, col: 26, offset: 66120},
																												val:        "----",
																												ignoreCase: false,
																												want:       "\"----\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1856, col: 33, offset: 66127},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonSidebarBlockRawContent118,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1674, col: 26, offset: 59888},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1674, col: 26, offset: 59888},
																												val:        "====",
																												ignoreCase: false,
																												want:       "\"====\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1674, col: 33, offset: 59895},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonSidebarBlockRawContent130,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1902, col: 26, offset: 67906},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1902, col: 26, offset: 67906},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1902, col: 33, offset: 67913},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonSidebarBlockRawContent142,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1736, col: 24, offset: 61955},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1736, col: 24, offset: 61955},
																												val:        "____",
																												ignoreCase: false,
																												want:       "\"____\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1736, col: 31, offset: 61962},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonSidebarBlockRawContent154,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1788, col: 26, offset: 63733},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1788, col: 26, offset: 63733},
																												val:        "****",
																												ignoreCase: false,
																												want:       "\"****\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1788, col: 33, offset: 63740},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonSidebarBlockRawContent166,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1889, col: 30, offset: 67449},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1889, col: 30, offset: 67449},
																												val:        "++++",
																												ignoreCase: false,
																												want:       "\"++++\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1889, col: 37, offset: 67456},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonSidebarBlockRawContent178,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 904, col: 5, offset: 29507},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 914, col: 28, offset: 29807},
																								run: (*parser).callonSidebarBlockRawContent186,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 914, col: 28, offset: 29807},
																									expr: &charClassMatcher{
																										pos:        position{line: 914, col: 28, offset: 29807},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 904, col: 43, offset: 29545},
																							run: (*parser).callonSidebarBlockRawContent194,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2161, col: 14, offset: 76486},
													run: (*parser).callonSidebarBlockRawContent195,
													expr: &seqExpr{
														pos: position{line: 2161, col: 14, offset: 76486},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 2161, col: 14, offset: 76486},
																expr: &notExpr{
																	pos: position{line: 2277, col: 8, offset: 80048},
																	expr: &anyMatcher{
																		line: 2277, col: 9, offset: 80049,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 2161, col: 19, offset: 76491},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonSidebarBlockRawContent203,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1805, col: 15, offset: 64211},
													name: "ImageBlock",
												},
												&actionExpr{
													pos: position{line: 1632, col: 18, offset: 58455},
													run: (*parser).callonSidebarBlockRawContent211,
													expr: &seqExpr{
														pos: position{line: 1632, col: 18, offset: 58455},
														exprs: []interface{}{
															&choiceExpr{
																pos: position{line: 1632, col: 19, offset: 58456},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1632, col: 19, offset: 58456},
																		val:        "***",
																		ignoreCase: false,
																		want:       "\"***\"",
																	},
																	&litMatcher{
																		pos:        position{line: 1632, col: 27, offset: 58464},
																		val:        "* * *",
																		ignoreCase: false,
																		want:       "\"* * *\"",
																	},
																	&litMatcher{
																		pos:        position{line: 1632, col: 37, offset: 58474},
																		val:        "---",
																		ignoreCase: false,
																		want:       "\"---\"",
																	},
																	&litMatcher{
																		pos:        position{line: 1632, col: 45, offset: 58482},
																		val:        "- - -",
																		ignoreCase: false,
																		want:       "\"- - -\"",
																	},
																	&litMatcher{
																		pos:        position{line: 1632, col: 55, offset: 58492},
																		val:        "___",
																		ignoreCase: false,
																		want:       "\"___\"",
																	},
																	&litMatcher{
																		pos:        position{line: 1632, col: 63, offset: 58500},
																		val:        "_ _ _",
																		ignoreCase: false,
																		want:       "\"_ _ _\"",
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1807, col: 15, offset: 64264},
													name: "OrderedListItem",
												},
												&ruleRefExpr{
													pos:  position{line: 1808, col: 15, offset: 64295},
													name: "UnorderedListItem",
												},
												&ruleRefExpr{
													pos:  position{line: 1809, col: 15, offset: 64328},
													name: "ContinuedListItemElement",
												},
												&actionExpr{
													pos: position{line: 1835, col: 16, offset: 65237},
													run: (*parser).callonSidebarBlockRawContent228,
													expr: &seqExpr{
														pos: position{line: 1835, col: 16, offset: 65237},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1841, col: 30, offset: 65538},
																val:        "```",
																ignoreCase: false,
																want:       "\"```\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1841, col: 36, offset: 65544},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonSidebarBlockRawContent234,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1835, col: 42, offset: 65263},
																label: "content",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1845, col: 26, offset: 65634},
																	expr: &actionExpr{
																		pos: position{line: 1845, col: 27, offset: 65635},
																		run: (*parser).callonSidebarBlockRawContent243,
																		expr: &seqExpr{
																			pos: position{line: 1845, col: 27, offset: 65635},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 1845, col: 27, offset: 65635},
																					expr: &choiceExpr{
																						pos: position{line: 1843, col: 28, offset: 65583},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1843, col: 29, offset: 65584},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1843, col: 29, offset: 65584},
																										val:        "```",
																										ignoreCase: false,
																										want:       "\"```\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1843, col: 35, offset: 65590},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent252,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1845, col: 52, offset: 65660},
																					label: "line",
																					expr: &actionExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						run: (*parser).callonSidebarBlockRawContent262,
																						expr: &seqExpr{
																							pos: position{line: 42, col: 12, offset: 1077},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 42, col: 17, offset: 1082},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 42, col: 26, offset: 1091},
																										run: (*parser).callonSidebarBlockRawContent268,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 42, col: 26, offset: 1091},
																											expr: &charClassMatcher{
																												pos:        position{line: 42, col: 26, offset: 1091},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1843, col: 28, offset: 65583},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1843, col: 29, offset: 65584},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1843, col: 29, offset: 65584},
																				val:        "```",
																				ignoreCase: false,
																				want:       "\"```\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1843, col: 35, offset: 65590},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonSidebarBlockRawContent282,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1852, col: 17, offset: 65916},
													run: (*parser).callonSidebarBlockRawContent291,
													expr: &seqExpr{
														pos: position{line: 1852, col: 17, offset: 65916},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1858, col: 31, offset: 66169},
																val:        "----",
																ignoreCase: false,
																want:       "\"----\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1858, col: 38, offset: 66176},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonSidebarBlockRawContent297,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1852, col: 44, offset: 65943},
																label: "content",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1862, col: 27, offset: 66269},
																	expr: &actionExpr{
																		pos: position{line: 1862, col: 28, offset: 66270},
																		run: (*parser).callonSidebarBlockRawContent306,
																		expr: &seqExpr{
																			pos: position{line: 1862, col: 28, offset: 66270},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 1862, col: 28, offset: 66270},
																					expr: &choiceExpr{
																						pos: position{line: 1860, col: 29, offset: 66216},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1860, col: 30, offset: 66217},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1860, col: 30, offset: 66217},
																										val:        "----",
																										ignoreCase: false,
																										want:       "\"----\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1860, col: 37, offset: 66224},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent315,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1862, col: 54, offset: 66296},
																					label: "line",
																					expr: &actionExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						run: (*parser).callonSidebarBlockRawContent325,
																						expr: &seqExpr{
																							pos: position{line: 42, col: 12, offset: 1077},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 42, col: 17, offset: 1082},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 42, col: 26, offset: 1091},
																										run: (*parser).callonSidebarBlockRawContent331,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 42, col: 26, offset: 1091},
																											expr: &charClassMatcher{
																												pos:        position{line: 42, col: 26, offset: 1091},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1860, col: 29, offset: 66216},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1860, col: 30, offset: 66217},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1860, col: 30, offset: 66217},
																				val:        "----",
																				ignoreCase: false,
																				want:       "\"----\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1860, col: 37, offset: 66224},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonSidebarBlockRawContent345,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1870, col: 5, offset: 66553},
													run: (*parser).callonSidebarBlockRawContent354,
													expr: &seqExpr{
														pos: position{line: 1870, col: 5, offset: 66553},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 1870, col: 5, offset: 66553},
																run: (*parser).callonSidebarBlockRawContent356,
															},
															&litMatcher{
																pos:        position{line: 1738, col: 29, offset: 62027},
																val:        "____",
																ignoreCase: false,
																want:       "\"____\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1738, col: 36, offset: 62034},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonSidebarBlockRawContent361,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1874, col: 30, offset: 66758},
																label: "content",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1878, col: 25, offset: 66936},
																	expr: &actionExpr{
																		pos: position{line: 1878, col: 26, offset: 66937},
																		run: (*parser).callonSidebarBlockRawContent370,
																		expr: &seqExpr{
																			pos: position{line: 1878, col: 26, offset: 66937},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 1878, col: 26, offset: 66937},
																					expr: &choiceExpr{
																						pos: position{line: 1740, col: 27, offset: 62097},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1740, col: 28, offset: 62098},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1740, col: 28, offset: 62098},
																										val:        "____",
																										ignoreCase: false,
																										want:       "\"____\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1740, col: 35, offset: 62105},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent379,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1878, col: 50, offset: 66961},
																					label: "line",
																					expr: &actionExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						run: (*parser).callonSidebarBlockRawContent389,
																						expr: &seqExpr{
																							pos: position{line: 42, col: 12, offset: 1077},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 42, col: 17, offset: 1082},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 42, col: 26, offset: 1091},
																										run: (*parser).callonSidebarBlockRawContent395,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 42, col: 26, offset: 1091},
																											expr: &charClassMatcher{
																												pos:        position{line: 42, col: 26, offset: 1091},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1740, col: 27, offset: 62097},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1740, col: 28, offset: 62098},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1740, col: 28, offset: 62098},
																				val:        "____",
																				ignoreCase: false,
																				want:       "\"____\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1740, col: 35, offset: 62105},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonSidebarBlockRawContent409,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1813, col: 15, offset: 64447},
													name: "ExampleBlock",
												},
												&ruleRefExpr{
													pos:  position{line: 1814, col: 15, offset: 64474},
													name: "QuoteBlock",
												},
												&actionExpr{
													pos: position{line: 1916, col: 22, offset: 68317},
													run: (*parser).callonSidebarBlockRawContent420,
													expr: &seqExpr{
														pos: position{line: 1916, col: 22, offset: 68317},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1916, col: 22, offset: 68317},
																expr: &seqExpr{
																	pos: position{line: 1902, col: 26, offset: 67906},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1902, col: 26, offset: 67906},
																			val:        "////",
																			ignoreCase: false,
																			want:       "\"////\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1902, col: 33, offset: 67913},
																			expr: &choiceExpr{
																				pos: position{line: 2271, col: 10, offset: 79961},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2271, col: 10, offset: 79961},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																					&actionExpr{
																						pos: position{line: 2271, col: 16, offset: 79967},
																						run: (*parser).callonSidebarBlockRawContent428,
																						expr: &litMatcher{
																							pos:        position{line: 2271, col: 16, offset: 79967},
																							val:        "\t",
																							ignoreCase: false,
																							want:       "\"\\t\"",
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2279, col: 8, offset: 80059},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2275, col: 12, offset: 80019},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2275, col: 21, offset: 80028},
																					val:        "[\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&notExpr{
																					pos: position{line: 2277, col: 8, offset: 80048},
																					expr: &anyMatcher{
																						line: 2277, col: 9, offset: 80049,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1916, col: 45, offset: 68340},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
															&labeledExpr{
																pos:   position{line: 1916, col: 50, offset: 68345},
																label: "content",
																expr: &actionExpr{
																	pos: position{line: 1920, col: 29, offset: 68473},
																	run: (*parser).callonSidebarBlockRawContent437,
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 1920, col: 29, offset: 68473},
																		expr: &charClassMatcher{
																			pos:        position{line: 1920, col: 29, offset: 68473},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1885, col: 21, offset: 67225},
													run: (*parser).callonSidebarBlockRawContent445,
													expr: &seqExpr{
														pos: position{line: 1885, col: 21, offset: 67225},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1891, col: 35, offset: 67502},
																val:        "++++",
																ignoreCase: false,
																want:       "\"++++\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1891, col: 42, offset: 67509},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonSidebarBlockRawContent451,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1885, col: 52, offset: 67256},
																label: "content",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1895, col: 31, offset: 67610},
																	expr: &actionExpr{
																		pos: position{line: 1895, col: 32, offset: 67611},
																		run: (*parser).callonSidebarBlockRawContent460,
																		expr: &seqExpr{
																			pos: position{line: 1895, col: 32, offset: 67611},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 1895, col: 32, offset: 67611},
																					expr: &choiceExpr{
																						pos: position{line: 1893, col: 33, offset: 67553},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1893, col: 34, offset: 67554},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1893, col: 34, offset: 67554},
																										val:        "++++",
																										ignoreCase: false,
																										want:       "\"++++\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1893, col: 41, offset: 67561},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent469,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1895, col: 62, offset: 67641},
																					label: "line",
																					expr: &actionExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						run: (*parser).callonSidebarBlockRawContent479,
																						expr: &seqExpr{
																							pos: position{line: 42, col: 12, offset: 1077},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 42, col: 17, offset: 1082},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 42, col: 26, offset: 1091},
																										run: (*parser).callonSidebarBlockRawContent485,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 42, col: 26, offset: 1091},
																											expr: &charClassMatcher{
																												pos:        position{line: 42, col: 26, offset: 1091},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1893, col: 33, offset: 67553},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1893, col: 34, offset: 67554},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1893, col: 34, offset: 67554},
																				val:        "++++",
																				ignoreCase: false,
																				want:       "\"++++\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1893, col: 41, offset: 67561},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonSidebarBlockRawContent499,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1817, col: 15, offset: 64562},
													name: "Table",
												},
												&actionExpr{
													pos: position{line: 1908, col: 17, offset: 68045},
													run: (*parser).callonSidebarBlockRawContent509,
													expr: &seqExpr{
														pos: position{line: 1908, col: 17, offset: 68045},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1904, col: 31, offset: 67955},
																val:        "////",
																ignoreCase: false,
																want:       "\"////\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1904, col: 38, offset: 67962},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonSidebarBlockRawContent515,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2279, col: 8, offset: 80059},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1908, col: 44, offset: 68072},
																label: "content",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1912, col: 27, offset: 68225},
																	expr: &actionExpr{
																		pos: position{line: 1912, col: 28, offset: 68226},
																		run: (*parser).callonSidebarBlockRawContent524,
																		expr: &seqExpr{
																			pos: position{line: 1912, col: 28, offset: 68226},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 1912, col: 28, offset: 68226},
																					expr: &choiceExpr{
																						pos: position{line: 1906, col: 29, offset: 68002},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1906, col: 30, offset: 68003},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1906, col: 30, offset: 68003},
																										val:        "////",
																										ignoreCase: false,
																										want:       "\"////\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1906, col: 37, offset: 68010},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent533,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1912, col: 54, offset: 68252},
																					label: "line",
																					expr: &actionExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						run: (*parser).callonSidebarBlockRawContent543,
																						expr: &seqExpr{
																							pos: position{line: 42, col: 12, offset: 1077},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 42, col: 17, offset: 1082},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 42, col: 26, offset: 1091},
																										run: (*parser).callonSidebarBlockRawContent549,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 42, col: 26, offset: 1091},
																											expr: &charClassMatcher{
																												pos:        position{line: 42, col: 26, offset: 1091},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1906, col: 29, offset: 68002},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1906, col: 30, offset: 68003},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1906, col: 30, offset: 68003},
																				val:        "////",
																				ignoreCase: false,
																				want:       "\"////\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1906, col: 37, offset: 68010},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonSidebarBlockRawContent563,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2116, col: 5, offset: 74964},
													run: (*parser).callonSidebarBlockRawContent572,
													expr: &seqExpr{
														pos: position{line: 2116, col: 5, offset: 74964},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 2116, col: 5, offset: 74964},
																run: (*parser).callonSidebarBlockRawContent574,
															},
															&labeledExpr{
																pos:   position{line: 2120, col: 5, offset: 75117},
																label: "lines",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2120, col: 11, offset: 75123},
																	expr: &actionExpr{
																		pos: position{line: 2128, col: 25, offset: 75365},
																		run: (*parser).callonSidebarBlockRawContent577,
																		expr: &seqExpr{
																			pos: position{line: 2128, col: 25, offset: 75365},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 2128, col: 25, offset: 75365},
																					expr: &actionExpr{
																						pos: position{line: 2161, col: 14, offset: 76486},
																						run: (*parser).callonSidebarBlockRawContent580,
																						expr: &seqExpr{
																							pos: position{line: 2161, col: 14, offset: 76486},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 2161, col: 14, offset: 76486},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2161, col: 19, offset: 76491},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonSidebarBlockRawContent588,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2128, col: 36, offset: 75376},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 2128, col: 45, offset: 75385},
																						run: (*parser).callonSidebarBlockRawContent596,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2128, col: 45, offset: 75385},
																							expr: &charClassMatcher{
																								pos:        position{line: 2128, col: 45, offset: 75385},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2279, col: 8, offset: 80059},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2275, col: 12, offset: 80019},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2275, col: 21, offset: 80028},
																							val:        "[\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2080, col: 31, offset: 73460},
													run: (*parser).callonSidebarBlockRawContent604,
													expr: &labeledExpr{
														pos:   position{line: 2080, col: 31, offset: 73460},
														label: "lines",
														expr: &actionExpr{
															pos: position{line: 2086, col: 5, offset: 73756},
															run: (*parser).callonSidebarBlockRawContent606,
															expr: &seqExpr{
																pos: position{line: 2086, col: 5, offset: 73756},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 2086, col: 5, offset: 73756},
																		label: "firstLine",
																		expr: &actionExpr{
																			pos: position{line: 2091, col: 35, offset: 73958},
																			run: (*parser).callonSidebarBlockRawContent609,
																			expr: &seqExpr{
																				pos: position{line: 2091, col: 35, offset: 73958},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 2091, col: 35, offset: 73958},
																						label: "line",
																						expr: &actionExpr{
																							pos: position{line: 2091, col: 41, offset: 73964},
																							run: (*parser).callonSidebarBlockRawContent612,
																							expr: &seqExpr{
																								pos: position{line: 2091, col: 41, offset: 73964},
																								exprs: []interface{}{
																									&oneOrMoreExpr{
																										pos: position{line: 2091, col: 41, offset: 73964},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent617,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 2091, col: 48, offset: 73971},
																										expr: &charClassMatcher{
																											pos:        position{line: 2091, col: 48, offset: 73971},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2279, col: 8, offset: 80059},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2275, col: 12, offset: 80019},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2275, col: 21, offset: 80028},
																								val:        "[\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&notExpr{
																								pos: position{line: 2277, col: 8, offset: 80048},
																								expr: &anyMatcher{
																									line: 2277, col: 9, offset: 80049,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2087, col: 5, offset: 73803},
																		label: "otherLines",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 2087, col: 16, offset: 73814},
																			expr: &actionExpr{
																				pos: position{line: 2128, col: 25, offset: 75365},
																				run: (*parser).callonSidebarBlockRawContent628,
																				expr: &seqExpr{
																					pos: position{line: 2128, col: 25, offset: 75365},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 2128, col: 25, offset: 75365},
																							expr: &actionExpr{
																								pos: position{line: 2161, col: 14, offset: 76486},
																								run: (*parser).callonSidebarBlockRawContent631,
																								expr: &seqExpr{
																									pos: position{line: 2161, col: 14, offset: 76486},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 2161, col: 14, offset: 76486},
																											expr: &notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 2161, col: 19, offset: 76491},
																											expr: &choiceExpr{
																												pos: position{line: 2271, col: 10, offset: 79961},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2271, col: 10, offset: 79961},
																														val:        " ",
																														ignoreCase: false,
																														want:       "\" \"",
																													},
																													&actionExpr{
																														pos: position{line: 2271, col: 16, offset: 79967},
																														run: (*parser).callonSidebarBlockRawContent639,
																														expr: &litMatcher{
																															pos:        position{line: 2271, col: 16, offset: 79967},
																															val:        "\t",
																															ignoreCase: false,
																															want:       "\"\\t\"",
																														},
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2279, col: 8, offset: 80059},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2275, col: 12, offset: 80019},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2275, col: 21, offset: 80028},
																													val:        "[\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&notExpr{
																													pos: position{line: 2277, col: 8, offset: 80048},
																													expr: &anyMatcher{
																														line: 2277, col: 9, offset: 80049,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 2128, col: 36, offset: 75376},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2128, col: 45, offset: 75385},
																								run: (*parser).callonSidebarBlockRawContent647,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2128, col: 45, offset: 75385},
																									expr: &charClassMatcher{
																										pos:        position{line: 2128, col: 45, offset: 75385},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2098, col: 39, offset: 74215},
													run: (*parser).callonSidebarBlockRawContent655,
													expr: &seqExpr{
														pos: position{line: 2098, col: 39, offset: 74215},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2077, col: 26, offset: 73358},
																val:        "....",
																ignoreCase: false,
																want:       "\"....\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2098, col: 61, offset: 74237},
																expr: &choiceExpr{
																	pos: position{line: 2271, col: 10, offset: 79961},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2271, col: 10, offset: 79961},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonSidebarBlockRawContent661,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2275, col: 12, offset: 80019},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2275, col: 12, offset: 80019},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2275, col: 21, offset: 80028},
																		val:        "[\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 2098, col: 76, offset: 74252},
																label: "lines",
																expr: &actionExpr{
																	pos: position{line: 2103, col: 44, offset: 74559},
																	run: (*parser).callonSidebarBlockRawContent667,
																	expr: &labeledExpr{
																		pos:   position{line: 2103, col: 44, offset: 74559},
																		label: "lines",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 2103, col: 50, offset: 74565},
																			expr: &actionExpr{
																				pos: position{line: 2108, col: 5, offset: 74705},
																				run: (*parser).callonSidebarBlockRawContent670,
																				expr: &seqExpr{
																					pos: position{line: 2108, col: 5, offset: 74705},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 2108, col: 5, offset: 74705},
																							label: "line",
																							expr: &actionExpr{
																								pos: position{line: 2108, col: 11, offset: 74711},
																								run: (*parser).callonSidebarBlockRawContent673,
																								expr: &seqExpr{
																									pos: position{line: 2108, col: 11, offset: 74711},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 2108, col: 11, offset: 74711},
																											expr: &litMatcher{
																												pos:        position{line: 2077, col: 26, offset: 73358},
																												val:        "....",
																												ignoreCase: false,
																												want:       "\"....\"",
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 2108, col: 34, offset: 74734},
																											expr: &charClassMatcher{
																												pos:        position{line: 2108, col: 34, offset: 74734},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2098, col: 125, offset: 74301},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2098, col: 126, offset: 74302},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2077, col: 26, offset: 73358},
																				val:        "....",
																				ignoreCase: false,
																				want:       "\"....\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2098, col: 148, offset: 74324},
																				expr: &choiceExpr{
																					pos: position{line: 2271, col: 10, offset: 79961},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2271, col: 10, offset: 79961},
																							val:        " ",
																							ignoreCase: false,
																							want:       "\" \"",
																						},
																						&actionExpr{
																							pos: position{line: 2271, col: 16, offset: 79967},
																							run: (*parser).callonSidebarBlockRawContent690,
																							expr: &litMatcher{
																								pos:        position{line: 2271, col: 16, offset: 79967},
																								val:        "\t",
																								ignoreCase: false,
																								want:       "\"\\t\"",
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2279, col: 8, offset: 80059},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2275, col: 12, offset: 80019},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2275, col: 21, offset: 80028},
																						val:        "[\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&notExpr{
																						pos: position{line: 2277, col: 8, offset: 80048},
																						expr: &anyMatcher{
																							line: 2277, col: 9, offset: 80049,
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2277, col: 8, offset: 80048},
																		expr: &anyMatcher{
																			line: 2277, col: 9, offset: 80049,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 879, col: 6, offset: 28334},
													run: (*parser).callonSidebarBlockRawContent699,
													expr: &seqExpr{
														pos: position{line: 879, col: 6, offset: 28334},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 879, col: 6, offset: 28334},
																label: "t",
																expr: &choiceExpr{
																	pos: position{line: 856, col: 19, offset: 27732},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 856, col: 19, offset: 27732},
																			run: (*parser).callonSidebarBlockRawContent703,
																			expr: &litMatcher{
																				pos:        position{line: 856, col: 19, offset: 27732},
																				val:        "TIP",
																				ignoreCase: false,
																				want:       "\"TIP\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 858, col: 5, offset: 27770},
																			run: (*parser).callonSidebarBlockRawContent705,
																			expr: &litMatcher{
																				pos:        position{line: 858, col: 5, offset: 27770},
																				val:        "NOTE",
																				ignoreCase: false,
																				want:       "\"NOTE\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 860, col: 5, offset: 27810},
																			run: (*parser).callonSidebarBlockRawContent707,
																			expr: &litMatcher{
																				pos:        position{line: 860, col: 5, offset: 27810},
																				val:        "IMPORTANT",
																				ignoreCase: false,
																				want:       "\"IMPORTANT\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 862, col: 5, offset: 27860},
																			run: (*parser).callonSidebarBlockRawContent709,
																			expr: &litMatcher{
																				pos:        position{line: 862, col: 5, offset: 27860},
																				val:        "WARNING",
																				ignoreCase: false,
																				want:       "\"WARNING\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 864, col: 5, offset: 27906},
																			run: (*parser).callonSidebarBlockRawContent711,
																			expr: &litMatcher{
																				pos:        position{line: 864, col: 5, offset: 27906},
																				val:        "CAUTION",
																				ignoreCase: false,
																				want:       "\"CAUTION\"",
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 879, col: 25, offset: 28353},
																val:        ": ",
																ignoreCase: false,
																want:       "\": \"",
															},
															&labeledExpr{
																pos:   position{line: 879, col: 30, offset: 28358},
																label: "lines",
																expr: &oneOrMoreExpr{
																	pos: position{line: 879, col: 36, offset: 28364},
																	expr: &choiceExpr{
																		pos: position{line: 879, col: 37, offset: 28365},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1916, col: 22, offset: 68317},
																				run: (*parser).callonSidebarBlockRawContent717,
																				expr: &seqExpr{
																					pos: position{line: 1916, col: 22, offset: 68317},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 1916, col: 22, offset: 68317},
																							expr: &seqExpr{
																								pos: position{line: 1902, col: 26, offset: 67906},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1902, col: 26, offset: 67906},
																										val:        "////",
																										ignoreCase: false,
																										want:       "\"////\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1902, col: 33, offset: 67913},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent725,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1916, col: 45, offset: 68340},
																							val:        "//",
																							ignoreCase: false,
																							want:       "\"//\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 1916, col: 50, offset: 68345},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 1920, col: 29, offset: 68473},
																								run: (*parser).callonSidebarBlockRawContent734,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 1920, col: 29, offset: 68473},
																									expr: &charClassMatcher{
																										pos:        position{line: 1920, col: 29, offset: 68473},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 903, col: 21, offset: 29486},
																				run: (*parser).callonSidebarBlockRawContent742,
																				expr: &seqExpr{
																					pos: position{line: 903, col: 21, offset: 29486},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 903, col: 21, offset: 29486},
																							expr: &choiceExpr{
																								pos: position{line: 1654, col: 19, offset: 59095},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 1654, col: 19, offset: 59095},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 1654, col: 19, offset: 59095},
																												expr: &charClassMatcher{
																													pos:        position{line: 2213, col: 13, offset: 78116},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 2077, col: 26, offset: 73358},
																												val:        "....",
																												ignoreCase: false,
																												want:       "\"....\"",
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1839, col: 25, offset: 65436},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1839, col: 25, offset: 65436},
																												val:        "```",
																												ignoreCase: false,
																												want:       "\"```\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1839, col: 31, offset: 65442},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonSidebarBlockRawContent755,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1856, col: 26, offset: 66120},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1856, col: 26, offset: 66120},
																												val:        "----",
																												ignoreCase: false,
																												want:       "\"----\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1856, col: 33, offset: 66127},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonSidebarBlockRawContent767,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1674, col: 26, offset: 59888},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1674, col: 26, offset: 59888},
																												val:        "====",
																												ignoreCase: false,
																												want:       "\"====\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1674, col: 33, offset: 59895},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonSidebarBlockRawContent779,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1902, col: 26, offset: 67906},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1902, col: 26, offset: 67906},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1902, col: 33, offset: 67913},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonSidebarBlockRawContent791,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1736, col: 24, offset: 61955},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1736, col: 24, offset: 61955},
																												val:        "____",
																												ignoreCase: false,
																												want:       "\"____\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1736, col: 31, offset: 61962},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonSidebarBlockRawContent803,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1788, col: 26, offset: 63733},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1788, col: 26, offset: 63733},
																												val:        "****",
																												ignoreCase: false,
																												want:       "\"****\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1788, col: 33, offset: 63740},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonSidebarBlockRawContent815,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 1889, col: 30, offset: 67449},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1889, col: 30, offset: 67449},
																												val:        "++++",
																												ignoreCase: false,
																												want:       "\"++++\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1889, col: 37, offset: 67456},
																												expr: &choiceExpr{
																													pos: position{line: 2271, col: 10, offset: 79961},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2271, col: 10, offset: 79961},
																															val:        " ",
																															ignoreCase: false,
																															want:       "\" \"",
																														},
																														&actionExpr{
																															pos: position{line: 2271, col: 16, offset: 79967},
																															run: (*parser).callonSidebarBlockRawContent827,
																															expr: &litMatcher{
																																pos:        position{line: 2271, col: 16, offset: 79967},
																																val:        "\t",
																																ignoreCase: false,
																																want:       "\"\\t\"",
																															},
																														},
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2279, col: 8, offset: 80059},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2275, col: 12, offset: 80019},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2275, col: 21, offset: 80028},
																														val:        "[\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&notExpr{
																														pos: position{line: 2277, col: 8, offset: 80048},
																														expr: &anyMatcher{
																															line: 2277, col: 9, offset: 80049,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 904, col: 5, offset: 29507},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 914, col: 28, offset: 29807},
																								run: (*parser).callonSidebarBlockRawContent835,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 914, col: 28, offset: 29807},
																									expr: &charClassMatcher{
																										pos:        position{line: 914, col: 28, offset: 29807},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2279, col: 8, offset: 80059},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2275, col: 12, offset: 80019},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2275, col: 21, offset: 80028},
																									val:        "[\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&notExpr{
																									pos: position{line: 2277, col: 8, offset: 80048},
																									expr: &anyMatcher{
																										line: 2277, col: 9, offset: 80049,
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 904, col: 43, offset: 29545},
																							run: (*parser).callonSidebarBlockRawContent843,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 884, col: 5, offset: 28625},
													run: (*parser).callonSidebarBlockRawContent844,
													expr: &seqExpr{
														pos: position{line: 884, col: 5, offset: 28625},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 884, col: 5, offset: 28625},
																val:        "> ",
																ignoreCase: false,
																want:       "\"> \"",
															},
															&labeledExpr{
																pos:   position{line: 884, col: 10, offset: 28630},
																label: "content",
																expr: &oneOrMoreExpr{
																	pos: position{line: 899, col: 33, offset: 29398},
																	expr: &actionExpr{
																		pos: position{line: 899, col: 34, offset: 29399},
																		run: (*parser).callonSidebarBlockRawContent849,
																		expr: &seqExpr{
																			pos: position{line: 899, col: 34, offset: 29399},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 899, col: 34, offset: 29399},
																					expr: &actionExpr{
																						pos: position{line: 2161, col: 14, offset: 76486},
																						run: (*parser).callonSidebarBlockRawContent852,
																						expr: &seqExpr{
																							pos: position{line: 2161, col: 14, offset: 76486},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 2161, col: 14, offset: 76486},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2161, col: 19, offset: 76491},
																									expr: &choiceExpr{
																										pos: position{line: 2271, col: 10, offset: 79961},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2271, col: 10, offset: 79961},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																											&actionExpr{
																												pos: position{line: 2271, col: 16, offset: 79967},
																												run: (*parser).callonSidebarBlockRawContent860,
																												expr: &litMatcher{
																													pos:        position{line: 2271, col: 16, offset: 79967},
																													val:        "\t",
																													ignoreCase: false,
																													want:       "\"\\t\"",
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 899, col: 45, offset: 29410},
																					expr: &litMatcher{
																						pos:        position{line: 899, col: 45, offset: 29410},
																						val:        "> ",
																						ignoreCase: false,
																						want:       "\"> \"",
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 899, col: 51, offset: 29416},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 42, col: 12, offset: 1077},
																						run: (*parser).callonSidebarBlockRawContent870,
																						expr: &seqExpr{
																							pos: position{line: 42, col: 12, offset: 1077},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 42, col: 12, offset: 1077},
																									expr: &notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 42, col: 17, offset: 1082},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 42, col: 26, offset: 1091},
																										run: (*parser).callonSidebarBlockRawContent876,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 42, col: 26, offset: 1091},
																											expr: &charClassMatcher{
																												pos:        position{line: 42, col: 26, offset: 1091},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2279, col: 8, offset: 80059},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2275, col: 12, offset: 80019},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2275, col: 21, offset: 80028},
																											val:        "[\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&notExpr{
																											pos: position{line: 2277, col: 8, offset: 80048},
																											expr: &anyMatcher{
																												line: 2277, col: 9, offset: 80049,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 888, col: 5, offset: 28831},
													run: (*parser).callonSidebarBlockRawContent884,
													expr: &seqExpr{
														pos: position{line: 888, col: 5, offset: 28831},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 888, col: 5, offset: 28831},
																run: (*parser).callonSidebarBlockRawContent886,
															},
															&labeledExpr{
																pos:   position{line: 891, col: 7, offset: 29028},
																label: "content",
																expr: &oneOrMoreExpr{
																	pos: position{line: 891, col: 15, offset: 29036},
																	expr: &actionExpr{
																		pos: position{line: 903, col: 21, offset: 29486},
																		run: (*parser).callonSidebarBlockRawContent889,
																		expr: &seqExpr{
																			pos: position{line: 903, col: 21, offset: 29486},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 903, col: 21, offset: 29486},
																					expr: &choiceExpr{
																						pos: position{line: 1654, col: 19, offset: 59095},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1654, col: 19, offset: 59095},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 1654, col: 19, offset: 59095},
																										expr: &charClassMatcher{
																											pos:        position{line: 2213, col: 13, offset: 78116},
																											val:        "[0-9\\pL]",
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2077, col: 26, offset: 73358},
																										val:        "....",
																										ignoreCase: false,
																										want:       "\"....\"",
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1839, col: 25, offset: 65436},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1839, col: 25, offset: 65436},
																										val:        "```",
																										ignoreCase: false,
																										want:       "\"```\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1839, col: 31, offset: 65442},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent902,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1856, col: 26, offset: 66120},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1856, col: 26, offset: 66120},
																										val:        "----",
																										ignoreCase: false,
																										want:       "\"----\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1856, col: 33, offset: 66127},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent914,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1674, col: 26, offset: 59888},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1674, col: 26, offset: 59888},
																										val:        "====",
																										ignoreCase: false,
																										want:       "\"====\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1674, col: 33, offset: 59895},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent926,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1902, col: 26, offset: 67906},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1902, col: 26, offset: 67906},
																										val:        "////",
																										ignoreCase: false,
																										want:       "\"////\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1902, col: 33, offset: 67913},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent938,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1736, col: 24, offset: 61955},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1736, col: 24, offset: 61955},
																										val:        "____",
																										ignoreCase: false,
																										want:       "\"____\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1736, col: 31, offset: 61962},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent950,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1788, col: 26, offset: 63733},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1788, col: 26, offset: 63733},
																										val:        "****",
																										ignoreCase: false,
																										want:       "\"****\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1788, col: 33, offset: 63740},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent962,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1889, col: 30, offset: 67449},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1889, col: 30, offset: 67449},
																										val:        "++++",
																										ignoreCase: false,
																										want:       "\"++++\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1889, col: 37, offset: 67456},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent974,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 904, col: 5, offset: 29507},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 914, col: 28, offset: 29807},
																						run: (*parser).callonSidebarBlockRawContent982,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 914, col: 28, offset: 29807},
																							expr: &charClassMatcher{
																								pos:        position{line: 914, col: 28, offset: 29807},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2279, col: 8, offset: 80059},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2275, col: 12, offset: 80019},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2275, col: 21, offset: 80028},
																							val:        "[\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 904, col: 43, offset: 29545},
																					run: (*parser).callonSidebarBlockRawContent990,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 895, col: 5, offset: 29222},
													run: (*parser).callonSidebarBlockRawContent991,
													expr: &labeledExpr{
														pos:   position{line: 895, col: 5, offset: 29222},
														label: "lines",
														expr: &oneOrMoreExpr{
															pos: position{line: 895, col: 11, offset: 29228},
															expr: &choiceExpr{
																pos: position{line: 895, col: 12, offset: 29229},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 1916, col: 22, offset: 68317},
																		run: (*parser).callonSidebarBlockRawContent995,
																		expr: &seqExpr{
																			pos: position{line: 1916, col: 22, offset: 68317},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 1916, col: 22, offset: 68317},
																					expr: &seqExpr{
																						pos: position{line: 1902, col: 26, offset: 67906},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 1902, col: 26, offset: 67906},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 1902, col: 33, offset: 67913},
																								expr: &choiceExpr{
																									pos: position{line: 2271, col: 10, offset: 79961},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2271, col: 10, offset: 79961},
																											val:        " ",
																											ignoreCase: false,
																											want:       "\" \"",
																										},
																										&actionExpr{
																											pos: position{line: 2271, col: 16, offset: 79967},
																											run: (*parser).callonSidebarBlockRawContent1003,
																											expr: &litMatcher{
																												pos:        position{line: 2271, col: 16, offset: 79967},
																												val:        "\t",
																												ignoreCase: false,
																												want:       "\"\\t\"",
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2279, col: 8, offset: 80059},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2275, col: 12, offset: 80019},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2275, col: 21, offset: 80028},
																										val:        "[\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&notExpr{
																										pos: position{line: 2277, col: 8, offset: 80048},
																										expr: &anyMatcher{
																											line: 2277, col: 9, offset: 80049,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1916, col: 45, offset: 68340},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1916, col: 50, offset: 68345},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 1920, col: 29, offset: 68473},
																						run: (*parser).callonSidebarBlockRawContent1012,
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 1920, col: 29, offset: 68473},
																							expr: &charClassMatcher{
																								pos:        position{line: 1920, col: 29, offset: 68473},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2279, col: 8, offset: 80059},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2275, col: 12, offset: 80019},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2275, col: 21, offset: 80028},
																							val:        "[\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 903, col: 21, offset: 29486},
																		run: (*parser).callonSidebarBlockRawContent1020,
																		expr: &seqExpr{
																			pos: position{line: 903, col: 21, offset: 29486},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 903, col: 21, offset: 29486},
																					expr: &choiceExpr{
																						pos: position{line: 1654, col: 19, offset: 59095},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 1654, col: 19, offset: 59095},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 1654, col: 19, offset: 59095},
																										expr: &charClassMatcher{
																											pos:        position{line: 2213, col: 13, offset: 78116},
																											val:        "[0-9\\pL]",
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2077, col: 26, offset: 73358},
																										val:        "....",
																										ignoreCase: false,
																										want:       "\"....\"",
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1839, col: 25, offset: 65436},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1839, col: 25, offset: 65436},
																										val:        "```",
																										ignoreCase: false,
																										want:       "\"```\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1839, col: 31, offset: 65442},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent1033,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1856, col: 26, offset: 66120},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1856, col: 26, offset: 66120},
																										val:        "----",
																										ignoreCase: false,
																										want:       "\"----\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1856, col: 33, offset: 66127},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent1045,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1674, col: 26, offset: 59888},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1674, col: 26, offset: 59888},
																										val:        "====",
																										ignoreCase: false,
																										want:       "\"====\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1674, col: 33, offset: 59895},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent1057,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1902, col: 26, offset: 67906},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1902, col: 26, offset: 67906},
																										val:        "////",
																										ignoreCase: false,
																										want:       "\"////\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1902, col: 33, offset: 67913},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent1069,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1736, col: 24, offset: 61955},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1736, col: 24, offset: 61955},
																										val:        "____",
																										ignoreCase: false,
																										want:       "\"____\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1736, col: 31, offset: 61962},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent1081,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1788, col: 26, offset: 63733},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1788, col: 26, offset: 63733},
																										val:        "****",
																										ignoreCase: false,
																										want:       "\"****\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1788, col: 33, offset: 63740},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent1093,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 1889, col: 30, offset: 67449},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1889, col: 30, offset: 67449},
																										val:        "++++",
																										ignoreCase: false,
																										want:       "\"++++\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1889, col: 37, offset: 67456},
																										expr: &choiceExpr{
																											pos: position{line: 2271, col: 10, offset: 79961},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2271, col: 10, offset: 79961},
																													val:        " ",
																													ignoreCase: false,
																													want:       "\" \"",
																												},
																												&actionExpr{
																													pos: position{line: 2271, col: 16, offset: 79967},
																													run: (*parser).callonSidebarBlockRawContent1105,
																													expr: &litMatcher{
																														pos:        position{line: 2271, col: 16, offset: 79967},
																														val:        "\t",
																														ignoreCase: false,
																														want:       "\"\\t\"",
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2279, col: 8, offset: 80059},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2275, col: 12, offset: 80019},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2275, col: 21, offset: 80028},
																												val:        "[\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&notExpr{
																												pos: position{line: 2277, col: 8, offset: 80048},
																												expr: &anyMatcher{
																													line: 2277, col: 9, offset: 80049,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 904, col: 5, offset: 29507},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 914, col: 28, offset: 29807},
																						run: (*parser).callonSidebarBlockRawContent1113,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 914, col: 28, offset: 29807},
																							expr: &charClassMatcher{
																								pos:        position{line: 914, col: 28, offset: 29807},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2279, col: 8, offset: 80059},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2275, col: 12, offset: 80019},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2275, col: 21, offset: 80028},
																							val:        "[\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&notExpr{
																							pos: position{line: 2277, col: 8, offset: 80048},
																							expr: &anyMatcher{
																								line: 2277, col: 9, offset: 80049,
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 904, col: 43, offset: 29545},
																					run: (*parser).callonSidebarBlockRawContent1121,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1821, col: 15, offset: 64664},
													run: (*parser).callonSidebarBlockRawContent1122,
													expr: &choiceExpr{
														pos: position{line: 1792, col: 29, offset: 63829},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 1792, col: 30, offset: 63830},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1792, col: 30, offset: 63830},
																		val:        "****",
																		ignoreCase: false,
																		want:       "\"****\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1792, col: 37, offset: 63837},
																		expr: &choiceExpr{
																			pos: position{line: 2271, col: 10, offset: 79961},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2271, col: 10, offset: 79961},
																					val:        " ",
																					ignoreCase: false,
																					want:       "\" \"",
																				},
																				&actionExpr{
																					pos: position{line: 2271, col: 16, offset: 79967},
																					run: (*parser).callonSidebarBlockRawContent1129,
																					expr: &litMatcher{
																						pos:        position{line: 2271, col: 16, offset: 79967},
																						val:        "\t",
																						ignoreCase: false,
																						want:       "\"\\t\"",
																					},
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2279, col: 8, offset: 80059},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2275, col: 12, offset: 80019},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2275, col: 21, offset: 80028},
																				val:        "[\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&notExpr{
																				pos: position{line: 2277, col: 8, offset: 80048},
																				expr: &anyMatcher{
																					line: 2277, col: 9, offset: 80049,
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2277, col: 8, offset: 80048},
																expr: &anyMatcher{
																	line: 2277, col: 9, offset: 80049,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMacros",
			pos:  position{line: 1928, col: 1, offset: 68762},
			expr: &choiceExpr{
				pos: position{line: 1929, col: 5, offset: 68783},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1929, col: 5, offset: 68783},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1930, col: 7, offset: 68800},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1931, col: 7, offset: 68819},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1932, col: 7, offset: 68831},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1933, col: 7, offset: 68856},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 1934, col: 7, offset: 68878},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1935, col: 7, offset: 68900},
						name: "InlineUserMacro",
					},
					&actionExpr{
						pos: position{line: 237, col: 20, offset: 7607},
						run: (*parser).callonInlineMacros9,
						expr: &seqExpr{
							pos: position{line: 237, col: 20, offset: 7607},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 237, col: 20, offset: 7607},
									val:        "[[",
									ignoreCase: false,
									want:       "\"[[\"",
								},
								&labeledExpr{
									pos:   position{line: 237, col: 25, offset: 7612},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 2259, col: 7, offset: 79709},
										run: (*parser).callonInlineMacros13,
										expr: &oneOrMoreExpr{
											pos: position{line: 2259, col: 7, offset: 79709},
											expr: &charClassMatcher{
												pos:        position{line: 2259, col: 7, offset: 79709},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 237, col: 33, offset: 7620},
									val:        "]]",
									ignoreCase: false,
									want:       "\"]]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 237, col: 38, offset: 7625},
									expr: &choiceExpr{
										pos: position{line: 2271, col: 10, offset: 79961},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2271, col: 10, offset: 79961},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2271, col: 16, offset: 79967},
												run: (*parser).callonInlineMacros20,
												expr: &litMatcher{
													pos:        position{line: 2271, col: 16, offset: 79967},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2147, col: 23, offset: 75975},
						run: (*parser).callonInlineMacros22,
						expr: &seqExpr{
							pos: position{line: 2147, col: 23, offset: 75975},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2147, col: 23, offset: 75975},
									val:        "(((",
									ignoreCase: false,
									want:       "\"(((\"",
								},
								&labeledExpr{
									pos:   position{line: 2147, col: 29, offset: 75981},
									label: "term1",
									expr: &actionExpr{
										pos: position{line: 2154, col: 30, offset: 76312},
										run: (*parser).callonInlineMacros26,
										expr: &oneOrMoreExpr{
											pos: position{line: 2154, col: 30, offset: 76312},
											expr: &choiceExpr{
												pos: position{line: 2154, col: 31, offset: 76313},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2213, col: 13, offset: 78116},
														val:        "[ 0-9\\pL]",
														chars:      []rune{' '},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonInlineMacros30,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2148, col: 5, offset: 76020},
									label: "term2",
									expr: &zeroOrOneExpr{
										pos: position{line: 2148, col: 11, offset: 76026},
										expr: &actionExpr{
											pos: position{line: 2148, col: 12, offset: 76027},
											run: (*parser).callonInlineMacros34,
											expr: &seqExpr{
												pos: position{line: 2148, col: 12, offset: 76027},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 2148, col: 12, offset: 76027},
														expr: &choiceExpr{
															pos: position{line: 2271, col: 10, offset: 79961},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2271, col: 10, offset: 79961},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2271, col: 16, offset: 79967},
																	run: (*parser).callonInlineMacros39,
																	expr: &litMatcher{
																		pos:        position{line: 2271, col: 16, offset: 79967},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 2148, col: 19, offset: 76034},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 2148, col: 23, offset: 76038},
														expr: &choiceExpr{
															pos: position{line: 2271, col: 10, offset: 79961},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2271, col: 10, offset: 79961},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2271, col: 16, offset: 79967},
																	run: (*parser).callonInlineMacros45,
																	expr: &litMatcher{
																		pos:        position{line: 2271, col: 16, offset: 79967},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 2148, col: 30, offset: 76045},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2154, col: 30, offset: 76312},
															run: (*parser).callonInlineMacros48,
															expr: &oneOrMoreExpr{
																pos: position{line: 2154, col: 30, offset: 76312},
																expr: &choiceExpr{
																	pos: position{line: 2154, col: 31, offset: 76313},
																	alternatives: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2213, col: 13, offset: 78116},
																			val:        "[ 0-9\\pL]",
																			chars:      []rune{' '},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonInlineMacros52,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2149, col: 5, offset: 76112},
									label: "term3",
									expr: &zeroOrOneExpr{
										pos: position{line: 2149, col: 11, offset: 76118},
										expr: &actionExpr{
											pos: position{line: 2149, col: 12, offset: 76119},
											run: (*parser).callonInlineMacros56,
											expr: &seqExpr{
												pos: position{line: 2149, col: 12, offset: 76119},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 2149, col: 12, offset: 76119},
														expr: &choiceExpr{
															pos: position{line: 2271, col: 10, offset: 79961},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2271, col: 10, offset: 79961},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2271, col: 16, offset: 79967},
																	run: (*parser).callonInlineMacros61,
																	expr: &litMatcher{
																		pos:        position{line: 2271, col: 16, offset: 79967},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 2149, col: 19, offset: 76126},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 2149, col: 23, offset: 76130},
														expr: &choiceExpr{
															pos: position{line: 2271, col: 10, offset: 79961},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2271, col: 10, offset: 79961},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2271, col: 16, offset: 79967},
																	run: (*parser).callonInlineMacros67,
																	expr: &litMatcher{
																		pos:        position{line: 2271, col: 16, offset: 79967},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 2149, col: 30, offset: 76137},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2154, col: 30, offset: 76312},
															run: (*parser).callonInlineMacros70,
															expr: &oneOrMoreExpr{
																pos: position{line: 2154, col: 30, offset: 76312},
																expr: &choiceExpr{
																	pos: position{line: 2154, col: 31, offset: 76313},
																	alternatives: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2213, col: 13, offset: 78116},
																			val:        "[ 0-9\\pL]",
																			chars:      []rune{' '},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&actionExpr{
																			pos: position{line: 2271, col: 16, offset: 79967},
																			run: (*parser).callonInlineMacros74,
																			expr: &litMatcher{
																				pos:        position{line: 2271, col: 16, offset: 79967},
																				val:        "\t",
																				ignoreCase: false,
																				want:       "\"\\t\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2150, col: 5, offset: 76204},
									val:        ")))",
									ignoreCase: false,
									want:       "\")))\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1938, col: 7, offset: 68970},
						name: "IndexTerm",
					},
				},
			},
		},
		{
			name: "InlinePassthroughSubs",
			pos:  position{line: 1945, col: 1, offset: 69208},
			expr: &seqExpr{
				pos: position{line: 1946, col: 5, offset: 69238},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1946, col: 5, offset: 69238},
						expr: &choiceExpr{
							pos: position{line: 1946, col: 6, offset: 69239},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1946, col: 6, offset: 69239},
									name: "InlinePassthrough",
								},
								&actionExpr{
									pos: position{line: 2232, col: 5, offset: 78844},
									run: (*parser).callonInlinePassthroughSubs5,
									expr: &seqExpr{
										pos: position{line: 2232, col: 5, offset: 78844},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2232, col: 5, offset: 78844},
												expr: &charClassMatcher{
													pos:        position{line: 2232, col: 5, offset: 78844},
													val:        "[,?!;0-9\\pL]",
													chars:      []rune{',', '?', '!', ';'},
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2232, col: 19, offset: 78858},
												expr: &choiceExpr{
													pos: position{line: 2232, col: 21, offset: 78860},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2232, col: 21, offset: 78860},
															val:        "[\\r\\n ]",
															chars:      []rune{'\r', '\n', ' '},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2225, col: 5, offset: 78563},
									run: (*parser).callonInlinePassthroughSubs14,
									expr: &seqExpr{
										pos: position{line: 2225, col: 5, offset: 78563},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2225, col: 5, offset: 78563},
												expr: &charClassMatcher{
													pos:        position{line: 2225, col: 5, offset: 78563},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2225, col: 15, offset: 78573},
												expr: &choiceExpr{
													pos: position{line: 2225, col: 17, offset: 78575},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2225, col: 17, offset: 78575},
															val:        "[\\r\\n ,]]",
															chars:      []rune{'\r', '\n', ' ', ',', ']'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2227, col: 9, offset: 78658},
									run: (*parser).callonInlinePassthroughSubs23,
									expr: &seqExpr{
										pos: position{line: 2227, col: 9, offset: 78658},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 9, offset: 78658},
												expr: &charClassMatcher{
													pos:        position{line: 2227, col: 9, offset: 78658},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 19, offset: 78668},
												expr: &seqExpr{
													pos: position{line: 2227, col: 20, offset: 78669},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2227, col: 20, offset: 78669},
															val:        "[=*_`]",
															chars:      []rune{'=', '*', '_', '`'},
															ignoreCase: false,
															inverted:   false,
														},
														&oneOrMoreExpr{
															pos: position{line: 2227, col: 27, offset: 78676},
															expr: &charClassMatcher{
																pos:        position{line: 2227, col: 27, offset: 78676},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1940, col: 23, offset: 69003},
									run: (*parser).callonInlinePassthroughSubs32,
									expr: &seqExpr{
										pos: position{line: 1940, col: 23, offset: 69003},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1940, col: 23, offset: 69003},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1940, col: 32, offset: 69012},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1940, col: 37, offset: 69017},
													run: (*parser).callonInlinePassthroughSubs36,
													expr: &oneOrMoreExpr{
														pos: position{line: 1940, col: 37, offset: 69017},
														expr: &charClassMatcher{
															pos:        position{line: 1940, col: 37, offset: 69017},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1940, col: 76, offset: 69056},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1949, col: 7, offset: 69346},
									expr: &choiceExpr{
										pos: position{line: 2271, col: 10, offset: 79961},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2271, col: 10, offset: 79961},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2271, col: 16, offset: 79967},
												run: (*parser).callonInlinePassthroughSubs43,
												expr: &litMatcher{
													pos:        position{line: 2271, col: 16, offset: 79967},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2237, col: 12, offset: 79050},
									run: (*parser).callonInlinePassthroughSubs45,
									expr: &charClassMatcher{
										pos:        position{line: 2237, col: 12, offset: 79050},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
					&notExpr{
						pos: position{line: 2277, col: 8, offset: 80048},
						expr: &anyMatcher{
							line: 2277, col: 9, offset: 80049,
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacterSubs",
			pos:  position{line: 1954, col: 1, offset: 69505},
			expr: &seqExpr{
				pos: position{line: 1955, col: 5, offset: 69534},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1955, col: 5, offset: 69534},
						expr: &choiceExpr{
							pos: position{line: 1955, col: 6, offset: 69535},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2232, col: 5, offset: 78844},
									run: (*parser).callonSpecialCharacterSubs4,
									expr: &seqExpr{
										pos: position{line: 2232, col: 5, offset: 78844},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2232, col: 5, offset: 78844},
												expr: &charClassMatcher{
													pos:        position{line: 2232, col: 5, offset: 78844},
													val:        "[,?!;0-9\\pL]",
													chars:      []rune{',', '?', '!', ';'},
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2232, col: 19, offset: 78858},
												expr: &choiceExpr{
													pos: position{line: 2232, col: 21, offset: 78860},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2232, col: 21, offset: 78860},
															val:        "[\\r\\n ]",
															chars:      []rune{'\r', '\n', ' '},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2225, col: 5, offset: 78563},
									run: (*parser).callonSpecialCharacterSubs13,
									expr: &seqExpr{
										pos: position{line: 2225, col: 5, offset: 78563},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2225, col: 5, offset: 78563},
												expr: &charClassMatcher{
													pos:        position{line: 2225, col: 5, offset: 78563},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2225, col: 15, offset: 78573},
												expr: &choiceExpr{
													pos: position{line: 2225, col: 17, offset: 78575},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2225, col: 17, offset: 78575},
															val:        "[\\r\\n ,]]",
															chars:      []rune{'\r', '\n', ' ', ',', ']'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2227, col: 9, offset: 78658},
									run: (*parser).callonSpecialCharacterSubs22,
									expr: &seqExpr{
										pos: position{line: 2227, col: 9, offset: 78658},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 9, offset: 78658},
												expr: &charClassMatcher{
													pos:        position{line: 2227, col: 9, offset: 78658},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 19, offset: 78668},
												expr: &seqExpr{
													pos: position{line: 2227, col: 20, offset: 78669},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2227, col: 20, offset: 78669},
															val:        "[=*_`]",
															chars:      []rune{'=', '*', '_', '`'},
															ignoreCase: false,
															inverted:   false,
														},
														&oneOrMoreExpr{
															pos: position{line: 2227, col: 27, offset: 78676},
															expr: &charClassMatcher{
																pos:        position{line: 2227, col: 27, offset: 78676},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2203, col: 21, offset: 77750},
									run: (*parser).callonSpecialCharacterSubs31,
									expr: &choiceExpr{
										pos: position{line: 1538, col: 27, offset: 54613},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1538, col: 27, offset: 54613},
												run: (*parser).callonSpecialCharacterSubs33,
												expr: &seqExpr{
													pos: position{line: 1538, col: 27, offset: 54613},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1538, col: 27, offset: 54613},
															val:        "<<",
															ignoreCase: false,
															want:       "\"<<\"",
														},
														&labeledExpr{
															pos:   position{line: 1538, col: 32, offset: 54618},
															label: "id",
															expr: &actionExpr{
																pos: position{line: 2259, col: 7, offset: 79709},
																run: (*parser).callonSpecialCharacterSubs37,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2259, col: 7, offset: 79709},
																	expr: &charClassMatcher{
																		pos:        position{line: 2259, col: 7, offset: 79709},
																		val:        "[^[]<>,]",
																		chars:      []rune{'[', ']', '<', '>', ','},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1538, col: 40, offset: 54626},
															expr: &choiceExpr{
																pos: position{line: 2271, col: 10, offset: 79961},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2271, col: 10, offset: 79961},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2271, col: 16, offset: 79967},
																		run: (*parser).callonSpecialCharacterSubs43,
																		expr: &litMatcher{
																			pos:        position{line: 2271, col: 16, offset: 79967},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1538, col: 47, offset: 54633},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&labeledExpr{
															pos:   position{line: 1538, col: 51, offset: 54637},
															label: "label",
															expr: &oneOrMoreExpr{
																pos: position{line: 1548, col: 24, offset: 55025},
																expr: &choiceExpr{
																	pos: position{line: 1549, col: 5, offset: 55031},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 1549, col: 6, offset: 55032},
																			run: (*parser).callonSpecialCharacterSubs49,
																			expr: &seqExpr{
																				pos: position{line: 1549, col: 6, offset: 55032},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 1549, col: 6, offset: 55032},
																						val:        "[0-9\\pL]",
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 1549, col: 14, offset: 55040},
																						expr: &charClassMatcher{
																							pos:        position{line: 1549, col: 14, offset: 55040},
																							val:        "[^\\r\\n{<>]",
																							chars:      []rune{'\r', '\n', '{', '<', '>'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 214, col: 12, offset: 6782},
																			run: (*parser).callonSpecialCharacterSubs54,
																			expr: &seqExpr{
																				pos: position{line: 214, col: 12, offset: 6782},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 214, col: 12, offset: 6782},
																						val:        "{",
																						ignoreCase: false,
																						want:       "\"{\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 214, col: 16, offset: 6786},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 190, col: 18, offset: 6118},
																							run: (*parser).callonSpecialCharacterSubs58,
																							expr: &seqExpr{
																								pos: position{line: 190, col: 18, offset: 6118},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 190, col: 18, offset: 6118},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 190, col: 28, offset: 6128},
																										expr: &charClassMatcher{
																											pos:        position{line: 190, col: 29, offset: 6129},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 214, col: 35, offset: 6805},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1553, col: 6, offset: 55250},
																			run: (*parser).callonSpecialCharacterSubs64,
																			expr: &litMatcher{
																				pos:        position{line: 1553, col: 6, offset: 55250},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1538, col: 79, offset: 54665},
															val:        ">>",
															ignoreCase: false,
															want:       "\">>\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1540, col: 5, offset: 54730},
												run: (*parser).callonSpecialCharacterSubs67,
												expr: &seqExpr{
													pos: position{line: 1540, col: 5, offset: 54730},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1540, col: 5, offset: 54730},
															val:        "<<",
															ignoreCase: false,
															want:       "\"<<\"",
														},
														&labeledExpr{
															pos:   position{line: 1540, col: 10, offset: 54735},
															label: "id",
															expr: &actionExpr{
																pos: position{line: 2259, col: 7, offset: 79709},
																run: (*parser).callonSpecialCharacterSubs71,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2259, col: 7, offset: 79709},
																	expr: &charClassMatcher{
																		pos:        position{line: 2259, col: 7, offset: 79709},
																		val:        "[^[]<>,]",
																		chars:      []rune{'[', ']', '<', '>', ','},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1540, col: 18, offset: 54743},
															val:        ">>",
															ignoreCase: false,
															want:       "\">>\"",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2206, col: 9, offset: 77913},
									run: (*parser).callonSpecialCharacterSubs75,
									expr: &charClassMatcher{
										pos:        position{line: 2206, col: 10, offset: 77914},
										val:        "[<>&]",
										chars:      []rune{'<', '>', '&'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&actionExpr{
									pos: position{line: 1940, col: 23, offset: 69003},
									run: (*parser).callonSpecialCharacterSubs77,
									expr: &seqExpr{
										pos: position{line: 1940, col: 23, offset: 69003},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1940, col: 23, offset: 69003},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1940, col: 32, offset: 69012},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1940, col: 37, offset: 69017},
													run: (*parser).callonSpecialCharacterSubs81,
													expr: &oneOrMoreExpr{
														pos: position{line: 1940, col: 37, offset: 69017},
														expr: &charClassMatcher{
															pos:        position{line: 1940, col: 37, offset: 69017},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1940, col: 76, offset: 69056},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1958, col: 7, offset: 69640},
									expr: &choiceExpr{
										pos: position{line: 2271, col: 10, offset: 79961},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2271, col: 10, offset: 79961},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2271, col: 16, offset: 79967},
												run: (*parser).callonSpecialCharacterSubs88,
												expr: &litMatcher{
													pos:        position{line: 2271, col: 16, offset: 79967},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2237, col: 12, offset: 79050},
									run: (*parser).callonSpecialCharacterSubs90,
									expr: &charClassMatcher{
										pos:        position{line: 2237, col: 12, offset: 79050},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
					&notExpr{
						pos: position{line: 2277, col: 8, offset: 80048},
						expr: &anyMatcher{
							line: 2277, col: 9, offset: 80049,
						},
					},
				},
			},
		},
		{
			name: "QuotedTextSubs",
			pos:  position{line: 1963, col: 1, offset: 69731},
			expr: &seqExpr{
				pos: position{line: 1964, col: 5, offset: 69754},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1964, col: 5, offset: 69754},
						expr: &choiceExpr{
							pos: position{line: 1964, col: 6, offset: 69755},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2232, col: 5, offset: 78844},
									run: (*parser).callonQuotedTextSubs4,
									expr: &seqExpr{
										pos: position{line: 2232, col: 5, offset: 78844},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2232, col: 5, offset: 78844},
												expr: &charClassMatcher{
													pos:        position{line: 2232, col: 5, offset: 78844},
													val:        "[,?!;0-9\\pL]",
													chars:      []rune{',', '?', '!', ';'},
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2232, col: 19, offset: 78858},
												expr: &choiceExpr{
													pos: position{line: 2232, col: 21, offset: 78860},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2232, col: 21, offset: 78860},
															val:        "[\\r\\n ]",
															chars:      []rune{'\r', '\n', ' '},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2225, col: 5, offset: 78563},
									run: (*parser).callonQuotedTextSubs13,
									expr: &seqExpr{
										pos: position{line: 2225, col: 5, offset: 78563},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2225, col: 5, offset: 78563},
												expr: &charClassMatcher{
													pos:        position{line: 2225, col: 5, offset: 78563},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2225, col: 15, offset: 78573},
												expr: &choiceExpr{
													pos: position{line: 2225, col: 17, offset: 78575},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2225, col: 17, offset: 78575},
															val:        "[\\r\\n ,]]",
															chars:      []rune{'\r', '\n', ' ', ',', ']'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2227, col: 9, offset: 78658},
									run: (*parser).callonQuotedTextSubs22,
									expr: &seqExpr{
										pos: position{line: 2227, col: 9, offset: 78658},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 9, offset: 78658},
												expr: &charClassMatcher{
													pos:        position{line: 2227, col: 9, offset: 78658},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 19, offset: 78668},
												expr: &seqExpr{
													pos: position{line: 2227, col: 20, offset: 78669},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2227, col: 20, offset: 78669},
															val:        "[=*_`]",
															chars:      []rune{'=', '*', '_', '`'},
															ignoreCase: false,
															inverted:   false,
														},
														&oneOrMoreExpr{
															pos: position{line: 2227, col: 27, offset: 78676},
															expr: &charClassMatcher{
																pos:        position{line: 2227, col: 27, offset: 78676},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1965, col: 7, offset: 69902},
									expr: &choiceExpr{
										pos: position{line: 2271, col: 10, offset: 79961},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2271, col: 10, offset: 79961},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2271, col: 16, offset: 79967},
												run: (*parser).callonQuotedTextSubs34,
												expr: &litMatcher{
													pos:        position{line: 2271, col: 16, offset: 79967},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1966, col: 7, offset: 69916},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1967, col: 7, offset: 69934},
									name: "QuotedString",
								},
								&actionExpr{
									pos: position{line: 1940, col: 23, offset: 69003},
									run: (*parser).callonQuotedTextSubs38,
									expr: &seqExpr{
										pos: position{line: 1940, col: 23, offset: 69003},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1940, col: 23, offset: 69003},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1940, col: 32, offset: 69012},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1940, col: 37, offset: 69017},
													run: (*parser).callonQuotedTextSubs42,
													expr: &oneOrMoreExpr{
														pos: position{line: 1940, col: 37, offset: 69017},
														expr: &charClassMatcher{
															pos:        position{line: 1940, col: 37, offset: 69017},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1940, col: 76, offset: 69056},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2237, col: 12, offset: 79050},
									run: (*parser).callonQuotedTextSubs46,
									expr: &charClassMatcher{
										pos:        position{line: 2237, col: 12, offset: 79050},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
					&notExpr{
						pos: position{line: 2277, col: 8, offset: 80048},
						expr: &anyMatcher{
							line: 2277, col: 9, offset: 80049,
						},
					},
				},
			},
		},
		{
			name: "AttributeSubs",
			pos:  position{line: 1973, col: 1, offset: 70060},
			expr: &seqExpr{
				pos: position{line: 1974, col: 5, offset: 70082},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1974, col: 5, offset: 70082},
						expr: &choiceExpr{
							pos: position{line: 1974, col: 6, offset: 70083},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2232, col: 5, offset: 78844},
									run: (*parser).callonAttributeSubs4,
									expr: &seqExpr{
										pos: position{line: 2232, col: 5, offset: 78844},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2232, col: 5, offset: 78844},
												expr: &charClassMatcher{
													pos:        position{line: 2232, col: 5, offset: 78844},
													val:        "[,?!;0-9\\pL]",
													chars:      []rune{',', '?', '!', ';'},
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2232, col: 19, offset: 78858},
												expr: &choiceExpr{
													pos: position{line: 2232, col: 21, offset: 78860},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2232, col: 21, offset: 78860},
															val:        "[\\r\\n ]",
															chars:      []rune{'\r', '\n', ' '},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2225, col: 5, offset: 78563},
									run: (*parser).callonAttributeSubs13,
									expr: &seqExpr{
										pos: position{line: 2225, col: 5, offset: 78563},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2225, col: 5, offset: 78563},
												expr: &charClassMatcher{
													pos:        position{line: 2225, col: 5, offset: 78563},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2225, col: 15, offset: 78573},
												expr: &choiceExpr{
													pos: position{line: 2225, col: 17, offset: 78575},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2225, col: 17, offset: 78575},
															val:        "[\\r\\n ,]]",
															chars:      []rune{'\r', '\n', ' ', ',', ']'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2227, col: 9, offset: 78658},
									run: (*parser).callonAttributeSubs22,
									expr: &seqExpr{
										pos: position{line: 2227, col: 9, offset: 78658},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 9, offset: 78658},
												expr: &charClassMatcher{
													pos:        position{line: 2227, col: 9, offset: 78658},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 19, offset: 78668},
												expr: &seqExpr{
													pos: position{line: 2227, col: 20, offset: 78669},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2227, col: 20, offset: 78669},
															val:        "[=*_`]",
															chars:      []rune{'=', '*', '_', '`'},
															ignoreCase: false,
															inverted:   false,
														},
														&oneOrMoreExpr{
															pos: position{line: 2227, col: 27, offset: 78676},
															expr: &charClassMatcher{
																pos:        position{line: 2227, col: 27, offset: 78676},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1975, col: 7, offset: 70140},
									expr: &choiceExpr{
										pos: position{line: 2271, col: 10, offset: 79961},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2271, col: 10, offset: 79961},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2271, col: 16, offset: 79967},
												run: (*parser).callonAttributeSubs34,
												expr: &litMatcher{
													pos:        position{line: 2271, col: 16, offset: 79967},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 221, col: 25, offset: 7126},
									run: (*parser).callonAttributeSubs36,
									expr: &seqExpr{
										pos: position{line: 221, col: 25, offset: 7126},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 221, col: 25, offset: 7126},
												val:        "{counter:",
												ignoreCase: false,
												want:       "\"{counter:\"",
											},
											&labeledExpr{
												pos:   position{line: 221, col: 37, offset: 7138},
												label: "name",
												expr: &actionExpr{
													pos: position{line: 190, col: 18, offset: 6118},
													run: (*parser).callonAttributeSubs40,
													expr: &seqExpr{
														pos: position{line: 190, col: 18, offset: 6118},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 190, col: 18, offset: 6118},
																val:        "[_0-9\\pL]",
																chars:      []rune{'_'},
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 190, col: 28, offset: 6128},
																expr: &charClassMatcher{
																	pos:        position{line: 190, col: 29, offset: 6129},
																	val:        "[-0-9\\pL]",
																	chars:      []rune{'-'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 221, col: 56, offset: 7157},
												label: "start",
												expr: &zeroOrOneExpr{
													pos: position{line: 221, col: 62, offset: 7163},
													expr: &actionExpr{
														pos: position{line: 229, col: 17, offset: 7426},
														run: (*parser).callonAttributeSubs47,
														expr: &seqExpr{
															pos: position{line: 229, col: 17, offset: 7426},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 229, col: 17, offset: 7426},
																	val:        ":",
																	ignoreCase: false,
																	want:       "\":\"",
																},
																&labeledExpr{
																	pos:   position{line: 229, col: 21, offset: 7430},
																	label: "start",
																	expr: &choiceExpr{
																		pos: position{line: 229, col: 28, offset: 7437},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 229, col: 28, offset: 7437},
																				run: (*parser).callonAttributeSubs52,
																				expr: &charClassMatcher{
																					pos:        position{line: 229, col: 28, offset: 7437},
																					val:        "[A-Za-z]",
																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 231, col: 9, offset: 7491},
																				run: (*parser).callonAttributeSubs54,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 231, col: 9, offset: 7491},
																					expr: &charClassMatcher{
																						pos:        position{line: 231, col: 9, offset: 7491},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 221, col: 78, offset: 7179},
												val:        "}",
												ignoreCase: false,
												want:       "\"}\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 225, col: 25, offset: 7281},
									run: (*parser).callonAttributeSubs58,
									expr: &seqExpr{
										pos: position{line: 225, col: 25, offset: 7281},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 225, col: 25, offset: 7281},
												val:        "{counter2:",
												ignoreCase: false,
												want:       "\"{counter2:\"",
											},
											&labeledExpr{
												pos:   position{line: 225, col: 38, offset: 7294},
												label: "name",
												expr: &actionExpr{
													pos: position{line: 190, col: 18, offset: 6118},
													run: (*parser).callonAttributeSubs62,
													expr: &seqExpr{
														pos: position{line: 190, col: 18, offset: 6118},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 190, col: 18, offset: 6118},
																val:        "[_0-9\\pL]",
																chars:      []rune{'_'},
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 190, col: 28, offset: 6128},
																expr: &charClassMatcher{
																	pos:        position{line: 190, col: 29, offset: 6129},
																	val:        "[-0-9\\pL]",
																	chars:      []rune{'-'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 225, col: 57, offset: 7313},
												label: "start",
												expr: &zeroOrOneExpr{
													pos: position{line: 225, col: 63, offset: 7319},
													expr: &actionExpr{
														pos: position{line: 229, col: 17, offset: 7426},
														run: (*parser).callonAttributeSubs69,
														expr: &seqExpr{
															pos: position{line: 229, col: 17, offset: 7426},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 229, col: 17, offset: 7426},
																	val:        ":",
																	ignoreCase: false,
																	want:       "\":\"",
																},
																&labeledExpr{
																	pos:   position{line: 229, col: 21, offset: 7430},
																	label: "start",
																	expr: &choiceExpr{
																		pos: position{line: 229, col: 28, offset: 7437},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 229, col: 28, offset: 7437},
																				run: (*parser).callonAttributeSubs74,
																				expr: &charClassMatcher{
																					pos:        position{line: 229, col: 28, offset: 7437},
																					val:        "[A-Za-z]",
																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 231, col: 9, offset: 7491},
																				run: (*parser).callonAttributeSubs76,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 231, col: 9, offset: 7491},
																					expr: &charClassMatcher{
																						pos:        position{line: 231, col: 9, offset: 7491},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 225, col: 79, offset: 7335},
												val:        "}",
												ignoreCase: false,
												want:       "\"}\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 214, col: 12, offset: 6782},
									run: (*parser).callonAttributeSubs80,
									expr: &seqExpr{
										pos: position{line: 214, col: 12, offset: 6782},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 214, col: 12, offset: 6782},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
											&labeledExpr{
												pos:   position{line: 214, col: 16, offset: 6786},
												label: "name",
												expr: &actionExpr{
													pos: position{line: 190, col: 18, offset: 6118},
													run: (*parser).callonAttributeSubs84,
													expr: &seqExpr{
														pos: position{line: 190, col: 18, offset: 6118},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 190, col: 18, offset: 6118},
																val:        "[_0-9\\pL]",
																chars:      []rune{'_'},
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 190, col: 28, offset: 6128},
																expr: &charClassMatcher{
																	pos:        position{line: 190, col: 29, offset: 6129},
																	val:        "[-0-9\\pL]",
																	chars:      []rune{'-'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 214, col: 35, offset: 6805},
												val:        "}",
												ignoreCase: false,
												want:       "\"}\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1940, col: 23, offset: 69003},
									run: (*parser).callonAttributeSubs90,
									expr: &seqExpr{
										pos: position{line: 1940, col: 23, offset: 69003},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1940, col: 23, offset: 69003},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1940, col: 32, offset: 69012},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1940, col: 37, offset: 69017},
													run: (*parser).callonAttributeSubs94,
													expr: &oneOrMoreExpr{
														pos: position{line: 1940, col: 37, offset: 69017},
														expr: &charClassMatcher{
															pos:        position{line: 1940, col: 37, offset: 69017},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1940, col: 76, offset: 69056},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2237, col: 12, offset: 79050},
									run: (*parser).callonAttributeSubs98,
									expr: &charClassMatcher{
										pos:        position{line: 2237, col: 12, offset: 79050},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
					&notExpr{
						pos: position{line: 2277, col: 8, offset: 80048},
						expr: &anyMatcher{
							line: 2277, col: 9, offset: 80049,
						},
					},
				},
			},
		},
		{
			name: "InlineMacroSubs",
			pos:  position{line: 1982, col: 1, offset: 70285},
			expr: &seqExpr{
				pos: position{line: 1983, col: 5, offset: 70309},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1983, col: 5, offset: 70309},
						expr: &choiceExpr{
							pos: position{line: 1983, col: 6, offset: 70310},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2232, col: 5, offset: 78844},
									run: (*parser).callonInlineMacroSubs4,
									expr: &seqExpr{
										pos: position{line: 2232, col: 5, offset: 78844},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2232, col: 5, offset: 78844},
												expr: &charClassMatcher{
													pos:        position{line: 2232, col: 5, offset: 78844},
													val:        "[,?!;0-9\\pL]",
													chars:      []rune{',', '?', '!', ';'},
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2232, col: 19, offset: 78858},
												expr: &choiceExpr{
													pos: position{line: 2232, col: 21, offset: 78860},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2232, col: 21, offset: 78860},
															val:        "[\\r\\n ]",
															chars:      []rune{'\r', '\n', ' '},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2225, col: 5, offset: 78563},
									run: (*parser).callonInlineMacroSubs13,
									expr: &seqExpr{
										pos: position{line: 2225, col: 5, offset: 78563},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2225, col: 5, offset: 78563},
												expr: &charClassMatcher{
													pos:        position{line: 2225, col: 5, offset: 78563},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2225, col: 15, offset: 78573},
												expr: &choiceExpr{
													pos: position{line: 2225, col: 17, offset: 78575},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2225, col: 17, offset: 78575},
															val:        "[\\r\\n ,]]",
															chars:      []rune{'\r', '\n', ' ', ',', ']'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2227, col: 9, offset: 78658},
									run: (*parser).callonInlineMacroSubs22,
									expr: &seqExpr{
										pos: position{line: 2227, col: 9, offset: 78658},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 9, offset: 78658},
												expr: &charClassMatcher{
													pos:        position{line: 2227, col: 9, offset: 78658},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 19, offset: 78668},
												expr: &seqExpr{
													pos: position{line: 2227, col: 20, offset: 78669},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2227, col: 20, offset: 78669},
															val:        "[=*_`]",
															chars:      []rune{'=', '*', '_', '`'},
															ignoreCase: false,
															inverted:   false,
														},
														&oneOrMoreExpr{
															pos: position{line: 2227, col: 27, offset: 78676},
															expr: &charClassMatcher{
																pos:        position{line: 2227, col: 27, offset: 78676},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1984, col: 7, offset: 70367},
									expr: &choiceExpr{
										pos: position{line: 2271, col: 10, offset: 79961},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2271, col: 10, offset: 79961},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2271, col: 16, offset: 79967},
												run: (*parser).callonInlineMacroSubs34,
												expr: &litMatcher{
													pos:        position{line: 2271, col: 16, offset: 79967},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1985, col: 7, offset: 70381},
									name: "InlineMacros",
								},
								&actionExpr{
									pos: position{line: 1940, col: 23, offset: 69003},
									run: (*parser).callonInlineMacroSubs37,
									expr: &seqExpr{
										pos: position{line: 1940, col: 23, offset: 69003},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1940, col: 23, offset: 69003},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1940, col: 32, offset: 69012},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1940, col: 37, offset: 69017},
													run: (*parser).callonInlineMacroSubs41,
													expr: &oneOrMoreExpr{
														pos: position{line: 1940, col: 37, offset: 69017},
														expr: &charClassMatcher{
															pos:        position{line: 1940, col: 37, offset: 69017},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1940, col: 76, offset: 69056},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2237, col: 12, offset: 79050},
									run: (*parser).callonInlineMacroSubs45,
									expr: &charClassMatcher{
										pos:        position{line: 2237, col: 12, offset: 79050},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
					&notExpr{
						pos: position{line: 2277, col: 8, offset: 80048},
						expr: &anyMatcher{
							line: 2277, col: 9, offset: 80049,
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteMacroSubs",
			pos:  position{line: 1991, col: 1, offset: 70529},
			expr: &actionExpr{
				pos: position{line: 1991, col: 27, offset: 70555},
				run: (*parser).callonMarkdownQuoteMacroSubs1,
				expr: &seqExpr{
					pos: position{line: 1991, col: 27, offset: 70555},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1991, col: 27, offset: 70555},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1991, col: 33, offset: 70561},
								expr: &ruleRefExpr{
									pos:  position{line: 1991, col: 34, offset: 70562},
									name: "MarkdownQuoteLine",
								},
							},
						},
						&notExpr{
							pos: position{line: 2277, col: 8, offset: 80048},
							expr: &anyMatcher{
								line: 2277, col: 9, offset: 80049,
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteLine",
			pos:  position{line: 1995, col: 1, offset: 70649},
			expr: &actionExpr{
				pos: position{line: 1996, col: 5, offset: 70675},
				run: (*parser).callonMarkdownQuoteLine1,
				expr: &seqExpr{
					pos: position{line: 1996, col: 5, offset: 70675},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1996, col: 5, offset: 70675},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1996, col: 14, offset: 70684},
								expr: &choiceExpr{
									pos: position{line: 1996, col: 15, offset: 70685},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2232, col: 5, offset: 78844},
											run: (*parser).callonMarkdownQuoteLine6,
											expr: &seqExpr{
												pos: position{line: 2232, col: 5, offset: 78844},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2232, col: 5, offset: 78844},
														expr: &charClassMatcher{
															pos:        position{line: 2232, col: 5, offset: 78844},
															val:        "[,?!;0-9\\pL]",
															chars:      []rune{',', '?', '!', ';'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&andExpr{
														pos: position{line: 2232, col: 19, offset: 78858},
														expr: &choiceExpr{
															pos: position{line: 2232, col: 21, offset: 78860},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2232, col: 21, offset: 78860},
																	val:        "[\\r\\n ]",
																	chars:      []rune{'\r', '\n', ' '},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2277, col: 8, offset: 80048},
																	expr: &anyMatcher{
																		line: 2277, col: 9, offset: 80049,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2225, col: 5, offset: 78563},
											run: (*parser).callonMarkdownQuoteLine15,
											expr: &seqExpr{
												pos: position{line: 2225, col: 5, offset: 78563},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2225, col: 5, offset: 78563},
														expr: &charClassMatcher{
															pos:        position{line: 2225, col: 5, offset: 78563},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&andExpr{
														pos: position{line: 2225, col: 15, offset: 78573},
														expr: &choiceExpr{
															pos: position{line: 2225, col: 17, offset: 78575},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2225, col: 17, offset: 78575},
																	val:        "[\\r\\n ,]]",
																	chars:      []rune{'\r', '\n', ' ', ',', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&notExpr{
																	pos: position{line: 2277, col: 8, offset: 80048},
																	expr: &anyMatcher{
																		line: 2277, col: 9, offset: 80049,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2227, col: 9, offset: 78658},
											run: (*parser).callonMarkdownQuoteLine24,
											expr: &seqExpr{
												pos: position{line: 2227, col: 9, offset: 78658},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 2227, col: 9, offset: 78658},
														expr: &charClassMatcher{
															pos:        position{line: 2227, col: 9, offset: 78658},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 2227, col: 19, offset: 78668},
														expr: &seqExpr{
															pos: position{line: 2227, col: 20, offset: 78669},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2227, col: 20, offset: 78669},
																	val:        "[=*_`]",
																	chars:      []rune{'=', '*', '_', '`'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&oneOrMoreExpr{
																	pos: position{line: 2227, col: 27, offset: 78676},
																	expr: &charClassMatcher{
																		pos:        position{line: 2227, col: 27, offset: 78676},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1997, col: 7, offset: 70742},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonMarkdownQuoteLine36,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1998, col: 7, offset: 70756},
											name: "InlineMacros",
										},
										&actionExpr{
											pos: position{line: 1940, col: 23, offset: 69003},
											run: (*parser).callonMarkdownQuoteLine39,
											expr: &seqExpr{
												pos: position{line: 1940, col: 23, offset: 69003},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1940, col: 23, offset: 69003},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 1940, col: 32, offset: 69012},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 1940, col: 37, offset: 69017},
															run: (*parser).callonMarkdownQuoteLine43,
															expr: &oneOrMoreExpr{
																pos: position{line: 1940, col: 37, offset: 69017},
																expr: &charClassMatcher{
																	pos:        position{line: 1940, col: 37, offset: 69017},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1940, col: 76, offset: 69056},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2237, col: 12, offset: 79050},
											run: (*parser).callonMarkdownQuoteLine47,
											expr: &charClassMatcher{
												pos:        position{line: 2237, col: 12, offset: 79050},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2279, col: 8, offset: 80059},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
								&notExpr{
									pos: position{line: 2277, col: 8, offset: 80048},
									expr: &anyMatcher{
										line: 2277, col: 9, offset: 80049,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 2004, col: 1, offset: 70889},
			expr: &actionExpr{
				pos: position{line: 2004, col: 29, offset: 70917},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 2004, col: 29, offset: 70917},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2004, col: 29, offset: 70917},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 2004, col: 35, offset: 70923},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 2004, col: 43, offset: 70931},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 2004, col: 44, offset: 70932},
									expr: &charClassMatcher{
										pos:        position{line: 2004, col: 44, offset: 70932},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2279, col: 8, offset: 80059},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
								&notExpr{
									pos: position{line: 2277, col: 8, offset: 80048},
									expr: &anyMatcher{
										line: 2277, col: 9, offset: 80049,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReplacementSubs",
			pos:  position{line: 2011, col: 1, offset: 71069},
			expr: &seqExpr{
				pos: position{line: 2012, col: 5, offset: 71093},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 2012, col: 5, offset: 71093},
						expr: &choiceExpr{
							pos: position{line: 2012, col: 6, offset: 71094},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2232, col: 5, offset: 78844},
									run: (*parser).callonReplacementSubs4,
									expr: &seqExpr{
										pos: position{line: 2232, col: 5, offset: 78844},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2232, col: 5, offset: 78844},
												expr: &charClassMatcher{
													pos:        position{line: 2232, col: 5, offset: 78844},
													val:        "[,?!;0-9\\pL]",
													chars:      []rune{',', '?', '!', ';'},
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2232, col: 19, offset: 78858},
												expr: &choiceExpr{
													pos: position{line: 2232, col: 21, offset: 78860},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2232, col: 21, offset: 78860},
															val:        "[\\r\\n ]",
															chars:      []rune{'\r', '\n', ' '},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2225, col: 5, offset: 78563},
									run: (*parser).callonReplacementSubs13,
									expr: &seqExpr{
										pos: position{line: 2225, col: 5, offset: 78563},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2225, col: 5, offset: 78563},
												expr: &charClassMatcher{
													pos:        position{line: 2225, col: 5, offset: 78563},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2225, col: 15, offset: 78573},
												expr: &choiceExpr{
													pos: position{line: 2225, col: 17, offset: 78575},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2225, col: 17, offset: 78575},
															val:        "[\\r\\n ,]]",
															chars:      []rune{'\r', '\n', ' ', ',', ']'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2227, col: 9, offset: 78658},
									run: (*parser).callonReplacementSubs22,
									expr: &seqExpr{
										pos: position{line: 2227, col: 9, offset: 78658},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 9, offset: 78658},
												expr: &charClassMatcher{
													pos:        position{line: 2227, col: 9, offset: 78658},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 19, offset: 78668},
												expr: &seqExpr{
													pos: position{line: 2227, col: 20, offset: 78669},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2227, col: 20, offset: 78669},
															val:        "[=*_`]",
															chars:      []rune{'=', '*', '_', '`'},
															ignoreCase: false,
															inverted:   false,
														},
														&oneOrMoreExpr{
															pos: position{line: 2227, col: 27, offset: 78676},
															expr: &charClassMatcher{
																pos:        position{line: 2227, col: 27, offset: 78676},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2013, col: 7, offset: 71151},
									expr: &choiceExpr{
										pos: position{line: 2271, col: 10, offset: 79961},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2271, col: 10, offset: 79961},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2271, col: 16, offset: 79967},
												run: (*parser).callonReplacementSubs34,
												expr: &litMatcher{
													pos:        position{line: 2271, col: 16, offset: 79967},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2171, col: 15, offset: 76747},
									run: (*parser).callonReplacementSubs36,
									expr: &litMatcher{
										pos:        position{line: 2171, col: 15, offset: 76747},
										val:        "`'",
										ignoreCase: false,
										want:       "\"`'\"",
									},
								},
								&actionExpr{
									pos: position{line: 2177, col: 14, offset: 76854},
									run: (*parser).callonReplacementSubs38,
									expr: &litMatcher{
										pos:        position{line: 2177, col: 14, offset: 76854},
										val:        "(C)",
										ignoreCase: false,
										want:       "\"(C)\"",
									},
								},
								&actionExpr{
									pos: position{line: 2180, col: 14, offset: 76921},
									run: (*parser).callonReplacementSubs40,
									expr: &litMatcher{
										pos:        position{line: 2180, col: 14, offset: 76921},
										val:        "(TM)",
										ignoreCase: false,
										want:       "\"(TM)\"",
									},
								},
								&actionExpr{
									pos: position{line: 2183, col: 15, offset: 76990},
									run: (*parser).callonReplacementSubs42,
									expr: &litMatcher{
										pos:        position{line: 2183, col: 15, offset: 76990},
										val:        "(R)",
										ignoreCase: false,
										want:       "\"(R)\"",
									},
								},
								&actionExpr{
									pos: position{line: 2186, col: 13, offset: 77056},
									run: (*parser).callonReplacementSubs44,
									expr: &litMatcher{
										pos:        position{line: 2186, col: 13, offset: 77056},
										val:        "...",
										ignoreCase: false,
										want:       "\"...\"",
									},
								},
								&actionExpr{
									pos: position{line: 2194, col: 22, offset: 77354},
									run: (*parser).callonReplacementSubs46,
									expr: &seqExpr{
										pos: position{line: 2194, col: 22, offset: 77354},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2213, col: 13, offset: 78116},
												val:        "[0-9\\pL]",
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&litMatcher{
												pos:        position{line: 2194, col: 31, offset: 77363},
												val:        "'",
												ignoreCase: false,
												want:       "\"'\"",
											},
											&andExpr{
												pos: position{line: 2194, col: 35, offset: 77367},
												expr: &charClassMatcher{
													pos:        position{line: 2194, col: 36, offset: 77368},
													val:        "[\\pL]",
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1940, col: 23, offset: 69003},
									run: (*parser).callonReplacementSubs52,
									expr: &seqExpr{
										pos: position{line: 1940, col: 23, offset: 69003},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1940, col: 23, offset: 69003},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1940, col: 32, offset: 69012},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1940, col: 37, offset: 69017},
													run: (*parser).callonReplacementSubs56,
													expr: &oneOrMoreExpr{
														pos: position{line: 1940, col: 37, offset: 69017},
														expr: &charClassMatcher{
															pos:        position{line: 1940, col: 37, offset: 69017},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1940, col: 76, offset: 69056},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2237, col: 12, offset: 79050},
									run: (*parser).callonReplacementSubs60,
									expr: &charClassMatcher{
										pos:        position{line: 2237, col: 12, offset: 79050},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
					&notExpr{
						pos: position{line: 2277, col: 8, offset: 80048},
						expr: &anyMatcher{
							line: 2277, col: 9, offset: 80049,
						},
					},
				},
			},
		},
		{
			name: "PostReplacementSubs",
			pos:  position{line: 2021, col: 1, offset: 71376},
			expr: &seqExpr{
				pos: position{line: 2022, col: 5, offset: 71404},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 2022, col: 5, offset: 71404},
						expr: &choiceExpr{
							pos: position{line: 2022, col: 6, offset: 71405},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2232, col: 5, offset: 78844},
									run: (*parser).callonPostReplacementSubs4,
									expr: &seqExpr{
										pos: position{line: 2232, col: 5, offset: 78844},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2232, col: 5, offset: 78844},
												expr: &charClassMatcher{
													pos:        position{line: 2232, col: 5, offset: 78844},
													val:        "[,?!;0-9\\pL]",
													chars:      []rune{',', '?', '!', ';'},
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2232, col: 19, offset: 78858},
												expr: &choiceExpr{
													pos: position{line: 2232, col: 21, offset: 78860},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2232, col: 21, offset: 78860},
															val:        "[\\r\\n ]",
															chars:      []rune{'\r', '\n', ' '},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2225, col: 5, offset: 78563},
									run: (*parser).callonPostReplacementSubs13,
									expr: &seqExpr{
										pos: position{line: 2225, col: 5, offset: 78563},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2225, col: 5, offset: 78563},
												expr: &charClassMatcher{
													pos:        position{line: 2225, col: 5, offset: 78563},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2225, col: 15, offset: 78573},
												expr: &choiceExpr{
													pos: position{line: 2225, col: 17, offset: 78575},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2225, col: 17, offset: 78575},
															val:        "[\\r\\n ,]]",
															chars:      []rune{'\r', '\n', ' ', ',', ']'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2227, col: 9, offset: 78658},
									run: (*parser).callonPostReplacementSubs22,
									expr: &seqExpr{
										pos: position{line: 2227, col: 9, offset: 78658},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 9, offset: 78658},
												expr: &charClassMatcher{
													pos:        position{line: 2227, col: 9, offset: 78658},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 19, offset: 78668},
												expr: &seqExpr{
													pos: position{line: 2227, col: 20, offset: 78669},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2227, col: 20, offset: 78669},
															val:        "[=*_`]",
															chars:      []rune{'=', '*', '_', '`'},
															ignoreCase: false,
															inverted:   false,
														},
														&oneOrMoreExpr{
															pos: position{line: 2227, col: 27, offset: 78676},
															expr: &charClassMatcher{
																pos:        position{line: 2227, col: 27, offset: 78676},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1940, col: 23, offset: 69003},
									run: (*parser).callonPostReplacementSubs31,
									expr: &seqExpr{
										pos: position{line: 1940, col: 23, offset: 69003},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1940, col: 23, offset: 69003},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1940, col: 32, offset: 69012},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1940, col: 37, offset: 69017},
													run: (*parser).callonPostReplacementSubs35,
													expr: &oneOrMoreExpr{
														pos: position{line: 1940, col: 37, offset: 69017},
														expr: &charClassMatcher{
															pos:        position{line: 1940, col: 37, offset: 69017},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1940, col: 76, offset: 69056},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 995, col: 14, offset: 32701},
									run: (*parser).callonPostReplacementSubs39,
									expr: &seqExpr{
										pos: position{line: 995, col: 14, offset: 32701},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonPostReplacementSubs43,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 995, col: 20, offset: 32707},
												val:        "+",
												ignoreCase: false,
												want:       "\"+\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 995, col: 24, offset: 32711},
												expr: &choiceExpr{
													pos: position{line: 2271, col: 10, offset: 79961},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2271, col: 10, offset: 79961},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
														&actionExpr{
															pos: position{line: 2271, col: 16, offset: 79967},
															run: (*parser).callonPostReplacementSubs49,
															expr: &litMatcher{
																pos:        position{line: 2271, col: 16, offset: 79967},
																val:        "\t",
																ignoreCase: false,
																want:       "\"\\t\"",
															},
														},
													},
												},
											},
											&andExpr{
												pos: position{line: 995, col: 31, offset: 32718},
												expr: &choiceExpr{
													pos: position{line: 2279, col: 8, offset: 80059},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2275, col: 12, offset: 80019},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&charClassMatcher{
															pos:        position{line: 2275, col: 21, offset: 80028},
															val:        "[\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2025, col: 7, offset: 71530},
									expr: &choiceExpr{
										pos: position{line: 2271, col: 10, offset: 79961},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2271, col: 10, offset: 79961},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2271, col: 16, offset: 79967},
												run: (*parser).callonPostReplacementSubs60,
												expr: &litMatcher{
													pos:        position{line: 2271, col: 16, offset: 79967},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2237, col: 12, offset: 79050},
									run: (*parser).callonPostReplacementSubs62,
									expr: &charClassMatcher{
										pos:        position{line: 2237, col: 12, offset: 79050},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
					&notExpr{
						pos: position{line: 2277, col: 8, offset: 80048},
						expr: &anyMatcher{
							line: 2277, col: 9, offset: 80049,
						},
					},
				},
			},
		},
		{
			name: "CalloutSubs",
			pos:  position{line: 2030, col: 1, offset: 71625},
			expr: &seqExpr{
				pos: position{line: 2031, col: 5, offset: 71645},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 2031, col: 5, offset: 71645},
						expr: &choiceExpr{
							pos: position{line: 2031, col: 6, offset: 71646},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2232, col: 5, offset: 78844},
									run: (*parser).callonCalloutSubs4,
									expr: &seqExpr{
										pos: position{line: 2232, col: 5, offset: 78844},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2232, col: 5, offset: 78844},
												expr: &charClassMatcher{
													pos:        position{line: 2232, col: 5, offset: 78844},
													val:        "[,?!;0-9\\pL]",
													chars:      []rune{',', '?', '!', ';'},
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2232, col: 19, offset: 78858},
												expr: &choiceExpr{
													pos: position{line: 2232, col: 21, offset: 78860},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2232, col: 21, offset: 78860},
															val:        "[\\r\\n ]",
															chars:      []rune{'\r', '\n', ' '},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2225, col: 5, offset: 78563},
									run: (*parser).callonCalloutSubs13,
									expr: &seqExpr{
										pos: position{line: 2225, col: 5, offset: 78563},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2225, col: 5, offset: 78563},
												expr: &charClassMatcher{
													pos:        position{line: 2225, col: 5, offset: 78563},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2225, col: 15, offset: 78573},
												expr: &choiceExpr{
													pos: position{line: 2225, col: 17, offset: 78575},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2225, col: 17, offset: 78575},
															val:        "[\\r\\n ,]]",
															chars:      []rune{'\r', '\n', ' ', ',', ']'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2227, col: 9, offset: 78658},
									run: (*parser).callonCalloutSubs22,
									expr: &seqExpr{
										pos: position{line: 2227, col: 9, offset: 78658},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 9, offset: 78658},
												expr: &charClassMatcher{
													pos:        position{line: 2227, col: 9, offset: 78658},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 19, offset: 78668},
												expr: &seqExpr{
													pos: position{line: 2227, col: 20, offset: 78669},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2227, col: 20, offset: 78669},
															val:        "[=*_`]",
															chars:      []rune{'=', '*', '_', '`'},
															ignoreCase: false,
															inverted:   false,
														},
														&oneOrMoreExpr{
															pos: position{line: 2227, col: 27, offset: 78676},
															expr: &charClassMatcher{
																pos:        position{line: 2227, col: 27, offset: 78676},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1940, col: 23, offset: 69003},
									run: (*parser).callonCalloutSubs31,
									expr: &seqExpr{
										pos: position{line: 1940, col: 23, offset: 69003},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1940, col: 23, offset: 69003},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1940, col: 32, offset: 69012},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1940, col: 37, offset: 69017},
													run: (*parser).callonCalloutSubs35,
													expr: &oneOrMoreExpr{
														pos: position{line: 1940, col: 37, offset: 69017},
														expr: &charClassMatcher{
															pos:        position{line: 1940, col: 37, offset: 69017},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1940, col: 76, offset: 69056},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2033, col: 7, offset: 71728},
									expr: &choiceExpr{
										pos: position{line: 2271, col: 10, offset: 79961},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2271, col: 10, offset: 79961},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
											&actionExpr{
												pos: position{line: 2271, col: 16, offset: 79967},
												run: (*parser).callonCalloutSubs42,
												expr: &litMatcher{
													pos:        position{line: 2271, col: 16, offset: 79967},
													val:        "\t",
													ignoreCase: false,
													want:       "\"\\t\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2034, col: 7, offset: 71741},
									name: "Callout",
								},
								&actionExpr{
									pos: position{line: 2237, col: 12, offset: 79050},
									run: (*parser).callonCalloutSubs45,
									expr: &charClassMatcher{
										pos:        position{line: 2237, col: 12, offset: 79050},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
					&notExpr{
						pos: position{line: 2277, col: 8, offset: 80048},
						expr: &anyMatcher{
							line: 2277, col: 9, offset: 80049,
						},
					},
				},
			},
		},
		{
			name: "NoneSubs",
			pos:  position{line: 2039, col: 1, offset: 71831},
			expr: &seqExpr{
				pos: position{line: 2039, col: 13, offset: 71843},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 2039, col: 13, offset: 71843},
						expr: &choiceExpr{
							pos: position{line: 2040, col: 5, offset: 71849},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1940, col: 23, offset: 69003},
									run: (*parser).callonNoneSubs4,
									expr: &seqExpr{
										pos: position{line: 1940, col: 23, offset: 69003},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1940, col: 23, offset: 69003},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1940, col: 32, offset: 69012},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1940, col: 37, offset: 69017},
													run: (*parser).callonNoneSubs8,
													expr: &oneOrMoreExpr{
														pos: position{line: 1940, col: 37, offset: 69017},
														expr: &charClassMatcher{
															pos:        position{line: 1940, col: 37, offset: 69017},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1940, col: 76, offset: 69056},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2041, col: 8, offset: 71876},
									run: (*parser).callonNoneSubs12,
									expr: &seqExpr{
										pos: position{line: 2041, col: 8, offset: 71876},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2041, col: 8, offset: 71876},
												expr: &notExpr{
													pos: position{line: 2277, col: 8, offset: 80048},
													expr: &anyMatcher{
														line: 2277, col: 9, offset: 80049,
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 2041, col: 13, offset: 71881},
												expr: &charClassMatcher{
													pos:        position{line: 2041, col: 13, offset: 71881},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&choiceExpr{
												pos: position{line: 2279, col: 8, offset: 80059},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&notExpr{
						pos: position{line: 2277, col: 8, offset: 80048},
						expr: &anyMatcher{
							line: 2277, col: 9, offset: 80049,
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 2048, col: 1, offset: 72188},
			expr: &actionExpr{
				pos: position{line: 2048, col: 10, offset: 72197},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 2048, col: 10, offset: 72197},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2057, col: 19, offset: 72477},
							val:        "|===",
							ignoreCase: false,
							want:       "\"|===\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2057, col: 26, offset: 72484},
							expr: &choiceExpr{
								pos: position{line: 2271, col: 10, offset: 79961},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2271, col: 10, offset: 79961},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2271, col: 16, offset: 79967},
										run: (*parser).callonTable7,
										expr: &litMatcher{
											pos:        position{line: 2271, col: 16, offset: 79967},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2279, col: 8, offset: 80059},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
								&notExpr{
									pos: position{line: 2277, col: 8, offset: 80048},
									expr: &anyMatcher{
										line: 2277, col: 9, offset: 80049,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2049, col: 5, offset: 72216},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 2049, col: 12, offset: 72223},
								expr: &ruleRefExpr{
									pos:  position{line: 2049, col: 13, offset: 72224},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2050, col: 5, offset: 72246},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2050, col: 11, offset: 72252},
								expr: &ruleRefExpr{
									pos:  position{line: 2050, col: 12, offset: 72253},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2051, col: 6, offset: 72270},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2057, col: 19, offset: 72477},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2057, col: 19, offset: 72477},
											val:        "|===",
											ignoreCase: false,
											want:       "\"|===\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2057, col: 26, offset: 72484},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonTable26,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2279, col: 8, offset: 80059},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2275, col: 12, offset: 80019},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&charClassMatcher{
													pos:        position{line: 2275, col: 21, offset: 80028},
													val:        "[\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
												&notExpr{
													pos: position{line: 2277, col: 8, offset: 80048},
													expr: &anyMatcher{
														line: 2277, col: 9, offset: 80049,
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2277, col: 8, offset: 80048},
									expr: &anyMatcher{
										line: 2277, col: 9, offset: 80049,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 2060, col: 1, offset: 72559},
			expr: &actionExpr{
				pos: position{line: 2060, col: 20, offset: 72578},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 2060, col: 20, offset: 72578},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2060, col: 20, offset: 72578},
							expr: &seqExpr{
								pos: position{line: 2057, col: 19, offset: 72477},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2057, col: 19, offset: 72477},
										val:        "|===",
										ignoreCase: false,
										want:       "\"|===\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2057, col: 26, offset: 72484},
										expr: &choiceExpr{
											pos: position{line: 2271, col: 10, offset: 79961},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2271, col: 10, offset: 79961},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
												&actionExpr{
													pos: position{line: 2271, col: 16, offset: 79967},
													run: (*parser).callonTableLineHeader9,
													expr: &litMatcher{
														pos:        position{line: 2271, col: 16, offset: 79967},
														val:        "\t",
														ignoreCase: false,
														want:       "\"\\t\"",
													},
												},
											},
										},
									},
									&choiceExpr{
										pos: position{line: 2279, col: 8, offset: 80059},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2275, col: 12, offset: 80019},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&charClassMatcher{
												pos:        position{line: 2275, col: 21, offset: 80028},
												val:        "[\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&notExpr{
												pos: position{line: 2277, col: 8, offset: 80048},
												expr: &anyMatcher{
													line: 2277, col: 9, offset: 80049,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2060, col: 36, offset: 72594},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2060, col: 42, offset: 72600},
								expr: &ruleRefExpr{
									pos:  position{line: 2060, col: 43, offset: 72601},
									name: "TableCell",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2279, col: 8, offset: 80059},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
								&notExpr{
									pos: position{line: 2277, col: 8, offset: 80048},
									expr: &anyMatcher{
										line: 2277, col: 9, offset: 80049,
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 2161, col: 14, offset: 76486},
							run: (*parser).callonTableLineHeader24,
							expr: &seqExpr{
								pos: position{line: 2161, col: 14, offset: 76486},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 2161, col: 14, offset: 76486},
										expr: &notExpr{
											pos: position{line: 2277, col: 8, offset: 80048},
											expr: &anyMatcher{
												line: 2277, col: 9, offset: 80049,
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2161, col: 19, offset: 76491},
										expr: &choiceExpr{
											pos: position{line: 2271, col: 10, offset: 79961},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2271, col: 10, offset: 79961},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
												&actionExpr{
													pos: position{line: 2271, col: 16, offset: 79967},
													run: (*parser).callonTableLineHeader32,
													expr: &litMatcher{
														pos:        position{line: 2271, col: 16, offset: 79967},
														val:        "\t",
														ignoreCase: false,
														want:       "\"\\t\"",
													},
												},
											},
										},
									},
									&choiceExpr{
										pos: position{line: 2279, col: 8, offset: 80059},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2275, col: 12, offset: 80019},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&charClassMatcher{
												pos:        position{line: 2275, col: 21, offset: 80028},
												val:        "[\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&notExpr{
												pos: position{line: 2277, col: 8, offset: 80048},
												expr: &anyMatcher{
													line: 2277, col: 9, offset: 80049,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 2064, col: 1, offset: 72685},
			expr: &actionExpr{
				pos: position{line: 2064, col: 14, offset: 72698},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 2064, col: 14, offset: 72698},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2064, col: 14, offset: 72698},
							expr: &seqExpr{
								pos: position{line: 2057, col: 19, offset: 72477},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2057, col: 19, offset: 72477},
										val:        "|===",
										ignoreCase: false,
										want:       "\"|===\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2057, col: 26, offset: 72484},
										expr: &choiceExpr{
											pos: position{line: 2271, col: 10, offset: 79961},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2271, col: 10, offset: 79961},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
												&actionExpr{
													pos: position{line: 2271, col: 16, offset: 79967},
													run: (*parser).callonTableLine9,
													expr: &litMatcher{
														pos:        position{line: 2271, col: 16, offset: 79967},
														val:        "\t",
														ignoreCase: false,
														want:       "\"\\t\"",
													},
												},
											},
										},
									},
									&choiceExpr{
										pos: position{line: 2279, col: 8, offset: 80059},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2275, col: 12, offset: 80019},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&charClassMatcher{
												pos:        position{line: 2275, col: 21, offset: 80028},
												val:        "[\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&notExpr{
												pos: position{line: 2277, col: 8, offset: 80048},
												expr: &anyMatcher{
													line: 2277, col: 9, offset: 80049,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2064, col: 30, offset: 72714},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2064, col: 36, offset: 72720},
								expr: &ruleRefExpr{
									pos:  position{line: 2064, col: 37, offset: 72721},
									name: "TableCell",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2279, col: 8, offset: 80059},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2275, col: 12, offset: 80019},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&charClassMatcher{
									pos:        position{line: 2275, col: 21, offset: 80028},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
								&notExpr{
									pos: position{line: 2277, col: 8, offset: 80048},
									expr: &anyMatcher{
										line: 2277, col: 9, offset: 80049,
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2064, col: 53, offset: 72737},
							expr: &actionExpr{
								pos: position{line: 2161, col: 14, offset: 76486},
								run: (*parser).callonTableLine25,
								expr: &seqExpr{
									pos: position{line: 2161, col: 14, offset: 76486},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2161, col: 14, offset: 76486},
											expr: &notExpr{
												pos: position{line: 2277, col: 8, offset: 80048},
												expr: &anyMatcher{
													line: 2277, col: 9, offset: 80049,
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2161, col: 19, offset: 76491},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonTableLine33,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2279, col: 8, offset: 80059},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2275, col: 12, offset: 80019},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&charClassMatcher{
													pos:        position{line: 2275, col: 21, offset: 80028},
													val:        "[\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
												&notExpr{
													pos: position{line: 2277, col: 8, offset: 80048},
													expr: &anyMatcher{
														line: 2277, col: 9, offset: 80049,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 2068, col: 1, offset: 72806},
			expr: &actionExpr{
				pos: position{line: 2068, col: 14, offset: 72819},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 2068, col: 14, offset: 72819},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2055, col: 23, offset: 72447},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2055, col: 27, offset: 72451},
							expr: &choiceExpr{
								pos: position{line: 2271, col: 10, offset: 79961},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2271, col: 10, offset: 79961},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
									&actionExpr{
										pos: position{line: 2271, col: 16, offset: 79967},
										run: (*parser).callonTableCell7,
										expr: &litMatcher{
											pos:        position{line: 2271, col: 16, offset: 79967},
											val:        "\t",
											ignoreCase: false,
											want:       "\"\\t\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2068, col: 33, offset: 72838},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2068, col: 42, offset: 72847},
								expr: &seqExpr{
									pos: position{line: 2068, col: 43, offset: 72848},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2068, col: 43, offset: 72848},
											expr: &seqExpr{
												pos: position{line: 2055, col: 23, offset: 72447},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 2055, col: 23, offset: 72447},
														val:        "|",
														ignoreCase: false,
														want:       "\"|\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 2055, col: 27, offset: 72451},
														expr: &choiceExpr{
															pos: position{line: 2271, col: 10, offset: 79961},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2271, col: 10, offset: 79961},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
																&actionExpr{
																	pos: position{line: 2271, col: 16, offset: 79967},
																	run: (*parser).callonTableCell18,
																	expr: &litMatcher{
																		pos:        position{line: 2271, col: 16, offset: 79967},
																		val:        "\t",
																		ignoreCase: false,
																		want:       "\"\\t\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 2068, col: 63, offset: 72868},
											expr: &choiceExpr{
												pos: position{line: 2279, col: 8, offset: 80059},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2275, col: 12, offset: 80019},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 21, offset: 80028},
														val:        "[\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&notExpr{
														pos: position{line: 2277, col: 8, offset: 80048},
														expr: &anyMatcher{
															line: 2277, col: 9, offset: 80049,
														},
													},
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2068, col: 68, offset: 72873},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonTableCell29,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2068, col: 75, offset: 72880},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2068, col: 89, offset: 72894},
											expr: &choiceExpr{
												pos: position{line: 2271, col: 10, offset: 79961},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2271, col: 10, offset: 79961},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
													&actionExpr{
														pos: position{line: 2271, col: 16, offset: 79967},
														run: (*parser).callonTableCell35,
														expr: &litMatcher{
															pos:        position{line: 2271, col: 16, offset: 79967},
															val:        "\t",
															ignoreCase: false,
															want:       "\"\\t\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2137, col: 1, offset: 75620},
			expr: &actionExpr{
				pos: position{line: 2137, col: 14, offset: 75633},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2137, col: 14, offset: 75633},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2137, col: 14, offset: 75633},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2137, col: 19, offset: 75638},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2137, col: 25, offset: 75644},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2137, col: 43, offset: 75662},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2141, col: 1, offset: 75727},
			expr: &actionExpr{
				pos: position{line: 2141, col: 21, offset: 75747},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2141, col: 21, offset: 75747},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2141, col: 30, offset: 75756},
						expr: &choiceExpr{
							pos: position{line: 2141, col: 31, offset: 75757},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2225, col: 5, offset: 78563},
									run: (*parser).callonIndexTermContent5,
									expr: &seqExpr{
										pos: position{line: 2225, col: 5, offset: 78563},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2225, col: 5, offset: 78563},
												expr: &charClassMatcher{
													pos:        position{line: 2225, col: 5, offset: 78563},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2225, col: 15, offset: 78573},
												expr: &choiceExpr{
													pos: position{line: 2225, col: 17, offset: 78575},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2225, col: 17, offset: 78575},
															val:        "[\\r\\n ,]]",
															chars:      []rune{'\r', '\n', ' ', ',', ']'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2277, col: 8, offset: 80048},
															expr: &anyMatcher{
																line: 2277, col: 9, offset: 80049,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2227, col: 9, offset: 78658},
									run: (*parser).callonIndexTermContent14,
									expr: &seqExpr{
										pos: position{line: 2227, col: 9, offset: 78658},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 9, offset: 78658},
												expr: &charClassMatcher{
													pos:        position{line: 2227, col: 9, offset: 78658},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 2227, col: 19, offset: 78668},
												expr: &seqExpr{
													pos: position{line: 2227, col: 20, offset: 78669},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2227, col: 20, offset: 78669},
															val:        "[=*_`]",
															chars:      []rune{'=', '*', '_', '`'},
															ignoreCase: false,
															inverted:   false,
														},
														&oneOrMoreExpr{
															pos: position{line: 2227, col: 27, offset: 78676},
															expr: &charClassMatcher{
																pos:        position{line: 2227, col: 27, offset: 78676},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2141, col: 38, offset: 75764},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2141, col: 53, offset: 75779},
									name: "QuotedText",
								},
								&litMatcher{
									pos:        position{line: 2271, col: 10, offset: 79961},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
								&actionExpr{
									pos: position{line: 2271, col: 16, offset: 79967},
									run: (*parser).callonIndexTermContent26,
									expr: &litMatcher{
										pos:        position{line: 2271, col: 16, offset: 79967},
										val:        "\t",
										ignoreCase: false,
										want:       "\"\\t\"",
									},
								},
								&actionExpr{
									pos: position{line: 2203, col: 21, offset: 77750},
									run: (*parser).callonIndexTermContent28,
									expr: &choiceExpr{
										pos: position{line: 1538, col: 27, offset: 54613},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1538, col: 27, offset: 54613},
												run: (*parser).callonIndexTermContent30,
												expr: &seqExpr{
													pos: position{line: 1538, col: 27, offset: 54613},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1538, col: 27, offset: 54613},
															val:        "<<",
															ignoreCase: false,
															want:       "\"<<\"",
														},
														&labeledExpr{
															pos:   position{line: 1538, col: 32, offset: 54618},
															label: "id",
															expr: &actionExpr{
																pos: position{line: 2259, col: 7, offset: 79709},
																run: (*parser).callonIndexTermContent34,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2259, col: 7, offset: 79709},
																	expr: &charClassMatcher{
																		pos:        position{line: 2259, col: 7, offset: 79709},
																		val:        "[^[]<>,]",
																		chars:      []rune{'[', ']', '<', '>', ','},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1538, col: 40, offset: 54626},
															expr: &choiceExpr{
																pos: position{line: 2271, col: 10, offset: 79961},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2271, col: 10, offset: 79961},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&actionExpr{
																		pos: position{line: 2271, col: 16, offset: 79967},
																		run: (*parser).callonIndexTermContent40,
																		expr: &litMatcher{
																			pos:        position{line: 2271, col: 16, offset: 79967},
																			val:        "\t",
																			ignoreCase: false,
																			want:       "\"\\t\"",
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1538, col: 47, offset: 54633},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&labeledExpr{
															pos:   position{line: 1538, col: 51, offset: 54637},
															label: "label",
															expr: &oneOrMoreExpr{
																pos: position{line: 1548, col: 24, offset: 55025},
																expr: &choiceExpr{
																	pos: position{line: 1549, col: 5, offset: 55031},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 1549, col: 6, offset: 55032},
																			run: (*parser).callonIndexTermContent46,
																			expr: &seqExpr{
																				pos: position{line: 1549, col: 6, offset: 55032},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 1549, col: 6, offset: 55032},
																						val:        "[0-9\\pL]",
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 1549, col: 14, offset: 55040},
																						expr: &charClassMatcher{
																							pos:        position{line: 1549, col: 14, offset: 55040},
																							val:        "[^\\r\\n{<>]",
																							chars:      []rune{'\r', '\n', '{', '<', '>'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 214, col: 12, offset: 6782},
																			run: (*parser).callonIndexTermContent51,
																			expr: &seqExpr{
																				pos: position{line: 214, col: 12, offset: 6782},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 214, col: 12, offset: 6782},
																						val:        "{",
																						ignoreCase: false,
																						want:       "\"{\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 214, col: 16, offset: 6786},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 190, col: 18, offset: 6118},
																							run: (*parser).callonIndexTermContent55,
																							expr: &seqExpr{
																								pos: position{line: 190, col: 18, offset: 6118},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 190, col: 18, offset: 6118},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 190, col: 28, offset: 6128},
																										expr: &charClassMatcher{
																											pos:        position{line: 190, col: 29, offset: 6129},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 214, col: 35, offset: 6805},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1553, col: 6, offset: 55250},
																			run: (*parser).callonIndexTermContent61,
																			expr: &litMatcher{
																				pos:        position{line: 1553, col: 6, offset: 55250},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1538, col: 79, offset: 54665},
															val:        ">>",
															ignoreCase: false,
															want:       "\">>\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1540, col: 5, offset: 54730},
												run: (*parser).callonIndexTermContent64,
												expr: &seqExpr{
													pos: position{line: 1540, col: 5, offset: 54730},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1540, col: 5, offset: 54730},
															val:        "<<",
															ignoreCase: false,
															want:       "\"<<\"",
														},
														&labeledExpr{
															pos:   position{line: 1540, col: 10, offset: 54735},
															label: "id",
															expr: &actionExpr{
																pos: position{line: 2259, col: 7, offset: 79709},
																run: (*parser).callonIndexTermContent68,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2259, col: 7, offset: 79709},
																	expr: &charClassMatcher{
																		pos:        position{line: 2259, col: 7, offset: 79709},
																		val:        "[^[]<>,]",
																		chars:      []rune{'[', ']', '<', '>', ','},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1540, col: 18, offset: 54743},
															val:        ">>",
															ignoreCase: false,
															want:       "\">>\"",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2206, col: 9, offset: 77913},
									run: (*parser).callonIndexTermContent72,
									expr: &charClassMatcher{
										pos:        position{line: 2206, col: 10, offset: 77914},
										val:        "[<>&]",
										chars:      []rune{'<', '>', '&'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&actionExpr{
									pos: position{line: 1940, col: 23, offset: 69003},
									run: (*parser).callonIndexTermContent74,
									expr: &seqExpr{
										pos: position{line: 1940, col: 23, offset: 69003},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1940, col: 23, offset: 69003},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1940, col: 32, offset: 69012},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1940, col: 37, offset: 69017},
													run: (*parser).callonIndexTermContent78,
													expr: &oneOrMoreExpr{
														pos: position{line: 1940, col: 37, offset: 69017},
														expr: &charClassMatcher{
															pos:        position{line: 1940, col: 37, offset: 69017},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1940, col: 76, offset: 69056},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2141, col: 114, offset: 75840},
									run: (*parser).callonIndexTermContent82,
									expr: &seqExpr{
										pos: position{line: 2141, col: 115, offset: 75841},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2141, col: 115, offset: 75841},
												expr: &litMatcher{
													pos:        position{line: 2141, col: 116, offset: 75842},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2141, col: 121, offset: 75847,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2241, col: 1, offset: 79115},
			expr: &actionExpr{
				pos: position{line: 2241, col: 17, offset: 79131},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2241, col: 17, offset: 79131},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2241, col: 22, offset: 79136},
						expr: &choiceExpr{
							pos: position{line: 2241, col: 23, offset: 79137},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2253, col: 13, offset: 79512},
									run: (*parser).callonFileLocation5,
									expr: &oneOrMoreExpr{
										pos: position{line: 2253, col: 13, offset: 79512},
										expr: &charClassMatcher{
											pos:        position{line: 2253, col: 14, offset: 79513},
											val:        "[^\\r\\n[]� ]",
											chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&actionExpr{
									pos: position{line: 1940, col: 23, offset: 69003},
									run: (*parser).callonFileLocation8,
									expr: &seqExpr{
										pos: position{line: 1940, col: 23, offset: 69003},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1940, col: 23, offset: 69003},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1940, col: 32, offset: 69012},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1940, col: 37, offset: 69017},
													run: (*parser).callonFileLocation12,
													expr: &oneOrMoreExpr{
														pos: position{line: 1940, col: 37, offset: 69017},
														expr: &charClassMatcher{
															pos:        position{line: 1940, col: 37, offset: 69017},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1940, col: 76, offset: 69056},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onRawSource9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRawSource9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource9()
}

func (c *current) onRawSource22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRawSource22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource22()
}

func (c *current) onRawSource27() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRawSource27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource27()
}

func (c *current) onRawSource34() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRawSource34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource34()
}

func (c *current) onRawSource46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRawSource46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource46()
}

func (c *current) onRawSource48() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRawSource48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource48()
}

func (c *current) onRawSource41(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRawSource41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource41(stack["start"])
}

func (c *current) onRawSource30(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonRawSource30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource30(stack["name"], stack["start"])
}

func (c *current) onRawSource56() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRawSource56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource56()
}

func (c *current) onRawSource68() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRawSource68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource68()
}

func (c *current) onRawSource70() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRawSource70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource70()
}

func (c *current) onRawSource63(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRawSource63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource63(stack["start"])
}

func (c *current) onRawSource52(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonRawSource52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource52(stack["name"], stack["start"])
}

func (c *current) onRawSource78() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRawSource78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource78()
}

func (c *current) onRawSource74(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonRawSource74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource74(stack["name"])
}

func (c *current) onRawSource84() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRawSource84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource84()
}

func (c *current) onRawSource17(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil
}

func (p *parser) callonRawSource17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource17(stack["elements"])
}

func (c *current) onRawSource5(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
}

func (p *parser) callonRawSource5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource5(stack["name"], stack["value"])
}

func (c *current) onRawSource94() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonRawSource94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource94()
}

func (c *current) onRawSource97(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonRawSource97() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource97(stack["level"])
}

func (c *current) onRawSource101() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRawSource101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource101()
}

func (c *current) onRawSource104() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawSource104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource104()
}

func (c *current) onRawSource91(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.(string))
}

func (p *parser) callonRawSource91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource91(stack["level"], stack["title"])
}

func (c *current) onRawSource119() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonRawSource119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource119()
}

func (c *current) onRawSource113(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawSource113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource113(stack["content"])
}

func (c *current) onRawSource1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonRawSource1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource1(stack["lines"])
}

func (c *current) onRawDocument11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRawDocument11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocument11()
}

func (c *current) onRawDocument30() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRawDocument30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocument30()
}

func (c *current) onRawDocument20() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRawDocument20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocument20()
}

func (c *current) onRawDocument42() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRawDocument42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocument42()
}

func (c *current) onRawDocument5(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonRawDocument5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocument5(stack["content"])
}

func (c *current) onRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onDocumentBlocks15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks15()
}

func (c *current) onDocumentBlocks31() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks31()
}

func (c *current) onDocumentBlocks38() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks38()
}

func (c *current) onDocumentBlocks27(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonDocumentBlocks27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks27(stack["id"])
}

func (c *current) onDocumentBlocks43() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentBlocks43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks43()
}

func (c *current) onDocumentBlocks52() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentBlocks52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks52()
}

func (c *current) onDocumentBlocks65() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks65()
}

func (c *current) onDocumentBlocks71() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks71()
}

func (c *current) onDocumentBlocks61() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonDocumentBlocks61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks61()
}

func (c *current) onDocumentBlocks82() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks82()
}

func (c *current) onDocumentBlocks88() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks88()
}

func (c *current) onDocumentBlocks84(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDocumentBlocks84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks84(stack["ref"])
}

func (c *current) onDocumentBlocks92() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentBlocks92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks92()
}

func (c *current) onDocumentBlocks40(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDocumentBlocks40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks40(stack["element"])
}

func (c *current) onDocumentBlocks18(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonDocumentBlocks18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks18(stack["elements"])
}

func (c *current) onDocumentBlocks100() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks100()
}

func (c *current) onDocumentBlocks107() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks107()
}

func (c *current) onDocumentBlocks96(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonDocumentBlocks96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks96(stack["id"])
}

func (c *current) onDocumentBlocks120() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks120()
}

func (c *current) onDocumentBlocks130() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks130()
}

func (c *current) onDocumentBlocks139() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks139()
}

func (c *current) onDocumentBlocks122(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonDocumentBlocks122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks122(stack["content"])
}

func (c *current) onDocumentBlocks153() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks153()
}

func (c *current) onDocumentBlocks171() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks171()
}

func (c *current) onDocumentBlocks187() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentBlocks187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks187()
}

func (c *current) onDocumentBlocks181(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentBlocks181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks181(stack["content"])
}

func (c *current) onDocumentBlocks162(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonDocumentBlocks162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks162(stack["line"])
}

func (c *current) onDocumentBlocks201() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks201()
}

func (c *current) onDocumentBlocks147(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)
}

func (p *parser) callonDocumentBlocks147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks147(stack["content"])
}

func (c *current) onDocumentBlocks218() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks218()
}

func (c *current) onDocumentBlocks229() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks229()
}

func (c *current) onDocumentBlocks232() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks232()
}

func (c *current) onDocumentBlocks241() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks241()
}

func (c *current) onDocumentBlocks237(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentBlocks237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks237(stack["email"])
}

func (c *current) onDocumentBlocks248() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks248()
}

func (c *current) onDocumentBlocks255() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks255() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks255()
}

func (c *current) onDocumentBlocks224(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentBlocks224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks224(stack["fullname"], stack["email"])
}

func (c *current) onDocumentBlocks213(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentBlocks213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks213(stack["authors"])
}

func (c *current) onDocumentBlocks267() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks267()
}

func (c *current) onDocumentBlocks276() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks276()
}

func (c *current) onDocumentBlocks279() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks279()
}

func (c *current) onDocumentBlocks288() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks288()
}

func (c *current) onDocumentBlocks284(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentBlocks284() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks284(stack["email"])
}

func (c *current) onDocumentBlocks295() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks295()
}

func (c *current) onDocumentBlocks302() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks302()
}

func (c *current) onDocumentBlocks271(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentBlocks271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks271(stack["fullname"], stack["email"])
}

func (c *current) onDocumentBlocks262(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentBlocks262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks262(stack["author"])
}

func (c *current) onDocumentBlocks315() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks315() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks315()
}

func (c *current) onDocumentBlocks325() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks325()
}

func (c *current) onDocumentBlocks334() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks334()
}

func (c *current) onDocumentBlocks317(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonDocumentBlocks317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks317(stack["content"])
}

func (c *current) onDocumentBlocks348() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks348()
}

func (c *current) onDocumentBlocks366() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks366() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks366()
}

func (c *current) onDocumentBlocks382() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentBlocks382() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks382()
}

func (c *current) onDocumentBlocks376(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentBlocks376() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks376(stack["content"])
}

func (c *current) onDocumentBlocks357(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonDocumentBlocks357() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks357(stack["line"])
}

func (c *current) onDocumentBlocks396() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks396() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks396()
}

func (c *current) onDocumentBlocks342(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)
}

func (p *parser) callonDocumentBlocks342() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks342(stack["content"])
}

func (c *current) onDocumentBlocks412() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks412() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks412()
}

func (c *current) onDocumentBlocks425() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks425() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks425()
}

func (c *current) onDocumentBlocks422() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks422() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks422()
}

func (c *current) onDocumentBlocks433() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks433() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks433()
}

func (c *current) onDocumentBlocks440() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks440() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks440()
}

func (c *current) onDocumentBlocks429() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks429() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks429()
}

func (c *current) onDocumentBlocks448() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks448() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks448()
}

func (c *current) onDocumentBlocks455() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks455() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks455()
}

func (c *current) onDocumentBlocks418(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentBlocks418() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks418(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentBlocks461() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks461() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks461()
}

func (c *current) onDocumentBlocks468() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlocks468() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks468()
}

func (c *current) onDocumentBlocks458(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentBlocks458() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks458(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentBlocks407(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentBlocks407() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks407(stack["revision"])
}

func (c *current) onDocumentBlocks9(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentBlocks9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks9(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentBlocks1(header, blocks interface{}) (interface{}, error) {
	if header != nil && blocks != nil {
		return append([]interface{}{header}, blocks.([]interface{})...), nil
	} else if blocks != nil {
		return blocks.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks1(stack["header"], stack["blocks"])
}

func (c *current) onDocumentBlock9(attributes interface{}) error {
	c.globalStore.pushAttributes(attributes)
	return nil

}

func (p *parser) callonDocumentBlock9() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock9(stack["attributes"])
}

func (c *current) onDocumentBlock15() (bool, error) {
	return types.HasAttributeWithValue(c.globalStore.getAttributes(), types.AttrPositional1, types.Literal), nil

}

func (p *parser) callonDocumentBlock15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock15()
}

func (c *current) onDocumentBlock24() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentBlock24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock24()
}

func (c *current) onDocumentBlock33() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentBlock33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock33()
}

func (c *current) onDocumentBlock20(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock20(stack["elements"])
}

func (c *current) onDocumentBlock17(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonDocumentBlock17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock17(stack["content"])
}

func (c *current) onDocumentBlock60() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock60()
}

func (c *current) onDocumentBlock69() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock69()
}

func (c *current) onDocumentBlock52(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonDocumentBlock52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock52(stack["content"])
}

func (c *current) onDocumentBlock90() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock90()
}

func (c *current) onDocumentBlock102() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock102()
}

func (c *current) onDocumentBlock114() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock114()
}

func (c *current) onDocumentBlock126() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock126()
}

func (c *current) onDocumentBlock138() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock138()
}

func (c *current) onDocumentBlock150() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock150()
}

func (c *current) onDocumentBlock162() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock162()
}

func (c *current) onDocumentBlock170() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentBlock170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock170()
}

func (c *current) onDocumentBlock178(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonDocumentBlock178() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock178(stack["content"])
}

func (c *current) onDocumentBlock77(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentBlock77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock77(stack["content"])
}

func (c *current) onDocumentBlock13(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), c.globalStore.getAttributes())

}

func (p *parser) callonDocumentBlock13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock13(stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentBlock187() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock187()
}

func (c *current) onDocumentBlock179() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonDocumentBlock179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock179()
}

func (c *current) onDocumentBlock197() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonDocumentBlock197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock197()
}

func (c *current) onDocumentBlock200(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonDocumentBlock200() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock200(stack["level"])
}

func (c *current) onDocumentBlock204() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock204()
}

func (c *current) onDocumentBlock220() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock220()
}

func (c *current) onDocumentBlock227() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock227()
}

func (c *current) onDocumentBlock216(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonDocumentBlock216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock216(stack["id"])
}

func (c *current) onDocumentBlock232() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentBlock232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock232()
}

func (c *current) onDocumentBlock241() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentBlock241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock241()
}

func (c *current) onDocumentBlock254() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock254()
}

func (c *current) onDocumentBlock260() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock260()
}

func (c *current) onDocumentBlock250() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonDocumentBlock250() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock250()
}

func (c *current) onDocumentBlock271() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock271()
}

func (c *current) onDocumentBlock277() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock277()
}

func (c *current) onDocumentBlock273(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDocumentBlock273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock273(stack["ref"])
}

func (c *current) onDocumentBlock281() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDocumentBlock281() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock281()
}

func (c *current) onDocumentBlock229(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDocumentBlock229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock229(stack["element"])
}

func (c *current) onDocumentBlock207(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonDocumentBlock207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock207(stack["elements"])
}

func (c *current) onDocumentBlock289() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock289() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock289()
}

func (c *current) onDocumentBlock296() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock296()
}

func (c *current) onDocumentBlock285(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonDocumentBlock285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock285(stack["id"])
}

func (c *current) onDocumentBlock194(level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonDocumentBlock194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock194(stack["level"], stack["title"], stack["id"])
}

func (c *current) onDocumentBlock313() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock313()
}

func (c *current) onDocumentBlock322() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock322() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock322()
}

func (c *current) onDocumentBlock305(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonDocumentBlock305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock305(stack["content"])
}

func (c *current) onDocumentBlock331() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonDocumentBlock331() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock331()
}

func (c *current) onDocumentBlock351() (bool, error) {
	attrs := c.globalStore.getAttributes()
	return types.HasAttributeWithValue(attrs, types.AttrPositional1, types.Literal), nil

}

func (p *parser) callonDocumentBlock351() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock351()
}

func (c *current) onDocumentBlock365() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock365() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock365()
}

func (c *current) onDocumentBlock357() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonDocumentBlock357() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock357()
}

func (c *current) onDocumentBlock373() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonDocumentBlock373() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock373()
}

func (c *current) onDocumentBlock354(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonDocumentBlock354() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock354(stack["content"])
}

func (c *current) onDocumentBlock349(lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonDocumentBlock349() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock349(stack["lines"])
}

func (c *current) onDocumentBlock394() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock394()
}

func (c *current) onDocumentBlock389() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonDocumentBlock389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock389()
}

func (c *current) onDocumentBlock386(line interface{}) (interface{}, error) {
	// do not include the trailing 'EOL' on the first line
	return line, nil
}

func (p *parser) callonDocumentBlock386() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock386(stack["line"])
}

func (c *current) onDocumentBlock416() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock416() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock416()
}

func (c *current) onDocumentBlock408() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonDocumentBlock408() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock408()
}

func (c *current) onDocumentBlock424() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonDocumentBlock424() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock424()
}

func (c *current) onDocumentBlock405(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonDocumentBlock405() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock405(stack["content"])
}

func (c *current) onDocumentBlock383(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonDocumentBlock383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock383(stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentBlock381(lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonDocumentBlock381() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock381(stack["lines"])
}

func (c *current) onDocumentBlock438() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock438() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock438()
}

func (c *current) onDocumentBlock450() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonDocumentBlock450() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock450()
}

func (c *current) onDocumentBlock447(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonDocumentBlock447() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock447(stack["line"])
}

func (c *current) onDocumentBlock444(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonDocumentBlock444() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock444(stack["lines"])
}

func (c *current) onDocumentBlock467() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock467() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock467()
}

func (c *current) onDocumentBlock432(lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonDocumentBlock432() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock432(stack["lines"])
}

func (c *current) onDocumentBlock480() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock480() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock480()
}

func (c *current) onDocumentBlock493() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock493() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock493()
}

func (c *current) onDocumentBlock498() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentBlock498() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock498()
}

func (c *current) onDocumentBlock505() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock505() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock505()
}

func (c *current) onDocumentBlock517() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentBlock517() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock517()
}

func (c *current) onDocumentBlock519() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentBlock519() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock519()
}

func (c *current) onDocumentBlock512(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDocumentBlock512() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock512(stack["start"])
}

func (c *current) onDocumentBlock501(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonDocumentBlock501() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock501(stack["name"], stack["start"])
}

func (c *current) onDocumentBlock527() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock527() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock527()
}

func (c *current) onDocumentBlock539() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentBlock539() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock539()
}

func (c *current) onDocumentBlock541() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentBlock541() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock541()
}

func (c *current) onDocumentBlock534(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDocumentBlock534() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock534(stack["start"])
}

func (c *current) onDocumentBlock523(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonDocumentBlock523() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock523(stack["name"], stack["start"])
}

func (c *current) onDocumentBlock549() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock549() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock549()
}

func (c *current) onDocumentBlock545(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentBlock545() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock545(stack["name"])
}

func (c *current) onDocumentBlock555() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDocumentBlock555() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock555()
}

func (c *current) onDocumentBlock488(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil
}

func (p *parser) callonDocumentBlock488() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock488(stack["elements"])
}

func (c *current) onDocumentBlock476(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
}

func (p *parser) callonDocumentBlock476() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock476(stack["name"], stack["value"])
}

func (c *current) onDocumentBlock566() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock566() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock566()
}

func (c *current) onDocumentBlock575() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock575() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock575()
}

func (c *current) onDocumentBlock562(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonDocumentBlock562() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock562(stack["name"])
}

func (c *current) onDocumentBlock586() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock586() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock586()
}

func (c *current) onDocumentBlock595() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock595() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock595()
}

func (c *current) onDocumentBlock582(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonDocumentBlock582() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock582(stack["name"])
}

func (c *current) onDocumentBlock614() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonDocumentBlock614() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock614()
}

func (c *current) onDocumentBlock616() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonDocumentBlock616() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock616()
}

func (c *current) onDocumentBlock618() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonDocumentBlock618() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock618()
}

func (c *current) onDocumentBlock620() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonDocumentBlock620() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock620()
}

func (c *current) onDocumentBlock622() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonDocumentBlock622() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock622()
}

func (c *current) onDocumentBlock636() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock636() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock636()
}

func (c *current) onDocumentBlock645() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock645() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock645()
}

func (c *current) onDocumentBlock628(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonDocumentBlock628() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock628(stack["content"])
}

func (c *current) onDocumentBlock666() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock666() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock666()
}

func (c *current) onDocumentBlock678() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock678() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock678()
}

func (c *current) onDocumentBlock690() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock690() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock690()
}

func (c *current) onDocumentBlock702() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock702() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock702()
}

func (c *current) onDocumentBlock714() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock714() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock714()
}

func (c *current) onDocumentBlock726() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock726() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock726()
}

func (c *current) onDocumentBlock738() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock738() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock738()
}

func (c *current) onDocumentBlock746() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentBlock746() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock746()
}

func (c *current) onDocumentBlock754(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonDocumentBlock754() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock754(stack["content"])
}

func (c *current) onDocumentBlock653(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentBlock653() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock653(stack["content"])
}

func (c *current) onDocumentBlock610(t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(string), c.globalStore.getAttributes())

}

func (p *parser) callonDocumentBlock610() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock610(stack["t"], stack["lines"])
}

func (c *current) onDocumentBlock771() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock771() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock771()
}

func (c *current) onDocumentBlock763() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonDocumentBlock763() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock763()
}

func (c *current) onDocumentBlock787() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentBlock787() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock787()
}

func (c *current) onDocumentBlock781(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentBlock781() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock781(stack["content"])
}

func (c *current) onDocumentBlock760(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonDocumentBlock760() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock760(stack["content"])
}

func (c *current) onDocumentBlock755(content interface{}) (interface{}, error) {
	return types.NewMarkdownQuoteBlock(content.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonDocumentBlock755() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock755(stack["content"])
}

func (c *current) onDocumentBlock797() (bool, error) {
	// verify that one of the attributes is `kind:passthrough`
	return types.HasAttributeWithValue(c.globalStore.getAttributes(), types.AttrPositional1, types.Passthrough), nil

}

func (p *parser) callonDocumentBlock797() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock797()
}

func (c *current) onDocumentBlock813() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock813() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock813()
}

func (c *current) onDocumentBlock825() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock825() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock825()
}

func (c *current) onDocumentBlock837() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock837() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock837()
}

func (c *current) onDocumentBlock849() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock849() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock849()
}

func (c *current) onDocumentBlock861() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock861() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock861()
}

func (c *current) onDocumentBlock873() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock873() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock873()
}

func (c *current) onDocumentBlock885() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock885() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock885()
}

func (c *current) onDocumentBlock893() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentBlock893() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock893()
}

func (c *current) onDocumentBlock901(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonDocumentBlock901() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock901(stack["content"])
}

func (c *current) onDocumentBlock800(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentBlock800() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock800(stack["content"])
}

func (c *current) onDocumentBlock795(content interface{}) (interface{}, error) {

	return types.NewPassthroughBlock(content.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonDocumentBlock795() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock795(stack["content"])
}

func (c *current) onDocumentBlock914() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock914() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock914()
}

func (c *current) onDocumentBlock923() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock923() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock923()
}

func (c *current) onDocumentBlock906(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonDocumentBlock906() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock906(stack["content"])
}

func (c *current) onDocumentBlock944() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock944() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock944()
}

func (c *current) onDocumentBlock956() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock956() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock956()
}

func (c *current) onDocumentBlock968() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock968() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock968()
}

func (c *current) onDocumentBlock980() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock980() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock980()
}

func (c *current) onDocumentBlock992() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock992() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock992()
}

func (c *current) onDocumentBlock1004() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock1004() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1004()
}

func (c *current) onDocumentBlock1016() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentBlock1016() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1016()
}

func (c *current) onDocumentBlock1024() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentBlock1024() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1024()
}

func (c *current) onDocumentBlock1032(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonDocumentBlock1032() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1032(stack["content"])
}

func (c *current) onDocumentBlock931(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentBlock931() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock931(stack["content"])
}

func (c *current) onDocumentBlock902(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonDocumentBlock902() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock902(stack["lines"])
}

func (c *current) onDocumentBlock1033() (interface{}, error) {
	// for standalone attributes at the end of the doc
	return types.NewStandaloneAttributes(c.globalStore.getAttributes()) // will be discarded anyways

}

func (p *parser) callonDocumentBlock1033() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1033()
}

func (c *current) onDocumentBlock1(attributes, block interface{}) (interface{}, error) {
	c.globalStore.discardAttributes()
	return block, nil

}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["attributes"], stack["block"])
}

func (c *current) onBlockAttributes16() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes16()
}

func (c *current) onBlockAttributes23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes23()
}

func (c *current) onBlockAttributes19(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["ref"])
}

func (c *current) onBlockAttributes31() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes31()
}

func (c *current) onBlockAttributes27(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonBlockAttributes27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes27(stack["name"])
}

func (c *current) onBlockAttributes37() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes37()
}

func (c *current) onBlockAttributes12(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonBlockAttributes12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes12(stack["elements"])
}

func (c *current) onBlockAttributes8(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonBlockAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes8(stack["id"])
}

func (c *current) onBlockAttributes43() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes43()
}

func (c *current) onBlockAttributes5(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes62() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes62()
}

func (c *current) onBlockAttributes69() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes69()
}

func (c *current) onBlockAttributes65(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonBlockAttributes65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes65(stack["ref"])
}

func (c *current) onBlockAttributes77() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes77()
}

func (c *current) onBlockAttributes73(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonBlockAttributes73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes73(stack["name"])
}

func (c *current) onBlockAttributes83() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes83()
}

func (c *current) onBlockAttributes55(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonBlockAttributes55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes55(stack["elements"])
}

func (c *current) onBlockAttributes51(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonBlockAttributes51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes51(stack["title"])
}

func (c *current) onBlockAttributes88() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes88()
}

func (c *current) onBlockAttributes48(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes48(stack["title"])
}

func (c *current) onBlockAttributes100() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes100()
}

func (c *current) onBlockAttributes93(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes93(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	attributes = append(attributes, otherAttributes.([]interface{})...)
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstPositionalAttributes18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes18()
}

func (c *current) onFirstPositionalAttributes20(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes20(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	attrs = append(attrs, extras.([]interface{})...)
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)
}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)
}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)
}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)
}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue17() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonShortHandAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue17()
}

func (c *current) onShortHandAttributeValue13(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonShortHandAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue13(stack["ref"])
}

func (c *current) onShortHandAttributeValue25() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonShortHandAttributeValue25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue25()
}

func (c *current) onShortHandAttributeValue21(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonShortHandAttributeValue21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue21(stack["name"])
}

func (c *current) onShortHandAttributeValue31() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue31()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute13() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPositionalAttribute13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute13()
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute24() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPositionalAttribute24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute24()
}

func (c *current) onPositionalAttribute32() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPositionalAttribute32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute32()
}

func (c *current) onPositionalAttribute36(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in which case, `c.text` contains the char sequence of the previous
	// rule that matched)
	v := types.Merge(value)
	return len(v) > 0, nil

}

func (p *parser) callonPositionalAttribute36() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute36(stack["value"])
}

func (c *current) onPositionalAttribute17(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute17(stack["value"])
}

func (c *current) onNamedAttribute9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttribute9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute9()
}

func (c *current) onNamedAttribute16() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttribute16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute16()
}

func (c *current) onNamedAttribute4() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonNamedAttribute4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute4()
}

func (c *current) onNamedAttribute22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttribute22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute22()
}

func (c *current) onNamedAttribute32() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttribute32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute32()
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)
}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onAttributeValue14() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue14()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue8()
}

func (c *current) onSingleQuotedAttributeValue15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue15()
}

func (c *current) onSingleQuotedAttributeValue11(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuotedAttributeValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue11(stack["ref"])
}

func (c *current) onSingleQuotedAttributeValue23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedAttributeValue23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue23()
}

func (c *current) onSingleQuotedAttributeValue19(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSingleQuotedAttributeValue19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue19(stack["name"])
}

func (c *current) onSingleQuotedAttributeValue29() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonSingleQuotedAttributeValue29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue29()
}

func (c *current) onSingleQuotedAttributeValue32() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue32()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue8() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue8()
}

func (c *current) onDoubleQuotedAttributeValue15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue15()
}

func (c *current) onDoubleQuotedAttributeValue11(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuotedAttributeValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue11(stack["ref"])
}

func (c *current) onDoubleQuotedAttributeValue23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedAttributeValue23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue23()
}

func (c *current) onDoubleQuotedAttributeValue19(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonDoubleQuotedAttributeValue19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue19(stack["name"])
}

func (c *current) onDoubleQuotedAttributeValue29() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonDoubleQuotedAttributeValue29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue29()
}

func (c *current) onDoubleQuotedAttributeValue32() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue32()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUnquotedAttributeValue6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue6()
}

func (c *current) onUnquotedAttributeValue12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue12()
}

func (c *current) onUnquotedAttributeValue19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUnquotedAttributeValue19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue19()
}

func (c *current) onUnquotedAttributeValue15(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonUnquotedAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue15(stack["ref"])
}

func (c *current) onUnquotedAttributeValue27() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUnquotedAttributeValue27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue27()
}

func (c *current) onUnquotedAttributeValue23(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonUnquotedAttributeValue23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue23(stack["name"])
}

func (c *current) onUnquotedAttributeValue33() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue33()
}

func (c *current) onUnquotedAttributeValue35(elements interface{}) (bool, error) {
	// empty string is not a valid value
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonUnquotedAttributeValue35() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue35(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onUserMacroBlock4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroBlock4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock4()
}

func (c *current) onUserMacroBlock7(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock7(stack["name"])
}

func (c *current) onUserMacroBlock10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroBlock10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock10()
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineUserMacro4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro4()
}

func (c *current) onInlineUserMacro7(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro7(stack["name"])
}

func (c *current) onInlineUserMacro10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineUserMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro10()
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion12() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFileInclusion12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion12()
}

func (c *current) onFileInclusion19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileInclusion19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion19()
}

func (c *current) onFileInclusion15(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileInclusion15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion15(stack["ref"])
}

func (c *current) onFileInclusion8(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileInclusion8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion8(stack["path"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion28() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileInclusion28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion28()
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges17() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLineRanges17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges17()
}

func (c *current) onLineRanges12() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonLineRanges12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges12()
}

func (c *current) onLineRanges26() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLineRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges26()
}

func (c *current) onLineRanges21() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonLineRanges21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges21()
}

func (c *current) onLineRanges9(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges9(stack["start"], stack["end"])
}

func (c *current) onLineRanges35() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLineRanges35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges35()
}

func (c *current) onLineRanges30() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonLineRanges30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges30()
}

func (c *current) onLineRanges28(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonLineRanges28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges28(stack["singleline"])
}

func (c *current) onLineRanges52() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLineRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges52()
}

func (c *current) onLineRanges47() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonLineRanges47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges47()
}

func (c *current) onLineRanges61() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLineRanges61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges61()
}

func (c *current) onLineRanges56() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonLineRanges56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges56()
}

func (c *current) onLineRanges44(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonLineRanges44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges44(stack["start"], stack["end"])
}

func (c *current) onLineRanges70() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLineRanges70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges70()
}

func (c *current) onLineRanges65() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonLineRanges65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges65()
}

func (c *current) onLineRanges63(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonLineRanges63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges63(stack["singleline"])
}

func (c *current) onLineRanges39(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonLineRanges39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges39(stack["other"])
}

func (c *current) onLineRanges5(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonLineRanges5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges5(stack["first"], stack["others"])
}

func (c *current) onLineRanges80() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLineRanges80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges80()
}

func (c *current) onLineRanges75() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonLineRanges75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges75()
}

func (c *current) onLineRanges89() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLineRanges89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges89()
}

func (c *current) onLineRanges84() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonLineRanges84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges84()
}

func (c *current) onLineRanges72(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonLineRanges72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges72(stack["start"], stack["end"])
}

func (c *current) onLineRanges98() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLineRanges98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges98()
}

func (c *current) onLineRanges93() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonLineRanges93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges93()
}

func (c *current) onLineRanges91(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonLineRanges91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges91(stack["singleline"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil
}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onTagRanges11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTagRanges11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges11()
}

func (c *current) onTagRanges17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges17()
}

func (c *current) onTagRanges20(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges20(stack["stars"])
}

func (c *current) onTagRanges14(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagRanges14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges14(stack["stars"])
}

func (c *current) onTagRanges8(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRanges8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges8(stack["tag"])
}

func (c *current) onTagRanges26() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTagRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges26()
}

func (c *current) onTagRanges32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges32()
}

func (c *current) onTagRanges35(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges35() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges35(stack["stars"])
}

func (c *current) onTagRanges29(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagRanges29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges29(stack["stars"])
}

func (c *current) onTagRanges21(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRanges21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges21(stack["tag"])
}

func (c *current) onTagRanges46() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTagRanges46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges46()
}

func (c *current) onTagRanges52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges52()
}

func (c *current) onTagRanges55(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges55(stack["stars"])
}

func (c *current) onTagRanges49(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagRanges49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges49(stack["stars"])
}

func (c *current) onTagRanges43(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRanges43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges43(stack["tag"])
}

func (c *current) onTagRanges61() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTagRanges61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges61()
}

func (c *current) onTagRanges67() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges67()
}

func (c *current) onTagRanges70(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges70(stack["stars"])
}

func (c *current) onTagRanges64(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagRanges64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges64(stack["stars"])
}

func (c *current) onTagRanges56(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRanges56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges56(stack["tag"])
}

func (c *current) onTagRanges38(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonTagRanges38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges38(stack["other"])
}

func (c *current) onTagRanges4(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonTagRanges4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges4(stack["first"], stack["others"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil
}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onIncludedFileLine11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine11()
}

func (c *current) onIncludedFileLine10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine10()
}

func (c *current) onIncludedFileLine6(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine6(stack["tag"])
}

func (c *current) onIncludedFileLine20() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine20()
}

func (c *current) onIncludedFileLine19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine19()
}

func (c *current) onIncludedFileLine15(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileLine15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine15(stack["tag"])
}

func (c *current) onIncludedFileLine24() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine24()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onListParagraph12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph12()
}

func (c *current) onListParagraph21() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph21()
}

func (c *current) onListParagraph4(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonListParagraph4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph4(stack["content"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph29(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph29(stack["lines"])
}

func (c *current) onListParagraphLine15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraphLine15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine15()
}

func (c *current) onListParagraphLine7() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonListParagraphLine7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine7()
}

func (c *current) onListParagraphLine31() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraphLine31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine31()
}

func (c *current) onListParagraphLine40() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraphLine40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine40()
}

func (c *current) onListParagraphLine23(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonListParagraphLine23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine23(stack["content"])
}

func (c *current) onListParagraphLine54() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraphLine54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine54()
}

func (c *current) onListParagraphLine61() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListParagraphLine61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine61()
}

func (c *current) onListParagraphLine64(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListParagraphLine64() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine64(stack["depth"])
}

func (c *current) onListParagraphLine58(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonListParagraphLine58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine58(stack["depth"])
}

func (c *current) onListParagraphLine65() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonListParagraphLine65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine65()
}

func (c *current) onListParagraphLine70() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonListParagraphLine70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine70()
}

func (c *current) onListParagraphLine74() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonListParagraphLine74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine74()
}

func (c *current) onListParagraphLine78() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonListParagraphLine78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine78()
}

func (c *current) onListParagraphLine83() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonListParagraphLine83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine83()
}

func (c *current) onListParagraphLine91() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraphLine91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine91()
}

func (c *current) onListParagraphLine49(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListParagraphLine49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine49(stack["prefix"])
}

func (c *current) onListParagraphLine99() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraphLine99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine99()
}

func (c *current) onListParagraphLine106() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListParagraphLine106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine106()
}

func (c *current) onListParagraphLine109(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListParagraphLine109() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine109(stack["depth"])
}

func (c *current) onListParagraphLine103(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonListParagraphLine103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine103(stack["depth"])
}

func (c *current) onListParagraphLine111() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonListParagraphLine111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine111()
}

func (c *current) onListParagraphLine116() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraphLine116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine116()
}

func (c *current) onListParagraphLine94(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListParagraphLine94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine94(stack["prefix"])
}

func (c *current) onListParagraphLine123() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListParagraphLine123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine123()
}

func (c *current) onListParagraphLine130() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraphLine130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine130()
}

func (c *current) onListParagraphLine119(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonListParagraphLine119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine119(stack["ref"])
}

func (c *current) onListParagraphLine138() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraphLine138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine138()
}

func (c *current) onListParagraphLine156() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraphLine156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine156()
}

func (c *current) onListParagraphLine168() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraphLine168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine168()
}

func (c *current) onListParagraphLine180() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraphLine180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine180()
}

func (c *current) onListParagraphLine192() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraphLine192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine192()
}

func (c *current) onListParagraphLine204() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraphLine204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine204()
}

func (c *current) onListParagraphLine216() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraphLine216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine216()
}

func (c *current) onListParagraphLine228() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraphLine228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine228()
}

func (c *current) onListParagraphLine239() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonListParagraphLine239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine239()
}

func (c *current) onListParagraphLine237(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonListParagraphLine237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine237(stack["content"])
}

func (c *current) onListParagraphLine251() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListParagraphLine251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine251()
}

func (c *current) onListParagraphLine254(content, separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListParagraphLine254() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine254(stack["content"], stack["separator"])
}

func (c *current) onListParagraphLine259() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraphLine259() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine259()
}

func (c *current) onListParagraphLine248(content, separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonListParagraphLine248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine248(stack["content"], stack["separator"])
}

func (c *current) onListParagraphLine273() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListParagraphLine273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine273()
}

func (c *current) onListParagraphLine268(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine268(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement7() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement7()
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent17() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent17()
}

func (c *current) onContinuedListItemContent26() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent26()
}

func (c *current) onContinuedListItemContent9(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonContinuedListItemContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent9(stack["content"])
}

func (c *current) onContinuedListItemContent36() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonContinuedListItemContent36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent36()
}

func (c *current) onContinuedListItemContent61() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent61()
}

func (c *current) onContinuedListItemContent53() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonContinuedListItemContent53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent53()
}

func (c *current) onContinuedListItemContent70() (bool, error) {
	attrs := c.globalStore.getAttributes()
	return types.HasAttributeWithValue(attrs, types.AttrPositional1, types.Literal), nil

}

func (p *parser) callonContinuedListItemContent70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent70()
}

func (c *current) onContinuedListItemContent84() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent84()
}

func (c *current) onContinuedListItemContent76() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonContinuedListItemContent76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent76()
}

func (c *current) onContinuedListItemContent92() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonContinuedListItemContent92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent92()
}

func (c *current) onContinuedListItemContent73(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonContinuedListItemContent73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent73(stack["content"])
}

func (c *current) onContinuedListItemContent68(lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonContinuedListItemContent68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent68(stack["lines"])
}

func (c *current) onContinuedListItemContent113() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent113()
}

func (c *current) onContinuedListItemContent108() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonContinuedListItemContent108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent108()
}

func (c *current) onContinuedListItemContent105(line interface{}) (interface{}, error) {
	// do not include the trailing 'EOL' on the first line
	return line, nil
}

func (p *parser) callonContinuedListItemContent105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent105(stack["line"])
}

func (c *current) onContinuedListItemContent135() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent135()
}

func (c *current) onContinuedListItemContent127() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonContinuedListItemContent127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent127()
}

func (c *current) onContinuedListItemContent143() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonContinuedListItemContent143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent143()
}

func (c *current) onContinuedListItemContent124(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonContinuedListItemContent124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent124(stack["content"])
}

func (c *current) onContinuedListItemContent102(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedListItemContent102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent102(stack["firstLine"], stack["otherLines"])
}

func (c *current) onContinuedListItemContent100(lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonContinuedListItemContent100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent100(stack["lines"])
}

func (c *current) onContinuedListItemContent157() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent157()
}

func (c *current) onContinuedListItemContent169() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonContinuedListItemContent169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent169()
}

func (c *current) onContinuedListItemContent166(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonContinuedListItemContent166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent166(stack["line"])
}

func (c *current) onContinuedListItemContent163(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonContinuedListItemContent163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent163(stack["lines"])
}

func (c *current) onContinuedListItemContent186() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent186()
}

func (c *current) onContinuedListItemContent151(lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonContinuedListItemContent151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent151(stack["lines"])
}

func (c *current) onContinuedListItemContent199() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent199()
}

func (c *current) onContinuedListItemContent212() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent212()
}

func (c *current) onContinuedListItemContent217() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonContinuedListItemContent217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent217()
}

func (c *current) onContinuedListItemContent224() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent224()
}

func (c *current) onContinuedListItemContent236() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonContinuedListItemContent236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent236()
}

func (c *current) onContinuedListItemContent238() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonContinuedListItemContent238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent238()
}

func (c *current) onContinuedListItemContent231(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonContinuedListItemContent231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent231(stack["start"])
}

func (c *current) onContinuedListItemContent220(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonContinuedListItemContent220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent220(stack["name"], stack["start"])
}

func (c *current) onContinuedListItemContent246() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent246()
}

func (c *current) onContinuedListItemContent258() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonContinuedListItemContent258() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent258()
}

func (c *current) onContinuedListItemContent260() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonContinuedListItemContent260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent260()
}

func (c *current) onContinuedListItemContent253(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonContinuedListItemContent253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent253(stack["start"])
}

func (c *current) onContinuedListItemContent242(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonContinuedListItemContent242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent242(stack["name"], stack["start"])
}

func (c *current) onContinuedListItemContent268() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent268()
}

func (c *current) onContinuedListItemContent264(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonContinuedListItemContent264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent264(stack["name"])
}

func (c *current) onContinuedListItemContent274() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonContinuedListItemContent274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent274()
}

func (c *current) onContinuedListItemContent207(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil
}

func (p *parser) callonContinuedListItemContent207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent207(stack["elements"])
}

func (c *current) onContinuedListItemContent195(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
}

func (p *parser) callonContinuedListItemContent195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent195(stack["name"], stack["value"])
}

func (c *current) onContinuedListItemContent285() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent285()
}

func (c *current) onContinuedListItemContent294() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent294()
}

func (c *current) onContinuedListItemContent281(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonContinuedListItemContent281() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent281(stack["name"])
}

func (c *current) onContinuedListItemContent305() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent305()
}

func (c *current) onContinuedListItemContent314() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent314()
}

func (c *current) onContinuedListItemContent301(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonContinuedListItemContent301() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent301(stack["name"])
}

func (c *current) onContinuedListItemContent333() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonContinuedListItemContent333() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent333()
}

func (c *current) onContinuedListItemContent335() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonContinuedListItemContent335() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent335()
}

func (c *current) onContinuedListItemContent337() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonContinuedListItemContent337() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent337()
}

func (c *current) onContinuedListItemContent339() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonContinuedListItemContent339() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent339()
}

func (c *current) onContinuedListItemContent341() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonContinuedListItemContent341() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent341()
}

func (c *current) onContinuedListItemContent355() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonContinuedListItemContent355() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent355()
}

func (c *current) onContinuedListItemContent364() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonContinuedListItemContent364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent364()
}

func (c *current) onContinuedListItemContent351(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent351() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent351(stack["elements"])
}

func (c *current) onContinuedListItemContent348(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonContinuedListItemContent348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent348(stack["content"])
}

func (c *current) onContinuedListItemContent390() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent390()
}

func (c *current) onContinuedListItemContent405() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent405() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent405()
}

func (c *current) onContinuedListItemContent414() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent414() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent414()
}

func (c *current) onContinuedListItemContent397(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonContinuedListItemContent397() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent397(stack["content"])
}

func (c *current) onContinuedListItemContent435() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent435() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent435()
}

func (c *current) onContinuedListItemContent447() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent447() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent447()
}

func (c *current) onContinuedListItemContent459() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent459() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent459()
}

func (c *current) onContinuedListItemContent471() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent471() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent471()
}

func (c *current) onContinuedListItemContent483() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent483() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent483()
}

func (c *current) onContinuedListItemContent495() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent495() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent495()
}

func (c *current) onContinuedListItemContent507() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent507() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent507()
}

func (c *current) onContinuedListItemContent515() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent515()
}

func (c *current) onContinuedListItemContent523(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonContinuedListItemContent523() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent523(stack["content"])
}

func (c *current) onContinuedListItemContent422(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonContinuedListItemContent422() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent422(stack["content"])
}

func (c *current) onContinuedListItemContent382(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonContinuedListItemContent382() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent382(stack["line"])
}

func (c *current) onContinuedListItemContent345(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedListItemContent345() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent345(stack["firstLine"], stack["otherLines"])
}

func (c *current) onContinuedListItemContent329(t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(string), c.globalStore.getAttributes())

}

func (p *parser) callonContinuedListItemContent329() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent329(stack["t"], stack["lines"])
}

func (c *current) onContinuedListItemContent536() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonContinuedListItemContent536() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent536()
}

func (c *current) onContinuedListItemContent545() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonContinuedListItemContent545() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent545()
}

func (c *current) onContinuedListItemContent532(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent532() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent532(stack["elements"])
}

func (c *current) onContinuedListItemContent529(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonContinuedListItemContent529() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent529(stack["content"])
}

func (c *current) onContinuedListItemContent571() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent571() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent571()
}

func (c *current) onContinuedListItemContent586() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent586() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent586()
}

func (c *current) onContinuedListItemContent595() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent595() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent595()
}

func (c *current) onContinuedListItemContent578(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonContinuedListItemContent578() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent578(stack["content"])
}

func (c *current) onContinuedListItemContent616() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent616() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent616()
}

func (c *current) onContinuedListItemContent628() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent628() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent628()
}

func (c *current) onContinuedListItemContent640() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent640() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent640()
}

func (c *current) onContinuedListItemContent652() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent652() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent652()
}

func (c *current) onContinuedListItemContent664() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent664() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent664()
}

func (c *current) onContinuedListItemContent676() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent676() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent676()
}

func (c *current) onContinuedListItemContent688() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent688() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent688()
}

func (c *current) onContinuedListItemContent696() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonContinuedListItemContent696() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent696()
}

func (c *current) onContinuedListItemContent704(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonContinuedListItemContent704() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent704(stack["content"])
}

func (c *current) onContinuedListItemContent603(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonContinuedListItemContent603() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent603(stack["content"])
}

func (c *current) onContinuedListItemContent563(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonContinuedListItemContent563() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent563(stack["line"])
}

func (c *current) onContinuedListItemContent526(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedListItemContent526() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent526(stack["firstLine"], stack["otherLines"])
}

func (c *current) onContinuedListItemContent524(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonContinuedListItemContent524() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent524(stack["lines"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListItem9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem9()
}

func (c *current) onOrderedListItem16() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItem16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem16()
}

func (c *current) onOrderedListItem19(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItem19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem19(stack["depth"])
}

func (c *current) onOrderedListItem13(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItem13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem13(stack["depth"])
}

func (c *current) onOrderedListItem20() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItem20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem20()
}

func (c *current) onOrderedListItem25() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItem25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem25()
}

func (c *current) onOrderedListItem29() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItem29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem29()
}

func (c *current) onOrderedListItem33() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItem33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem33()
}

func (c *current) onOrderedListItem38() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItem38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem38()
}

func (c *current) onOrderedListItem46() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListItem46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem46()
}

func (c *current) onOrderedListItem4(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItem4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem4(stack["prefix"])
}

func (c *current) onOrderedListItem1(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUnorderedListItem9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem9()
}

func (c *current) onUnorderedListItem16() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItem16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem16()
}

func (c *current) onUnorderedListItem19(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItem19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem19(stack["depth"])
}

func (c *current) onUnorderedListItem13(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItem13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem13(stack["depth"])
}

func (c *current) onUnorderedListItem21() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItem21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem21()
}

func (c *current) onUnorderedListItem26() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUnorderedListItem26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem26()
}

func (c *current) onUnorderedListItem4(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItem4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem4(stack["prefix"])
}

func (c *current) onUnorderedListItem36() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItem36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem36()
}

func (c *current) onUnorderedListItem38() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItem38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem38()
}

func (c *current) onUnorderedListItem40() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItem40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem40()
}

func (c *current) onUnorderedListItem45() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUnorderedListItem45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem45()
}

func (c *current) onUnorderedListItem30(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItem30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem30(stack["style"])
}

func (c *current) onUnorderedListItem1(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem6() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonLabeledListItem6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem6()
}

func (c *current) onLabeledListItem4(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonLabeledListItem4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem4(stack["content"])
}

func (c *current) onLabeledListItem19() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItem19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem19()
}

func (c *current) onLabeledListItem22(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItem22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem22(stack["separator"])
}

func (c *current) onLabeledListItem27() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItem27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem27()
}

func (c *current) onLabeledListItem16(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItem16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem16(stack["separator"])
}

func (c *current) onLabeledListItem1(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, c.globalStore.getAttributes())
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement4() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLabeledListItemTermElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement4()
}

func (c *current) onLabeledListItemTermElement13() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLabeledListItemTermElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement13()
}

func (c *current) onLabeledListItemTermElement26() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement26()
}

func (c *current) onLabeledListItemTermElement32() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement32()
}

func (c *current) onLabeledListItemTermElement22() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLabeledListItemTermElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement22()
}

func (c *current) onLabeledListItemTermElement43() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement43()
}

func (c *current) onLabeledListItemTermElement54() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement54()
}

func (c *current) onLabeledListItemTermElement50() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement50()
}

func (c *current) onLabeledListItemTermElement63() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement63()
}

func (c *current) onLabeledListItemTermElement69() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement69()
}

func (c *current) onLabeledListItemTermElement76() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement76()
}

func (c *current) onLabeledListItemTermElement72() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement72()
}

func (c *current) onLabeledListItemTermElement58(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonLabeledListItemTermElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement58(stack["content"])
}

func (c *current) onLabeledListItemTermElement85() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement85()
}

func (c *current) onLabeledListItemTermElement91() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement91()
}

func (c *current) onLabeledListItemTermElement98() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement98()
}

func (c *current) onLabeledListItemTermElement94() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement94()
}

func (c *current) onLabeledListItemTermElement80(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonLabeledListItemTermElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement80(stack["content"])
}

func (c *current) onLabeledListItemTermElement46(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonLabeledListItemTermElement46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement46(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onLabeledListItemTermElement115() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement115()
}

func (c *current) onLabeledListItemTermElement121() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement121()
}

func (c *current) onLabeledListItemTermElement127() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLabeledListItemTermElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement127()
}

func (c *current) onLabeledListItemTermElement136() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement136()
}

func (c *current) onLabeledListItemTermElement132(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLabeledListItemTermElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement132(stack["name"])
}

func (c *current) onLabeledListItemTermElement142() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLabeledListItemTermElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement142()
}

func (c *current) onLabeledListItemTermElement111(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)
}

func (p *parser) callonLabeledListItemTermElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement111(stack["id"], stack["label"])
}

func (c *current) onLabeledListItemTermElement149() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement149()
}

func (c *current) onLabeledListItemTermElement145(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)
}

func (p *parser) callonLabeledListItemTermElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement145(stack["id"])
}

func (c *current) onLabeledListItemTermElement109() (interface{}, error) {
	// if we have a InternalCrossReference we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLabeledListItemTermElement109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement109()
}

func (c *current) onLabeledListItemTermElement153() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonLabeledListItemTermElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement153()
}

func (c *current) onLabeledListItemTermElement155() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonLabeledListItemTermElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement155()
}

func (c *current) onLabeledListItemTermElement157() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonLabeledListItemTermElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement157()
}

func (c *current) onLabeledListItemTermElement159() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonLabeledListItemTermElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement159()
}

func (c *current) onLabeledListItemTermElement161() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonLabeledListItemTermElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement161()
}

func (c *current) onLabeledListItemTermElement163() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonLabeledListItemTermElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement163()
}

func (c *current) onLabeledListItemTermElement165() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonLabeledListItemTermElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement165()
}

func (c *current) onLabeledListItemTermElement175() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement175()
}

func (c *current) onLabeledListItemTermElement187() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLabeledListItemTermElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement187()
}

func (c *current) onLabeledListItemTermElement189() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLabeledListItemTermElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement189()
}

func (c *current) onLabeledListItemTermElement182(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLabeledListItemTermElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement182(stack["start"])
}

func (c *current) onLabeledListItemTermElement171(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonLabeledListItemTermElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement171(stack["name"], stack["start"])
}

func (c *current) onLabeledListItemTermElement197() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement197()
}

func (c *current) onLabeledListItemTermElement209() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLabeledListItemTermElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement209()
}

func (c *current) onLabeledListItemTermElement211() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLabeledListItemTermElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement211()
}

func (c *current) onLabeledListItemTermElement204(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLabeledListItemTermElement204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement204(stack["start"])
}

func (c *current) onLabeledListItemTermElement193(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonLabeledListItemTermElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement193(stack["name"], stack["start"])
}

func (c *current) onLabeledListItemTermElement219() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTermElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement219()
}

func (c *current) onLabeledListItemTermElement215(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonLabeledListItemTermElement215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement215(stack["name"])
}

func (c *current) onLabeledListItemTermElement225() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonLabeledListItemTermElement225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement225()
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onInlineElement4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement4()
}

func (c *current) onInlineElement13() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement13()
}

func (c *current) onInlineElement22() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement22()
}

func (c *current) onInlineElement35() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement35()
}

func (c *current) onInlineElement41() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement41()
}

func (c *current) onInlineElement31() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonInlineElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement31()
}

func (c *current) onInlineElement52() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement52()
}

func (c *current) onInlineElement76() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonInlineElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement76()
}

func (c *current) onInlineElement82() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement82()
}

func (c *current) onInlineElement88() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement88()
}

func (c *current) onInlineElement97() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement97()
}

func (c *current) onInlineElement93(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonInlineElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement93(stack["name"])
}

func (c *current) onInlineElement103() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement103()
}

func (c *current) onInlineElement72(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)
}

func (p *parser) callonInlineElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement72(stack["id"], stack["label"])
}

func (c *current) onInlineElement110() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonInlineElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement110()
}

func (c *current) onInlineElement106(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)
}

func (p *parser) callonInlineElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement106(stack["id"])
}

func (c *current) onInlineElement70() (interface{}, error) {
	// if we have a InternalCrossReference we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement70()
}

func (c *current) onInlineElement114() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonInlineElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement114()
}

func (c *current) onInlineElement116() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonInlineElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement116()
}

func (c *current) onInlineElement118() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonInlineElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement118()
}

func (c *current) onInlineElement120() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonInlineElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement120()
}

func (c *current) onInlineElement122() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonInlineElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement122()
}

func (c *current) onInlineElement124() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonInlineElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement124()
}

func (c *current) onInlineElement126() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonInlineElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement126()
}

func (c *current) onInlineElement137() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement137()
}

func (c *current) onInlineElement149() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement149()
}

func (c *current) onInlineElement151() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement151()
}

func (c *current) onInlineElement144(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement144(stack["start"])
}

func (c *current) onInlineElement133(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonInlineElement133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement133(stack["name"], stack["start"])
}

func (c *current) onInlineElement159() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement159()
}

func (c *current) onInlineElement171() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement171()
}

func (c *current) onInlineElement173() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement173()
}

func (c *current) onInlineElement166(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement166(stack["start"])
}

func (c *current) onInlineElement155(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonInlineElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement155(stack["name"], stack["start"])
}

func (c *current) onInlineElement181() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement181()
}

func (c *current) onInlineElement177(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonInlineElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement177(stack["name"])
}

func (c *current) onInlineElement191() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonInlineElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement191()
}

func (c *current) onInlineElement198() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement198()
}

func (c *current) onInlineElement187(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement187(stack["id"])
}

func (c *current) onInlineElement208() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement208()
}

func (c *current) onInlineElement204() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement204()
}

func (c *current) onInlineElement217() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement217()
}

func (c *current) onInlineElement223() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement223()
}

func (c *current) onInlineElement230() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement230()
}

func (c *current) onInlineElement226() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement226()
}

func (c *current) onInlineElement212(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement212(stack["content"])
}

func (c *current) onInlineElement239() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement239()
}

func (c *current) onInlineElement245() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement245()
}

func (c *current) onInlineElement252() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement252()
}

func (c *current) onInlineElement248() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement248()
}

func (c *current) onInlineElement234(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineElement234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement234(stack["content"])
}

func (c *current) onInlineElement200(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonInlineElement200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement200(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onInlineElement260() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement260()
}

func (c *current) onInlineElement256(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineElement256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement256(stack["ref"])
}

func (c *current) onInlineElement264() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlineElement264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement264()
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement7()
}

func (c *current) onDoubleQuoteBoldTextElement16() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement16()
}

func (c *current) onDoubleQuoteBoldTextElement26() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement26()
}

func (c *current) onDoubleQuoteBoldTextElement42() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement42()
}

func (c *current) onDoubleQuoteBoldTextElement38(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteBoldTextElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement38(stack["ref"])
}

func (c *current) onDoubleQuoteBoldTextElement50() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement50()
}

func (c *current) onDoubleQuoteBoldTextElement47() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement47()
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText13(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content

}

func (p *parser) callonSingleQuoteBoldText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText13(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElements5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements5()
}

func (c *current) onSingleQuoteBoldTextElement2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement2()
}

func (c *current) onSingleQuoteBoldTextElement11() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement11()
}

func (c *current) onSingleQuoteBoldTextElement33() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement33()
}

func (c *current) onSingleQuoteBoldTextElement45() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement45()
}

func (c *current) onSingleQuoteBoldTextElement41(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteBoldTextElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement41(stack["ref"])
}

func (c *current) onSingleQuoteBoldTextElement53() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement53()
}

func (c *current) onSingleQuoteBoldTextElement50() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement50()
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedBoldText5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEscapedBoldText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText5()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText17() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEscapedBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText17()
}

func (c *current) onEscapedBoldText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText27() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEscapedBoldText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText27()
}

func (c *current) onEscapedBoldText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement7()
}

func (c *current) onDoubleQuoteItalicTextElement16() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement16()
}

func (c *current) onDoubleQuoteItalicTextElement26() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement26()
}

func (c *current) onDoubleQuoteItalicTextElement42() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement42()
}

func (c *current) onDoubleQuoteItalicTextElement38(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteItalicTextElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement38(stack["ref"])
}

func (c *current) onDoubleQuoteItalicTextElement50() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement50()
}

func (c *current) onDoubleQuoteItalicTextElement47() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement47()
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText10(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content

}

func (p *parser) callonSingleQuoteItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText10(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElements5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements5()
}

func (c *current) onSingleQuoteItalicTextElement2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement2()
}

func (c *current) onSingleQuoteItalicTextElement11() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement11()
}

func (c *current) onSingleQuoteItalicTextElement33() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement33()
}

func (c *current) onSingleQuoteItalicTextElement45() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement45()
}

func (c *current) onSingleQuoteItalicTextElement41(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteItalicTextElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement41(stack["ref"])
}

func (c *current) onSingleQuoteItalicTextElement53() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement53()
}

func (c *current) onSingleQuoteItalicTextElement50() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement50()
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedItalicText5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEscapedItalicText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText5()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText17() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEscapedItalicText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText17()
}

func (c *current) onEscapedItalicText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText27() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEscapedItalicText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText27()
}

func (c *current) onEscapedItalicText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement7()
}

func (c *current) onDoubleQuoteMonospaceTextElement16() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement16()
}

func (c *current) onDoubleQuoteMonospaceTextElement26() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement26()
}

func (c *current) onDoubleQuoteMonospaceTextElement43() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement43()
}

func (c *current) onDoubleQuoteMonospaceTextElement39(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement39(stack["ref"])
}

func (c *current) onDoubleQuoteMonospaceTextElement51() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement51()
}

func (c *current) onDoubleQuoteMonospaceTextElement48() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement48()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText10(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content

}

func (p *parser) callonSingleQuoteMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText10(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElements5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements5()
}

func (c *current) onSingleQuoteMonospaceTextElement2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement2()
}

func (c *current) onSingleQuoteMonospaceTextElement11() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement11()
}

func (c *current) onSingleQuoteMonospaceTextElement33() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement33()
}

func (c *current) onSingleQuoteMonospaceTextElement46() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement46()
}

func (c *current) onSingleQuoteMonospaceTextElement42(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteMonospaceTextElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement42(stack["ref"])
}

func (c *current) onSingleQuoteMonospaceTextElement55() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement55()
}

func (c *current) onSingleQuoteMonospaceTextElement50() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement50()
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedMonospaceText5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEscapedMonospaceText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText5()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText17() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEscapedMonospaceText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText17()
}

func (c *current) onEscapedMonospaceText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText27() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEscapedMonospaceText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText27()
}

func (c *current) onEscapedMonospaceText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText24(stack["backslashes"], stack["elements"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedStringElement9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement9()
}

func (c *current) onSingleQuotedStringElement15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedStringElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement15()
}

func (c *current) onSingleQuotedStringElement5() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonSingleQuotedStringElement5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement5()
}

func (c *current) onSingleQuotedStringElement29() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedStringElement29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement29()
}

func (c *current) onSingleQuotedStringElement39() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonSingleQuotedStringElement39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement39()
}

func (c *current) onSingleQuotedStringElement41() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonSingleQuotedStringElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement41()
}

func (c *current) onSingleQuotedStringElement43() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonSingleQuotedStringElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement43()
}

func (c *current) onSingleQuotedStringElement45() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonSingleQuotedStringElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement45()
}

func (c *current) onSingleQuotedStringElement47() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonSingleQuotedStringElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement47()
}

func (c *current) onSingleQuotedStringElement49() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonSingleQuotedStringElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement49()
}

func (c *current) onSingleQuotedStringElement33(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement33(stack["element"])
}

func (c *current) onSingleQuotedStringElement58() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement58()
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedStringElement9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement9()
}

func (c *current) onDoubleQuotedStringElement15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedStringElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement15()
}

func (c *current) onDoubleQuotedStringElement5() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonDoubleQuotedStringElement5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement5()
}

func (c *current) onDoubleQuotedStringElement29() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedStringElement29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement29()
}

func (c *current) onDoubleQuotedStringElement35() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement35()
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextElements9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElements9()
}

func (c *current) onDoubleQuoteMarkedTextElement2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement2()
}

func (c *current) onDoubleQuoteMarkedTextElement11() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement11()
}

func (c *current) onDoubleQuoteMarkedTextElement34() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement34()
}

func (c *current) onDoubleQuoteMarkedTextElement30(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteMarkedTextElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement30(stack["ref"])
}

func (c *current) onDoubleQuoteMarkedTextElement42() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement42()
}

func (c *current) onDoubleQuoteMarkedTextElement39() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextElement39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement39()
}

func (c *current) onNonDoubleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["elements"])
}

func (c *current) onSingleQuoteMarkedText10(elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText10(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElements5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements5()
}

func (c *current) onSingleQuoteMarkedTextElement2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement2()
}

func (c *current) onSingleQuoteMarkedTextElement11() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement11()
}

func (c *current) onSingleQuoteMarkedTextElement33() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement33()
}

func (c *current) onSingleQuoteMarkedTextElement45() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement45()
}

func (c *current) onSingleQuoteMarkedTextElement41(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteMarkedTextElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement41(stack["ref"])
}

func (c *current) onSingleQuoteMarkedTextElement53() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement53()
}

func (c *current) onSingleQuoteMarkedTextElement50() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement50()
}

func (c *current) onNonSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonNonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedMarkedText5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEscapedMarkedText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText5()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText17() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEscapedMarkedText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText17()
}

func (c *current) onEscapedMarkedText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText27() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEscapedMarkedText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText27()
}

func (c *current) onEscapedMarkedText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText24(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onSubscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonSubscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextElement3()
}

func (c *current) onEscapedSubscriptText4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEscapedSubscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText4()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onSuperscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonSuperscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextElement3()
}

func (c *current) onEscapedSuperscriptText4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEscapedSuperscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText4()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onInlinePassthrough7() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlinePassthrough7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough7()
}

func (c *current) onInlinePassthrough19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough19()
}

func (c *current) onInlinePassthrough13() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlinePassthrough13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough13()
}

func (c *current) onInlinePassthrough2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonInlinePassthrough2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough2(stack["content"])
}

func (c *current) onInlinePassthrough43() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough43()
}

func (c *current) onInlinePassthrough57() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough57()
}

func (c *current) onInlinePassthrough36() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlinePassthrough36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough36()
}

func (c *current) onInlinePassthrough72() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough72()
}

func (c *current) onInlinePassthrough67() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlinePassthrough67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough67()
}

func (c *current) onInlinePassthrough31(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonInlinePassthrough31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough31(stack["content"])
}

func (c *current) onPassthroughMacro7() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacro7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro7()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro17() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacro17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro17()
}

func (c *current) onPassthroughMacro10(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro10(stack["content"])
}

func (c *current) onCrossReference6() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonCrossReference6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference6()
}

func (c *current) onCrossReference12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReference12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference12()
}

func (c *current) onCrossReference18() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference18()
}

func (c *current) onCrossReference27() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReference27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference27()
}

func (c *current) onCrossReference23(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonCrossReference23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference23(stack["name"])
}

func (c *current) onCrossReference33() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference33()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)
}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference40() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonCrossReference40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference40()
}

func (c *current) onCrossReference36(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)
}

func (p *parser) callonCrossReference36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference36(stack["id"])
}

func (c *current) onExternalCrossReference9() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonExternalCrossReference9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference9()
}

func (c *current) onExternalCrossReference16() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalCrossReference16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference16()
}

func (c *current) onExternalCrossReference12(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonExternalCrossReference12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference12(stack["ref"])
}

func (c *current) onExternalCrossReference5(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonExternalCrossReference5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference5(stack["path"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink18() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonRelativeLink18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink18()
}

func (c *current) onRelativeLink25() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink25()
}

func (c *current) onRelativeLink21(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonRelativeLink21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink21(stack["ref"])
}

func (c *current) onRelativeLink5(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonRelativeLink5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink5(stack["scheme"], stack["path"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink16() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonExternalLink16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink16()
}

func (c *current) onExternalLink23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink23()
}

func (c *current) onExternalLink19(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonExternalLink19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink19(stack["ref"])
}

func (c *current) onExternalLink4(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonExternalLink4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink4(stack["scheme"], stack["path"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock3() (bool, error) {
	// AttrPositional1 must not be set
	return types.HasNotAttribute(c.globalStore.getAttributes(), types.AttrPositional1), nil

}

func (p *parser) callonImageBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock3()
}

func (c *current) onImageBlock19() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonImageBlock19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock19()
}

func (c *current) onImageBlock26() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImageBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock26()
}

func (c *current) onImageBlock22(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonImageBlock22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock22(stack["ref"])
}

func (c *current) onImageBlock6(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonImageBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock6(stack["scheme"], stack["path"])
}

func (c *current) onImageBlock35() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImageBlock35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock35()
}

func (c *current) onImageBlock1(path, inlineAttributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore.getAttributes())
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage20() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlineImage20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage20()
}

func (c *current) onInlineImage27() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineImage27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage27()
}

func (c *current) onInlineImage23(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineImage23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage23(stack["ref"])
}

func (c *current) onInlineImage7(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonInlineImage7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage7(stack["scheme"], stack["path"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineFootnote12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote12()
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCallout12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout12()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItem8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem8()
}

func (c *current) onCalloutListItem15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCalloutListItem15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem15()
}

func (c *current) onCalloutListItem4(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItem4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem4(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onDelimitedBlock13() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock13()
}

func (c *current) onDelimitedBlock31() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock31()
}

func (c *current) onDelimitedBlock47() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock47()
}

func (c *current) onDelimitedBlock41(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDelimitedBlock41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock41(stack["content"])
}

func (c *current) onDelimitedBlock22(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonDelimitedBlock22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock22(stack["line"])
}

func (c *current) onDelimitedBlock61() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock61()
}

func (c *current) onDelimitedBlock7(content interface{}) (interface{}, error) {
	return types.NewFencedBlock(content.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonDelimitedBlock7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock7(stack["content"])
}

func (c *current) onDelimitedBlock76() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock76()
}

func (c *current) onDelimitedBlock94() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock94()
}

func (c *current) onDelimitedBlock110() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock110()
}

func (c *current) onDelimitedBlock104(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDelimitedBlock104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock104(stack["content"])
}

func (c *current) onDelimitedBlock85(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonDelimitedBlock85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock85(stack["line"])
}

func (c *current) onDelimitedBlock124() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock124()
}

func (c *current) onDelimitedBlock70(content interface{}) (interface{}, error) {
	return types.NewListingBlock(content.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonDelimitedBlock70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock70(stack["content"])
}

func (c *current) onDelimitedBlock136() (bool, error) {
	// AttrPositional1 must be equal to `verse`
	return types.HasAttributeWithValue(c.globalStore.getAttributes(), types.AttrPositional1, types.Verse), nil

}

func (p *parser) callonDelimitedBlock136() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock136()
}

func (c *current) onDelimitedBlock141() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock141()
}

func (c *current) onDelimitedBlock159() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock159()
}

func (c *current) onDelimitedBlock175() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock175()
}

func (c *current) onDelimitedBlock169(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDelimitedBlock169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock169(stack["content"])
}

func (c *current) onDelimitedBlock150(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonDelimitedBlock150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock150(stack["line"])
}

func (c *current) onDelimitedBlock189() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock189()
}

func (c *current) onDelimitedBlock134(content interface{}) (interface{}, error) {
	return types.NewVerseBlock(content.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonDelimitedBlock134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock134(stack["content"])
}

func (c *current) onDelimitedBlock206() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock206()
}

func (c *current) onDelimitedBlock224() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock224()
}

func (c *current) onDelimitedBlock240() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock240()
}

func (c *current) onDelimitedBlock234(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDelimitedBlock234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock234(stack["content"])
}

func (c *current) onDelimitedBlock215(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonDelimitedBlock215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock215(stack["line"])
}

func (c *current) onDelimitedBlock254() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock254()
}

func (c *current) onDelimitedBlock200(content interface{}) (interface{}, error) {
	return types.NewPassthroughBlock(content.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonDelimitedBlock200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock200(stack["content"])
}

func (c *current) onDelimitedBlock269() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock269()
}

func (c *current) onDelimitedBlock287() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock287()
}

func (c *current) onDelimitedBlock303() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDelimitedBlock303() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock303()
}

func (c *current) onDelimitedBlock297(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDelimitedBlock297() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock297(stack["content"])
}

func (c *current) onDelimitedBlock278(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonDelimitedBlock278() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock278(stack["line"])
}

func (c *current) onDelimitedBlock317() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlock317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock317()
}

func (c *current) onDelimitedBlock263(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)
}

func (p *parser) callonDelimitedBlock263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock263(stack["content"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onExampleBlock7() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlock7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock7()
}

func (c *current) onExampleBlock22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlock22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock22()
}

func (c *current) onExampleBlock1(blocks interface{}) (interface{}, error) {
	return types.NewExampleBlock(blocks.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["blocks"])
}

func (c *current) onExampleBlockRawContent13() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent13()
}

func (c *current) onExampleBlockRawContent25(attributes interface{}) error {
	c.globalStore.pushAttributes(attributes)
	return nil

}

func (p *parser) callonExampleBlockRawContent25() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent25(stack["attributes"])
}

func (c *current) onExampleBlockRawContent31() (bool, error) {
	return types.HasAttributeWithValue(c.globalStore.getAttributes(), types.AttrPositional1, types.Literal), nil

}

func (p *parser) callonExampleBlockRawContent31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent31()
}

func (c *current) onExampleBlockRawContent40() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExampleBlockRawContent40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent40()
}

func (c *current) onExampleBlockRawContent49() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExampleBlockRawContent49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent49()
}

func (c *current) onExampleBlockRawContent36(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent36(stack["elements"])
}

func (c *current) onExampleBlockRawContent33(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonExampleBlockRawContent33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent33(stack["content"])
}

func (c *current) onExampleBlockRawContent76() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent76()
}

func (c *current) onExampleBlockRawContent85() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent85()
}

func (c *current) onExampleBlockRawContent68(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonExampleBlockRawContent68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent68(stack["content"])
}

func (c *current) onExampleBlockRawContent106() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent106()
}

func (c *current) onExampleBlockRawContent118() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent118()
}

func (c *current) onExampleBlockRawContent130() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent130()
}

func (c *current) onExampleBlockRawContent142() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent142()
}

func (c *current) onExampleBlockRawContent154() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent154()
}

func (c *current) onExampleBlockRawContent166() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent166()
}

func (c *current) onExampleBlockRawContent178() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent178()
}

func (c *current) onExampleBlockRawContent186() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent186()
}

func (c *current) onExampleBlockRawContent194(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonExampleBlockRawContent194() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent194(stack["content"])
}

func (c *current) onExampleBlockRawContent93(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExampleBlockRawContent93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent93(stack["content"])
}

func (c *current) onExampleBlockRawContent29(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), c.globalStore.getAttributes())

}

func (p *parser) callonExampleBlockRawContent29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent29(stack["firstLine"], stack["otherLines"])
}

func (c *current) onExampleBlockRawContent203() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent203()
}

func (c *current) onExampleBlockRawContent195() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonExampleBlockRawContent195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent195()
}

func (c *current) onExampleBlockRawContent211() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonExampleBlockRawContent211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent211()
}

func (c *current) onExampleBlockRawContent234() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent234()
}

func (c *current) onExampleBlockRawContent252() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent252()
}

func (c *current) onExampleBlockRawContent268() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExampleBlockRawContent268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent268()
}

func (c *current) onExampleBlockRawContent262(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExampleBlockRawContent262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent262(stack["content"])
}

func (c *current) onExampleBlockRawContent243(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonExampleBlockRawContent243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent243(stack["line"])
}

func (c *current) onExampleBlockRawContent282() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent282()
}

func (c *current) onExampleBlockRawContent228(content interface{}) (interface{}, error) {
	return types.NewFencedBlock(content.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonExampleBlockRawContent228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent228(stack["content"])
}

func (c *current) onExampleBlockRawContent297() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent297() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent297()
}

func (c *current) onExampleBlockRawContent315() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent315() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent315()
}

func (c *current) onExampleBlockRawContent331() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExampleBlockRawContent331() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent331()
}

func (c *current) onExampleBlockRawContent325(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExampleBlockRawContent325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent325(stack["content"])
}

func (c *current) onExampleBlockRawContent306(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonExampleBlockRawContent306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent306(stack["line"])
}

func (c *current) onExampleBlockRawContent345() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent345() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent345()
}

func (c *current) onExampleBlockRawContent291(content interface{}) (interface{}, error) {
	return types.NewListingBlock(content.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonExampleBlockRawContent291() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent291(stack["content"])
}

func (c *current) onExampleBlockRawContent356() (bool, error) {
	// AttrPositional1 must be equal to `verse`
	return types.HasAttributeWithValue(c.globalStore.getAttributes(), types.AttrPositional1, types.Verse), nil

}

func (p *parser) callonExampleBlockRawContent356() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent356()
}

func (c *current) onExampleBlockRawContent361() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent361() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent361()
}

func (c *current) onExampleBlockRawContent379() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent379() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent379()
}

func (c *current) onExampleBlockRawContent395() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExampleBlockRawContent395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent395()
}

func (c *current) onExampleBlockRawContent389(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExampleBlockRawContent389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent389(stack["content"])
}

func (c *current) onExampleBlockRawContent370(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonExampleBlockRawContent370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent370(stack["line"])
}

func (c *current) onExampleBlockRawContent409() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent409() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent409()
}

func (c *current) onExampleBlockRawContent354(content interface{}) (interface{}, error) {
	return types.NewVerseBlock(content.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonExampleBlockRawContent354() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent354(stack["content"])
}

func (c *current) onExampleBlockRawContent428() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent428()
}

func (c *current) onExampleBlockRawContent437() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent437() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent437()
}

func (c *current) onExampleBlockRawContent420(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonExampleBlockRawContent420() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent420(stack["content"])
}

func (c *current) onExampleBlockRawContent451() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent451() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent451()
}

func (c *current) onExampleBlockRawContent469() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent469() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent469()
}

func (c *current) onExampleBlockRawContent485() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExampleBlockRawContent485() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent485()
}

func (c *current) onExampleBlockRawContent479(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExampleBlockRawContent479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent479(stack["content"])
}

func (c *current) onExampleBlockRawContent460(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonExampleBlockRawContent460() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent460(stack["line"])
}

func (c *current) onExampleBlockRawContent499() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent499() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent499()
}

func (c *current) onExampleBlockRawContent445(content interface{}) (interface{}, error) {
	return types.NewPassthroughBlock(content.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonExampleBlockRawContent445() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent445(stack["content"])
}

func (c *current) onExampleBlockRawContent515() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent515()
}

func (c *current) onExampleBlockRawContent533() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent533() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent533()
}

func (c *current) onExampleBlockRawContent549() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExampleBlockRawContent549() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent549()
}

func (c *current) onExampleBlockRawContent543(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExampleBlockRawContent543() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent543(stack["content"])
}

func (c *current) onExampleBlockRawContent524(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonExampleBlockRawContent524() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent524(stack["line"])
}

func (c *current) onExampleBlockRawContent563() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent563() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent563()
}

func (c *current) onExampleBlockRawContent509(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)
}

func (p *parser) callonExampleBlockRawContent509() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent509(stack["content"])
}

func (c *current) onExampleBlockRawContent574() (bool, error) {
	attrs := c.globalStore.getAttributes()
	return types.HasAttributeWithValue(attrs, types.AttrPositional1, types.Literal), nil

}

func (p *parser) callonExampleBlockRawContent574() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent574()
}

func (c *current) onExampleBlockRawContent588() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent588() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent588()
}

func (c *current) onExampleBlockRawContent580() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonExampleBlockRawContent580() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent580()
}

func (c *current) onExampleBlockRawContent596() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonExampleBlockRawContent596() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent596()
}

func (c *current) onExampleBlockRawContent577(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonExampleBlockRawContent577() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent577(stack["content"])
}

func (c *current) onExampleBlockRawContent572(lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonExampleBlockRawContent572() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent572(stack["lines"])
}

func (c *current) onExampleBlockRawContent617() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent617() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent617()
}

func (c *current) onExampleBlockRawContent612() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExampleBlockRawContent612() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent612()
}

func (c *current) onExampleBlockRawContent609(line interface{}) (interface{}, error) {
	// do not include the trailing 'EOL' on the first line
	return line, nil
}

func (p *parser) callonExampleBlockRawContent609() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent609(stack["line"])
}

func (c *current) onExampleBlockRawContent639() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent639() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent639()
}

func (c *current) onExampleBlockRawContent631() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonExampleBlockRawContent631() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent631()
}

func (c *current) onExampleBlockRawContent647() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonExampleBlockRawContent647() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent647()
}

func (c *current) onExampleBlockRawContent628(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonExampleBlockRawContent628() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent628(stack["content"])
}

func (c *current) onExampleBlockRawContent606(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonExampleBlockRawContent606() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent606(stack["firstLine"], stack["otherLines"])
}

func (c *current) onExampleBlockRawContent604(lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonExampleBlockRawContent604() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent604(stack["lines"])
}

func (c *current) onExampleBlockRawContent661() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent661() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent661()
}

func (c *current) onExampleBlockRawContent673() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExampleBlockRawContent673() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent673()
}

func (c *current) onExampleBlockRawContent670(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonExampleBlockRawContent670() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent670(stack["line"])
}

func (c *current) onExampleBlockRawContent667(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonExampleBlockRawContent667() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent667(stack["lines"])
}

func (c *current) onExampleBlockRawContent690() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent690() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent690()
}

func (c *current) onExampleBlockRawContent655(lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonExampleBlockRawContent655() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent655(stack["lines"])
}

func (c *current) onExampleBlockRawContent703() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonExampleBlockRawContent703() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent703()
}

func (c *current) onExampleBlockRawContent705() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonExampleBlockRawContent705() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent705()
}

func (c *current) onExampleBlockRawContent707() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonExampleBlockRawContent707() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent707()
}

func (c *current) onExampleBlockRawContent709() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonExampleBlockRawContent709() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent709()
}

func (c *current) onExampleBlockRawContent711() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonExampleBlockRawContent711() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent711()
}

func (c *current) onExampleBlockRawContent725() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent725() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent725()
}

func (c *current) onExampleBlockRawContent734() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent734() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent734()
}

func (c *current) onExampleBlockRawContent717(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonExampleBlockRawContent717() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent717(stack["content"])
}

func (c *current) onExampleBlockRawContent755() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent755() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent755()
}

func (c *current) onExampleBlockRawContent767() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent767() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent767()
}

func (c *current) onExampleBlockRawContent779() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent779() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent779()
}

func (c *current) onExampleBlockRawContent791() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent791() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent791()
}

func (c *current) onExampleBlockRawContent803() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent803() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent803()
}

func (c *current) onExampleBlockRawContent815() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent815() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent815()
}

func (c *current) onExampleBlockRawContent827() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent827() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent827()
}

func (c *current) onExampleBlockRawContent835() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent835() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent835()
}

func (c *current) onExampleBlockRawContent843(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonExampleBlockRawContent843() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent843(stack["content"])
}

func (c *current) onExampleBlockRawContent742(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExampleBlockRawContent742() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent742(stack["content"])
}

func (c *current) onExampleBlockRawContent699(t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(string), c.globalStore.getAttributes())

}

func (p *parser) callonExampleBlockRawContent699() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent699(stack["t"], stack["lines"])
}

func (c *current) onExampleBlockRawContent860() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent860() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent860()
}

func (c *current) onExampleBlockRawContent852() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonExampleBlockRawContent852() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent852()
}

func (c *current) onExampleBlockRawContent876() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExampleBlockRawContent876() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent876()
}

func (c *current) onExampleBlockRawContent870(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExampleBlockRawContent870() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent870(stack["content"])
}

func (c *current) onExampleBlockRawContent849(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonExampleBlockRawContent849() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent849(stack["content"])
}

func (c *current) onExampleBlockRawContent844(content interface{}) (interface{}, error) {
	return types.NewMarkdownQuoteBlock(content.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonExampleBlockRawContent844() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent844(stack["content"])
}

func (c *current) onExampleBlockRawContent886() (bool, error) {
	// verify that one of the attributes is `kind:passthrough`
	return types.HasAttributeWithValue(c.globalStore.getAttributes(), types.AttrPositional1, types.Passthrough), nil

}

func (p *parser) callonExampleBlockRawContent886() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent886()
}

func (c *current) onExampleBlockRawContent902() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent902() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent902()
}

func (c *current) onExampleBlockRawContent914() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent914() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent914()
}

func (c *current) onExampleBlockRawContent926() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent926() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent926()
}

func (c *current) onExampleBlockRawContent938() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent938() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent938()
}

func (c *current) onExampleBlockRawContent950() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent950() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent950()
}

func (c *current) onExampleBlockRawContent962() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent962() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent962()
}

func (c *current) onExampleBlockRawContent974() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent974() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent974()
}

func (c *current) onExampleBlockRawContent982() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent982() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent982()
}

func (c *current) onExampleBlockRawContent990(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonExampleBlockRawContent990() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent990(stack["content"])
}

func (c *current) onExampleBlockRawContent889(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExampleBlockRawContent889() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent889(stack["content"])
}

func (c *current) onExampleBlockRawContent884(content interface{}) (interface{}, error) {

	return types.NewPassthroughBlock(content.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonExampleBlockRawContent884() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent884(stack["content"])
}

func (c *current) onExampleBlockRawContent1003() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent1003() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent1003()
}

func (c *current) onExampleBlockRawContent1012() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent1012() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent1012()
}

func (c *current) onExampleBlockRawContent995(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonExampleBlockRawContent995() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent995(stack["content"])
}

func (c *current) onExampleBlockRawContent1033() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent1033() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent1033()
}

func (c *current) onExampleBlockRawContent1045() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent1045() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent1045()
}

func (c *current) onExampleBlockRawContent1057() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent1057() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent1057()
}

func (c *current) onExampleBlockRawContent1069() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent1069() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent1069()
}

func (c *current) onExampleBlockRawContent1081() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent1081() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent1081()
}

func (c *current) onExampleBlockRawContent1093() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent1093() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent1093()
}

func (c *current) onExampleBlockRawContent1105() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent1105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent1105()
}

func (c *current) onExampleBlockRawContent1113() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent1113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent1113()
}

func (c *current) onExampleBlockRawContent1121(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonExampleBlockRawContent1121() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent1121(stack["content"])
}

func (c *current) onExampleBlockRawContent1020(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExampleBlockRawContent1020() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent1020(stack["content"])
}

func (c *current) onExampleBlockRawContent991(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonExampleBlockRawContent991() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent991(stack["lines"])
}

func (c *current) onExampleBlockRawContent1128() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExampleBlockRawContent1128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent1128()
}

func (c *current) onExampleBlockRawContent1122() (interface{}, error) {
	// for standalone attributes at the end of the delomited block
	return types.NewStandaloneAttributes(c.globalStore.getAttributes()) // will be discarded anyways

}

func (p *parser) callonExampleBlockRawContent1122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent1122()
}

func (c *current) onExampleBlockRawContent4(attributes, element interface{}) (interface{}, error) {
	c.globalStore.discardAttributes()
	return element, nil

}

func (p *parser) callonExampleBlockRawContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent4(stack["attributes"], stack["element"])
}

func (c *current) onExampleBlockRawContent1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonExampleBlockRawContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent1(stack["elements"])
}

func (c *current) onQuoteBlock3() (bool, error) {
	// AttrPositional1 may be missing or must be equal to `quote`
	attrs := c.globalStore.getAttributes()
	if types.HasNotAttribute(attrs, types.AttrPositional1) ||
		types.HasAttributeWithValue(attrs, types.AttrPositional1, types.Quote) {
		return true, nil
	}
	return false, nil

}

func (p *parser) callonQuoteBlock3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock3()
}

func (c *current) onQuoteBlock8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlock8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock8()
}

func (c *current) onQuoteBlock23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlock23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock23()
}

func (c *current) onQuoteBlock1(content interface{}) (interface{}, error) {
	return types.NewQuoteBlock(content.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["content"])
}

func (c *current) onQuoteBlockRawContent13() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent13()
}

func (c *current) onQuoteBlockRawContent25(attributes interface{}) error {
	c.globalStore.pushAttributes(attributes)
	return nil

}

func (p *parser) callonQuoteBlockRawContent25() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent25(stack["attributes"])
}

func (c *current) onQuoteBlockRawContent31() (bool, error) {
	return types.HasAttributeWithValue(c.globalStore.getAttributes(), types.AttrPositional1, types.Literal), nil

}

func (p *parser) callonQuoteBlockRawContent31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent31()
}

func (c *current) onQuoteBlockRawContent40() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuoteBlockRawContent40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent40()
}

func (c *current) onQuoteBlockRawContent49() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuoteBlockRawContent49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent49()
}

func (c *current) onQuoteBlockRawContent36(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent36(stack["elements"])
}

func (c *current) onQuoteBlockRawContent33(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonQuoteBlockRawContent33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent33(stack["content"])
}

func (c *current) onQuoteBlockRawContent76() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent76()
}

func (c *current) onQuoteBlockRawContent85() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent85()
}

func (c *current) onQuoteBlockRawContent68(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonQuoteBlockRawContent68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent68(stack["content"])
}

func (c *current) onQuoteBlockRawContent106() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent106()
}

func (c *current) onQuoteBlockRawContent118() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent118()
}

func (c *current) onQuoteBlockRawContent130() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent130()
}

func (c *current) onQuoteBlockRawContent142() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent142()
}

func (c *current) onQuoteBlockRawContent154() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent154()
}

func (c *current) onQuoteBlockRawContent166() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent166()
}

func (c *current) onQuoteBlockRawContent178() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent178()
}

func (c *current) onQuoteBlockRawContent186() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent186()
}

func (c *current) onQuoteBlockRawContent194(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonQuoteBlockRawContent194() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent194(stack["content"])
}

func (c *current) onQuoteBlockRawContent93(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonQuoteBlockRawContent93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent93(stack["content"])
}

func (c *current) onQuoteBlockRawContent29(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), c.globalStore.getAttributes())

}

func (p *parser) callonQuoteBlockRawContent29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent29(stack["firstLine"], stack["otherLines"])
}

func (c *current) onQuoteBlockRawContent203() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent203()
}

func (c *current) onQuoteBlockRawContent195() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonQuoteBlockRawContent195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent195()
}

func (c *current) onQuoteBlockRawContent211() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonQuoteBlockRawContent211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent211()
}

func (c *current) onQuoteBlockRawContent234() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent234()
}

func (c *current) onQuoteBlockRawContent252() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent252()
}

func (c *current) onQuoteBlockRawContent268() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuoteBlockRawContent268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent268()
}

func (c *current) onQuoteBlockRawContent262(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonQuoteBlockRawContent262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent262(stack["content"])
}

func (c *current) onQuoteBlockRawContent243(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonQuoteBlockRawContent243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent243(stack["line"])
}

func (c *current) onQuoteBlockRawContent282() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent282()
}

func (c *current) onQuoteBlockRawContent228(content interface{}) (interface{}, error) {
	return types.NewFencedBlock(content.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonQuoteBlockRawContent228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent228(stack["content"])
}

func (c *current) onQuoteBlockRawContent297() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent297() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent297()
}

func (c *current) onQuoteBlockRawContent315() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent315() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent315()
}

func (c *current) onQuoteBlockRawContent331() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuoteBlockRawContent331() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent331()
}

func (c *current) onQuoteBlockRawContent325(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonQuoteBlockRawContent325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent325(stack["content"])
}

func (c *current) onQuoteBlockRawContent306(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonQuoteBlockRawContent306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent306(stack["line"])
}

func (c *current) onQuoteBlockRawContent345() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent345() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent345()
}

func (c *current) onQuoteBlockRawContent291(content interface{}) (interface{}, error) {
	return types.NewListingBlock(content.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonQuoteBlockRawContent291() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent291(stack["content"])
}

func (c *current) onQuoteBlockRawContent356() (bool, error) {
	// AttrPositional1 must be equal to `verse`
	return types.HasAttributeWithValue(c.globalStore.getAttributes(), types.AttrPositional1, types.Verse), nil

}

func (p *parser) callonQuoteBlockRawContent356() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent356()
}

func (c *current) onQuoteBlockRawContent361() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent361() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent361()
}

func (c *current) onQuoteBlockRawContent379() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent379() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent379()
}

func (c *current) onQuoteBlockRawContent395() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuoteBlockRawContent395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent395()
}

func (c *current) onQuoteBlockRawContent389(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonQuoteBlockRawContent389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent389(stack["content"])
}

func (c *current) onQuoteBlockRawContent370(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonQuoteBlockRawContent370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent370(stack["line"])
}

func (c *current) onQuoteBlockRawContent409() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent409() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent409()
}

func (c *current) onQuoteBlockRawContent354(content interface{}) (interface{}, error) {
	return types.NewVerseBlock(content.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonQuoteBlockRawContent354() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent354(stack["content"])
}

func (c *current) onQuoteBlockRawContent428() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent428()
}

func (c *current) onQuoteBlockRawContent437() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent437() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent437()
}

func (c *current) onQuoteBlockRawContent420(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonQuoteBlockRawContent420() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent420(stack["content"])
}

func (c *current) onQuoteBlockRawContent451() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent451() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent451()
}

func (c *current) onQuoteBlockRawContent469() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent469() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent469()
}

func (c *current) onQuoteBlockRawContent485() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuoteBlockRawContent485() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent485()
}

func (c *current) onQuoteBlockRawContent479(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonQuoteBlockRawContent479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent479(stack["content"])
}

func (c *current) onQuoteBlockRawContent460(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonQuoteBlockRawContent460() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent460(stack["line"])
}

func (c *current) onQuoteBlockRawContent499() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent499() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent499()
}

func (c *current) onQuoteBlockRawContent445(content interface{}) (interface{}, error) {
	return types.NewPassthroughBlock(content.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonQuoteBlockRawContent445() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent445(stack["content"])
}

func (c *current) onQuoteBlockRawContent515() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent515()
}

func (c *current) onQuoteBlockRawContent533() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent533() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent533()
}

func (c *current) onQuoteBlockRawContent549() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuoteBlockRawContent549() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent549()
}

func (c *current) onQuoteBlockRawContent543(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonQuoteBlockRawContent543() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent543(stack["content"])
}

func (c *current) onQuoteBlockRawContent524(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonQuoteBlockRawContent524() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent524(stack["line"])
}

func (c *current) onQuoteBlockRawContent563() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent563() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent563()
}

func (c *current) onQuoteBlockRawContent509(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)
}

func (p *parser) callonQuoteBlockRawContent509() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent509(stack["content"])
}

func (c *current) onQuoteBlockRawContent574() (bool, error) {
	attrs := c.globalStore.getAttributes()
	return types.HasAttributeWithValue(attrs, types.AttrPositional1, types.Literal), nil

}

func (p *parser) callonQuoteBlockRawContent574() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent574()
}

func (c *current) onQuoteBlockRawContent588() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent588() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent588()
}

func (c *current) onQuoteBlockRawContent580() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonQuoteBlockRawContent580() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent580()
}

func (c *current) onQuoteBlockRawContent596() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonQuoteBlockRawContent596() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent596()
}

func (c *current) onQuoteBlockRawContent577(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonQuoteBlockRawContent577() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent577(stack["content"])
}

func (c *current) onQuoteBlockRawContent572(lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonQuoteBlockRawContent572() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent572(stack["lines"])
}

func (c *current) onQuoteBlockRawContent617() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent617() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent617()
}

func (c *current) onQuoteBlockRawContent612() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonQuoteBlockRawContent612() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent612()
}

func (c *current) onQuoteBlockRawContent609(line interface{}) (interface{}, error) {
	// do not include the trailing 'EOL' on the first line
	return line, nil
}

func (p *parser) callonQuoteBlockRawContent609() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent609(stack["line"])
}

func (c *current) onQuoteBlockRawContent639() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent639() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent639()
}

func (c *current) onQuoteBlockRawContent631() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonQuoteBlockRawContent631() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent631()
}

func (c *current) onQuoteBlockRawContent647() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonQuoteBlockRawContent647() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent647()
}

func (c *current) onQuoteBlockRawContent628(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonQuoteBlockRawContent628() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent628(stack["content"])
}

func (c *current) onQuoteBlockRawContent606(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonQuoteBlockRawContent606() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent606(stack["firstLine"], stack["otherLines"])
}

func (c *current) onQuoteBlockRawContent604(lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonQuoteBlockRawContent604() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent604(stack["lines"])
}

func (c *current) onQuoteBlockRawContent661() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent661() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent661()
}

func (c *current) onQuoteBlockRawContent673() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonQuoteBlockRawContent673() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent673()
}

func (c *current) onQuoteBlockRawContent670(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonQuoteBlockRawContent670() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent670(stack["line"])
}

func (c *current) onQuoteBlockRawContent667(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonQuoteBlockRawContent667() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent667(stack["lines"])
}

func (c *current) onQuoteBlockRawContent690() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent690() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent690()
}

func (c *current) onQuoteBlockRawContent655(lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonQuoteBlockRawContent655() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent655(stack["lines"])
}

func (c *current) onQuoteBlockRawContent703() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonQuoteBlockRawContent703() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent703()
}

func (c *current) onQuoteBlockRawContent705() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonQuoteBlockRawContent705() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent705()
}

func (c *current) onQuoteBlockRawContent707() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonQuoteBlockRawContent707() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent707()
}

func (c *current) onQuoteBlockRawContent709() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonQuoteBlockRawContent709() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent709()
}

func (c *current) onQuoteBlockRawContent711() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonQuoteBlockRawContent711() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent711()
}

func (c *current) onQuoteBlockRawContent725() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent725() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent725()
}

func (c *current) onQuoteBlockRawContent734() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent734() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent734()
}

func (c *current) onQuoteBlockRawContent717(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonQuoteBlockRawContent717() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent717(stack["content"])
}

func (c *current) onQuoteBlockRawContent755() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent755() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent755()
}

func (c *current) onQuoteBlockRawContent767() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent767() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent767()
}

func (c *current) onQuoteBlockRawContent779() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent779() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent779()
}

func (c *current) onQuoteBlockRawContent791() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent791() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent791()
}

func (c *current) onQuoteBlockRawContent803() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent803() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent803()
}

func (c *current) onQuoteBlockRawContent815() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent815() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent815()
}

func (c *current) onQuoteBlockRawContent827() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent827() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent827()
}

func (c *current) onQuoteBlockRawContent835() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent835() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent835()
}

func (c *current) onQuoteBlockRawContent843(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonQuoteBlockRawContent843() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent843(stack["content"])
}

func (c *current) onQuoteBlockRawContent742(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonQuoteBlockRawContent742() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent742(stack["content"])
}

func (c *current) onQuoteBlockRawContent699(t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(string), c.globalStore.getAttributes())

}

func (p *parser) callonQuoteBlockRawContent699() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent699(stack["t"], stack["lines"])
}

func (c *current) onQuoteBlockRawContent860() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent860() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent860()
}

func (c *current) onQuoteBlockRawContent852() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonQuoteBlockRawContent852() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent852()
}

func (c *current) onQuoteBlockRawContent876() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuoteBlockRawContent876() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent876()
}

func (c *current) onQuoteBlockRawContent870(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonQuoteBlockRawContent870() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent870(stack["content"])
}

func (c *current) onQuoteBlockRawContent849(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonQuoteBlockRawContent849() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent849(stack["content"])
}

func (c *current) onQuoteBlockRawContent844(content interface{}) (interface{}, error) {
	return types.NewMarkdownQuoteBlock(content.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonQuoteBlockRawContent844() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent844(stack["content"])
}

func (c *current) onQuoteBlockRawContent886() (bool, error) {
	// verify that one of the attributes is `kind:passthrough`
	return types.HasAttributeWithValue(c.globalStore.getAttributes(), types.AttrPositional1, types.Passthrough), nil

}

func (p *parser) callonQuoteBlockRawContent886() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent886()
}

func (c *current) onQuoteBlockRawContent902() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent902() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent902()
}

func (c *current) onQuoteBlockRawContent914() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent914() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent914()
}

func (c *current) onQuoteBlockRawContent926() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent926() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent926()
}

func (c *current) onQuoteBlockRawContent938() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent938() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent938()
}

func (c *current) onQuoteBlockRawContent950() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent950() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent950()
}

func (c *current) onQuoteBlockRawContent962() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent962() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent962()
}

func (c *current) onQuoteBlockRawContent974() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent974() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent974()
}

func (c *current) onQuoteBlockRawContent982() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent982() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent982()
}

func (c *current) onQuoteBlockRawContent990(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonQuoteBlockRawContent990() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent990(stack["content"])
}

func (c *current) onQuoteBlockRawContent889(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonQuoteBlockRawContent889() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent889(stack["content"])
}

func (c *current) onQuoteBlockRawContent884(content interface{}) (interface{}, error) {

	return types.NewPassthroughBlock(content.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonQuoteBlockRawContent884() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent884(stack["content"])
}

func (c *current) onQuoteBlockRawContent1003() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent1003() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent1003()
}

func (c *current) onQuoteBlockRawContent1012() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent1012() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent1012()
}

func (c *current) onQuoteBlockRawContent995(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonQuoteBlockRawContent995() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent995(stack["content"])
}

func (c *current) onQuoteBlockRawContent1033() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent1033() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent1033()
}

func (c *current) onQuoteBlockRawContent1045() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent1045() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent1045()
}

func (c *current) onQuoteBlockRawContent1057() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent1057() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent1057()
}

func (c *current) onQuoteBlockRawContent1069() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent1069() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent1069()
}

func (c *current) onQuoteBlockRawContent1081() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent1081() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent1081()
}

func (c *current) onQuoteBlockRawContent1093() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent1093() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent1093()
}

func (c *current) onQuoteBlockRawContent1105() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent1105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent1105()
}

func (c *current) onQuoteBlockRawContent1113() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent1113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent1113()
}

func (c *current) onQuoteBlockRawContent1121(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonQuoteBlockRawContent1121() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent1121(stack["content"])
}

func (c *current) onQuoteBlockRawContent1020(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonQuoteBlockRawContent1020() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent1020(stack["content"])
}

func (c *current) onQuoteBlockRawContent991(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonQuoteBlockRawContent991() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent991(stack["lines"])
}

func (c *current) onQuoteBlockRawContent1129() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteBlockRawContent1129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent1129()
}

func (c *current) onQuoteBlockRawContent1122() (interface{}, error) {
	// for standalone attributes at the end of the delomited block
	return types.NewStandaloneAttributes(c.globalStore.getAttributes()) // will be discarded anyways

}

func (p *parser) callonQuoteBlockRawContent1122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent1122()
}

func (c *current) onQuoteBlockRawContent4(attributes, element interface{}) (interface{}, error) {
	c.globalStore.discardAttributes()
	return element, nil

}

func (p *parser) callonQuoteBlockRawContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent4(stack["attributes"], stack["element"])
}

func (c *current) onQuoteBlockRawContent1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonQuoteBlockRawContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent1(stack["elements"])
}

func (c *current) onSidebarBlock7() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlock7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock7()
}

func (c *current) onSidebarBlock22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlock22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock22()
}

func (c *current) onSidebarBlock1(content interface{}) (interface{}, error) {
	return types.NewSidebarBlock(content.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockRawContent13() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent13()
}

func (c *current) onSidebarBlockRawContent25(attributes interface{}) error {
	c.globalStore.pushAttributes(attributes)
	return nil

}

func (p *parser) callonSidebarBlockRawContent25() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent25(stack["attributes"])
}

func (c *current) onSidebarBlockRawContent31() (bool, error) {
	return types.HasAttributeWithValue(c.globalStore.getAttributes(), types.AttrPositional1, types.Literal), nil

}

func (p *parser) callonSidebarBlockRawContent31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent31()
}

func (c *current) onSidebarBlockRawContent40() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSidebarBlockRawContent40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent40()
}

func (c *current) onSidebarBlockRawContent49() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSidebarBlockRawContent49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent49()
}

func (c *current) onSidebarBlockRawContent36(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent36(stack["elements"])
}

func (c *current) onSidebarBlockRawContent33(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonSidebarBlockRawContent33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent33(stack["content"])
}

func (c *current) onSidebarBlockRawContent76() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent76()
}

func (c *current) onSidebarBlockRawContent85() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent85()
}

func (c *current) onSidebarBlockRawContent68(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSidebarBlockRawContent68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent68(stack["content"])
}

func (c *current) onSidebarBlockRawContent106() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent106()
}

func (c *current) onSidebarBlockRawContent118() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent118()
}

func (c *current) onSidebarBlockRawContent130() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent130()
}

func (c *current) onSidebarBlockRawContent142() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent142()
}

func (c *current) onSidebarBlockRawContent154() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent154()
}

func (c *current) onSidebarBlockRawContent166() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent166()
}

func (c *current) onSidebarBlockRawContent178() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent178()
}

func (c *current) onSidebarBlockRawContent186() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent186()
}

func (c *current) onSidebarBlockRawContent194(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonSidebarBlockRawContent194() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent194(stack["content"])
}

func (c *current) onSidebarBlockRawContent93(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonSidebarBlockRawContent93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent93(stack["content"])
}

func (c *current) onSidebarBlockRawContent29(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), c.globalStore.getAttributes())

}

func (p *parser) callonSidebarBlockRawContent29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent29(stack["firstLine"], stack["otherLines"])
}

func (c *current) onSidebarBlockRawContent203() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent203()
}

func (c *current) onSidebarBlockRawContent195() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonSidebarBlockRawContent195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent195()
}

func (c *current) onSidebarBlockRawContent211() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonSidebarBlockRawContent211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent211()
}

func (c *current) onSidebarBlockRawContent234() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent234()
}

func (c *current) onSidebarBlockRawContent252() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent252()
}

func (c *current) onSidebarBlockRawContent268() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSidebarBlockRawContent268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent268()
}

func (c *current) onSidebarBlockRawContent262(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonSidebarBlockRawContent262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent262(stack["content"])
}

func (c *current) onSidebarBlockRawContent243(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonSidebarBlockRawContent243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent243(stack["line"])
}

func (c *current) onSidebarBlockRawContent282() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent282()
}

func (c *current) onSidebarBlockRawContent228(content interface{}) (interface{}, error) {
	return types.NewFencedBlock(content.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonSidebarBlockRawContent228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent228(stack["content"])
}

func (c *current) onSidebarBlockRawContent297() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent297() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent297()
}

func (c *current) onSidebarBlockRawContent315() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent315() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent315()
}

func (c *current) onSidebarBlockRawContent331() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSidebarBlockRawContent331() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent331()
}

func (c *current) onSidebarBlockRawContent325(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonSidebarBlockRawContent325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent325(stack["content"])
}

func (c *current) onSidebarBlockRawContent306(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonSidebarBlockRawContent306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent306(stack["line"])
}

func (c *current) onSidebarBlockRawContent345() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent345() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent345()
}

func (c *current) onSidebarBlockRawContent291(content interface{}) (interface{}, error) {
	return types.NewListingBlock(content.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonSidebarBlockRawContent291() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent291(stack["content"])
}

func (c *current) onSidebarBlockRawContent356() (bool, error) {
	// AttrPositional1 must be equal to `verse`
	return types.HasAttributeWithValue(c.globalStore.getAttributes(), types.AttrPositional1, types.Verse), nil

}

func (p *parser) callonSidebarBlockRawContent356() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent356()
}

func (c *current) onSidebarBlockRawContent361() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent361() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent361()
}

func (c *current) onSidebarBlockRawContent379() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent379() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent379()
}

func (c *current) onSidebarBlockRawContent395() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSidebarBlockRawContent395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent395()
}

func (c *current) onSidebarBlockRawContent389(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonSidebarBlockRawContent389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent389(stack["content"])
}

func (c *current) onSidebarBlockRawContent370(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonSidebarBlockRawContent370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent370(stack["line"])
}

func (c *current) onSidebarBlockRawContent409() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent409() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent409()
}

func (c *current) onSidebarBlockRawContent354(content interface{}) (interface{}, error) {
	return types.NewVerseBlock(content.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonSidebarBlockRawContent354() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent354(stack["content"])
}

func (c *current) onSidebarBlockRawContent428() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent428()
}

func (c *current) onSidebarBlockRawContent437() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent437() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent437()
}

func (c *current) onSidebarBlockRawContent420(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSidebarBlockRawContent420() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent420(stack["content"])
}

func (c *current) onSidebarBlockRawContent451() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent451() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent451()
}

func (c *current) onSidebarBlockRawContent469() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent469() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent469()
}

func (c *current) onSidebarBlockRawContent485() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSidebarBlockRawContent485() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent485()
}

func (c *current) onSidebarBlockRawContent479(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonSidebarBlockRawContent479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent479(stack["content"])
}

func (c *current) onSidebarBlockRawContent460(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonSidebarBlockRawContent460() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent460(stack["line"])
}

func (c *current) onSidebarBlockRawContent499() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent499() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent499()
}

func (c *current) onSidebarBlockRawContent445(content interface{}) (interface{}, error) {
	return types.NewPassthroughBlock(content.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonSidebarBlockRawContent445() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent445(stack["content"])
}

func (c *current) onSidebarBlockRawContent515() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent515()
}

func (c *current) onSidebarBlockRawContent533() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent533() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent533()
}

func (c *current) onSidebarBlockRawContent549() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSidebarBlockRawContent549() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent549()
}

func (c *current) onSidebarBlockRawContent543(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonSidebarBlockRawContent543() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent543(stack["content"])
}

func (c *current) onSidebarBlockRawContent524(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonSidebarBlockRawContent524() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent524(stack["line"])
}

func (c *current) onSidebarBlockRawContent563() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent563() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent563()
}

func (c *current) onSidebarBlockRawContent509(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)
}

func (p *parser) callonSidebarBlockRawContent509() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent509(stack["content"])
}

func (c *current) onSidebarBlockRawContent574() (bool, error) {
	attrs := c.globalStore.getAttributes()
	return types.HasAttributeWithValue(attrs, types.AttrPositional1, types.Literal), nil

}

func (p *parser) callonSidebarBlockRawContent574() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent574()
}

func (c *current) onSidebarBlockRawContent588() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent588() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent588()
}

func (c *current) onSidebarBlockRawContent580() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonSidebarBlockRawContent580() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent580()
}

func (c *current) onSidebarBlockRawContent596() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonSidebarBlockRawContent596() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent596()
}

func (c *current) onSidebarBlockRawContent577(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonSidebarBlockRawContent577() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent577(stack["content"])
}

func (c *current) onSidebarBlockRawContent572(lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonSidebarBlockRawContent572() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent572(stack["lines"])
}

func (c *current) onSidebarBlockRawContent617() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent617() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent617()
}

func (c *current) onSidebarBlockRawContent612() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonSidebarBlockRawContent612() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent612()
}

func (c *current) onSidebarBlockRawContent609(line interface{}) (interface{}, error) {
	// do not include the trailing 'EOL' on the first line
	return line, nil
}

func (p *parser) callonSidebarBlockRawContent609() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent609(stack["line"])
}

func (c *current) onSidebarBlockRawContent639() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent639() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent639()
}

func (c *current) onSidebarBlockRawContent631() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonSidebarBlockRawContent631() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent631()
}

func (c *current) onSidebarBlockRawContent647() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonSidebarBlockRawContent647() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent647()
}

func (c *current) onSidebarBlockRawContent628(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonSidebarBlockRawContent628() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent628(stack["content"])
}

func (c *current) onSidebarBlockRawContent606(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonSidebarBlockRawContent606() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent606(stack["firstLine"], stack["otherLines"])
}

func (c *current) onSidebarBlockRawContent604(lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonSidebarBlockRawContent604() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent604(stack["lines"])
}

func (c *current) onSidebarBlockRawContent661() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent661() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent661()
}

func (c *current) onSidebarBlockRawContent673() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonSidebarBlockRawContent673() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent673()
}

func (c *current) onSidebarBlockRawContent670(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonSidebarBlockRawContent670() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent670(stack["line"])
}

func (c *current) onSidebarBlockRawContent667(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonSidebarBlockRawContent667() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent667(stack["lines"])
}

func (c *current) onSidebarBlockRawContent690() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent690() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent690()
}

func (c *current) onSidebarBlockRawContent655(lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), c.globalStore.getAttributes())
}

func (p *parser) callonSidebarBlockRawContent655() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent655(stack["lines"])
}

func (c *current) onSidebarBlockRawContent703() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonSidebarBlockRawContent703() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent703()
}

func (c *current) onSidebarBlockRawContent705() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonSidebarBlockRawContent705() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent705()
}

func (c *current) onSidebarBlockRawContent707() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonSidebarBlockRawContent707() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent707()
}

func (c *current) onSidebarBlockRawContent709() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonSidebarBlockRawContent709() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent709()
}

func (c *current) onSidebarBlockRawContent711() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonSidebarBlockRawContent711() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent711()
}

func (c *current) onSidebarBlockRawContent725() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent725() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent725()
}

func (c *current) onSidebarBlockRawContent734() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent734() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent734()
}

func (c *current) onSidebarBlockRawContent717(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSidebarBlockRawContent717() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent717(stack["content"])
}

func (c *current) onSidebarBlockRawContent755() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent755() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent755()
}

func (c *current) onSidebarBlockRawContent767() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent767() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent767()
}

func (c *current) onSidebarBlockRawContent779() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent779() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent779()
}

func (c *current) onSidebarBlockRawContent791() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent791() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent791()
}

func (c *current) onSidebarBlockRawContent803() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent803() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent803()
}

func (c *current) onSidebarBlockRawContent815() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent815() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent815()
}

func (c *current) onSidebarBlockRawContent827() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent827() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent827()
}

func (c *current) onSidebarBlockRawContent835() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent835() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent835()
}

func (c *current) onSidebarBlockRawContent843(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonSidebarBlockRawContent843() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent843(stack["content"])
}

func (c *current) onSidebarBlockRawContent742(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonSidebarBlockRawContent742() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent742(stack["content"])
}

func (c *current) onSidebarBlockRawContent699(t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(string), c.globalStore.getAttributes())

}

func (p *parser) callonSidebarBlockRawContent699() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent699(stack["t"], stack["lines"])
}

func (c *current) onSidebarBlockRawContent860() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent860() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent860()
}

func (c *current) onSidebarBlockRawContent852() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonSidebarBlockRawContent852() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent852()
}

func (c *current) onSidebarBlockRawContent876() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSidebarBlockRawContent876() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent876()
}

func (c *current) onSidebarBlockRawContent870(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonSidebarBlockRawContent870() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent870(stack["content"])
}

func (c *current) onSidebarBlockRawContent849(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonSidebarBlockRawContent849() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent849(stack["content"])
}

func (c *current) onSidebarBlockRawContent844(content interface{}) (interface{}, error) {
	return types.NewMarkdownQuoteBlock(content.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonSidebarBlockRawContent844() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent844(stack["content"])
}

func (c *current) onSidebarBlockRawContent886() (bool, error) {
	// verify that one of the attributes is `kind:passthrough`
	return types.HasAttributeWithValue(c.globalStore.getAttributes(), types.AttrPositional1, types.Passthrough), nil

}

func (p *parser) callonSidebarBlockRawContent886() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent886()
}

func (c *current) onSidebarBlockRawContent902() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent902() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent902()
}

func (c *current) onSidebarBlockRawContent914() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent914() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent914()
}

func (c *current) onSidebarBlockRawContent926() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent926() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent926()
}

func (c *current) onSidebarBlockRawContent938() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent938() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent938()
}

func (c *current) onSidebarBlockRawContent950() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent950() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent950()
}

func (c *current) onSidebarBlockRawContent962() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent962() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent962()
}

func (c *current) onSidebarBlockRawContent974() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent974() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent974()
}

func (c *current) onSidebarBlockRawContent982() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent982() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent982()
}

func (c *current) onSidebarBlockRawContent990(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonSidebarBlockRawContent990() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent990(stack["content"])
}

func (c *current) onSidebarBlockRawContent889(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonSidebarBlockRawContent889() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent889(stack["content"])
}

func (c *current) onSidebarBlockRawContent884(content interface{}) (interface{}, error) {

	return types.NewPassthroughBlock(content.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonSidebarBlockRawContent884() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent884(stack["content"])
}

func (c *current) onSidebarBlockRawContent1003() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent1003() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent1003()
}

func (c *current) onSidebarBlockRawContent1012() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent1012() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent1012()
}

func (c *current) onSidebarBlockRawContent995(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSidebarBlockRawContent995() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent995(stack["content"])
}

func (c *current) onSidebarBlockRawContent1033() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent1033() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent1033()
}

func (c *current) onSidebarBlockRawContent1045() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent1045() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent1045()
}

func (c *current) onSidebarBlockRawContent1057() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent1057() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent1057()
}

func (c *current) onSidebarBlockRawContent1069() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent1069() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent1069()
}

func (c *current) onSidebarBlockRawContent1081() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent1081() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent1081()
}

func (c *current) onSidebarBlockRawContent1093() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent1093() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent1093()
}

func (c *current) onSidebarBlockRawContent1105() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent1105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent1105()
}

func (c *current) onSidebarBlockRawContent1113() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent1113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent1113()
}

func (c *current) onSidebarBlockRawContent1121(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonSidebarBlockRawContent1121() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent1121(stack["content"])
}

func (c *current) onSidebarBlockRawContent1020(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonSidebarBlockRawContent1020() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent1020(stack["content"])
}

func (c *current) onSidebarBlockRawContent991(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonSidebarBlockRawContent991() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent991(stack["lines"])
}

func (c *current) onSidebarBlockRawContent1129() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSidebarBlockRawContent1129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent1129()
}

func (c *current) onSidebarBlockRawContent1122() (interface{}, error) {
	// for standalone attributes at the end of the delomited block
	return types.NewStandaloneAttributes(c.globalStore.getAttributes()) // will be discarded anyways

}

func (p *parser) callonSidebarBlockRawContent1122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent1122()
}

func (c *current) onSidebarBlockRawContent4(attributes, element interface{}) (interface{}, error) {
	c.globalStore.discardAttributes()
	return element, nil

}

func (p *parser) callonSidebarBlockRawContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent4(stack["attributes"], stack["element"])
}

func (c *current) onSidebarBlockRawContent1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSidebarBlockRawContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent1(stack["elements"])
}

func (c *current) onInlineMacros13() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonInlineMacros13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacros13()
}

func (c *current) onInlineMacros20() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacros20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacros20()
}

func (c *current) onInlineMacros9(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineMacros9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacros9(stack["id"])
}

func (c *current) onInlineMacros30() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacros30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacros30()
}

func (c *current) onInlineMacros26() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacros26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacros26()
}

func (c *current) onInlineMacros39() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacros39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacros39()
}

func (c *current) onInlineMacros45() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacros45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacros45()
}

func (c *current) onInlineMacros52() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacros52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacros52()
}

func (c *current) onInlineMacros48() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacros48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacros48()
}

func (c *current) onInlineMacros34(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacros34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacros34(stack["content"])
}

func (c *current) onInlineMacros61() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacros61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacros61()
}

func (c *current) onInlineMacros67() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacros67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacros67()
}

func (c *current) onInlineMacros74() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacros74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacros74()
}

func (c *current) onInlineMacros70() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacros70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacros70()
}

func (c *current) onInlineMacros56(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacros56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacros56(stack["content"])
}

func (c *current) onInlineMacros22(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonInlineMacros22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacros22(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onInlinePassthroughSubs5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthroughSubs5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthroughSubs5()
}

func (c *current) onInlinePassthroughSubs14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthroughSubs14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthroughSubs14()
}

func (c *current) onInlinePassthroughSubs23() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthroughSubs23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthroughSubs23()
}

func (c *current) onInlinePassthroughSubs36() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlinePassthroughSubs36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthroughSubs36()
}

func (c *current) onInlinePassthroughSubs32(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlinePassthroughSubs32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthroughSubs32(stack["ref"])
}

func (c *current) onInlinePassthroughSubs43() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlinePassthroughSubs43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthroughSubs43()
}

func (c *current) onInlinePassthroughSubs45() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlinePassthroughSubs45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthroughSubs45()
}

func (c *current) onSpecialCharacterSubs4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacterSubs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacterSubs4()
}

func (c *current) onSpecialCharacterSubs13() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacterSubs13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacterSubs13()
}

func (c *current) onSpecialCharacterSubs22() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacterSubs22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacterSubs22()
}

func (c *current) onSpecialCharacterSubs37() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonSpecialCharacterSubs37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacterSubs37()
}

func (c *current) onSpecialCharacterSubs43() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpecialCharacterSubs43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacterSubs43()
}

func (c *current) onSpecialCharacterSubs49() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacterSubs49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacterSubs49()
}

func (c *current) onSpecialCharacterSubs58() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpecialCharacterSubs58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacterSubs58()
}

func (c *current) onSpecialCharacterSubs54(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonSpecialCharacterSubs54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacterSubs54(stack["name"])
}

func (c *current) onSpecialCharacterSubs64() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacterSubs64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacterSubs64()
}

func (c *current) onSpecialCharacterSubs33(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)
}

func (p *parser) callonSpecialCharacterSubs33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacterSubs33(stack["id"], stack["label"])
}

func (c *current) onSpecialCharacterSubs71() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonSpecialCharacterSubs71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacterSubs71()
}

func (c *current) onSpecialCharacterSubs67(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)
}

func (p *parser) callonSpecialCharacterSubs67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacterSubs67(stack["id"])
}

func (c *current) onSpecialCharacterSubs31() (interface{}, error) {
	// if we have a InternalCrossReference we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacterSubs31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacterSubs31()
}

func (c *current) onSpecialCharacterSubs75() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacterSubs75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacterSubs75()
}

func (c *current) onSpecialCharacterSubs81() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpecialCharacterSubs81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacterSubs81()
}

func (c *current) onSpecialCharacterSubs77(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSpecialCharacterSubs77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacterSubs77(stack["ref"])
}

func (c *current) onSpecialCharacterSubs88() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpecialCharacterSubs88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacterSubs88()
}

func (c *current) onSpecialCharacterSubs90() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSpecialCharacterSubs90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacterSubs90()
}

func (c *current) onQuotedTextSubs4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotedTextSubs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextSubs4()
}

func (c *current) onQuotedTextSubs13() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotedTextSubs13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextSubs13()
}

func (c *current) onQuotedTextSubs22() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotedTextSubs22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextSubs22()
}

func (c *current) onQuotedTextSubs34() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuotedTextSubs34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextSubs34()
}

func (c *current) onQuotedTextSubs42() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuotedTextSubs42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextSubs42()
}

func (c *current) onQuotedTextSubs38(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonQuotedTextSubs38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextSubs38(stack["ref"])
}

func (c *current) onQuotedTextSubs46() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedTextSubs46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextSubs46()
}

func (c *current) onAttributeSubs4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeSubs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubs4()
}

func (c *current) onAttributeSubs13() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeSubs13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubs13()
}

func (c *current) onAttributeSubs22() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeSubs22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubs22()
}

func (c *current) onAttributeSubs34() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeSubs34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubs34()
}

func (c *current) onAttributeSubs40() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeSubs40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubs40()
}

func (c *current) onAttributeSubs52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeSubs52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubs52()
}

func (c *current) onAttributeSubs54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeSubs54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubs54()
}

func (c *current) onAttributeSubs47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeSubs47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubs47(stack["start"])
}

func (c *current) onAttributeSubs36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonAttributeSubs36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubs36(stack["name"], stack["start"])
}

func (c *current) onAttributeSubs62() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeSubs62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubs62()
}

func (c *current) onAttributeSubs74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeSubs74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubs74()
}

func (c *current) onAttributeSubs76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeSubs76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubs76()
}

func (c *current) onAttributeSubs69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeSubs69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubs69(stack["start"])
}

func (c *current) onAttributeSubs58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonAttributeSubs58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubs58(stack["name"], stack["start"])
}

func (c *current) onAttributeSubs84() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeSubs84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubs84()
}

func (c *current) onAttributeSubs80(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeSubs80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubs80(stack["name"])
}

func (c *current) onAttributeSubs94() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeSubs94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubs94()
}

func (c *current) onAttributeSubs90(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonAttributeSubs90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubs90(stack["ref"])
}

func (c *current) onAttributeSubs98() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeSubs98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubs98()
}

func (c *current) onInlineMacroSubs4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineMacroSubs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacroSubs4()
}

func (c *current) onInlineMacroSubs13() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineMacroSubs13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacroSubs13()
}

func (c *current) onInlineMacroSubs22() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineMacroSubs22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacroSubs22()
}

func (c *current) onInlineMacroSubs34() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacroSubs34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacroSubs34()
}

func (c *current) onInlineMacroSubs41() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacroSubs41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacroSubs41()
}

func (c *current) onInlineMacroSubs37(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineMacroSubs37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacroSubs37(stack["ref"])
}

func (c *current) onInlineMacroSubs45() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonInlineMacroSubs45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacroSubs45()
}

func (c *current) onMarkdownQuoteMacroSubs1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonMarkdownQuoteMacroSubs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteMacroSubs1(stack["lines"])
}

func (c *current) onMarkdownQuoteLine6() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonMarkdownQuoteLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine6()
}

func (c *current) onMarkdownQuoteLine15() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonMarkdownQuoteLine15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine15()
}

func (c *current) onMarkdownQuoteLine24() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonMarkdownQuoteLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine24()
}

func (c *current) onMarkdownQuoteLine36() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMarkdownQuoteLine36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine36()
}

func (c *current) onMarkdownQuoteLine43() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMarkdownQuoteLine43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine43()
}

func (c *current) onMarkdownQuoteLine39(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonMarkdownQuoteLine39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine39(stack["ref"])
}

func (c *current) onMarkdownQuoteLine47() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonMarkdownQuoteLine47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine47()
}

func (c *current) onMarkdownQuoteLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonMarkdownQuoteLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine1(stack["elements"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onReplacementSubs4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonReplacementSubs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementSubs4()
}

func (c *current) onReplacementSubs13() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonReplacementSubs13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementSubs13()
}

func (c *current) onReplacementSubs22() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonReplacementSubs22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementSubs22()
}

func (c *current) onReplacementSubs34() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonReplacementSubs34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementSubs34()
}

func (c *current) onReplacementSubs36() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonReplacementSubs36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementSubs36()
}

func (c *current) onReplacementSubs38() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonReplacementSubs38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementSubs38()
}

func (c *current) onReplacementSubs40() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonReplacementSubs40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementSubs40()
}

func (c *current) onReplacementSubs42() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonReplacementSubs42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementSubs42()
}

func (c *current) onReplacementSubs44() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonReplacementSubs44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementSubs44()
}

func (c *current) onReplacementSubs46() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonReplacementSubs46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementSubs46()
}

func (c *current) onReplacementSubs56() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonReplacementSubs56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementSubs56()
}

func (c *current) onReplacementSubs52(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonReplacementSubs52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementSubs52(stack["ref"])
}

func (c *current) onReplacementSubs60() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonReplacementSubs60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacementSubs60()
}

func (c *current) onPostReplacementSubs4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPostReplacementSubs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementSubs4()
}

func (c *current) onPostReplacementSubs13() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPostReplacementSubs13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementSubs13()
}

func (c *current) onPostReplacementSubs22() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPostReplacementSubs22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementSubs22()
}

func (c *current) onPostReplacementSubs35() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPostReplacementSubs35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementSubs35()
}

func (c *current) onPostReplacementSubs31(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonPostReplacementSubs31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementSubs31(stack["ref"])
}

func (c *current) onPostReplacementSubs43() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPostReplacementSubs43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementSubs43()
}

func (c *current) onPostReplacementSubs49() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPostReplacementSubs49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementSubs49()
}

func (c *current) onPostReplacementSubs39() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonPostReplacementSubs39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementSubs39()
}

func (c *current) onPostReplacementSubs60() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPostReplacementSubs60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementSubs60()
}

func (c *current) onPostReplacementSubs62() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPostReplacementSubs62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostReplacementSubs62()
}

func (c *current) onCalloutSubs4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCalloutSubs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutSubs4()
}

func (c *current) onCalloutSubs13() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCalloutSubs13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutSubs13()
}

func (c *current) onCalloutSubs22() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCalloutSubs22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutSubs22()
}

func (c *current) onCalloutSubs35() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCalloutSubs35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutSubs35()
}

func (c *current) onCalloutSubs31(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonCalloutSubs31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutSubs31(stack["ref"])
}

func (c *current) onCalloutSubs42() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCalloutSubs42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutSubs42()
}

func (c *current) onCalloutSubs45() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonCalloutSubs45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutSubs45()
}

func (c *current) onNoneSubs8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNoneSubs8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubs8()
}

func (c *current) onNoneSubs4(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonNoneSubs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubs4(stack["ref"])
}

func (c *current) onNoneSubs12() (interface{}, error) {
	// just text, including empty lines
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneSubs12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubs12()
}

func (c *current) onTable7() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTable7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable7()
}

func (c *current) onTable26() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTable26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable26()
}

func (c *current) onTable1(header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), c.globalStore.getAttributes())

}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableLineHeader9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader9()
}

func (c *current) onTableLineHeader32() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableLineHeader32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader32()
}

func (c *current) onTableLineHeader24(cells interface{}) (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonTableLineHeader24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader24(stack["cells"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableLine9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine9()
}

func (c *current) onTableLine33() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableLine33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine33()
}

func (c *current) onTableLine25() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonTableLine25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine25()
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell7() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableCell7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell7()
}

func (c *current) onTableCell18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableCell18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell18()
}

func (c *current) onTableCell29() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableCell29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell29()
}

func (c *current) onTableCell35() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableCell35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell35()
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent5() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent5()
}

func (c *current) onIndexTermContent14() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent14()
}

func (c *current) onIndexTermContent26() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent26()
}

func (c *current) onIndexTermContent34() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent34()
}

func (c *current) onIndexTermContent40() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent40()
}

func (c *current) onIndexTermContent46() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent46()
}

func (c *current) onIndexTermContent55() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent55()
}

func (c *current) onIndexTermContent51(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonIndexTermContent51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent51(stack["name"])
}

func (c *current) onIndexTermContent61() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent61()
}

func (c *current) onIndexTermContent30(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)
}

func (p *parser) callonIndexTermContent30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent30(stack["id"], stack["label"])
}

func (c *current) onIndexTermContent68() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent68()
}

func (c *current) onIndexTermContent64(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)
}

func (p *parser) callonIndexTermContent64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent64(stack["id"])
}

func (c *current) onIndexTermContent28() (interface{}, error) {
	// if we have a InternalCrossReference we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent28()
}

func (c *current) onIndexTermContent72() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonIndexTermContent72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent72()
}

func (c *current) onIndexTermContent78() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent78()
}

func (c *current) onIndexTermContent74(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonIndexTermContent74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent74(stack["ref"])
}

func (c *current) onIndexTermContent82() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent82()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onFileLocation5() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFileLocation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation5()
}

func (c *current) onFileLocation12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileLocation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation12()
}

func (c *current) onFileLocation8(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileLocation8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation8(stack["ref"])
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
