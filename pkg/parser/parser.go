// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocRawDocument",
			pos:  position{line: 17, col: 1, offset: 351},
			expr: &actionExpr{
				pos: position{line: 17, col: 24, offset: 374},
				run: (*parser).callonAsciidocRawDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 24, offset: 374},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 24, offset: 374},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 37, offset: 387},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 37, offset: 387},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 51, offset: 401},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 59, offset: 409},
								name: "AsciidocDocumentRawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 86, offset: 436},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 22, col: 1, offset: 540},
			expr: &actionExpr{
				pos: position{line: 22, col: 21, offset: 560},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 22, col: 21, offset: 560},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 22, col: 21, offset: 560},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 22, col: 29, offset: 568},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 22, col: 50, offset: 589},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawFile",
			pos:  position{line: 27, col: 1, offset: 712},
			expr: &actionExpr{
				pos: position{line: 27, col: 12, offset: 723},
				run: (*parser).callonRawFile1,
				expr: &seqExpr{
					pos: position{line: 27, col: 12, offset: 723},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 27, col: 12, offset: 723},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 20, offset: 731},
								name: "RawFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 27, col: 36, offset: 747},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 33, col: 1, offset: 897},
			expr: &actionExpr{
				pos: position{line: 33, col: 17, offset: 913},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 33, col: 17, offset: 913},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 17, offset: 913},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 33, col: 25, offset: 921},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 33, col: 45, offset: 941},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentRawBlocks",
			pos:  position{line: 40, col: 1, offset: 1129},
			expr: &actionExpr{
				pos: position{line: 40, col: 30, offset: 1158},
				run: (*parser).callonAsciidocDocumentRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 40, col: 30, offset: 1158},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 40, col: 30, offset: 1158},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 40, col: 38, offset: 1166},
								expr: &ruleRefExpr{
									pos:  position{line: 40, col: 38, offset: 1166},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 40, col: 55, offset: 1183},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 40, col: 63, offset: 1191},
								expr: &ruleRefExpr{
									pos:  position{line: 40, col: 63, offset: 1191},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 49, col: 1, offset: 1452},
			expr: &choiceExpr{
				pos: position{line: 50, col: 9, offset: 1482},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 50, col: 9, offset: 1482},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1548},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1570},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1597},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1650},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1669},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1695},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1720},
						name: "RawVerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1749},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1774},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1801},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1831},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 11, offset: 1858},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 63, col: 11, offset: 1894},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 64, col: 11, offset: 1919},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 65, col: 11, offset: 1952},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 66, col: 11, offset: 1979},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 11, offset: 2017},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 68, col: 11, offset: 2043},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 69, col: 11, offset: 2075},
						name: "RawParagraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 71, col: 1, offset: 2091},
			expr: &labeledExpr{
				pos:   position{line: 71, col: 47, offset: 2137},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 71, col: 54, offset: 2144},
					expr: &ruleRefExpr{
						pos:  position{line: 71, col: 55, offset: 2145},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 73, col: 1, offset: 2184},
			expr: &actionExpr{
				pos: position{line: 73, col: 38, offset: 2221},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 73, col: 38, offset: 2221},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 73, col: 38, offset: 2221},
							expr: &ruleRefExpr{
								pos:  position{line: 73, col: 39, offset: 2222},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 74, col: 5, offset: 2232},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 75, col: 9, offset: 2249},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 75, col: 9, offset: 2249},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2271},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2297},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2349},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2374},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2403},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2428},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2455},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 11, offset: 2485},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 84, col: 11, offset: 2512},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 85, col: 11, offset: 2548},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 86, col: 11, offset: 2573},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 87, col: 11, offset: 2606},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 88, col: 11, offset: 2633},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 89, col: 11, offset: 2671},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 90, col: 11, offset: 2697},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 94, col: 1, offset: 2742},
			expr: &labeledExpr{
				pos:   position{line: 94, col: 23, offset: 2764},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 94, col: 30, offset: 2771},
					expr: &ruleRefExpr{
						pos:  position{line: 94, col: 31, offset: 2772},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 96, col: 1, offset: 2795},
			expr: &actionExpr{
				pos: position{line: 96, col: 22, offset: 2816},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 96, col: 22, offset: 2816},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 96, col: 22, offset: 2816},
							expr: &ruleRefExpr{
								pos:  position{line: 96, col: 23, offset: 2817},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 97, col: 5, offset: 2827},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 97, col: 12, offset: 2834},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 97, col: 12, offset: 2834},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 24, offset: 2846},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 104, col: 1, offset: 3002},
			expr: &ruleRefExpr{
				pos:  position{line: 104, col: 16, offset: 3017},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 106, col: 1, offset: 3037},
			expr: &actionExpr{
				pos: position{line: 106, col: 20, offset: 3056},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 106, col: 20, offset: 3056},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 106, col: 20, offset: 3056},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 106, col: 41, offset: 3077},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 106, col: 49, offset: 3085},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 50, offset: 3086},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 106, col: 75, offset: 3111},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 110, col: 1, offset: 3195},
			expr: &seqExpr{
				pos: position{line: 110, col: 26, offset: 3220},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 110, col: 26, offset: 3220},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 110, col: 32, offset: 3226},
						expr: &ruleRefExpr{
							pos:  position{line: 110, col: 32, offset: 3226},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 39, offset: 3233},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 112, col: 1, offset: 3240},
			expr: &actionExpr{
				pos: position{line: 112, col: 27, offset: 3266},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 112, col: 27, offset: 3266},
					expr: &oneOrMoreExpr{
						pos: position{line: 112, col: 28, offset: 3267},
						expr: &seqExpr{
							pos: position{line: 112, col: 29, offset: 3268},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 112, col: 29, offset: 3268},
									expr: &ruleRefExpr{
										pos:  position{line: 112, col: 30, offset: 3269},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 112, col: 51, offset: 3290,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 119, col: 1, offset: 3463},
			expr: &actionExpr{
				pos: position{line: 119, col: 19, offset: 3481},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 119, col: 19, offset: 3481},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 119, col: 19, offset: 3481},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 119, col: 23, offset: 3485},
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 23, offset: 3485},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 30, offset: 3492},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 37, offset: 3499},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 52, offset: 3514},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 119, col: 56, offset: 3518},
								expr: &ruleRefExpr{
									pos:  position{line: 119, col: 56, offset: 3518},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 119, col: 74, offset: 3536},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 9, offset: 3549},
							expr: &choiceExpr{
								pos: position{line: 120, col: 10, offset: 3550},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 120, col: 10, offset: 3550},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 120, col: 30, offset: 3570},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 121, col: 9, offset: 3594},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 121, col: 18, offset: 3603},
								expr: &ruleRefExpr{
									pos:  position{line: 121, col: 18, offset: 3603},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 9, offset: 3631},
							expr: &choiceExpr{
								pos: position{line: 122, col: 10, offset: 3632},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 122, col: 10, offset: 3632},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 122, col: 30, offset: 3652},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 123, col: 9, offset: 3676},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 123, col: 19, offset: 3686},
								expr: &ruleRefExpr{
									pos:  position{line: 123, col: 19, offset: 3686},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 127, col: 1, offset: 3791},
			expr: &choiceExpr{
				pos: position{line: 127, col: 20, offset: 3810},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 127, col: 20, offset: 3810},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 127, col: 48, offset: 3838},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 129, col: 1, offset: 3870},
			expr: &actionExpr{
				pos: position{line: 129, col: 30, offset: 3899},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 129, col: 30, offset: 3899},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 30, offset: 3899},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 30, offset: 3899},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 129, col: 37, offset: 3906},
							expr: &litMatcher{
								pos:        position{line: 129, col: 38, offset: 3907},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 42, offset: 3911},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 129, col: 51, offset: 3920},
								expr: &ruleRefExpr{
									pos:  position{line: 129, col: 51, offset: 3920},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 129, col: 68, offset: 3937},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 133, col: 1, offset: 4011},
			expr: &actionExpr{
				pos: position{line: 133, col: 33, offset: 4043},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 133, col: 33, offset: 4043},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 133, col: 33, offset: 4043},
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 33, offset: 4043},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 133, col: 40, offset: 4050},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 133, col: 51, offset: 4061},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 59, offset: 4069},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 133, col: 75, offset: 4085},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 137, col: 1, offset: 4168},
			expr: &actionExpr{
				pos: position{line: 137, col: 19, offset: 4186},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 137, col: 19, offset: 4186},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 19, offset: 4186},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 19, offset: 4186},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 26, offset: 4193},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 36, offset: 4203},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 56, offset: 4223},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 137, col: 62, offset: 4229},
								expr: &ruleRefExpr{
									pos:  position{line: 137, col: 63, offset: 4230},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 85, offset: 4252},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 85, offset: 4252},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 137, col: 92, offset: 4259},
							expr: &litMatcher{
								pos:        position{line: 137, col: 92, offset: 4259},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 97, offset: 4264},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 97, offset: 4264},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 142, col: 1, offset: 4414},
			expr: &actionExpr{
				pos: position{line: 142, col: 23, offset: 4436},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 142, col: 23, offset: 4436},
					expr: &charClassMatcher{
						pos:        position{line: 142, col: 23, offset: 4436},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 146, col: 1, offset: 4487},
			expr: &actionExpr{
				pos: position{line: 146, col: 24, offset: 4510},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 146, col: 24, offset: 4510},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 146, col: 24, offset: 4510},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 146, col: 28, offset: 4514},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 146, col: 35, offset: 4521},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 146, col: 36, offset: 4522},
									expr: &charClassMatcher{
										pos:        position{line: 146, col: 36, offset: 4522},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 148, col: 4, offset: 4571},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 154, col: 1, offset: 4738},
			expr: &actionExpr{
				pos: position{line: 154, col: 21, offset: 4758},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 154, col: 21, offset: 4758},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 154, col: 21, offset: 4758},
							expr: &ruleRefExpr{
								pos:  position{line: 154, col: 21, offset: 4758},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 154, col: 28, offset: 4765},
							expr: &litMatcher{
								pos:        position{line: 154, col: 29, offset: 4766},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 154, col: 33, offset: 4770},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 155, col: 9, offset: 4790},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 155, col: 10, offset: 4791},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 155, col: 10, offset: 4791},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 155, col: 10, offset: 4791},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 155, col: 21, offset: 4802},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 155, col: 45, offset: 4826},
													expr: &litMatcher{
														pos:        position{line: 155, col: 45, offset: 4826},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 155, col: 50, offset: 4831},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 155, col: 58, offset: 4839},
														expr: &ruleRefExpr{
															pos:  position{line: 155, col: 59, offset: 4840},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 155, col: 82, offset: 4863},
													expr: &litMatcher{
														pos:        position{line: 155, col: 82, offset: 4863},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 155, col: 87, offset: 4868},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 155, col: 97, offset: 4878},
														expr: &ruleRefExpr{
															pos:  position{line: 155, col: 98, offset: 4879},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 157, col: 15, offset: 4998},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 157, col: 15, offset: 4998},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 157, col: 15, offset: 4998},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 157, col: 24, offset: 5007},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 157, col: 46, offset: 5029},
													expr: &litMatcher{
														pos:        position{line: 157, col: 46, offset: 5029},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 157, col: 51, offset: 5034},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 157, col: 61, offset: 5044},
														expr: &ruleRefExpr{
															pos:  position{line: 157, col: 62, offset: 5045},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 159, col: 13, offset: 5156},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 164, col: 1, offset: 5291},
			expr: &choiceExpr{
				pos: position{line: 164, col: 27, offset: 5317},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 164, col: 27, offset: 5317},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 164, col: 27, offset: 5317},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 164, col: 27, offset: 5317},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 164, col: 32, offset: 5322},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 164, col: 39, offset: 5329},
									expr: &charClassMatcher{
										pos:        position{line: 164, col: 39, offset: 5329},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 166, col: 5, offset: 5379},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 166, col: 5, offset: 5379},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 166, col: 5, offset: 5379},
									expr: &litMatcher{
										pos:        position{line: 166, col: 5, offset: 5379},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 166, col: 11, offset: 5385},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 166, col: 18, offset: 5392},
									expr: &charClassMatcher{
										pos:        position{line: 166, col: 18, offset: 5392},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 166, col: 29, offset: 5403},
									expr: &ruleRefExpr{
										pos:  position{line: 166, col: 29, offset: 5403},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 166, col: 36, offset: 5410},
									expr: &litMatcher{
										pos:        position{line: 166, col: 37, offset: 5411},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 170, col: 1, offset: 5455},
			expr: &actionExpr{
				pos: position{line: 170, col: 25, offset: 5479},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 170, col: 25, offset: 5479},
					expr: &charClassMatcher{
						pos:        position{line: 170, col: 25, offset: 5479},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 174, col: 1, offset: 5529},
			expr: &actionExpr{
				pos: position{line: 174, col: 27, offset: 5555},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 174, col: 27, offset: 5555},
					expr: &charClassMatcher{
						pos:        position{line: 174, col: 27, offset: 5555},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 181, col: 1, offset: 5715},
			expr: &actionExpr{
				pos: position{line: 181, col: 25, offset: 5739},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 181, col: 25, offset: 5739},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 181, col: 25, offset: 5739},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 181, col: 29, offset: 5743},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 35, offset: 5749},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 181, col: 50, offset: 5764},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 182, col: 9, offset: 5778},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 182, col: 15, offset: 5784},
								expr: &actionExpr{
									pos: position{line: 182, col: 16, offset: 5785},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 182, col: 17, offset: 5786},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 182, col: 17, offset: 5786},
												expr: &ruleRefExpr{
													pos:  position{line: 182, col: 17, offset: 5786},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 182, col: 24, offset: 5793},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 182, col: 31, offset: 5800},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 184, col: 13, offset: 5876},
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 13, offset: 5876},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 184, col: 20, offset: 5883},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 191, col: 1, offset: 6130},
			expr: &actionExpr{
				pos: position{line: 191, col: 18, offset: 6147},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 191, col: 18, offset: 6147},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 191, col: 18, offset: 6147},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 191, col: 28, offset: 6157},
							expr: &charClassMatcher{
								pos:        position{line: 191, col: 29, offset: 6158},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 195, col: 1, offset: 6210},
			expr: &actionExpr{
				pos: position{line: 195, col: 30, offset: 6239},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 195, col: 30, offset: 6239},
					expr: &charClassMatcher{
						pos:        position{line: 195, col: 30, offset: 6239},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 199, col: 1, offset: 6288},
			expr: &choiceExpr{
				pos: position{line: 199, col: 19, offset: 6306},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 199, col: 19, offset: 6306},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 199, col: 19, offset: 6306},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 199, col: 19, offset: 6306},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 199, col: 24, offset: 6311},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 199, col: 30, offset: 6317},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 199, col: 45, offset: 6332},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 199, col: 49, offset: 6336},
									expr: &ruleRefExpr{
										pos:  position{line: 199, col: 49, offset: 6336},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 199, col: 56, offset: 6343},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 201, col: 5, offset: 6405},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 201, col: 5, offset: 6405},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 201, col: 5, offset: 6405},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 201, col: 9, offset: 6409},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 15, offset: 6415},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 201, col: 30, offset: 6430},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 201, col: 35, offset: 6435},
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 35, offset: 6435},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 201, col: 42, offset: 6442},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 205, col: 1, offset: 6505},
			expr: &choiceExpr{
				pos: position{line: 205, col: 26, offset: 6530},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 205, col: 26, offset: 6530},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 39, offset: 6543},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 207, col: 1, offset: 6554},
			expr: &actionExpr{
				pos: position{line: 207, col: 12, offset: 6565},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 207, col: 12, offset: 6565},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 207, col: 12, offset: 6565},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 207, col: 16, offset: 6569},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 21, offset: 6574},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 207, col: 35, offset: 6588},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 211, col: 1, offset: 6658},
			expr: &choiceExpr{
				pos: position{line: 211, col: 15, offset: 6672},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 211, col: 15, offset: 6672},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 29, offset: 6686},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 43, offset: 6700},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 61, offset: 6718},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 80, offset: 6737},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 98, offset: 6755},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 213, col: 1, offset: 6775},
			expr: &actionExpr{
				pos: position{line: 213, col: 16, offset: 6790},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 213, col: 16, offset: 6790},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 213, col: 16, offset: 6790},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 213, col: 28, offset: 6802},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 33, offset: 6807},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 47, offset: 6821},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 217, col: 1, offset: 6901},
			expr: &actionExpr{
				pos: position{line: 217, col: 16, offset: 6916},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 217, col: 16, offset: 6916},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 217, col: 16, offset: 6916},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 217, col: 29, offset: 6929},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 34, offset: 6934},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 217, col: 48, offset: 6948},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 221, col: 1, offset: 7027},
			expr: &actionExpr{
				pos: position{line: 221, col: 20, offset: 7046},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 221, col: 20, offset: 7046},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 221, col: 20, offset: 7046},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 32, offset: 7058},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 37, offset: 7063},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 221, col: 51, offset: 7077},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 55, offset: 7081},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 221, col: 61, offset: 7087},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 221, col: 70, offset: 7096},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 225, col: 1, offset: 7178},
			expr: &actionExpr{
				pos: position{line: 225, col: 21, offset: 7198},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 225, col: 21, offset: 7198},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 225, col: 21, offset: 7198},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 225, col: 34, offset: 7211},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 225, col: 39, offset: 7216},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 225, col: 53, offset: 7230},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 225, col: 57, offset: 7234},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 225, col: 63, offset: 7240},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 225, col: 72, offset: 7249},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 229, col: 1, offset: 7330},
			expr: &actionExpr{
				pos: position{line: 229, col: 20, offset: 7349},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 229, col: 20, offset: 7349},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 229, col: 20, offset: 7349},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 229, col: 32, offset: 7361},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 37, offset: 7366},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 229, col: 51, offset: 7380},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 229, col: 55, offset: 7384},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 229, col: 60, offset: 7389},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 229, col: 60, offset: 7389},
									expr: &charClassMatcher{
										pos:        position{line: 229, col: 60, offset: 7389},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 229, col: 108, offset: 7437},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 233, col: 1, offset: 7523},
			expr: &actionExpr{
				pos: position{line: 233, col: 21, offset: 7543},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 233, col: 21, offset: 7543},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 233, col: 21, offset: 7543},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 233, col: 34, offset: 7556},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 39, offset: 7561},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 53, offset: 7575},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 233, col: 57, offset: 7579},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 233, col: 62, offset: 7584},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 233, col: 62, offset: 7584},
									expr: &charClassMatcher{
										pos:        position{line: 233, col: 62, offset: 7584},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 110, offset: 7632},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 237, col: 1, offset: 7717},
			expr: &actionExpr{
				pos: position{line: 237, col: 15, offset: 7731},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 237, col: 15, offset: 7731},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 237, col: 15, offset: 7731},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 237, col: 21, offset: 7737},
								expr: &ruleRefExpr{
									pos:  position{line: 237, col: 22, offset: 7738},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 237, col: 41, offset: 7757},
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 41, offset: 7757},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 241, col: 1, offset: 7831},
			expr: &actionExpr{
				pos: position{line: 241, col: 21, offset: 7851},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 241, col: 21, offset: 7851},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 241, col: 21, offset: 7851},
							expr: &choiceExpr{
								pos: position{line: 241, col: 23, offset: 7853},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 241, col: 23, offset: 7853},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 241, col: 29, offset: 7859},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 242, col: 5, offset: 7937},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 242, col: 11, offset: 7943},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 242, col: 11, offset: 7943},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 243, col: 9, offset: 7965},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 244, col: 9, offset: 7990},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 245, col: 9, offset: 8028},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 246, col: 9, offset: 8057},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 247, col: 9, offset: 8086},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 248, col: 9, offset: 8114},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 249, col: 9, offset: 8142},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 250, col: 9, offset: 8180},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 251, col: 9, offset: 8217},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 255, col: 1, offset: 8324},
			expr: &actionExpr{
				pos: position{line: 255, col: 14, offset: 8337},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 255, col: 14, offset: 8337},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 255, col: 14, offset: 8337},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 255, col: 19, offset: 8342},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 23, offset: 8346},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 255, col: 27, offset: 8350},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 255, col: 32, offset: 8355},
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 32, offset: 8355},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 255, col: 39, offset: 8362},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 259, col: 1, offset: 8418},
			expr: &actionExpr{
				pos: position{line: 259, col: 20, offset: 8437},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 259, col: 20, offset: 8437},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 259, col: 20, offset: 8437},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 259, col: 25, offset: 8442},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 259, col: 29, offset: 8446},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 259, col: 33, offset: 8450},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 259, col: 38, offset: 8455},
							expr: &ruleRefExpr{
								pos:  position{line: 259, col: 38, offset: 8455},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 265, col: 1, offset: 8738},
			expr: &actionExpr{
				pos: position{line: 265, col: 17, offset: 8754},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 265, col: 17, offset: 8754},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 265, col: 17, offset: 8754},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 265, col: 21, offset: 8758},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 28, offset: 8765},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 265, col: 49, offset: 8786},
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 49, offset: 8786},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 265, col: 56, offset: 8793},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 269, col: 1, offset: 8855},
			expr: &actionExpr{
				pos: position{line: 269, col: 24, offset: 8878},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 269, col: 24, offset: 8878},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 269, col: 24, offset: 8878},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 269, col: 32, offset: 8886},
							expr: &charClassMatcher{
								pos:        position{line: 269, col: 32, offset: 8886},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 275, col: 1, offset: 9145},
			expr: &actionExpr{
				pos: position{line: 275, col: 31, offset: 9175},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 275, col: 31, offset: 9175},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 275, col: 31, offset: 9175},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 275, col: 35, offset: 9179},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 275, col: 42, offset: 9186},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 275, col: 42, offset: 9186},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 42, offset: 9186},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 275, col: 57, offset: 9201},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 57, offset: 9201},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 275, col: 69, offset: 9213},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 275, col: 73, offset: 9217},
							expr: &ruleRefExpr{
								pos:  position{line: 275, col: 73, offset: 9217},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 275, col: 80, offset: 9224},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 279, col: 1, offset: 9282},
			expr: &choiceExpr{
				pos: position{line: 279, col: 15, offset: 9296},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 279, col: 15, offset: 9296},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 279, col: 31, offset: 9312},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 279, col: 46, offset: 9327},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 283, col: 1, offset: 9559},
			expr: &actionExpr{
				pos: position{line: 283, col: 18, offset: 9576},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 283, col: 18, offset: 9576},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 283, col: 18, offset: 9576},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 283, col: 22, offset: 9580},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 283, col: 29, offset: 9587},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 283, col: 29, offset: 9587},
										expr: &ruleRefExpr{
											pos:  position{line: 283, col: 29, offset: 9587},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 283, col: 45, offset: 9603},
										expr: &ruleRefExpr{
											pos:  position{line: 283, col: 45, offset: 9603},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 283, col: 60, offset: 9618},
										expr: &ruleRefExpr{
											pos:  position{line: 283, col: 60, offset: 9618},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 283, col: 82, offset: 9640},
										expr: &ruleRefExpr{
											pos:  position{line: 283, col: 82, offset: 9640},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 283, col: 104, offset: 9662},
										expr: &ruleRefExpr{
											pos:  position{line: 283, col: 104, offset: 9662},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 116, offset: 9674},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 120, offset: 9678},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 287, col: 1, offset: 9736},
			expr: &actionExpr{
				pos: position{line: 287, col: 19, offset: 9754},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 287, col: 19, offset: 9754},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 287, col: 25, offset: 9760},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 291, col: 1, offset: 9834},
			expr: &actionExpr{
				pos: position{line: 291, col: 25, offset: 9858},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 291, col: 25, offset: 9858},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 291, col: 25, offset: 9858},
							expr: &ruleRefExpr{
								pos:  position{line: 291, col: 25, offset: 9858},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 291, col: 32, offset: 9865},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 291, col: 36, offset: 9869},
							expr: &ruleRefExpr{
								pos:  position{line: 291, col: 36, offset: 9869},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 291, col: 43, offset: 9876},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 291, col: 49, offset: 9882},
								expr: &ruleRefExpr{
									pos:  position{line: 291, col: 49, offset: 9882},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 298, col: 1, offset: 10039},
			expr: &actionExpr{
				pos: position{line: 298, col: 25, offset: 10063},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 298, col: 25, offset: 10063},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 298, col: 25, offset: 10063},
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 25, offset: 10063},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 298, col: 32, offset: 10070},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 298, col: 36, offset: 10074},
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 36, offset: 10074},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 298, col: 43, offset: 10081},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 298, col: 49, offset: 10087},
								expr: &ruleRefExpr{
									pos:  position{line: 298, col: 49, offset: 10087},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 305, col: 1, offset: 10244},
			expr: &actionExpr{
				pos: position{line: 305, col: 21, offset: 10264},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 305, col: 21, offset: 10264},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 305, col: 21, offset: 10264},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 33, offset: 10276},
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 33, offset: 10276},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 305, col: 40, offset: 10283},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 309, col: 1, offset: 10339},
			expr: &actionExpr{
				pos: position{line: 309, col: 30, offset: 10368},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 309, col: 30, offset: 10368},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 309, col: 30, offset: 10368},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 309, col: 39, offset: 10377},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 39, offset: 10377},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 46, offset: 10384},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 314, col: 1, offset: 10530},
			expr: &actionExpr{
				pos: position{line: 314, col: 30, offset: 10559},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 314, col: 30, offset: 10559},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 314, col: 30, offset: 10559},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 314, col: 34, offset: 10563},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 37, offset: 10566},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 314, col: 53, offset: 10582},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 314, col: 57, offset: 10586},
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 57, offset: 10586},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 64, offset: 10593},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 319, col: 1, offset: 10753},
			expr: &actionExpr{
				pos: position{line: 319, col: 21, offset: 10773},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 319, col: 21, offset: 10773},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 319, col: 21, offset: 10773},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 320, col: 5, offset: 10789},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 320, col: 14, offset: 10798},
								expr: &actionExpr{
									pos: position{line: 320, col: 15, offset: 10799},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 320, col: 15, offset: 10799},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 320, col: 15, offset: 10799},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 320, col: 19, offset: 10803},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 320, col: 24, offset: 10808},
													expr: &ruleRefExpr{
														pos:  position{line: 320, col: 25, offset: 10809},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 321, col: 5, offset: 10865},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 321, col: 12, offset: 10872},
								expr: &actionExpr{
									pos: position{line: 321, col: 13, offset: 10873},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 321, col: 13, offset: 10873},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 321, col: 13, offset: 10873},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 321, col: 17, offset: 10877},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 321, col: 22, offset: 10882},
													expr: &ruleRefExpr{
														pos:  position{line: 321, col: 23, offset: 10883},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 322, col: 5, offset: 10931},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 322, col: 9, offset: 10935},
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 9, offset: 10935},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 322, col: 16, offset: 10942},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 327, col: 1, offset: 11098},
			expr: &actionExpr{
				pos: position{line: 327, col: 19, offset: 11116},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 327, col: 19, offset: 11116},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 327, col: 19, offset: 11116},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 327, col: 23, offset: 11120},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 327, col: 34, offset: 11131},
								expr: &ruleRefExpr{
									pos:  position{line: 327, col: 35, offset: 11132},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 327, col: 54, offset: 11151},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 327, col: 58, offset: 11155},
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 58, offset: 11155},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 327, col: 65, offset: 11162},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 331, col: 1, offset: 11238},
			expr: &choiceExpr{
				pos: position{line: 331, col: 21, offset: 11258},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 331, col: 21, offset: 11258},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 331, col: 49, offset: 11286},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 333, col: 1, offset: 11318},
			expr: &actionExpr{
				pos: position{line: 333, col: 30, offset: 11347},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 333, col: 30, offset: 11347},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 333, col: 30, offset: 11347},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 333, col: 35, offset: 11352},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 333, col: 49, offset: 11366},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 333, col: 53, offset: 11370},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 333, col: 59, offset: 11376},
								expr: &ruleRefExpr{
									pos:  position{line: 333, col: 60, offset: 11377},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 333, col: 77, offset: 11394},
							expr: &litMatcher{
								pos:        position{line: 333, col: 77, offset: 11394},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 333, col: 82, offset: 11399},
							expr: &ruleRefExpr{
								pos:  position{line: 333, col: 82, offset: 11399},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 337, col: 1, offset: 11502},
			expr: &actionExpr{
				pos: position{line: 337, col: 33, offset: 11534},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 337, col: 33, offset: 11534},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 337, col: 33, offset: 11534},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 337, col: 38, offset: 11539},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 337, col: 52, offset: 11553},
							expr: &litMatcher{
								pos:        position{line: 337, col: 52, offset: 11553},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 337, col: 57, offset: 11558},
							expr: &ruleRefExpr{
								pos:  position{line: 337, col: 57, offset: 11558},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 341, col: 1, offset: 11650},
			expr: &actionExpr{
				pos: position{line: 341, col: 17, offset: 11666},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 341, col: 17, offset: 11666},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 341, col: 17, offset: 11666},
							expr: &litMatcher{
								pos:        position{line: 341, col: 18, offset: 11667},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 341, col: 26, offset: 11675},
							expr: &litMatcher{
								pos:        position{line: 341, col: 27, offset: 11676},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 341, col: 35, offset: 11684},
							expr: &litMatcher{
								pos:        position{line: 341, col: 36, offset: 11685},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 341, col: 46, offset: 11695},
							expr: &oneOrMoreExpr{
								pos: position{line: 341, col: 48, offset: 11697},
								expr: &ruleRefExpr{
									pos:  position{line: 341, col: 48, offset: 11697},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 341, col: 56, offset: 11705},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 341, col: 61, offset: 11710},
								expr: &charClassMatcher{
									pos:        position{line: 341, col: 61, offset: 11710},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 341, col: 75, offset: 11724},
							expr: &ruleRefExpr{
								pos:  position{line: 341, col: 75, offset: 11724},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 345, col: 1, offset: 11771},
			expr: &actionExpr{
				pos: position{line: 345, col: 19, offset: 11789},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 345, col: 19, offset: 11789},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 345, col: 26, offset: 11796},
						expr: &charClassMatcher{
							pos:        position{line: 345, col: 26, offset: 11796},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 349, col: 1, offset: 11851},
			expr: &actionExpr{
				pos: position{line: 349, col: 29, offset: 11879},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 349, col: 29, offset: 11879},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 349, col: 29, offset: 11879},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 349, col: 36, offset: 11886},
								expr: &charClassMatcher{
									pos:        position{line: 349, col: 36, offset: 11886},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 349, col: 50, offset: 11900},
							expr: &litMatcher{
								pos:        position{line: 349, col: 51, offset: 11901},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 353, col: 1, offset: 12071},
			expr: &actionExpr{
				pos: position{line: 353, col: 20, offset: 12090},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 353, col: 20, offset: 12090},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 353, col: 20, offset: 12090},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 353, col: 29, offset: 12099},
							expr: &ruleRefExpr{
								pos:  position{line: 353, col: 29, offset: 12099},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 353, col: 36, offset: 12106},
							expr: &litMatcher{
								pos:        position{line: 353, col: 36, offset: 12106},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 353, col: 41, offset: 12111},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 353, col: 48, offset: 12118},
								expr: &ruleRefExpr{
									pos:  position{line: 353, col: 49, offset: 12119},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 353, col: 66, offset: 12136},
							expr: &litMatcher{
								pos:        position{line: 353, col: 66, offset: 12136},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 353, col: 71, offset: 12141},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 353, col: 77, offset: 12147},
								expr: &ruleRefExpr{
									pos:  position{line: 353, col: 78, offset: 12148},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 353, col: 95, offset: 12165},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 353, col: 99, offset: 12169},
							expr: &ruleRefExpr{
								pos:  position{line: 353, col: 99, offset: 12169},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 353, col: 106, offset: 12176},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 357, col: 1, offset: 12249},
			expr: &actionExpr{
				pos: position{line: 357, col: 20, offset: 12268},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 357, col: 20, offset: 12268},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 20, offset: 12268},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 357, col: 29, offset: 12277},
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 29, offset: 12277},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 357, col: 36, offset: 12284},
							expr: &litMatcher{
								pos:        position{line: 357, col: 36, offset: 12284},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 357, col: 41, offset: 12289},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 357, col: 48, offset: 12296},
								expr: &ruleRefExpr{
									pos:  position{line: 357, col: 49, offset: 12297},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 357, col: 66, offset: 12314},
							expr: &litMatcher{
								pos:        position{line: 357, col: 66, offset: 12314},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 357, col: 71, offset: 12319},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 357, col: 77, offset: 12325},
								expr: &ruleRefExpr{
									pos:  position{line: 357, col: 78, offset: 12326},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 357, col: 95, offset: 12343},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 357, col: 99, offset: 12347},
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 99, offset: 12347},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 357, col: 106, offset: 12354},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 361, col: 1, offset: 12445},
			expr: &actionExpr{
				pos: position{line: 361, col: 19, offset: 12463},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 361, col: 20, offset: 12464},
					expr: &charClassMatcher{
						pos:        position{line: 361, col: 20, offset: 12464},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 365, col: 1, offset: 12517},
			expr: &actionExpr{
				pos: position{line: 365, col: 20, offset: 12536},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 365, col: 20, offset: 12536},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 365, col: 20, offset: 12536},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 365, col: 24, offset: 12540},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 365, col: 31, offset: 12547},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 365, col: 31, offset: 12547},
										expr: &ruleRefExpr{
											pos:  position{line: 365, col: 31, offset: 12547},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 365, col: 51, offset: 12567},
										expr: &ruleRefExpr{
											pos:  position{line: 365, col: 51, offset: 12567},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 365, col: 66, offset: 12582},
										expr: &ruleRefExpr{
											pos:  position{line: 365, col: 66, offset: 12582},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 365, col: 78, offset: 12594},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 369, col: 1, offset: 12652},
			expr: &actionExpr{
				pos: position{line: 369, col: 23, offset: 12674},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 369, col: 23, offset: 12674},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 369, col: 28, offset: 12679},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 373, col: 1, offset: 12751},
			expr: &actionExpr{
				pos: position{line: 373, col: 25, offset: 12775},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 373, col: 25, offset: 12775},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 373, col: 25, offset: 12775},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 373, col: 36, offset: 12786},
								expr: &ruleRefExpr{
									pos:  position{line: 373, col: 37, offset: 12787},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 373, col: 56, offset: 12806},
							expr: &ruleRefExpr{
								pos:  position{line: 373, col: 56, offset: 12806},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 373, col: 67, offset: 12817},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 377, col: 1, offset: 12929},
			expr: &choiceExpr{
				pos: position{line: 377, col: 18, offset: 12946},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 377, col: 18, offset: 12946},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 377, col: 36, offset: 12964},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 377, col: 58, offset: 12986},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 379, col: 1, offset: 13007},
			expr: &actionExpr{
				pos: position{line: 379, col: 24, offset: 13030},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 379, col: 24, offset: 13030},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 379, col: 24, offset: 13030},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 379, col: 28, offset: 13034},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 379, col: 35, offset: 13041},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 379, col: 50, offset: 13056},
							expr: &charClassMatcher{
								pos:        position{line: 379, col: 51, offset: 13057},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 383, col: 1, offset: 13130},
			expr: &actionExpr{
				pos: position{line: 383, col: 20, offset: 13149},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 383, col: 20, offset: 13149},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 383, col: 20, offset: 13149},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 383, col: 24, offset: 13153},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 27, offset: 13156},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 383, col: 42, offset: 13171},
							expr: &charClassMatcher{
								pos:        position{line: 383, col: 43, offset: 13172},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 387, col: 1, offset: 13237},
			expr: &actionExpr{
				pos: position{line: 387, col: 22, offset: 13258},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 387, col: 22, offset: 13258},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 387, col: 22, offset: 13258},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 387, col: 26, offset: 13262},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 31, offset: 13267},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 387, col: 46, offset: 13282},
							expr: &charClassMatcher{
								pos:        position{line: 387, col: 47, offset: 13283},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 392, col: 1, offset: 13397},
			expr: &actionExpr{
				pos: position{line: 392, col: 20, offset: 13416},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 392, col: 20, offset: 13416},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 392, col: 20, offset: 13416},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 392, col: 26, offset: 13422},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 392, col: 41, offset: 13437},
							expr: &charClassMatcher{
								pos:        position{line: 392, col: 42, offset: 13438},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineVal",
			pos:  position{line: 396, col: 1, offset: 13487},
			expr: &choiceExpr{
				pos: position{line: 396, col: 14, offset: 13500},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 396, col: 14, offset: 13500},
						name: "AttrEmpty",
					},
					&ruleRefExpr{
						pos:  position{line: 396, col: 26, offset: 13512},
						name: "AttrValSQ",
					},
					&ruleRefExpr{
						pos:  position{line: 396, col: 38, offset: 13524},
						name: "AttrValDQ",
					},
					&ruleRefExpr{
						pos:  position{line: 396, col: 50, offset: 13536},
						name: "AttrValPosFB",
					},
				},
			},
		},
		{
			name: "NamedAttrs",
			pos:  position{line: 398, col: 1, offset: 13552},
			expr: &actionExpr{
				pos: position{line: 398, col: 15, offset: 13566},
				run: (*parser).callonNamedAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 398, col: 15, offset: 13566},
					label: "attrs",
					expr: &zeroOrMoreExpr{
						pos: position{line: 398, col: 21, offset: 13572},
						expr: &ruleRefExpr{
							pos:  position{line: 398, col: 21, offset: 13572},
							name: "NamedAttrPair",
						},
					},
				},
			},
		},
		{
			name: "NamedAttrPair",
			pos:  position{line: 402, col: 1, offset: 13641},
			expr: &actionExpr{
				pos: position{line: 402, col: 18, offset: 13658},
				run: (*parser).callonNamedAttrPair1,
				expr: &seqExpr{
					pos: position{line: 402, col: 18, offset: 13658},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 402, col: 18, offset: 13658},
							expr: &litMatcher{
								pos:        position{line: 402, col: 18, offset: 13658},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 402, col: 23, offset: 13663},
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 23, offset: 13663},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 402, col: 30, offset: 13670},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 32, offset: 13672},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 402, col: 45, offset: 13685},
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 45, offset: 13685},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 402, col: 52, offset: 13692},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 402, col: 56, offset: 13696},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 402, col: 59, offset: 13699},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 402, col: 59, offset: 13699},
										name: "AttrValDQ",
									},
									&ruleRefExpr{
										pos:  position{line: 402, col: 71, offset: 13711},
										name: "AttrValSQ",
									},
									&ruleRefExpr{
										pos:  position{line: 402, col: 83, offset: 13723},
										name: "AttrValNamedFB",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrEmpty",
			pos:  position{line: 407, col: 1, offset: 13917},
			expr: &actionExpr{
				pos: position{line: 407, col: 14, offset: 13930},
				run: (*parser).callonAttrEmpty1,
				expr: &seqExpr{
					pos: position{line: 407, col: 14, offset: 13930},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 407, col: 14, offset: 13930},
							expr: &charClassMatcher{
								pos:        position{line: 407, col: 14, offset: 13930},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 407, col: 21, offset: 13937},
							expr: &charClassMatcher{
								pos:        position{line: 407, col: 22, offset: 13938},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQ",
			pos:  position{line: 413, col: 1, offset: 14080},
			expr: &actionExpr{
				pos: position{line: 413, col: 14, offset: 14093},
				run: (*parser).callonAttrValSQ1,
				expr: &seqExpr{
					pos: position{line: 413, col: 14, offset: 14093},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 413, col: 14, offset: 14093},
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 14, offset: 14093},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 413, col: 21, offset: 14100},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 413, col: 25, offset: 14104},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 29, offset: 14108},
								name: "AttrValSQin",
							},
						},
						&litMatcher{
							pos:        position{line: 413, col: 41, offset: 14120},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 413, col: 45, offset: 14124},
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 45, offset: 14124},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 413, col: 52, offset: 14131},
							expr: &charClassMatcher{
								pos:        position{line: 413, col: 53, offset: 14132},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQin",
			pos:  position{line: 415, col: 1, offset: 14161},
			expr: &actionExpr{
				pos: position{line: 415, col: 16, offset: 14176},
				run: (*parser).callonAttrValSQin1,
				expr: &labeledExpr{
					pos:   position{line: 415, col: 16, offset: 14176},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 415, col: 20, offset: 14180},
						expr: &choiceExpr{
							pos: position{line: 415, col: 22, offset: 14182},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 415, col: 22, offset: 14182},
									name: "AttrValSQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 415, col: 37, offset: 14197},
									expr: &charClassMatcher{
										pos:        position{line: 415, col: 37, offset: 14197},
										val:        "[^\\r\\n'\\\\]",
										chars:      []rune{'\r', '\n', '\'', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 415, col: 51, offset: 14211},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQEsc",
			pos:  position{line: 417, col: 1, offset: 14253},
			expr: &actionExpr{
				pos: position{line: 417, col: 17, offset: 14269},
				run: (*parser).callonAttrValSQEsc1,
				expr: &litMatcher{
					pos:        position{line: 417, col: 17, offset: 14269},
					val:        "\\'",
					ignoreCase: false,
					want:       "\"\\\\'\"",
				},
			},
		},
		{
			name: "AttrValDQ",
			pos:  position{line: 420, col: 1, offset: 14332},
			expr: &actionExpr{
				pos: position{line: 420, col: 14, offset: 14345},
				run: (*parser).callonAttrValDQ1,
				expr: &seqExpr{
					pos: position{line: 420, col: 14, offset: 14345},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 420, col: 14, offset: 14345},
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 14, offset: 14345},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 420, col: 21, offset: 14352},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 420, col: 25, offset: 14356},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 29, offset: 14360},
								name: "AttrValDQin",
							},
						},
						&litMatcher{
							pos:        position{line: 420, col: 41, offset: 14372},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 420, col: 45, offset: 14376},
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 45, offset: 14376},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQin",
			pos:  position{line: 422, col: 1, offset: 14406},
			expr: &actionExpr{
				pos: position{line: 422, col: 16, offset: 14421},
				run: (*parser).callonAttrValDQin1,
				expr: &labeledExpr{
					pos:   position{line: 422, col: 16, offset: 14421},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 422, col: 20, offset: 14425},
						expr: &choiceExpr{
							pos: position{line: 422, col: 22, offset: 14427},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 422, col: 22, offset: 14427},
									name: "AttrValDQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 422, col: 37, offset: 14442},
									expr: &charClassMatcher{
										pos:        position{line: 422, col: 37, offset: 14442},
										val:        "[^\\r\\n\"\\\\]",
										chars:      []rune{'\r', '\n', '"', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 422, col: 51, offset: 14456},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQEsc",
			pos:  position{line: 424, col: 1, offset: 14498},
			expr: &actionExpr{
				pos: position{line: 424, col: 17, offset: 14514},
				run: (*parser).callonAttrValDQEsc1,
				expr: &litMatcher{
					pos:        position{line: 424, col: 17, offset: 14514},
					val:        "\\\"",
					ignoreCase: false,
					want:       "\"\\\\\\\"\"",
				},
			},
		},
		{
			name: "AttrValPosFB",
			pos:  position{line: 427, col: 1, offset: 14608},
			expr: &actionExpr{
				pos: position{line: 427, col: 17, offset: 14624},
				run: (*parser).callonAttrValPosFB1,
				expr: &seqExpr{
					pos: position{line: 427, col: 17, offset: 14624},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 427, col: 17, offset: 14624},
							expr: &charClassMatcher{
								pos:        position{line: 427, col: 17, offset: 14624},
								val:        "[^,=\\r\\n\\]]",
								chars:      []rune{',', '=', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 427, col: 30, offset: 14637},
							expr: &charClassMatcher{
								pos:        position{line: 427, col: 31, offset: 14638},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValNamedFB",
			pos:  position{line: 430, col: 1, offset: 14752},
			expr: &actionExpr{
				pos: position{line: 430, col: 19, offset: 14770},
				run: (*parser).callonAttrValNamedFB1,
				expr: &seqExpr{
					pos: position{line: 430, col: 19, offset: 14770},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 430, col: 19, offset: 14770},
							expr: &charClassMatcher{
								pos:        position{line: 430, col: 19, offset: 14770},
								val:        "[^,\\r\\n\\]]",
								chars:      []rune{',', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 430, col: 31, offset: 14782},
							expr: &charClassMatcher{
								pos:        position{line: 430, col: 32, offset: 14783},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 432, col: 1, offset: 14842},
			expr: &choiceExpr{
				pos: position{line: 432, col: 19, offset: 14860},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 432, col: 19, offset: 14860},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 41, offset: 14882},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 65, offset: 14906},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 436, col: 1, offset: 15108},
			expr: &actionExpr{
				pos: position{line: 436, col: 24, offset: 15131},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 436, col: 24, offset: 15131},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 436, col: 24, offset: 15131},
							val:        "[^,\\r\\n\"' \\t.#%=\\]]",
							chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
							ignoreCase: false,
							inverted:   true,
						},
						&zeroOrMoreExpr{
							pos: position{line: 436, col: 45, offset: 15152},
							expr: &choiceExpr{
								pos: position{line: 436, col: 46, offset: 15153},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 436, col: 46, offset: 15153},
										val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
										chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
										ignoreCase: false,
										inverted:   true,
									},
									&seqExpr{
										pos: position{line: 436, col: 68, offset: 15175},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 436, col: 68, offset: 15175},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 436, col: 73, offset: 15180},
												val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
												chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 440, col: 1, offset: 15242},
			expr: &actionExpr{
				pos: position{line: 440, col: 13, offset: 15254},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 440, col: 13, offset: 15254},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 440, col: 13, offset: 15254},
							expr: &seqExpr{
								pos: position{line: 440, col: 15, offset: 15256},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 440, col: 15, offset: 15256},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 440, col: 19, offset: 15260},
										expr: &ruleRefExpr{
											pos:  position{line: 440, col: 19, offset: 15260},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 29, offset: 15270},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 33, offset: 15274},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 440, col: 46, offset: 15287},
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 46, offset: 15287},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 440, col: 53, offset: 15294},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 440, col: 57, offset: 15298},
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 57, offset: 15298},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 64, offset: 15305},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 70, offset: 15311},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 440, col: 85, offset: 15326},
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 85, offset: 15326},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 445, col: 1, offset: 15521},
			expr: &actionExpr{
				pos: position{line: 445, col: 17, offset: 15537},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 445, col: 17, offset: 15537},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 445, col: 17, offset: 15537},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 445, col: 26, offset: 15546},
							expr: &charClassMatcher{
								pos:        position{line: 445, col: 26, offset: 15546},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 449, col: 1, offset: 15598},
			expr: &choiceExpr{
				pos: position{line: 449, col: 19, offset: 15616},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 449, col: 19, offset: 15616},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 449, col: 35, offset: 15632},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 449, col: 59, offset: 15656},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 449, col: 83, offset: 15680},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 451, col: 1, offset: 15698},
			expr: &actionExpr{
				pos: position{line: 451, col: 19, offset: 15716},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 451, col: 19, offset: 15716},
					expr: &charClassMatcher{
						pos:        position{line: 451, col: 19, offset: 15716},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 455, col: 1, offset: 15773},
			expr: &actionExpr{
				pos: position{line: 455, col: 26, offset: 15798},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 455, col: 26, offset: 15798},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 455, col: 26, offset: 15798},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 455, col: 30, offset: 15802},
							expr: &charClassMatcher{
								pos:        position{line: 455, col: 30, offset: 15802},
								val:        "[^'\\r\\n]",
								chars:      []rune{'\'', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 455, col: 40, offset: 15812},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 459, col: 1, offset: 15873},
			expr: &actionExpr{
				pos: position{line: 459, col: 26, offset: 15898},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 459, col: 26, offset: 15898},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 459, col: 26, offset: 15898},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 459, col: 31, offset: 15903},
							expr: &charClassMatcher{
								pos:        position{line: 459, col: 31, offset: 15903},
								val:        "[^\"\\r\\n]",
								chars:      []rune{'"', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 459, col: 41, offset: 15913},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 465, col: 1, offset: 16174},
			expr: &actionExpr{
				pos: position{line: 465, col: 18, offset: 16191},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 465, col: 18, offset: 16191},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 473, col: 1, offset: 16381},
			expr: &choiceExpr{
				pos: position{line: 473, col: 17, offset: 16397},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 473, col: 17, offset: 16397},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 473, col: 38, offset: 16418},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 475, col: 1, offset: 16440},
			expr: &actionExpr{
				pos: position{line: 475, col: 23, offset: 16462},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 475, col: 23, offset: 16462},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 475, col: 23, offset: 16462},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 475, col: 46, offset: 16485},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 475, col: 55, offset: 16494},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 475, col: 82, offset: 16521},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 479, col: 1, offset: 16629},
			expr: &actionExpr{
				pos: position{line: 479, col: 31, offset: 16659},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 479, col: 31, offset: 16659},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 479, col: 41, offset: 16669},
						expr: &ruleRefExpr{
							pos:  position{line: 479, col: 41, offset: 16669},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 483, col: 1, offset: 16751},
			expr: &seqExpr{
				pos: position{line: 483, col: 27, offset: 16777},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 483, col: 27, offset: 16777},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 483, col: 32, offset: 16782},
						expr: &charClassMatcher{
							pos:        position{line: 483, col: 33, offset: 16783},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 485, col: 1, offset: 16796},
			expr: &litMatcher{
				pos:        position{line: 485, col: 25, offset: 16820},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 488, col: 1, offset: 16911},
			expr: &actionExpr{
				pos: position{line: 488, col: 30, offset: 16940},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 488, col: 30, offset: 16940},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 489, col: 9, offset: 16959},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 489, col: 9, offset: 16959},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 489, col: 9, offset: 16959},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 489, col: 19, offset: 16969},
										expr: &ruleRefExpr{
											pos:  position{line: 489, col: 20, offset: 16970},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 490, col: 11, offset: 17027},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 490, col: 11, offset: 17027},
										expr: &ruleRefExpr{
											pos:  position{line: 490, col: 11, offset: 17027},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 490, col: 18, offset: 17034},
										expr: &ruleRefExpr{
											pos:  position{line: 490, col: 19, offset: 17035},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 491, col: 11, offset: 17067},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 491, col: 11, offset: 17067},
										expr: &litMatcher{
											pos:        position{line: 491, col: 12, offset: 17068},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 491, col: 16, offset: 17072},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 492, col: 11, offset: 17121},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 493, col: 11, offset: 17143},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 494, col: 11, offset: 17166},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 495, col: 11, offset: 17192},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 496, col: 11, offset: 17221},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 497, col: 11, offset: 17237},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 11, offset: 17270},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 499, col: 11, offset: 17290},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 500, col: 11, offset: 17312},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 501, col: 11, offset: 17334},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 502, col: 11, offset: 17359},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 503, col: 11, offset: 17386},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 503, col: 11, offset: 17386},
										expr: &litMatcher{
											pos:        position{line: 503, col: 12, offset: 17387},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 503, col: 17, offset: 17392},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 504, col: 11, offset: 17417},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 505, col: 11, offset: 17447},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 506, col: 11, offset: 17476},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 510, col: 1, offset: 17546},
			expr: &choiceExpr{
				pos: position{line: 510, col: 41, offset: 17586},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 510, col: 41, offset: 17586},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 510, col: 55, offset: 17600},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 510, col: 55, offset: 17600},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 510, col: 55, offset: 17600},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 510, col: 59, offset: 17604},
									expr: &litMatcher{
										pos:        position{line: 510, col: 60, offset: 17605},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 514, col: 1, offset: 17668},
			expr: &actionExpr{
				pos: position{line: 514, col: 23, offset: 17690},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 514, col: 23, offset: 17690},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 514, col: 23, offset: 17690},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 514, col: 46, offset: 17713},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 55, offset: 17722},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 514, col: 82, offset: 17749},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 518, col: 1, offset: 17857},
			expr: &actionExpr{
				pos: position{line: 518, col: 31, offset: 17887},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 518, col: 31, offset: 17887},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 518, col: 41, offset: 17897},
						expr: &ruleRefExpr{
							pos:  position{line: 518, col: 41, offset: 17897},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 523, col: 1, offset: 18062},
			expr: &actionExpr{
				pos: position{line: 523, col: 30, offset: 18091},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 523, col: 30, offset: 18091},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 524, col: 9, offset: 18110},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 524, col: 9, offset: 18110},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 524, col: 9, offset: 18110},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 524, col: 19, offset: 18120},
										expr: &ruleRefExpr{
											pos:  position{line: 524, col: 20, offset: 18121},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 525, col: 11, offset: 18178},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 525, col: 11, offset: 18178},
										expr: &ruleRefExpr{
											pos:  position{line: 525, col: 11, offset: 18178},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 525, col: 18, offset: 18185},
										expr: &ruleRefExpr{
											pos:  position{line: 525, col: 19, offset: 18186},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 526, col: 11, offset: 18218},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 527, col: 11, offset: 18236},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 528, col: 11, offset: 18258},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 529, col: 11, offset: 18281},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 530, col: 11, offset: 18307},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 531, col: 11, offset: 18336},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 532, col: 11, offset: 18352},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 533, col: 11, offset: 18385},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 534, col: 11, offset: 18405},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 535, col: 11, offset: 18427},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 11, offset: 18449},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 537, col: 11, offset: 18474},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 538, col: 11, offset: 18501},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 538, col: 11, offset: 18501},
										expr: &litMatcher{
											pos:        position{line: 538, col: 12, offset: 18502},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 538, col: 18, offset: 18508},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 539, col: 11, offset: 18533},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 540, col: 11, offset: 18563},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 541, col: 11, offset: 18592},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 545, col: 1, offset: 18670},
			expr: &seqExpr{
				pos: position{line: 545, col: 27, offset: 18696},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 545, col: 27, offset: 18696},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 545, col: 33, offset: 18702},
						expr: &charClassMatcher{
							pos:        position{line: 545, col: 34, offset: 18703},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 547, col: 1, offset: 18716},
			expr: &litMatcher{
				pos:        position{line: 547, col: 25, offset: 18740},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 549, col: 1, offset: 18749},
			expr: &actionExpr{
				pos: position{line: 549, col: 41, offset: 18789},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 549, col: 42, offset: 18790},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 549, col: 42, offset: 18790},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 549, col: 56, offset: 18804},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 549, col: 56, offset: 18804},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 549, col: 60, offset: 18808},
									expr: &litMatcher{
										pos:        position{line: 549, col: 61, offset: 18809},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 556, col: 1, offset: 18981},
			expr: &actionExpr{
				pos: position{line: 556, col: 12, offset: 18992},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 556, col: 12, offset: 18992},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 556, col: 12, offset: 18992},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 556, col: 23, offset: 19003},
								expr: &ruleRefExpr{
									pos:  position{line: 556, col: 24, offset: 19004},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 557, col: 5, offset: 19022},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 557, col: 12, offset: 19029},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 557, col: 12, offset: 19029},
									expr: &litMatcher{
										pos:        position{line: 557, col: 13, offset: 19030},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 561, col: 5, offset: 19125},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 565, col: 5, offset: 19281},
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 5, offset: 19281},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 565, col: 12, offset: 19288},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 19, offset: 19295},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 565, col: 34, offset: 19310},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 565, col: 38, offset: 19314},
								expr: &ruleRefExpr{
									pos:  position{line: 565, col: 38, offset: 19314},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 565, col: 56, offset: 19332},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 569, col: 1, offset: 19442},
			expr: &actionExpr{
				pos: position{line: 569, col: 18, offset: 19459},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 569, col: 18, offset: 19459},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 569, col: 27, offset: 19468},
						expr: &seqExpr{
							pos: position{line: 569, col: 28, offset: 19469},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 569, col: 28, offset: 19469},
									expr: &ruleRefExpr{
										pos:  position{line: 569, col: 29, offset: 19470},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 569, col: 37, offset: 19478},
									expr: &ruleRefExpr{
										pos:  position{line: 569, col: 38, offset: 19479},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 569, col: 54, offset: 19495},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 573, col: 1, offset: 19620},
			expr: &actionExpr{
				pos: position{line: 573, col: 17, offset: 19636},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 573, col: 17, offset: 19636},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 573, col: 26, offset: 19645},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 573, col: 26, offset: 19645},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 574, col: 11, offset: 19661},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 575, col: 11, offset: 19707},
								expr: &ruleRefExpr{
									pos:  position{line: 575, col: 11, offset: 19707},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 576, col: 11, offset: 19726},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 577, col: 11, offset: 19752},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 578, col: 11, offset: 19781},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 579, col: 11, offset: 19803},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 580, col: 11, offset: 19826},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 581, col: 11, offset: 19842},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 582, col: 11, offset: 19868},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 583, col: 11, offset: 19892},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 584, col: 11, offset: 19914},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 11, offset: 19932},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 586, col: 11, offset: 19965},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 587, col: 11, offset: 19994},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 594, col: 1, offset: 20152},
			expr: &seqExpr{
				pos: position{line: 594, col: 31, offset: 20182},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 594, col: 31, offset: 20182},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 594, col: 41, offset: 20192},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 599, col: 1, offset: 20308},
			expr: &actionExpr{
				pos: position{line: 599, col: 19, offset: 20326},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 599, col: 19, offset: 20326},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 599, col: 19, offset: 20326},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 25, offset: 20332},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 599, col: 40, offset: 20347},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 599, col: 45, offset: 20352},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 52, offset: 20359},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 599, col: 68, offset: 20375},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 75, offset: 20382},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 603, col: 1, offset: 20501},
			expr: &actionExpr{
				pos: position{line: 603, col: 20, offset: 20520},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 603, col: 20, offset: 20520},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 603, col: 20, offset: 20520},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 26, offset: 20526},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 603, col: 41, offset: 20541},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 603, col: 45, offset: 20545},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 52, offset: 20552},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 68, offset: 20568},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 75, offset: 20575},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 607, col: 1, offset: 20695},
			expr: &actionExpr{
				pos: position{line: 607, col: 18, offset: 20712},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 607, col: 19, offset: 20713},
					expr: &charClassMatcher{
						pos:        position{line: 607, col: 19, offset: 20713},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 611, col: 1, offset: 20766},
			expr: &actionExpr{
				pos: position{line: 611, col: 19, offset: 20784},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 611, col: 19, offset: 20784},
					expr: &charClassMatcher{
						pos:        position{line: 611, col: 19, offset: 20784},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 615, col: 1, offset: 20836},
			expr: &actionExpr{
				pos: position{line: 615, col: 24, offset: 20859},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 615, col: 24, offset: 20859},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 615, col: 24, offset: 20859},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 615, col: 28, offset: 20863},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 615, col: 34, offset: 20869},
								expr: &ruleRefExpr{
									pos:  position{line: 615, col: 35, offset: 20870},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 615, col: 54, offset: 20889},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 622, col: 1, offset: 21078},
			expr: &actionExpr{
				pos: position{line: 622, col: 18, offset: 21095},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 622, col: 18, offset: 21095},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 622, col: 18, offset: 21095},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 622, col: 24, offset: 21101},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 622, col: 24, offset: 21101},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 622, col: 24, offset: 21101},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 622, col: 36, offset: 21113},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 622, col: 42, offset: 21119},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 622, col: 56, offset: 21133},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 622, col: 74, offset: 21151},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 624, col: 8, offset: 21300},
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 8, offset: 21300},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 624, col: 15, offset: 21307},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 628, col: 1, offset: 21363},
			expr: &actionExpr{
				pos: position{line: 628, col: 26, offset: 21388},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 628, col: 26, offset: 21388},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 628, col: 26, offset: 21388},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 628, col: 30, offset: 21392},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 628, col: 36, offset: 21398},
								expr: &choiceExpr{
									pos: position{line: 628, col: 37, offset: 21399},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 628, col: 37, offset: 21399},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 628, col: 59, offset: 21421},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 628, col: 80, offset: 21442},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 628, col: 99, offset: 21461},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 632, col: 1, offset: 21537},
			expr: &actionExpr{
				pos: position{line: 632, col: 24, offset: 21560},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 632, col: 24, offset: 21560},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 632, col: 24, offset: 21560},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 632, col: 33, offset: 21569},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 40, offset: 21576},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 632, col: 66, offset: 21602},
							expr: &litMatcher{
								pos:        position{line: 632, col: 66, offset: 21602},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 636, col: 1, offset: 21665},
			expr: &actionExpr{
				pos: position{line: 636, col: 29, offset: 21693},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 636, col: 29, offset: 21693},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 636, col: 29, offset: 21693},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 636, col: 36, offset: 21700},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 636, col: 36, offset: 21700},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 637, col: 11, offset: 21818},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 638, col: 11, offset: 21855},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 639, col: 11, offset: 21882},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 640, col: 11, offset: 21915},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 641, col: 11, offset: 21948},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 642, col: 11, offset: 21976},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 642, col: 31, offset: 21996},
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 31, offset: 21996},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 642, col: 39, offset: 22004},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 642, col: 39, offset: 22004},
									expr: &litMatcher{
										pos:        position{line: 642, col: 40, offset: 22005},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 642, col: 46, offset: 22011},
									expr: &litMatcher{
										pos:        position{line: 642, col: 47, offset: 22012},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 646, col: 1, offset: 22048},
			expr: &actionExpr{
				pos: position{line: 646, col: 23, offset: 22070},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 646, col: 23, offset: 22070},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 646, col: 23, offset: 22070},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 646, col: 30, offset: 22077},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 646, col: 30, offset: 22077},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 646, col: 47, offset: 22094},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 647, col: 5, offset: 22117},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 647, col: 12, offset: 22124},
								expr: &actionExpr{
									pos: position{line: 647, col: 13, offset: 22125},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 647, col: 13, offset: 22125},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 647, col: 13, offset: 22125},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 647, col: 17, offset: 22129},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 647, col: 24, offset: 22136},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 647, col: 24, offset: 22136},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 647, col: 41, offset: 22153},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 653, col: 1, offset: 22297},
			expr: &actionExpr{
				pos: position{line: 653, col: 29, offset: 22325},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 653, col: 29, offset: 22325},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 653, col: 29, offset: 22325},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 653, col: 34, offset: 22330},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 653, col: 41, offset: 22337},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 653, col: 41, offset: 22337},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 653, col: 58, offset: 22354},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 654, col: 5, offset: 22377},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 654, col: 12, offset: 22384},
								expr: &actionExpr{
									pos: position{line: 654, col: 13, offset: 22385},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 654, col: 13, offset: 22385},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 654, col: 13, offset: 22385},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 654, col: 17, offset: 22389},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 654, col: 24, offset: 22396},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 654, col: 24, offset: 22396},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 654, col: 41, offset: 22413},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 656, col: 9, offset: 22468},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 660, col: 1, offset: 22562},
			expr: &actionExpr{
				pos: position{line: 660, col: 19, offset: 22580},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 660, col: 19, offset: 22580},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 660, col: 19, offset: 22580},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 26, offset: 22587},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 660, col: 34, offset: 22595},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 660, col: 39, offset: 22600},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 44, offset: 22605},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 664, col: 1, offset: 22697},
			expr: &actionExpr{
				pos: position{line: 664, col: 25, offset: 22721},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 664, col: 25, offset: 22721},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 664, col: 25, offset: 22721},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 664, col: 30, offset: 22726},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 37, offset: 22733},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 664, col: 45, offset: 22741},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 664, col: 50, offset: 22746},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 55, offset: 22751},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 664, col: 63, offset: 22759},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 668, col: 1, offset: 22848},
			expr: &actionExpr{
				pos: position{line: 668, col: 20, offset: 22867},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 668, col: 20, offset: 22867},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 668, col: 32, offset: 22879},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 672, col: 1, offset: 22978},
			expr: &actionExpr{
				pos: position{line: 672, col: 26, offset: 23003},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 672, col: 26, offset: 23003},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 672, col: 26, offset: 23003},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 672, col: 31, offset: 23008},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 43, offset: 23020},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 672, col: 51, offset: 23028},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 676, col: 1, offset: 23124},
			expr: &actionExpr{
				pos: position{line: 676, col: 23, offset: 23146},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 676, col: 23, offset: 23146},
					expr: &charClassMatcher{
						pos:        position{line: 676, col: 23, offset: 23146},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 680, col: 1, offset: 23195},
			expr: &actionExpr{
				pos: position{line: 680, col: 23, offset: 23217},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 680, col: 23, offset: 23217},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 680, col: 24, offset: 23218},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 680, col: 24, offset: 23218},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 680, col: 34, offset: 23228},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 680, col: 42, offset: 23236},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 680, col: 48, offset: 23242},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 680, col: 73, offset: 23267},
							expr: &litMatcher{
								pos:        position{line: 680, col: 73, offset: 23267},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 684, col: 1, offset: 23420},
			expr: &actionExpr{
				pos: position{line: 684, col: 28, offset: 23447},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 684, col: 28, offset: 23447},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 684, col: 28, offset: 23447},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 35, offset: 23454},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 684, col: 54, offset: 23473},
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 54, offset: 23473},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 684, col: 62, offset: 23481},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 684, col: 62, offset: 23481},
									expr: &litMatcher{
										pos:        position{line: 684, col: 63, offset: 23482},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 684, col: 69, offset: 23488},
									expr: &litMatcher{
										pos:        position{line: 684, col: 70, offset: 23489},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 688, col: 1, offset: 23525},
			expr: &actionExpr{
				pos: position{line: 688, col: 22, offset: 23546},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 688, col: 22, offset: 23546},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 688, col: 22, offset: 23546},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 688, col: 29, offset: 23553},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 689, col: 5, offset: 23568},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 689, col: 12, offset: 23575},
								expr: &actionExpr{
									pos: position{line: 689, col: 13, offset: 23576},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 689, col: 13, offset: 23576},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 689, col: 13, offset: 23576},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 689, col: 17, offset: 23580},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 689, col: 24, offset: 23587},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 695, col: 1, offset: 23724},
			expr: &choiceExpr{
				pos: position{line: 695, col: 13, offset: 23736},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 695, col: 13, offset: 23736},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 695, col: 13, offset: 23736},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 695, col: 18, offset: 23741},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 695, col: 18, offset: 23741},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 695, col: 30, offset: 23753},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 697, col: 5, offset: 23823},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 697, col: 5, offset: 23823},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 697, col: 5, offset: 23823},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 697, col: 9, offset: 23827},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 697, col: 14, offset: 23832},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 697, col: 14, offset: 23832},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 697, col: 26, offset: 23844},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 701, col: 1, offset: 23916},
			expr: &actionExpr{
				pos: position{line: 701, col: 16, offset: 23931},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 701, col: 16, offset: 23931},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 701, col: 16, offset: 23931},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 701, col: 23, offset: 23938},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 701, col: 23, offset: 23938},
									expr: &litMatcher{
										pos:        position{line: 701, col: 24, offset: 23939},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 704, col: 5, offset: 23996},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 712, col: 1, offset: 24184},
			expr: &actionExpr{
				pos: position{line: 712, col: 21, offset: 24204},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 712, col: 21, offset: 24204},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 712, col: 21, offset: 24204},
							expr: &ruleRefExpr{
								pos:  position{line: 712, col: 22, offset: 24205},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 712, col: 26, offset: 24209},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 712, col: 35, offset: 24218},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 712, col: 35, offset: 24218},
									expr: &charClassMatcher{
										pos:        position{line: 712, col: 35, offset: 24218},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 714, col: 12, offset: 24282},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawFileContent",
			pos:  position{line: 719, col: 1, offset: 24434},
			expr: &zeroOrMoreExpr{
				pos: position{line: 719, col: 19, offset: 24452},
				expr: &choiceExpr{
					pos: position{line: 719, col: 20, offset: 24453},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 719, col: 20, offset: 24453},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 719, col: 36, offset: 24469},
							name: "RawLine",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 725, col: 1, offset: 24622},
			expr: &actionExpr{
				pos: position{line: 725, col: 21, offset: 24642},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 725, col: 21, offset: 24642},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 725, col: 21, offset: 24642},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 725, col: 29, offset: 24650},
								expr: &choiceExpr{
									pos: position{line: 725, col: 30, offset: 24651},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 725, col: 30, offset: 24651},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 725, col: 53, offset: 24674},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 725, col: 74, offset: 24695},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 725, col: 74, offset: 24695,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 725, col: 107, offset: 24728},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 729, col: 1, offset: 24803},
			expr: &actionExpr{
				pos: position{line: 729, col: 25, offset: 24827},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 729, col: 25, offset: 24827},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 729, col: 25, offset: 24827},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 729, col: 33, offset: 24835},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 729, col: 38, offset: 24840},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 729, col: 38, offset: 24840},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 729, col: 78, offset: 24880},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 733, col: 1, offset: 24949},
			expr: &actionExpr{
				pos: position{line: 733, col: 23, offset: 24971},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 733, col: 23, offset: 24971},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 733, col: 23, offset: 24971},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 733, col: 31, offset: 24979},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 733, col: 36, offset: 24984},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 733, col: 36, offset: 24984},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 733, col: 76, offset: 25024},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 740, col: 1, offset: 25195},
			expr: &choiceExpr{
				pos: position{line: 740, col: 18, offset: 25212},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 740, col: 18, offset: 25212},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 740, col: 18, offset: 25212},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 740, col: 27, offset: 25221},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 742, col: 9, offset: 25280},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 742, col: 9, offset: 25280},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 742, col: 15, offset: 25286},
								expr: &ruleRefExpr{
									pos:  position{line: 742, col: 16, offset: 25287},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 746, col: 1, offset: 25383},
			expr: &actionExpr{
				pos: position{line: 746, col: 22, offset: 25404},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 746, col: 22, offset: 25404},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 746, col: 22, offset: 25404},
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 23, offset: 25405},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 747, col: 5, offset: 25414},
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 6, offset: 25415},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 748, col: 5, offset: 25431},
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 6, offset: 25432},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 749, col: 5, offset: 25455},
							expr: &ruleRefExpr{
								pos:  position{line: 749, col: 6, offset: 25456},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 750, col: 5, offset: 25483},
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 6, offset: 25484},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 751, col: 5, offset: 25513},
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 6, offset: 25514},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 752, col: 5, offset: 25541},
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 6, offset: 25542},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 753, col: 5, offset: 25568},
							expr: &ruleRefExpr{
								pos:  position{line: 753, col: 6, offset: 25569},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 754, col: 5, offset: 25591},
							expr: &ruleRefExpr{
								pos:  position{line: 754, col: 6, offset: 25592},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 755, col: 5, offset: 25612},
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 6, offset: 25613},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 756, col: 5, offset: 25641},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 756, col: 11, offset: 25647},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 756, col: 11, offset: 25647},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 756, col: 20, offset: 25656},
										expr: &ruleRefExpr{
											pos:  position{line: 756, col: 21, offset: 25657},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 758, col: 12, offset: 25758},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 762, col: 1, offset: 25801},
			expr: &seqExpr{
				pos: position{line: 762, col: 25, offset: 25825},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 762, col: 25, offset: 25825},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 762, col: 29, offset: 25829},
						expr: &ruleRefExpr{
							pos:  position{line: 762, col: 29, offset: 25829},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 762, col: 36, offset: 25836},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 764, col: 1, offset: 25910},
			expr: &actionExpr{
				pos: position{line: 764, col: 29, offset: 25938},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 764, col: 29, offset: 25938},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 764, col: 29, offset: 25938},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 764, col: 50, offset: 25959},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 764, col: 58, offset: 25967},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 768, col: 1, offset: 26077},
			expr: &actionExpr{
				pos: position{line: 768, col: 29, offset: 26105},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 768, col: 29, offset: 26105},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 768, col: 29, offset: 26105},
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 30, offset: 26106},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 769, col: 5, offset: 26116},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 769, col: 14, offset: 26125},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 769, col: 14, offset: 26125},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 770, col: 11, offset: 26151},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 771, col: 11, offset: 26176},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 772, col: 11, offset: 26198},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 773, col: 11, offset: 26227},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 774, col: 11, offset: 26252},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 775, col: 11, offset: 26280},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 776, col: 11, offset: 26310},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 778, col: 11, offset: 26377},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 779, col: 11, offset: 26429},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 780, col: 11, offset: 26454},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 781, col: 11, offset: 26487},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 782, col: 11, offset: 26514},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 783, col: 11, offset: 26552},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 784, col: 11, offset: 26578},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 791, col: 1, offset: 26751},
			expr: &actionExpr{
				pos: position{line: 791, col: 20, offset: 26770},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 791, col: 20, offset: 26770},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 791, col: 20, offset: 26770},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 791, col: 26, offset: 26776},
								expr: &ruleRefExpr{
									pos:  position{line: 791, col: 27, offset: 26777},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 791, col: 40, offset: 26790},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 791, col: 48, offset: 26798},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 791, col: 71, offset: 26821},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 791, col: 80, offset: 26830},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 795, col: 1, offset: 26969},
			expr: &actionExpr{
				pos: position{line: 796, col: 5, offset: 27000},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 796, col: 5, offset: 27000},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 796, col: 5, offset: 27000},
							expr: &ruleRefExpr{
								pos:  position{line: 796, col: 5, offset: 27000},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 796, col: 12, offset: 27007},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 798, col: 9, offset: 27072},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 798, col: 9, offset: 27072},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 798, col: 9, offset: 27072},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 798, col: 9, offset: 27072},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 798, col: 16, offset: 27079},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 798, col: 16, offset: 27079},
															expr: &litMatcher{
																pos:        position{line: 798, col: 17, offset: 27080},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 802, col: 9, offset: 27184},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 821, col: 11, offset: 27920},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 821, col: 11, offset: 27920},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 821, col: 11, offset: 27920},
													expr: &charClassMatcher{
														pos:        position{line: 821, col: 12, offset: 27921},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 821, col: 20, offset: 27929},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 823, col: 13, offset: 28042},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 823, col: 13, offset: 28042},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 823, col: 14, offset: 28043},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 823, col: 21, offset: 28050},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 825, col: 13, offset: 28166},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 825, col: 13, offset: 28166},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 825, col: 14, offset: 28167},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 825, col: 21, offset: 28174},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 827, col: 13, offset: 28290},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 827, col: 13, offset: 28290},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 827, col: 13, offset: 28290},
													expr: &charClassMatcher{
														pos:        position{line: 827, col: 14, offset: 28291},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 827, col: 22, offset: 28299},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 829, col: 13, offset: 28415},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 829, col: 13, offset: 28415},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 829, col: 13, offset: 28415},
													expr: &charClassMatcher{
														pos:        position{line: 829, col: 14, offset: 28416},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 829, col: 22, offset: 28424},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 831, col: 12, offset: 28539},
							expr: &ruleRefExpr{
								pos:  position{line: 831, col: 12, offset: 28539},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 835, col: 1, offset: 28578},
			expr: &actionExpr{
				pos: position{line: 835, col: 27, offset: 28604},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 835, col: 27, offset: 28604},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 835, col: 37, offset: 28614},
						expr: &ruleRefExpr{
							pos:  position{line: 835, col: 37, offset: 28614},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 842, col: 1, offset: 28821},
			expr: &actionExpr{
				pos: position{line: 842, col: 22, offset: 28842},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 842, col: 22, offset: 28842},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 842, col: 22, offset: 28842},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 842, col: 28, offset: 28848},
								expr: &ruleRefExpr{
									pos:  position{line: 842, col: 29, offset: 28849},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 842, col: 42, offset: 28862},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 842, col: 50, offset: 28870},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 842, col: 75, offset: 28895},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 842, col: 86, offset: 28906},
								expr: &ruleRefExpr{
									pos:  position{line: 842, col: 87, offset: 28907},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 842, col: 117, offset: 28937},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 842, col: 126, offset: 28946},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 846, col: 1, offset: 29103},
			expr: &actionExpr{
				pos: position{line: 847, col: 5, offset: 29136},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 847, col: 5, offset: 29136},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 847, col: 5, offset: 29136},
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 5, offset: 29136},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 847, col: 12, offset: 29143},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 847, col: 20, offset: 29151},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 849, col: 9, offset: 29210},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 849, col: 9, offset: 29210},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 849, col: 9, offset: 29210},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 849, col: 16, offset: 29217},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 849, col: 16, offset: 29217},
															expr: &litMatcher{
																pos:        position{line: 849, col: 17, offset: 29218},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 853, col: 9, offset: 29322},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 870, col: 14, offset: 30046},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 870, col: 21, offset: 30053},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 870, col: 22, offset: 30054},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 872, col: 13, offset: 30142},
							expr: &ruleRefExpr{
								pos:  position{line: 872, col: 13, offset: 30142},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 876, col: 1, offset: 30182},
			expr: &actionExpr{
				pos: position{line: 876, col: 32, offset: 30213},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 876, col: 32, offset: 30213},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 876, col: 32, offset: 30213},
							expr: &litMatcher{
								pos:        position{line: 876, col: 33, offset: 30214},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 876, col: 37, offset: 30218},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 877, col: 7, offset: 30233},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 877, col: 7, offset: 30233},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 877, col: 7, offset: 30233},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 878, col: 7, offset: 30279},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 878, col: 7, offset: 30279},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 879, col: 7, offset: 30323},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 879, col: 7, offset: 30323},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 880, col: 7, offset: 30366},
							expr: &ruleRefExpr{
								pos:  position{line: 880, col: 7, offset: 30366},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 884, col: 1, offset: 30412},
			expr: &actionExpr{
				pos: position{line: 884, col: 29, offset: 30440},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 884, col: 29, offset: 30440},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 884, col: 39, offset: 30450},
						expr: &ruleRefExpr{
							pos:  position{line: 884, col: 39, offset: 30450},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 891, col: 1, offset: 30773},
			expr: &actionExpr{
				pos: position{line: 891, col: 20, offset: 30792},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 891, col: 20, offset: 30792},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 891, col: 20, offset: 30792},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 891, col: 26, offset: 30798},
								expr: &ruleRefExpr{
									pos:  position{line: 891, col: 27, offset: 30799},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 891, col: 40, offset: 30812},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 891, col: 46, offset: 30818},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 891, col: 75, offset: 30847},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 891, col: 86, offset: 30858},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 891, col: 112, offset: 30884},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 891, col: 124, offset: 30896},
								expr: &ruleRefExpr{
									pos:  position{line: 891, col: 125, offset: 30897},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 895, col: 1, offset: 31042},
			expr: &seqExpr{
				pos: position{line: 895, col: 26, offset: 31067},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 895, col: 26, offset: 31067},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 895, col: 54, offset: 31095},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 897, col: 1, offset: 31123},
			expr: &choiceExpr{
				pos: position{line: 897, col: 33, offset: 31155},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 897, col: 33, offset: 31155},
						expr: &charClassMatcher{
							pos:        position{line: 897, col: 33, offset: 31155},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 897, col: 45, offset: 31167},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 897, col: 45, offset: 31167},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 897, col: 49, offset: 31171},
								expr: &litMatcher{
									pos:        position{line: 897, col: 50, offset: 31172},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 898, col: 1, offset: 31177},
			expr: &actionExpr{
				pos: position{line: 898, col: 32, offset: 31208},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 898, col: 32, offset: 31208},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 898, col: 42, offset: 31218},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 898, col: 42, offset: 31218},
							expr: &ruleRefExpr{
								pos:  position{line: 898, col: 42, offset: 31218},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 904, col: 1, offset: 31379},
			expr: &actionExpr{
				pos: position{line: 904, col: 24, offset: 31402},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 904, col: 24, offset: 31402},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 904, col: 33, offset: 31411},
						expr: &seqExpr{
							pos: position{line: 904, col: 34, offset: 31412},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 904, col: 34, offset: 31412},
									expr: &ruleRefExpr{
										pos:  position{line: 904, col: 35, offset: 31413},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 904, col: 43, offset: 31421},
									expr: &litMatcher{
										pos:        position{line: 904, col: 44, offset: 31422},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 904, col: 49, offset: 31427},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 908, col: 1, offset: 31558},
			expr: &actionExpr{
				pos: position{line: 908, col: 31, offset: 31588},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 908, col: 31, offset: 31588},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 908, col: 40, offset: 31597},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 908, col: 40, offset: 31597},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 909, col: 11, offset: 31613},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 910, col: 11, offset: 31663},
								expr: &ruleRefExpr{
									pos:  position{line: 910, col: 11, offset: 31663},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 911, col: 11, offset: 31682},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 912, col: 11, offset: 31708},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 913, col: 11, offset: 31738},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 914, col: 11, offset: 31759},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 915, col: 11, offset: 31788},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 916, col: 11, offset: 31810},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 917, col: 11, offset: 31834},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 918, col: 11, offset: 31850},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 919, col: 11, offset: 31876},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 920, col: 11, offset: 31900},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 921, col: 11, offset: 31922},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 922, col: 11, offset: 31940},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 923, col: 11, offset: 31973},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 924, col: 11, offset: 32002},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 928, col: 1, offset: 32045},
			expr: &actionExpr{
				pos: position{line: 929, col: 5, offset: 32079},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 929, col: 5, offset: 32079},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 929, col: 5, offset: 32079},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 929, col: 16, offset: 32090},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 929, col: 16, offset: 32090},
									expr: &litMatcher{
										pos:        position{line: 929, col: 17, offset: 32091},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 932, col: 5, offset: 32152},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 936, col: 6, offset: 32332},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 936, col: 6, offset: 32332},
									expr: &choiceExpr{
										pos: position{line: 936, col: 7, offset: 32333},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 936, col: 7, offset: 32333},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 936, col: 15, offset: 32341},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 936, col: 27, offset: 32353},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 940, col: 1, offset: 32397},
			expr: &actionExpr{
				pos: position{line: 940, col: 31, offset: 32427},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 940, col: 31, offset: 32427},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 940, col: 40, offset: 32436},
						expr: &ruleRefExpr{
							pos:  position{line: 940, col: 41, offset: 32437},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 947, col: 1, offset: 32635},
			expr: &choiceExpr{
				pos: position{line: 947, col: 19, offset: 32653},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 947, col: 19, offset: 32653},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 947, col: 19, offset: 32653},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 949, col: 9, offset: 32701},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 949, col: 9, offset: 32701},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 951, col: 9, offset: 32751},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 951, col: 9, offset: 32751},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 953, col: 9, offset: 32811},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 953, col: 9, offset: 32811},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 955, col: 9, offset: 32867},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 955, col: 9, offset: 32867},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 966, col: 1, offset: 33194},
			expr: &choiceExpr{
				pos: position{line: 968, col: 5, offset: 33246},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 968, col: 5, offset: 33246},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 968, col: 5, offset: 33246},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 968, col: 5, offset: 33246},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 968, col: 16, offset: 33257},
										expr: &ruleRefExpr{
											pos:  position{line: 968, col: 17, offset: 33258},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 968, col: 30, offset: 33271},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 968, col: 33, offset: 33274},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 968, col: 49, offset: 33290},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 968, col: 54, offset: 33295},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 968, col: 60, offset: 33301},
										expr: &ruleRefExpr{
											pos:  position{line: 968, col: 61, offset: 33302},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 972, col: 5, offset: 33489},
						run: (*parser).callonRawParagraph13,
						expr: &seqExpr{
							pos: position{line: 972, col: 5, offset: 33489},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 972, col: 5, offset: 33489},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 972, col: 16, offset: 33500},
										expr: &ruleRefExpr{
											pos:  position{line: 972, col: 17, offset: 33501},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 972, col: 30, offset: 33514},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 972, col: 35, offset: 33519},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 972, col: 44, offset: 33528},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 976, col: 5, offset: 33722},
						run: (*parser).callonRawParagraph21,
						expr: &seqExpr{
							pos: position{line: 976, col: 5, offset: 33722},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 976, col: 5, offset: 33722},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 976, col: 16, offset: 33733},
										expr: &ruleRefExpr{
											pos:  position{line: 976, col: 17, offset: 33734},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 976, col: 30, offset: 33747},
									run: (*parser).callonRawParagraph26,
								},
								&notExpr{
									pos: position{line: 983, col: 7, offset: 34033},
									expr: &ruleRefExpr{
										pos:  position{line: 983, col: 8, offset: 34034},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 983, col: 23, offset: 34049},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 983, col: 31, offset: 34057},
										expr: &ruleRefExpr{
											pos:  position{line: 983, col: 32, offset: 34058},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 987, col: 5, offset: 34245},
						run: (*parser).callonRawParagraph32,
						expr: &seqExpr{
							pos: position{line: 987, col: 5, offset: 34245},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 987, col: 5, offset: 34245},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 987, col: 16, offset: 34256},
										expr: &ruleRefExpr{
											pos:  position{line: 987, col: 17, offset: 34257},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 987, col: 30, offset: 34270},
									expr: &ruleRefExpr{
										pos:  position{line: 987, col: 31, offset: 34271},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 987, col: 46, offset: 34286},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 987, col: 52, offset: 34292},
										expr: &ruleRefExpr{
											pos:  position{line: 987, col: 53, offset: 34293},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 991, col: 1, offset: 34395},
			expr: &oneOrMoreExpr{
				pos: position{line: 991, col: 33, offset: 34427},
				expr: &actionExpr{
					pos: position{line: 991, col: 34, offset: 34428},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 991, col: 34, offset: 34428},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 991, col: 34, offset: 34428},
								expr: &ruleRefExpr{
									pos:  position{line: 991, col: 35, offset: 34429},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 991, col: 45, offset: 34439},
								expr: &litMatcher{
									pos:        position{line: 991, col: 45, offset: 34439},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 991, col: 51, offset: 34445},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 991, col: 60, offset: 34454},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 995, col: 1, offset: 34591},
			expr: &actionExpr{
				pos: position{line: 995, col: 21, offset: 34611},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 995, col: 21, offset: 34611},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 995, col: 21, offset: 34611},
							expr: &ruleRefExpr{
								pos:  position{line: 995, col: 22, offset: 34612},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 995, col: 32, offset: 34622},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 995, col: 41, offset: 34631},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 995, col: 66, offset: 34656},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 999, col: 1, offset: 34715},
			expr: &actionExpr{
				pos: position{line: 999, col: 28, offset: 34742},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 999, col: 28, offset: 34742},
					expr: &charClassMatcher{
						pos:        position{line: 999, col: 28, offset: 34742},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 1005, col: 1, offset: 34947},
			expr: &choiceExpr{
				pos: position{line: 1007, col: 5, offset: 34996},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1007, col: 5, offset: 34996},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 1007, col: 5, offset: 34996},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1007, col: 5, offset: 34996},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1007, col: 16, offset: 35007},
										expr: &ruleRefExpr{
											pos:  position{line: 1007, col: 17, offset: 35008},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1007, col: 30, offset: 35021},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 1007, col: 33, offset: 35024},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 1007, col: 49, offset: 35040},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 1007, col: 54, offset: 35045},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 1007, col: 60, offset: 35051},
										expr: &ruleRefExpr{
											pos:  position{line: 1007, col: 61, offset: 35052},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1011, col: 5, offset: 35242},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 1011, col: 5, offset: 35242},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1011, col: 5, offset: 35242},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1011, col: 16, offset: 35253},
										expr: &ruleRefExpr{
											pos:  position{line: 1011, col: 17, offset: 35254},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1011, col: 30, offset: 35267},
									run: (*parser).callonParagraph18,
								},
								&notExpr{
									pos: position{line: 1018, col: 7, offset: 35553},
									expr: &ruleRefExpr{
										pos:  position{line: 1018, col: 8, offset: 35554},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 1018, col: 23, offset: 35569},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 1018, col: 31, offset: 35577},
										expr: &ruleRefExpr{
											pos:  position{line: 1018, col: 32, offset: 35578},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1022, col: 5, offset: 35762},
						run: (*parser).callonParagraph24,
						expr: &seqExpr{
							pos: position{line: 1022, col: 5, offset: 35762},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1022, col: 5, offset: 35762},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1022, col: 16, offset: 35773},
										expr: &ruleRefExpr{
											pos:  position{line: 1022, col: 17, offset: 35774},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 1022, col: 30, offset: 35787},
									expr: &ruleRefExpr{
										pos:  position{line: 1022, col: 31, offset: 35788},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 1022, col: 46, offset: 35803},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 1022, col: 52, offset: 35809},
										expr: &ruleRefExpr{
											pos:  position{line: 1022, col: 53, offset: 35810},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLine",
			pos:  position{line: 1026, col: 1, offset: 35909},
			expr: &ruleRefExpr{
				pos:  position{line: 1026, col: 18, offset: 35926},
				name: "InlineElements",
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 1028, col: 1, offset: 35944},
			expr: &actionExpr{
				pos: position{line: 1028, col: 34, offset: 35977},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 1028, col: 34, offset: 35977},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1028, col: 34, offset: 35977},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1028, col: 40, offset: 35983},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1028, col: 48, offset: 35991},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1028, col: 49, offset: 35992},
									expr: &charClassMatcher{
										pos:        position{line: 1028, col: 49, offset: 35992},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1030, col: 8, offset: 36044},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 1034, col: 1, offset: 36080},
			expr: &oneOrMoreExpr{
				pos: position{line: 1034, col: 36, offset: 36115},
				expr: &actionExpr{
					pos: position{line: 1034, col: 37, offset: 36116},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 1034, col: 37, offset: 36116},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1034, col: 37, offset: 36116},
								expr: &ruleRefExpr{
									pos:  position{line: 1034, col: 38, offset: 36117},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 1034, col: 48, offset: 36127},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1034, col: 57, offset: 36136},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 1039, col: 1, offset: 36352},
			expr: &actionExpr{
				pos: position{line: 1039, col: 20, offset: 36371},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 1039, col: 20, offset: 36371},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1039, col: 20, offset: 36371},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1039, col: 31, offset: 36382},
								expr: &ruleRefExpr{
									pos:  position{line: 1039, col: 32, offset: 36383},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1040, col: 5, offset: 36402},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 1048, col: 5, offset: 36696},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1048, col: 16, offset: 36707},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1049, col: 5, offset: 36734},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1049, col: 16, offset: 36745},
								expr: &ruleRefExpr{
									pos:  position{line: 1049, col: 17, offset: 36746},
									name: "OtherParagraphRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 1053, col: 1, offset: 36887},
			expr: &actionExpr{
				pos: position{line: 1054, col: 5, offset: 36918},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 1054, col: 5, offset: 36918},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1054, col: 5, offset: 36918},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1054, col: 14, offset: 36927},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 1054, col: 14, offset: 36927},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1054, col: 14, offset: 36927},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 1054, col: 23, offset: 36936},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1054, col: 28, offset: 36941},
											expr: &charClassMatcher{
												pos:        position{line: 1054, col: 28, offset: 36941},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1054, col: 68, offset: 36981},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphRawLine",
			pos:  position{line: 1058, col: 1, offset: 37041},
			expr: &ruleRefExpr{
				pos:  position{line: 1058, col: 26, offset: 37066},
				name: "RawParagraphLine",
			},
		},
		{
			name: "NormalParagraphContent",
			pos:  position{line: 1061, col: 1, offset: 37165},
			expr: &oneOrMoreExpr{
				pos: position{line: 1061, col: 27, offset: 37191},
				expr: &ruleRefExpr{
					pos:  position{line: 1061, col: 27, offset: 37191},
					name: "InlineElements",
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 1068, col: 1, offset: 37409},
			expr: &choiceExpr{
				pos: position{line: 1070, col: 5, offset: 37470},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1070, col: 5, offset: 37470},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 1070, col: 5, offset: 37470},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1070, col: 5, offset: 37470},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1070, col: 16, offset: 37481},
										expr: &ruleRefExpr{
											pos:  position{line: 1070, col: 17, offset: 37482},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1070, col: 30, offset: 37495},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 1070, col: 33, offset: 37498},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 1070, col: 49, offset: 37514},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 1070, col: 54, offset: 37519},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1070, col: 61, offset: 37526},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1074, col: 5, offset: 37733},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 1074, col: 5, offset: 37733},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1074, col: 5, offset: 37733},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1074, col: 16, offset: 37744},
										expr: &ruleRefExpr{
											pos:  position{line: 1074, col: 17, offset: 37745},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1074, col: 30, offset: 37758},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1074, col: 37, offset: 37765},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 1078, col: 1, offset: 37873},
			expr: &actionExpr{
				pos: position{line: 1078, col: 31, offset: 37903},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 1078, col: 31, offset: 37903},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1078, col: 31, offset: 37903},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1078, col: 42, offset: 37914},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1078, col: 65, offset: 37937},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1078, col: 76, offset: 37948},
								expr: &seqExpr{
									pos: position{line: 1078, col: 77, offset: 37949},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1078, col: 77, offset: 37949},
											expr: &ruleRefExpr{
												pos:  position{line: 1078, col: 78, offset: 37950},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1078, col: 99, offset: 37971},
											name: "OtherParagraphRawLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawVerseParagraph",
			pos:  position{line: 1086, col: 1, offset: 38201},
			expr: &actionExpr{
				pos: position{line: 1087, col: 5, offset: 38228},
				run: (*parser).callonRawVerseParagraph1,
				expr: &seqExpr{
					pos: position{line: 1087, col: 5, offset: 38228},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1087, col: 5, offset: 38228},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1087, col: 16, offset: 38239},
								expr: &ruleRefExpr{
									pos:  position{line: 1087, col: 17, offset: 38240},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1088, col: 5, offset: 38258},
							run: (*parser).callonRawVerseParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 1095, col: 5, offset: 38470},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 1095, col: 11, offset: 38476},
								expr: &ruleRefExpr{
									pos:  position{line: 1095, col: 12, offset: 38477},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 1103, col: 1, offset: 38691},
			expr: &actionExpr{
				pos: position{line: 1103, col: 19, offset: 38709},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 1103, col: 19, offset: 38709},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1103, col: 19, offset: 38709},
							expr: &ruleRefExpr{
								pos:  position{line: 1103, col: 20, offset: 38710},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1104, col: 5, offset: 38725},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 1104, col: 15, offset: 38735},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1104, col: 15, offset: 38735},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 1104, col: 15, offset: 38735},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 1104, col: 24, offset: 38744},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 1106, col: 9, offset: 38838},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 1106, col: 9, offset: 38838},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1106, col: 9, offset: 38838},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 1106, col: 18, offset: 38847},
														expr: &ruleRefExpr{
															pos:  position{line: 1106, col: 19, offset: 38848},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1106, col: 35, offset: 38864},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1112, col: 1, offset: 38987},
			expr: &actionExpr{
				pos: position{line: 1113, col: 5, offset: 39011},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1113, col: 5, offset: 39011},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1113, col: 14, offset: 39020},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1113, col: 14, offset: 39020},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1114, col: 11, offset: 39072},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 1115, col: 11, offset: 39118},
								expr: &ruleRefExpr{
									pos:  position{line: 1115, col: 11, offset: 39118},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 1116, col: 11, offset: 39137},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1116, col: 11, offset: 39137},
										expr: &ruleRefExpr{
											pos:  position{line: 1116, col: 12, offset: 39138},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 1117, col: 13, offset: 39157},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1117, col: 13, offset: 39157},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1118, col: 15, offset: 39185},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1119, col: 15, offset: 39211},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1120, col: 15, offset: 39233},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1121, col: 15, offset: 39259},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1122, col: 15, offset: 39287},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1123, col: 15, offset: 39308},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1124, col: 15, offset: 39342},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1125, col: 15, offset: 39373},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1126, col: 15, offset: 39404},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1127, col: 15, offset: 39436},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1128, col: 15, offset: 39474},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1129, col: 15, offset: 39505},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1130, col: 15, offset: 39539},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1131, col: 15, offset: 39564},
												name: "ImpliedApostrophe",
											},
											&ruleRefExpr{
												pos:  position{line: 1132, col: 15, offset: 39597},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1139, col: 1, offset: 39827},
			expr: &actionExpr{
				pos: position{line: 1139, col: 14, offset: 39840},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1139, col: 14, offset: 39840},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1139, col: 14, offset: 39840},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1139, col: 20, offset: 39846},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1139, col: 24, offset: 39850},
							expr: &ruleRefExpr{
								pos:  position{line: 1139, col: 24, offset: 39850},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1139, col: 31, offset: 39857},
							expr: &ruleRefExpr{
								pos:  position{line: 1139, col: 32, offset: 39858},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1146, col: 1, offset: 40149},
			expr: &choiceExpr{
				pos: position{line: 1146, col: 15, offset: 40163},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1146, col: 15, offset: 40163},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 41, offset: 40189},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 65, offset: 40213},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1148, col: 1, offset: 40234},
			expr: &choiceExpr{
				pos: position{line: 1148, col: 32, offset: 40265},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1148, col: 32, offset: 40265},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1148, col: 32, offset: 40265},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1148, col: 36, offset: 40269},
								expr: &litMatcher{
									pos:        position{line: 1148, col: 37, offset: 40270},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1148, col: 43, offset: 40276},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1148, col: 43, offset: 40276},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1148, col: 47, offset: 40280},
								expr: &litMatcher{
									pos:        position{line: 1148, col: 48, offset: 40281},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1148, col: 54, offset: 40287},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1148, col: 54, offset: 40287},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1148, col: 58, offset: 40291},
								expr: &litMatcher{
									pos:        position{line: 1148, col: 59, offset: 40292},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1148, col: 65, offset: 40298},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1148, col: 65, offset: 40298},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1148, col: 69, offset: 40302},
								expr: &litMatcher{
									pos:        position{line: 1148, col: 70, offset: 40303},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1150, col: 1, offset: 40310},
			expr: &choiceExpr{
				pos: position{line: 1150, col: 34, offset: 40343},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1150, col: 34, offset: 40343},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1150, col: 41, offset: 40350},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1150, col: 48, offset: 40357},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1150, col: 55, offset: 40364},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1150, col: 62, offset: 40371},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1150, col: 68, offset: 40377},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1152, col: 1, offset: 40384},
			expr: &actionExpr{
				pos: position{line: 1152, col: 26, offset: 40409},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1152, col: 26, offset: 40409},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1152, col: 32, offset: 40415},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1152, col: 32, offset: 40415},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1153, col: 15, offset: 40451},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1154, col: 15, offset: 40488},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1155, col: 15, offset: 40525},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1156, col: 15, offset: 40566},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1157, col: 15, offset: 40596},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1158, col: 15, offset: 40628},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1162, col: 1, offset: 40786},
			expr: &choiceExpr{
				pos: position{line: 1162, col: 28, offset: 40813},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1162, col: 28, offset: 40813},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1163, col: 15, offset: 40848},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1164, col: 15, offset: 40885},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1165, col: 15, offset: 40922},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1167, col: 1, offset: 40950},
			expr: &choiceExpr{
				pos: position{line: 1167, col: 22, offset: 40971},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1167, col: 22, offset: 40971},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1168, col: 15, offset: 41003},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1169, col: 15, offset: 41036},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1170, col: 15, offset: 41069},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1171, col: 15, offset: 41106},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1172, col: 15, offset: 41143},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1174, col: 1, offset: 41169},
			expr: &choiceExpr{
				pos: position{line: 1174, col: 33, offset: 41201},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1174, col: 33, offset: 41201},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1174, col: 39, offset: 41207},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1174, col: 39, offset: 41207},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1178, col: 1, offset: 41344},
			expr: &actionExpr{
				pos: position{line: 1178, col: 25, offset: 41368},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1178, col: 25, offset: 41368},
					expr: &litMatcher{
						pos:        position{line: 1178, col: 25, offset: 41368},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1182, col: 1, offset: 41413},
			expr: &actionExpr{
				pos: position{line: 1182, col: 25, offset: 41437},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1182, col: 25, offset: 41437},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1182, col: 25, offset: 41437},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1182, col: 30, offset: 41442},
							expr: &litMatcher{
								pos:        position{line: 1182, col: 30, offset: 41442},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1190, col: 1, offset: 41547},
			expr: &choiceExpr{
				pos: position{line: 1190, col: 13, offset: 41559},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1190, col: 13, offset: 41559},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1190, col: 35, offset: 41581},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1192, col: 1, offset: 41650},
			expr: &actionExpr{
				pos: position{line: 1192, col: 24, offset: 41673},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1192, col: 24, offset: 41673},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1192, col: 24, offset: 41673},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1192, col: 30, offset: 41679},
								expr: &ruleRefExpr{
									pos:  position{line: 1192, col: 31, offset: 41680},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1192, col: 49, offset: 41698},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1192, col: 54, offset: 41703},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1192, col: 64, offset: 41713},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1192, col: 93, offset: 41742},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1196, col: 1, offset: 41833},
			expr: &seqExpr{
				pos: position{line: 1196, col: 32, offset: 41864},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1196, col: 32, offset: 41864},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1196, col: 59, offset: 41891},
						expr: &seqExpr{
							pos: position{line: 1196, col: 60, offset: 41892},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1196, col: 60, offset: 41892},
									expr: &litMatcher{
										pos:        position{line: 1196, col: 62, offset: 41894},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1196, col: 69, offset: 41901},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1196, col: 69, offset: 41901},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1196, col: 77, offset: 41909},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1198, col: 1, offset: 41976},
			expr: &choiceExpr{
				pos: position{line: 1198, col: 31, offset: 42006},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1198, col: 31, offset: 42006},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1199, col: 11, offset: 42022},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1199, col: 11, offset: 42022},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1199, col: 19, offset: 42030},
								expr: &ruleRefExpr{
									pos:  position{line: 1199, col: 20, offset: 42031},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 11, offset: 42050},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1201, col: 11, offset: 42081},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 11, offset: 42105},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1203, col: 11, offset: 42127},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 11, offset: 42149},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1205, col: 11, offset: 42174},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 11, offset: 42199},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1207, col: 11, offset: 42226},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 11, offset: 42244},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1209, col: 11, offset: 42266},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 11, offset: 42289},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1211, col: 11, offset: 42305},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 11, offset: 42334},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 11, offset: 42367},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 11, offset: 42396},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1217, col: 1, offset: 42438},
			expr: &choiceExpr{
				pos: position{line: 1218, col: 5, offset: 42483},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1218, col: 5, offset: 42483},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1219, col: 7, offset: 42581},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1219, col: 7, offset: 42581},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1219, col: 7, offset: 42581},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1219, col: 12, offset: 42586},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1223, col: 1, offset: 42753},
			expr: &choiceExpr{
				pos: position{line: 1223, col: 24, offset: 42776},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1223, col: 24, offset: 42776},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1223, col: 24, offset: 42776},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1223, col: 24, offset: 42776},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1223, col: 30, offset: 42782},
										expr: &ruleRefExpr{
											pos:  position{line: 1223, col: 31, offset: 42783},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1223, col: 51, offset: 42803},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1223, col: 51, offset: 42803},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1223, col: 55, offset: 42807},
											expr: &litMatcher{
												pos:        position{line: 1223, col: 56, offset: 42808},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1223, col: 61, offset: 42813},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1223, col: 71, offset: 42823},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1223, col: 100, offset: 42852},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1223, col: 104, offset: 42856},
									expr: &notExpr{
										pos: position{line: 1223, col: 106, offset: 42858},
										expr: &ruleRefExpr{
											pos:  position{line: 1223, col: 107, offset: 42859},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1225, col: 5, offset: 43055},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1225, col: 5, offset: 43055},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1225, col: 5, offset: 43055},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1225, col: 11, offset: 43061},
										expr: &ruleRefExpr{
											pos:  position{line: 1225, col: 12, offset: 43062},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1225, col: 30, offset: 43080},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1225, col: 34, offset: 43084},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1225, col: 44, offset: 43094},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1225, col: 44, offset: 43094},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1225, col: 48, offset: 43098},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1225, col: 77, offset: 43127},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1229, col: 1, offset: 43337},
			expr: &seqExpr{
				pos: position{line: 1229, col: 32, offset: 43368},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1229, col: 32, offset: 43368},
						expr: &ruleRefExpr{
							pos:  position{line: 1229, col: 33, offset: 43369},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1229, col: 39, offset: 43375},
						expr: &ruleRefExpr{
							pos:  position{line: 1229, col: 39, offset: 43375},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1231, col: 1, offset: 43406},
			expr: &choiceExpr{
				pos: position{line: 1231, col: 31, offset: 43436},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1231, col: 31, offset: 43436},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1232, col: 11, offset: 43452},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1232, col: 11, offset: 43452},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1232, col: 19, offset: 43460},
								expr: &ruleRefExpr{
									pos:  position{line: 1232, col: 20, offset: 43461},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1233, col: 11, offset: 43480},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1234, col: 11, offset: 43511},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1235, col: 11, offset: 43535},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1235, col: 11, offset: 43535},
								expr: &ruleRefExpr{
									pos:  position{line: 1235, col: 11, offset: 43535},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1235, col: 18, offset: 43542},
								expr: &seqExpr{
									pos: position{line: 1235, col: 19, offset: 43543},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1235, col: 19, offset: 43543},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1235, col: 23, offset: 43547},
											expr: &litMatcher{
												pos:        position{line: 1235, col: 24, offset: 43548},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1236, col: 11, offset: 43565},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1237, col: 11, offset: 43587},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1238, col: 11, offset: 43609},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1239, col: 11, offset: 43634},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1240, col: 11, offset: 43659},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1241, col: 11, offset: 43686},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1242, col: 11, offset: 43704},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1243, col: 11, offset: 43726},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1244, col: 11, offset: 43750},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1245, col: 11, offset: 43768},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 11, offset: 43797},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1247, col: 11, offset: 43830},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 11, offset: 43859},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1250, col: 1, offset: 43899},
			expr: &choiceExpr{
				pos: position{line: 1251, col: 5, offset: 43944},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1251, col: 5, offset: 43944},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1252, col: 7, offset: 44042},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1252, col: 7, offset: 44042},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1252, col: 7, offset: 44042},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1252, col: 11, offset: 44046},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1256, col: 1, offset: 44213},
			expr: &choiceExpr{
				pos: position{line: 1257, col: 5, offset: 44238},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1257, col: 5, offset: 44238},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1257, col: 5, offset: 44238},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1257, col: 5, offset: 44238},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1257, col: 18, offset: 44251},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1257, col: 40, offset: 44273},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1257, col: 45, offset: 44278},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1257, col: 55, offset: 44288},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1257, col: 84, offset: 44317},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1259, col: 9, offset: 44476},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1259, col: 9, offset: 44476},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1259, col: 9, offset: 44476},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1259, col: 22, offset: 44489},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1259, col: 44, offset: 44511},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1259, col: 49, offset: 44516},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1259, col: 59, offset: 44526},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1259, col: 88, offset: 44555},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1262, col: 9, offset: 44758},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1262, col: 9, offset: 44758},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1262, col: 9, offset: 44758},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1262, col: 22, offset: 44771},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1262, col: 44, offset: 44793},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1262, col: 48, offset: 44797},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1262, col: 58, offset: 44807},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1262, col: 87, offset: 44836},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1270, col: 1, offset: 45052},
			expr: &choiceExpr{
				pos: position{line: 1270, col: 15, offset: 45066},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1270, col: 15, offset: 45066},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1270, col: 39, offset: 45090},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1272, col: 1, offset: 45115},
			expr: &actionExpr{
				pos: position{line: 1272, col: 26, offset: 45140},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1272, col: 26, offset: 45140},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1272, col: 26, offset: 45140},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1272, col: 32, offset: 45146},
								expr: &ruleRefExpr{
									pos:  position{line: 1272, col: 33, offset: 45147},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1272, col: 51, offset: 45165},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1272, col: 56, offset: 45170},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1272, col: 66, offset: 45180},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1272, col: 97, offset: 45211},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1276, col: 1, offset: 45349},
			expr: &seqExpr{
				pos: position{line: 1276, col: 34, offset: 45382},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1276, col: 34, offset: 45382},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1276, col: 63, offset: 45411},
						expr: &seqExpr{
							pos: position{line: 1276, col: 64, offset: 45412},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1276, col: 64, offset: 45412},
									expr: &litMatcher{
										pos:        position{line: 1276, col: 66, offset: 45414},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1276, col: 73, offset: 45421},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1276, col: 73, offset: 45421},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1276, col: 81, offset: 45429},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1278, col: 1, offset: 45498},
			expr: &choiceExpr{
				pos: position{line: 1278, col: 33, offset: 45530},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1278, col: 33, offset: 45530},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1279, col: 11, offset: 45546},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1279, col: 11, offset: 45546},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1279, col: 19, offset: 45554},
								expr: &ruleRefExpr{
									pos:  position{line: 1279, col: 20, offset: 45555},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1280, col: 11, offset: 45574},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1281, col: 11, offset: 45607},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1282, col: 11, offset: 45631},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1283, col: 11, offset: 45651},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1284, col: 11, offset: 45673},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1285, col: 11, offset: 45698},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1286, col: 11, offset: 45723},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1287, col: 11, offset: 45750},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1288, col: 11, offset: 45768},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 11, offset: 45790},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1290, col: 11, offset: 45814},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1291, col: 11, offset: 45831},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1292, col: 11, offset: 45860},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 11, offset: 45889},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1295, col: 1, offset: 45931},
			expr: &choiceExpr{
				pos: position{line: 1296, col: 5, offset: 45978},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1296, col: 5, offset: 45978},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1297, col: 7, offset: 46078},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1297, col: 7, offset: 46078},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1297, col: 7, offset: 46078},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1297, col: 12, offset: 46083},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1301, col: 1, offset: 46252},
			expr: &choiceExpr{
				pos: position{line: 1301, col: 26, offset: 46277},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1301, col: 26, offset: 46277},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1301, col: 26, offset: 46277},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1301, col: 26, offset: 46277},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1301, col: 32, offset: 46283},
										expr: &ruleRefExpr{
											pos:  position{line: 1301, col: 33, offset: 46284},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1301, col: 52, offset: 46303},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1301, col: 52, offset: 46303},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1301, col: 56, offset: 46307},
											expr: &litMatcher{
												pos:        position{line: 1301, col: 57, offset: 46308},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1301, col: 62, offset: 46313},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1301, col: 72, offset: 46323},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1301, col: 103, offset: 46354},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1303, col: 5, offset: 46546},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1303, col: 5, offset: 46546},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1303, col: 5, offset: 46546},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1303, col: 11, offset: 46552},
										expr: &ruleRefExpr{
											pos:  position{line: 1303, col: 12, offset: 46553},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1303, col: 30, offset: 46571},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1303, col: 34, offset: 46575},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1303, col: 44, offset: 46585},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1303, col: 44, offset: 46585},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1303, col: 48, offset: 46589},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1303, col: 79, offset: 46620},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1307, col: 1, offset: 46834},
			expr: &seqExpr{
				pos: position{line: 1307, col: 34, offset: 46867},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1307, col: 34, offset: 46867},
						expr: &ruleRefExpr{
							pos:  position{line: 1307, col: 35, offset: 46868},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1307, col: 41, offset: 46874},
						expr: &ruleRefExpr{
							pos:  position{line: 1307, col: 41, offset: 46874},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1309, col: 1, offset: 46907},
			expr: &choiceExpr{
				pos: position{line: 1309, col: 33, offset: 46939},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1309, col: 33, offset: 46939},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1310, col: 11, offset: 46955},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1310, col: 11, offset: 46955},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1310, col: 19, offset: 46963},
								expr: &ruleRefExpr{
									pos:  position{line: 1310, col: 20, offset: 46964},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1311, col: 11, offset: 46983},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1312, col: 11, offset: 47016},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1313, col: 11, offset: 47040},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1313, col: 11, offset: 47040},
								expr: &ruleRefExpr{
									pos:  position{line: 1313, col: 11, offset: 47040},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1313, col: 18, offset: 47047},
								expr: &seqExpr{
									pos: position{line: 1313, col: 19, offset: 47048},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1313, col: 19, offset: 47048},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1313, col: 23, offset: 47052},
											expr: &litMatcher{
												pos:        position{line: 1313, col: 24, offset: 47053},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1314, col: 11, offset: 47070},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1315, col: 11, offset: 47090},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1316, col: 11, offset: 47112},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1317, col: 11, offset: 47137},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1318, col: 11, offset: 47162},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1319, col: 11, offset: 47189},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1320, col: 11, offset: 47207},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1321, col: 11, offset: 47229},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1322, col: 11, offset: 47253},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1323, col: 11, offset: 47271},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1324, col: 11, offset: 47301},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1325, col: 11, offset: 47334},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1326, col: 11, offset: 47363},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1328, col: 1, offset: 47405},
			expr: &choiceExpr{
				pos: position{line: 1329, col: 5, offset: 47452},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1329, col: 5, offset: 47452},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1330, col: 7, offset: 47552},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1330, col: 7, offset: 47552},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1330, col: 7, offset: 47552},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1330, col: 11, offset: 47556},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1334, col: 1, offset: 47726},
			expr: &choiceExpr{
				pos: position{line: 1335, col: 5, offset: 47753},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1335, col: 5, offset: 47753},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1335, col: 5, offset: 47753},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1335, col: 5, offset: 47753},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1335, col: 18, offset: 47766},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1335, col: 40, offset: 47788},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1335, col: 45, offset: 47793},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1335, col: 55, offset: 47803},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1335, col: 86, offset: 47834},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1337, col: 9, offset: 47993},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1337, col: 9, offset: 47993},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1337, col: 9, offset: 47993},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1337, col: 22, offset: 48006},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1337, col: 44, offset: 48028},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1337, col: 49, offset: 48033},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1337, col: 59, offset: 48043},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1337, col: 90, offset: 48074},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1340, col: 9, offset: 48277},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1340, col: 9, offset: 48277},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1340, col: 9, offset: 48277},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1340, col: 22, offset: 48290},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1340, col: 44, offset: 48312},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1340, col: 48, offset: 48316},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1340, col: 58, offset: 48326},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1340, col: 89, offset: 48357},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1347, col: 1, offset: 48574},
			expr: &choiceExpr{
				pos: position{line: 1347, col: 18, offset: 48591},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1347, col: 18, offset: 48591},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1347, col: 45, offset: 48618},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1349, col: 1, offset: 48646},
			expr: &actionExpr{
				pos: position{line: 1349, col: 29, offset: 48674},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 29, offset: 48674},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1349, col: 29, offset: 48674},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1349, col: 35, offset: 48680},
								expr: &ruleRefExpr{
									pos:  position{line: 1349, col: 36, offset: 48681},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1349, col: 54, offset: 48699},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1349, col: 59, offset: 48704},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1349, col: 69, offset: 48714},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1349, col: 103, offset: 48748},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1353, col: 1, offset: 48889},
			expr: &seqExpr{
				pos: position{line: 1353, col: 37, offset: 48925},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1353, col: 37, offset: 48925},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1353, col: 69, offset: 48957},
						expr: &seqExpr{
							pos: position{line: 1353, col: 70, offset: 48958},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1353, col: 70, offset: 48958},
									expr: &litMatcher{
										pos:        position{line: 1353, col: 72, offset: 48960},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1353, col: 79, offset: 48967},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1353, col: 79, offset: 48967},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1353, col: 87, offset: 48975},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1355, col: 1, offset: 49046},
			expr: &choiceExpr{
				pos: position{line: 1355, col: 36, offset: 49081},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1355, col: 36, offset: 49081},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1356, col: 11, offset: 49097},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1356, col: 11, offset: 49097},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1356, col: 19, offset: 49105},
								expr: &ruleRefExpr{
									pos:  position{line: 1356, col: 20, offset: 49106},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1357, col: 11, offset: 49125},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1358, col: 11, offset: 49143},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1359, col: 11, offset: 49179},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1360, col: 11, offset: 49203},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1361, col: 11, offset: 49223},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1362, col: 11, offset: 49245},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1363, col: 11, offset: 49267},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1364, col: 11, offset: 49292},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1365, col: 11, offset: 49319},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1366, col: 11, offset: 49341},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1367, col: 11, offset: 49364},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1368, col: 11, offset: 49380},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1369, col: 11, offset: 49410},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 11, offset: 49439},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1372, col: 1, offset: 49484},
			expr: &choiceExpr{
				pos: position{line: 1373, col: 5, offset: 49534},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1373, col: 5, offset: 49534},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1374, col: 7, offset: 49637},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1374, col: 7, offset: 49637},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1374, col: 7, offset: 49637},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1374, col: 12, offset: 49642},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1378, col: 1, offset: 49814},
			expr: &choiceExpr{
				pos: position{line: 1378, col: 29, offset: 49842},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1378, col: 29, offset: 49842},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1378, col: 29, offset: 49842},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1378, col: 29, offset: 49842},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1378, col: 35, offset: 49848},
										expr: &ruleRefExpr{
											pos:  position{line: 1378, col: 36, offset: 49849},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1378, col: 55, offset: 49868},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1378, col: 55, offset: 49868},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1378, col: 59, offset: 49872},
											expr: &litMatcher{
												pos:        position{line: 1378, col: 60, offset: 49873},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1378, col: 65, offset: 49878},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1378, col: 75, offset: 49888},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1378, col: 109, offset: 49922},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1380, col: 5, offset: 50117},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1380, col: 5, offset: 50117},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1380, col: 5, offset: 50117},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1380, col: 11, offset: 50123},
										expr: &ruleRefExpr{
											pos:  position{line: 1380, col: 12, offset: 50124},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1380, col: 30, offset: 50142},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1380, col: 34, offset: 50146},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1380, col: 44, offset: 50156},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1380, col: 44, offset: 50156},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1380, col: 48, offset: 50160},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1380, col: 82, offset: 50194},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1384, col: 1, offset: 50412},
			expr: &seqExpr{
				pos: position{line: 1384, col: 37, offset: 50448},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1384, col: 37, offset: 50448},
						expr: &ruleRefExpr{
							pos:  position{line: 1384, col: 38, offset: 50449},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1384, col: 44, offset: 50455},
						expr: &ruleRefExpr{
							pos:  position{line: 1384, col: 44, offset: 50455},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1386, col: 1, offset: 50491},
			expr: &choiceExpr{
				pos: position{line: 1386, col: 37, offset: 50527},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1386, col: 37, offset: 50527},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1387, col: 11, offset: 50543},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1387, col: 11, offset: 50543},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1387, col: 19, offset: 50551},
								expr: &ruleRefExpr{
									pos:  position{line: 1387, col: 20, offset: 50552},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1388, col: 11, offset: 50571},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1389, col: 11, offset: 50607},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1390, col: 11, offset: 50631},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1390, col: 11, offset: 50631},
								expr: &ruleRefExpr{
									pos:  position{line: 1390, col: 11, offset: 50631},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1390, col: 18, offset: 50638},
								expr: &seqExpr{
									pos: position{line: 1390, col: 19, offset: 50639},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1390, col: 19, offset: 50639},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1390, col: 23, offset: 50643},
											expr: &litMatcher{
												pos:        position{line: 1390, col: 24, offset: 50644},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1391, col: 11, offset: 50773},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1392, col: 11, offset: 50793},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1393, col: 11, offset: 50815},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1394, col: 11, offset: 50837},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1395, col: 11, offset: 50862},
						name: "SuperscriptText",
					},
					&seqExpr{
						pos: position{line: 1396, col: 11, offset: 50889},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1396, col: 11, offset: 50889},
								expr: &litMatcher{
									pos:        position{line: 1396, col: 12, offset: 50890},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1396, col: 16, offset: 50894},
								name: "Symbol",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1397, col: 11, offset: 50912},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1398, col: 11, offset: 50934},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1399, col: 11, offset: 50958},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1400, col: 11, offset: 50975},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1401, col: 11, offset: 51005},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1402, col: 11, offset: 51038},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1403, col: 11, offset: 51067},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1405, col: 1, offset: 51112},
			expr: &choiceExpr{
				pos: position{line: 1406, col: 5, offset: 51162},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1406, col: 5, offset: 51162},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1407, col: 7, offset: 51265},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1407, col: 7, offset: 51265},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1407, col: 7, offset: 51265},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1407, col: 11, offset: 51269},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1411, col: 1, offset: 51442},
			expr: &choiceExpr{
				pos: position{line: 1412, col: 5, offset: 51472},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1412, col: 5, offset: 51472},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1412, col: 5, offset: 51472},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1412, col: 5, offset: 51472},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1412, col: 18, offset: 51485},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1412, col: 40, offset: 51507},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1412, col: 45, offset: 51512},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1412, col: 55, offset: 51522},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1412, col: 89, offset: 51556},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1414, col: 9, offset: 51715},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1414, col: 9, offset: 51715},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1414, col: 9, offset: 51715},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1414, col: 22, offset: 51728},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1414, col: 44, offset: 51750},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1414, col: 49, offset: 51755},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1414, col: 59, offset: 51765},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1414, col: 93, offset: 51799},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1417, col: 9, offset: 52002},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1417, col: 9, offset: 52002},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1417, col: 9, offset: 52002},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1417, col: 22, offset: 52015},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1417, col: 44, offset: 52037},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1417, col: 48, offset: 52041},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1417, col: 58, offset: 52051},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1417, col: 92, offset: 52085},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1425, col: 1, offset: 52301},
			expr: &choiceExpr{
				pos: position{line: 1425, col: 15, offset: 52315},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1425, col: 15, offset: 52315},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1425, col: 39, offset: 52339},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1427, col: 1, offset: 52364},
			expr: &actionExpr{
				pos: position{line: 1427, col: 26, offset: 52389},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1427, col: 26, offset: 52389},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1427, col: 26, offset: 52389},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1427, col: 32, offset: 52395},
								expr: &ruleRefExpr{
									pos:  position{line: 1427, col: 33, offset: 52396},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1427, col: 51, offset: 52414},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1427, col: 56, offset: 52419},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1427, col: 66, offset: 52429},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1427, col: 97, offset: 52460},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1431, col: 1, offset: 52598},
			expr: &seqExpr{
				pos: position{line: 1431, col: 34, offset: 52631},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1431, col: 34, offset: 52631},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1431, col: 63, offset: 52660},
						expr: &seqExpr{
							pos: position{line: 1431, col: 64, offset: 52661},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1431, col: 64, offset: 52661},
									expr: &litMatcher{
										pos:        position{line: 1431, col: 66, offset: 52663},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1431, col: 73, offset: 52670},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1431, col: 73, offset: 52670},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1431, col: 81, offset: 52678},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1433, col: 1, offset: 52747},
			expr: &choiceExpr{
				pos: position{line: 1433, col: 33, offset: 52779},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1433, col: 33, offset: 52779},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1434, col: 11, offset: 52795},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1435, col: 11, offset: 52828},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1435, col: 11, offset: 52828},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1435, col: 19, offset: 52836},
								expr: &ruleRefExpr{
									pos:  position{line: 1435, col: 20, offset: 52837},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1436, col: 11, offset: 52856},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1437, col: 11, offset: 52880},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1438, col: 11, offset: 52900},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1439, col: 11, offset: 52922},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1440, col: 11, offset: 52947},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1441, col: 11, offset: 52972},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1442, col: 11, offset: 52999},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1443, col: 11, offset: 53017},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1444, col: 11, offset: 53039},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1445, col: 11, offset: 53062},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1446, col: 11, offset: 53078},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1447, col: 11, offset: 53107},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1448, col: 11, offset: 53136},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1450, col: 1, offset: 53178},
			expr: &choiceExpr{
				pos: position{line: 1451, col: 5, offset: 53225},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1451, col: 5, offset: 53225},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1452, col: 7, offset: 53325},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1452, col: 7, offset: 53325},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1452, col: 7, offset: 53325},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1452, col: 12, offset: 53330},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1456, col: 1, offset: 53499},
			expr: &choiceExpr{
				pos: position{line: 1456, col: 26, offset: 53524},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1456, col: 26, offset: 53524},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1456, col: 26, offset: 53524},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1456, col: 26, offset: 53524},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1456, col: 32, offset: 53530},
										expr: &ruleRefExpr{
											pos:  position{line: 1456, col: 33, offset: 53531},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1456, col: 52, offset: 53550},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1456, col: 52, offset: 53550},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1456, col: 56, offset: 53554},
											expr: &litMatcher{
												pos:        position{line: 1456, col: 57, offset: 53555},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1456, col: 62, offset: 53560},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1456, col: 72, offset: 53570},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1456, col: 103, offset: 53601},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1458, col: 5, offset: 53793},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1458, col: 5, offset: 53793},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1458, col: 5, offset: 53793},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1458, col: 11, offset: 53799},
										expr: &ruleRefExpr{
											pos:  position{line: 1458, col: 12, offset: 53800},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1458, col: 30, offset: 53818},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1458, col: 34, offset: 53822},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1458, col: 44, offset: 53832},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1458, col: 44, offset: 53832},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1458, col: 48, offset: 53836},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1458, col: 79, offset: 53867},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1462, col: 1, offset: 54080},
			expr: &seqExpr{
				pos: position{line: 1462, col: 34, offset: 54113},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1462, col: 34, offset: 54113},
						expr: &ruleRefExpr{
							pos:  position{line: 1462, col: 35, offset: 54114},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1462, col: 41, offset: 54120},
						expr: &ruleRefExpr{
							pos:  position{line: 1462, col: 41, offset: 54120},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1464, col: 1, offset: 54153},
			expr: &choiceExpr{
				pos: position{line: 1464, col: 33, offset: 54185},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1464, col: 33, offset: 54185},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1465, col: 11, offset: 54201},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1466, col: 11, offset: 54234},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1466, col: 11, offset: 54234},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1466, col: 19, offset: 54242},
								expr: &ruleRefExpr{
									pos:  position{line: 1466, col: 20, offset: 54243},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1467, col: 11, offset: 54262},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1468, col: 11, offset: 54286},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1468, col: 11, offset: 54286},
								expr: &ruleRefExpr{
									pos:  position{line: 1468, col: 11, offset: 54286},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1468, col: 18, offset: 54293},
								expr: &seqExpr{
									pos: position{line: 1468, col: 19, offset: 54294},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1468, col: 19, offset: 54294},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1468, col: 23, offset: 54298},
											expr: &litMatcher{
												pos:        position{line: 1468, col: 24, offset: 54299},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1469, col: 11, offset: 54316},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1470, col: 11, offset: 54336},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1471, col: 11, offset: 54358},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1472, col: 11, offset: 54383},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1473, col: 11, offset: 54408},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1474, col: 11, offset: 54435},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1475, col: 11, offset: 54453},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1476, col: 11, offset: 54475},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1477, col: 11, offset: 54498},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1478, col: 11, offset: 54514},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1479, col: 11, offset: 54543},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1480, col: 11, offset: 54576},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1481, col: 11, offset: 54605},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1483, col: 1, offset: 54647},
			expr: &choiceExpr{
				pos: position{line: 1484, col: 5, offset: 54694},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1484, col: 5, offset: 54694},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1485, col: 7, offset: 54792},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1485, col: 7, offset: 54792},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1485, col: 7, offset: 54792},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1485, col: 11, offset: 54796},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1489, col: 1, offset: 54963},
			expr: &choiceExpr{
				pos: position{line: 1490, col: 5, offset: 54989},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1490, col: 5, offset: 54989},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1490, col: 5, offset: 54989},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1490, col: 5, offset: 54989},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1490, col: 18, offset: 55002},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1490, col: 40, offset: 55024},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1490, col: 45, offset: 55029},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1490, col: 55, offset: 55039},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1490, col: 86, offset: 55070},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1492, col: 9, offset: 55229},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1492, col: 9, offset: 55229},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1492, col: 9, offset: 55229},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1492, col: 22, offset: 55242},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1492, col: 44, offset: 55264},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1492, col: 49, offset: 55269},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1492, col: 59, offset: 55279},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1492, col: 90, offset: 55310},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1495, col: 9, offset: 55513},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1495, col: 9, offset: 55513},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1495, col: 9, offset: 55513},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1495, col: 22, offset: 55526},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1495, col: 44, offset: 55548},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1495, col: 48, offset: 55552},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1495, col: 58, offset: 55562},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1495, col: 89, offset: 55593},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1500, col: 1, offset: 55748},
			expr: &actionExpr{
				pos: position{line: 1500, col: 18, offset: 55765},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1500, col: 18, offset: 55765},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1500, col: 18, offset: 55765},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1500, col: 24, offset: 55771},
								expr: &ruleRefExpr{
									pos:  position{line: 1500, col: 25, offset: 55772},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1500, col: 43, offset: 55790},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1500, col: 47, offset: 55794},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1500, col: 56, offset: 55803},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1500, col: 78, offset: 55825},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1504, col: 1, offset: 55925},
			expr: &choiceExpr{
				pos: position{line: 1504, col: 25, offset: 55949},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1504, col: 25, offset: 55949},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1504, col: 38, offset: 55962},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1506, col: 1, offset: 55983},
			expr: &actionExpr{
				pos: position{line: 1506, col: 21, offset: 56003},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1506, col: 21, offset: 56003},
					expr: &charClassMatcher{
						pos:        position{line: 1506, col: 21, offset: 56003},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1510, col: 1, offset: 56084},
			expr: &actionExpr{
				pos: position{line: 1510, col: 25, offset: 56108},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1510, col: 25, offset: 56108},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1510, col: 25, offset: 56108},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1510, col: 38, offset: 56121},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1510, col: 60, offset: 56143},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1510, col: 64, offset: 56147},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1510, col: 73, offset: 56156},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1510, col: 95, offset: 56178},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1514, col: 1, offset: 56311},
			expr: &actionExpr{
				pos: position{line: 1514, col: 20, offset: 56330},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1514, col: 20, offset: 56330},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1514, col: 20, offset: 56330},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1514, col: 26, offset: 56336},
								expr: &ruleRefExpr{
									pos:  position{line: 1514, col: 27, offset: 56337},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1514, col: 45, offset: 56355},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1514, col: 49, offset: 56359},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1514, col: 58, offset: 56368},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1514, col: 82, offset: 56392},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1518, col: 1, offset: 56494},
			expr: &choiceExpr{
				pos: position{line: 1518, col: 27, offset: 56520},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1518, col: 27, offset: 56520},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1518, col: 40, offset: 56533},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1520, col: 1, offset: 56556},
			expr: &actionExpr{
				pos: position{line: 1520, col: 23, offset: 56578},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1520, col: 23, offset: 56578},
					expr: &charClassMatcher{
						pos:        position{line: 1520, col: 23, offset: 56578},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1524, col: 1, offset: 56659},
			expr: &actionExpr{
				pos: position{line: 1524, col: 27, offset: 56685},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1524, col: 27, offset: 56685},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1524, col: 27, offset: 56685},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1524, col: 40, offset: 56698},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1524, col: 62, offset: 56720},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1524, col: 66, offset: 56724},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1524, col: 75, offset: 56733},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1524, col: 99, offset: 56757},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1531, col: 1, offset: 57006},
			expr: &choiceExpr{
				pos: position{line: 1531, col: 22, offset: 57027},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1531, col: 22, offset: 57027},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1531, col: 46, offset: 57051},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1531, col: 70, offset: 57075},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1533, col: 1, offset: 57095},
			expr: &litMatcher{
				pos:        position{line: 1533, col: 32, offset: 57126},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1535, col: 1, offset: 57133},
			expr: &actionExpr{
				pos: position{line: 1535, col: 26, offset: 57158},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1535, col: 26, offset: 57158},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1535, col: 26, offset: 57158},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1535, col: 54, offset: 57186},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1535, col: 63, offset: 57195},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1535, col: 93, offset: 57225},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1535, col: 121, offset: 57253},
							expr: &ruleRefExpr{
								pos:  position{line: 1535, col: 122, offset: 57254},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1539, col: 1, offset: 57363},
			expr: &choiceExpr{
				pos: position{line: 1539, col: 33, offset: 57395},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1539, col: 34, offset: 57396},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1539, col: 34, offset: 57396},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1539, col: 35, offset: 57397},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1539, col: 35, offset: 57397},
											expr: &ruleRefExpr{
												pos:  position{line: 1539, col: 36, offset: 57398},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1539, col: 64, offset: 57426},
											expr: &ruleRefExpr{
												pos:  position{line: 1539, col: 65, offset: 57427},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1539, col: 71, offset: 57433},
											expr: &ruleRefExpr{
												pos:  position{line: 1539, col: 72, offset: 57434},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1539, col: 80, offset: 57442,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1539, col: 83, offset: 57445},
									expr: &seqExpr{
										pos: position{line: 1539, col: 84, offset: 57446},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1539, col: 84, offset: 57446},
												expr: &seqExpr{
													pos: position{line: 1539, col: 86, offset: 57448},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1539, col: 86, offset: 57448},
															expr: &ruleRefExpr{
																pos:  position{line: 1539, col: 86, offset: 57448},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1539, col: 93, offset: 57455},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1539, col: 122, offset: 57484},
												expr: &ruleRefExpr{
													pos:  position{line: 1539, col: 123, offset: 57485},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1539, col: 151, offset: 57513},
												expr: &ruleRefExpr{
													pos:  position{line: 1539, col: 152, offset: 57514},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1539, col: 160, offset: 57522,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1541, col: 7, offset: 57666},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1541, col: 8, offset: 57667},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1541, col: 8, offset: 57667},
									expr: &ruleRefExpr{
										pos:  position{line: 1541, col: 9, offset: 57668},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1541, col: 15, offset: 57674},
									expr: &ruleRefExpr{
										pos:  position{line: 1541, col: 16, offset: 57675},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1541, col: 24, offset: 57683},
									expr: &ruleRefExpr{
										pos:  position{line: 1541, col: 25, offset: 57684},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1541, col: 53, offset: 57712,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1545, col: 1, offset: 57798},
			expr: &litMatcher{
				pos:        position{line: 1545, col: 32, offset: 57829},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1547, col: 1, offset: 57838},
			expr: &actionExpr{
				pos: position{line: 1547, col: 26, offset: 57863},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1547, col: 26, offset: 57863},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1547, col: 26, offset: 57863},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1547, col: 54, offset: 57891},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1547, col: 63, offset: 57900},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1547, col: 93, offset: 57930},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1547, col: 121, offset: 57958},
							expr: &ruleRefExpr{
								pos:  position{line: 1547, col: 122, offset: 57959},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1551, col: 1, offset: 58068},
			expr: &choiceExpr{
				pos: position{line: 1551, col: 33, offset: 58100},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1551, col: 34, offset: 58101},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1551, col: 34, offset: 58101},
							expr: &seqExpr{
								pos: position{line: 1551, col: 35, offset: 58102},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1551, col: 35, offset: 58102},
										expr: &ruleRefExpr{
											pos:  position{line: 1551, col: 36, offset: 58103},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1551, col: 64, offset: 58131,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1553, col: 7, offset: 58298},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1553, col: 7, offset: 58298},
							expr: &seqExpr{
								pos: position{line: 1553, col: 8, offset: 58299},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1553, col: 8, offset: 58299},
										expr: &ruleRefExpr{
											pos:  position{line: 1553, col: 9, offset: 58300},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1553, col: 15, offset: 58306},
										expr: &ruleRefExpr{
											pos:  position{line: 1553, col: 16, offset: 58307},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1553, col: 24, offset: 58315},
										expr: &ruleRefExpr{
											pos:  position{line: 1553, col: 25, offset: 58316},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1553, col: 53, offset: 58344,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1557, col: 1, offset: 58431},
			expr: &choiceExpr{
				pos: position{line: 1557, col: 21, offset: 58451},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1557, col: 21, offset: 58451},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1557, col: 21, offset: 58451},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1557, col: 21, offset: 58451},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1557, col: 30, offset: 58460},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1557, col: 38, offset: 58468},
										expr: &ruleRefExpr{
											pos:  position{line: 1557, col: 39, offset: 58469},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1557, col: 67, offset: 58497},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1559, col: 5, offset: 58595},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1559, col: 5, offset: 58595},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1559, col: 5, offset: 58595},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1559, col: 15, offset: 58605},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1559, col: 23, offset: 58613},
										expr: &choiceExpr{
											pos: position{line: 1559, col: 24, offset: 58614},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1559, col: 24, offset: 58614},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1559, col: 37, offset: 58627},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1559, col: 65, offset: 58655},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1563, col: 1, offset: 58755},
			expr: &actionExpr{
				pos: position{line: 1563, col: 30, offset: 58784},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1563, col: 30, offset: 58784},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1570, col: 1, offset: 58964},
			expr: &choiceExpr{
				pos: position{line: 1570, col: 19, offset: 58982},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1570, col: 19, offset: 58982},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1570, col: 44, offset: 59007},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1572, col: 1, offset: 59034},
			expr: &choiceExpr{
				pos: position{line: 1572, col: 27, offset: 59060},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1572, col: 27, offset: 59060},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1572, col: 27, offset: 59060},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1572, col: 27, offset: 59060},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1572, col: 32, offset: 59065},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1572, col: 36, offset: 59069},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1572, col: 40, offset: 59073},
									expr: &ruleRefExpr{
										pos:  position{line: 1572, col: 40, offset: 59073},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1572, col: 47, offset: 59080},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1572, col: 51, offset: 59084},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1572, col: 58, offset: 59091},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1572, col: 79, offset: 59112},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1574, col: 5, offset: 59197},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1574, col: 5, offset: 59197},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1574, col: 5, offset: 59197},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1574, col: 10, offset: 59202},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1574, col: 14, offset: 59206},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1574, col: 18, offset: 59210},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1578, col: 1, offset: 59286},
			expr: &actionExpr{
				pos: position{line: 1578, col: 27, offset: 59312},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1578, col: 27, offset: 59312},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1578, col: 27, offset: 59312},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1578, col: 35, offset: 59320},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1578, col: 40, offset: 59325},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1578, col: 54, offset: 59339},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1578, col: 72, offset: 59357},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1582, col: 1, offset: 59484},
			expr: &ruleRefExpr{
				pos:  position{line: 1582, col: 24, offset: 59507},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1587, col: 1, offset: 59634},
			expr: &choiceExpr{
				pos: position{line: 1587, col: 9, offset: 59642},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1587, col: 9, offset: 59642},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1587, col: 24, offset: 59657},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1590, col: 1, offset: 59741},
			expr: &actionExpr{
				pos: position{line: 1590, col: 17, offset: 59757},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1590, col: 17, offset: 59757},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1590, col: 17, offset: 59757},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1590, col: 25, offset: 59765},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1590, col: 30, offset: 59770},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1590, col: 40, offset: 59780},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1590, col: 58, offset: 59798},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1594, col: 1, offset: 59913},
			expr: &actionExpr{
				pos: position{line: 1594, col: 17, offset: 59929},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1594, col: 17, offset: 59929},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1594, col: 17, offset: 59929},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1594, col: 22, offset: 59934},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1594, col: 42, offset: 59954},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1594, col: 59, offset: 59971},
								expr: &ruleRefExpr{
									pos:  position{line: 1594, col: 60, offset: 59972},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1598, col: 1, offset: 60069},
			expr: &actionExpr{
				pos: position{line: 1598, col: 19, offset: 60087},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1598, col: 19, offset: 60087},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1598, col: 19, offset: 60087},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1598, col: 23, offset: 60091},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1598, col: 33, offset: 60101},
								expr: &ruleRefExpr{
									pos:  position{line: 1598, col: 34, offset: 60102},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1599, col: 5, offset: 60135},
							expr: &ruleRefExpr{
								pos:  position{line: 1599, col: 5, offset: 60135},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1599, col: 12, offset: 60142},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1599, col: 23, offset: 60153},
								expr: &ruleRefExpr{
									pos:  position{line: 1599, col: 24, offset: 60154},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1599, col: 43, offset: 60173},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1603, col: 1, offset: 60294},
			expr: &actionExpr{
				pos: position{line: 1603, col: 30, offset: 60323},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1603, col: 30, offset: 60323},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1605, col: 5, offset: 60376},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1605, col: 6, offset: 60377},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1605, col: 6, offset: 60377},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1605, col: 6, offset: 60377},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1605, col: 11, offset: 60382},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1605, col: 20, offset: 60391},
												expr: &choiceExpr{
													pos: position{line: 1605, col: 21, offset: 60392},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1605, col: 21, offset: 60392},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1605, col: 36, offset: 60407},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1605, col: 49, offset: 60420},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1605, col: 71, offset: 60442},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1605, col: 76, offset: 60447},
											expr: &notExpr{
												pos: position{line: 1605, col: 78, offset: 60449},
												expr: &litMatcher{
													pos:        position{line: 1605, col: 79, offset: 60450},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1605, col: 84, offset: 60455},
											expr: &litMatcher{
												pos:        position{line: 1605, col: 84, offset: 60455},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1609, col: 6, offset: 60586},
								run: (*parser).callonFirstLinkAttributeElement19,
								expr: &seqExpr{
									pos: position{line: 1609, col: 6, offset: 60586},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1609, col: 6, offset: 60586},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1609, col: 15, offset: 60595},
												expr: &choiceExpr{
													pos: position{line: 1609, col: 16, offset: 60596},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1609, col: 16, offset: 60596},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1609, col: 31, offset: 60611},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1609, col: 44, offset: 60624},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1609, col: 68, offset: 60648},
											expr: &notExpr{
												pos: position{line: 1609, col: 70, offset: 60650},
												expr: &litMatcher{
													pos:        position{line: 1609, col: 71, offset: 60651},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1609, col: 76, offset: 60656},
											expr: &litMatcher{
												pos:        position{line: 1609, col: 76, offset: 60656},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1615, col: 1, offset: 60776},
			expr: &actionExpr{
				pos: position{line: 1615, col: 18, offset: 60793},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1615, col: 18, offset: 60793},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1619, col: 1, offset: 60883},
			expr: &actionExpr{
				pos: position{line: 1619, col: 24, offset: 60906},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1619, col: 24, offset: 60906},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1623, col: 1, offset: 61003},
			expr: &actionExpr{
				pos: position{line: 1623, col: 26, offset: 61028},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1623, col: 26, offset: 61028},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1628, col: 1, offset: 61189},
			expr: &actionExpr{
				pos: position{line: 1629, col: 5, offset: 61209},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1629, col: 5, offset: 61209},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1629, col: 5, offset: 61209},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1629, col: 14, offset: 61218},
								expr: &choiceExpr{
									pos: position{line: 1629, col: 15, offset: 61219},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1629, col: 15, offset: 61219},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 1630, col: 11, offset: 61235},
											name: "Symbol",
										},
										&oneOrMoreExpr{
											pos: position{line: 1631, col: 11, offset: 61253},
											expr: &ruleRefExpr{
												pos:  position{line: 1631, col: 11, offset: 61253},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1632, col: 11, offset: 61272},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1633, col: 11, offset: 61297},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1634, col: 11, offset: 61320},
											name: "ImpliedApostrophe",
										},
										&ruleRefExpr{
											pos:  position{line: 1635, col: 11, offset: 61349},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1636, col: 11, offset: 61368},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1636, col: 21, offset: 61378},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1640, col: 1, offset: 61452},
			expr: &choiceExpr{
				pos: position{line: 1640, col: 17, offset: 61468},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1640, col: 17, offset: 61468},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1640, col: 40, offset: 61491},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1643, col: 1, offset: 61622},
			expr: &actionExpr{
				pos: position{line: 1643, col: 25, offset: 61646},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1643, col: 25, offset: 61646},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1643, col: 25, offset: 61646},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1643, col: 33, offset: 61654},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1643, col: 38, offset: 61659},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1643, col: 38, offset: 61659},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1643, col: 57, offset: 61678},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1643, col: 79, offset: 61700},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1643, col: 97, offset: 61718},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1647, col: 1, offset: 61833},
			expr: &actionExpr{
				pos: position{line: 1647, col: 25, offset: 61857},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1647, col: 25, offset: 61857},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1647, col: 25, offset: 61857},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1647, col: 30, offset: 61862},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1647, col: 48, offset: 61880},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1647, col: 65, offset: 61897},
								expr: &ruleRefExpr{
									pos:  position{line: 1647, col: 66, offset: 61898},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1654, col: 1, offset: 62100},
			expr: &actionExpr{
				pos: position{line: 1654, col: 15, offset: 62114},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1654, col: 15, offset: 62114},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1654, col: 15, offset: 62114},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1654, col: 26, offset: 62125},
								expr: &ruleRefExpr{
									pos:  position{line: 1654, col: 27, offset: 62126},
									name: "BlockImageAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1654, col: 45, offset: 62144},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1654, col: 55, offset: 62154},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1654, col: 61, offset: 62160},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1654, col: 71, offset: 62170},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1654, col: 84, offset: 62183},
								name: "InlineImageAttrs",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1654, col: 102, offset: 62201},
							expr: &ruleRefExpr{
								pos:  position{line: 1654, col: 102, offset: 62201},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1654, col: 109, offset: 62208},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1658, col: 1, offset: 62319},
			expr: &actionExpr{
				pos: position{line: 1658, col: 16, offset: 62334},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1658, col: 16, offset: 62334},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1658, col: 16, offset: 62334},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1658, col: 25, offset: 62343},
							expr: &litMatcher{
								pos:        position{line: 1658, col: 26, offset: 62344},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1658, col: 30, offset: 62348},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1658, col: 36, offset: 62354},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1658, col: 46, offset: 62364},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1658, col: 59, offset: 62377},
								name: "InlineImageAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttrs",
			pos:  position{line: 1662, col: 1, offset: 62491},
			expr: &actionExpr{
				pos: position{line: 1662, col: 21, offset: 62511},
				run: (*parser).callonInlineImageAttrs1,
				expr: &seqExpr{
					pos: position{line: 1662, col: 21, offset: 62511},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1662, col: 21, offset: 62511},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1662, col: 25, offset: 62515},
							label: "alt",
							expr: &ruleRefExpr{
								pos:  position{line: 1662, col: 29, offset: 62519},
								name: "ImageAltInline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1662, col: 44, offset: 62534},
							label: "w",
							expr: &ruleRefExpr{
								pos:  position{line: 1662, col: 46, offset: 62536},
								name: "ImageWidth",
							},
						},
						&labeledExpr{
							pos:   position{line: 1662, col: 57, offset: 62547},
							label: "h",
							expr: &ruleRefExpr{
								pos:  position{line: 1662, col: 59, offset: 62549},
								name: "ImageHeight",
							},
						},
						&labeledExpr{
							pos:   position{line: 1662, col: 71, offset: 62561},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1662, col: 74, offset: 62564},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1662, col: 85, offset: 62575},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImageAttrs",
			pos:  position{line: 1666, col: 1, offset: 62641},
			expr: &choiceExpr{
				pos: position{line: 1666, col: 20, offset: 62660},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1666, col: 20, offset: 62660},
						name: "ImageAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 1666, col: 36, offset: 62676},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 1666, col: 51, offset: 62691},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1668, col: 1, offset: 62704},
			expr: &actionExpr{
				pos: position{line: 1668, col: 18, offset: 62721},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1668, col: 18, offset: 62721},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1668, col: 18, offset: 62721},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1668, col: 22, offset: 62725},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1668, col: 29, offset: 62732},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1668, col: 29, offset: 62732},
										expr: &ruleRefExpr{
											pos:  position{line: 1668, col: 29, offset: 62732},
											name: "ImageAltAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1668, col: 43, offset: 62746},
										expr: &ruleRefExpr{
											pos:  position{line: 1668, col: 43, offset: 62746},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1668, col: 58, offset: 62761},
										expr: &ruleRefExpr{
											pos:  position{line: 1668, col: 58, offset: 62761},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1668, col: 74, offset: 62777},
										expr: &ruleRefExpr{
											pos:  position{line: 1668, col: 74, offset: 62777},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1668, col: 91, offset: 62794},
										expr: &ruleRefExpr{
											pos:  position{line: 1668, col: 91, offset: 62794},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1668, col: 103, offset: 62806},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1668, col: 107, offset: 62810},
							expr: &ruleRefExpr{
								pos:  position{line: 1668, col: 107, offset: 62810},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1668, col: 114, offset: 62817},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageAltInline",
			pos:  position{line: 1672, col: 1, offset: 62875},
			expr: &actionExpr{
				pos: position{line: 1672, col: 19, offset: 62893},
				run: (*parser).callonImageAltInline1,
				expr: &labeledExpr{
					pos:   position{line: 1672, col: 19, offset: 62893},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1672, col: 25, offset: 62899},
						expr: &ruleRefExpr{
							pos:  position{line: 1672, col: 25, offset: 62899},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1676, col: 1, offset: 62982},
			expr: &actionExpr{
				pos: position{line: 1676, col: 15, offset: 62996},
				run: (*parser).callonImageWidth1,
				expr: &seqExpr{
					pos: position{line: 1676, col: 15, offset: 62996},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1676, col: 15, offset: 62996},
							expr: &litMatcher{
								pos:        position{line: 1676, col: 15, offset: 62996},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1676, col: 20, offset: 63001},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1676, col: 26, offset: 63007},
								expr: &ruleRefExpr{
									pos:  position{line: 1676, col: 26, offset: 63007},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1680, col: 1, offset: 63087},
			expr: &actionExpr{
				pos: position{line: 1680, col: 16, offset: 63102},
				run: (*parser).callonImageHeight1,
				expr: &seqExpr{
					pos: position{line: 1680, col: 16, offset: 63102},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1680, col: 16, offset: 63102},
							expr: &litMatcher{
								pos:        position{line: 1680, col: 16, offset: 63102},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1680, col: 21, offset: 63107},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1680, col: 27, offset: 63113},
								expr: &ruleRefExpr{
									pos:  position{line: 1680, col: 27, offset: 63113},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttr",
			pos:  position{line: 1684, col: 1, offset: 63199},
			expr: &actionExpr{
				pos: position{line: 1684, col: 17, offset: 63215},
				run: (*parser).callonImageAltAttr1,
				expr: &seqExpr{
					pos: position{line: 1684, col: 17, offset: 63215},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1684, col: 17, offset: 63215},
							expr: &ruleRefExpr{
								pos:  position{line: 1684, col: 17, offset: 63215},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1684, col: 24, offset: 63222},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1684, col: 30, offset: 63228},
								name: "PositionalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1684, col: 46, offset: 63244},
							expr: &ruleRefExpr{
								pos:  position{line: 1684, col: 46, offset: 63244},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttr",
			pos:  position{line: 1688, col: 1, offset: 63333},
			expr: &actionExpr{
				pos: position{line: 1688, col: 19, offset: 63351},
				run: (*parser).callonImageWidthAttr1,
				expr: &seqExpr{
					pos: position{line: 1688, col: 19, offset: 63351},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1688, col: 19, offset: 63351},
							expr: &ruleRefExpr{
								pos:  position{line: 1688, col: 19, offset: 63351},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1688, col: 26, offset: 63358},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1688, col: 30, offset: 63362},
							expr: &ruleRefExpr{
								pos:  position{line: 1688, col: 30, offset: 63362},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1688, col: 37, offset: 63369},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1688, col: 43, offset: 63375},
								expr: &ruleRefExpr{
									pos:  position{line: 1688, col: 43, offset: 63375},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttr",
			pos:  position{line: 1695, col: 1, offset: 63526},
			expr: &actionExpr{
				pos: position{line: 1695, col: 20, offset: 63545},
				run: (*parser).callonImageHeightAttr1,
				expr: &seqExpr{
					pos: position{line: 1695, col: 20, offset: 63545},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1695, col: 20, offset: 63545},
							expr: &ruleRefExpr{
								pos:  position{line: 1695, col: 20, offset: 63545},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1695, col: 27, offset: 63552},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1695, col: 31, offset: 63556},
							expr: &ruleRefExpr{
								pos:  position{line: 1695, col: 31, offset: 63556},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1695, col: 38, offset: 63563},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1695, col: 44, offset: 63569},
								expr: &ruleRefExpr{
									pos:  position{line: 1695, col: 44, offset: 63569},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1706, col: 1, offset: 63923},
			expr: &actionExpr{
				pos: position{line: 1706, col: 15, offset: 63937},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1706, col: 15, offset: 63937},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1706, col: 15, offset: 63937},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1706, col: 23, offset: 63945},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1706, col: 29, offset: 63951},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1706, col: 29, offset: 63951},
									expr: &charClassMatcher{
										pos:        position{line: 1706, col: 29, offset: 63951},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1706, col: 73, offset: 63995},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1706, col: 80, offset: 64002},
								name: "IconAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttrs",
			pos:  position{line: 1710, col: 1, offset: 64088},
			expr: &actionExpr{
				pos: position{line: 1710, col: 14, offset: 64101},
				run: (*parser).callonIconAttrs1,
				expr: &seqExpr{
					pos: position{line: 1710, col: 14, offset: 64101},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1710, col: 14, offset: 64101},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1710, col: 18, offset: 64105},
							label: "size",
							expr: &ruleRefExpr{
								pos:  position{line: 1710, col: 23, offset: 64110},
								name: "IconSize",
							},
						},
						&labeledExpr{
							pos:   position{line: 1710, col: 32, offset: 64119},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1710, col: 35, offset: 64122},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1710, col: 46, offset: 64133},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1714, col: 1, offset: 64194},
			expr: &actionExpr{
				pos: position{line: 1714, col: 13, offset: 64206},
				run: (*parser).callonIconSize1,
				expr: &labeledExpr{
					pos:   position{line: 1714, col: 13, offset: 64206},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1714, col: 19, offset: 64212},
						expr: &ruleRefExpr{
							pos:  position{line: 1714, col: 19, offset: 64212},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1721, col: 1, offset: 64495},
			expr: &choiceExpr{
				pos: position{line: 1721, col: 19, offset: 64513},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1721, col: 19, offset: 64513},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1721, col: 19, offset: 64513},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1721, col: 19, offset: 64513},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1721, col: 32, offset: 64526},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1721, col: 41, offset: 64535},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1721, col: 58, offset: 64552},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1723, col: 5, offset: 64622},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1723, col: 5, offset: 64622},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1723, col: 5, offset: 64622},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1723, col: 17, offset: 64634},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1723, col: 22, offset: 64639},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1723, col: 35, offset: 64652},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1723, col: 39, offset: 64656},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1723, col: 47, offset: 64664},
										expr: &ruleRefExpr{
											pos:  position{line: 1723, col: 48, offset: 64665},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1723, col: 66, offset: 64683},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1727, col: 1, offset: 64748},
			expr: &ruleRefExpr{
				pos:  position{line: 1727, col: 16, offset: 64763},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1729, col: 1, offset: 64776},
			expr: &actionExpr{
				pos: position{line: 1729, col: 20, offset: 64795},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1729, col: 20, offset: 64795},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1729, col: 29, offset: 64804},
						expr: &seqExpr{
							pos: position{line: 1729, col: 30, offset: 64805},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1729, col: 30, offset: 64805},
									expr: &litMatcher{
										pos:        position{line: 1729, col: 31, offset: 64806},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1729, col: 35, offset: 64810},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1736, col: 1, offset: 65141},
			expr: &actionExpr{
				pos: position{line: 1736, col: 19, offset: 65159},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1736, col: 19, offset: 65159},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1736, col: 19, offset: 65159},
							expr: &ruleRefExpr{
								pos:  position{line: 1736, col: 20, offset: 65160},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1737, col: 5, offset: 65249},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1737, col: 12, offset: 65256},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1737, col: 12, offset: 65256},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1738, col: 11, offset: 65280},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1739, col: 11, offset: 65305},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1740, col: 11, offset: 65330},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1741, col: 11, offset: 65352},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1742, col: 11, offset: 65376},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1743, col: 11, offset: 65405},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1744, col: 11, offset: 65433},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1745, col: 11, offset: 65450},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1749, col: 1, offset: 65495},
			expr: &choiceExpr{
				pos: position{line: 1749, col: 19, offset: 65513},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1749, col: 19, offset: 65513},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1749, col: 19, offset: 65513},
								expr: &ruleRefExpr{
									pos:  position{line: 1749, col: 21, offset: 65515},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1749, col: 31, offset: 65525},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1750, col: 19, offset: 65597},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1751, col: 19, offset: 65638},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1752, col: 19, offset: 65680},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1753, col: 19, offset: 65722},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1754, col: 19, offset: 65764},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1755, col: 19, offset: 65803},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1756, col: 19, offset: 65844},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "DelimitedBlockRawLine",
			pos:  position{line: 1758, col: 1, offset: 65873},
			expr: &choiceExpr{
				pos: position{line: 1758, col: 26, offset: 65898},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1758, col: 26, offset: 65898},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1758, col: 42, offset: 65914},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 1760, col: 1, offset: 65925},
			expr: &actionExpr{
				pos: position{line: 1760, col: 12, offset: 65936},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 1760, col: 12, offset: 65936},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1760, col: 12, offset: 65936},
							expr: &ruleRefExpr{
								pos:  position{line: 1760, col: 13, offset: 65937},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1760, col: 17, offset: 65941},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1760, col: 26, offset: 65950},
								name: "RawLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1760, col: 42, offset: 65966},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawLineContent",
			pos:  position{line: 1764, col: 1, offset: 66050},
			expr: &actionExpr{
				pos: position{line: 1764, col: 19, offset: 66068},
				run: (*parser).callonRawLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1764, col: 19, offset: 66068},
					expr: &charClassMatcher{
						pos:        position{line: 1764, col: 19, offset: 66068},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1768, col: 1, offset: 66119},
			expr: &ruleRefExpr{
				pos:  position{line: 1768, col: 20, offset: 66138},
				name: "VerbatimLine",
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1770, col: 1, offset: 66154},
			expr: &actionExpr{
				pos: position{line: 1770, col: 17, offset: 66170},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1770, col: 17, offset: 66170},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1770, col: 17, offset: 66170},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1770, col: 26, offset: 66179},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1770, col: 47, offset: 66200},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1770, col: 56, offset: 66209},
								expr: &ruleRefExpr{
									pos:  position{line: 1770, col: 57, offset: 66210},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1770, col: 68, offset: 66221},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1774, col: 1, offset: 66295},
			expr: &actionExpr{
				pos: position{line: 1774, col: 24, offset: 66318},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1774, col: 24, offset: 66318},
					expr: &seqExpr{
						pos: position{line: 1774, col: 25, offset: 66319},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1774, col: 25, offset: 66319},
								expr: &ruleRefExpr{
									pos:  position{line: 1774, col: 26, offset: 66320},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1774, col: 36, offset: 66330},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1774, col: 36, offset: 66330},
										expr: &ruleRefExpr{
											pos:  position{line: 1774, col: 36, offset: 66330},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1774, col: 45, offset: 66339},
										expr: &charClassMatcher{
											pos:        position{line: 1774, col: 45, offset: 66339},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1778, col: 1, offset: 66393},
			expr: &oneOrMoreExpr{
				pos: position{line: 1778, col: 13, offset: 66405},
				expr: &ruleRefExpr{
					pos:  position{line: 1778, col: 13, offset: 66405},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1780, col: 1, offset: 66417},
			expr: &actionExpr{
				pos: position{line: 1780, col: 12, offset: 66428},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1780, col: 12, offset: 66428},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1780, col: 12, offset: 66428},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1780, col: 16, offset: 66432},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1780, col: 21, offset: 66437},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1780, col: 21, offset: 66437},
									expr: &charClassMatcher{
										pos:        position{line: 1780, col: 21, offset: 66437},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1780, col: 69, offset: 66485},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1780, col: 73, offset: 66489},
							expr: &ruleRefExpr{
								pos:  position{line: 1780, col: 73, offset: 66489},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1780, col: 80, offset: 66496},
							expr: &choiceExpr{
								pos: position{line: 1780, col: 82, offset: 66498},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1780, col: 82, offset: 66498},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1780, col: 88, offset: 66504},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1784, col: 1, offset: 66561},
			expr: &actionExpr{
				pos: position{line: 1784, col: 20, offset: 66580},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1784, col: 20, offset: 66580},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1784, col: 20, offset: 66580},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1784, col: 25, offset: 66585},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1784, col: 48, offset: 66608},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1784, col: 61, offset: 66621},
								expr: &ruleRefExpr{
									pos:  position{line: 1784, col: 61, offset: 66621},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1788, col: 1, offset: 66722},
			expr: &actionExpr{
				pos: position{line: 1788, col: 26, offset: 66747},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1788, col: 26, offset: 66747},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1788, col: 26, offset: 66747},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1788, col: 30, offset: 66751},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1788, col: 35, offset: 66756},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1788, col: 35, offset: 66756},
									expr: &charClassMatcher{
										pos:        position{line: 1788, col: 35, offset: 66756},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1788, col: 83, offset: 66804},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1788, col: 87, offset: 66808},
							expr: &ruleRefExpr{
								pos:  position{line: 1788, col: 87, offset: 66808},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1795, col: 1, offset: 67042},
			expr: &seqExpr{
				pos: position{line: 1795, col: 25, offset: 67066},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1795, col: 25, offset: 67066},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1795, col: 31, offset: 67072},
						expr: &ruleRefExpr{
							pos:  position{line: 1795, col: 31, offset: 67072},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1795, col: 38, offset: 67079},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1797, col: 1, offset: 67141},
			expr: &seqExpr{
				pos: position{line: 1797, col: 30, offset: 67170},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1797, col: 30, offset: 67170},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1797, col: 36, offset: 67176},
						expr: &ruleRefExpr{
							pos:  position{line: 1797, col: 36, offset: 67176},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1797, col: 43, offset: 67183},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1799, col: 1, offset: 67190},
			expr: &choiceExpr{
				pos: position{line: 1799, col: 28, offset: 67217},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1799, col: 29, offset: 67218},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1799, col: 29, offset: 67218},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1799, col: 35, offset: 67224},
								expr: &ruleRefExpr{
									pos:  position{line: 1799, col: 35, offset: 67224},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1799, col: 42, offset: 67231},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1799, col: 49, offset: 67238},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1801, col: 1, offset: 67245},
			expr: &actionExpr{
				pos: position{line: 1801, col: 16, offset: 67260},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1801, col: 16, offset: 67260},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1801, col: 16, offset: 67260},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1801, col: 27, offset: 67271},
								expr: &ruleRefExpr{
									pos:  position{line: 1801, col: 28, offset: 67272},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1801, col: 41, offset: 67285},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1801, col: 67, offset: 67311},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1801, col: 76, offset: 67320},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1801, col: 99, offset: 67343},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1805, col: 1, offset: 67462},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1805, col: 26, offset: 67487},
				expr: &actionExpr{
					pos: position{line: 1805, col: 27, offset: 67488},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1805, col: 27, offset: 67488},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1805, col: 27, offset: 67488},
								expr: &ruleRefExpr{
									pos:  position{line: 1805, col: 28, offset: 67489},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1805, col: 52, offset: 67513},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1805, col: 58, offset: 67519},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1812, col: 1, offset: 67866},
			expr: &seqExpr{
				pos: position{line: 1812, col: 26, offset: 67891},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1812, col: 26, offset: 67891},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1812, col: 33, offset: 67898},
						expr: &ruleRefExpr{
							pos:  position{line: 1812, col: 33, offset: 67898},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1812, col: 40, offset: 67905},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1814, col: 1, offset: 67912},
			expr: &seqExpr{
				pos: position{line: 1814, col: 31, offset: 67942},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1814, col: 31, offset: 67942},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1814, col: 38, offset: 67949},
						expr: &ruleRefExpr{
							pos:  position{line: 1814, col: 38, offset: 67949},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1814, col: 45, offset: 67956},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1816, col: 1, offset: 67963},
			expr: &choiceExpr{
				pos: position{line: 1816, col: 29, offset: 67991},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1816, col: 30, offset: 67992},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1816, col: 30, offset: 67992},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1816, col: 37, offset: 67999},
								expr: &ruleRefExpr{
									pos:  position{line: 1816, col: 37, offset: 67999},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1816, col: 44, offset: 68006},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1816, col: 51, offset: 68013},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1818, col: 1, offset: 68020},
			expr: &actionExpr{
				pos: position{line: 1818, col: 17, offset: 68036},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1818, col: 17, offset: 68036},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1818, col: 17, offset: 68036},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1818, col: 28, offset: 68047},
								expr: &ruleRefExpr{
									pos:  position{line: 1818, col: 29, offset: 68048},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1818, col: 42, offset: 68061},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1818, col: 69, offset: 68088},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1818, col: 78, offset: 68097},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1818, col: 102, offset: 68121},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1822, col: 1, offset: 68242},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1822, col: 27, offset: 68268},
				expr: &actionExpr{
					pos: position{line: 1822, col: 28, offset: 68269},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1822, col: 28, offset: 68269},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1822, col: 28, offset: 68269},
								expr: &ruleRefExpr{
									pos:  position{line: 1822, col: 29, offset: 68270},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1822, col: 54, offset: 68295},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1822, col: 60, offset: 68301},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1829, col: 1, offset: 68648},
			expr: &seqExpr{
				pos: position{line: 1829, col: 26, offset: 68673},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1829, col: 26, offset: 68673},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1829, col: 33, offset: 68680},
						expr: &ruleRefExpr{
							pos:  position{line: 1829, col: 33, offset: 68680},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1829, col: 40, offset: 68687},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1831, col: 1, offset: 68694},
			expr: &seqExpr{
				pos: position{line: 1831, col: 31, offset: 68724},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1831, col: 31, offset: 68724},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1831, col: 38, offset: 68731},
						expr: &ruleRefExpr{
							pos:  position{line: 1831, col: 38, offset: 68731},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1831, col: 45, offset: 68738},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1833, col: 1, offset: 68745},
			expr: &choiceExpr{
				pos: position{line: 1833, col: 29, offset: 68773},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1833, col: 30, offset: 68774},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1833, col: 30, offset: 68774},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1833, col: 37, offset: 68781},
								expr: &ruleRefExpr{
									pos:  position{line: 1833, col: 37, offset: 68781},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1833, col: 44, offset: 68788},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1833, col: 51, offset: 68795},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1835, col: 1, offset: 68802},
			expr: &actionExpr{
				pos: position{line: 1835, col: 17, offset: 68818},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1835, col: 17, offset: 68818},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1835, col: 17, offset: 68818},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1835, col: 28, offset: 68829},
								expr: &ruleRefExpr{
									pos:  position{line: 1835, col: 29, offset: 68830},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1835, col: 42, offset: 68843},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1835, col: 69, offset: 68870},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1835, col: 78, offset: 68879},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1835, col: 102, offset: 68903},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1839, col: 1, offset: 69024},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1839, col: 27, offset: 69050},
				expr: &actionExpr{
					pos: position{line: 1839, col: 28, offset: 69051},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1839, col: 28, offset: 69051},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1839, col: 28, offset: 69051},
								expr: &ruleRefExpr{
									pos:  position{line: 1839, col: 29, offset: 69052},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1839, col: 54, offset: 69077},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1839, col: 60, offset: 69083},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1846, col: 1, offset: 69428},
			expr: &seqExpr{
				pos: position{line: 1846, col: 24, offset: 69451},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1846, col: 24, offset: 69451},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1846, col: 31, offset: 69458},
						expr: &ruleRefExpr{
							pos:  position{line: 1846, col: 31, offset: 69458},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1846, col: 38, offset: 69465},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1848, col: 1, offset: 69497},
			expr: &seqExpr{
				pos: position{line: 1848, col: 29, offset: 69525},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1848, col: 29, offset: 69525},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1848, col: 36, offset: 69532},
						expr: &ruleRefExpr{
							pos:  position{line: 1848, col: 36, offset: 69532},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1848, col: 43, offset: 69539},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1850, col: 1, offset: 69571},
			expr: &choiceExpr{
				pos: position{line: 1850, col: 27, offset: 69597},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1850, col: 28, offset: 69598},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1850, col: 28, offset: 69598},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1850, col: 35, offset: 69605},
								expr: &ruleRefExpr{
									pos:  position{line: 1850, col: 35, offset: 69605},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1850, col: 42, offset: 69612},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1850, col: 49, offset: 69619},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1852, col: 1, offset: 69651},
			expr: &actionExpr{
				pos: position{line: 1852, col: 15, offset: 69665},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1852, col: 15, offset: 69665},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1852, col: 15, offset: 69665},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1852, col: 26, offset: 69676},
								expr: &ruleRefExpr{
									pos:  position{line: 1852, col: 27, offset: 69677},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1852, col: 40, offset: 69690},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1852, col: 65, offset: 69715},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1852, col: 74, offset: 69724},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1852, col: 101, offset: 69751},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1856, col: 1, offset: 69868},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1856, col: 30, offset: 69897},
				expr: &actionExpr{
					pos: position{line: 1856, col: 31, offset: 69898},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1856, col: 31, offset: 69898},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1856, col: 31, offset: 69898},
								expr: &ruleRefExpr{
									pos:  position{line: 1856, col: 32, offset: 69899},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1856, col: 55, offset: 69922},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1856, col: 61, offset: 69928},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1863, col: 1, offset: 70275},
			expr: &seqExpr{
				pos: position{line: 1863, col: 26, offset: 70300},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1863, col: 26, offset: 70300},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1863, col: 33, offset: 70307},
						expr: &ruleRefExpr{
							pos:  position{line: 1863, col: 33, offset: 70307},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1863, col: 40, offset: 70314},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1865, col: 1, offset: 70321},
			expr: &seqExpr{
				pos: position{line: 1865, col: 31, offset: 70351},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1865, col: 31, offset: 70351},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1865, col: 38, offset: 70358},
						expr: &ruleRefExpr{
							pos:  position{line: 1865, col: 38, offset: 70358},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1865, col: 45, offset: 70365},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1867, col: 1, offset: 70372},
			expr: &choiceExpr{
				pos: position{line: 1867, col: 29, offset: 70400},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1867, col: 30, offset: 70401},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1867, col: 30, offset: 70401},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1867, col: 37, offset: 70408},
								expr: &ruleRefExpr{
									pos:  position{line: 1867, col: 37, offset: 70408},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1867, col: 44, offset: 70415},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1867, col: 51, offset: 70422},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1869, col: 1, offset: 70429},
			expr: &actionExpr{
				pos: position{line: 1869, col: 17, offset: 70445},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1869, col: 17, offset: 70445},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1869, col: 17, offset: 70445},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1869, col: 28, offset: 70456},
								expr: &ruleRefExpr{
									pos:  position{line: 1869, col: 29, offset: 70457},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1869, col: 42, offset: 70470},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1869, col: 69, offset: 70497},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1869, col: 78, offset: 70506},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1869, col: 102, offset: 70530},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1873, col: 1, offset: 70651},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1873, col: 27, offset: 70677},
				expr: &actionExpr{
					pos: position{line: 1873, col: 28, offset: 70678},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1873, col: 28, offset: 70678},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1873, col: 28, offset: 70678},
								expr: &ruleRefExpr{
									pos:  position{line: 1873, col: 29, offset: 70679},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1873, col: 54, offset: 70704},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1873, col: 60, offset: 70710},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1880, col: 1, offset: 71061},
			expr: &seqExpr{
				pos: position{line: 1880, col: 30, offset: 71090},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1880, col: 30, offset: 71090},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1880, col: 37, offset: 71097},
						expr: &ruleRefExpr{
							pos:  position{line: 1880, col: 37, offset: 71097},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1880, col: 44, offset: 71104},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1882, col: 1, offset: 71111},
			expr: &seqExpr{
				pos: position{line: 1882, col: 35, offset: 71145},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1882, col: 35, offset: 71145},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1882, col: 42, offset: 71152},
						expr: &ruleRefExpr{
							pos:  position{line: 1882, col: 42, offset: 71152},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1882, col: 49, offset: 71159},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1884, col: 1, offset: 71166},
			expr: &choiceExpr{
				pos: position{line: 1884, col: 33, offset: 71198},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1884, col: 34, offset: 71199},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1884, col: 34, offset: 71199},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1884, col: 41, offset: 71206},
								expr: &ruleRefExpr{
									pos:  position{line: 1884, col: 41, offset: 71206},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1884, col: 48, offset: 71213},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1884, col: 55, offset: 71220},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1886, col: 1, offset: 71227},
			expr: &actionExpr{
				pos: position{line: 1886, col: 21, offset: 71247},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1886, col: 21, offset: 71247},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1886, col: 21, offset: 71247},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1886, col: 32, offset: 71258},
								expr: &ruleRefExpr{
									pos:  position{line: 1886, col: 33, offset: 71259},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1886, col: 46, offset: 71272},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1886, col: 77, offset: 71303},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1886, col: 86, offset: 71312},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1886, col: 114, offset: 71340},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1890, col: 1, offset: 71469},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1890, col: 31, offset: 71499},
				expr: &actionExpr{
					pos: position{line: 1890, col: 32, offset: 71500},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1890, col: 32, offset: 71500},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1890, col: 32, offset: 71500},
								expr: &ruleRefExpr{
									pos:  position{line: 1890, col: 33, offset: 71501},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1890, col: 62, offset: 71530},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1890, col: 68, offset: 71536},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1895, col: 1, offset: 71703},
			expr: &actionExpr{
				pos: position{line: 1895, col: 18, offset: 71720},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1895, col: 18, offset: 71720},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1895, col: 19, offset: 71721},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1895, col: 19, offset: 71721},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1895, col: 27, offset: 71729},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1895, col: 37, offset: 71739},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1895, col: 45, offset: 71747},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1895, col: 55, offset: 71757},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1895, col: 63, offset: 71765},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1895, col: 72, offset: 71774},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1904, col: 1, offset: 72080},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1904, col: 23, offset: 72102},
				expr: &ruleRefExpr{
					pos:  position{line: 1904, col: 23, offset: 72102},
					name: "NormalElement",
				},
			},
		},
		{
			name: "NormalElement",
			pos:  position{line: 1906, col: 1, offset: 72120},
			expr: &actionExpr{
				pos: position{line: 1907, col: 5, offset: 72143},
				run: (*parser).callonNormalElement1,
				expr: &seqExpr{
					pos: position{line: 1907, col: 5, offset: 72143},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1907, col: 5, offset: 72143},
							expr: &ruleRefExpr{
								pos:  position{line: 1907, col: 6, offset: 72144},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1907, col: 10, offset: 72148},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1907, col: 19, offset: 72157},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1907, col: 19, offset: 72157},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1908, col: 15, offset: 72183},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1909, col: 15, offset: 72212},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1910, col: 15, offset: 72238},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1911, col: 15, offset: 72267},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1912, col: 15, offset: 72299},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1913, col: 15, offset: 72333},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1914, col: 15, offset: 72365},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1915, col: 15, offset: 72405},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1916, col: 15, offset: 72435},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1917, col: 15, offset: 72464},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1918, col: 15, offset: 72501},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1919, col: 15, offset: 72532},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1920, col: 15, offset: 72574},
										name: "StandaloneAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 1921, col: 15, offset: 72610},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1926, col: 1, offset: 72728},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1926, col: 22, offset: 72749},
				expr: &ruleRefExpr{
					pos:  position{line: 1926, col: 22, offset: 72749},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1928, col: 1, offset: 72771},
			expr: &actionExpr{
				pos: position{line: 1928, col: 22, offset: 72792},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1928, col: 22, offset: 72792},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1928, col: 22, offset: 72792},
							expr: &ruleRefExpr{
								pos:  position{line: 1928, col: 23, offset: 72793},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1928, col: 27, offset: 72797},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1928, col: 36, offset: 72806},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1928, col: 36, offset: 72806},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1928, col: 48, offset: 72818},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1932, col: 1, offset: 72872},
			expr: &actionExpr{
				pos: position{line: 1932, col: 24, offset: 72895},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1932, col: 24, offset: 72895},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1932, col: 30, offset: 72901},
						expr: &ruleRefExpr{
							pos:  position{line: 1932, col: 31, offset: 72902},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1936, col: 1, offset: 72996},
			expr: &actionExpr{
				pos: position{line: 1936, col: 28, offset: 73023},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1936, col: 28, offset: 73023},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1936, col: 28, offset: 73023},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1936, col: 37, offset: 73032},
								expr: &ruleRefExpr{
									pos:  position{line: 1936, col: 38, offset: 73033},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1936, col: 54, offset: 73049},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1943, col: 1, offset: 73298},
			expr: &actionExpr{
				pos: position{line: 1943, col: 10, offset: 73307},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1943, col: 10, offset: 73307},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1943, col: 10, offset: 73307},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1943, col: 16, offset: 73313},
								expr: &zeroOrMoreExpr{
									pos: position{line: 1943, col: 17, offset: 73314},
									expr: &ruleRefExpr{
										pos:  position{line: 1943, col: 17, offset: 73314},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1943, col: 31, offset: 73328},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1944, col: 5, offset: 73348},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1944, col: 12, offset: 73355},
								expr: &ruleRefExpr{
									pos:  position{line: 1944, col: 13, offset: 73356},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1945, col: 5, offset: 73379},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1945, col: 11, offset: 73385},
								expr: &ruleRefExpr{
									pos:  position{line: 1945, col: 12, offset: 73386},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1946, col: 6, offset: 73404},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1946, col: 6, offset: 73404},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1946, col: 23, offset: 73421},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1950, col: 1, offset: 73535},
			expr: &seqExpr{
				pos: position{line: 1950, col: 23, offset: 73557},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1950, col: 23, offset: 73557},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1950, col: 27, offset: 73561},
						expr: &ruleRefExpr{
							pos:  position{line: 1950, col: 27, offset: 73561},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1952, col: 1, offset: 73571},
			expr: &seqExpr{
				pos: position{line: 1952, col: 19, offset: 73589},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1952, col: 19, offset: 73589},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1952, col: 26, offset: 73596},
						expr: &ruleRefExpr{
							pos:  position{line: 1952, col: 26, offset: 73596},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1952, col: 33, offset: 73603},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1955, col: 1, offset: 73674},
			expr: &actionExpr{
				pos: position{line: 1955, col: 20, offset: 73693},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1955, col: 20, offset: 73693},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1955, col: 20, offset: 73693},
							expr: &ruleRefExpr{
								pos:  position{line: 1955, col: 21, offset: 73694},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1955, col: 36, offset: 73709},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1955, col: 42, offset: 73715},
								expr: &ruleRefExpr{
									pos:  position{line: 1955, col: 43, offset: 73716},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1955, col: 55, offset: 73728},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1955, col: 59, offset: 73732},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1959, col: 1, offset: 73804},
			expr: &actionExpr{
				pos: position{line: 1959, col: 14, offset: 73817},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1959, col: 14, offset: 73817},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1959, col: 14, offset: 73817},
							expr: &ruleRefExpr{
								pos:  position{line: 1959, col: 15, offset: 73818},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1959, col: 30, offset: 73833},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1959, col: 36, offset: 73839},
								expr: &ruleRefExpr{
									pos:  position{line: 1959, col: 37, offset: 73840},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1959, col: 49, offset: 73852},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1959, col: 53, offset: 73856},
							expr: &ruleRefExpr{
								pos:  position{line: 1959, col: 53, offset: 73856},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1963, col: 1, offset: 73929},
			expr: &actionExpr{
				pos: position{line: 1963, col: 14, offset: 73942},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1963, col: 14, offset: 73942},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1963, col: 14, offset: 73942},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1963, col: 33, offset: 73961},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1963, col: 42, offset: 73970},
								expr: &seqExpr{
									pos: position{line: 1963, col: 43, offset: 73971},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1963, col: 43, offset: 73971},
											expr: &ruleRefExpr{
												pos:  position{line: 1963, col: 44, offset: 73972},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1963, col: 63, offset: 73991},
											expr: &ruleRefExpr{
												pos:  position{line: 1963, col: 64, offset: 73992},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1963, col: 68, offset: 73996},
											expr: &ruleRefExpr{
												pos:  position{line: 1963, col: 68, offset: 73996},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1963, col: 75, offset: 74003},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1963, col: 89, offset: 74017},
											expr: &ruleRefExpr{
												pos:  position{line: 1963, col: 89, offset: 74017},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1970, col: 1, offset: 74273},
			expr: &seqExpr{
				pos: position{line: 1970, col: 26, offset: 74298},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1970, col: 26, offset: 74298},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1970, col: 33, offset: 74305},
						expr: &ruleRefExpr{
							pos:  position{line: 1970, col: 33, offset: 74305},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1970, col: 40, offset: 74312},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1972, col: 1, offset: 74319},
			expr: &seqExpr{
				pos: position{line: 1972, col: 31, offset: 74349},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1972, col: 31, offset: 74349},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1972, col: 38, offset: 74356},
						expr: &ruleRefExpr{
							pos:  position{line: 1972, col: 38, offset: 74356},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1972, col: 45, offset: 74363},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1974, col: 1, offset: 74370},
			expr: &choiceExpr{
				pos: position{line: 1974, col: 29, offset: 74398},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1974, col: 30, offset: 74399},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1974, col: 30, offset: 74399},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1974, col: 37, offset: 74406},
								expr: &ruleRefExpr{
									pos:  position{line: 1974, col: 37, offset: 74406},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1974, col: 44, offset: 74413},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1974, col: 51, offset: 74420},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1976, col: 1, offset: 74427},
			expr: &actionExpr{
				pos: position{line: 1976, col: 17, offset: 74443},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1976, col: 17, offset: 74443},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1976, col: 17, offset: 74443},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1976, col: 44, offset: 74470},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1976, col: 53, offset: 74479},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1976, col: 78, offset: 74504},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 1980, col: 1, offset: 74618},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1980, col: 27, offset: 74644},
				expr: &actionExpr{
					pos: position{line: 1980, col: 28, offset: 74645},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1980, col: 28, offset: 74645},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1980, col: 28, offset: 74645},
								expr: &ruleRefExpr{
									pos:  position{line: 1980, col: 29, offset: 74646},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1980, col: 54, offset: 74671},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1980, col: 60, offset: 74677},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1984, col: 1, offset: 74825},
			expr: &actionExpr{
				pos: position{line: 1984, col: 22, offset: 74846},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1984, col: 22, offset: 74846},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1984, col: 22, offset: 74846},
							expr: &ruleRefExpr{
								pos:  position{line: 1984, col: 23, offset: 74847},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1984, col: 45, offset: 74869},
							expr: &ruleRefExpr{
								pos:  position{line: 1984, col: 45, offset: 74869},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1984, col: 52, offset: 74876},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1984, col: 57, offset: 74881},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1984, col: 66, offset: 74890},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1984, col: 92, offset: 74916},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1988, col: 1, offset: 74985},
			expr: &actionExpr{
				pos: position{line: 1988, col: 29, offset: 75013},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1988, col: 29, offset: 75013},
					expr: &charClassMatcher{
						pos:        position{line: 1988, col: 29, offset: 75013},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1996, col: 1, offset: 75334},
			expr: &choiceExpr{
				pos: position{line: 1996, col: 17, offset: 75350},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1996, col: 17, offset: 75350},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1996, col: 49, offset: 75382},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1996, col: 78, offset: 75411},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1998, col: 1, offset: 75449},
			expr: &litMatcher{
				pos:        position{line: 1998, col: 26, offset: 75474},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 2001, col: 1, offset: 75549},
			expr: &actionExpr{
				pos: position{line: 2001, col: 31, offset: 75579},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 2001, col: 31, offset: 75579},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2001, col: 31, offset: 75579},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2001, col: 42, offset: 75590},
								expr: &ruleRefExpr{
									pos:  position{line: 2001, col: 43, offset: 75591},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2001, col: 56, offset: 75604},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2001, col: 63, offset: 75611},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 2006, col: 1, offset: 75846},
			expr: &actionExpr{
				pos: position{line: 2007, col: 5, offset: 75887},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 2007, col: 5, offset: 75887},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2007, col: 5, offset: 75887},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 2007, col: 16, offset: 75898},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 2007, col: 16, offset: 75898},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2007, col: 16, offset: 75898},
											expr: &ruleRefExpr{
												pos:  position{line: 2007, col: 16, offset: 75898},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2007, col: 23, offset: 75905},
											expr: &charClassMatcher{
												pos:        position{line: 2007, col: 23, offset: 75905},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2009, col: 8, offset: 75960},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 2010, col: 5, offset: 76024},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2010, col: 16, offset: 76035},
								expr: &actionExpr{
									pos: position{line: 2011, col: 9, offset: 76046},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 2011, col: 9, offset: 76046},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2011, col: 9, offset: 76046},
												expr: &ruleRefExpr{
													pos:  position{line: 2011, col: 10, offset: 76047},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 2012, col: 9, offset: 76067},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 2012, col: 20, offset: 76078},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 2012, col: 20, offset: 76078},
														expr: &charClassMatcher{
															pos:        position{line: 2012, col: 20, offset: 76078},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 2014, col: 12, offset: 76141},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 2021, col: 1, offset: 76378},
			expr: &actionExpr{
				pos: position{line: 2021, col: 39, offset: 76416},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 2021, col: 39, offset: 76416},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2021, col: 39, offset: 76416},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2021, col: 50, offset: 76427},
								expr: &ruleRefExpr{
									pos:  position{line: 2021, col: 51, offset: 76428},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2022, col: 9, offset: 76450},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2022, col: 31, offset: 76472},
							expr: &ruleRefExpr{
								pos:  position{line: 2022, col: 31, offset: 76472},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2022, col: 38, offset: 76479},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 2022, col: 46, offset: 76487},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2022, col: 53, offset: 76494},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 2022, col: 95, offset: 76536},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2022, col: 96, offset: 76537},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2022, col: 96, offset: 76537},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2022, col: 118, offset: 76559},
											expr: &ruleRefExpr{
												pos:  position{line: 2022, col: 118, offset: 76559},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2022, col: 125, offset: 76566},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2022, col: 132, offset: 76573},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2027, col: 1, offset: 76737},
			expr: &actionExpr{
				pos: position{line: 2027, col: 44, offset: 76780},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2027, col: 44, offset: 76780},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2027, col: 50, offset: 76786},
						expr: &ruleRefExpr{
							pos:  position{line: 2027, col: 51, offset: 76787},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2031, col: 1, offset: 76875},
			expr: &actionExpr{
				pos: position{line: 2032, col: 5, offset: 76931},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2032, col: 5, offset: 76931},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2032, col: 5, offset: 76931},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2032, col: 11, offset: 76937},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2032, col: 11, offset: 76937},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2032, col: 11, offset: 76937},
											expr: &ruleRefExpr{
												pos:  position{line: 2032, col: 12, offset: 76938},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2032, col: 34, offset: 76960},
											expr: &charClassMatcher{
												pos:        position{line: 2032, col: 34, offset: 76960},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2034, col: 8, offset: 77015},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2039, col: 1, offset: 77146},
			expr: &actionExpr{
				pos: position{line: 2040, col: 5, offset: 77185},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2040, col: 5, offset: 77185},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2040, col: 5, offset: 77185},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2040, col: 16, offset: 77196},
								expr: &ruleRefExpr{
									pos:  position{line: 2040, col: 17, offset: 77197},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2041, col: 5, offset: 77215},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2048, col: 5, offset: 77429},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2048, col: 12, offset: 77436},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2052, col: 1, offset: 77590},
			expr: &actionExpr{
				pos: position{line: 2052, col: 16, offset: 77605},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2052, col: 16, offset: 77605},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 2057, col: 1, offset: 77693},
			expr: &actionExpr{
				pos: position{line: 2057, col: 39, offset: 77731},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 2057, col: 39, offset: 77731},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 2057, col: 45, offset: 77737},
						expr: &ruleRefExpr{
							pos:  position{line: 2057, col: 46, offset: 77738},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 2061, col: 1, offset: 77822},
			expr: &actionExpr{
				pos: position{line: 2061, col: 38, offset: 77859},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 2061, col: 38, offset: 77859},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2061, col: 38, offset: 77859},
							expr: &ruleRefExpr{
								pos:  position{line: 2061, col: 39, offset: 77860},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2061, col: 49, offset: 77870},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2061, col: 58, offset: 77879},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2061, col: 58, offset: 77879},
									expr: &charClassMatcher{
										pos:        position{line: 2061, col: 58, offset: 77879},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2063, col: 4, offset: 77926},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2070, col: 1, offset: 78119},
			expr: &actionExpr{
				pos: position{line: 2070, col: 14, offset: 78132},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2070, col: 14, offset: 78132},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2070, col: 14, offset: 78132},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2070, col: 19, offset: 78137},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2070, col: 25, offset: 78143},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2070, col: 43, offset: 78161},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2074, col: 1, offset: 78230},
			expr: &actionExpr{
				pos: position{line: 2074, col: 21, offset: 78250},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2074, col: 21, offset: 78250},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2074, col: 30, offset: 78259},
						expr: &choiceExpr{
							pos: position{line: 2074, col: 31, offset: 78260},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2074, col: 31, offset: 78260},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2074, col: 38, offset: 78267},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2074, col: 53, offset: 78282},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2074, col: 66, offset: 78295},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 2074, col: 74, offset: 78303},
									run: (*parser).callonIndexTermContent9,
									expr: &seqExpr{
										pos: position{line: 2074, col: 75, offset: 78304},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2074, col: 75, offset: 78304},
												expr: &litMatcher{
													pos:        position{line: 2074, col: 76, offset: 78305},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2074, col: 81, offset: 78310,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2080, col: 1, offset: 78422},
			expr: &actionExpr{
				pos: position{line: 2080, col: 23, offset: 78444},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2080, col: 23, offset: 78444},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2080, col: 23, offset: 78444},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2080, col: 29, offset: 78450},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2080, col: 36, offset: 78457},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2081, col: 5, offset: 78490},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2081, col: 11, offset: 78496},
								expr: &actionExpr{
									pos: position{line: 2081, col: 12, offset: 78497},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2081, col: 12, offset: 78497},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2081, col: 12, offset: 78497},
												expr: &ruleRefExpr{
													pos:  position{line: 2081, col: 12, offset: 78497},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2081, col: 19, offset: 78504},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2081, col: 23, offset: 78508},
												expr: &ruleRefExpr{
													pos:  position{line: 2081, col: 23, offset: 78508},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2081, col: 30, offset: 78515},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2081, col: 39, offset: 78524},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2082, col: 5, offset: 78583},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2082, col: 11, offset: 78589},
								expr: &actionExpr{
									pos: position{line: 2082, col: 12, offset: 78590},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2082, col: 12, offset: 78590},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2082, col: 12, offset: 78590},
												expr: &ruleRefExpr{
													pos:  position{line: 2082, col: 12, offset: 78590},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2082, col: 19, offset: 78597},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2082, col: 23, offset: 78601},
												expr: &ruleRefExpr{
													pos:  position{line: 2082, col: 23, offset: 78601},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2082, col: 30, offset: 78608},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2082, col: 39, offset: 78617},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2083, col: 5, offset: 78676},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2087, col: 1, offset: 78759},
			expr: &actionExpr{
				pos: position{line: 2087, col: 30, offset: 78788},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2087, col: 30, offset: 78788},
					expr: &choiceExpr{
						pos: position{line: 2087, col: 31, offset: 78789},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2087, col: 31, offset: 78789},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2087, col: 42, offset: 78800},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2094, col: 1, offset: 78956},
			expr: &actionExpr{
				pos: position{line: 2094, col: 14, offset: 78969},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2094, col: 14, offset: 78969},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2094, col: 14, offset: 78969},
							expr: &ruleRefExpr{
								pos:  position{line: 2094, col: 15, offset: 78970},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2094, col: 19, offset: 78974},
							expr: &ruleRefExpr{
								pos:  position{line: 2094, col: 19, offset: 78974},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2094, col: 26, offset: 78981},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2102, col: 1, offset: 79134},
			expr: &choiceExpr{
				pos: position{line: 2102, col: 11, offset: 79144},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2102, col: 11, offset: 79144},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2102, col: 24, offset: 79157},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2102, col: 36, offset: 79169},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2102, col: 48, offset: 79181},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2102, col: 61, offset: 79194},
						name: "Ellipsis",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2104, col: 1, offset: 79206},
			expr: &actionExpr{
				pos: position{line: 2104, col: 15, offset: 79220},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2104, col: 15, offset: 79220},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2107, col: 1, offset: 79276},
			expr: &actionExpr{
				pos: position{line: 2107, col: 14, offset: 79289},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2107, col: 14, offset: 79289},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2110, col: 1, offset: 79346},
			expr: &actionExpr{
				pos: position{line: 2110, col: 14, offset: 79359},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2110, col: 14, offset: 79359},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2113, col: 1, offset: 79417},
			expr: &actionExpr{
				pos: position{line: 2113, col: 15, offset: 79431},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2113, col: 15, offset: 79431},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2116, col: 1, offset: 79488},
			expr: &actionExpr{
				pos: position{line: 2116, col: 13, offset: 79500},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2116, col: 13, offset: 79500},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2124, col: 1, offset: 79783},
			expr: &actionExpr{
				pos: position{line: 2124, col: 22, offset: 79804},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2124, col: 22, offset: 79804},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2124, col: 22, offset: 79804},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2124, col: 31, offset: 79813},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2124, col: 35, offset: 79817},
							expr: &charClassMatcher{
								pos:        position{line: 2124, col: 36, offset: 79818},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2131, col: 1, offset: 80005},
			expr: &charClassMatcher{
				pos:        position{line: 2131, col: 13, offset: 80017},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2133, col: 1, offset: 80029},
			expr: &choiceExpr{
				pos: position{line: 2133, col: 16, offset: 80044},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2133, col: 16, offset: 80044},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2133, col: 22, offset: 80050},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2133, col: 28, offset: 80056},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2133, col: 34, offset: 80062},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2133, col: 40, offset: 80068},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2133, col: 46, offset: 80074},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2135, col: 1, offset: 80082},
			expr: &actionExpr{
				pos: position{line: 2135, col: 14, offset: 80095},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2135, col: 14, offset: 80095},
					expr: &charClassMatcher{
						pos:        position{line: 2135, col: 14, offset: 80095},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2139, col: 1, offset: 80145},
			expr: &choiceExpr{
				pos: position{line: 2143, col: 5, offset: 80476},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2143, col: 5, offset: 80476},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2143, col: 5, offset: 80476},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2143, col: 5, offset: 80476},
									expr: &charClassMatcher{
										pos:        position{line: 2143, col: 5, offset: 80476},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2143, col: 15, offset: 80486},
									expr: &choiceExpr{
										pos: position{line: 2143, col: 17, offset: 80488},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2143, col: 17, offset: 80488},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2143, col: 30, offset: 80501},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2145, col: 9, offset: 80573},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2145, col: 9, offset: 80573},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2145, col: 9, offset: 80573},
									expr: &charClassMatcher{
										pos:        position{line: 2145, col: 9, offset: 80573},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2145, col: 19, offset: 80583},
									expr: &seqExpr{
										pos: position{line: 2145, col: 20, offset: 80584},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2145, col: 20, offset: 80584},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2145, col: 27, offset: 80591},
												expr: &charClassMatcher{
													pos:        position{line: 2145, col: 27, offset: 80591},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2149, col: 1, offset: 80671},
			expr: &choiceExpr{
				pos: position{line: 2150, col: 5, offset: 80753},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2150, col: 5, offset: 80753},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2150, col: 5, offset: 80753},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2150, col: 5, offset: 80753},
									expr: &charClassMatcher{
										pos:        position{line: 2150, col: 5, offset: 80753},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2150, col: 19, offset: 80767},
									expr: &choiceExpr{
										pos: position{line: 2150, col: 21, offset: 80769},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2150, col: 21, offset: 80769},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2150, col: 31, offset: 80779},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2152, col: 9, offset: 80850},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2155, col: 1, offset: 80953},
			expr: &actionExpr{
				pos: position{line: 2155, col: 12, offset: 80964},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2155, col: 12, offset: 80964},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2159, col: 1, offset: 81033},
			expr: &actionExpr{
				pos: position{line: 2159, col: 17, offset: 81049},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2159, col: 17, offset: 81049},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2159, col: 22, offset: 81054},
						expr: &choiceExpr{
							pos: position{line: 2159, col: 23, offset: 81055},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2159, col: 23, offset: 81055},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2159, col: 34, offset: 81066},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2163, col: 1, offset: 81154},
			expr: &actionExpr{
				pos: position{line: 2163, col: 25, offset: 81178},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2163, col: 25, offset: 81178},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2163, col: 30, offset: 81183},
						expr: &charClassMatcher{
							pos:        position{line: 2163, col: 31, offset: 81184},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2167, col: 1, offset: 81260},
			expr: &actionExpr{
				pos: position{line: 2167, col: 13, offset: 81272},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2167, col: 13, offset: 81272},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2167, col: 13, offset: 81272},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2167, col: 20, offset: 81279},
								expr: &ruleRefExpr{
									pos:  position{line: 2167, col: 21, offset: 81280},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2167, col: 34, offset: 81293},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2167, col: 39, offset: 81298},
								expr: &choiceExpr{
									pos: position{line: 2167, col: 40, offset: 81299},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2167, col: 40, offset: 81299},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2167, col: 51, offset: 81310},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2171, col: 1, offset: 81402},
			expr: &actionExpr{
				pos: position{line: 2171, col: 23, offset: 81424},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2171, col: 23, offset: 81424},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2171, col: 23, offset: 81424},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2171, col: 31, offset: 81432},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2171, col: 43, offset: 81444},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2171, col: 48, offset: 81449},
								expr: &choiceExpr{
									pos: position{line: 2171, col: 49, offset: 81450},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2171, col: 49, offset: 81450},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2171, col: 60, offset: 81461},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2175, col: 1, offset: 81553},
			expr: &oneOrMoreExpr{
				pos: position{line: 2175, col: 13, offset: 81565},
				expr: &charClassMatcher{
					pos:        position{line: 2175, col: 14, offset: 81566},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2177, col: 1, offset: 81702},
			expr: &actionExpr{
				pos: position{line: 2177, col: 21, offset: 81722},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2177, col: 21, offset: 81722},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2177, col: 21, offset: 81722},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2177, col: 29, offset: 81730},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2177, col: 41, offset: 81742},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2177, col: 47, offset: 81748},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2182, col: 1, offset: 82001},
			expr: &oneOrMoreExpr{
				pos: position{line: 2182, col: 22, offset: 82022},
				expr: &charClassMatcher{
					pos:        position{line: 2182, col: 23, offset: 82023},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2184, col: 1, offset: 82157},
			expr: &actionExpr{
				pos: position{line: 2184, col: 9, offset: 82165},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2184, col: 9, offset: 82165},
					expr: &charClassMatcher{
						pos:        position{line: 2184, col: 9, offset: 82165},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2188, col: 1, offset: 82217},
			expr: &choiceExpr{
				pos: position{line: 2188, col: 15, offset: 82231},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2188, col: 15, offset: 82231},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2188, col: 27, offset: 82243},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2188, col: 40, offset: 82256},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2188, col: 51, offset: 82267},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2188, col: 62, offset: 82278},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2190, col: 1, offset: 82291},
			expr: &actionExpr{
				pos: position{line: 2190, col: 7, offset: 82297},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2190, col: 7, offset: 82297},
					expr: &charClassMatcher{
						pos:        position{line: 2190, col: 7, offset: 82297},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2194, col: 1, offset: 82426},
			expr: &actionExpr{
				pos: position{line: 2194, col: 10, offset: 82435},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2194, col: 10, offset: 82435},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2198, col: 1, offset: 82481},
			expr: &actionExpr{
				pos: position{line: 2198, col: 11, offset: 82491},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2198, col: 11, offset: 82491},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2198, col: 11, offset: 82491},
							expr: &litMatcher{
								pos:        position{line: 2198, col: 11, offset: 82491},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2198, col: 16, offset: 82496},
							expr: &ruleRefExpr{
								pos:  position{line: 2198, col: 16, offset: 82496},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2202, col: 1, offset: 82552},
			expr: &choiceExpr{
				pos: position{line: 2202, col: 10, offset: 82561},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2202, col: 10, offset: 82561},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2202, col: 16, offset: 82567},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2202, col: 16, offset: 82567},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2206, col: 1, offset: 82612},
			expr: &choiceExpr{
				pos: position{line: 2206, col: 12, offset: 82623},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2206, col: 12, offset: 82623},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2206, col: 21, offset: 82632},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2206, col: 28, offset: 82639},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2208, col: 1, offset: 82647},
			expr: &notExpr{
				pos: position{line: 2208, col: 8, offset: 82654},
				expr: &anyMatcher{
					line: 2208, col: 9, offset: 82655,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2210, col: 1, offset: 82660},
			expr: &choiceExpr{
				pos: position{line: 2210, col: 8, offset: 82667},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2210, col: 8, offset: 82667},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2210, col: 18, offset: 82677},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {

	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onRawFile1(blocks interface{}) (interface{}, error) {

	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonRawFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawFile1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {

	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentRawBlocks1(header, others interface{}) (interface{}, error) {

	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentRawBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {

	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {

	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {

	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {

	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {

	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {

	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {

	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {

	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {

	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {

	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {

	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {

	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {

	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {

	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {

	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {

	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {

	return types.NewElementStyle(style.(string))
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional2, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional3, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {

	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {

	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {

	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {

	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {

	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {

	return types.NewElementOption(option.(string))
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {

	return value.(string), nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedAttrs1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonNamedAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrs1(stack["attrs"])
}

func (c *current) onNamedAttrPair1(n, v interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(n.(string), v.(string))
}

func (p *parser) callonNamedAttrPair1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrPair1(stack["n"], stack["v"])
}

func (c *current) onAttrEmpty1() (interface{}, error) {

	return nil, nil
}

func (p *parser) callonAttrEmpty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrEmpty1()
}

func (c *current) onAttrValSQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValSQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQ1(stack["val"])
}

func (c *current) onAttrValSQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValSQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQin1(stack["val"])
}

func (c *current) onAttrValSQEsc1() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonAttrValSQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQEsc1()
}

func (c *current) onAttrValDQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValDQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQ1(stack["val"])
}

func (c *current) onAttrValDQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValDQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQin1(stack["val"])
}

func (c *current) onAttrValDQEsc1() (interface{}, error) {
	return `"`, nil
}

func (p *parser) callonAttrValDQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQEsc1()
}

func (c *current) onAttrValPosFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValPosFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValPosFB1()
}

func (c *current) onAttrValNamedFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValNamedFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValNamedFB1()
}

func (c *current) onShortHandValuePlain1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1()
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(key.(string), value.(string))
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted1() (interface{}, error) {

	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1()
}

func (c *current) onAttrValueDoubleQuoted1() (interface{}, error) {

	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1()
}

func (c *current) onAttrValueNone1() (interface{}, error) {

	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {

	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {

	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {

	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {

	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {

	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {

	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {

	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {

	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {

	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {

	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {

	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {

	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {

	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {

	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {

	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {

	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {

	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {

	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {

	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {

	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonRawParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph26(stack["attributes"])
}

func (c *current) onRawParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph32(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph32(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph18(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph18(stack["attributes"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph24(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph24(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {

	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {

	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onRawVerseParagraph6(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonRawVerseParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph6(stack["attributes"])
}

func (c *current) onRawVerseParagraph1(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawVerseParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {

	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {

	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {

	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {

	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement19(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement19(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttrs interface{}) (interface{}, error) {

	return types.NewImageBlock(path.(types.Location), inlineAttrs.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImage1(path, inlineAttrs interface{}) (interface{}, error) {

	return types.NewInlineImage(path.(types.Location), inlineAttrs.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImageAttrs1(alt, w, h, nv interface{}) (interface{}, error) {

	return types.NewElementAttributes(alt, w, h, nv)
}

func (p *parser) callonInlineImageAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttrs1(stack["alt"], stack["w"], stack["h"], stack["nv"])
}

func (c *current) onImageAttrList1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["attrs"])
}

func (c *current) onImageAltInline1(value interface{}) (interface{}, error) {

	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltInline1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltInline1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {

	return types.NewInlineAttribute(types.AttrWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {

	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onImageAltAttr1(value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(types.AttrImageAlt, value.(string))
}

func (p *parser) callonImageAltAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttr1(stack["value"])
}

func (c *current) onImageWidthAttr1(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrWidth, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageWidthAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttr1(stack["value"])
}

func (c *current) onImageHeightAttr1(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageHeight, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageHeightAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttr1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attrs interface{}) (interface{}, error) {

	return types.NewIcon(icon.(string), attrs.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attrs"])
}

func (c *current) onIconAttrs1(size, nv interface{}) (interface{}, error) {

	return types.NewElementAttributes(size, nv)
}

func (p *parser) callonIconAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttrs1(stack["size"], stack["nv"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {

	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {

	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {

	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLineContent1()
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {

	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {

	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {

	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {

	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["line"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onThematicBreak1() (interface{}, error) {

	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onNormalElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNormalElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {

	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {

	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {

	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {

	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent9() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonIndexTermContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {

	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {

	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {

	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {

	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {

	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {

	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {

	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {

	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onAlphanums1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {

	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
