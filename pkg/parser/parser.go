// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 348},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 368},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 368},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 381},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 381},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 395},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 403},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 427},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 511},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 531},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 531},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 539},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 560},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 665},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 681},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 681},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 681},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 689},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 709},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 899},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 925},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 925},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 925},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 933},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 933},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 950},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 958},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 958},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1216},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 1243},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 1243},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 11, offset: 1309},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1331},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1358},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1411},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1430},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1456},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1481},
						name: "VerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1507},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1532},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1559},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1589},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1616},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1652},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1677},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1710},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1737},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1775},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1801},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 11, offset: 1833},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 64, col: 1, offset: 1846},
			expr: &labeledExpr{
				pos:   position{line: 64, col: 47, offset: 1892},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 64, col: 54, offset: 1899},
					expr: &ruleRefExpr{
						pos:  position{line: 64, col: 55, offset: 1900},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 66, col: 1, offset: 1939},
			expr: &actionExpr{
				pos: position{line: 66, col: 38, offset: 1976},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 66, col: 38, offset: 1976},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 66, col: 38, offset: 1976},
							expr: &ruleRefExpr{
								pos:  position{line: 66, col: 39, offset: 1977},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 67, col: 5, offset: 1987},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 68, col: 9, offset: 2004},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 68, col: 9, offset: 2004},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2026},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2052},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2104},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2129},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2155},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2180},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2207},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2237},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2264},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2300},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2325},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2358},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2385},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2423},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 11, offset: 2449},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 87, col: 1, offset: 2491},
			expr: &labeledExpr{
				pos:   position{line: 87, col: 23, offset: 2513},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 87, col: 30, offset: 2520},
					expr: &ruleRefExpr{
						pos:  position{line: 87, col: 31, offset: 2521},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 89, col: 1, offset: 2544},
			expr: &actionExpr{
				pos: position{line: 89, col: 22, offset: 2565},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 89, col: 22, offset: 2565},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 89, col: 22, offset: 2565},
							expr: &ruleRefExpr{
								pos:  position{line: 89, col: 23, offset: 2566},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 90, col: 5, offset: 2576},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 90, col: 12, offset: 2583},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 90, col: 12, offset: 2583},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 90, col: 24, offset: 2595},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 97, col: 1, offset: 2748},
			expr: &ruleRefExpr{
				pos:  position{line: 97, col: 16, offset: 2763},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 99, col: 1, offset: 2783},
			expr: &actionExpr{
				pos: position{line: 99, col: 20, offset: 2802},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 99, col: 20, offset: 2802},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 99, col: 20, offset: 2802},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 99, col: 41, offset: 2823},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 99, col: 49, offset: 2831},
								expr: &ruleRefExpr{
									pos:  position{line: 99, col: 50, offset: 2832},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 75, offset: 2857},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 103, col: 1, offset: 2941},
			expr: &seqExpr{
				pos: position{line: 103, col: 26, offset: 2966},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 103, col: 26, offset: 2966},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 103, col: 32, offset: 2972},
						expr: &ruleRefExpr{
							pos:  position{line: 103, col: 32, offset: 2972},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 103, col: 39, offset: 2979},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 105, col: 1, offset: 2986},
			expr: &actionExpr{
				pos: position{line: 105, col: 27, offset: 3012},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 105, col: 27, offset: 3012},
					expr: &oneOrMoreExpr{
						pos: position{line: 105, col: 28, offset: 3013},
						expr: &seqExpr{
							pos: position{line: 105, col: 29, offset: 3014},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 105, col: 29, offset: 3014},
									expr: &ruleRefExpr{
										pos:  position{line: 105, col: 30, offset: 3015},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 105, col: 51, offset: 3036,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 112, col: 1, offset: 3209},
			expr: &actionExpr{
				pos: position{line: 112, col: 19, offset: 3227},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 112, col: 19, offset: 3227},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 112, col: 19, offset: 3227},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 112, col: 23, offset: 3231},
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 23, offset: 3231},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 30, offset: 3238},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 37, offset: 3245},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 52, offset: 3260},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 112, col: 56, offset: 3264},
								expr: &ruleRefExpr{
									pos:  position{line: 112, col: 56, offset: 3264},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 74, offset: 3282},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 113, col: 9, offset: 3295},
							expr: &choiceExpr{
								pos: position{line: 113, col: 10, offset: 3296},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 113, col: 10, offset: 3296},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 113, col: 30, offset: 3316},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 114, col: 9, offset: 3340},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 114, col: 18, offset: 3349},
								expr: &ruleRefExpr{
									pos:  position{line: 114, col: 18, offset: 3349},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 115, col: 9, offset: 3377},
							expr: &choiceExpr{
								pos: position{line: 115, col: 10, offset: 3378},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 115, col: 10, offset: 3378},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 115, col: 30, offset: 3398},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 116, col: 9, offset: 3422},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 116, col: 19, offset: 3432},
								expr: &ruleRefExpr{
									pos:  position{line: 116, col: 19, offset: 3432},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 120, col: 1, offset: 3537},
			expr: &choiceExpr{
				pos: position{line: 120, col: 20, offset: 3556},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 120, col: 20, offset: 3556},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 120, col: 48, offset: 3584},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 122, col: 1, offset: 3616},
			expr: &actionExpr{
				pos: position{line: 122, col: 30, offset: 3645},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 122, col: 30, offset: 3645},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 30, offset: 3645},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 30, offset: 3645},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 122, col: 37, offset: 3652},
							expr: &litMatcher{
								pos:        position{line: 122, col: 38, offset: 3653},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 122, col: 42, offset: 3657},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 122, col: 51, offset: 3666},
								expr: &ruleRefExpr{
									pos:  position{line: 122, col: 51, offset: 3666},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 122, col: 68, offset: 3683},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 126, col: 1, offset: 3757},
			expr: &actionExpr{
				pos: position{line: 126, col: 33, offset: 3789},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 126, col: 33, offset: 3789},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 33, offset: 3789},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 33, offset: 3789},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 126, col: 40, offset: 3796},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 126, col: 51, offset: 3807},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 59, offset: 3815},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 126, col: 75, offset: 3831},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 130, col: 1, offset: 3914},
			expr: &actionExpr{
				pos: position{line: 130, col: 19, offset: 3932},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 130, col: 19, offset: 3932},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 130, col: 19, offset: 3932},
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 19, offset: 3932},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 130, col: 26, offset: 3939},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 36, offset: 3949},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 130, col: 56, offset: 3969},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 130, col: 62, offset: 3975},
								expr: &ruleRefExpr{
									pos:  position{line: 130, col: 63, offset: 3976},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 130, col: 85, offset: 3998},
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 85, offset: 3998},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 130, col: 92, offset: 4005},
							expr: &litMatcher{
								pos:        position{line: 130, col: 92, offset: 4005},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 130, col: 97, offset: 4010},
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 97, offset: 4010},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 135, col: 1, offset: 4160},
			expr: &actionExpr{
				pos: position{line: 135, col: 23, offset: 4182},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 135, col: 23, offset: 4182},
					expr: &charClassMatcher{
						pos:        position{line: 135, col: 23, offset: 4182},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 139, col: 1, offset: 4233},
			expr: &actionExpr{
				pos: position{line: 139, col: 24, offset: 4256},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 139, col: 24, offset: 4256},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 139, col: 24, offset: 4256},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 139, col: 28, offset: 4260},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 139, col: 35, offset: 4267},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 139, col: 36, offset: 4268},
									expr: &charClassMatcher{
										pos:        position{line: 139, col: 36, offset: 4268},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 141, col: 4, offset: 4317},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 147, col: 1, offset: 4484},
			expr: &actionExpr{
				pos: position{line: 147, col: 21, offset: 4504},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 147, col: 21, offset: 4504},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 147, col: 21, offset: 4504},
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 21, offset: 4504},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 147, col: 28, offset: 4511},
							expr: &litMatcher{
								pos:        position{line: 147, col: 29, offset: 4512},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 147, col: 33, offset: 4516},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 148, col: 9, offset: 4536},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 148, col: 10, offset: 4537},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 148, col: 10, offset: 4537},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 148, col: 10, offset: 4537},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 148, col: 21, offset: 4548},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 148, col: 45, offset: 4572},
													expr: &litMatcher{
														pos:        position{line: 148, col: 45, offset: 4572},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 148, col: 50, offset: 4577},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 148, col: 58, offset: 4585},
														expr: &ruleRefExpr{
															pos:  position{line: 148, col: 59, offset: 4586},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 148, col: 82, offset: 4609},
													expr: &litMatcher{
														pos:        position{line: 148, col: 82, offset: 4609},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 148, col: 87, offset: 4614},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 148, col: 97, offset: 4624},
														expr: &ruleRefExpr{
															pos:  position{line: 148, col: 98, offset: 4625},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 150, col: 15, offset: 4744},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 150, col: 15, offset: 4744},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 150, col: 15, offset: 4744},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 150, col: 24, offset: 4753},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 150, col: 46, offset: 4775},
													expr: &litMatcher{
														pos:        position{line: 150, col: 46, offset: 4775},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 150, col: 51, offset: 4780},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 150, col: 61, offset: 4790},
														expr: &ruleRefExpr{
															pos:  position{line: 150, col: 62, offset: 4791},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 13, offset: 4902},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 157, col: 1, offset: 5037},
			expr: &choiceExpr{
				pos: position{line: 157, col: 27, offset: 5063},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 157, col: 27, offset: 5063},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 157, col: 27, offset: 5063},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 157, col: 27, offset: 5063},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 157, col: 32, offset: 5068},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 157, col: 39, offset: 5075},
									expr: &charClassMatcher{
										pos:        position{line: 157, col: 39, offset: 5075},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 159, col: 5, offset: 5125},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 159, col: 5, offset: 5125},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 159, col: 5, offset: 5125},
									expr: &litMatcher{
										pos:        position{line: 159, col: 5, offset: 5125},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 159, col: 11, offset: 5131},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 159, col: 18, offset: 5138},
									expr: &charClassMatcher{
										pos:        position{line: 159, col: 18, offset: 5138},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 159, col: 29, offset: 5149},
									expr: &ruleRefExpr{
										pos:  position{line: 159, col: 29, offset: 5149},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 159, col: 36, offset: 5156},
									expr: &litMatcher{
										pos:        position{line: 159, col: 37, offset: 5157},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 163, col: 1, offset: 5201},
			expr: &actionExpr{
				pos: position{line: 163, col: 25, offset: 5225},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 163, col: 25, offset: 5225},
					expr: &charClassMatcher{
						pos:        position{line: 163, col: 25, offset: 5225},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 167, col: 1, offset: 5275},
			expr: &actionExpr{
				pos: position{line: 167, col: 27, offset: 5301},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 167, col: 27, offset: 5301},
					expr: &charClassMatcher{
						pos:        position{line: 167, col: 27, offset: 5301},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 174, col: 1, offset: 5461},
			expr: &actionExpr{
				pos: position{line: 174, col: 25, offset: 5485},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 174, col: 25, offset: 5485},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 174, col: 25, offset: 5485},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 174, col: 29, offset: 5489},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 174, col: 35, offset: 5495},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 174, col: 50, offset: 5510},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 175, col: 9, offset: 5524},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 175, col: 15, offset: 5530},
								expr: &actionExpr{
									pos: position{line: 175, col: 16, offset: 5531},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 175, col: 17, offset: 5532},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 175, col: 17, offset: 5532},
												expr: &ruleRefExpr{
													pos:  position{line: 175, col: 17, offset: 5532},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 175, col: 24, offset: 5539},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 175, col: 31, offset: 5546},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 177, col: 13, offset: 5622},
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 13, offset: 5622},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 20, offset: 5629},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 184, col: 1, offset: 5876},
			expr: &actionExpr{
				pos: position{line: 184, col: 18, offset: 5893},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 184, col: 18, offset: 5893},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 184, col: 18, offset: 5893},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 184, col: 28, offset: 5903},
							expr: &charClassMatcher{
								pos:        position{line: 184, col: 29, offset: 5904},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 188, col: 1, offset: 5956},
			expr: &actionExpr{
				pos: position{line: 188, col: 30, offset: 5985},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 188, col: 30, offset: 5985},
					expr: &charClassMatcher{
						pos:        position{line: 188, col: 30, offset: 5985},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 192, col: 1, offset: 6034},
			expr: &choiceExpr{
				pos: position{line: 192, col: 19, offset: 6052},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 192, col: 19, offset: 6052},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 192, col: 19, offset: 6052},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 192, col: 19, offset: 6052},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 192, col: 24, offset: 6057},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 192, col: 30, offset: 6063},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 192, col: 45, offset: 6078},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 192, col: 49, offset: 6082},
									expr: &ruleRefExpr{
										pos:  position{line: 192, col: 49, offset: 6082},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 192, col: 56, offset: 6089},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 194, col: 5, offset: 6151},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 194, col: 5, offset: 6151},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 194, col: 5, offset: 6151},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 194, col: 9, offset: 6155},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 15, offset: 6161},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 194, col: 30, offset: 6176},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 194, col: 35, offset: 6181},
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 35, offset: 6181},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 194, col: 42, offset: 6188},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 198, col: 1, offset: 6251},
			expr: &actionExpr{
				pos: position{line: 198, col: 26, offset: 6276},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 198, col: 26, offset: 6276},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 198, col: 26, offset: 6276},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 198, col: 30, offset: 6280},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 36, offset: 6286},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 198, col: 51, offset: 6301},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 202, col: 1, offset: 6371},
			expr: &actionExpr{
				pos: position{line: 202, col: 15, offset: 6385},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 202, col: 15, offset: 6385},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 202, col: 15, offset: 6385},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 202, col: 21, offset: 6391},
								expr: &ruleRefExpr{
									pos:  position{line: 202, col: 22, offset: 6392},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 202, col: 41, offset: 6411},
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 41, offset: 6411},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 206, col: 1, offset: 6485},
			expr: &actionExpr{
				pos: position{line: 206, col: 21, offset: 6505},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 206, col: 21, offset: 6505},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 206, col: 21, offset: 6505},
							expr: &choiceExpr{
								pos: position{line: 206, col: 23, offset: 6507},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 206, col: 23, offset: 6507},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 206, col: 29, offset: 6513},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 206, col: 35, offset: 6519},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 207, col: 5, offset: 6596},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 207, col: 11, offset: 6602},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 207, col: 11, offset: 6602},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 208, col: 9, offset: 6624},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 209, col: 9, offset: 6649},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 9, offset: 6687},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 211, col: 9, offset: 6716},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 212, col: 9, offset: 6745},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 213, col: 9, offset: 6773},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 9, offset: 6801},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 215, col: 9, offset: 6839},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 216, col: 9, offset: 6876},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 221, col: 1, offset: 7064},
			expr: &choiceExpr{
				pos: position{line: 221, col: 24, offset: 7087},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 221, col: 24, offset: 7087},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 221, col: 42, offset: 7105},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 223, col: 1, offset: 7124},
			expr: &actionExpr{
				pos: position{line: 223, col: 14, offset: 7137},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 223, col: 14, offset: 7137},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 223, col: 14, offset: 7137},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 223, col: 19, offset: 7142},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 23, offset: 7146},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 223, col: 27, offset: 7150},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 223, col: 32, offset: 7155},
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 32, offset: 7155},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 39, offset: 7162},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 227, col: 1, offset: 7218},
			expr: &actionExpr{
				pos: position{line: 227, col: 20, offset: 7237},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 227, col: 20, offset: 7237},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 227, col: 20, offset: 7237},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 227, col: 25, offset: 7242},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 29, offset: 7246},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 227, col: 33, offset: 7250},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 227, col: 38, offset: 7255},
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 38, offset: 7255},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 233, col: 1, offset: 7538},
			expr: &actionExpr{
				pos: position{line: 233, col: 17, offset: 7554},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 233, col: 17, offset: 7554},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 233, col: 17, offset: 7554},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 233, col: 21, offset: 7558},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 28, offset: 7565},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 233, col: 49, offset: 7586},
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 49, offset: 7586},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 233, col: 56, offset: 7593},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 237, col: 1, offset: 7655},
			expr: &actionExpr{
				pos: position{line: 237, col: 24, offset: 7678},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 237, col: 24, offset: 7678},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 237, col: 24, offset: 7678},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 237, col: 32, offset: 7686},
							expr: &charClassMatcher{
								pos:        position{line: 237, col: 32, offset: 7686},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 243, col: 1, offset: 7945},
			expr: &actionExpr{
				pos: position{line: 243, col: 31, offset: 7975},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 243, col: 31, offset: 7975},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 243, col: 31, offset: 7975},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 243, col: 35, offset: 7979},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 243, col: 42, offset: 7986},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 243, col: 42, offset: 7986},
										expr: &ruleRefExpr{
											pos:  position{line: 243, col: 42, offset: 7986},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 243, col: 57, offset: 8001},
										expr: &ruleRefExpr{
											pos:  position{line: 243, col: 57, offset: 8001},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 243, col: 69, offset: 8013},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 243, col: 73, offset: 8017},
							expr: &ruleRefExpr{
								pos:  position{line: 243, col: 73, offset: 8017},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 243, col: 80, offset: 8024},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 247, col: 1, offset: 8082},
			expr: &choiceExpr{
				pos: position{line: 247, col: 15, offset: 8096},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 247, col: 15, offset: 8096},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 247, col: 31, offset: 8112},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 247, col: 46, offset: 8127},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 251, col: 1, offset: 8359},
			expr: &actionExpr{
				pos: position{line: 251, col: 18, offset: 8376},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 251, col: 18, offset: 8376},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 251, col: 18, offset: 8376},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 251, col: 22, offset: 8380},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 251, col: 29, offset: 8387},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 251, col: 29, offset: 8387},
										expr: &ruleRefExpr{
											pos:  position{line: 251, col: 29, offset: 8387},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 251, col: 45, offset: 8403},
										expr: &ruleRefExpr{
											pos:  position{line: 251, col: 45, offset: 8403},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 251, col: 60, offset: 8418},
										expr: &ruleRefExpr{
											pos:  position{line: 251, col: 60, offset: 8418},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 251, col: 82, offset: 8440},
										expr: &ruleRefExpr{
											pos:  position{line: 251, col: 82, offset: 8440},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 251, col: 104, offset: 8462},
										expr: &ruleRefExpr{
											pos:  position{line: 251, col: 104, offset: 8462},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 251, col: 116, offset: 8474},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 251, col: 120, offset: 8478},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 255, col: 1, offset: 8536},
			expr: &actionExpr{
				pos: position{line: 255, col: 19, offset: 8554},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 255, col: 19, offset: 8554},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 255, col: 25, offset: 8560},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 259, col: 1, offset: 8634},
			expr: &actionExpr{
				pos: position{line: 259, col: 25, offset: 8658},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 259, col: 25, offset: 8658},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 259, col: 25, offset: 8658},
							expr: &ruleRefExpr{
								pos:  position{line: 259, col: 25, offset: 8658},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 259, col: 32, offset: 8665},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 259, col: 36, offset: 8669},
							expr: &ruleRefExpr{
								pos:  position{line: 259, col: 36, offset: 8669},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 259, col: 43, offset: 8676},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 259, col: 49, offset: 8682},
								expr: &ruleRefExpr{
									pos:  position{line: 259, col: 49, offset: 8682},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 266, col: 1, offset: 8839},
			expr: &actionExpr{
				pos: position{line: 266, col: 25, offset: 8863},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 266, col: 25, offset: 8863},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 266, col: 25, offset: 8863},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 25, offset: 8863},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 266, col: 32, offset: 8870},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 266, col: 36, offset: 8874},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 36, offset: 8874},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 43, offset: 8881},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 49, offset: 8887},
								expr: &ruleRefExpr{
									pos:  position{line: 266, col: 49, offset: 8887},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 273, col: 1, offset: 9044},
			expr: &actionExpr{
				pos: position{line: 273, col: 21, offset: 9064},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 273, col: 21, offset: 9064},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 273, col: 21, offset: 9064},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 273, col: 33, offset: 9076},
							expr: &ruleRefExpr{
								pos:  position{line: 273, col: 33, offset: 9076},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 273, col: 40, offset: 9083},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 277, col: 1, offset: 9139},
			expr: &actionExpr{
				pos: position{line: 277, col: 30, offset: 9168},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 277, col: 30, offset: 9168},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 277, col: 30, offset: 9168},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 277, col: 39, offset: 9177},
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 39, offset: 9177},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 277, col: 46, offset: 9184},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 282, col: 1, offset: 9330},
			expr: &actionExpr{
				pos: position{line: 282, col: 30, offset: 9359},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 282, col: 30, offset: 9359},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 282, col: 30, offset: 9359},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 282, col: 34, offset: 9363},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 282, col: 37, offset: 9366},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 282, col: 53, offset: 9382},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 282, col: 57, offset: 9386},
							expr: &ruleRefExpr{
								pos:  position{line: 282, col: 57, offset: 9386},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 282, col: 64, offset: 9393},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 287, col: 1, offset: 9553},
			expr: &actionExpr{
				pos: position{line: 287, col: 21, offset: 9573},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 287, col: 21, offset: 9573},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 287, col: 21, offset: 9573},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 288, col: 5, offset: 9589},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 288, col: 14, offset: 9598},
								expr: &actionExpr{
									pos: position{line: 288, col: 15, offset: 9599},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 288, col: 15, offset: 9599},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 288, col: 15, offset: 9599},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 288, col: 19, offset: 9603},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 288, col: 24, offset: 9608},
													expr: &ruleRefExpr{
														pos:  position{line: 288, col: 25, offset: 9609},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 289, col: 5, offset: 9665},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 289, col: 12, offset: 9672},
								expr: &actionExpr{
									pos: position{line: 289, col: 13, offset: 9673},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 289, col: 13, offset: 9673},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 289, col: 13, offset: 9673},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 289, col: 17, offset: 9677},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 289, col: 22, offset: 9682},
													expr: &ruleRefExpr{
														pos:  position{line: 289, col: 23, offset: 9683},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 290, col: 5, offset: 9731},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 9, offset: 9735},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 9, offset: 9735},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 290, col: 16, offset: 9742},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 295, col: 1, offset: 9898},
			expr: &actionExpr{
				pos: position{line: 295, col: 19, offset: 9916},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 295, col: 19, offset: 9916},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 295, col: 19, offset: 9916},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 295, col: 23, offset: 9920},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 295, col: 34, offset: 9931},
								expr: &ruleRefExpr{
									pos:  position{line: 295, col: 35, offset: 9932},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 295, col: 54, offset: 9951},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 295, col: 58, offset: 9955},
							expr: &ruleRefExpr{
								pos:  position{line: 295, col: 58, offset: 9955},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 295, col: 65, offset: 9962},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 299, col: 1, offset: 10038},
			expr: &choiceExpr{
				pos: position{line: 299, col: 21, offset: 10058},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 299, col: 21, offset: 10058},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 299, col: 49, offset: 10086},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 301, col: 1, offset: 10118},
			expr: &actionExpr{
				pos: position{line: 301, col: 30, offset: 10147},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 301, col: 30, offset: 10147},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 301, col: 30, offset: 10147},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 35, offset: 10152},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 301, col: 49, offset: 10166},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 301, col: 53, offset: 10170},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 301, col: 59, offset: 10176},
								expr: &ruleRefExpr{
									pos:  position{line: 301, col: 60, offset: 10177},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 301, col: 77, offset: 10194},
							expr: &litMatcher{
								pos:        position{line: 301, col: 77, offset: 10194},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 301, col: 82, offset: 10199},
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 82, offset: 10199},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 305, col: 1, offset: 10302},
			expr: &actionExpr{
				pos: position{line: 305, col: 33, offset: 10334},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 305, col: 33, offset: 10334},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 305, col: 33, offset: 10334},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 38, offset: 10339},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 305, col: 52, offset: 10353},
							expr: &litMatcher{
								pos:        position{line: 305, col: 52, offset: 10353},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 57, offset: 10358},
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 57, offset: 10358},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 309, col: 1, offset: 10450},
			expr: &actionExpr{
				pos: position{line: 309, col: 17, offset: 10466},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 309, col: 17, offset: 10466},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 309, col: 17, offset: 10466},
							expr: &litMatcher{
								pos:        position{line: 309, col: 18, offset: 10467},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 309, col: 26, offset: 10475},
							expr: &litMatcher{
								pos:        position{line: 309, col: 27, offset: 10476},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 309, col: 35, offset: 10484},
							expr: &litMatcher{
								pos:        position{line: 309, col: 36, offset: 10485},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 309, col: 46, offset: 10495},
							expr: &oneOrMoreExpr{
								pos: position{line: 309, col: 48, offset: 10497},
								expr: &ruleRefExpr{
									pos:  position{line: 309, col: 48, offset: 10497},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 56, offset: 10505},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 309, col: 61, offset: 10510},
								expr: &charClassMatcher{
									pos:        position{line: 309, col: 61, offset: 10510},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 309, col: 75, offset: 10524},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 75, offset: 10524},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 313, col: 1, offset: 10571},
			expr: &actionExpr{
				pos: position{line: 313, col: 19, offset: 10589},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 313, col: 19, offset: 10589},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 313, col: 26, offset: 10596},
						expr: &charClassMatcher{
							pos:        position{line: 313, col: 26, offset: 10596},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 317, col: 1, offset: 10651},
			expr: &actionExpr{
				pos: position{line: 317, col: 29, offset: 10679},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 317, col: 29, offset: 10679},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 317, col: 29, offset: 10679},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 317, col: 36, offset: 10686},
								expr: &charClassMatcher{
									pos:        position{line: 317, col: 36, offset: 10686},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 317, col: 50, offset: 10700},
							expr: &litMatcher{
								pos:        position{line: 317, col: 51, offset: 10701},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 321, col: 1, offset: 10871},
			expr: &actionExpr{
				pos: position{line: 321, col: 20, offset: 10890},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 321, col: 20, offset: 10890},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 321, col: 20, offset: 10890},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 321, col: 29, offset: 10899},
							expr: &ruleRefExpr{
								pos:  position{line: 321, col: 29, offset: 10899},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 321, col: 36, offset: 10906},
							expr: &litMatcher{
								pos:        position{line: 321, col: 36, offset: 10906},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 321, col: 41, offset: 10911},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 321, col: 48, offset: 10918},
								expr: &ruleRefExpr{
									pos:  position{line: 321, col: 49, offset: 10919},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 321, col: 66, offset: 10936},
							expr: &litMatcher{
								pos:        position{line: 321, col: 66, offset: 10936},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 321, col: 71, offset: 10941},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 321, col: 77, offset: 10947},
								expr: &ruleRefExpr{
									pos:  position{line: 321, col: 78, offset: 10948},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 321, col: 95, offset: 10965},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 321, col: 99, offset: 10969},
							expr: &ruleRefExpr{
								pos:  position{line: 321, col: 99, offset: 10969},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 321, col: 106, offset: 10976},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 325, col: 1, offset: 11049},
			expr: &actionExpr{
				pos: position{line: 325, col: 20, offset: 11068},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 325, col: 20, offset: 11068},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 325, col: 20, offset: 11068},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 325, col: 29, offset: 11077},
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 29, offset: 11077},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 325, col: 36, offset: 11084},
							expr: &litMatcher{
								pos:        position{line: 325, col: 36, offset: 11084},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 41, offset: 11089},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 325, col: 48, offset: 11096},
								expr: &ruleRefExpr{
									pos:  position{line: 325, col: 49, offset: 11097},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 325, col: 66, offset: 11114},
							expr: &litMatcher{
								pos:        position{line: 325, col: 66, offset: 11114},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 71, offset: 11119},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 325, col: 77, offset: 11125},
								expr: &ruleRefExpr{
									pos:  position{line: 325, col: 78, offset: 11126},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 325, col: 95, offset: 11143},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 325, col: 99, offset: 11147},
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 99, offset: 11147},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 325, col: 106, offset: 11154},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 329, col: 1, offset: 11245},
			expr: &actionExpr{
				pos: position{line: 329, col: 19, offset: 11263},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 329, col: 20, offset: 11264},
					expr: &charClassMatcher{
						pos:        position{line: 329, col: 20, offset: 11264},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 333, col: 1, offset: 11317},
			expr: &actionExpr{
				pos: position{line: 333, col: 21, offset: 11337},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 333, col: 21, offset: 11337},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 333, col: 21, offset: 11337},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 333, col: 25, offset: 11341},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 333, col: 31, offset: 11347},
								expr: &ruleRefExpr{
									pos:  position{line: 333, col: 32, offset: 11348},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 333, col: 51, offset: 11367},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 337, col: 1, offset: 11443},
			expr: &actionExpr{
				pos: position{line: 337, col: 20, offset: 11462},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 337, col: 20, offset: 11462},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 337, col: 20, offset: 11462},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 337, col: 24, offset: 11466},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 337, col: 31, offset: 11473},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 337, col: 31, offset: 11473},
										expr: &ruleRefExpr{
											pos:  position{line: 337, col: 31, offset: 11473},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 337, col: 51, offset: 11493},
										expr: &ruleRefExpr{
											pos:  position{line: 337, col: 51, offset: 11493},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 337, col: 66, offset: 11508},
										expr: &ruleRefExpr{
											pos:  position{line: 337, col: 66, offset: 11508},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 337, col: 78, offset: 11520},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 341, col: 1, offset: 11578},
			expr: &actionExpr{
				pos: position{line: 341, col: 23, offset: 11600},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 341, col: 23, offset: 11600},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 341, col: 28, offset: 11605},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 345, col: 1, offset: 11677},
			expr: &actionExpr{
				pos: position{line: 345, col: 25, offset: 11701},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 345, col: 25, offset: 11701},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 345, col: 25, offset: 11701},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 345, col: 36, offset: 11712},
								expr: &ruleRefExpr{
									pos:  position{line: 345, col: 37, offset: 11713},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 345, col: 56, offset: 11732},
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 56, offset: 11732},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 345, col: 67, offset: 11743},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 349, col: 1, offset: 11855},
			expr: &choiceExpr{
				pos: position{line: 349, col: 18, offset: 11872},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 349, col: 18, offset: 11872},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 36, offset: 11890},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 58, offset: 11912},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 351, col: 1, offset: 11933},
			expr: &actionExpr{
				pos: position{line: 351, col: 24, offset: 11956},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 351, col: 24, offset: 11956},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 351, col: 24, offset: 11956},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 351, col: 28, offset: 11960},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 35, offset: 11967},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 351, col: 50, offset: 11982},
							expr: &charClassMatcher{
								pos:        position{line: 351, col: 51, offset: 11983},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 355, col: 1, offset: 12056},
			expr: &actionExpr{
				pos: position{line: 355, col: 20, offset: 12075},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 355, col: 20, offset: 12075},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 355, col: 20, offset: 12075},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 355, col: 24, offset: 12079},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 27, offset: 12082},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 355, col: 42, offset: 12097},
							expr: &charClassMatcher{
								pos:        position{line: 355, col: 43, offset: 12098},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 359, col: 1, offset: 12163},
			expr: &actionExpr{
				pos: position{line: 359, col: 22, offset: 12184},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 359, col: 22, offset: 12184},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 359, col: 22, offset: 12184},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 359, col: 26, offset: 12188},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 359, col: 31, offset: 12193},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 359, col: 46, offset: 12208},
							expr: &charClassMatcher{
								pos:        position{line: 359, col: 47, offset: 12209},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 364, col: 1, offset: 12323},
			expr: &actionExpr{
				pos: position{line: 364, col: 20, offset: 12342},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 364, col: 20, offset: 12342},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 364, col: 20, offset: 12342},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 364, col: 26, offset: 12348},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 364, col: 41, offset: 12363},
							expr: &charClassMatcher{
								pos:        position{line: 364, col: 42, offset: 12364},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePositionalValue",
			pos:  position{line: 369, col: 1, offset: 12464},
			expr: &actionExpr{
				pos: position{line: 369, col: 26, offset: 12489},
				run: (*parser).callonInlinePositionalValue1,
				expr: &seqExpr{
					pos: position{line: 369, col: 26, offset: 12489},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 369, col: 26, offset: 12489},
							expr: &ruleRefExpr{
								pos:  position{line: 369, col: 26, offset: 12489},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 369, col: 33, offset: 12496},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 369, col: 40, offset: 12503},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 369, col: 40, offset: 12503},
										name: "InlineValuePlain",
									},
									&ruleRefExpr{
										pos:  position{line: 369, col: 59, offset: 12522},
										name: "AttrValueSingleQuoted",
									},
									&ruleRefExpr{
										pos:  position{line: 369, col: 83, offset: 12546},
										name: "AttrValueDoubleQuoted",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 369, col: 106, offset: 12569},
							expr: &ruleRefExpr{
								pos:  position{line: 369, col: 106, offset: 12569},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 369, col: 113, offset: 12576},
							expr: &charClassMatcher{
								pos:        position{line: 369, col: 114, offset: 12577},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineValuePlain",
			pos:  position{line: 375, col: 1, offset: 12771},
			expr: &actionExpr{
				pos: position{line: 375, col: 21, offset: 12791},
				run: (*parser).callonInlineValuePlain1,
				expr: &seqExpr{
					pos: position{line: 375, col: 21, offset: 12791},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 375, col: 21, offset: 12791},
							val:        "[^,\\r\\n\"' \\t=\\]]",
							chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '=', ']'},
							ignoreCase: false,
							inverted:   true,
						},
						&zeroOrMoreExpr{
							pos: position{line: 375, col: 39, offset: 12809},
							expr: &choiceExpr{
								pos: position{line: 375, col: 40, offset: 12810},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 375, col: 40, offset: 12810},
										val:        "[^, \\t\\r\\n\"'=\\]]",
										chars:      []rune{',', ' ', '\t', '\r', '\n', '"', '\'', '=', ']'},
										ignoreCase: false,
										inverted:   true,
									},
									&seqExpr{
										pos: position{line: 375, col: 59, offset: 12829},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 375, col: 59, offset: 12829},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 375, col: 64, offset: 12834},
												val:        "[^, \\t\\r\\n\"'=\\]]",
												chars:      []rune{',', ' ', '\t', '\r', '\n', '"', '\'', '=', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 379, col: 1, offset: 12893},
			expr: &choiceExpr{
				pos: position{line: 379, col: 19, offset: 12911},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 379, col: 19, offset: 12911},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 379, col: 41, offset: 12933},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 379, col: 65, offset: 12957},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 383, col: 1, offset: 13159},
			expr: &actionExpr{
				pos: position{line: 383, col: 24, offset: 13182},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 383, col: 24, offset: 13182},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 383, col: 24, offset: 13182},
							val:        "[^,\\r\\n\"' \\t.#%=\\]]",
							chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
							ignoreCase: false,
							inverted:   true,
						},
						&zeroOrMoreExpr{
							pos: position{line: 383, col: 45, offset: 13203},
							expr: &choiceExpr{
								pos: position{line: 383, col: 46, offset: 13204},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 383, col: 46, offset: 13204},
										val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
										chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
										ignoreCase: false,
										inverted:   true,
									},
									&seqExpr{
										pos: position{line: 383, col: 68, offset: 13226},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 383, col: 68, offset: 13226},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 383, col: 73, offset: 13231},
												val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
												chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 387, col: 1, offset: 13293},
			expr: &actionExpr{
				pos: position{line: 387, col: 13, offset: 13305},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 387, col: 13, offset: 13305},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 387, col: 13, offset: 13305},
							expr: &seqExpr{
								pos: position{line: 387, col: 15, offset: 13307},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 387, col: 15, offset: 13307},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 387, col: 19, offset: 13311},
										expr: &ruleRefExpr{
											pos:  position{line: 387, col: 19, offset: 13311},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 387, col: 29, offset: 13321},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 33, offset: 13325},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 387, col: 46, offset: 13338},
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 46, offset: 13338},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 387, col: 53, offset: 13345},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 387, col: 57, offset: 13349},
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 57, offset: 13349},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 387, col: 64, offset: 13356},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 70, offset: 13362},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 387, col: 85, offset: 13377},
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 85, offset: 13377},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 392, col: 1, offset: 13572},
			expr: &actionExpr{
				pos: position{line: 392, col: 17, offset: 13588},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 392, col: 17, offset: 13588},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 392, col: 17, offset: 13588},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 392, col: 26, offset: 13597},
							expr: &charClassMatcher{
								pos:        position{line: 392, col: 26, offset: 13597},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 396, col: 1, offset: 13649},
			expr: &choiceExpr{
				pos: position{line: 396, col: 19, offset: 13667},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 396, col: 19, offset: 13667},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 396, col: 35, offset: 13683},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 396, col: 59, offset: 13707},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 396, col: 83, offset: 13731},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 398, col: 1, offset: 13749},
			expr: &actionExpr{
				pos: position{line: 398, col: 19, offset: 13767},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 398, col: 19, offset: 13767},
					expr: &charClassMatcher{
						pos:        position{line: 398, col: 19, offset: 13767},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 402, col: 1, offset: 13824},
			expr: &actionExpr{
				pos: position{line: 402, col: 26, offset: 13849},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 402, col: 26, offset: 13849},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 402, col: 26, offset: 13849},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 402, col: 30, offset: 13853},
							expr: &charClassMatcher{
								pos:        position{line: 402, col: 30, offset: 13853},
								val:        "[^'\\r\\n]",
								chars:      []rune{'\'', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 402, col: 40, offset: 13863},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 406, col: 1, offset: 13924},
			expr: &actionExpr{
				pos: position{line: 406, col: 26, offset: 13949},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 406, col: 26, offset: 13949},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 406, col: 26, offset: 13949},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 406, col: 31, offset: 13954},
							expr: &charClassMatcher{
								pos:        position{line: 406, col: 31, offset: 13954},
								val:        "[^\"\\r\\n]",
								chars:      []rune{'"', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 406, col: 41, offset: 13964},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 412, col: 1, offset: 14224},
			expr: &actionExpr{
				pos: position{line: 412, col: 18, offset: 14241},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 412, col: 18, offset: 14241},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 420, col: 1, offset: 14431},
			expr: &choiceExpr{
				pos: position{line: 420, col: 17, offset: 14447},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 420, col: 17, offset: 14447},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 420, col: 38, offset: 14468},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 422, col: 1, offset: 14490},
			expr: &actionExpr{
				pos: position{line: 422, col: 23, offset: 14512},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 422, col: 23, offset: 14512},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 422, col: 23, offset: 14512},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 422, col: 46, offset: 14535},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 422, col: 55, offset: 14544},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 422, col: 82, offset: 14571},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 426, col: 1, offset: 14679},
			expr: &actionExpr{
				pos: position{line: 426, col: 31, offset: 14709},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 426, col: 31, offset: 14709},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 426, col: 41, offset: 14719},
						expr: &ruleRefExpr{
							pos:  position{line: 426, col: 41, offset: 14719},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 430, col: 1, offset: 14801},
			expr: &seqExpr{
				pos: position{line: 430, col: 27, offset: 14827},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 430, col: 27, offset: 14827},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 430, col: 32, offset: 14832},
						expr: &charClassMatcher{
							pos:        position{line: 430, col: 33, offset: 14833},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 432, col: 1, offset: 14846},
			expr: &litMatcher{
				pos:        position{line: 432, col: 25, offset: 14870},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 435, col: 1, offset: 14961},
			expr: &actionExpr{
				pos: position{line: 435, col: 30, offset: 14990},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 435, col: 30, offset: 14990},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 436, col: 9, offset: 15009},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 436, col: 9, offset: 15009},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 436, col: 9, offset: 15009},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 436, col: 19, offset: 15019},
										expr: &ruleRefExpr{
											pos:  position{line: 436, col: 20, offset: 15020},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 437, col: 11, offset: 15077},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 437, col: 11, offset: 15077},
										expr: &ruleRefExpr{
											pos:  position{line: 437, col: 11, offset: 15077},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 437, col: 18, offset: 15084},
										expr: &ruleRefExpr{
											pos:  position{line: 437, col: 19, offset: 15085},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 438, col: 11, offset: 15117},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 438, col: 11, offset: 15117},
										expr: &litMatcher{
											pos:        position{line: 438, col: 12, offset: 15118},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 438, col: 16, offset: 15122},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 439, col: 11, offset: 15171},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 440, col: 11, offset: 15193},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 441, col: 11, offset: 15216},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 442, col: 11, offset: 15242},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 443, col: 11, offset: 15271},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 444, col: 11, offset: 15287},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 445, col: 11, offset: 15320},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 446, col: 11, offset: 15340},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 447, col: 11, offset: 15362},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 448, col: 11, offset: 15384},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 449, col: 11, offset: 15409},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 450, col: 11, offset: 15436},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 450, col: 11, offset: 15436},
										expr: &litMatcher{
											pos:        position{line: 450, col: 12, offset: 15437},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 450, col: 17, offset: 15442},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 451, col: 11, offset: 15467},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 452, col: 11, offset: 15497},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 453, col: 11, offset: 15526},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 457, col: 1, offset: 15596},
			expr: &choiceExpr{
				pos: position{line: 457, col: 41, offset: 15636},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 457, col: 41, offset: 15636},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 457, col: 55, offset: 15650},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 457, col: 55, offset: 15650},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 457, col: 55, offset: 15650},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 457, col: 59, offset: 15654},
									expr: &litMatcher{
										pos:        position{line: 457, col: 60, offset: 15655},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 461, col: 1, offset: 15718},
			expr: &actionExpr{
				pos: position{line: 461, col: 23, offset: 15740},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 461, col: 23, offset: 15740},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 461, col: 23, offset: 15740},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 461, col: 46, offset: 15763},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 461, col: 55, offset: 15772},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 461, col: 82, offset: 15799},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 465, col: 1, offset: 15907},
			expr: &actionExpr{
				pos: position{line: 465, col: 31, offset: 15937},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 465, col: 31, offset: 15937},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 465, col: 41, offset: 15947},
						expr: &ruleRefExpr{
							pos:  position{line: 465, col: 41, offset: 15947},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 470, col: 1, offset: 16112},
			expr: &actionExpr{
				pos: position{line: 470, col: 30, offset: 16141},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 470, col: 30, offset: 16141},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 471, col: 9, offset: 16160},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 471, col: 9, offset: 16160},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 471, col: 9, offset: 16160},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 471, col: 19, offset: 16170},
										expr: &ruleRefExpr{
											pos:  position{line: 471, col: 20, offset: 16171},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 472, col: 11, offset: 16228},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 472, col: 11, offset: 16228},
										expr: &ruleRefExpr{
											pos:  position{line: 472, col: 11, offset: 16228},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 472, col: 18, offset: 16235},
										expr: &ruleRefExpr{
											pos:  position{line: 472, col: 19, offset: 16236},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 473, col: 11, offset: 16268},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 474, col: 11, offset: 16286},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 475, col: 11, offset: 16308},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 476, col: 11, offset: 16331},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 477, col: 11, offset: 16357},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 478, col: 11, offset: 16386},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 479, col: 11, offset: 16402},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 480, col: 11, offset: 16435},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 481, col: 11, offset: 16455},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 482, col: 11, offset: 16477},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 483, col: 11, offset: 16499},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 484, col: 11, offset: 16524},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 485, col: 11, offset: 16551},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 485, col: 11, offset: 16551},
										expr: &litMatcher{
											pos:        position{line: 485, col: 12, offset: 16552},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 485, col: 18, offset: 16558},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 486, col: 11, offset: 16583},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 487, col: 11, offset: 16613},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 488, col: 11, offset: 16642},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 492, col: 1, offset: 16720},
			expr: &seqExpr{
				pos: position{line: 492, col: 27, offset: 16746},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 492, col: 27, offset: 16746},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 492, col: 33, offset: 16752},
						expr: &charClassMatcher{
							pos:        position{line: 492, col: 34, offset: 16753},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 494, col: 1, offset: 16766},
			expr: &litMatcher{
				pos:        position{line: 494, col: 25, offset: 16790},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 496, col: 1, offset: 16799},
			expr: &actionExpr{
				pos: position{line: 496, col: 41, offset: 16839},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 496, col: 42, offset: 16840},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 496, col: 42, offset: 16840},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 496, col: 56, offset: 16854},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 496, col: 56, offset: 16854},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 496, col: 60, offset: 16858},
									expr: &litMatcher{
										pos:        position{line: 496, col: 61, offset: 16859},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 503, col: 1, offset: 17031},
			expr: &actionExpr{
				pos: position{line: 503, col: 12, offset: 17042},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 503, col: 12, offset: 17042},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 503, col: 12, offset: 17042},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 503, col: 23, offset: 17053},
								expr: &ruleRefExpr{
									pos:  position{line: 503, col: 24, offset: 17054},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 504, col: 5, offset: 17072},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 504, col: 12, offset: 17079},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 504, col: 12, offset: 17079},
									expr: &litMatcher{
										pos:        position{line: 504, col: 13, offset: 17080},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 508, col: 5, offset: 17175},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 512, col: 5, offset: 17331},
							expr: &ruleRefExpr{
								pos:  position{line: 512, col: 5, offset: 17331},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 12, offset: 17338},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 512, col: 19, offset: 17345},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 34, offset: 17360},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 512, col: 38, offset: 17364},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 38, offset: 17364},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 512, col: 56, offset: 17382},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 516, col: 1, offset: 17492},
			expr: &actionExpr{
				pos: position{line: 516, col: 18, offset: 17509},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 516, col: 18, offset: 17509},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 516, col: 27, offset: 17518},
						expr: &seqExpr{
							pos: position{line: 516, col: 28, offset: 17519},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 516, col: 28, offset: 17519},
									expr: &ruleRefExpr{
										pos:  position{line: 516, col: 29, offset: 17520},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 516, col: 37, offset: 17528},
									expr: &ruleRefExpr{
										pos:  position{line: 516, col: 38, offset: 17529},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 516, col: 54, offset: 17545},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 520, col: 1, offset: 17670},
			expr: &actionExpr{
				pos: position{line: 520, col: 17, offset: 17686},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 520, col: 17, offset: 17686},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 520, col: 26, offset: 17695},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 520, col: 26, offset: 17695},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 521, col: 11, offset: 17711},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 522, col: 11, offset: 17757},
								expr: &ruleRefExpr{
									pos:  position{line: 522, col: 11, offset: 17757},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 523, col: 11, offset: 17776},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 524, col: 11, offset: 17802},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 525, col: 11, offset: 17831},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 526, col: 11, offset: 17853},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 527, col: 11, offset: 17876},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 528, col: 11, offset: 17892},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 529, col: 11, offset: 17918},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 530, col: 11, offset: 17942},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 531, col: 11, offset: 17964},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 532, col: 11, offset: 17982},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 533, col: 11, offset: 18015},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 534, col: 11, offset: 18044},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 541, col: 1, offset: 18202},
			expr: &seqExpr{
				pos: position{line: 541, col: 31, offset: 18232},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 541, col: 31, offset: 18232},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 541, col: 41, offset: 18242},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 546, col: 1, offset: 18358},
			expr: &actionExpr{
				pos: position{line: 546, col: 19, offset: 18376},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 546, col: 19, offset: 18376},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 546, col: 19, offset: 18376},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 25, offset: 18382},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 546, col: 40, offset: 18397},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 546, col: 45, offset: 18402},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 52, offset: 18409},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 546, col: 68, offset: 18425},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 75, offset: 18432},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 550, col: 1, offset: 18551},
			expr: &actionExpr{
				pos: position{line: 550, col: 20, offset: 18570},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 550, col: 20, offset: 18570},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 550, col: 20, offset: 18570},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 26, offset: 18576},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 550, col: 41, offset: 18591},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 550, col: 45, offset: 18595},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 52, offset: 18602},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 550, col: 68, offset: 18618},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 75, offset: 18625},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 554, col: 1, offset: 18745},
			expr: &actionExpr{
				pos: position{line: 554, col: 18, offset: 18762},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 554, col: 19, offset: 18763},
					expr: &charClassMatcher{
						pos:        position{line: 554, col: 19, offset: 18763},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 558, col: 1, offset: 18816},
			expr: &actionExpr{
				pos: position{line: 558, col: 19, offset: 18834},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 558, col: 19, offset: 18834},
					expr: &charClassMatcher{
						pos:        position{line: 558, col: 19, offset: 18834},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 562, col: 1, offset: 18886},
			expr: &actionExpr{
				pos: position{line: 562, col: 24, offset: 18909},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 562, col: 24, offset: 18909},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 562, col: 24, offset: 18909},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 562, col: 28, offset: 18913},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 562, col: 34, offset: 18919},
								expr: &ruleRefExpr{
									pos:  position{line: 562, col: 35, offset: 18920},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 562, col: 54, offset: 18939},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 569, col: 1, offset: 19128},
			expr: &actionExpr{
				pos: position{line: 569, col: 18, offset: 19145},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 569, col: 18, offset: 19145},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 569, col: 18, offset: 19145},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 569, col: 24, offset: 19151},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 569, col: 24, offset: 19151},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 569, col: 24, offset: 19151},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 569, col: 36, offset: 19163},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 569, col: 42, offset: 19169},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 569, col: 56, offset: 19183},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 569, col: 74, offset: 19201},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 571, col: 8, offset: 19350},
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 8, offset: 19350},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 571, col: 15, offset: 19357},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 575, col: 1, offset: 19413},
			expr: &actionExpr{
				pos: position{line: 575, col: 26, offset: 19438},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 575, col: 26, offset: 19438},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 575, col: 26, offset: 19438},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 575, col: 30, offset: 19442},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 575, col: 36, offset: 19448},
								expr: &choiceExpr{
									pos: position{line: 575, col: 37, offset: 19449},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 575, col: 37, offset: 19449},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 575, col: 59, offset: 19471},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 575, col: 80, offset: 19492},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 575, col: 99, offset: 19511},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 579, col: 1, offset: 19587},
			expr: &actionExpr{
				pos: position{line: 579, col: 24, offset: 19610},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 579, col: 24, offset: 19610},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 579, col: 24, offset: 19610},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 579, col: 33, offset: 19619},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 579, col: 40, offset: 19626},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 579, col: 66, offset: 19652},
							expr: &litMatcher{
								pos:        position{line: 579, col: 66, offset: 19652},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 583, col: 1, offset: 19715},
			expr: &actionExpr{
				pos: position{line: 583, col: 29, offset: 19743},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 583, col: 29, offset: 19743},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 583, col: 29, offset: 19743},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 583, col: 36, offset: 19750},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 583, col: 36, offset: 19750},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 584, col: 11, offset: 19868},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 585, col: 11, offset: 19905},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 586, col: 11, offset: 19932},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 587, col: 11, offset: 19965},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 588, col: 11, offset: 19998},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 589, col: 11, offset: 20026},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 589, col: 31, offset: 20046},
							expr: &ruleRefExpr{
								pos:  position{line: 589, col: 31, offset: 20046},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 589, col: 39, offset: 20054},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 589, col: 39, offset: 20054},
									expr: &litMatcher{
										pos:        position{line: 589, col: 40, offset: 20055},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 589, col: 46, offset: 20061},
									expr: &litMatcher{
										pos:        position{line: 589, col: 47, offset: 20062},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 593, col: 1, offset: 20098},
			expr: &actionExpr{
				pos: position{line: 593, col: 23, offset: 20120},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 593, col: 23, offset: 20120},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 593, col: 23, offset: 20120},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 593, col: 30, offset: 20127},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 593, col: 30, offset: 20127},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 593, col: 47, offset: 20144},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 594, col: 5, offset: 20167},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 594, col: 12, offset: 20174},
								expr: &actionExpr{
									pos: position{line: 594, col: 13, offset: 20175},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 594, col: 13, offset: 20175},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 594, col: 13, offset: 20175},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 594, col: 17, offset: 20179},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 594, col: 24, offset: 20186},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 594, col: 24, offset: 20186},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 594, col: 41, offset: 20203},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 600, col: 1, offset: 20347},
			expr: &actionExpr{
				pos: position{line: 600, col: 29, offset: 20375},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 600, col: 29, offset: 20375},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 600, col: 29, offset: 20375},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 600, col: 34, offset: 20380},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 600, col: 41, offset: 20387},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 600, col: 41, offset: 20387},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 600, col: 58, offset: 20404},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 601, col: 5, offset: 20427},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 601, col: 12, offset: 20434},
								expr: &actionExpr{
									pos: position{line: 601, col: 13, offset: 20435},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 601, col: 13, offset: 20435},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 601, col: 13, offset: 20435},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 601, col: 17, offset: 20439},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 601, col: 24, offset: 20446},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 601, col: 24, offset: 20446},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 601, col: 41, offset: 20463},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 603, col: 9, offset: 20518},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 607, col: 1, offset: 20612},
			expr: &actionExpr{
				pos: position{line: 607, col: 19, offset: 20630},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 607, col: 19, offset: 20630},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 607, col: 19, offset: 20630},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 26, offset: 20637},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 607, col: 34, offset: 20645},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 607, col: 39, offset: 20650},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 44, offset: 20655},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 611, col: 1, offset: 20747},
			expr: &actionExpr{
				pos: position{line: 611, col: 25, offset: 20771},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 611, col: 25, offset: 20771},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 611, col: 25, offset: 20771},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 611, col: 30, offset: 20776},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 37, offset: 20783},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 611, col: 45, offset: 20791},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 611, col: 50, offset: 20796},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 55, offset: 20801},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 611, col: 63, offset: 20809},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 615, col: 1, offset: 20898},
			expr: &actionExpr{
				pos: position{line: 615, col: 20, offset: 20917},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 615, col: 20, offset: 20917},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 615, col: 32, offset: 20929},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 619, col: 1, offset: 21028},
			expr: &actionExpr{
				pos: position{line: 619, col: 26, offset: 21053},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 619, col: 26, offset: 21053},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 619, col: 26, offset: 21053},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 619, col: 31, offset: 21058},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 619, col: 43, offset: 21070},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 619, col: 51, offset: 21078},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 623, col: 1, offset: 21174},
			expr: &actionExpr{
				pos: position{line: 623, col: 23, offset: 21196},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 623, col: 23, offset: 21196},
					expr: &charClassMatcher{
						pos:        position{line: 623, col: 23, offset: 21196},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 627, col: 1, offset: 21245},
			expr: &actionExpr{
				pos: position{line: 627, col: 23, offset: 21267},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 627, col: 23, offset: 21267},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 627, col: 24, offset: 21268},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 627, col: 24, offset: 21268},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 627, col: 34, offset: 21278},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 627, col: 42, offset: 21286},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 627, col: 48, offset: 21292},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 627, col: 73, offset: 21317},
							expr: &litMatcher{
								pos:        position{line: 627, col: 73, offset: 21317},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 631, col: 1, offset: 21470},
			expr: &actionExpr{
				pos: position{line: 631, col: 28, offset: 21497},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 631, col: 28, offset: 21497},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 631, col: 28, offset: 21497},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 631, col: 35, offset: 21504},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 631, col: 54, offset: 21523},
							expr: &ruleRefExpr{
								pos:  position{line: 631, col: 54, offset: 21523},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 631, col: 62, offset: 21531},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 631, col: 62, offset: 21531},
									expr: &litMatcher{
										pos:        position{line: 631, col: 63, offset: 21532},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 631, col: 69, offset: 21538},
									expr: &litMatcher{
										pos:        position{line: 631, col: 70, offset: 21539},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 635, col: 1, offset: 21575},
			expr: &actionExpr{
				pos: position{line: 635, col: 22, offset: 21596},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 635, col: 22, offset: 21596},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 635, col: 22, offset: 21596},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 29, offset: 21603},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 636, col: 5, offset: 21618},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 636, col: 12, offset: 21625},
								expr: &actionExpr{
									pos: position{line: 636, col: 13, offset: 21626},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 636, col: 13, offset: 21626},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 636, col: 13, offset: 21626},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 636, col: 17, offset: 21630},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 636, col: 24, offset: 21637},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 642, col: 1, offset: 21774},
			expr: &choiceExpr{
				pos: position{line: 642, col: 13, offset: 21786},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 642, col: 13, offset: 21786},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 642, col: 13, offset: 21786},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 642, col: 18, offset: 21791},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 642, col: 18, offset: 21791},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 642, col: 30, offset: 21803},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 644, col: 5, offset: 21873},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 644, col: 5, offset: 21873},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 644, col: 5, offset: 21873},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 644, col: 9, offset: 21877},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 644, col: 14, offset: 21882},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 644, col: 14, offset: 21882},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 644, col: 26, offset: 21894},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 648, col: 1, offset: 21966},
			expr: &actionExpr{
				pos: position{line: 648, col: 16, offset: 21981},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 648, col: 16, offset: 21981},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 648, col: 16, offset: 21981},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 648, col: 23, offset: 21988},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 648, col: 23, offset: 21988},
									expr: &litMatcher{
										pos:        position{line: 648, col: 24, offset: 21989},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 651, col: 5, offset: 22046},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 659, col: 1, offset: 22296},
			expr: &zeroOrMoreExpr{
				pos: position{line: 659, col: 24, offset: 22319},
				expr: &choiceExpr{
					pos: position{line: 659, col: 25, offset: 22320},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 659, col: 25, offset: 22320},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 659, col: 41, offset: 22336},
							name: "VerbatimFileLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 661, col: 1, offset: 22358},
			expr: &actionExpr{
				pos: position{line: 661, col: 21, offset: 22378},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 661, col: 21, offset: 22378},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 661, col: 21, offset: 22378},
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 22, offset: 22379},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 661, col: 26, offset: 22383},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 661, col: 35, offset: 22392},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 661, col: 35, offset: 22392},
									expr: &charClassMatcher{
										pos:        position{line: 661, col: 35, offset: 22392},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 663, col: 12, offset: 22456},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 670, col: 1, offset: 22662},
			expr: &actionExpr{
				pos: position{line: 670, col: 21, offset: 22682},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 670, col: 21, offset: 22682},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 670, col: 21, offset: 22682},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 670, col: 29, offset: 22690},
								expr: &choiceExpr{
									pos: position{line: 670, col: 30, offset: 22691},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 670, col: 30, offset: 22691},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 670, col: 53, offset: 22714},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 670, col: 74, offset: 22735},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 670, col: 74, offset: 22735,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 670, col: 107, offset: 22768},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 674, col: 1, offset: 22843},
			expr: &actionExpr{
				pos: position{line: 674, col: 25, offset: 22867},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 674, col: 25, offset: 22867},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 674, col: 25, offset: 22867},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 674, col: 33, offset: 22875},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 674, col: 38, offset: 22880},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 674, col: 38, offset: 22880},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 674, col: 78, offset: 22920},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 678, col: 1, offset: 22989},
			expr: &actionExpr{
				pos: position{line: 678, col: 23, offset: 23011},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 678, col: 23, offset: 23011},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 678, col: 23, offset: 23011},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 678, col: 31, offset: 23019},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 678, col: 36, offset: 23024},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 678, col: 36, offset: 23024},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 678, col: 76, offset: 23064},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 685, col: 1, offset: 23235},
			expr: &choiceExpr{
				pos: position{line: 685, col: 18, offset: 23252},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 685, col: 18, offset: 23252},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 685, col: 18, offset: 23252},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 27, offset: 23261},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 687, col: 9, offset: 23320},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 687, col: 9, offset: 23320},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 687, col: 15, offset: 23326},
								expr: &ruleRefExpr{
									pos:  position{line: 687, col: 16, offset: 23327},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 691, col: 1, offset: 23423},
			expr: &actionExpr{
				pos: position{line: 691, col: 22, offset: 23444},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 691, col: 22, offset: 23444},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 691, col: 22, offset: 23444},
							expr: &ruleRefExpr{
								pos:  position{line: 691, col: 23, offset: 23445},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 692, col: 5, offset: 23454},
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 6, offset: 23455},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 693, col: 5, offset: 23471},
							expr: &ruleRefExpr{
								pos:  position{line: 693, col: 6, offset: 23472},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 694, col: 5, offset: 23495},
							expr: &ruleRefExpr{
								pos:  position{line: 694, col: 6, offset: 23496},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 695, col: 5, offset: 23523},
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 6, offset: 23524},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 696, col: 5, offset: 23553},
							expr: &ruleRefExpr{
								pos:  position{line: 696, col: 6, offset: 23554},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 697, col: 5, offset: 23581},
							expr: &ruleRefExpr{
								pos:  position{line: 697, col: 6, offset: 23582},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 698, col: 5, offset: 23608},
							expr: &ruleRefExpr{
								pos:  position{line: 698, col: 6, offset: 23609},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 699, col: 5, offset: 23631},
							expr: &ruleRefExpr{
								pos:  position{line: 699, col: 6, offset: 23632},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 700, col: 5, offset: 23652},
							expr: &ruleRefExpr{
								pos:  position{line: 700, col: 6, offset: 23653},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 701, col: 5, offset: 23681},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 701, col: 11, offset: 23687},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 701, col: 11, offset: 23687},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 701, col: 20, offset: 23696},
										expr: &ruleRefExpr{
											pos:  position{line: 701, col: 21, offset: 23697},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 703, col: 12, offset: 23798},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 707, col: 1, offset: 23841},
			expr: &seqExpr{
				pos: position{line: 707, col: 25, offset: 23865},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 707, col: 25, offset: 23865},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 707, col: 29, offset: 23869},
						expr: &ruleRefExpr{
							pos:  position{line: 707, col: 29, offset: 23869},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 707, col: 36, offset: 23876},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 709, col: 1, offset: 23950},
			expr: &actionExpr{
				pos: position{line: 709, col: 29, offset: 23978},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 709, col: 29, offset: 23978},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 709, col: 29, offset: 23978},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 709, col: 50, offset: 23999},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 709, col: 58, offset: 24007},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 713, col: 1, offset: 24117},
			expr: &actionExpr{
				pos: position{line: 713, col: 29, offset: 24145},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 713, col: 29, offset: 24145},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 713, col: 29, offset: 24145},
							expr: &ruleRefExpr{
								pos:  position{line: 713, col: 30, offset: 24146},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 714, col: 5, offset: 24156},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 714, col: 14, offset: 24165},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 714, col: 14, offset: 24165},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 715, col: 11, offset: 24191},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 716, col: 11, offset: 24216},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 717, col: 11, offset: 24238},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 718, col: 11, offset: 24264},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 719, col: 11, offset: 24289},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 720, col: 11, offset: 24317},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 721, col: 11, offset: 24347},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 723, col: 11, offset: 24414},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 724, col: 11, offset: 24466},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 725, col: 11, offset: 24491},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 726, col: 11, offset: 24524},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 727, col: 11, offset: 24551},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 728, col: 11, offset: 24589},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 729, col: 11, offset: 24615},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 736, col: 1, offset: 24785},
			expr: &actionExpr{
				pos: position{line: 736, col: 20, offset: 24804},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 736, col: 20, offset: 24804},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 736, col: 20, offset: 24804},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 736, col: 26, offset: 24810},
								expr: &ruleRefExpr{
									pos:  position{line: 736, col: 27, offset: 24811},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 736, col: 40, offset: 24824},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 736, col: 48, offset: 24832},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 736, col: 71, offset: 24855},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 736, col: 80, offset: 24864},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 740, col: 1, offset: 25003},
			expr: &actionExpr{
				pos: position{line: 741, col: 5, offset: 25034},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 741, col: 5, offset: 25034},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 741, col: 5, offset: 25034},
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 5, offset: 25034},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 741, col: 12, offset: 25041},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 743, col: 9, offset: 25106},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 743, col: 9, offset: 25106},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 743, col: 9, offset: 25106},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 743, col: 9, offset: 25106},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 743, col: 16, offset: 25113},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 743, col: 16, offset: 25113},
															expr: &litMatcher{
																pos:        position{line: 743, col: 17, offset: 25114},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 747, col: 9, offset: 25218},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 766, col: 11, offset: 25954},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 766, col: 11, offset: 25954},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 766, col: 11, offset: 25954},
													expr: &charClassMatcher{
														pos:        position{line: 766, col: 12, offset: 25955},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 766, col: 20, offset: 25963},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 768, col: 13, offset: 26076},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 768, col: 13, offset: 26076},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 768, col: 14, offset: 26077},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 768, col: 21, offset: 26084},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 770, col: 13, offset: 26200},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 770, col: 13, offset: 26200},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 770, col: 14, offset: 26201},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 770, col: 21, offset: 26208},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 772, col: 13, offset: 26324},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 772, col: 13, offset: 26324},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 772, col: 13, offset: 26324},
													expr: &charClassMatcher{
														pos:        position{line: 772, col: 14, offset: 26325},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 772, col: 22, offset: 26333},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 774, col: 13, offset: 26449},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 774, col: 13, offset: 26449},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 774, col: 13, offset: 26449},
													expr: &charClassMatcher{
														pos:        position{line: 774, col: 14, offset: 26450},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 774, col: 22, offset: 26458},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 776, col: 12, offset: 26573},
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 12, offset: 26573},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 780, col: 1, offset: 26612},
			expr: &actionExpr{
				pos: position{line: 780, col: 27, offset: 26638},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 780, col: 27, offset: 26638},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 780, col: 37, offset: 26648},
						expr: &ruleRefExpr{
							pos:  position{line: 780, col: 37, offset: 26648},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 787, col: 1, offset: 26855},
			expr: &actionExpr{
				pos: position{line: 787, col: 22, offset: 26876},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 787, col: 22, offset: 26876},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 787, col: 22, offset: 26876},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 787, col: 28, offset: 26882},
								expr: &ruleRefExpr{
									pos:  position{line: 787, col: 29, offset: 26883},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 787, col: 42, offset: 26896},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 787, col: 50, offset: 26904},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 787, col: 75, offset: 26929},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 787, col: 86, offset: 26940},
								expr: &ruleRefExpr{
									pos:  position{line: 787, col: 87, offset: 26941},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 787, col: 117, offset: 26971},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 787, col: 126, offset: 26980},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 791, col: 1, offset: 27137},
			expr: &actionExpr{
				pos: position{line: 792, col: 5, offset: 27170},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 792, col: 5, offset: 27170},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 792, col: 5, offset: 27170},
							expr: &ruleRefExpr{
								pos:  position{line: 792, col: 5, offset: 27170},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 792, col: 12, offset: 27177},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 792, col: 20, offset: 27185},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 794, col: 9, offset: 27244},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 794, col: 9, offset: 27244},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 794, col: 9, offset: 27244},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 794, col: 16, offset: 27251},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 794, col: 16, offset: 27251},
															expr: &litMatcher{
																pos:        position{line: 794, col: 17, offset: 27252},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 798, col: 9, offset: 27356},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 815, col: 14, offset: 28080},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 815, col: 21, offset: 28087},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 815, col: 22, offset: 28088},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 817, col: 13, offset: 28176},
							expr: &ruleRefExpr{
								pos:  position{line: 817, col: 13, offset: 28176},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 821, col: 1, offset: 28216},
			expr: &actionExpr{
				pos: position{line: 821, col: 32, offset: 28247},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 821, col: 32, offset: 28247},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 821, col: 32, offset: 28247},
							expr: &litMatcher{
								pos:        position{line: 821, col: 33, offset: 28248},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 821, col: 37, offset: 28252},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 822, col: 7, offset: 28267},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 822, col: 7, offset: 28267},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 822, col: 7, offset: 28267},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 823, col: 7, offset: 28313},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 823, col: 7, offset: 28313},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 824, col: 7, offset: 28357},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 824, col: 7, offset: 28357},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 825, col: 7, offset: 28400},
							expr: &ruleRefExpr{
								pos:  position{line: 825, col: 7, offset: 28400},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 829, col: 1, offset: 28446},
			expr: &actionExpr{
				pos: position{line: 829, col: 29, offset: 28474},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 829, col: 29, offset: 28474},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 829, col: 39, offset: 28484},
						expr: &ruleRefExpr{
							pos:  position{line: 829, col: 39, offset: 28484},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 836, col: 1, offset: 28807},
			expr: &actionExpr{
				pos: position{line: 836, col: 20, offset: 28826},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 836, col: 20, offset: 28826},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 836, col: 20, offset: 28826},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 836, col: 26, offset: 28832},
								expr: &ruleRefExpr{
									pos:  position{line: 836, col: 27, offset: 28833},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 836, col: 40, offset: 28846},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 836, col: 46, offset: 28852},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 836, col: 75, offset: 28881},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 836, col: 86, offset: 28892},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 836, col: 112, offset: 28918},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 836, col: 124, offset: 28930},
								expr: &ruleRefExpr{
									pos:  position{line: 836, col: 125, offset: 28931},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 840, col: 1, offset: 29076},
			expr: &seqExpr{
				pos: position{line: 840, col: 26, offset: 29101},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 840, col: 26, offset: 29101},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 840, col: 54, offset: 29129},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 842, col: 1, offset: 29157},
			expr: &choiceExpr{
				pos: position{line: 842, col: 33, offset: 29189},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 842, col: 33, offset: 29189},
						expr: &charClassMatcher{
							pos:        position{line: 842, col: 33, offset: 29189},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 842, col: 45, offset: 29201},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 842, col: 45, offset: 29201},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 842, col: 49, offset: 29205},
								expr: &litMatcher{
									pos:        position{line: 842, col: 50, offset: 29206},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 843, col: 1, offset: 29211},
			expr: &actionExpr{
				pos: position{line: 843, col: 32, offset: 29242},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 843, col: 32, offset: 29242},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 843, col: 42, offset: 29252},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 843, col: 42, offset: 29252},
							expr: &ruleRefExpr{
								pos:  position{line: 843, col: 42, offset: 29252},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 849, col: 1, offset: 29413},
			expr: &actionExpr{
				pos: position{line: 849, col: 24, offset: 29436},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 849, col: 24, offset: 29436},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 849, col: 33, offset: 29445},
						expr: &seqExpr{
							pos: position{line: 849, col: 34, offset: 29446},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 849, col: 34, offset: 29446},
									expr: &ruleRefExpr{
										pos:  position{line: 849, col: 35, offset: 29447},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 849, col: 43, offset: 29455},
									expr: &litMatcher{
										pos:        position{line: 849, col: 44, offset: 29456},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 849, col: 49, offset: 29461},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 853, col: 1, offset: 29592},
			expr: &actionExpr{
				pos: position{line: 853, col: 31, offset: 29622},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 853, col: 31, offset: 29622},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 853, col: 40, offset: 29631},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 853, col: 40, offset: 29631},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 854, col: 11, offset: 29647},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 855, col: 11, offset: 29697},
								expr: &ruleRefExpr{
									pos:  position{line: 855, col: 11, offset: 29697},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 856, col: 11, offset: 29716},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 857, col: 11, offset: 29742},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 858, col: 11, offset: 29772},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 859, col: 11, offset: 29793},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 860, col: 11, offset: 29822},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 861, col: 11, offset: 29844},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 862, col: 11, offset: 29868},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 863, col: 11, offset: 29884},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 864, col: 11, offset: 29910},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 865, col: 11, offset: 29934},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 866, col: 11, offset: 29956},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 867, col: 11, offset: 29974},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 868, col: 11, offset: 30007},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 869, col: 11, offset: 30036},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 873, col: 1, offset: 30079},
			expr: &actionExpr{
				pos: position{line: 874, col: 5, offset: 30113},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 874, col: 5, offset: 30113},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 874, col: 5, offset: 30113},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 874, col: 16, offset: 30124},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 874, col: 16, offset: 30124},
									expr: &litMatcher{
										pos:        position{line: 874, col: 17, offset: 30125},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 877, col: 5, offset: 30186},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 881, col: 6, offset: 30366},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 881, col: 6, offset: 30366},
									expr: &choiceExpr{
										pos: position{line: 881, col: 7, offset: 30367},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 881, col: 7, offset: 30367},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 881, col: 15, offset: 30375},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 881, col: 27, offset: 30387},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 885, col: 1, offset: 30431},
			expr: &actionExpr{
				pos: position{line: 885, col: 31, offset: 30461},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 885, col: 31, offset: 30461},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 885, col: 40, offset: 30470},
						expr: &ruleRefExpr{
							pos:  position{line: 885, col: 41, offset: 30471},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 892, col: 1, offset: 30669},
			expr: &choiceExpr{
				pos: position{line: 892, col: 19, offset: 30687},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 892, col: 19, offset: 30687},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 892, col: 19, offset: 30687},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 894, col: 9, offset: 30735},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 894, col: 9, offset: 30735},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 896, col: 9, offset: 30785},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 896, col: 9, offset: 30785},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 898, col: 9, offset: 30845},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 898, col: 9, offset: 30845},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 900, col: 9, offset: 30901},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 900, col: 9, offset: 30901},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 909, col: 1, offset: 31217},
			expr: &choiceExpr{
				pos: position{line: 911, col: 5, offset: 31266},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 911, col: 5, offset: 31266},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 911, col: 5, offset: 31266},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 911, col: 5, offset: 31266},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 911, col: 16, offset: 31277},
										expr: &ruleRefExpr{
											pos:  position{line: 911, col: 17, offset: 31278},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 911, col: 30, offset: 31291},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 911, col: 33, offset: 31294},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 911, col: 49, offset: 31310},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 911, col: 54, offset: 31315},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 911, col: 60, offset: 31321},
										expr: &ruleRefExpr{
											pos:  position{line: 911, col: 61, offset: 31322},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 915, col: 5, offset: 31507},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 915, col: 5, offset: 31507},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 915, col: 5, offset: 31507},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 915, col: 16, offset: 31518},
										expr: &ruleRefExpr{
											pos:  position{line: 915, col: 17, offset: 31519},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 915, col: 30, offset: 31532},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 915, col: 35, offset: 31537},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 915, col: 44, offset: 31546},
										name: "MarkdownQuoteBlockVerbatimContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 919, col: 5, offset: 31745},
						run: (*parser).callonParagraph21,
						expr: &seqExpr{
							pos: position{line: 919, col: 5, offset: 31745},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 919, col: 5, offset: 31745},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 919, col: 16, offset: 31756},
										expr: &ruleRefExpr{
											pos:  position{line: 919, col: 17, offset: 31757},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 919, col: 30, offset: 31770},
									run: (*parser).callonParagraph26,
								},
								&notExpr{
									pos: position{line: 926, col: 7, offset: 32056},
									expr: &ruleRefExpr{
										pos:  position{line: 926, col: 8, offset: 32057},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 926, col: 23, offset: 32072},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 926, col: 32, offset: 32081},
										name: "OpenPassthroughParagraphContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 930, col: 5, offset: 32282},
						run: (*parser).callonParagraph31,
						expr: &seqExpr{
							pos: position{line: 930, col: 5, offset: 32282},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 930, col: 5, offset: 32282},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 930, col: 16, offset: 32293},
										expr: &ruleRefExpr{
											pos:  position{line: 930, col: 17, offset: 32294},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 930, col: 30, offset: 32307},
									expr: &ruleRefExpr{
										pos:  position{line: 930, col: 31, offset: 32308},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 930, col: 46, offset: 32323},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 930, col: 52, offset: 32329},
										expr: &ruleRefExpr{
											pos:  position{line: 930, col: 53, offset: 32330},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockVerbatimContent",
			pos:  position{line: 934, col: 1, offset: 32430},
			expr: &oneOrMoreExpr{
				pos: position{line: 934, col: 38, offset: 32467},
				expr: &actionExpr{
					pos: position{line: 934, col: 39, offset: 32468},
					run: (*parser).callonMarkdownQuoteBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 934, col: 39, offset: 32468},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 934, col: 39, offset: 32468},
								expr: &ruleRefExpr{
									pos:  position{line: 934, col: 40, offset: 32469},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 934, col: 50, offset: 32479},
								expr: &litMatcher{
									pos:        position{line: 934, col: 50, offset: 32479},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 934, col: 56, offset: 32485},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 934, col: 65, offset: 32494},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 938, col: 1, offset: 32639},
			expr: &actionExpr{
				pos: position{line: 938, col: 34, offset: 32672},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 938, col: 34, offset: 32672},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 938, col: 34, offset: 32672},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 938, col: 40, offset: 32678},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 938, col: 48, offset: 32686},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 938, col: 49, offset: 32687},
									expr: &charClassMatcher{
										pos:        position{line: 938, col: 49, offset: 32687},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 940, col: 8, offset: 32739},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 944, col: 1, offset: 32775},
			expr: &oneOrMoreExpr{
				pos: position{line: 944, col: 36, offset: 32810},
				expr: &actionExpr{
					pos: position{line: 944, col: 37, offset: 32811},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 944, col: 37, offset: 32811},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 944, col: 37, offset: 32811},
								expr: &ruleRefExpr{
									pos:  position{line: 944, col: 38, offset: 32812},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 944, col: 48, offset: 32822},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 944, col: 57, offset: 32831},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 949, col: 1, offset: 33049},
			expr: &actionExpr{
				pos: position{line: 949, col: 20, offset: 33068},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 949, col: 20, offset: 33068},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 949, col: 20, offset: 33068},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 949, col: 31, offset: 33079},
								expr: &ruleRefExpr{
									pos:  position{line: 949, col: 32, offset: 33080},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 950, col: 5, offset: 33099},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 958, col: 5, offset: 33393},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 958, col: 16, offset: 33404},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 959, col: 5, offset: 33428},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 959, col: 16, offset: 33439},
								expr: &ruleRefExpr{
									pos:  position{line: 959, col: 17, offset: 33440},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 963, col: 1, offset: 33578},
			expr: &actionExpr{
				pos: position{line: 964, col: 5, offset: 33606},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 964, col: 5, offset: 33606},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 964, col: 5, offset: 33606},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 964, col: 15, offset: 33616},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 964, col: 15, offset: 33616},
										name: "Word",
									},
									&zeroOrMoreExpr{
										pos: position{line: 964, col: 20, offset: 33621},
										expr: &ruleRefExpr{
											pos:  position{line: 964, col: 20, offset: 33621},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 964, col: 36, offset: 33637},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 968, col: 1, offset: 33712},
			expr: &actionExpr{
				pos: position{line: 968, col: 23, offset: 33734},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 968, col: 23, offset: 33734},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 968, col: 33, offset: 33744},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 973, col: 1, offset: 33869},
			expr: &choiceExpr{
				pos: position{line: 975, col: 5, offset: 33927},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 975, col: 5, offset: 33927},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 975, col: 5, offset: 33927},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 975, col: 5, offset: 33927},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 975, col: 16, offset: 33938},
										expr: &ruleRefExpr{
											pos:  position{line: 975, col: 17, offset: 33939},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 975, col: 30, offset: 33952},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 975, col: 33, offset: 33955},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 975, col: 49, offset: 33971},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 975, col: 54, offset: 33976},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 975, col: 61, offset: 33983},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 979, col: 5, offset: 34187},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 979, col: 5, offset: 34187},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 979, col: 5, offset: 34187},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 979, col: 16, offset: 34198},
										expr: &ruleRefExpr{
											pos:  position{line: 979, col: 17, offset: 34199},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 979, col: 30, offset: 34212},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 979, col: 37, offset: 34219},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 983, col: 1, offset: 34324},
			expr: &actionExpr{
				pos: position{line: 983, col: 28, offset: 34351},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 983, col: 28, offset: 34351},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 983, col: 28, offset: 34351},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 983, col: 39, offset: 34362},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 983, col: 59, offset: 34382},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 983, col: 70, offset: 34393},
								expr: &seqExpr{
									pos: position{line: 983, col: 71, offset: 34394},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 983, col: 71, offset: 34394},
											expr: &ruleRefExpr{
												pos:  position{line: 983, col: 72, offset: 34395},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 983, col: 93, offset: 34416},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 987, col: 1, offset: 34526},
			expr: &choiceExpr{
				pos: position{line: 989, col: 5, offset: 34580},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 989, col: 5, offset: 34580},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 989, col: 5, offset: 34580},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 989, col: 5, offset: 34580},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 989, col: 16, offset: 34591},
										expr: &ruleRefExpr{
											pos:  position{line: 989, col: 17, offset: 34592},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 990, col: 5, offset: 34610},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 997, col: 5, offset: 34822},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 997, col: 8, offset: 34825},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 997, col: 24, offset: 34841},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 997, col: 29, offset: 34846},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 997, col: 35, offset: 34852},
										expr: &ruleRefExpr{
											pos:  position{line: 997, col: 36, offset: 34853},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1001, col: 5, offset: 35049},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 1001, col: 5, offset: 35049},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1001, col: 5, offset: 35049},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1001, col: 16, offset: 35060},
										expr: &ruleRefExpr{
											pos:  position{line: 1001, col: 17, offset: 35061},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1002, col: 5, offset: 35079},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 1009, col: 5, offset: 35291},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 1009, col: 11, offset: 35297},
										expr: &ruleRefExpr{
											pos:  position{line: 1009, col: 12, offset: 35298},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 1013, col: 1, offset: 35403},
			expr: &actionExpr{
				pos: position{line: 1013, col: 19, offset: 35421},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 1013, col: 19, offset: 35421},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1013, col: 19, offset: 35421},
							expr: &ruleRefExpr{
								pos:  position{line: 1013, col: 20, offset: 35422},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1014, col: 5, offset: 35437},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 1014, col: 15, offset: 35447},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1014, col: 15, offset: 35447},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 1014, col: 15, offset: 35447},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 1014, col: 24, offset: 35456},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 1016, col: 9, offset: 35550},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 1016, col: 9, offset: 35550},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1016, col: 9, offset: 35550},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 1016, col: 18, offset: 35559},
														expr: &ruleRefExpr{
															pos:  position{line: 1016, col: 19, offset: 35560},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1016, col: 35, offset: 35576},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1022, col: 1, offset: 35699},
			expr: &actionExpr{
				pos: position{line: 1023, col: 5, offset: 35723},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1023, col: 5, offset: 35723},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1023, col: 14, offset: 35732},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1023, col: 14, offset: 35732},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1024, col: 11, offset: 35784},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 1025, col: 11, offset: 35830},
								expr: &ruleRefExpr{
									pos:  position{line: 1025, col: 11, offset: 35830},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 1026, col: 11, offset: 35849},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1026, col: 11, offset: 35849},
										expr: &ruleRefExpr{
											pos:  position{line: 1026, col: 12, offset: 35850},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 1027, col: 13, offset: 35869},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1027, col: 13, offset: 35869},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1028, col: 15, offset: 35897},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1029, col: 15, offset: 35923},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1030, col: 15, offset: 35945},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1031, col: 15, offset: 35971},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1032, col: 15, offset: 35999},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1033, col: 15, offset: 36020},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1034, col: 15, offset: 36054},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1035, col: 15, offset: 36085},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1036, col: 15, offset: 36116},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1037, col: 15, offset: 36148},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1038, col: 15, offset: 36186},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1039, col: 15, offset: 36217},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1040, col: 15, offset: 36251},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1041, col: 15, offset: 36276},
												name: "ImpliedApostrophe",
											},
											&ruleRefExpr{
												pos:  position{line: 1042, col: 15, offset: 36309},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1049, col: 1, offset: 36539},
			expr: &actionExpr{
				pos: position{line: 1049, col: 14, offset: 36552},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1049, col: 14, offset: 36552},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1049, col: 14, offset: 36552},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1049, col: 20, offset: 36558},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1049, col: 24, offset: 36562},
							expr: &ruleRefExpr{
								pos:  position{line: 1049, col: 24, offset: 36562},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1049, col: 31, offset: 36569},
							expr: &ruleRefExpr{
								pos:  position{line: 1049, col: 32, offset: 36570},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1056, col: 1, offset: 36861},
			expr: &choiceExpr{
				pos: position{line: 1056, col: 15, offset: 36875},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1056, col: 15, offset: 36875},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1056, col: 41, offset: 36901},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1056, col: 65, offset: 36925},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1058, col: 1, offset: 36946},
			expr: &choiceExpr{
				pos: position{line: 1058, col: 32, offset: 36977},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1058, col: 32, offset: 36977},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1058, col: 32, offset: 36977},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1058, col: 36, offset: 36981},
								expr: &litMatcher{
									pos:        position{line: 1058, col: 37, offset: 36982},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1058, col: 43, offset: 36988},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1058, col: 43, offset: 36988},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1058, col: 47, offset: 36992},
								expr: &litMatcher{
									pos:        position{line: 1058, col: 48, offset: 36993},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1058, col: 54, offset: 36999},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1058, col: 54, offset: 36999},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1058, col: 58, offset: 37003},
								expr: &litMatcher{
									pos:        position{line: 1058, col: 59, offset: 37004},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1058, col: 65, offset: 37010},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1058, col: 65, offset: 37010},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1058, col: 69, offset: 37014},
								expr: &litMatcher{
									pos:        position{line: 1058, col: 70, offset: 37015},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1060, col: 1, offset: 37022},
			expr: &choiceExpr{
				pos: position{line: 1060, col: 34, offset: 37055},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1060, col: 34, offset: 37055},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1060, col: 41, offset: 37062},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1060, col: 48, offset: 37069},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1060, col: 55, offset: 37076},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1060, col: 62, offset: 37083},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1060, col: 68, offset: 37089},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1062, col: 1, offset: 37096},
			expr: &actionExpr{
				pos: position{line: 1062, col: 26, offset: 37121},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1062, col: 26, offset: 37121},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1062, col: 32, offset: 37127},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1062, col: 32, offset: 37127},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1063, col: 15, offset: 37163},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1064, col: 15, offset: 37200},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1065, col: 15, offset: 37237},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1066, col: 15, offset: 37278},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1067, col: 15, offset: 37308},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1068, col: 15, offset: 37340},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1072, col: 1, offset: 37498},
			expr: &choiceExpr{
				pos: position{line: 1072, col: 28, offset: 37525},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1072, col: 28, offset: 37525},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1073, col: 15, offset: 37560},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1074, col: 15, offset: 37597},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1075, col: 15, offset: 37634},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1077, col: 1, offset: 37662},
			expr: &choiceExpr{
				pos: position{line: 1077, col: 22, offset: 37683},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1077, col: 22, offset: 37683},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1078, col: 15, offset: 37715},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1079, col: 15, offset: 37748},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1080, col: 15, offset: 37781},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1081, col: 15, offset: 37818},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1082, col: 15, offset: 37855},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1084, col: 1, offset: 37881},
			expr: &choiceExpr{
				pos: position{line: 1084, col: 33, offset: 37913},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1084, col: 33, offset: 37913},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1084, col: 39, offset: 37919},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1084, col: 39, offset: 37919},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1088, col: 1, offset: 38056},
			expr: &actionExpr{
				pos: position{line: 1088, col: 25, offset: 38080},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1088, col: 25, offset: 38080},
					expr: &litMatcher{
						pos:        position{line: 1088, col: 25, offset: 38080},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1092, col: 1, offset: 38125},
			expr: &actionExpr{
				pos: position{line: 1092, col: 25, offset: 38149},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1092, col: 25, offset: 38149},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1092, col: 25, offset: 38149},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1092, col: 30, offset: 38154},
							expr: &litMatcher{
								pos:        position{line: 1092, col: 30, offset: 38154},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1100, col: 1, offset: 38259},
			expr: &choiceExpr{
				pos: position{line: 1100, col: 13, offset: 38271},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1100, col: 13, offset: 38271},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1100, col: 35, offset: 38293},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1102, col: 1, offset: 38362},
			expr: &actionExpr{
				pos: position{line: 1102, col: 24, offset: 38385},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1102, col: 24, offset: 38385},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1102, col: 24, offset: 38385},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1102, col: 30, offset: 38391},
								expr: &ruleRefExpr{
									pos:  position{line: 1102, col: 31, offset: 38392},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1102, col: 49, offset: 38410},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1102, col: 54, offset: 38415},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1102, col: 64, offset: 38425},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1102, col: 93, offset: 38454},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1106, col: 1, offset: 38545},
			expr: &seqExpr{
				pos: position{line: 1106, col: 32, offset: 38576},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1106, col: 32, offset: 38576},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1106, col: 59, offset: 38603},
						expr: &seqExpr{
							pos: position{line: 1106, col: 60, offset: 38604},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1106, col: 60, offset: 38604},
									expr: &litMatcher{
										pos:        position{line: 1106, col: 62, offset: 38606},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1106, col: 69, offset: 38613},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1106, col: 69, offset: 38613},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1106, col: 77, offset: 38621},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1108, col: 1, offset: 38688},
			expr: &choiceExpr{
				pos: position{line: 1108, col: 31, offset: 38718},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1108, col: 31, offset: 38718},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1109, col: 11, offset: 38734},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1109, col: 11, offset: 38734},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1109, col: 19, offset: 38742},
								expr: &ruleRefExpr{
									pos:  position{line: 1109, col: 20, offset: 38743},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1110, col: 11, offset: 38762},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1111, col: 11, offset: 38793},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1112, col: 11, offset: 38817},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1113, col: 11, offset: 38839},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1114, col: 11, offset: 38861},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1115, col: 11, offset: 38886},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1116, col: 11, offset: 38911},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1117, col: 11, offset: 38938},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1118, col: 11, offset: 38956},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1119, col: 11, offset: 38978},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1120, col: 11, offset: 39001},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1121, col: 11, offset: 39017},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1122, col: 11, offset: 39046},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1123, col: 11, offset: 39079},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1124, col: 11, offset: 39108},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1127, col: 1, offset: 39150},
			expr: &choiceExpr{
				pos: position{line: 1128, col: 5, offset: 39195},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1128, col: 5, offset: 39195},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1129, col: 7, offset: 39293},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1129, col: 7, offset: 39293},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1129, col: 7, offset: 39293},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1129, col: 12, offset: 39298},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1133, col: 1, offset: 39465},
			expr: &choiceExpr{
				pos: position{line: 1133, col: 24, offset: 39488},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1133, col: 24, offset: 39488},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1133, col: 24, offset: 39488},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1133, col: 24, offset: 39488},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1133, col: 30, offset: 39494},
										expr: &ruleRefExpr{
											pos:  position{line: 1133, col: 31, offset: 39495},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1133, col: 51, offset: 39515},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1133, col: 51, offset: 39515},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1133, col: 55, offset: 39519},
											expr: &litMatcher{
												pos:        position{line: 1133, col: 56, offset: 39520},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1133, col: 61, offset: 39525},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1133, col: 71, offset: 39535},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1133, col: 100, offset: 39564},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1133, col: 104, offset: 39568},
									expr: &notExpr{
										pos: position{line: 1133, col: 106, offset: 39570},
										expr: &ruleRefExpr{
											pos:  position{line: 1133, col: 107, offset: 39571},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1135, col: 5, offset: 39767},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1135, col: 5, offset: 39767},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1135, col: 5, offset: 39767},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1135, col: 11, offset: 39773},
										expr: &ruleRefExpr{
											pos:  position{line: 1135, col: 12, offset: 39774},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1135, col: 30, offset: 39792},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1135, col: 34, offset: 39796},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1135, col: 44, offset: 39806},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1135, col: 44, offset: 39806},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1135, col: 48, offset: 39810},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1135, col: 77, offset: 39839},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1139, col: 1, offset: 40049},
			expr: &seqExpr{
				pos: position{line: 1139, col: 32, offset: 40080},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1139, col: 32, offset: 40080},
						expr: &ruleRefExpr{
							pos:  position{line: 1139, col: 33, offset: 40081},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1139, col: 39, offset: 40087},
						expr: &ruleRefExpr{
							pos:  position{line: 1139, col: 39, offset: 40087},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1141, col: 1, offset: 40118},
			expr: &choiceExpr{
				pos: position{line: 1141, col: 31, offset: 40148},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1141, col: 31, offset: 40148},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1142, col: 11, offset: 40164},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1142, col: 11, offset: 40164},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1142, col: 19, offset: 40172},
								expr: &ruleRefExpr{
									pos:  position{line: 1142, col: 20, offset: 40173},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1143, col: 11, offset: 40192},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1144, col: 11, offset: 40223},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1145, col: 11, offset: 40247},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1145, col: 11, offset: 40247},
								expr: &ruleRefExpr{
									pos:  position{line: 1145, col: 11, offset: 40247},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1145, col: 18, offset: 40254},
								expr: &seqExpr{
									pos: position{line: 1145, col: 19, offset: 40255},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1145, col: 19, offset: 40255},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1145, col: 23, offset: 40259},
											expr: &litMatcher{
												pos:        position{line: 1145, col: 24, offset: 40260},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 11, offset: 40277},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1147, col: 11, offset: 40299},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1148, col: 11, offset: 40321},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1149, col: 11, offset: 40346},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1150, col: 11, offset: 40371},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 11, offset: 40398},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1152, col: 11, offset: 40416},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1153, col: 11, offset: 40438},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1154, col: 11, offset: 40462},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1155, col: 11, offset: 40480},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1156, col: 11, offset: 40509},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1157, col: 11, offset: 40542},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1158, col: 11, offset: 40571},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1160, col: 1, offset: 40611},
			expr: &choiceExpr{
				pos: position{line: 1161, col: 5, offset: 40656},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1161, col: 5, offset: 40656},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1162, col: 7, offset: 40754},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1162, col: 7, offset: 40754},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1162, col: 7, offset: 40754},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1162, col: 11, offset: 40758},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1166, col: 1, offset: 40925},
			expr: &choiceExpr{
				pos: position{line: 1167, col: 5, offset: 40950},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1167, col: 5, offset: 40950},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1167, col: 5, offset: 40950},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1167, col: 5, offset: 40950},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1167, col: 18, offset: 40963},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1167, col: 40, offset: 40985},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1167, col: 45, offset: 40990},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1167, col: 55, offset: 41000},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1167, col: 84, offset: 41029},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1169, col: 9, offset: 41188},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1169, col: 9, offset: 41188},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1169, col: 9, offset: 41188},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1169, col: 22, offset: 41201},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1169, col: 44, offset: 41223},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1169, col: 49, offset: 41228},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1169, col: 59, offset: 41238},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1169, col: 88, offset: 41267},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1172, col: 9, offset: 41470},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1172, col: 9, offset: 41470},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1172, col: 9, offset: 41470},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1172, col: 22, offset: 41483},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1172, col: 44, offset: 41505},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1172, col: 48, offset: 41509},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1172, col: 58, offset: 41519},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1172, col: 87, offset: 41548},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1180, col: 1, offset: 41764},
			expr: &choiceExpr{
				pos: position{line: 1180, col: 15, offset: 41778},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1180, col: 15, offset: 41778},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1180, col: 39, offset: 41802},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1182, col: 1, offset: 41827},
			expr: &actionExpr{
				pos: position{line: 1182, col: 26, offset: 41852},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1182, col: 26, offset: 41852},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1182, col: 26, offset: 41852},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1182, col: 32, offset: 41858},
								expr: &ruleRefExpr{
									pos:  position{line: 1182, col: 33, offset: 41859},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1182, col: 51, offset: 41877},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1182, col: 56, offset: 41882},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1182, col: 66, offset: 41892},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1182, col: 97, offset: 41923},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1186, col: 1, offset: 42061},
			expr: &seqExpr{
				pos: position{line: 1186, col: 34, offset: 42094},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1186, col: 34, offset: 42094},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1186, col: 63, offset: 42123},
						expr: &seqExpr{
							pos: position{line: 1186, col: 64, offset: 42124},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1186, col: 64, offset: 42124},
									expr: &litMatcher{
										pos:        position{line: 1186, col: 66, offset: 42126},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1186, col: 73, offset: 42133},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1186, col: 73, offset: 42133},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1186, col: 81, offset: 42141},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1188, col: 1, offset: 42210},
			expr: &choiceExpr{
				pos: position{line: 1188, col: 33, offset: 42242},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1188, col: 33, offset: 42242},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1189, col: 11, offset: 42258},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1189, col: 11, offset: 42258},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1189, col: 19, offset: 42266},
								expr: &ruleRefExpr{
									pos:  position{line: 1189, col: 20, offset: 42267},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1190, col: 11, offset: 42286},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1191, col: 11, offset: 42319},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1192, col: 11, offset: 42343},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1193, col: 11, offset: 42363},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1194, col: 11, offset: 42385},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1195, col: 11, offset: 42410},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1196, col: 11, offset: 42435},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1197, col: 11, offset: 42462},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1198, col: 11, offset: 42480},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1199, col: 11, offset: 42502},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 11, offset: 42526},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1201, col: 11, offset: 42543},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 11, offset: 42572},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1203, col: 11, offset: 42601},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1205, col: 1, offset: 42643},
			expr: &choiceExpr{
				pos: position{line: 1206, col: 5, offset: 42690},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1206, col: 5, offset: 42690},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1207, col: 7, offset: 42790},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1207, col: 7, offset: 42790},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1207, col: 7, offset: 42790},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1207, col: 12, offset: 42795},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1211, col: 1, offset: 42964},
			expr: &choiceExpr{
				pos: position{line: 1211, col: 26, offset: 42989},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1211, col: 26, offset: 42989},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1211, col: 26, offset: 42989},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1211, col: 26, offset: 42989},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1211, col: 32, offset: 42995},
										expr: &ruleRefExpr{
											pos:  position{line: 1211, col: 33, offset: 42996},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1211, col: 52, offset: 43015},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1211, col: 52, offset: 43015},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1211, col: 56, offset: 43019},
											expr: &litMatcher{
												pos:        position{line: 1211, col: 57, offset: 43020},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1211, col: 62, offset: 43025},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1211, col: 72, offset: 43035},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1211, col: 103, offset: 43066},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1213, col: 5, offset: 43258},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1213, col: 5, offset: 43258},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1213, col: 5, offset: 43258},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1213, col: 11, offset: 43264},
										expr: &ruleRefExpr{
											pos:  position{line: 1213, col: 12, offset: 43265},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1213, col: 30, offset: 43283},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1213, col: 34, offset: 43287},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1213, col: 44, offset: 43297},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1213, col: 44, offset: 43297},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1213, col: 48, offset: 43301},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1213, col: 79, offset: 43332},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1217, col: 1, offset: 43546},
			expr: &seqExpr{
				pos: position{line: 1217, col: 34, offset: 43579},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1217, col: 34, offset: 43579},
						expr: &ruleRefExpr{
							pos:  position{line: 1217, col: 35, offset: 43580},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1217, col: 41, offset: 43586},
						expr: &ruleRefExpr{
							pos:  position{line: 1217, col: 41, offset: 43586},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1219, col: 1, offset: 43619},
			expr: &choiceExpr{
				pos: position{line: 1219, col: 33, offset: 43651},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1219, col: 33, offset: 43651},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1220, col: 11, offset: 43667},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1220, col: 11, offset: 43667},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1220, col: 19, offset: 43675},
								expr: &ruleRefExpr{
									pos:  position{line: 1220, col: 20, offset: 43676},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1221, col: 11, offset: 43695},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1222, col: 11, offset: 43728},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1223, col: 11, offset: 43752},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1223, col: 11, offset: 43752},
								expr: &ruleRefExpr{
									pos:  position{line: 1223, col: 11, offset: 43752},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1223, col: 18, offset: 43759},
								expr: &seqExpr{
									pos: position{line: 1223, col: 19, offset: 43760},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1223, col: 19, offset: 43760},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1223, col: 23, offset: 43764},
											expr: &litMatcher{
												pos:        position{line: 1223, col: 24, offset: 43765},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1224, col: 11, offset: 43782},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1225, col: 11, offset: 43802},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1226, col: 11, offset: 43824},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1227, col: 11, offset: 43849},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1228, col: 11, offset: 43874},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1229, col: 11, offset: 43901},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 11, offset: 43919},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1231, col: 11, offset: 43941},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1232, col: 11, offset: 43965},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1233, col: 11, offset: 43983},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1234, col: 11, offset: 44013},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1235, col: 11, offset: 44046},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1236, col: 11, offset: 44075},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1238, col: 1, offset: 44117},
			expr: &choiceExpr{
				pos: position{line: 1239, col: 5, offset: 44164},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1239, col: 5, offset: 44164},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1240, col: 7, offset: 44264},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1240, col: 7, offset: 44264},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1240, col: 7, offset: 44264},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1240, col: 11, offset: 44268},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1244, col: 1, offset: 44438},
			expr: &choiceExpr{
				pos: position{line: 1245, col: 5, offset: 44465},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1245, col: 5, offset: 44465},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1245, col: 5, offset: 44465},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1245, col: 5, offset: 44465},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1245, col: 18, offset: 44478},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1245, col: 40, offset: 44500},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1245, col: 45, offset: 44505},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1245, col: 55, offset: 44515},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1245, col: 86, offset: 44546},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1247, col: 9, offset: 44705},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1247, col: 9, offset: 44705},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1247, col: 9, offset: 44705},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1247, col: 22, offset: 44718},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1247, col: 44, offset: 44740},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1247, col: 49, offset: 44745},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1247, col: 59, offset: 44755},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1247, col: 90, offset: 44786},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1250, col: 9, offset: 44989},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1250, col: 9, offset: 44989},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1250, col: 9, offset: 44989},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1250, col: 22, offset: 45002},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1250, col: 44, offset: 45024},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1250, col: 48, offset: 45028},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1250, col: 58, offset: 45038},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1250, col: 89, offset: 45069},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1257, col: 1, offset: 45286},
			expr: &choiceExpr{
				pos: position{line: 1257, col: 18, offset: 45303},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1257, col: 18, offset: 45303},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 45, offset: 45330},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1259, col: 1, offset: 45358},
			expr: &actionExpr{
				pos: position{line: 1259, col: 29, offset: 45386},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1259, col: 29, offset: 45386},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1259, col: 29, offset: 45386},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1259, col: 35, offset: 45392},
								expr: &ruleRefExpr{
									pos:  position{line: 1259, col: 36, offset: 45393},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1259, col: 54, offset: 45411},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1259, col: 59, offset: 45416},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1259, col: 69, offset: 45426},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1259, col: 103, offset: 45460},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1263, col: 1, offset: 45601},
			expr: &seqExpr{
				pos: position{line: 1263, col: 37, offset: 45637},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1263, col: 37, offset: 45637},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1263, col: 69, offset: 45669},
						expr: &seqExpr{
							pos: position{line: 1263, col: 70, offset: 45670},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1263, col: 70, offset: 45670},
									expr: &litMatcher{
										pos:        position{line: 1263, col: 72, offset: 45672},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1263, col: 79, offset: 45679},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1263, col: 79, offset: 45679},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1263, col: 87, offset: 45687},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1265, col: 1, offset: 45758},
			expr: &choiceExpr{
				pos: position{line: 1265, col: 36, offset: 45793},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1265, col: 36, offset: 45793},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1266, col: 11, offset: 45809},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1266, col: 11, offset: 45809},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1266, col: 19, offset: 45817},
								expr: &ruleRefExpr{
									pos:  position{line: 1266, col: 20, offset: 45818},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1267, col: 11, offset: 45837},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1268, col: 11, offset: 45855},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1269, col: 11, offset: 45891},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1270, col: 11, offset: 45915},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1271, col: 11, offset: 45935},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1272, col: 11, offset: 45957},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1273, col: 11, offset: 45979},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1274, col: 11, offset: 46004},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1275, col: 11, offset: 46031},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1276, col: 11, offset: 46053},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1277, col: 11, offset: 46076},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1278, col: 11, offset: 46092},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1279, col: 11, offset: 46122},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1280, col: 11, offset: 46151},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1282, col: 1, offset: 46196},
			expr: &choiceExpr{
				pos: position{line: 1283, col: 5, offset: 46246},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1283, col: 5, offset: 46246},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1284, col: 7, offset: 46349},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1284, col: 7, offset: 46349},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1284, col: 7, offset: 46349},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1284, col: 12, offset: 46354},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1288, col: 1, offset: 46526},
			expr: &choiceExpr{
				pos: position{line: 1288, col: 29, offset: 46554},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1288, col: 29, offset: 46554},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1288, col: 29, offset: 46554},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1288, col: 29, offset: 46554},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1288, col: 35, offset: 46560},
										expr: &ruleRefExpr{
											pos:  position{line: 1288, col: 36, offset: 46561},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1288, col: 55, offset: 46580},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1288, col: 55, offset: 46580},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1288, col: 59, offset: 46584},
											expr: &litMatcher{
												pos:        position{line: 1288, col: 60, offset: 46585},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1288, col: 65, offset: 46590},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1288, col: 75, offset: 46600},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1288, col: 109, offset: 46634},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1290, col: 5, offset: 46829},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1290, col: 5, offset: 46829},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1290, col: 5, offset: 46829},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1290, col: 11, offset: 46835},
										expr: &ruleRefExpr{
											pos:  position{line: 1290, col: 12, offset: 46836},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1290, col: 30, offset: 46854},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1290, col: 34, offset: 46858},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1290, col: 44, offset: 46868},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1290, col: 44, offset: 46868},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1290, col: 48, offset: 46872},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1290, col: 82, offset: 46906},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1294, col: 1, offset: 47124},
			expr: &seqExpr{
				pos: position{line: 1294, col: 37, offset: 47160},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1294, col: 37, offset: 47160},
						expr: &ruleRefExpr{
							pos:  position{line: 1294, col: 38, offset: 47161},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1294, col: 44, offset: 47167},
						expr: &ruleRefExpr{
							pos:  position{line: 1294, col: 44, offset: 47167},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1296, col: 1, offset: 47203},
			expr: &choiceExpr{
				pos: position{line: 1296, col: 37, offset: 47239},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1296, col: 37, offset: 47239},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1297, col: 11, offset: 47255},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1297, col: 11, offset: 47255},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1297, col: 19, offset: 47263},
								expr: &ruleRefExpr{
									pos:  position{line: 1297, col: 20, offset: 47264},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1298, col: 11, offset: 47283},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 11, offset: 47319},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1300, col: 11, offset: 47343},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1300, col: 11, offset: 47343},
								expr: &ruleRefExpr{
									pos:  position{line: 1300, col: 11, offset: 47343},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1300, col: 18, offset: 47350},
								expr: &seqExpr{
									pos: position{line: 1300, col: 19, offset: 47351},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1300, col: 19, offset: 47351},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1300, col: 23, offset: 47355},
											expr: &litMatcher{
												pos:        position{line: 1300, col: 24, offset: 47356},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1301, col: 11, offset: 47485},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1302, col: 11, offset: 47505},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1303, col: 11, offset: 47527},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1304, col: 11, offset: 47549},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1305, col: 11, offset: 47574},
						name: "SuperscriptText",
					},
					&seqExpr{
						pos: position{line: 1306, col: 11, offset: 47601},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1306, col: 11, offset: 47601},
								expr: &litMatcher{
									pos:        position{line: 1306, col: 12, offset: 47602},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1306, col: 16, offset: 47606},
								name: "Symbol",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1307, col: 11, offset: 47624},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1308, col: 11, offset: 47646},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1309, col: 11, offset: 47670},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1310, col: 11, offset: 47687},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1311, col: 11, offset: 47717},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1312, col: 11, offset: 47750},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1313, col: 11, offset: 47779},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1315, col: 1, offset: 47824},
			expr: &choiceExpr{
				pos: position{line: 1316, col: 5, offset: 47874},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1316, col: 5, offset: 47874},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1317, col: 7, offset: 47977},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1317, col: 7, offset: 47977},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1317, col: 7, offset: 47977},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1317, col: 11, offset: 47981},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1321, col: 1, offset: 48154},
			expr: &choiceExpr{
				pos: position{line: 1322, col: 5, offset: 48184},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1322, col: 5, offset: 48184},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1322, col: 5, offset: 48184},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1322, col: 5, offset: 48184},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1322, col: 18, offset: 48197},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1322, col: 40, offset: 48219},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1322, col: 45, offset: 48224},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1322, col: 55, offset: 48234},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1322, col: 89, offset: 48268},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1324, col: 9, offset: 48427},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1324, col: 9, offset: 48427},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1324, col: 9, offset: 48427},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1324, col: 22, offset: 48440},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1324, col: 44, offset: 48462},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1324, col: 49, offset: 48467},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1324, col: 59, offset: 48477},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1324, col: 93, offset: 48511},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1327, col: 9, offset: 48714},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1327, col: 9, offset: 48714},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1327, col: 9, offset: 48714},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1327, col: 22, offset: 48727},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1327, col: 44, offset: 48749},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1327, col: 48, offset: 48753},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1327, col: 58, offset: 48763},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1327, col: 92, offset: 48797},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1335, col: 1, offset: 49013},
			expr: &choiceExpr{
				pos: position{line: 1335, col: 15, offset: 49027},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1335, col: 15, offset: 49027},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1335, col: 39, offset: 49051},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1337, col: 1, offset: 49076},
			expr: &actionExpr{
				pos: position{line: 1337, col: 26, offset: 49101},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1337, col: 26, offset: 49101},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1337, col: 26, offset: 49101},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1337, col: 32, offset: 49107},
								expr: &ruleRefExpr{
									pos:  position{line: 1337, col: 33, offset: 49108},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1337, col: 51, offset: 49126},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1337, col: 56, offset: 49131},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1337, col: 66, offset: 49141},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1337, col: 97, offset: 49172},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1341, col: 1, offset: 49310},
			expr: &seqExpr{
				pos: position{line: 1341, col: 34, offset: 49343},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1341, col: 34, offset: 49343},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1341, col: 63, offset: 49372},
						expr: &seqExpr{
							pos: position{line: 1341, col: 64, offset: 49373},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1341, col: 64, offset: 49373},
									expr: &litMatcher{
										pos:        position{line: 1341, col: 66, offset: 49375},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1341, col: 73, offset: 49382},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1341, col: 73, offset: 49382},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1341, col: 81, offset: 49390},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1343, col: 1, offset: 49459},
			expr: &choiceExpr{
				pos: position{line: 1343, col: 33, offset: 49491},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1343, col: 33, offset: 49491},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1344, col: 11, offset: 49507},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1345, col: 11, offset: 49540},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1345, col: 11, offset: 49540},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1345, col: 19, offset: 49548},
								expr: &ruleRefExpr{
									pos:  position{line: 1345, col: 20, offset: 49549},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1346, col: 11, offset: 49568},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1347, col: 11, offset: 49592},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1348, col: 11, offset: 49612},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1349, col: 11, offset: 49634},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1350, col: 11, offset: 49659},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1351, col: 11, offset: 49684},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 11, offset: 49711},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1353, col: 11, offset: 49729},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1354, col: 11, offset: 49751},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1355, col: 11, offset: 49774},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1356, col: 11, offset: 49790},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1357, col: 11, offset: 49819},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1358, col: 11, offset: 49848},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1360, col: 1, offset: 49890},
			expr: &choiceExpr{
				pos: position{line: 1361, col: 5, offset: 49937},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1361, col: 5, offset: 49937},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1362, col: 7, offset: 50037},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1362, col: 7, offset: 50037},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1362, col: 7, offset: 50037},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1362, col: 12, offset: 50042},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1366, col: 1, offset: 50211},
			expr: &choiceExpr{
				pos: position{line: 1366, col: 26, offset: 50236},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1366, col: 26, offset: 50236},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1366, col: 26, offset: 50236},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1366, col: 26, offset: 50236},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1366, col: 32, offset: 50242},
										expr: &ruleRefExpr{
											pos:  position{line: 1366, col: 33, offset: 50243},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1366, col: 52, offset: 50262},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1366, col: 52, offset: 50262},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1366, col: 56, offset: 50266},
											expr: &litMatcher{
												pos:        position{line: 1366, col: 57, offset: 50267},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1366, col: 62, offset: 50272},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1366, col: 72, offset: 50282},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1366, col: 103, offset: 50313},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1368, col: 5, offset: 50505},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1368, col: 5, offset: 50505},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1368, col: 5, offset: 50505},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1368, col: 11, offset: 50511},
										expr: &ruleRefExpr{
											pos:  position{line: 1368, col: 12, offset: 50512},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1368, col: 30, offset: 50530},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1368, col: 34, offset: 50534},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1368, col: 44, offset: 50544},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1368, col: 44, offset: 50544},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1368, col: 48, offset: 50548},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1368, col: 79, offset: 50579},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1372, col: 1, offset: 50792},
			expr: &seqExpr{
				pos: position{line: 1372, col: 34, offset: 50825},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1372, col: 34, offset: 50825},
						expr: &ruleRefExpr{
							pos:  position{line: 1372, col: 35, offset: 50826},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1372, col: 41, offset: 50832},
						expr: &ruleRefExpr{
							pos:  position{line: 1372, col: 41, offset: 50832},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1374, col: 1, offset: 50865},
			expr: &choiceExpr{
				pos: position{line: 1374, col: 33, offset: 50897},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1374, col: 33, offset: 50897},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1375, col: 11, offset: 50913},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1376, col: 11, offset: 50946},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1376, col: 11, offset: 50946},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1376, col: 19, offset: 50954},
								expr: &ruleRefExpr{
									pos:  position{line: 1376, col: 20, offset: 50955},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1377, col: 11, offset: 50974},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1378, col: 11, offset: 50998},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1378, col: 11, offset: 50998},
								expr: &ruleRefExpr{
									pos:  position{line: 1378, col: 11, offset: 50998},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1378, col: 18, offset: 51005},
								expr: &seqExpr{
									pos: position{line: 1378, col: 19, offset: 51006},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1378, col: 19, offset: 51006},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1378, col: 23, offset: 51010},
											expr: &litMatcher{
												pos:        position{line: 1378, col: 24, offset: 51011},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1379, col: 11, offset: 51028},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1380, col: 11, offset: 51048},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1381, col: 11, offset: 51070},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1382, col: 11, offset: 51095},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1383, col: 11, offset: 51120},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1384, col: 11, offset: 51147},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1385, col: 11, offset: 51165},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1386, col: 11, offset: 51187},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1387, col: 11, offset: 51210},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1388, col: 11, offset: 51226},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1389, col: 11, offset: 51255},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1390, col: 11, offset: 51288},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1391, col: 11, offset: 51317},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1393, col: 1, offset: 51359},
			expr: &choiceExpr{
				pos: position{line: 1394, col: 5, offset: 51406},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1394, col: 5, offset: 51406},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1395, col: 7, offset: 51504},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1395, col: 7, offset: 51504},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1395, col: 7, offset: 51504},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1395, col: 11, offset: 51508},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1399, col: 1, offset: 51675},
			expr: &choiceExpr{
				pos: position{line: 1400, col: 5, offset: 51701},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1400, col: 5, offset: 51701},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1400, col: 5, offset: 51701},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1400, col: 5, offset: 51701},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1400, col: 18, offset: 51714},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1400, col: 40, offset: 51736},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1400, col: 45, offset: 51741},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1400, col: 55, offset: 51751},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1400, col: 86, offset: 51782},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1402, col: 9, offset: 51941},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1402, col: 9, offset: 51941},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1402, col: 9, offset: 51941},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1402, col: 22, offset: 51954},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1402, col: 44, offset: 51976},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1402, col: 49, offset: 51981},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1402, col: 59, offset: 51991},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1402, col: 90, offset: 52022},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1405, col: 9, offset: 52225},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1405, col: 9, offset: 52225},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1405, col: 9, offset: 52225},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1405, col: 22, offset: 52238},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1405, col: 44, offset: 52260},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1405, col: 48, offset: 52264},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1405, col: 58, offset: 52274},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1405, col: 89, offset: 52305},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1410, col: 1, offset: 52460},
			expr: &actionExpr{
				pos: position{line: 1410, col: 18, offset: 52477},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1410, col: 18, offset: 52477},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1410, col: 18, offset: 52477},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1410, col: 24, offset: 52483},
								expr: &ruleRefExpr{
									pos:  position{line: 1410, col: 25, offset: 52484},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1410, col: 43, offset: 52502},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1410, col: 47, offset: 52506},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1410, col: 56, offset: 52515},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1410, col: 78, offset: 52537},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1414, col: 1, offset: 52637},
			expr: &choiceExpr{
				pos: position{line: 1414, col: 25, offset: 52661},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1414, col: 25, offset: 52661},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1414, col: 38, offset: 52674},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1416, col: 1, offset: 52695},
			expr: &actionExpr{
				pos: position{line: 1416, col: 21, offset: 52715},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1416, col: 21, offset: 52715},
					expr: &charClassMatcher{
						pos:        position{line: 1416, col: 21, offset: 52715},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1420, col: 1, offset: 52796},
			expr: &actionExpr{
				pos: position{line: 1420, col: 25, offset: 52820},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1420, col: 25, offset: 52820},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1420, col: 25, offset: 52820},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1420, col: 38, offset: 52833},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1420, col: 60, offset: 52855},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1420, col: 64, offset: 52859},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1420, col: 73, offset: 52868},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1420, col: 95, offset: 52890},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1424, col: 1, offset: 53023},
			expr: &actionExpr{
				pos: position{line: 1424, col: 20, offset: 53042},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1424, col: 20, offset: 53042},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1424, col: 20, offset: 53042},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1424, col: 26, offset: 53048},
								expr: &ruleRefExpr{
									pos:  position{line: 1424, col: 27, offset: 53049},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1424, col: 45, offset: 53067},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1424, col: 49, offset: 53071},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1424, col: 58, offset: 53080},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1424, col: 82, offset: 53104},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1428, col: 1, offset: 53206},
			expr: &choiceExpr{
				pos: position{line: 1428, col: 27, offset: 53232},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1428, col: 27, offset: 53232},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1428, col: 40, offset: 53245},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1430, col: 1, offset: 53268},
			expr: &actionExpr{
				pos: position{line: 1430, col: 23, offset: 53290},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1430, col: 23, offset: 53290},
					expr: &charClassMatcher{
						pos:        position{line: 1430, col: 23, offset: 53290},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1434, col: 1, offset: 53371},
			expr: &actionExpr{
				pos: position{line: 1434, col: 27, offset: 53397},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1434, col: 27, offset: 53397},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1434, col: 27, offset: 53397},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1434, col: 40, offset: 53410},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1434, col: 62, offset: 53432},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1434, col: 66, offset: 53436},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1434, col: 75, offset: 53445},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1434, col: 99, offset: 53469},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1441, col: 1, offset: 53718},
			expr: &choiceExpr{
				pos: position{line: 1441, col: 22, offset: 53739},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1441, col: 22, offset: 53739},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1441, col: 46, offset: 53763},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1441, col: 70, offset: 53787},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1443, col: 1, offset: 53807},
			expr: &litMatcher{
				pos:        position{line: 1443, col: 32, offset: 53838},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1445, col: 1, offset: 53845},
			expr: &actionExpr{
				pos: position{line: 1445, col: 26, offset: 53870},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1445, col: 26, offset: 53870},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1445, col: 26, offset: 53870},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1445, col: 54, offset: 53898},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1445, col: 63, offset: 53907},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1445, col: 93, offset: 53937},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1445, col: 121, offset: 53965},
							expr: &ruleRefExpr{
								pos:  position{line: 1445, col: 122, offset: 53966},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1449, col: 1, offset: 54075},
			expr: &choiceExpr{
				pos: position{line: 1449, col: 33, offset: 54107},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1449, col: 34, offset: 54108},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1449, col: 34, offset: 54108},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1449, col: 35, offset: 54109},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1449, col: 35, offset: 54109},
											expr: &ruleRefExpr{
												pos:  position{line: 1449, col: 36, offset: 54110},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1449, col: 64, offset: 54138},
											expr: &ruleRefExpr{
												pos:  position{line: 1449, col: 65, offset: 54139},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1449, col: 71, offset: 54145},
											expr: &ruleRefExpr{
												pos:  position{line: 1449, col: 72, offset: 54146},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1449, col: 80, offset: 54154,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1449, col: 83, offset: 54157},
									expr: &seqExpr{
										pos: position{line: 1449, col: 84, offset: 54158},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1449, col: 84, offset: 54158},
												expr: &seqExpr{
													pos: position{line: 1449, col: 86, offset: 54160},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1449, col: 86, offset: 54160},
															expr: &ruleRefExpr{
																pos:  position{line: 1449, col: 86, offset: 54160},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1449, col: 93, offset: 54167},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1449, col: 122, offset: 54196},
												expr: &ruleRefExpr{
													pos:  position{line: 1449, col: 123, offset: 54197},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1449, col: 151, offset: 54225},
												expr: &ruleRefExpr{
													pos:  position{line: 1449, col: 152, offset: 54226},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1449, col: 160, offset: 54234,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1451, col: 7, offset: 54378},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1451, col: 8, offset: 54379},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1451, col: 8, offset: 54379},
									expr: &ruleRefExpr{
										pos:  position{line: 1451, col: 9, offset: 54380},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1451, col: 15, offset: 54386},
									expr: &ruleRefExpr{
										pos:  position{line: 1451, col: 16, offset: 54387},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1451, col: 24, offset: 54395},
									expr: &ruleRefExpr{
										pos:  position{line: 1451, col: 25, offset: 54396},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1451, col: 53, offset: 54424,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1455, col: 1, offset: 54510},
			expr: &litMatcher{
				pos:        position{line: 1455, col: 32, offset: 54541},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1457, col: 1, offset: 54550},
			expr: &actionExpr{
				pos: position{line: 1457, col: 26, offset: 54575},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1457, col: 26, offset: 54575},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1457, col: 26, offset: 54575},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1457, col: 54, offset: 54603},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1457, col: 63, offset: 54612},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1457, col: 93, offset: 54642},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1457, col: 121, offset: 54670},
							expr: &ruleRefExpr{
								pos:  position{line: 1457, col: 122, offset: 54671},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1461, col: 1, offset: 54780},
			expr: &choiceExpr{
				pos: position{line: 1461, col: 33, offset: 54812},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1461, col: 34, offset: 54813},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1461, col: 34, offset: 54813},
							expr: &seqExpr{
								pos: position{line: 1461, col: 35, offset: 54814},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1461, col: 35, offset: 54814},
										expr: &ruleRefExpr{
											pos:  position{line: 1461, col: 36, offset: 54815},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1461, col: 64, offset: 54843,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1463, col: 7, offset: 55010},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1463, col: 7, offset: 55010},
							expr: &seqExpr{
								pos: position{line: 1463, col: 8, offset: 55011},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1463, col: 8, offset: 55011},
										expr: &ruleRefExpr{
											pos:  position{line: 1463, col: 9, offset: 55012},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1463, col: 15, offset: 55018},
										expr: &ruleRefExpr{
											pos:  position{line: 1463, col: 16, offset: 55019},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1463, col: 24, offset: 55027},
										expr: &ruleRefExpr{
											pos:  position{line: 1463, col: 25, offset: 55028},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1463, col: 53, offset: 55056,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1467, col: 1, offset: 55143},
			expr: &choiceExpr{
				pos: position{line: 1467, col: 21, offset: 55163},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1467, col: 21, offset: 55163},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1467, col: 21, offset: 55163},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1467, col: 21, offset: 55163},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1467, col: 30, offset: 55172},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1467, col: 38, offset: 55180},
										expr: &ruleRefExpr{
											pos:  position{line: 1467, col: 39, offset: 55181},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1467, col: 67, offset: 55209},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1469, col: 5, offset: 55307},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1469, col: 5, offset: 55307},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1469, col: 5, offset: 55307},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1469, col: 15, offset: 55317},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1469, col: 23, offset: 55325},
										expr: &choiceExpr{
											pos: position{line: 1469, col: 24, offset: 55326},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1469, col: 24, offset: 55326},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1469, col: 37, offset: 55339},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1469, col: 65, offset: 55367},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1473, col: 1, offset: 55467},
			expr: &actionExpr{
				pos: position{line: 1473, col: 30, offset: 55496},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1473, col: 30, offset: 55496},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1480, col: 1, offset: 55676},
			expr: &choiceExpr{
				pos: position{line: 1480, col: 19, offset: 55694},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1480, col: 19, offset: 55694},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1480, col: 44, offset: 55719},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1482, col: 1, offset: 55746},
			expr: &choiceExpr{
				pos: position{line: 1482, col: 27, offset: 55772},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1482, col: 27, offset: 55772},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1482, col: 27, offset: 55772},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1482, col: 27, offset: 55772},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1482, col: 32, offset: 55777},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1482, col: 36, offset: 55781},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1482, col: 40, offset: 55785},
									expr: &ruleRefExpr{
										pos:  position{line: 1482, col: 40, offset: 55785},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1482, col: 47, offset: 55792},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1482, col: 51, offset: 55796},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1482, col: 58, offset: 55803},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1482, col: 79, offset: 55824},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1484, col: 5, offset: 55909},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1484, col: 5, offset: 55909},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1484, col: 5, offset: 55909},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1484, col: 10, offset: 55914},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1484, col: 14, offset: 55918},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1484, col: 18, offset: 55922},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1488, col: 1, offset: 55998},
			expr: &actionExpr{
				pos: position{line: 1488, col: 27, offset: 56024},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1488, col: 27, offset: 56024},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1488, col: 27, offset: 56024},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1488, col: 35, offset: 56032},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1488, col: 40, offset: 56037},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1488, col: 54, offset: 56051},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1488, col: 72, offset: 56069},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1492, col: 1, offset: 56196},
			expr: &ruleRefExpr{
				pos:  position{line: 1492, col: 24, offset: 56219},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1497, col: 1, offset: 56346},
			expr: &choiceExpr{
				pos: position{line: 1497, col: 9, offset: 56354},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1497, col: 9, offset: 56354},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1497, col: 24, offset: 56369},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1500, col: 1, offset: 56453},
			expr: &actionExpr{
				pos: position{line: 1500, col: 17, offset: 56469},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1500, col: 17, offset: 56469},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1500, col: 17, offset: 56469},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1500, col: 25, offset: 56477},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1500, col: 30, offset: 56482},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1500, col: 40, offset: 56492},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1500, col: 58, offset: 56510},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1504, col: 1, offset: 56625},
			expr: &actionExpr{
				pos: position{line: 1504, col: 17, offset: 56641},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1504, col: 17, offset: 56641},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1504, col: 17, offset: 56641},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1504, col: 22, offset: 56646},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1504, col: 42, offset: 56666},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1504, col: 59, offset: 56683},
								expr: &ruleRefExpr{
									pos:  position{line: 1504, col: 60, offset: 56684},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1508, col: 1, offset: 56781},
			expr: &actionExpr{
				pos: position{line: 1508, col: 19, offset: 56799},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1508, col: 19, offset: 56799},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1508, col: 19, offset: 56799},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1508, col: 23, offset: 56803},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1508, col: 33, offset: 56813},
								expr: &ruleRefExpr{
									pos:  position{line: 1508, col: 34, offset: 56814},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1509, col: 5, offset: 56847},
							expr: &ruleRefExpr{
								pos:  position{line: 1509, col: 5, offset: 56847},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1509, col: 12, offset: 56854},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1509, col: 23, offset: 56865},
								expr: &ruleRefExpr{
									pos:  position{line: 1509, col: 24, offset: 56866},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1509, col: 43, offset: 56885},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1513, col: 1, offset: 57006},
			expr: &actionExpr{
				pos: position{line: 1513, col: 30, offset: 57035},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1513, col: 30, offset: 57035},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1515, col: 5, offset: 57088},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1515, col: 6, offset: 57089},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1515, col: 6, offset: 57089},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1515, col: 6, offset: 57089},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1515, col: 11, offset: 57094},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1515, col: 20, offset: 57103},
												expr: &choiceExpr{
													pos: position{line: 1515, col: 21, offset: 57104},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1515, col: 21, offset: 57104},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1515, col: 36, offset: 57119},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1515, col: 49, offset: 57132},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1515, col: 71, offset: 57154},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1515, col: 76, offset: 57159},
											expr: &notExpr{
												pos: position{line: 1515, col: 78, offset: 57161},
												expr: &litMatcher{
													pos:        position{line: 1515, col: 79, offset: 57162},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1515, col: 84, offset: 57167},
											expr: &litMatcher{
												pos:        position{line: 1515, col: 84, offset: 57167},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1519, col: 6, offset: 57298},
								run: (*parser).callonFirstLinkAttributeElement19,
								expr: &seqExpr{
									pos: position{line: 1519, col: 6, offset: 57298},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1519, col: 6, offset: 57298},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1519, col: 15, offset: 57307},
												expr: &choiceExpr{
													pos: position{line: 1519, col: 16, offset: 57308},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1519, col: 16, offset: 57308},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1519, col: 31, offset: 57323},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1519, col: 44, offset: 57336},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1519, col: 68, offset: 57360},
											expr: &notExpr{
												pos: position{line: 1519, col: 70, offset: 57362},
												expr: &litMatcher{
													pos:        position{line: 1519, col: 71, offset: 57363},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1519, col: 76, offset: 57368},
											expr: &litMatcher{
												pos:        position{line: 1519, col: 76, offset: 57368},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1525, col: 1, offset: 57488},
			expr: &actionExpr{
				pos: position{line: 1525, col: 18, offset: 57505},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1525, col: 18, offset: 57505},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1529, col: 1, offset: 57595},
			expr: &actionExpr{
				pos: position{line: 1529, col: 24, offset: 57618},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1529, col: 24, offset: 57618},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1533, col: 1, offset: 57715},
			expr: &actionExpr{
				pos: position{line: 1533, col: 26, offset: 57740},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1533, col: 26, offset: 57740},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1538, col: 1, offset: 57901},
			expr: &actionExpr{
				pos: position{line: 1539, col: 5, offset: 57921},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1539, col: 5, offset: 57921},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1539, col: 5, offset: 57921},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1539, col: 14, offset: 57930},
								expr: &choiceExpr{
									pos: position{line: 1539, col: 15, offset: 57931},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1539, col: 15, offset: 57931},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 1540, col: 11, offset: 57947},
											name: "Symbol",
										},
										&oneOrMoreExpr{
											pos: position{line: 1541, col: 11, offset: 57965},
											expr: &ruleRefExpr{
												pos:  position{line: 1541, col: 11, offset: 57965},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1542, col: 11, offset: 57984},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1543, col: 11, offset: 58009},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1544, col: 11, offset: 58032},
											name: "ImpliedApostrophe",
										},
										&ruleRefExpr{
											pos:  position{line: 1545, col: 11, offset: 58061},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1546, col: 11, offset: 58080},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1546, col: 21, offset: 58090},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1550, col: 1, offset: 58164},
			expr: &choiceExpr{
				pos: position{line: 1550, col: 17, offset: 58180},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1550, col: 17, offset: 58180},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1550, col: 40, offset: 58203},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1553, col: 1, offset: 58334},
			expr: &actionExpr{
				pos: position{line: 1553, col: 25, offset: 58358},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1553, col: 25, offset: 58358},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1553, col: 25, offset: 58358},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1553, col: 33, offset: 58366},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1553, col: 38, offset: 58371},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1553, col: 38, offset: 58371},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1553, col: 57, offset: 58390},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1553, col: 79, offset: 58412},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1553, col: 97, offset: 58430},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1557, col: 1, offset: 58545},
			expr: &actionExpr{
				pos: position{line: 1557, col: 25, offset: 58569},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1557, col: 25, offset: 58569},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1557, col: 25, offset: 58569},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1557, col: 30, offset: 58574},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1557, col: 48, offset: 58592},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1557, col: 65, offset: 58609},
								expr: &ruleRefExpr{
									pos:  position{line: 1557, col: 66, offset: 58610},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1564, col: 1, offset: 58812},
			expr: &actionExpr{
				pos: position{line: 1564, col: 15, offset: 58826},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1564, col: 15, offset: 58826},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1564, col: 15, offset: 58826},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1564, col: 26, offset: 58837},
								expr: &ruleRefExpr{
									pos:  position{line: 1564, col: 27, offset: 58838},
									name: "BlockImageAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1564, col: 45, offset: 58856},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1564, col: 55, offset: 58866},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1564, col: 61, offset: 58872},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1564, col: 71, offset: 58882},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1564, col: 84, offset: 58895},
								name: "InlineImageAttrs",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1564, col: 102, offset: 58913},
							expr: &ruleRefExpr{
								pos:  position{line: 1564, col: 102, offset: 58913},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1564, col: 109, offset: 58920},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1568, col: 1, offset: 59031},
			expr: &actionExpr{
				pos: position{line: 1568, col: 16, offset: 59046},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1568, col: 16, offset: 59046},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1568, col: 16, offset: 59046},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1568, col: 25, offset: 59055},
							expr: &litMatcher{
								pos:        position{line: 1568, col: 26, offset: 59056},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1568, col: 30, offset: 59060},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1568, col: 36, offset: 59066},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1568, col: 46, offset: 59076},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1568, col: 59, offset: 59089},
								name: "InlineImageAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttrs",
			pos:  position{line: 1572, col: 1, offset: 59203},
			expr: &actionExpr{
				pos: position{line: 1572, col: 21, offset: 59223},
				run: (*parser).callonInlineImageAttrs1,
				expr: &seqExpr{
					pos: position{line: 1572, col: 21, offset: 59223},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1572, col: 21, offset: 59223},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1572, col: 25, offset: 59227},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1572, col: 32, offset: 59234},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1572, col: 32, offset: 59234},
										expr: &ruleRefExpr{
											pos:  position{line: 1572, col: 32, offset: 59234},
											name: "ImageAltAttrInline",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1572, col: 52, offset: 59254},
										expr: &ruleRefExpr{
											pos:  position{line: 1572, col: 52, offset: 59254},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1572, col: 68, offset: 59270},
										expr: &ruleRefExpr{
											pos:  position{line: 1572, col: 68, offset: 59270},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1572, col: 85, offset: 59287},
										expr: &ruleRefExpr{
											pos:  position{line: 1572, col: 85, offset: 59287},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1572, col: 97, offset: 59299},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImageAttrs",
			pos:  position{line: 1576, col: 1, offset: 59357},
			expr: &choiceExpr{
				pos: position{line: 1576, col: 20, offset: 59376},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1576, col: 20, offset: 59376},
						name: "ImageAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 1576, col: 36, offset: 59392},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 1576, col: 51, offset: 59407},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1578, col: 1, offset: 59420},
			expr: &actionExpr{
				pos: position{line: 1578, col: 18, offset: 59437},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1578, col: 18, offset: 59437},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1578, col: 18, offset: 59437},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1578, col: 22, offset: 59441},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1578, col: 29, offset: 59448},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1578, col: 29, offset: 59448},
										expr: &ruleRefExpr{
											pos:  position{line: 1578, col: 29, offset: 59448},
											name: "ImageAltAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1578, col: 43, offset: 59462},
										expr: &ruleRefExpr{
											pos:  position{line: 1578, col: 43, offset: 59462},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1578, col: 58, offset: 59477},
										expr: &ruleRefExpr{
											pos:  position{line: 1578, col: 58, offset: 59477},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1578, col: 74, offset: 59493},
										expr: &ruleRefExpr{
											pos:  position{line: 1578, col: 74, offset: 59493},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1578, col: 91, offset: 59510},
										expr: &ruleRefExpr{
											pos:  position{line: 1578, col: 91, offset: 59510},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1578, col: 103, offset: 59522},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1578, col: 107, offset: 59526},
							expr: &ruleRefExpr{
								pos:  position{line: 1578, col: 107, offset: 59526},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1578, col: 114, offset: 59533},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttrInline",
			pos:  position{line: 1582, col: 1, offset: 59591},
			expr: &actionExpr{
				pos: position{line: 1582, col: 23, offset: 59613},
				run: (*parser).callonImageAltAttrInline1,
				expr: &labeledExpr{
					pos:   position{line: 1582, col: 23, offset: 59613},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1582, col: 29, offset: 59619},
						name: "InlinePositionalValue",
					},
				},
			},
		},
		{
			name: "ImageAltAttr",
			pos:  position{line: 1586, col: 1, offset: 59723},
			expr: &actionExpr{
				pos: position{line: 1586, col: 17, offset: 59739},
				run: (*parser).callonImageAltAttr1,
				expr: &seqExpr{
					pos: position{line: 1586, col: 17, offset: 59739},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1586, col: 17, offset: 59739},
							expr: &ruleRefExpr{
								pos:  position{line: 1586, col: 17, offset: 59739},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1586, col: 24, offset: 59746},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1586, col: 30, offset: 59752},
								name: "PositionalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1586, col: 46, offset: 59768},
							expr: &ruleRefExpr{
								pos:  position{line: 1586, col: 46, offset: 59768},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttr",
			pos:  position{line: 1590, col: 1, offset: 59857},
			expr: &actionExpr{
				pos: position{line: 1590, col: 19, offset: 59875},
				run: (*parser).callonImageWidthAttr1,
				expr: &seqExpr{
					pos: position{line: 1590, col: 19, offset: 59875},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1590, col: 19, offset: 59875},
							expr: &ruleRefExpr{
								pos:  position{line: 1590, col: 19, offset: 59875},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1590, col: 26, offset: 59882},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1590, col: 30, offset: 59886},
							expr: &ruleRefExpr{
								pos:  position{line: 1590, col: 30, offset: 59886},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1590, col: 37, offset: 59893},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1590, col: 43, offset: 59899},
								expr: &ruleRefExpr{
									pos:  position{line: 1590, col: 43, offset: 59899},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttr",
			pos:  position{line: 1597, col: 1, offset: 60055},
			expr: &actionExpr{
				pos: position{line: 1597, col: 20, offset: 60074},
				run: (*parser).callonImageHeightAttr1,
				expr: &seqExpr{
					pos: position{line: 1597, col: 20, offset: 60074},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1597, col: 20, offset: 60074},
							expr: &ruleRefExpr{
								pos:  position{line: 1597, col: 20, offset: 60074},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1597, col: 27, offset: 60081},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1597, col: 31, offset: 60085},
							expr: &ruleRefExpr{
								pos:  position{line: 1597, col: 31, offset: 60085},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1597, col: 38, offset: 60092},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1597, col: 44, offset: 60098},
								expr: &ruleRefExpr{
									pos:  position{line: 1597, col: 44, offset: 60098},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1608, col: 1, offset: 60452},
			expr: &actionExpr{
				pos: position{line: 1608, col: 15, offset: 60466},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1608, col: 15, offset: 60466},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1608, col: 15, offset: 60466},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1608, col: 23, offset: 60474},
							label: "iconClass",
							expr: &actionExpr{
								pos: position{line: 1608, col: 34, offset: 60485},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1608, col: 34, offset: 60485},
									expr: &charClassMatcher{
										pos:        position{line: 1608, col: 34, offset: 60485},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1608, col: 78, offset: 60529},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1608, col: 96, offset: 60547},
								name: "IconAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttributes",
			pos:  position{line: 1612, col: 1, offset: 60654},
			expr: &actionExpr{
				pos: position{line: 1612, col: 19, offset: 60672},
				run: (*parser).callonIconAttributes1,
				expr: &seqExpr{
					pos: position{line: 1612, col: 19, offset: 60672},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1612, col: 19, offset: 60672},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1612, col: 23, offset: 60676},
							label: "size",
							expr: &zeroOrOneExpr{
								pos: position{line: 1612, col: 28, offset: 60681},
								expr: &ruleRefExpr{
									pos:  position{line: 1612, col: 29, offset: 60682},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1612, col: 56, offset: 60709},
							expr: &litMatcher{
								pos:        position{line: 1612, col: 56, offset: 60709},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1612, col: 61, offset: 60714},
							expr: &ruleRefExpr{
								pos:  position{line: 1612, col: 61, offset: 60714},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1612, col: 68, offset: 60721},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1612, col: 75, offset: 60728},
								expr: &ruleRefExpr{
									pos:  position{line: 1612, col: 76, offset: 60729},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1612, col: 95, offset: 60748},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1619, col: 1, offset: 61026},
			expr: &choiceExpr{
				pos: position{line: 1619, col: 19, offset: 61044},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1619, col: 19, offset: 61044},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1619, col: 19, offset: 61044},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1619, col: 19, offset: 61044},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1619, col: 32, offset: 61057},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1619, col: 41, offset: 61066},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1619, col: 58, offset: 61083},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1621, col: 5, offset: 61153},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1621, col: 5, offset: 61153},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1621, col: 5, offset: 61153},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1621, col: 17, offset: 61165},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1621, col: 22, offset: 61170},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1621, col: 35, offset: 61183},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1621, col: 39, offset: 61187},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1621, col: 47, offset: 61195},
										expr: &ruleRefExpr{
											pos:  position{line: 1621, col: 48, offset: 61196},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1621, col: 66, offset: 61214},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1625, col: 1, offset: 61279},
			expr: &ruleRefExpr{
				pos:  position{line: 1625, col: 16, offset: 61294},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1627, col: 1, offset: 61307},
			expr: &actionExpr{
				pos: position{line: 1627, col: 20, offset: 61326},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1627, col: 20, offset: 61326},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1627, col: 29, offset: 61335},
						expr: &seqExpr{
							pos: position{line: 1627, col: 30, offset: 61336},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1627, col: 30, offset: 61336},
									expr: &litMatcher{
										pos:        position{line: 1627, col: 31, offset: 61337},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1627, col: 35, offset: 61341},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1634, col: 1, offset: 61672},
			expr: &actionExpr{
				pos: position{line: 1634, col: 19, offset: 61690},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1634, col: 19, offset: 61690},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1634, col: 19, offset: 61690},
							expr: &ruleRefExpr{
								pos:  position{line: 1634, col: 20, offset: 61691},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1635, col: 5, offset: 61780},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1635, col: 12, offset: 61787},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1635, col: 12, offset: 61787},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1636, col: 11, offset: 61811},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1637, col: 11, offset: 61836},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1638, col: 11, offset: 61861},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1639, col: 11, offset: 61883},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1640, col: 11, offset: 61907},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1641, col: 11, offset: 61936},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1642, col: 11, offset: 61964},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1643, col: 11, offset: 61981},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1647, col: 1, offset: 62026},
			expr: &choiceExpr{
				pos: position{line: 1647, col: 19, offset: 62044},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1647, col: 19, offset: 62044},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1647, col: 19, offset: 62044},
								expr: &ruleRefExpr{
									pos:  position{line: 1647, col: 21, offset: 62046},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1647, col: 31, offset: 62056},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1648, col: 19, offset: 62128},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1649, col: 19, offset: 62169},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1650, col: 19, offset: 62211},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1651, col: 19, offset: 62253},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1652, col: 19, offset: 62295},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1653, col: 19, offset: 62334},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1654, col: 19, offset: 62375},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1656, col: 1, offset: 62404},
			expr: &choiceExpr{
				pos: position{line: 1656, col: 20, offset: 62423},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1656, col: 20, offset: 62423},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1656, col: 36, offset: 62439},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1658, col: 1, offset: 62455},
			expr: &actionExpr{
				pos: position{line: 1658, col: 17, offset: 62471},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1658, col: 17, offset: 62471},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1658, col: 17, offset: 62471},
							expr: &ruleRefExpr{
								pos:  position{line: 1658, col: 18, offset: 62472},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1658, col: 22, offset: 62476},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1658, col: 31, offset: 62485},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1658, col: 52, offset: 62506},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1658, col: 61, offset: 62515},
								expr: &ruleRefExpr{
									pos:  position{line: 1658, col: 62, offset: 62516},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1658, col: 73, offset: 62527},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1662, col: 1, offset: 62601},
			expr: &actionExpr{
				pos: position{line: 1662, col: 24, offset: 62624},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1662, col: 24, offset: 62624},
					expr: &seqExpr{
						pos: position{line: 1662, col: 25, offset: 62625},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1662, col: 25, offset: 62625},
								expr: &ruleRefExpr{
									pos:  position{line: 1662, col: 26, offset: 62626},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1662, col: 36, offset: 62636},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1662, col: 36, offset: 62636},
										expr: &ruleRefExpr{
											pos:  position{line: 1662, col: 36, offset: 62636},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1662, col: 45, offset: 62645},
										expr: &charClassMatcher{
											pos:        position{line: 1662, col: 45, offset: 62645},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1666, col: 1, offset: 62699},
			expr: &oneOrMoreExpr{
				pos: position{line: 1666, col: 13, offset: 62711},
				expr: &ruleRefExpr{
					pos:  position{line: 1666, col: 13, offset: 62711},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1668, col: 1, offset: 62723},
			expr: &actionExpr{
				pos: position{line: 1668, col: 12, offset: 62734},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1668, col: 12, offset: 62734},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1668, col: 12, offset: 62734},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1668, col: 16, offset: 62738},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1668, col: 21, offset: 62743},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1668, col: 21, offset: 62743},
									expr: &charClassMatcher{
										pos:        position{line: 1668, col: 21, offset: 62743},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1668, col: 69, offset: 62791},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1668, col: 73, offset: 62795},
							expr: &ruleRefExpr{
								pos:  position{line: 1668, col: 73, offset: 62795},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1668, col: 80, offset: 62802},
							expr: &choiceExpr{
								pos: position{line: 1668, col: 82, offset: 62804},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1668, col: 82, offset: 62804},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1668, col: 88, offset: 62810},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1672, col: 1, offset: 62867},
			expr: &actionExpr{
				pos: position{line: 1672, col: 20, offset: 62886},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1672, col: 20, offset: 62886},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1672, col: 20, offset: 62886},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1672, col: 25, offset: 62891},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1672, col: 48, offset: 62914},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1672, col: 61, offset: 62927},
								expr: &ruleRefExpr{
									pos:  position{line: 1672, col: 61, offset: 62927},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1676, col: 1, offset: 63028},
			expr: &actionExpr{
				pos: position{line: 1676, col: 26, offset: 63053},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1676, col: 26, offset: 63053},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1676, col: 26, offset: 63053},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1676, col: 30, offset: 63057},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1676, col: 35, offset: 63062},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1676, col: 35, offset: 63062},
									expr: &charClassMatcher{
										pos:        position{line: 1676, col: 35, offset: 63062},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1676, col: 83, offset: 63110},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1676, col: 87, offset: 63114},
							expr: &ruleRefExpr{
								pos:  position{line: 1676, col: 87, offset: 63114},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1683, col: 1, offset: 63348},
			expr: &seqExpr{
				pos: position{line: 1683, col: 25, offset: 63372},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1683, col: 25, offset: 63372},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1683, col: 31, offset: 63378},
						expr: &ruleRefExpr{
							pos:  position{line: 1683, col: 31, offset: 63378},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1683, col: 38, offset: 63385},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1685, col: 1, offset: 63447},
			expr: &seqExpr{
				pos: position{line: 1685, col: 30, offset: 63476},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1685, col: 30, offset: 63476},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1685, col: 36, offset: 63482},
						expr: &ruleRefExpr{
							pos:  position{line: 1685, col: 36, offset: 63482},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1685, col: 43, offset: 63489},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1687, col: 1, offset: 63496},
			expr: &choiceExpr{
				pos: position{line: 1687, col: 28, offset: 63523},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1687, col: 29, offset: 63524},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1687, col: 29, offset: 63524},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1687, col: 35, offset: 63530},
								expr: &ruleRefExpr{
									pos:  position{line: 1687, col: 35, offset: 63530},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1687, col: 42, offset: 63537},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1687, col: 49, offset: 63544},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1689, col: 1, offset: 63551},
			expr: &actionExpr{
				pos: position{line: 1689, col: 16, offset: 63566},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1689, col: 16, offset: 63566},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1689, col: 16, offset: 63566},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1689, col: 27, offset: 63577},
								expr: &ruleRefExpr{
									pos:  position{line: 1689, col: 28, offset: 63578},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1689, col: 41, offset: 63591},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1689, col: 67, offset: 63617},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1689, col: 76, offset: 63626},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1689, col: 104, offset: 63654},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1693, col: 1, offset: 63773},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1693, col: 31, offset: 63803},
				expr: &actionExpr{
					pos: position{line: 1693, col: 32, offset: 63804},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1693, col: 32, offset: 63804},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1693, col: 32, offset: 63804},
								expr: &ruleRefExpr{
									pos:  position{line: 1693, col: 33, offset: 63805},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1693, col: 57, offset: 63829},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1693, col: 66, offset: 63838},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1700, col: 1, offset: 64182},
			expr: &seqExpr{
				pos: position{line: 1700, col: 26, offset: 64207},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1700, col: 26, offset: 64207},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1700, col: 33, offset: 64214},
						expr: &ruleRefExpr{
							pos:  position{line: 1700, col: 33, offset: 64214},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1700, col: 40, offset: 64221},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1702, col: 1, offset: 64228},
			expr: &seqExpr{
				pos: position{line: 1702, col: 31, offset: 64258},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1702, col: 31, offset: 64258},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1702, col: 38, offset: 64265},
						expr: &ruleRefExpr{
							pos:  position{line: 1702, col: 38, offset: 64265},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1702, col: 45, offset: 64272},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1704, col: 1, offset: 64279},
			expr: &choiceExpr{
				pos: position{line: 1704, col: 29, offset: 64307},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1704, col: 30, offset: 64308},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1704, col: 30, offset: 64308},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1704, col: 37, offset: 64315},
								expr: &ruleRefExpr{
									pos:  position{line: 1704, col: 37, offset: 64315},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1704, col: 44, offset: 64322},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1704, col: 51, offset: 64329},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1706, col: 1, offset: 64336},
			expr: &actionExpr{
				pos: position{line: 1706, col: 17, offset: 64352},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1706, col: 17, offset: 64352},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1706, col: 17, offset: 64352},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1706, col: 28, offset: 64363},
								expr: &ruleRefExpr{
									pos:  position{line: 1706, col: 29, offset: 64364},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1706, col: 42, offset: 64377},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1706, col: 69, offset: 64404},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1706, col: 78, offset: 64413},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1706, col: 107, offset: 64442},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1710, col: 1, offset: 64563},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1710, col: 32, offset: 64594},
				expr: &actionExpr{
					pos: position{line: 1710, col: 33, offset: 64595},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1710, col: 33, offset: 64595},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1710, col: 33, offset: 64595},
								expr: &ruleRefExpr{
									pos:  position{line: 1710, col: 34, offset: 64596},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1710, col: 59, offset: 64621},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1710, col: 68, offset: 64630},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1717, col: 1, offset: 64974},
			expr: &seqExpr{
				pos: position{line: 1717, col: 26, offset: 64999},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1717, col: 26, offset: 64999},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1717, col: 33, offset: 65006},
						expr: &ruleRefExpr{
							pos:  position{line: 1717, col: 33, offset: 65006},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1717, col: 40, offset: 65013},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1719, col: 1, offset: 65020},
			expr: &seqExpr{
				pos: position{line: 1719, col: 31, offset: 65050},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1719, col: 31, offset: 65050},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1719, col: 38, offset: 65057},
						expr: &ruleRefExpr{
							pos:  position{line: 1719, col: 38, offset: 65057},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1719, col: 45, offset: 65064},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1721, col: 1, offset: 65071},
			expr: &choiceExpr{
				pos: position{line: 1721, col: 29, offset: 65099},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1721, col: 30, offset: 65100},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1721, col: 30, offset: 65100},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1721, col: 37, offset: 65107},
								expr: &ruleRefExpr{
									pos:  position{line: 1721, col: 37, offset: 65107},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1721, col: 44, offset: 65114},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1721, col: 51, offset: 65121},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1723, col: 1, offset: 65128},
			expr: &actionExpr{
				pos: position{line: 1723, col: 17, offset: 65144},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1723, col: 17, offset: 65144},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1723, col: 17, offset: 65144},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1723, col: 28, offset: 65155},
								expr: &ruleRefExpr{
									pos:  position{line: 1723, col: 29, offset: 65156},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1723, col: 42, offset: 65169},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1723, col: 69, offset: 65196},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1723, col: 78, offset: 65205},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1723, col: 107, offset: 65234},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1727, col: 1, offset: 65355},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1727, col: 32, offset: 65386},
				expr: &actionExpr{
					pos: position{line: 1727, col: 33, offset: 65387},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1727, col: 33, offset: 65387},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1727, col: 33, offset: 65387},
								expr: &ruleRefExpr{
									pos:  position{line: 1727, col: 34, offset: 65388},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1727, col: 59, offset: 65413},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1727, col: 68, offset: 65422},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1734, col: 1, offset: 65764},
			expr: &seqExpr{
				pos: position{line: 1734, col: 24, offset: 65787},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1734, col: 24, offset: 65787},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1734, col: 31, offset: 65794},
						expr: &ruleRefExpr{
							pos:  position{line: 1734, col: 31, offset: 65794},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1734, col: 38, offset: 65801},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1736, col: 1, offset: 65833},
			expr: &seqExpr{
				pos: position{line: 1736, col: 29, offset: 65861},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1736, col: 29, offset: 65861},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1736, col: 36, offset: 65868},
						expr: &ruleRefExpr{
							pos:  position{line: 1736, col: 36, offset: 65868},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1736, col: 43, offset: 65875},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1738, col: 1, offset: 65907},
			expr: &choiceExpr{
				pos: position{line: 1738, col: 27, offset: 65933},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1738, col: 28, offset: 65934},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1738, col: 28, offset: 65934},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1738, col: 35, offset: 65941},
								expr: &ruleRefExpr{
									pos:  position{line: 1738, col: 35, offset: 65941},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1738, col: 42, offset: 65948},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1738, col: 49, offset: 65955},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1740, col: 1, offset: 65987},
			expr: &actionExpr{
				pos: position{line: 1740, col: 15, offset: 66001},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1740, col: 15, offset: 66001},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1740, col: 15, offset: 66001},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1740, col: 26, offset: 66012},
								expr: &ruleRefExpr{
									pos:  position{line: 1740, col: 27, offset: 66013},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1740, col: 40, offset: 66026},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1740, col: 65, offset: 66051},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1740, col: 74, offset: 66060},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1740, col: 101, offset: 66087},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1744, col: 1, offset: 66204},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1744, col: 30, offset: 66233},
				expr: &actionExpr{
					pos: position{line: 1744, col: 31, offset: 66234},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1744, col: 31, offset: 66234},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1744, col: 31, offset: 66234},
								expr: &ruleRefExpr{
									pos:  position{line: 1744, col: 32, offset: 66235},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1744, col: 55, offset: 66258},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1744, col: 64, offset: 66267},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1751, col: 1, offset: 66611},
			expr: &seqExpr{
				pos: position{line: 1751, col: 26, offset: 66636},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1751, col: 26, offset: 66636},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1751, col: 33, offset: 66643},
						expr: &ruleRefExpr{
							pos:  position{line: 1751, col: 33, offset: 66643},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1751, col: 40, offset: 66650},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1753, col: 1, offset: 66657},
			expr: &seqExpr{
				pos: position{line: 1753, col: 31, offset: 66687},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1753, col: 31, offset: 66687},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1753, col: 38, offset: 66694},
						expr: &ruleRefExpr{
							pos:  position{line: 1753, col: 38, offset: 66694},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1753, col: 45, offset: 66701},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1755, col: 1, offset: 66708},
			expr: &choiceExpr{
				pos: position{line: 1755, col: 29, offset: 66736},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1755, col: 30, offset: 66737},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1755, col: 30, offset: 66737},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1755, col: 37, offset: 66744},
								expr: &ruleRefExpr{
									pos:  position{line: 1755, col: 37, offset: 66744},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1755, col: 44, offset: 66751},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1755, col: 51, offset: 66758},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1757, col: 1, offset: 66765},
			expr: &actionExpr{
				pos: position{line: 1757, col: 17, offset: 66781},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1757, col: 17, offset: 66781},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1757, col: 17, offset: 66781},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1757, col: 28, offset: 66792},
								expr: &ruleRefExpr{
									pos:  position{line: 1757, col: 29, offset: 66793},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1757, col: 42, offset: 66806},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1757, col: 69, offset: 66833},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1757, col: 78, offset: 66842},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1757, col: 107, offset: 66871},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1761, col: 1, offset: 66992},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1761, col: 32, offset: 67023},
				expr: &actionExpr{
					pos: position{line: 1761, col: 33, offset: 67024},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1761, col: 33, offset: 67024},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1761, col: 33, offset: 67024},
								expr: &ruleRefExpr{
									pos:  position{line: 1761, col: 34, offset: 67025},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1761, col: 59, offset: 67050},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1761, col: 68, offset: 67059},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1768, col: 1, offset: 67407},
			expr: &seqExpr{
				pos: position{line: 1768, col: 30, offset: 67436},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1768, col: 30, offset: 67436},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1768, col: 37, offset: 67443},
						expr: &ruleRefExpr{
							pos:  position{line: 1768, col: 37, offset: 67443},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1768, col: 44, offset: 67450},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1770, col: 1, offset: 67457},
			expr: &seqExpr{
				pos: position{line: 1770, col: 35, offset: 67491},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1770, col: 35, offset: 67491},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1770, col: 42, offset: 67498},
						expr: &ruleRefExpr{
							pos:  position{line: 1770, col: 42, offset: 67498},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1770, col: 49, offset: 67505},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1772, col: 1, offset: 67512},
			expr: &choiceExpr{
				pos: position{line: 1772, col: 33, offset: 67544},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1772, col: 34, offset: 67545},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1772, col: 34, offset: 67545},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1772, col: 41, offset: 67552},
								expr: &ruleRefExpr{
									pos:  position{line: 1772, col: 41, offset: 67552},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1772, col: 48, offset: 67559},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1772, col: 55, offset: 67566},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1774, col: 1, offset: 67573},
			expr: &actionExpr{
				pos: position{line: 1774, col: 21, offset: 67593},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1774, col: 21, offset: 67593},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1774, col: 21, offset: 67593},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1774, col: 32, offset: 67604},
								expr: &ruleRefExpr{
									pos:  position{line: 1774, col: 33, offset: 67605},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1774, col: 46, offset: 67618},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1774, col: 77, offset: 67649},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1774, col: 86, offset: 67658},
								name: "PassthroughBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1774, col: 119, offset: 67691},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockVerbatimContent",
			pos:  position{line: 1778, col: 1, offset: 67820},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1778, col: 36, offset: 67855},
				expr: &actionExpr{
					pos: position{line: 1778, col: 37, offset: 67856},
					run: (*parser).callonPassthroughBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1778, col: 37, offset: 67856},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1778, col: 37, offset: 67856},
								expr: &ruleRefExpr{
									pos:  position{line: 1778, col: 38, offset: 67857},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1778, col: 67, offset: 67886},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1778, col: 76, offset: 67895},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1783, col: 1, offset: 68059},
			expr: &actionExpr{
				pos: position{line: 1783, col: 18, offset: 68076},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1783, col: 18, offset: 68076},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1783, col: 19, offset: 68077},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1783, col: 19, offset: 68077},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1783, col: 27, offset: 68085},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1783, col: 37, offset: 68095},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1783, col: 45, offset: 68103},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1783, col: 55, offset: 68113},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1783, col: 63, offset: 68121},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1783, col: 72, offset: 68130},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1791, col: 1, offset: 68388},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1791, col: 23, offset: 68410},
				expr: &ruleRefExpr{
					pos:  position{line: 1791, col: 23, offset: 68410},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1793, col: 1, offset: 68433},
			expr: &actionExpr{
				pos: position{line: 1794, col: 5, offset: 68461},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1794, col: 5, offset: 68461},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1794, col: 5, offset: 68461},
							expr: &ruleRefExpr{
								pos:  position{line: 1794, col: 6, offset: 68462},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1794, col: 10, offset: 68466},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1794, col: 19, offset: 68475},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1794, col: 19, offset: 68475},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1795, col: 15, offset: 68501},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1796, col: 15, offset: 68530},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1797, col: 15, offset: 68556},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1798, col: 15, offset: 68585},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1799, col: 15, offset: 68617},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1800, col: 15, offset: 68651},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1801, col: 15, offset: 68683},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1802, col: 15, offset: 68723},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1803, col: 15, offset: 68753},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1804, col: 15, offset: 68782},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1805, col: 15, offset: 68819},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1806, col: 15, offset: 68850},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1807, col: 15, offset: 68892},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1811, col: 1, offset: 68945},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1811, col: 22, offset: 68966},
				expr: &ruleRefExpr{
					pos:  position{line: 1811, col: 22, offset: 68966},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1813, col: 1, offset: 68988},
			expr: &actionExpr{
				pos: position{line: 1813, col: 22, offset: 69009},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1813, col: 22, offset: 69009},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1813, col: 22, offset: 69009},
							expr: &ruleRefExpr{
								pos:  position{line: 1813, col: 23, offset: 69010},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1813, col: 27, offset: 69014},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1813, col: 36, offset: 69023},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1813, col: 36, offset: 69023},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1813, col: 48, offset: 69035},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1817, col: 1, offset: 69089},
			expr: &actionExpr{
				pos: position{line: 1817, col: 24, offset: 69112},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1817, col: 24, offset: 69112},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1817, col: 30, offset: 69118},
						expr: &ruleRefExpr{
							pos:  position{line: 1817, col: 31, offset: 69119},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1821, col: 1, offset: 69213},
			expr: &actionExpr{
				pos: position{line: 1821, col: 28, offset: 69240},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1821, col: 28, offset: 69240},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1821, col: 28, offset: 69240},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1821, col: 37, offset: 69249},
								expr: &ruleRefExpr{
									pos:  position{line: 1821, col: 38, offset: 69250},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1821, col: 54, offset: 69266},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1828, col: 1, offset: 69515},
			expr: &actionExpr{
				pos: position{line: 1828, col: 10, offset: 69524},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1828, col: 10, offset: 69524},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1828, col: 10, offset: 69524},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1828, col: 16, offset: 69530},
								expr: &zeroOrMoreExpr{
									pos: position{line: 1828, col: 17, offset: 69531},
									expr: &ruleRefExpr{
										pos:  position{line: 1828, col: 17, offset: 69531},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1828, col: 31, offset: 69545},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1829, col: 5, offset: 69565},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1829, col: 12, offset: 69572},
								expr: &ruleRefExpr{
									pos:  position{line: 1829, col: 13, offset: 69573},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1830, col: 5, offset: 69596},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1830, col: 11, offset: 69602},
								expr: &ruleRefExpr{
									pos:  position{line: 1830, col: 12, offset: 69603},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1831, col: 6, offset: 69621},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1831, col: 6, offset: 69621},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1831, col: 23, offset: 69638},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1835, col: 1, offset: 69752},
			expr: &seqExpr{
				pos: position{line: 1835, col: 23, offset: 69774},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1835, col: 23, offset: 69774},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1835, col: 27, offset: 69778},
						expr: &ruleRefExpr{
							pos:  position{line: 1835, col: 27, offset: 69778},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1837, col: 1, offset: 69788},
			expr: &seqExpr{
				pos: position{line: 1837, col: 19, offset: 69806},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1837, col: 19, offset: 69806},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1837, col: 26, offset: 69813},
						expr: &ruleRefExpr{
							pos:  position{line: 1837, col: 26, offset: 69813},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1837, col: 33, offset: 69820},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1840, col: 1, offset: 69891},
			expr: &actionExpr{
				pos: position{line: 1840, col: 20, offset: 69910},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1840, col: 20, offset: 69910},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1840, col: 20, offset: 69910},
							expr: &ruleRefExpr{
								pos:  position{line: 1840, col: 21, offset: 69911},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1840, col: 36, offset: 69926},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1840, col: 42, offset: 69932},
								expr: &ruleRefExpr{
									pos:  position{line: 1840, col: 43, offset: 69933},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1840, col: 55, offset: 69945},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1840, col: 59, offset: 69949},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1844, col: 1, offset: 70021},
			expr: &actionExpr{
				pos: position{line: 1844, col: 14, offset: 70034},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1844, col: 14, offset: 70034},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1844, col: 14, offset: 70034},
							expr: &ruleRefExpr{
								pos:  position{line: 1844, col: 15, offset: 70035},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1844, col: 30, offset: 70050},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1844, col: 36, offset: 70056},
								expr: &ruleRefExpr{
									pos:  position{line: 1844, col: 37, offset: 70057},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1844, col: 49, offset: 70069},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1844, col: 53, offset: 70073},
							expr: &ruleRefExpr{
								pos:  position{line: 1844, col: 53, offset: 70073},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1848, col: 1, offset: 70146},
			expr: &actionExpr{
				pos: position{line: 1848, col: 14, offset: 70159},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1848, col: 14, offset: 70159},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1848, col: 14, offset: 70159},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1848, col: 33, offset: 70178},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1848, col: 42, offset: 70187},
								expr: &seqExpr{
									pos: position{line: 1848, col: 43, offset: 70188},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1848, col: 43, offset: 70188},
											expr: &ruleRefExpr{
												pos:  position{line: 1848, col: 44, offset: 70189},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1848, col: 63, offset: 70208},
											expr: &ruleRefExpr{
												pos:  position{line: 1848, col: 64, offset: 70209},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1848, col: 68, offset: 70213},
											expr: &ruleRefExpr{
												pos:  position{line: 1848, col: 68, offset: 70213},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1848, col: 75, offset: 70220},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1848, col: 89, offset: 70234},
											expr: &ruleRefExpr{
												pos:  position{line: 1848, col: 89, offset: 70234},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1855, col: 1, offset: 70490},
			expr: &seqExpr{
				pos: position{line: 1855, col: 26, offset: 70515},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1855, col: 26, offset: 70515},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1855, col: 33, offset: 70522},
						expr: &ruleRefExpr{
							pos:  position{line: 1855, col: 33, offset: 70522},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1855, col: 40, offset: 70529},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1857, col: 1, offset: 70536},
			expr: &seqExpr{
				pos: position{line: 1857, col: 31, offset: 70566},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1857, col: 31, offset: 70566},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1857, col: 38, offset: 70573},
						expr: &ruleRefExpr{
							pos:  position{line: 1857, col: 38, offset: 70573},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1857, col: 45, offset: 70580},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1859, col: 1, offset: 70587},
			expr: &choiceExpr{
				pos: position{line: 1859, col: 29, offset: 70615},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1859, col: 30, offset: 70616},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1859, col: 30, offset: 70616},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1859, col: 37, offset: 70623},
								expr: &ruleRefExpr{
									pos:  position{line: 1859, col: 37, offset: 70623},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1859, col: 44, offset: 70630},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1859, col: 51, offset: 70637},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1861, col: 1, offset: 70644},
			expr: &actionExpr{
				pos: position{line: 1861, col: 17, offset: 70660},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1861, col: 17, offset: 70660},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1861, col: 17, offset: 70660},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1861, col: 44, offset: 70687},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1861, col: 53, offset: 70696},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1861, col: 83, offset: 70726},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1865, col: 1, offset: 70840},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1865, col: 32, offset: 70871},
				expr: &actionExpr{
					pos: position{line: 1865, col: 33, offset: 70872},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1865, col: 33, offset: 70872},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1865, col: 33, offset: 70872},
								expr: &ruleRefExpr{
									pos:  position{line: 1865, col: 34, offset: 70873},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1865, col: 59, offset: 70898},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1865, col: 68, offset: 70907},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1869, col: 1, offset: 71052},
			expr: &actionExpr{
				pos: position{line: 1869, col: 22, offset: 71073},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1869, col: 22, offset: 71073},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1869, col: 22, offset: 71073},
							expr: &ruleRefExpr{
								pos:  position{line: 1869, col: 23, offset: 71074},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1869, col: 45, offset: 71096},
							expr: &ruleRefExpr{
								pos:  position{line: 1869, col: 45, offset: 71096},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1869, col: 52, offset: 71103},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1869, col: 57, offset: 71108},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1869, col: 66, offset: 71117},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1869, col: 92, offset: 71143},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1873, col: 1, offset: 71212},
			expr: &actionExpr{
				pos: position{line: 1873, col: 29, offset: 71240},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1873, col: 29, offset: 71240},
					expr: &charClassMatcher{
						pos:        position{line: 1873, col: 29, offset: 71240},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1881, col: 1, offset: 71561},
			expr: &choiceExpr{
				pos: position{line: 1881, col: 17, offset: 71577},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1881, col: 17, offset: 71577},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1881, col: 49, offset: 71609},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1881, col: 78, offset: 71638},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1883, col: 1, offset: 71676},
			expr: &litMatcher{
				pos:        position{line: 1883, col: 26, offset: 71701},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1886, col: 1, offset: 71776},
			expr: &actionExpr{
				pos: position{line: 1886, col: 31, offset: 71806},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1886, col: 31, offset: 71806},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1886, col: 31, offset: 71806},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1886, col: 42, offset: 71817},
								expr: &ruleRefExpr{
									pos:  position{line: 1886, col: 43, offset: 71818},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1886, col: 56, offset: 71831},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1886, col: 63, offset: 71838},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1891, col: 1, offset: 72073},
			expr: &actionExpr{
				pos: position{line: 1892, col: 5, offset: 72114},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1892, col: 5, offset: 72114},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1892, col: 5, offset: 72114},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1892, col: 16, offset: 72125},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1892, col: 16, offset: 72125},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1892, col: 16, offset: 72125},
											expr: &ruleRefExpr{
												pos:  position{line: 1892, col: 16, offset: 72125},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1892, col: 23, offset: 72132},
											expr: &charClassMatcher{
												pos:        position{line: 1892, col: 23, offset: 72132},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1894, col: 8, offset: 72187},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1895, col: 5, offset: 72251},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1895, col: 16, offset: 72262},
								expr: &actionExpr{
									pos: position{line: 1896, col: 9, offset: 72273},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1896, col: 9, offset: 72273},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1896, col: 9, offset: 72273},
												expr: &ruleRefExpr{
													pos:  position{line: 1896, col: 10, offset: 72274},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1897, col: 9, offset: 72294},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1897, col: 20, offset: 72305},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1897, col: 20, offset: 72305},
														expr: &charClassMatcher{
															pos:        position{line: 1897, col: 20, offset: 72305},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1899, col: 12, offset: 72368},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1906, col: 1, offset: 72605},
			expr: &actionExpr{
				pos: position{line: 1906, col: 39, offset: 72643},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1906, col: 39, offset: 72643},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1906, col: 39, offset: 72643},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1906, col: 50, offset: 72654},
								expr: &ruleRefExpr{
									pos:  position{line: 1906, col: 51, offset: 72655},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1907, col: 9, offset: 72677},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1907, col: 31, offset: 72699},
							expr: &ruleRefExpr{
								pos:  position{line: 1907, col: 31, offset: 72699},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1907, col: 38, offset: 72706},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1907, col: 46, offset: 72714},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1907, col: 53, offset: 72721},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1907, col: 95, offset: 72763},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1907, col: 96, offset: 72764},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1907, col: 96, offset: 72764},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1907, col: 118, offset: 72786},
											expr: &ruleRefExpr{
												pos:  position{line: 1907, col: 118, offset: 72786},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1907, col: 125, offset: 72793},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1907, col: 132, offset: 72800},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1912, col: 1, offset: 72964},
			expr: &actionExpr{
				pos: position{line: 1912, col: 44, offset: 73007},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1912, col: 44, offset: 73007},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1912, col: 50, offset: 73013},
						expr: &ruleRefExpr{
							pos:  position{line: 1912, col: 51, offset: 73014},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1916, col: 1, offset: 73102},
			expr: &actionExpr{
				pos: position{line: 1917, col: 5, offset: 73158},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1917, col: 5, offset: 73158},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1917, col: 5, offset: 73158},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1917, col: 11, offset: 73164},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1917, col: 11, offset: 73164},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1917, col: 11, offset: 73164},
											expr: &ruleRefExpr{
												pos:  position{line: 1917, col: 12, offset: 73165},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1917, col: 34, offset: 73187},
											expr: &charClassMatcher{
												pos:        position{line: 1917, col: 34, offset: 73187},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1919, col: 8, offset: 73242},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1924, col: 1, offset: 73373},
			expr: &actionExpr{
				pos: position{line: 1925, col: 5, offset: 73412},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1925, col: 5, offset: 73412},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1925, col: 5, offset: 73412},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1925, col: 16, offset: 73423},
								expr: &ruleRefExpr{
									pos:  position{line: 1925, col: 17, offset: 73424},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1926, col: 5, offset: 73442},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1933, col: 5, offset: 73656},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1933, col: 12, offset: 73663},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1937, col: 1, offset: 73817},
			expr: &actionExpr{
				pos: position{line: 1937, col: 16, offset: 73832},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1937, col: 16, offset: 73832},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1942, col: 1, offset: 73920},
			expr: &actionExpr{
				pos: position{line: 1942, col: 39, offset: 73958},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1942, col: 39, offset: 73958},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1942, col: 45, offset: 73964},
						expr: &ruleRefExpr{
							pos:  position{line: 1942, col: 46, offset: 73965},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1946, col: 1, offset: 74049},
			expr: &actionExpr{
				pos: position{line: 1946, col: 38, offset: 74086},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1946, col: 38, offset: 74086},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1946, col: 38, offset: 74086},
							expr: &ruleRefExpr{
								pos:  position{line: 1946, col: 39, offset: 74087},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1946, col: 49, offset: 74097},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1946, col: 58, offset: 74106},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1946, col: 58, offset: 74106},
									expr: &charClassMatcher{
										pos:        position{line: 1946, col: 58, offset: 74106},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1948, col: 4, offset: 74153},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1955, col: 1, offset: 74346},
			expr: &actionExpr{
				pos: position{line: 1955, col: 14, offset: 74359},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1955, col: 14, offset: 74359},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1955, col: 14, offset: 74359},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1955, col: 19, offset: 74364},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1955, col: 25, offset: 74370},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1955, col: 43, offset: 74388},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1959, col: 1, offset: 74457},
			expr: &actionExpr{
				pos: position{line: 1959, col: 21, offset: 74477},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1959, col: 21, offset: 74477},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1959, col: 30, offset: 74486},
						expr: &choiceExpr{
							pos: position{line: 1959, col: 31, offset: 74487},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1959, col: 31, offset: 74487},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 1959, col: 38, offset: 74494},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1959, col: 53, offset: 74509},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1959, col: 66, offset: 74522},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 1959, col: 74, offset: 74530},
									run: (*parser).callonIndexTermContent9,
									expr: &seqExpr{
										pos: position{line: 1959, col: 75, offset: 74531},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1959, col: 75, offset: 74531},
												expr: &litMatcher{
													pos:        position{line: 1959, col: 76, offset: 74532},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1959, col: 81, offset: 74537,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1965, col: 1, offset: 74649},
			expr: &actionExpr{
				pos: position{line: 1965, col: 23, offset: 74671},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1965, col: 23, offset: 74671},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1965, col: 23, offset: 74671},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 1965, col: 29, offset: 74677},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1965, col: 36, offset: 74684},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1966, col: 5, offset: 74717},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1966, col: 11, offset: 74723},
								expr: &actionExpr{
									pos: position{line: 1966, col: 12, offset: 74724},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1966, col: 12, offset: 74724},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1966, col: 12, offset: 74724},
												expr: &ruleRefExpr{
													pos:  position{line: 1966, col: 12, offset: 74724},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1966, col: 19, offset: 74731},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1966, col: 23, offset: 74735},
												expr: &ruleRefExpr{
													pos:  position{line: 1966, col: 23, offset: 74735},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1966, col: 30, offset: 74742},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1966, col: 39, offset: 74751},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1967, col: 5, offset: 74810},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1967, col: 11, offset: 74816},
								expr: &actionExpr{
									pos: position{line: 1967, col: 12, offset: 74817},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1967, col: 12, offset: 74817},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1967, col: 12, offset: 74817},
												expr: &ruleRefExpr{
													pos:  position{line: 1967, col: 12, offset: 74817},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1967, col: 19, offset: 74824},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1967, col: 23, offset: 74828},
												expr: &ruleRefExpr{
													pos:  position{line: 1967, col: 23, offset: 74828},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1967, col: 30, offset: 74835},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1967, col: 39, offset: 74844},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1968, col: 5, offset: 74903},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1972, col: 1, offset: 74986},
			expr: &actionExpr{
				pos: position{line: 1972, col: 30, offset: 75015},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1972, col: 30, offset: 75015},
					expr: &choiceExpr{
						pos: position{line: 1972, col: 31, offset: 75016},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1972, col: 31, offset: 75016},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1972, col: 42, offset: 75027},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1979, col: 1, offset: 75183},
			expr: &actionExpr{
				pos: position{line: 1979, col: 14, offset: 75196},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1979, col: 14, offset: 75196},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1979, col: 14, offset: 75196},
							expr: &ruleRefExpr{
								pos:  position{line: 1979, col: 15, offset: 75197},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1979, col: 19, offset: 75201},
							expr: &ruleRefExpr{
								pos:  position{line: 1979, col: 19, offset: 75201},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1979, col: 26, offset: 75208},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 1987, col: 1, offset: 75361},
			expr: &choiceExpr{
				pos: position{line: 1987, col: 11, offset: 75371},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1987, col: 11, offset: 75371},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1987, col: 24, offset: 75384},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 1987, col: 36, offset: 75396},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 1987, col: 48, offset: 75408},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 1987, col: 61, offset: 75421},
						name: "Ellipsis",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1989, col: 1, offset: 75433},
			expr: &actionExpr{
				pos: position{line: 1989, col: 15, offset: 75447},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 1989, col: 15, offset: 75447},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 1992, col: 1, offset: 75503},
			expr: &actionExpr{
				pos: position{line: 1992, col: 14, offset: 75516},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 1992, col: 14, offset: 75516},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 1995, col: 1, offset: 75573},
			expr: &actionExpr{
				pos: position{line: 1995, col: 14, offset: 75586},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 1995, col: 14, offset: 75586},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 1998, col: 1, offset: 75644},
			expr: &actionExpr{
				pos: position{line: 1998, col: 15, offset: 75658},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 1998, col: 15, offset: 75658},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2001, col: 1, offset: 75715},
			expr: &actionExpr{
				pos: position{line: 2001, col: 13, offset: 75727},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2001, col: 13, offset: 75727},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2009, col: 1, offset: 76010},
			expr: &actionExpr{
				pos: position{line: 2009, col: 22, offset: 76031},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2009, col: 22, offset: 76031},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2009, col: 22, offset: 76031},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2009, col: 31, offset: 76040},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2009, col: 35, offset: 76044},
							expr: &charClassMatcher{
								pos:        position{line: 2009, col: 36, offset: 76045},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2016, col: 1, offset: 76232},
			expr: &charClassMatcher{
				pos:        position{line: 2016, col: 13, offset: 76244},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2018, col: 1, offset: 76256},
			expr: &choiceExpr{
				pos: position{line: 2018, col: 16, offset: 76271},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2018, col: 16, offset: 76271},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2018, col: 22, offset: 76277},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2018, col: 28, offset: 76283},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2018, col: 34, offset: 76289},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2018, col: 40, offset: 76295},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2018, col: 46, offset: 76301},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2020, col: 1, offset: 76309},
			expr: &actionExpr{
				pos: position{line: 2020, col: 14, offset: 76322},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2020, col: 14, offset: 76322},
					expr: &charClassMatcher{
						pos:        position{line: 2020, col: 14, offset: 76322},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2024, col: 1, offset: 76372},
			expr: &choiceExpr{
				pos: position{line: 2028, col: 5, offset: 76703},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2028, col: 5, offset: 76703},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2028, col: 5, offset: 76703},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2028, col: 5, offset: 76703},
									expr: &charClassMatcher{
										pos:        position{line: 2028, col: 5, offset: 76703},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2028, col: 15, offset: 76713},
									expr: &choiceExpr{
										pos: position{line: 2028, col: 17, offset: 76715},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2028, col: 17, offset: 76715},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2028, col: 30, offset: 76728},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2030, col: 9, offset: 76800},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2030, col: 9, offset: 76800},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2030, col: 9, offset: 76800},
									expr: &charClassMatcher{
										pos:        position{line: 2030, col: 9, offset: 76800},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2030, col: 19, offset: 76810},
									expr: &seqExpr{
										pos: position{line: 2030, col: 20, offset: 76811},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2030, col: 20, offset: 76811},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2030, col: 27, offset: 76818},
												expr: &charClassMatcher{
													pos:        position{line: 2030, col: 27, offset: 76818},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2034, col: 1, offset: 76898},
			expr: &choiceExpr{
				pos: position{line: 2035, col: 5, offset: 76980},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2035, col: 5, offset: 76980},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2035, col: 5, offset: 76980},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2035, col: 5, offset: 76980},
									expr: &charClassMatcher{
										pos:        position{line: 2035, col: 5, offset: 76980},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2035, col: 19, offset: 76994},
									expr: &choiceExpr{
										pos: position{line: 2035, col: 21, offset: 76996},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2035, col: 21, offset: 76996},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2035, col: 31, offset: 77006},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2037, col: 9, offset: 77077},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2040, col: 1, offset: 77180},
			expr: &actionExpr{
				pos: position{line: 2040, col: 12, offset: 77191},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2040, col: 12, offset: 77191},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2044, col: 1, offset: 77260},
			expr: &actionExpr{
				pos: position{line: 2044, col: 17, offset: 77276},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2044, col: 17, offset: 77276},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2044, col: 22, offset: 77281},
						expr: &choiceExpr{
							pos: position{line: 2044, col: 23, offset: 77282},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2044, col: 23, offset: 77282},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2044, col: 34, offset: 77293},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2048, col: 1, offset: 77381},
			expr: &actionExpr{
				pos: position{line: 2048, col: 25, offset: 77405},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2048, col: 25, offset: 77405},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2048, col: 30, offset: 77410},
						expr: &charClassMatcher{
							pos:        position{line: 2048, col: 31, offset: 77411},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2052, col: 1, offset: 77487},
			expr: &actionExpr{
				pos: position{line: 2052, col: 13, offset: 77499},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2052, col: 13, offset: 77499},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2052, col: 13, offset: 77499},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2052, col: 20, offset: 77506},
								expr: &ruleRefExpr{
									pos:  position{line: 2052, col: 21, offset: 77507},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2052, col: 34, offset: 77520},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2052, col: 39, offset: 77525},
								expr: &choiceExpr{
									pos: position{line: 2052, col: 40, offset: 77526},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2052, col: 40, offset: 77526},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2052, col: 51, offset: 77537},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2056, col: 1, offset: 77629},
			expr: &actionExpr{
				pos: position{line: 2056, col: 23, offset: 77651},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2056, col: 23, offset: 77651},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2056, col: 23, offset: 77651},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2056, col: 31, offset: 77659},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2056, col: 43, offset: 77671},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2056, col: 48, offset: 77676},
								expr: &choiceExpr{
									pos: position{line: 2056, col: 49, offset: 77677},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2056, col: 49, offset: 77677},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2056, col: 60, offset: 77688},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2060, col: 1, offset: 77780},
			expr: &oneOrMoreExpr{
				pos: position{line: 2060, col: 13, offset: 77792},
				expr: &charClassMatcher{
					pos:        position{line: 2060, col: 14, offset: 77793},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2062, col: 1, offset: 77929},
			expr: &actionExpr{
				pos: position{line: 2062, col: 21, offset: 77949},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2062, col: 21, offset: 77949},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2062, col: 21, offset: 77949},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2062, col: 29, offset: 77957},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2062, col: 41, offset: 77969},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2062, col: 47, offset: 77975},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2067, col: 1, offset: 78228},
			expr: &oneOrMoreExpr{
				pos: position{line: 2067, col: 22, offset: 78249},
				expr: &charClassMatcher{
					pos:        position{line: 2067, col: 23, offset: 78250},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2069, col: 1, offset: 78384},
			expr: &actionExpr{
				pos: position{line: 2069, col: 9, offset: 78392},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2069, col: 9, offset: 78392},
					expr: &charClassMatcher{
						pos:        position{line: 2069, col: 9, offset: 78392},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2073, col: 1, offset: 78444},
			expr: &choiceExpr{
				pos: position{line: 2073, col: 15, offset: 78458},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2073, col: 15, offset: 78458},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2073, col: 27, offset: 78470},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2073, col: 40, offset: 78483},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2073, col: 51, offset: 78494},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2073, col: 62, offset: 78505},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2075, col: 1, offset: 78518},
			expr: &actionExpr{
				pos: position{line: 2075, col: 7, offset: 78524},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2075, col: 7, offset: 78524},
					expr: &charClassMatcher{
						pos:        position{line: 2075, col: 7, offset: 78524},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2079, col: 1, offset: 78653},
			expr: &actionExpr{
				pos: position{line: 2079, col: 10, offset: 78662},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2079, col: 10, offset: 78662},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2083, col: 1, offset: 78708},
			expr: &actionExpr{
				pos: position{line: 2083, col: 11, offset: 78718},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2083, col: 11, offset: 78718},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2083, col: 11, offset: 78718},
							expr: &litMatcher{
								pos:        position{line: 2083, col: 11, offset: 78718},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2083, col: 16, offset: 78723},
							expr: &ruleRefExpr{
								pos:  position{line: 2083, col: 16, offset: 78723},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2087, col: 1, offset: 78779},
			expr: &choiceExpr{
				pos: position{line: 2087, col: 10, offset: 78788},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2087, col: 10, offset: 78788},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2087, col: 16, offset: 78794},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2087, col: 16, offset: 78794},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2091, col: 1, offset: 78839},
			expr: &choiceExpr{
				pos: position{line: 2091, col: 12, offset: 78850},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2091, col: 12, offset: 78850},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2091, col: 21, offset: 78859},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2091, col: 28, offset: 78866},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2093, col: 1, offset: 78874},
			expr: &notExpr{
				pos: position{line: 2093, col: 8, offset: 78881},
				expr: &anyMatcher{
					line: 2093, col: 9, offset: 78882,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2095, col: 1, offset: 78887},
			expr: &choiceExpr{
				pos: position{line: 2095, col: 8, offset: 78894},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2095, col: 8, offset: 78894},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2095, col: 18, offset: 78904},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {

	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {

	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {

	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {

	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {

	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {

	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {

	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {

	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {

	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttributeSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["name"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {

	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {

	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {

	return types.NewElementStyle(style.(string))
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional2, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional3, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {

	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {

	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {

	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {

	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {

	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {

	return types.NewElementOption(option.(string))
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {

	return value.(string), nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onInlinePositionalValue1(value interface{}) (interface{}, error) {

	return value.(string), nil
}

func (p *parser) callonInlinePositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePositionalValue1(stack["value"])
}

func (c *current) onInlineValuePlain1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonInlineValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineValuePlain1()
}

func (c *current) onShortHandValuePlain1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1()
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(key.(string), value.(string))
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted1() (interface{}, error) {

	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1()
}

func (c *current) onAttrValueDoubleQuoted1() (interface{}, error) {

	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1()
}

func (c *current) onAttrValueNone1() (interface{}, error) {

	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {

	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {

	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {

	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {

	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {

	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {

	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {

	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {

	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {

	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {

	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {

	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {

	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {

	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {

	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {

	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {

	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {

	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {

	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {

	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {

	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["attributes"])
}

func (c *current) onParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onParagraph31(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph31(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockVerbatimContent2(stack["content"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {

	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {

	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {

	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {

	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {

	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {

	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {

	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement19(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement19(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttrs interface{}) (interface{}, error) {

	return types.NewImageBlock(path.(types.Location), inlineAttrs.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImage1(path, inlineAttrs interface{}) (interface{}, error) {

	return types.NewInlineImage(path.(types.Location), inlineAttrs.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImageAttrs1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonInlineImageAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttrs1(stack["attrs"])
}

func (c *current) onImageAttrList1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["attrs"])
}

func (c *current) onImageAltAttrInline1(value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(types.AttrImageAlt, value.(string))
}

func (p *parser) callonImageAltAttrInline1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttrInline1(stack["value"])
}

func (c *current) onImageAltAttr1(value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(types.AttrImageAlt, value.(string))
}

func (p *parser) callonImageAltAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttr1(stack["value"])
}

func (c *current) onImageWidthAttr1(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageWidth, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageWidthAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttr1(stack["value"])
}

func (c *current) onImageHeightAttr1(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageHeight, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageHeightAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttr1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(iconClass, inlineAttributes interface{}) (interface{}, error) {

	return types.NewIcon(iconClass.(string), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["iconClass"], stack["inlineAttributes"])
}

func (c *current) onIconAttributes1(size, others interface{}) (interface{}, error) {

	return types.NewIconAttributes(size, others.([]interface{}))
}

func (p *parser) callonIconAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttributes1(stack["size"], stack["others"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {

	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {

	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {

	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {

	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {

	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {

	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonPassthroughBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockVerbatimContent2(stack["content"])
}

func (c *current) onThematicBreak1() (interface{}, error) {

	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {

	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {

	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {

	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {

	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent9() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonIndexTermContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {

	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {

	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {

	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {

	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {

	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {

	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {

	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {

	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onAlphanums1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {

	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
