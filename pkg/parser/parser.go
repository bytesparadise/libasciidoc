// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DraftAsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 324},
			expr: &actionExpr{
				pos: position{line: 17, col: 26, offset: 349},
				run: (*parser).callonDraftAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 26, offset: 349},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 26, offset: 349},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 39, offset: 362},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 39, offset: 362},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 53, offset: 376},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 61, offset: 384},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 85, offset: 408},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DraftAsciidocDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 488},
			expr: &actionExpr{
				pos: position{line: 21, col: 46, offset: 533},
				run: (*parser).callonDraftAsciidocDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 46, offset: 533},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 46, offset: 533},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 59, offset: 546},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 59, offset: 546},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 73, offset: 560},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 81, offset: 568},
								name: "AsciidocDocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 125, offset: 612},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DraftTextDocument",
			pos:  position{line: 25, col: 1, offset: 692},
			expr: &actionExpr{
				pos: position{line: 25, col: 22, offset: 713},
				run: (*parser).callonDraftTextDocument1,
				expr: &seqExpr{
					pos: position{line: 25, col: 22, offset: 713},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 25, col: 22, offset: 713},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 30, offset: 721},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 25, col: 50, offset: 741},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 32, col: 1, offset: 924},
			expr: &actionExpr{
				pos: position{line: 32, col: 27, offset: 950},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 32, col: 27, offset: 950},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 32, col: 27, offset: 950},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 32, col: 35, offset: 958},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 35, offset: 958},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 32, col: 52, offset: 975},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 32, col: 60, offset: 983},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 60, offset: 983},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 41, col: 1, offset: 1232},
			expr: &actionExpr{
				pos: position{line: 41, col: 18, offset: 1249},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 41, col: 18, offset: 1249},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 41, col: 18, offset: 1249},
							expr: &ruleRefExpr{
								pos:  position{line: 41, col: 19, offset: 1250},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 42, col: 5, offset: 1259},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 42, col: 12, offset: 1266},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 42, col: 12, offset: 1266},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1292},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1311},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1336},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1360},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1414},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1436},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1455},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1506},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1530},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 52, col: 11, offset: 1570},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 53, col: 11, offset: 1604},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 54, col: 11, offset: 1635},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 55, col: 11, offset: 1660},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 59, col: 1, offset: 1698},
			expr: &labeledExpr{
				pos:   position{line: 59, col: 47, offset: 1744},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 59, col: 54, offset: 1751},
					expr: &ruleRefExpr{
						pos:  position{line: 59, col: 55, offset: 1752},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 61, col: 1, offset: 1789},
			expr: &actionExpr{
				pos: position{line: 61, col: 38, offset: 1826},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 61, col: 38, offset: 1826},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 61, col: 38, offset: 1826},
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 39, offset: 1827},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 62, col: 5, offset: 1836},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 62, col: 12, offset: 1843},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 62, col: 12, offset: 1843},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1868},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1892},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1917},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1939},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1958},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 2009},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2033},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2073},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2107},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2138},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2163},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 77, col: 1, offset: 2201},
			expr: &labeledExpr{
				pos:   position{line: 77, col: 23, offset: 2223},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 77, col: 30, offset: 2230},
					expr: &ruleRefExpr{
						pos:  position{line: 77, col: 31, offset: 2231},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 79, col: 1, offset: 2252},
			expr: &actionExpr{
				pos: position{line: 79, col: 22, offset: 2273},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 79, col: 22, offset: 2273},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 79, col: 22, offset: 2273},
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 23, offset: 2274},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 80, col: 5, offset: 2283},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 80, col: 12, offset: 2290},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 80, col: 12, offset: 2290},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 24, offset: 2302},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 87, col: 1, offset: 2448},
			expr: &ruleRefExpr{
				pos:  position{line: 87, col: 16, offset: 2463},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 89, col: 1, offset: 2481},
			expr: &actionExpr{
				pos: position{line: 89, col: 20, offset: 2500},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 89, col: 20, offset: 2500},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 89, col: 20, offset: 2500},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 89, col: 41, offset: 2521},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 89, col: 49, offset: 2529},
								expr: &ruleRefExpr{
									pos:  position{line: 89, col: 50, offset: 2530},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 75, offset: 2555},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 93, col: 1, offset: 2635},
			expr: &seqExpr{
				pos: position{line: 93, col: 26, offset: 2660},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 93, col: 26, offset: 2660},
						val:        "---",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 32, offset: 2666},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 95, col: 1, offset: 2672},
			expr: &actionExpr{
				pos: position{line: 95, col: 27, offset: 2698},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 95, col: 27, offset: 2698},
					expr: &oneOrMoreExpr{
						pos: position{line: 95, col: 28, offset: 2699},
						expr: &seqExpr{
							pos: position{line: 95, col: 29, offset: 2700},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 95, col: 29, offset: 2700},
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 30, offset: 2701},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 95, col: 51, offset: 2722,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 102, col: 1, offset: 2888},
			expr: &actionExpr{
				pos: position{line: 102, col: 19, offset: 2906},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 102, col: 19, offset: 2906},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 102, col: 19, offset: 2906},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 102, col: 23, offset: 2910},
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 23, offset: 2910},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 27, offset: 2914},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 34, offset: 2921},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 49, offset: 2936},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 102, col: 53, offset: 2940},
								expr: &ruleRefExpr{
									pos:  position{line: 102, col: 53, offset: 2940},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 71, offset: 2958},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 103, col: 9, offset: 2970},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 103, col: 18, offset: 2979},
								expr: &ruleRefExpr{
									pos:  position{line: 103, col: 18, offset: 2979},
									name: "DocumentAuthors",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 9, offset: 3006},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 104, col: 19, offset: 3016},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 19, offset: 3016},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 109, col: 1, offset: 3125},
			expr: &choiceExpr{
				pos: position{line: 109, col: 20, offset: 3144},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 109, col: 20, offset: 3144},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 109, col: 48, offset: 3172},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 111, col: 1, offset: 3202},
			expr: &actionExpr{
				pos: position{line: 111, col: 30, offset: 3231},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 111, col: 30, offset: 3231},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 111, col: 30, offset: 3231},
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 30, offset: 3231},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 111, col: 34, offset: 3235},
							expr: &litMatcher{
								pos:        position{line: 111, col: 35, offset: 3236},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 39, offset: 3240},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 111, col: 48, offset: 3249},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 48, offset: 3249},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 111, col: 65, offset: 3266},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 115, col: 1, offset: 3336},
			expr: &actionExpr{
				pos: position{line: 115, col: 33, offset: 3368},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 115, col: 33, offset: 3368},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 115, col: 33, offset: 3368},
							expr: &ruleRefExpr{
								pos:  position{line: 115, col: 33, offset: 3368},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 115, col: 37, offset: 3372},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 115, col: 48, offset: 3383},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 115, col: 56, offset: 3391},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 115, col: 72, offset: 3407},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 119, col: 1, offset: 3486},
			expr: &actionExpr{
				pos: position{line: 119, col: 19, offset: 3504},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 119, col: 19, offset: 3504},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 119, col: 19, offset: 3504},
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 19, offset: 3504},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 23, offset: 3508},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 33, offset: 3518},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 53, offset: 3538},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 119, col: 59, offset: 3544},
								expr: &ruleRefExpr{
									pos:  position{line: 119, col: 60, offset: 3545},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 119, col: 82, offset: 3567},
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 82, offset: 3567},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 119, col: 86, offset: 3571},
							expr: &litMatcher{
								pos:        position{line: 119, col: 86, offset: 3571},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 119, col: 91, offset: 3576},
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 91, offset: 3576},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 124, col: 1, offset: 3718},
			expr: &actionExpr{
				pos: position{line: 124, col: 23, offset: 3740},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 124, col: 23, offset: 3740},
					expr: &choiceExpr{
						pos: position{line: 124, col: 24, offset: 3741},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 124, col: 24, offset: 3741},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 124, col: 37, offset: 3754},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 124, col: 37, offset: 3754},
										expr: &litMatcher{
											pos:        position{line: 124, col: 38, offset: 3755},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 124, col: 42, offset: 3759},
										expr: &litMatcher{
											pos:        position{line: 124, col: 43, offset: 3760},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 124, col: 47, offset: 3764},
										expr: &ruleRefExpr{
											pos:  position{line: 124, col: 48, offset: 3765},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 124, col: 56, offset: 3773,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 128, col: 1, offset: 3814},
			expr: &actionExpr{
				pos: position{line: 128, col: 24, offset: 3837},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 128, col: 24, offset: 3837},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 128, col: 24, offset: 3837},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 128, col: 28, offset: 3841},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 128, col: 35, offset: 3848},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 128, col: 35, offset: 3848},
									expr: &choiceExpr{
										pos: position{line: 128, col: 36, offset: 3849},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 128, col: 36, offset: 3849},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 128, col: 49, offset: 3862},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 128, col: 49, offset: 3862},
														expr: &litMatcher{
															pos:        position{line: 128, col: 50, offset: 3863},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 128, col: 54, offset: 3867},
														expr: &ruleRefExpr{
															pos:  position{line: 128, col: 55, offset: 3868},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 128, col: 60, offset: 3873,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 130, col: 4, offset: 3914},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 136, col: 1, offset: 4075},
			expr: &actionExpr{
				pos: position{line: 136, col: 21, offset: 4095},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 136, col: 21, offset: 4095},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 136, col: 21, offset: 4095},
							expr: &ruleRefExpr{
								pos:  position{line: 136, col: 21, offset: 4095},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 136, col: 25, offset: 4099},
							expr: &litMatcher{
								pos:        position{line: 136, col: 26, offset: 4100},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 136, col: 30, offset: 4104},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 137, col: 9, offset: 4123},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 137, col: 10, offset: 4124},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 137, col: 10, offset: 4124},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 137, col: 10, offset: 4124},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 137, col: 21, offset: 4135},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 137, col: 45, offset: 4159},
													expr: &litMatcher{
														pos:        position{line: 137, col: 45, offset: 4159},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 137, col: 50, offset: 4164},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 137, col: 58, offset: 4172},
														expr: &ruleRefExpr{
															pos:  position{line: 137, col: 59, offset: 4173},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 137, col: 82, offset: 4196},
													expr: &litMatcher{
														pos:        position{line: 137, col: 82, offset: 4196},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 137, col: 87, offset: 4201},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 137, col: 97, offset: 4211},
														expr: &ruleRefExpr{
															pos:  position{line: 137, col: 98, offset: 4212},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 139, col: 15, offset: 4329},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 139, col: 15, offset: 4329},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 139, col: 15, offset: 4329},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 139, col: 24, offset: 4338},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 139, col: 46, offset: 4360},
													expr: &litMatcher{
														pos:        position{line: 139, col: 46, offset: 4360},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 139, col: 51, offset: 4365},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 139, col: 61, offset: 4375},
														expr: &ruleRefExpr{
															pos:  position{line: 139, col: 62, offset: 4376},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 141, col: 13, offset: 4485},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 146, col: 1, offset: 4615},
			expr: &choiceExpr{
				pos: position{line: 146, col: 27, offset: 4641},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 146, col: 27, offset: 4641},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 146, col: 27, offset: 4641},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 146, col: 27, offset: 4641},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 146, col: 32, offset: 4646},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 146, col: 39, offset: 4653},
									expr: &choiceExpr{
										pos: position{line: 146, col: 40, offset: 4654},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 146, col: 40, offset: 4654},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 146, col: 52, offset: 4666},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 146, col: 62, offset: 4676},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 146, col: 62, offset: 4676},
														expr: &ruleRefExpr{
															pos:  position{line: 146, col: 63, offset: 4677},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 146, col: 67, offset: 4681},
														expr: &litMatcher{
															pos:        position{line: 146, col: 68, offset: 4682},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 146, col: 72, offset: 4686},
														expr: &litMatcher{
															pos:        position{line: 146, col: 73, offset: 4687},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 146, col: 78, offset: 4692,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 148, col: 5, offset: 4734},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 148, col: 5, offset: 4734},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 148, col: 5, offset: 4734},
									expr: &litMatcher{
										pos:        position{line: 148, col: 5, offset: 4734},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 148, col: 11, offset: 4740},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 148, col: 18, offset: 4747},
									expr: &choiceExpr{
										pos: position{line: 148, col: 19, offset: 4748},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 148, col: 19, offset: 4748},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 148, col: 31, offset: 4760},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 148, col: 41, offset: 4770},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 148, col: 41, offset: 4770},
														expr: &ruleRefExpr{
															pos:  position{line: 148, col: 42, offset: 4771},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 148, col: 46, offset: 4775},
														expr: &litMatcher{
															pos:        position{line: 148, col: 47, offset: 4776},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 148, col: 51, offset: 4780},
														expr: &litMatcher{
															pos:        position{line: 148, col: 52, offset: 4781},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 148, col: 57, offset: 4786,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 148, col: 62, offset: 4791},
									expr: &ruleRefExpr{
										pos:  position{line: 148, col: 62, offset: 4791},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 148, col: 66, offset: 4795},
									expr: &litMatcher{
										pos:        position{line: 148, col: 67, offset: 4796},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 152, col: 1, offset: 4836},
			expr: &actionExpr{
				pos: position{line: 152, col: 25, offset: 4860},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 152, col: 25, offset: 4860},
					expr: &choiceExpr{
						pos: position{line: 152, col: 26, offset: 4861},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 152, col: 26, offset: 4861},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 152, col: 38, offset: 4873},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 152, col: 48, offset: 4883},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 152, col: 48, offset: 4883},
										expr: &ruleRefExpr{
											pos:  position{line: 152, col: 49, offset: 4884},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 152, col: 53, offset: 4888},
										expr: &litMatcher{
											pos:        position{line: 152, col: 54, offset: 4889},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 152, col: 59, offset: 4894,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 156, col: 1, offset: 4935},
			expr: &actionExpr{
				pos: position{line: 156, col: 27, offset: 4961},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 156, col: 27, offset: 4961},
					expr: &choiceExpr{
						pos: position{line: 156, col: 28, offset: 4962},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 156, col: 28, offset: 4962},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 156, col: 40, offset: 4974},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 156, col: 50, offset: 4984},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 156, col: 50, offset: 4984},
										expr: &ruleRefExpr{
											pos:  position{line: 156, col: 51, offset: 4985},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 156, col: 56, offset: 4990,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 163, col: 1, offset: 5146},
			expr: &actionExpr{
				pos: position{line: 163, col: 33, offset: 5178},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 163, col: 33, offset: 5178},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 163, col: 33, offset: 5178},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 163, col: 37, offset: 5182},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 163, col: 43, offset: 5188},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 163, col: 66, offset: 5211},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 163, col: 70, offset: 5215},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 163, col: 76, offset: 5221},
								expr: &actionExpr{
									pos: position{line: 163, col: 77, offset: 5222},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 163, col: 78, offset: 5223},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 163, col: 78, offset: 5223},
												expr: &ruleRefExpr{
													pos:  position{line: 163, col: 78, offset: 5223},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 163, col: 82, offset: 5227},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 163, col: 89, offset: 5234},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 163, col: 138, offset: 5283},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 170, col: 1, offset: 5532},
			expr: &actionExpr{
				pos: position{line: 170, col: 26, offset: 5557},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 170, col: 26, offset: 5557},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 170, col: 27, offset: 5558},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 170, col: 27, offset: 5558},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 170, col: 35, offset: 5566},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 170, col: 43, offset: 5574},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 170, col: 51, offset: 5582},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 170, col: 56, offset: 5587},
							expr: &choiceExpr{
								pos: position{line: 170, col: 57, offset: 5588},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 170, col: 57, offset: 5588},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 170, col: 65, offset: 5596},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 170, col: 73, offset: 5604},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 170, col: 81, offset: 5612},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 174, col: 1, offset: 5654},
			expr: &actionExpr{
				pos: position{line: 174, col: 27, offset: 5680},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 174, col: 27, offset: 5680},
					expr: &seqExpr{
						pos: position{line: 174, col: 28, offset: 5681},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 174, col: 28, offset: 5681},
								expr: &ruleRefExpr{
									pos:  position{line: 174, col: 29, offset: 5682},
									name: "NEWLINE",
								},
							},
							&anyMatcher{
								line: 174, col: 37, offset: 5690,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 178, col: 1, offset: 5730},
			expr: &choiceExpr{
				pos: position{line: 178, col: 27, offset: 5756},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 178, col: 27, offset: 5756},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 178, col: 27, offset: 5756},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 178, col: 27, offset: 5756},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 178, col: 32, offset: 5761},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 178, col: 38, offset: 5767},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 178, col: 61, offset: 5790},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 178, col: 65, offset: 5794},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 180, col: 5, offset: 5863},
						run: (*parser).callonDocumentAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 180, col: 5, offset: 5863},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 180, col: 5, offset: 5863},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 180, col: 9, offset: 5867},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 15, offset: 5873},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 180, col: 38, offset: 5896},
									val:        "!:",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 180, col: 43, offset: 5901},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 184, col: 1, offset: 5969},
			expr: &actionExpr{
				pos: position{line: 184, col: 34, offset: 6002},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 184, col: 34, offset: 6002},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 184, col: 34, offset: 6002},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 184, col: 38, offset: 6006},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 44, offset: 6012},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 184, col: 67, offset: 6035},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 191, col: 1, offset: 6223},
			expr: &actionExpr{
				pos: position{line: 191, col: 22, offset: 6244},
				run: (*parser).callonElementAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 191, col: 22, offset: 6244},
					label: "attrs",
					expr: &oneOrMoreExpr{
						pos: position{line: 191, col: 28, offset: 6250},
						expr: &ruleRefExpr{
							pos:  position{line: 191, col: 29, offset: 6251},
							name: "ElementAttribute",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 195, col: 1, offset: 6341},
			expr: &actionExpr{
				pos: position{line: 195, col: 21, offset: 6361},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 195, col: 21, offset: 6361},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 195, col: 21, offset: 6361},
							expr: &choiceExpr{
								pos: position{line: 195, col: 23, offset: 6363},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 195, col: 23, offset: 6363},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 195, col: 29, offset: 6369},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 195, col: 35, offset: 6375},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 196, col: 5, offset: 6451},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 196, col: 11, offset: 6457},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 196, col: 11, offset: 6457},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 197, col: 9, offset: 6478},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 198, col: 9, offset: 6502},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 199, col: 9, offset: 6525},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 200, col: 9, offset: 6553},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 201, col: 9, offset: 6581},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 202, col: 9, offset: 6608},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 203, col: 9, offset: 6635},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 9, offset: 6672},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 205, col: 9, offset: 6700},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 210, col: 1, offset: 6883},
			expr: &choiceExpr{
				pos: position{line: 210, col: 24, offset: 6906},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 210, col: 24, offset: 6906},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 210, col: 42, offset: 6924},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 212, col: 1, offset: 6941},
			expr: &choiceExpr{
				pos: position{line: 212, col: 14, offset: 6954},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 212, col: 14, offset: 6954},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 212, col: 14, offset: 6954},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 212, col: 14, offset: 6954},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 212, col: 19, offset: 6959},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 212, col: 23, offset: 6963},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 212, col: 27, offset: 6967},
									val:        "]]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 212, col: 32, offset: 6972},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 214, col: 5, offset: 7026},
						run: (*parser).callonElementID9,
						expr: &seqExpr{
							pos: position{line: 214, col: 5, offset: 7026},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 214, col: 5, offset: 7026},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 214, col: 10, offset: 7031},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 214, col: 14, offset: 7035},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 214, col: 18, offset: 7039},
									val:        "]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 214, col: 23, offset: 7044},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 218, col: 1, offset: 7097},
			expr: &actionExpr{
				pos: position{line: 218, col: 20, offset: 7116},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 218, col: 20, offset: 7116},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 218, col: 20, offset: 7116},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 218, col: 25, offset: 7121},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 29, offset: 7125},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 218, col: 33, offset: 7129},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 218, col: 38, offset: 7134},
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 38, offset: 7134},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 224, col: 1, offset: 7408},
			expr: &actionExpr{
				pos: position{line: 224, col: 17, offset: 7424},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 224, col: 17, offset: 7424},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 224, col: 17, offset: 7424},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 224, col: 21, offset: 7428},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 224, col: 28, offset: 7435},
								run: (*parser).callonElementTitle5,
								expr: &seqExpr{
									pos: position{line: 224, col: 28, offset: 7435},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 224, col: 28, offset: 7435},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 224, col: 38, offset: 7445},
											expr: &choiceExpr{
												pos: position{line: 224, col: 39, offset: 7446},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 224, col: 39, offset: 7446},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 224, col: 51, offset: 7458},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 224, col: 61, offset: 7468},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 224, col: 61, offset: 7468},
																expr: &ruleRefExpr{
																	pos:  position{line: 224, col: 62, offset: 7469},
																	name: "NEWLINE",
																},
															},
															&anyMatcher{
																line: 224, col: 70, offset: 7477,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 226, col: 4, offset: 7518},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 232, col: 1, offset: 7670},
			expr: &actionExpr{
				pos: position{line: 232, col: 16, offset: 7685},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 232, col: 16, offset: 7685},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 232, col: 16, offset: 7685},
							val:        "[.",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 232, col: 21, offset: 7690},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 232, col: 27, offset: 7696},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 232, col: 27, offset: 7696},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 232, col: 27, offset: 7696},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 232, col: 37, offset: 7706},
											expr: &choiceExpr{
												pos: position{line: 232, col: 38, offset: 7707},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 232, col: 38, offset: 7707},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 232, col: 50, offset: 7719},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 232, col: 60, offset: 7729},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 232, col: 60, offset: 7729},
																expr: &ruleRefExpr{
																	pos:  position{line: 232, col: 61, offset: 7730},
																	name: "NEWLINE",
																},
															},
															&notExpr{
																pos: position{line: 232, col: 69, offset: 7738},
																expr: &litMatcher{
																	pos:        position{line: 232, col: 70, offset: 7739},
																	val:        "]",
																	ignoreCase: false,
																},
															},
															&anyMatcher{
																line: 232, col: 74, offset: 7743,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 234, col: 4, offset: 7784},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 234, col: 8, offset: 7788},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 238, col: 1, offset: 7845},
			expr: &actionExpr{
				pos: position{line: 238, col: 21, offset: 7865},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 238, col: 21, offset: 7865},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 238, col: 21, offset: 7865},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 238, col: 33, offset: 7877},
							expr: &ruleRefExpr{
								pos:  position{line: 238, col: 33, offset: 7877},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 238, col: 37, offset: 7881},
							name: "NEWLINE",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 243, col: 1, offset: 8013},
			expr: &actionExpr{
				pos: position{line: 243, col: 30, offset: 8042},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 243, col: 30, offset: 8042},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 243, col: 30, offset: 8042},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 243, col: 34, offset: 8046},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 243, col: 37, offset: 8049},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 243, col: 53, offset: 8065},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 243, col: 57, offset: 8069},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 248, col: 1, offset: 8225},
			expr: &actionExpr{
				pos: position{line: 248, col: 21, offset: 8245},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 248, col: 21, offset: 8245},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 248, col: 21, offset: 8245},
							val:        "[source",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 248, col: 31, offset: 8255},
							expr: &litMatcher{
								pos:        position{line: 248, col: 31, offset: 8255},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 248, col: 36, offset: 8260},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 248, col: 45, offset: 8269},
								expr: &actionExpr{
									pos: position{line: 248, col: 46, offset: 8270},
									run: (*parser).callonSourceAttributes8,
									expr: &oneOrMoreExpr{
										pos: position{line: 248, col: 46, offset: 8270},
										expr: &choiceExpr{
											pos: position{line: 248, col: 47, offset: 8271},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 248, col: 47, offset: 8271},
													name: "Alphanums",
												},
												&ruleRefExpr{
													pos:  position{line: 248, col: 59, offset: 8283},
													name: "Spaces",
												},
												&seqExpr{
													pos: position{line: 248, col: 69, offset: 8293},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 248, col: 69, offset: 8293},
															expr: &ruleRefExpr{
																pos:  position{line: 248, col: 70, offset: 8294},
																name: "NEWLINE",
															},
														},
														&notExpr{
															pos: position{line: 248, col: 78, offset: 8302},
															expr: &litMatcher{
																pos:        position{line: 248, col: 79, offset: 8303},
																val:        "]",
																ignoreCase: false,
															},
														},
														&anyMatcher{
															line: 248, col: 83, offset: 8307,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 250, col: 9, offset: 8357},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 250, col: 13, offset: 8361},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 255, col: 1, offset: 8486},
			expr: &actionExpr{
				pos: position{line: 255, col: 19, offset: 8504},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 255, col: 19, offset: 8504},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 255, col: 19, offset: 8504},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 255, col: 23, offset: 8508},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 255, col: 34, offset: 8519},
								expr: &ruleRefExpr{
									pos:  position{line: 255, col: 35, offset: 8520},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 255, col: 54, offset: 8539},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 255, col: 58, offset: 8543},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 259, col: 1, offset: 8616},
			expr: &choiceExpr{
				pos: position{line: 260, col: 5, offset: 8641},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 260, col: 5, offset: 8641},
						run: (*parser).callonGenericAttribute2,
						expr: &seqExpr{
							pos: position{line: 260, col: 5, offset: 8641},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 260, col: 5, offset: 8641},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 260, col: 10, offset: 8646},
										name: "AttributeKey",
									},
								},
								&litMatcher{
									pos:        position{line: 260, col: 24, offset: 8660},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 260, col: 28, offset: 8664},
									label: "value",
									expr: &zeroOrOneExpr{
										pos: position{line: 260, col: 34, offset: 8670},
										expr: &ruleRefExpr{
											pos:  position{line: 260, col: 35, offset: 8671},
											name: "AttributeValue",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 260, col: 52, offset: 8688},
									expr: &litMatcher{
										pos:        position{line: 260, col: 52, offset: 8688},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 260, col: 57, offset: 8693},
									expr: &ruleRefExpr{
										pos:  position{line: 260, col: 57, offset: 8693},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 262, col: 9, offset: 8798},
						run: (*parser).callonGenericAttribute14,
						expr: &seqExpr{
							pos: position{line: 262, col: 9, offset: 8798},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 262, col: 9, offset: 8798},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 262, col: 14, offset: 8803},
										name: "AttributeKey",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 262, col: 28, offset: 8817},
									expr: &litMatcher{
										pos:        position{line: 262, col: 28, offset: 8817},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 262, col: 33, offset: 8822},
									expr: &ruleRefExpr{
										pos:  position{line: 262, col: 33, offset: 8822},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 266, col: 1, offset: 8915},
			expr: &actionExpr{
				pos: position{line: 266, col: 17, offset: 8931},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 266, col: 17, offset: 8931},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 266, col: 17, offset: 8931},
							expr: &litMatcher{
								pos:        position{line: 266, col: 18, offset: 8932},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 266, col: 26, offset: 8940},
							expr: &litMatcher{
								pos:        position{line: 266, col: 27, offset: 8941},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 266, col: 35, offset: 8949},
							expr: &litMatcher{
								pos:        position{line: 266, col: 36, offset: 8950},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 266, col: 46, offset: 8960},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 47, offset: 8961},
								name: "Spaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 54, offset: 8968},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 266, col: 58, offset: 8972},
								expr: &choiceExpr{
									pos: position{line: 266, col: 59, offset: 8973},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 266, col: 59, offset: 8973},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 266, col: 71, offset: 8985},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 266, col: 92, offset: 9006},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 92, offset: 9006},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 270, col: 1, offset: 9046},
			expr: &actionExpr{
				pos: position{line: 270, col: 19, offset: 9064},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 270, col: 19, offset: 9064},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 270, col: 19, offset: 9064},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 270, col: 25, offset: 9070},
								expr: &choiceExpr{
									pos: position{line: 270, col: 26, offset: 9071},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 270, col: 26, offset: 9071},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 270, col: 38, offset: 9083},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 270, col: 47, offset: 9092},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 270, col: 68, offset: 9113},
							expr: &litMatcher{
								pos:        position{line: 270, col: 69, offset: 9114},
								val:        "=",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "OtherAttributeChar",
			pos:  position{line: 274, col: 1, offset: 9269},
			expr: &seqExpr{
				pos: position{line: 274, col: 24, offset: 9292},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 274, col: 24, offset: 9292},
						expr: &litMatcher{
							pos:        position{line: 274, col: 25, offset: 9293},
							val:        "=",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 274, col: 29, offset: 9297},
						expr: &litMatcher{
							pos:        position{line: 274, col: 30, offset: 9298},
							val:        ",",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 274, col: 34, offset: 9302},
						expr: &litMatcher{
							pos:        position{line: 274, col: 35, offset: 9303},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 274, col: 39, offset: 9307,
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 276, col: 1, offset: 9311},
			expr: &actionExpr{
				pos: position{line: 276, col: 21, offset: 9331},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 276, col: 21, offset: 9331},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 276, col: 21, offset: 9331},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 276, col: 36, offset: 9346},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 280, col: 1, offset: 9420},
			expr: &actionExpr{
				pos: position{line: 280, col: 20, offset: 9439},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 280, col: 20, offset: 9439},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 280, col: 20, offset: 9439},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 280, col: 29, offset: 9448},
							expr: &ruleRefExpr{
								pos:  position{line: 280, col: 29, offset: 9448},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 280, col: 33, offset: 9452},
							expr: &litMatcher{
								pos:        position{line: 280, col: 33, offset: 9452},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 280, col: 38, offset: 9457},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 280, col: 45, offset: 9464},
								expr: &ruleRefExpr{
									pos:  position{line: 280, col: 46, offset: 9465},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 280, col: 63, offset: 9482},
							expr: &litMatcher{
								pos:        position{line: 280, col: 63, offset: 9482},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 280, col: 68, offset: 9487},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 280, col: 74, offset: 9493},
								expr: &ruleRefExpr{
									pos:  position{line: 280, col: 75, offset: 9494},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 280, col: 92, offset: 9511},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 280, col: 96, offset: 9515},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 284, col: 1, offset: 9585},
			expr: &actionExpr{
				pos: position{line: 284, col: 20, offset: 9604},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 284, col: 20, offset: 9604},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 284, col: 20, offset: 9604},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 284, col: 29, offset: 9613},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 29, offset: 9613},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 284, col: 33, offset: 9617},
							expr: &litMatcher{
								pos:        position{line: 284, col: 33, offset: 9617},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 284, col: 38, offset: 9622},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 284, col: 45, offset: 9629},
								expr: &ruleRefExpr{
									pos:  position{line: 284, col: 46, offset: 9630},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 284, col: 63, offset: 9647},
							expr: &litMatcher{
								pos:        position{line: 284, col: 63, offset: 9647},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 284, col: 68, offset: 9652},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 284, col: 74, offset: 9658},
								expr: &ruleRefExpr{
									pos:  position{line: 284, col: 75, offset: 9659},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 284, col: 92, offset: 9676},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 284, col: 96, offset: 9680},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 288, col: 1, offset: 9768},
			expr: &actionExpr{
				pos: position{line: 288, col: 19, offset: 9786},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 288, col: 19, offset: 9786},
					expr: &choiceExpr{
						pos: position{line: 288, col: 20, offset: 9787},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 288, col: 20, offset: 9787},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 288, col: 32, offset: 9799},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 288, col: 42, offset: 9809},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 288, col: 42, offset: 9809},
										expr: &litMatcher{
											pos:        position{line: 288, col: 43, offset: 9810},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 288, col: 47, offset: 9814},
										expr: &litMatcher{
											pos:        position{line: 288, col: 48, offset: 9815},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 288, col: 52, offset: 9819},
										expr: &ruleRefExpr{
											pos:  position{line: 288, col: 53, offset: 9820},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 288, col: 57, offset: 9824,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 292, col: 1, offset: 9865},
			expr: &actionExpr{
				pos: position{line: 292, col: 21, offset: 9885},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 292, col: 21, offset: 9885},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 292, col: 21, offset: 9885},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 292, col: 25, offset: 9889},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 292, col: 31, offset: 9895},
								expr: &ruleRefExpr{
									pos:  position{line: 292, col: 32, offset: 9896},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 292, col: 51, offset: 9915},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 299, col: 1, offset: 10089},
			expr: &actionExpr{
				pos: position{line: 299, col: 12, offset: 10100},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 299, col: 12, offset: 10100},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 299, col: 12, offset: 10100},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 299, col: 23, offset: 10111},
								expr: &ruleRefExpr{
									pos:  position{line: 299, col: 24, offset: 10112},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 300, col: 5, offset: 10136},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 300, col: 12, offset: 10143},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 300, col: 12, offset: 10143},
									expr: &litMatcher{
										pos:        position{line: 300, col: 13, offset: 10144},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 304, col: 5, offset: 10235},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 308, col: 5, offset: 10387},
							expr: &ruleRefExpr{
								pos:  position{line: 308, col: 5, offset: 10387},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 308, col: 9, offset: 10391},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 308, col: 16, offset: 10398},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 308, col: 31, offset: 10413},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 308, col: 35, offset: 10417},
								expr: &ruleRefExpr{
									pos:  position{line: 308, col: 35, offset: 10417},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 308, col: 53, offset: 10435},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 312, col: 1, offset: 10548},
			expr: &actionExpr{
				pos: position{line: 312, col: 18, offset: 10565},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 312, col: 18, offset: 10565},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 312, col: 27, offset: 10574},
						expr: &seqExpr{
							pos: position{line: 312, col: 28, offset: 10575},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 312, col: 28, offset: 10575},
									expr: &ruleRefExpr{
										pos:  position{line: 312, col: 29, offset: 10576},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 312, col: 37, offset: 10584},
									expr: &ruleRefExpr{
										pos:  position{line: 312, col: 38, offset: 10585},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 312, col: 54, offset: 10601},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 316, col: 1, offset: 10722},
			expr: &actionExpr{
				pos: position{line: 316, col: 17, offset: 10738},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 316, col: 17, offset: 10738},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 316, col: 26, offset: 10747},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 316, col: 26, offset: 10747},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 317, col: 11, offset: 10768},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 318, col: 11, offset: 10786},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 319, col: 11, offset: 10811},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 320, col: 11, offset: 10833},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 321, col: 11, offset: 10856},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 322, col: 11, offset: 10871},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 323, col: 11, offset: 10896},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 324, col: 11, offset: 10917},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 325, col: 11, offset: 10957},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 326, col: 11, offset: 10977},
								name: "OtherWord",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsMacro",
			pos:  position{line: 333, col: 1, offset: 11130},
			expr: &seqExpr{
				pos: position{line: 333, col: 25, offset: 11154},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 333, col: 25, offset: 11154},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 35, offset: 11164},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 338, col: 1, offset: 11275},
			expr: &actionExpr{
				pos: position{line: 338, col: 19, offset: 11293},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 338, col: 19, offset: 11293},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 338, col: 19, offset: 11293},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 25, offset: 11299},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 338, col: 40, offset: 11314},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 338, col: 45, offset: 11319},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 52, offset: 11326},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 68, offset: 11342},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 75, offset: 11349},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 342, col: 1, offset: 11490},
			expr: &actionExpr{
				pos: position{line: 342, col: 20, offset: 11509},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 342, col: 20, offset: 11509},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 342, col: 20, offset: 11509},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 26, offset: 11515},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 342, col: 41, offset: 11530},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 342, col: 45, offset: 11534},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 52, offset: 11541},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 342, col: 68, offset: 11557},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 75, offset: 11564},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 346, col: 1, offset: 11706},
			expr: &actionExpr{
				pos: position{line: 346, col: 18, offset: 11723},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 346, col: 18, offset: 11723},
					expr: &choiceExpr{
						pos: position{line: 346, col: 19, offset: 11724},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 346, col: 19, offset: 11724},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 346, col: 33, offset: 11738},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 346, col: 39, offset: 11744},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 350, col: 1, offset: 11786},
			expr: &actionExpr{
				pos: position{line: 350, col: 19, offset: 11804},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 350, col: 19, offset: 11804},
					expr: &choiceExpr{
						pos: position{line: 350, col: 20, offset: 11805},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 350, col: 20, offset: 11805},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 350, col: 33, offset: 11818},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 350, col: 33, offset: 11818},
										expr: &ruleRefExpr{
											pos:  position{line: 350, col: 34, offset: 11819},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 350, col: 37, offset: 11822},
										expr: &litMatcher{
											pos:        position{line: 350, col: 38, offset: 11823},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 350, col: 42, offset: 11827},
										expr: &litMatcher{
											pos:        position{line: 350, col: 43, offset: 11828},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 350, col: 47, offset: 11832},
										expr: &ruleRefExpr{
											pos:  position{line: 350, col: 48, offset: 11833},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 350, col: 52, offset: 11837,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 354, col: 1, offset: 11878},
			expr: &actionExpr{
				pos: position{line: 354, col: 24, offset: 11901},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 354, col: 24, offset: 11901},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 354, col: 24, offset: 11901},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 354, col: 28, offset: 11905},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 354, col: 34, offset: 11911},
								expr: &ruleRefExpr{
									pos:  position{line: 354, col: 35, offset: 11912},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 354, col: 54, offset: 11931},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 361, col: 1, offset: 12111},
			expr: &actionExpr{
				pos: position{line: 361, col: 18, offset: 12128},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 361, col: 18, offset: 12128},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 361, col: 18, offset: 12128},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 361, col: 24, offset: 12134},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 361, col: 24, offset: 12134},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 361, col: 24, offset: 12134},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 361, col: 36, offset: 12146},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 361, col: 42, offset: 12152},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 361, col: 56, offset: 12166},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 361, col: 74, offset: 12184},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 363, col: 8, offset: 12338},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 367, col: 1, offset: 12391},
			expr: &actionExpr{
				pos: position{line: 367, col: 26, offset: 12416},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 367, col: 26, offset: 12416},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 367, col: 26, offset: 12416},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 367, col: 30, offset: 12420},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 367, col: 36, offset: 12426},
								expr: &choiceExpr{
									pos: position{line: 367, col: 37, offset: 12427},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 367, col: 37, offset: 12427},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 367, col: 59, offset: 12449},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 367, col: 80, offset: 12470},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 367, col: 99, offset: 12489},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 371, col: 1, offset: 12559},
			expr: &actionExpr{
				pos: position{line: 371, col: 24, offset: 12582},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 371, col: 24, offset: 12582},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 24, offset: 12582},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 371, col: 33, offset: 12591},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 40, offset: 12598},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 371, col: 66, offset: 12624},
							expr: &litMatcher{
								pos:        position{line: 371, col: 66, offset: 12624},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 375, col: 1, offset: 12683},
			expr: &actionExpr{
				pos: position{line: 375, col: 29, offset: 12711},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 375, col: 29, offset: 12711},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 375, col: 29, offset: 12711},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 375, col: 36, offset: 12718},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 375, col: 36, offset: 12718},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 376, col: 11, offset: 12835},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 377, col: 11, offset: 12871},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 378, col: 11, offset: 12897},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 379, col: 11, offset: 12929},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 380, col: 11, offset: 12961},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 381, col: 11, offset: 12988},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 381, col: 31, offset: 13008},
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 31, offset: 13008},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 381, col: 36, offset: 13013},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 381, col: 36, offset: 13013},
									expr: &litMatcher{
										pos:        position{line: 381, col: 37, offset: 13014},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 381, col: 43, offset: 13020},
									expr: &litMatcher{
										pos:        position{line: 381, col: 44, offset: 13021},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 385, col: 1, offset: 13053},
			expr: &actionExpr{
				pos: position{line: 385, col: 23, offset: 13075},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 385, col: 23, offset: 13075},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 385, col: 23, offset: 13075},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 385, col: 30, offset: 13082},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 385, col: 30, offset: 13082},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 385, col: 47, offset: 13099},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 386, col: 5, offset: 13121},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 386, col: 12, offset: 13128},
								expr: &actionExpr{
									pos: position{line: 386, col: 13, offset: 13129},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 386, col: 13, offset: 13129},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 386, col: 13, offset: 13129},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 386, col: 17, offset: 13133},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 386, col: 24, offset: 13140},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 386, col: 24, offset: 13140},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 386, col: 41, offset: 13157},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 392, col: 1, offset: 13295},
			expr: &actionExpr{
				pos: position{line: 392, col: 29, offset: 13323},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 392, col: 29, offset: 13323},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 392, col: 29, offset: 13323},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 392, col: 34, offset: 13328},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 392, col: 41, offset: 13335},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 392, col: 41, offset: 13335},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 392, col: 58, offset: 13352},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 393, col: 5, offset: 13374},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 393, col: 12, offset: 13381},
								expr: &actionExpr{
									pos: position{line: 393, col: 13, offset: 13382},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 393, col: 13, offset: 13382},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 393, col: 13, offset: 13382},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 393, col: 17, offset: 13386},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 393, col: 24, offset: 13393},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 393, col: 24, offset: 13393},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 393, col: 41, offset: 13410},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 395, col: 9, offset: 13463},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 399, col: 1, offset: 13553},
			expr: &actionExpr{
				pos: position{line: 399, col: 19, offset: 13571},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 399, col: 19, offset: 13571},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 399, col: 19, offset: 13571},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 26, offset: 13578},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 399, col: 34, offset: 13586},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 399, col: 39, offset: 13591},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 44, offset: 13596},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 403, col: 1, offset: 13684},
			expr: &actionExpr{
				pos: position{line: 403, col: 25, offset: 13708},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 403, col: 25, offset: 13708},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 403, col: 25, offset: 13708},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 403, col: 30, offset: 13713},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 37, offset: 13720},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 403, col: 45, offset: 13728},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 403, col: 50, offset: 13733},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 55, offset: 13738},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 403, col: 63, offset: 13746},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 407, col: 1, offset: 13831},
			expr: &actionExpr{
				pos: position{line: 407, col: 20, offset: 13850},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 407, col: 20, offset: 13850},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 407, col: 32, offset: 13862},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 411, col: 1, offset: 13957},
			expr: &actionExpr{
				pos: position{line: 411, col: 26, offset: 13982},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 411, col: 26, offset: 13982},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 411, col: 26, offset: 13982},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 411, col: 31, offset: 13987},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 43, offset: 13999},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 51, offset: 14007},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 415, col: 1, offset: 14099},
			expr: &actionExpr{
				pos: position{line: 415, col: 23, offset: 14121},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 415, col: 23, offset: 14121},
					expr: &seqExpr{
						pos: position{line: 415, col: 24, offset: 14122},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 415, col: 24, offset: 14122},
								expr: &litMatcher{
									pos:        position{line: 415, col: 25, offset: 14123},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 415, col: 29, offset: 14127},
								expr: &litMatcher{
									pos:        position{line: 415, col: 30, offset: 14128},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 415, col: 34, offset: 14132},
								expr: &ruleRefExpr{
									pos:  position{line: 415, col: 35, offset: 14133},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 415, col: 38, offset: 14136,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 419, col: 1, offset: 14176},
			expr: &actionExpr{
				pos: position{line: 419, col: 23, offset: 14198},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 419, col: 23, offset: 14198},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 419, col: 24, offset: 14199},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 419, col: 24, offset: 14199},
									val:        "tags=",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 419, col: 34, offset: 14209},
									val:        "tag=",
									ignoreCase: false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 419, col: 42, offset: 14217},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 48, offset: 14223},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 419, col: 73, offset: 14248},
							expr: &litMatcher{
								pos:        position{line: 419, col: 73, offset: 14248},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 423, col: 1, offset: 14397},
			expr: &actionExpr{
				pos: position{line: 423, col: 28, offset: 14424},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 423, col: 28, offset: 14424},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 423, col: 28, offset: 14424},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 35, offset: 14431},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 423, col: 54, offset: 14450},
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 54, offset: 14450},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 423, col: 59, offset: 14455},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 423, col: 59, offset: 14455},
									expr: &litMatcher{
										pos:        position{line: 423, col: 60, offset: 14456},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 423, col: 66, offset: 14462},
									expr: &litMatcher{
										pos:        position{line: 423, col: 67, offset: 14463},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 427, col: 1, offset: 14495},
			expr: &actionExpr{
				pos: position{line: 427, col: 22, offset: 14516},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 427, col: 22, offset: 14516},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 427, col: 22, offset: 14516},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 29, offset: 14523},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 428, col: 5, offset: 14537},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 428, col: 12, offset: 14544},
								expr: &actionExpr{
									pos: position{line: 428, col: 13, offset: 14545},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 428, col: 13, offset: 14545},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 428, col: 13, offset: 14545},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 428, col: 17, offset: 14549},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 428, col: 24, offset: 14556},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 434, col: 1, offset: 14687},
			expr: &choiceExpr{
				pos: position{line: 434, col: 13, offset: 14699},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 434, col: 13, offset: 14699},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 434, col: 13, offset: 14699},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 434, col: 18, offset: 14704},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 434, col: 18, offset: 14704},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 434, col: 30, offset: 14716},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 436, col: 5, offset: 14784},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 436, col: 5, offset: 14784},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 436, col: 5, offset: 14784},
									val:        "!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 436, col: 9, offset: 14788},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 436, col: 14, offset: 14793},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 436, col: 14, offset: 14793},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 436, col: 26, offset: 14805},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 440, col: 1, offset: 14873},
			expr: &actionExpr{
				pos: position{line: 440, col: 16, offset: 14888},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 440, col: 16, offset: 14888},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 440, col: 16, offset: 14888},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 440, col: 23, offset: 14895},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 440, col: 23, offset: 14895},
									expr: &litMatcher{
										pos:        position{line: 440, col: 24, offset: 14896},
										val:        "*",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 443, col: 5, offset: 14950},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 453, col: 1, offset: 15244},
			expr: &actionExpr{
				pos: position{line: 453, col: 21, offset: 15264},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 453, col: 21, offset: 15264},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 453, col: 21, offset: 15264},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 453, col: 29, offset: 15272},
								expr: &choiceExpr{
									pos: position{line: 453, col: 30, offset: 15273},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 453, col: 30, offset: 15273},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 453, col: 53, offset: 15296},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 453, col: 74, offset: 15317},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 453, col: 74, offset: 15317,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 453, col: 107, offset: 15350},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 457, col: 1, offset: 15421},
			expr: &actionExpr{
				pos: position{line: 457, col: 25, offset: 15445},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 457, col: 25, offset: 15445},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 457, col: 25, offset: 15445},
							val:        "tag::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 457, col: 33, offset: 15453},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 457, col: 38, offset: 15458},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 457, col: 38, offset: 15458},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 457, col: 78, offset: 15498},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 461, col: 1, offset: 15563},
			expr: &actionExpr{
				pos: position{line: 461, col: 23, offset: 15585},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 461, col: 23, offset: 15585},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 461, col: 23, offset: 15585},
							val:        "end::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 461, col: 31, offset: 15593},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 461, col: 36, offset: 15598},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 461, col: 36, offset: 15598},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 461, col: 76, offset: 15638},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 468, col: 1, offset: 15802},
			expr: &oneOrMoreExpr{
				pos: position{line: 468, col: 14, offset: 15815},
				expr: &ruleRefExpr{
					pos:  position{line: 468, col: 14, offset: 15815},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 470, col: 1, offset: 15826},
			expr: &choiceExpr{
				pos: position{line: 470, col: 13, offset: 15838},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 470, col: 13, offset: 15838},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 31, offset: 15856},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 51, offset: 15876},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 69, offset: 15894},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 472, col: 1, offset: 15920},
			expr: &choiceExpr{
				pos: position{line: 472, col: 18, offset: 15937},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 472, col: 18, offset: 15937},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 472, col: 18, offset: 15937},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 27, offset: 15946},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 474, col: 9, offset: 16003},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 474, col: 9, offset: 16003},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 474, col: 15, offset: 16009},
								expr: &ruleRefExpr{
									pos:  position{line: 474, col: 16, offset: 16010},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 478, col: 1, offset: 16102},
			expr: &actionExpr{
				pos: position{line: 478, col: 22, offset: 16123},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 478, col: 22, offset: 16123},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 478, col: 22, offset: 16123},
							expr: &ruleRefExpr{
								pos:  position{line: 478, col: 23, offset: 16124},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 479, col: 5, offset: 16132},
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 6, offset: 16133},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 480, col: 5, offset: 16148},
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 6, offset: 16149},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 481, col: 5, offset: 16171},
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 6, offset: 16172},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 482, col: 5, offset: 16198},
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 6, offset: 16199},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 483, col: 5, offset: 16227},
							expr: &seqExpr{
								pos: position{line: 483, col: 7, offset: 16229},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 483, col: 7, offset: 16229},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 483, col: 27, offset: 16249},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 484, col: 5, offset: 16280},
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 6, offset: 16281},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 485, col: 5, offset: 16306},
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 6, offset: 16307},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 486, col: 5, offset: 16328},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 6, offset: 16329},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 487, col: 5, offset: 16348},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 488, col: 9, offset: 16363},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 488, col: 9, offset: 16363},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 488, col: 9, offset: 16363},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 488, col: 18, offset: 16372},
												expr: &ruleRefExpr{
													pos:  position{line: 488, col: 19, offset: 16373},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 488, col: 35, offset: 16389},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 488, col: 45, offset: 16399},
												expr: &ruleRefExpr{
													pos:  position{line: 488, col: 46, offset: 16400},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 490, col: 12, offset: 16552},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 494, col: 1, offset: 16599},
			expr: &seqExpr{
				pos: position{line: 494, col: 25, offset: 16623},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 494, col: 25, offset: 16623},
						val:        "+",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 494, col: 29, offset: 16627},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 496, col: 1, offset: 16634},
			expr: &actionExpr{
				pos: position{line: 496, col: 29, offset: 16662},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 496, col: 29, offset: 16662},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 496, col: 29, offset: 16662},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 496, col: 41, offset: 16674},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 41, offset: 16674},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 53, offset: 16686},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 496, col: 74, offset: 16707},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 82, offset: 16715},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 503, col: 1, offset: 16957},
			expr: &actionExpr{
				pos: position{line: 503, col: 20, offset: 16976},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 503, col: 20, offset: 16976},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 503, col: 20, offset: 16976},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 503, col: 31, offset: 16987},
								expr: &ruleRefExpr{
									pos:  position{line: 503, col: 32, offset: 16988},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 503, col: 52, offset: 17008},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 60, offset: 17016},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 503, col: 83, offset: 17039},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 92, offset: 17048},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 507, col: 1, offset: 17188},
			expr: &actionExpr{
				pos: position{line: 508, col: 5, offset: 17218},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 508, col: 5, offset: 17218},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 508, col: 5, offset: 17218},
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 5, offset: 17218},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 508, col: 9, offset: 17222},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 510, col: 9, offset: 17285},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 510, col: 9, offset: 17285},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 510, col: 9, offset: 17285},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 510, col: 9, offset: 17285},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 510, col: 16, offset: 17292},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 510, col: 16, offset: 17292},
															expr: &litMatcher{
																pos:        position{line: 510, col: 17, offset: 17293},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 514, col: 9, offset: 17393},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 533, col: 11, offset: 18110},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 533, col: 11, offset: 18110},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 533, col: 11, offset: 18110},
													expr: &charClassMatcher{
														pos:        position{line: 533, col: 12, offset: 18111},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 533, col: 20, offset: 18119},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 535, col: 13, offset: 18230},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 535, col: 13, offset: 18230},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 535, col: 14, offset: 18231},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 535, col: 21, offset: 18238},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 537, col: 13, offset: 18352},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 537, col: 13, offset: 18352},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 537, col: 14, offset: 18353},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 537, col: 21, offset: 18360},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 539, col: 13, offset: 18474},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 539, col: 13, offset: 18474},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 539, col: 13, offset: 18474},
													expr: &charClassMatcher{
														pos:        position{line: 539, col: 14, offset: 18475},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 539, col: 22, offset: 18483},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 541, col: 13, offset: 18597},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 541, col: 13, offset: 18597},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 541, col: 13, offset: 18597},
													expr: &charClassMatcher{
														pos:        position{line: 541, col: 14, offset: 18598},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 541, col: 22, offset: 18606},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 543, col: 12, offset: 18719},
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 12, offset: 18719},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 547, col: 1, offset: 18751},
			expr: &actionExpr{
				pos: position{line: 547, col: 27, offset: 18777},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 547, col: 27, offset: 18777},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 547, col: 37, offset: 18787},
						expr: &ruleRefExpr{
							pos:  position{line: 547, col: 37, offset: 18787},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 554, col: 1, offset: 18987},
			expr: &actionExpr{
				pos: position{line: 554, col: 22, offset: 19008},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 554, col: 22, offset: 19008},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 554, col: 22, offset: 19008},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 554, col: 33, offset: 19019},
								expr: &ruleRefExpr{
									pos:  position{line: 554, col: 34, offset: 19020},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 54, offset: 19040},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 62, offset: 19048},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 87, offset: 19073},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 554, col: 98, offset: 19084},
								expr: &ruleRefExpr{
									pos:  position{line: 554, col: 99, offset: 19085},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 129, offset: 19115},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 138, offset: 19124},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 558, col: 1, offset: 19282},
			expr: &actionExpr{
				pos: position{line: 559, col: 5, offset: 19314},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 559, col: 5, offset: 19314},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 559, col: 5, offset: 19314},
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 5, offset: 19314},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 559, col: 9, offset: 19318},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 559, col: 17, offset: 19326},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 561, col: 9, offset: 19383},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 561, col: 9, offset: 19383},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 561, col: 9, offset: 19383},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 561, col: 16, offset: 19390},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 561, col: 16, offset: 19390},
															expr: &litMatcher{
																pos:        position{line: 561, col: 17, offset: 19391},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 565, col: 9, offset: 19491},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 582, col: 14, offset: 20198},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 582, col: 21, offset: 20205},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 582, col: 22, offset: 20206},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 584, col: 13, offset: 20292},
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 13, offset: 20292},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 588, col: 1, offset: 20325},
			expr: &actionExpr{
				pos: position{line: 588, col: 32, offset: 20356},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 588, col: 32, offset: 20356},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 588, col: 32, offset: 20356},
							expr: &litMatcher{
								pos:        position{line: 588, col: 33, offset: 20357},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 588, col: 37, offset: 20361},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 589, col: 7, offset: 20375},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 589, col: 7, offset: 20375},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 589, col: 7, offset: 20375},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 590, col: 7, offset: 20420},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 590, col: 7, offset: 20420},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 591, col: 7, offset: 20463},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 591, col: 7, offset: 20463},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 592, col: 7, offset: 20505},
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 7, offset: 20505},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 596, col: 1, offset: 20544},
			expr: &actionExpr{
				pos: position{line: 596, col: 29, offset: 20572},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 596, col: 29, offset: 20572},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 596, col: 39, offset: 20582},
						expr: &ruleRefExpr{
							pos:  position{line: 596, col: 39, offset: 20582},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 603, col: 1, offset: 20898},
			expr: &actionExpr{
				pos: position{line: 603, col: 20, offset: 20917},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 603, col: 20, offset: 20917},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 603, col: 20, offset: 20917},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 603, col: 31, offset: 20928},
								expr: &ruleRefExpr{
									pos:  position{line: 603, col: 32, offset: 20929},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 52, offset: 20949},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 58, offset: 20955},
								name: "LabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 79, offset: 20976},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 90, offset: 20987},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 116, offset: 21013},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 603, col: 128, offset: 21025},
								expr: &ruleRefExpr{
									pos:  position{line: 603, col: 129, offset: 21026},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 607, col: 1, offset: 21165},
			expr: &actionExpr{
				pos: position{line: 607, col: 24, offset: 21188},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &oneOrMoreExpr{
					pos: position{line: 607, col: 24, offset: 21188},
					expr: &choiceExpr{
						pos: position{line: 607, col: 25, offset: 21189},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 607, col: 25, offset: 21189},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 607, col: 37, offset: 21201},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 607, col: 47, offset: 21211},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 607, col: 47, offset: 21211},
										expr: &ruleRefExpr{
											pos:  position{line: 607, col: 48, offset: 21212},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 607, col: 56, offset: 21220},
										expr: &litMatcher{
											pos:        position{line: 607, col: 57, offset: 21221},
											val:        "::",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 607, col: 62, offset: 21226,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 611, col: 1, offset: 21268},
			expr: &actionExpr{
				pos: position{line: 612, col: 5, offset: 21301},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 612, col: 5, offset: 21301},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 612, col: 5, offset: 21301},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 612, col: 16, offset: 21312},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 612, col: 16, offset: 21312},
									expr: &litMatcher{
										pos:        position{line: 612, col: 17, offset: 21313},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 615, col: 5, offset: 21371},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 619, col: 6, offset: 21547},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 619, col: 6, offset: 21547},
									expr: &choiceExpr{
										pos: position{line: 619, col: 7, offset: 21548},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 619, col: 7, offset: 21548},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 619, col: 12, offset: 21553},
												name: "NEWLINE",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 619, col: 24, offset: 21565},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 623, col: 1, offset: 21605},
			expr: &actionExpr{
				pos: position{line: 623, col: 31, offset: 21635},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 623, col: 31, offset: 21635},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 623, col: 40, offset: 21644},
						expr: &ruleRefExpr{
							pos:  position{line: 623, col: 41, offset: 21645},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 630, col: 1, offset: 21836},
			expr: &choiceExpr{
				pos: position{line: 630, col: 19, offset: 21854},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 630, col: 19, offset: 21854},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 630, col: 19, offset: 21854},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 632, col: 9, offset: 21900},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 632, col: 9, offset: 21900},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 634, col: 9, offset: 21948},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 634, col: 9, offset: 21948},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 636, col: 9, offset: 22006},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 636, col: 9, offset: 22006},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 638, col: 9, offset: 22060},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 638, col: 9, offset: 22060},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 647, col: 1, offset: 22367},
			expr: &choiceExpr{
				pos: position{line: 649, col: 5, offset: 22414},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 649, col: 5, offset: 22414},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 649, col: 5, offset: 22414},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 649, col: 5, offset: 22414},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 649, col: 16, offset: 22425},
										expr: &ruleRefExpr{
											pos:  position{line: 649, col: 17, offset: 22426},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 649, col: 37, offset: 22446},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 649, col: 40, offset: 22449},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 649, col: 56, offset: 22465},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 649, col: 61, offset: 22470},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 649, col: 67, offset: 22476},
										expr: &ruleRefExpr{
											pos:  position{line: 649, col: 68, offset: 22477},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 653, col: 5, offset: 22669},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 653, col: 5, offset: 22669},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 653, col: 5, offset: 22669},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 653, col: 16, offset: 22680},
										expr: &ruleRefExpr{
											pos:  position{line: 653, col: 17, offset: 22681},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 653, col: 37, offset: 22701},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 653, col: 43, offset: 22707},
										expr: &ruleRefExpr{
											pos:  position{line: 653, col: 44, offset: 22708},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 658, col: 1, offset: 22873},
			expr: &actionExpr{
				pos: position{line: 658, col: 20, offset: 22892},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 658, col: 20, offset: 22892},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 658, col: 20, offset: 22892},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 658, col: 31, offset: 22903},
								expr: &ruleRefExpr{
									pos:  position{line: 658, col: 32, offset: 22904},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 659, col: 5, offset: 22929},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 667, col: 5, offset: 23220},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 667, col: 16, offset: 23231},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 668, col: 5, offset: 23254},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 668, col: 16, offset: 23265},
								expr: &ruleRefExpr{
									pos:  position{line: 668, col: 17, offset: 23266},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLines",
			pos:  position{line: 672, col: 1, offset: 23400},
			expr: &actionExpr{
				pos: position{line: 672, col: 19, offset: 23418},
				run: (*parser).callonParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 672, col: 19, offset: 23418},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 672, col: 19, offset: 23418},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 30, offset: 23429},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 672, col: 50, offset: 23449},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 672, col: 61, offset: 23460},
								expr: &ruleRefExpr{
									pos:  position{line: 672, col: 62, offset: 23461},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 676, col: 1, offset: 23567},
			expr: &actionExpr{
				pos: position{line: 676, col: 23, offset: 23589},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 676, col: 23, offset: 23589},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 676, col: 23, offset: 23589},
							expr: &seqExpr{
								pos: position{line: 676, col: 25, offset: 23591},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 676, col: 25, offset: 23591},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 45, offset: 23611},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 677, col: 5, offset: 23641},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 677, col: 15, offset: 23651},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 677, col: 15, offset: 23651},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 677, col: 26, offset: 23662},
										expr: &ruleRefExpr{
											pos:  position{line: 677, col: 26, offset: 23662},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 677, col: 42, offset: 23678},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 677, col: 52, offset: 23688},
								expr: &ruleRefExpr{
									pos:  position{line: 677, col: 53, offset: 23689},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 677, col: 65, offset: 23701},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 681, col: 1, offset: 23791},
			expr: &actionExpr{
				pos: position{line: 681, col: 23, offset: 23813},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 681, col: 23, offset: 23813},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 681, col: 33, offset: 23823},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 685, col: 1, offset: 23869},
			expr: &choiceExpr{
				pos: position{line: 687, col: 5, offset: 23921},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 687, col: 5, offset: 23921},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 687, col: 5, offset: 23921},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 687, col: 5, offset: 23921},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 687, col: 16, offset: 23932},
										expr: &ruleRefExpr{
											pos:  position{line: 687, col: 17, offset: 23933},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 688, col: 5, offset: 23957},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 695, col: 5, offset: 24169},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 695, col: 8, offset: 24172},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 695, col: 24, offset: 24188},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 695, col: 29, offset: 24193},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 695, col: 35, offset: 24199},
										expr: &ruleRefExpr{
											pos:  position{line: 695, col: 36, offset: 24200},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 699, col: 5, offset: 24392},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 699, col: 5, offset: 24392},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 699, col: 5, offset: 24392},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 699, col: 16, offset: 24403},
										expr: &ruleRefExpr{
											pos:  position{line: 699, col: 17, offset: 24404},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 700, col: 5, offset: 24428},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 707, col: 5, offset: 24640},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 707, col: 11, offset: 24646},
										expr: &ruleRefExpr{
											pos:  position{line: 707, col: 12, offset: 24647},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 711, col: 1, offset: 24748},
			expr: &actionExpr{
				pos: position{line: 711, col: 19, offset: 24766},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 711, col: 19, offset: 24766},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 711, col: 19, offset: 24766},
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 20, offset: 24767},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 711, col: 24, offset: 24771},
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 25, offset: 24772},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 712, col: 5, offset: 24786},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 712, col: 15, offset: 24796},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 712, col: 15, offset: 24796},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 712, col: 15, offset: 24796},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 712, col: 24, offset: 24805},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 714, col: 9, offset: 24897},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 714, col: 9, offset: 24897},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 714, col: 9, offset: 24897},
													expr: &ruleRefExpr{
														pos:  position{line: 714, col: 10, offset: 24898},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 714, col: 25, offset: 24913},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 714, col: 34, offset: 24922},
														expr: &ruleRefExpr{
															pos:  position{line: 714, col: 35, offset: 24923},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 714, col: 51, offset: 24939},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 714, col: 61, offset: 24949},
														expr: &ruleRefExpr{
															pos:  position{line: 714, col: 62, offset: 24950},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 714, col: 74, offset: 24962},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 720, col: 1, offset: 25098},
			expr: &actionExpr{
				pos: position{line: 720, col: 18, offset: 25115},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 720, col: 18, offset: 25115},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 720, col: 18, offset: 25115},
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 19, offset: 25116},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 720, col: 23, offset: 25120},
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 24, offset: 25121},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 721, col: 5, offset: 25136},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 721, col: 14, offset: 25145},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 721, col: 14, offset: 25145},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 722, col: 11, offset: 25166},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 723, col: 11, offset: 25184},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 724, col: 11, offset: 25207},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 725, col: 11, offset: 25223},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 726, col: 11, offset: 25246},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 727, col: 11, offset: 25272},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 728, col: 11, offset: 25299},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 729, col: 11, offset: 25321},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 730, col: 11, offset: 25347},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 731, col: 11, offset: 25388},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 732, col: 11, offset: 25415},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 739, col: 1, offset: 25675},
			expr: &actionExpr{
				pos: position{line: 739, col: 37, offset: 25711},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 739, col: 37, offset: 25711},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 739, col: 37, offset: 25711},
							expr: &ruleRefExpr{
								pos:  position{line: 739, col: 38, offset: 25712},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 739, col: 48, offset: 25722},
							expr: &ruleRefExpr{
								pos:  position{line: 739, col: 49, offset: 25723},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 739, col: 64, offset: 25738},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 739, col: 73, offset: 25747},
								expr: &ruleRefExpr{
									pos:  position{line: 739, col: 74, offset: 25748},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 739, col: 108, offset: 25782},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 739, col: 118, offset: 25792},
								expr: &ruleRefExpr{
									pos:  position{line: 739, col: 119, offset: 25793},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 739, col: 131, offset: 25805},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 743, col: 1, offset: 25896},
			expr: &actionExpr{
				pos: position{line: 743, col: 36, offset: 25931},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 743, col: 36, offset: 25931},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 743, col: 36, offset: 25931},
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 37, offset: 25932},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 743, col: 41, offset: 25936},
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 42, offset: 25937},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 744, col: 5, offset: 25952},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 744, col: 14, offset: 25961},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 744, col: 14, offset: 25961},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 745, col: 11, offset: 25982},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 746, col: 11, offset: 26000},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 747, col: 11, offset: 26023},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 748, col: 11, offset: 26039},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 749, col: 11, offset: 26062},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 750, col: 11, offset: 26084},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 751, col: 11, offset: 26110},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 11, offset: 26136},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimBlock",
			pos:  position{line: 757, col: 1, offset: 26270},
			expr: &actionExpr{
				pos: position{line: 757, col: 18, offset: 26287},
				run: (*parser).callonVerbatimBlock1,
				expr: &seqExpr{
					pos: position{line: 757, col: 18, offset: 26287},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 757, col: 18, offset: 26287},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 757, col: 27, offset: 26296},
								expr: &choiceExpr{
									pos: position{line: 757, col: 28, offset: 26297},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 757, col: 28, offset: 26297},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 757, col: 40, offset: 26309},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 757, col: 56, offset: 26325},
											name: "VerbatimParagraph",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 757, col: 76, offset: 26345},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 761, col: 1, offset: 26379},
			expr: &actionExpr{
				pos: position{line: 761, col: 22, offset: 26400},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 761, col: 22, offset: 26400},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 761, col: 22, offset: 26400},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 761, col: 33, offset: 26411},
								expr: &ruleRefExpr{
									pos:  position{line: 761, col: 34, offset: 26412},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 761, col: 54, offset: 26432},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 761, col: 60, offset: 26438},
								expr: &actionExpr{
									pos: position{line: 761, col: 61, offset: 26439},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 761, col: 61, offset: 26439},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 761, col: 61, offset: 26439},
												expr: &ruleRefExpr{
													pos:  position{line: 761, col: 62, offset: 26440},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 761, col: 66, offset: 26444},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 761, col: 72, offset: 26450},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 767, col: 1, offset: 26570},
			expr: &actionExpr{
				pos: position{line: 767, col: 26, offset: 26595},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 767, col: 26, offset: 26595},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 767, col: 26, offset: 26595},
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 27, offset: 26596},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 767, col: 42, offset: 26611},
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 43, offset: 26612},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 767, col: 53, offset: 26622},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 767, col: 62, offset: 26631},
								expr: &ruleRefExpr{
									pos:  position{line: 767, col: 63, offset: 26632},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 767, col: 94, offset: 26663},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 767, col: 104, offset: 26673},
								expr: &ruleRefExpr{
									pos:  position{line: 767, col: 105, offset: 26674},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 767, col: 117, offset: 26686},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 771, col: 1, offset: 26777},
			expr: &actionExpr{
				pos: position{line: 771, col: 33, offset: 26809},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 771, col: 33, offset: 26809},
					expr: &seqExpr{
						pos: position{line: 771, col: 34, offset: 26810},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 771, col: 34, offset: 26810},
								expr: &ruleRefExpr{
									pos:  position{line: 771, col: 35, offset: 26811},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 771, col: 39, offset: 26815},
								expr: &ruleRefExpr{
									pos:  position{line: 771, col: 40, offset: 26816},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 771, col: 50, offset: 26826,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 778, col: 1, offset: 27050},
			expr: &actionExpr{
				pos: position{line: 778, col: 14, offset: 27063},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 778, col: 14, offset: 27063},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 778, col: 14, offset: 27063},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 778, col: 17, offset: 27066},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 778, col: 21, offset: 27070},
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 21, offset: 27070},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 778, col: 25, offset: 27074},
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 26, offset: 27075},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 785, col: 1, offset: 27359},
			expr: &actionExpr{
				pos: position{line: 785, col: 15, offset: 27373},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 785, col: 15, offset: 27373},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 785, col: 15, offset: 27373},
							expr: &ruleRefExpr{
								pos:  position{line: 785, col: 16, offset: 27374},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 785, col: 19, offset: 27377},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 785, col: 25, offset: 27383},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 785, col: 25, offset: 27383},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 786, col: 15, offset: 27407},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 787, col: 15, offset: 27433},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 788, col: 15, offset: 27462},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 789, col: 15, offset: 27491},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 790, col: 15, offset: 27522},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 791, col: 15, offset: 27553},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 792, col: 15, offset: 27586},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 793, col: 15, offset: 27622},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 794, col: 15, offset: 27658},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 795, col: 15, offset: 27695},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 799, col: 1, offset: 27849},
			expr: &choiceExpr{
				pos: position{line: 799, col: 21, offset: 27869},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 799, col: 21, offset: 27869},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 799, col: 28, offset: 27876},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 799, col: 34, offset: 27882},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 799, col: 41, offset: 27889},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 799, col: 47, offset: 27895},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 799, col: 54, offset: 27902},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 799, col: 60, offset: 27908},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 799, col: 66, offset: 27914},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 801, col: 1, offset: 27919},
			expr: &choiceExpr{
				pos: position{line: 801, col: 33, offset: 27951},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 801, col: 33, offset: 27951},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 801, col: 39, offset: 27957},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 801, col: 39, offset: 27957},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 805, col: 1, offset: 28090},
			expr: &actionExpr{
				pos: position{line: 805, col: 25, offset: 28114},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 805, col: 25, offset: 28114},
					expr: &litMatcher{
						pos:        position{line: 805, col: 25, offset: 28114},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 809, col: 1, offset: 28155},
			expr: &actionExpr{
				pos: position{line: 809, col: 25, offset: 28179},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 809, col: 25, offset: 28179},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 809, col: 25, offset: 28179},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 809, col: 30, offset: 28184},
							expr: &litMatcher{
								pos:        position{line: 809, col: 30, offset: 28184},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 817, col: 1, offset: 28281},
			expr: &choiceExpr{
				pos: position{line: 817, col: 13, offset: 28293},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 817, col: 13, offset: 28293},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 817, col: 35, offset: 28315},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 819, col: 1, offset: 28336},
			expr: &actionExpr{
				pos: position{line: 819, col: 24, offset: 28359},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 819, col: 24, offset: 28359},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 819, col: 24, offset: 28359},
							expr: &litMatcher{
								pos:        position{line: 819, col: 25, offset: 28360},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 819, col: 30, offset: 28365},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 819, col: 35, offset: 28370},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 819, col: 44, offset: 28379},
								name: "DoubleQuoteBoldTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 819, col: 72, offset: 28407},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextContent",
			pos:  position{line: 823, col: 1, offset: 28532},
			expr: &seqExpr{
				pos: position{line: 823, col: 31, offset: 28562},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 823, col: 31, offset: 28562},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 823, col: 58, offset: 28589},
						expr: &actionExpr{
							pos: position{line: 823, col: 59, offset: 28590},
							run: (*parser).callonDoubleQuoteBoldTextContent4,
							expr: &seqExpr{
								pos: position{line: 823, col: 59, offset: 28590},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 823, col: 59, offset: 28590},
										expr: &litMatcher{
											pos:        position{line: 823, col: 61, offset: 28592},
											val:        "**",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 823, col: 67, offset: 28598},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 823, col: 76, offset: 28607},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 823, col: 76, offset: 28607},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 823, col: 81, offset: 28612},
													name: "DoubleQuoteBoldTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 827, col: 1, offset: 28704},
			expr: &actionExpr{
				pos: position{line: 827, col: 31, offset: 28734},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 827, col: 31, offset: 28734},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 827, col: 31, offset: 28734},
							expr: &ruleRefExpr{
								pos:  position{line: 827, col: 32, offset: 28735},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 827, col: 40, offset: 28743},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 827, col: 49, offset: 28752},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 827, col: 49, offset: 28752},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 828, col: 11, offset: 28783},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 829, col: 11, offset: 28805},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 830, col: 11, offset: 28829},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 831, col: 11, offset: 28853},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 832, col: 11, offset: 28879},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 833, col: 11, offset: 28902},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 834, col: 11, offset: 28918},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 835, col: 11, offset: 28941},
										name: "NonDoubleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 839, col: 1, offset: 29097},
			expr: &actionExpr{
				pos: position{line: 839, col: 27, offset: 29123},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 839, col: 27, offset: 29123},
					exprs: []interface{}{
						&anyMatcher{
							line: 839, col: 28, offset: 29124,
						},
						&zeroOrMoreExpr{
							pos: position{line: 839, col: 31, offset: 29127},
							expr: &seqExpr{
								pos: position{line: 839, col: 32, offset: 29128},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 839, col: 32, offset: 29128},
										expr: &litMatcher{
											pos:        position{line: 839, col: 33, offset: 29129},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 839, col: 38, offset: 29134},
										expr: &ruleRefExpr{
											pos:  position{line: 839, col: 39, offset: 29135},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 839, col: 42, offset: 29138},
										expr: &litMatcher{
											pos:        position{line: 839, col: 43, offset: 29139},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 839, col: 47, offset: 29143},
										expr: &litMatcher{
											pos:        position{line: 839, col: 48, offset: 29144},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 839, col: 52, offset: 29148},
										expr: &ruleRefExpr{
											pos:  position{line: 839, col: 53, offset: 29149},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 839, col: 61, offset: 29157,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 843, col: 1, offset: 29217},
			expr: &choiceExpr{
				pos: position{line: 843, col: 24, offset: 29240},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 843, col: 24, offset: 29240},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 843, col: 24, offset: 29240},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 843, col: 24, offset: 29240},
									expr: &litMatcher{
										pos:        position{line: 843, col: 25, offset: 29241},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 843, col: 29, offset: 29245},
									expr: &litMatcher{
										pos:        position{line: 843, col: 30, offset: 29246},
										val:        "**",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 843, col: 35, offset: 29251},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 843, col: 39, offset: 29255},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 843, col: 48, offset: 29264},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 843, col: 76, offset: 29292},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 845, col: 5, offset: 29472},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 845, col: 5, offset: 29472},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 845, col: 5, offset: 29472},
									expr: &litMatcher{
										pos:        position{line: 845, col: 6, offset: 29473},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 845, col: 11, offset: 29478},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 845, col: 16, offset: 29483},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 845, col: 25, offset: 29492},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 845, col: 53, offset: 29520},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextContent",
			pos:  position{line: 849, col: 1, offset: 29778},
			expr: &seqExpr{
				pos: position{line: 849, col: 31, offset: 29808},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 849, col: 31, offset: 29808},
						expr: &ruleRefExpr{
							pos:  position{line: 849, col: 32, offset: 29809},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 849, col: 35, offset: 29812},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 849, col: 62, offset: 29839},
						expr: &actionExpr{
							pos: position{line: 849, col: 63, offset: 29840},
							run: (*parser).callonSingleQuoteBoldTextContent6,
							expr: &seqExpr{
								pos: position{line: 849, col: 63, offset: 29840},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 849, col: 63, offset: 29840},
										expr: &seqExpr{
											pos: position{line: 849, col: 65, offset: 29842},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 849, col: 65, offset: 29842},
													val:        "*",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 849, col: 69, offset: 29846},
													expr: &ruleRefExpr{
														pos:  position{line: 849, col: 70, offset: 29847},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 849, col: 80, offset: 29857},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 849, col: 88, offset: 29865},
											expr: &ruleRefExpr{
												pos:  position{line: 849, col: 88, offset: 29865},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 849, col: 93, offset: 29870},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 849, col: 102, offset: 29879},
											name: "SingleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 853, col: 1, offset: 29970},
			expr: &actionExpr{
				pos: position{line: 853, col: 31, offset: 30000},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 853, col: 31, offset: 30000},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 853, col: 31, offset: 30000},
							expr: &ruleRefExpr{
								pos:  position{line: 853, col: 32, offset: 30001},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 853, col: 40, offset: 30009},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 853, col: 49, offset: 30018},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 853, col: 49, offset: 30018},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 854, col: 11, offset: 30048},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 855, col: 11, offset: 30070},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 856, col: 11, offset: 30094},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 857, col: 11, offset: 30118},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 858, col: 11, offset: 30144},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 859, col: 11, offset: 30167},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 860, col: 11, offset: 30183},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 861, col: 11, offset: 30206},
										name: "NonSingleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 865, col: 1, offset: 30362},
			expr: &actionExpr{
				pos: position{line: 865, col: 27, offset: 30388},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 865, col: 27, offset: 30388},
					exprs: []interface{}{
						&anyMatcher{
							line: 865, col: 28, offset: 30389,
						},
						&zeroOrMoreExpr{
							pos: position{line: 865, col: 31, offset: 30392},
							expr: &seqExpr{
								pos: position{line: 865, col: 32, offset: 30393},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 865, col: 32, offset: 30393},
										expr: &litMatcher{
											pos:        position{line: 865, col: 33, offset: 30394},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 865, col: 37, offset: 30398},
										expr: &ruleRefExpr{
											pos:  position{line: 865, col: 38, offset: 30399},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 865, col: 41, offset: 30402},
										expr: &litMatcher{
											pos:        position{line: 865, col: 42, offset: 30403},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 865, col: 46, offset: 30407},
										expr: &litMatcher{
											pos:        position{line: 865, col: 47, offset: 30408},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 865, col: 51, offset: 30412},
										expr: &ruleRefExpr{
											pos:  position{line: 865, col: 52, offset: 30413},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 865, col: 60, offset: 30421,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 869, col: 1, offset: 30481},
			expr: &choiceExpr{
				pos: position{line: 870, col: 5, offset: 30505},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 870, col: 5, offset: 30505},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 870, col: 5, offset: 30505},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 870, col: 5, offset: 30505},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 870, col: 18, offset: 30518},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 870, col: 40, offset: 30540},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 870, col: 45, offset: 30545},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 870, col: 54, offset: 30554},
										name: "DoubleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 870, col: 82, offset: 30582},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 872, col: 9, offset: 30738},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 872, col: 9, offset: 30738},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 872, col: 9, offset: 30738},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 872, col: 22, offset: 30751},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 872, col: 44, offset: 30773},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 872, col: 49, offset: 30778},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 872, col: 58, offset: 30787},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 872, col: 86, offset: 30815},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 875, col: 9, offset: 31014},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 875, col: 9, offset: 31014},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 875, col: 9, offset: 31014},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 875, col: 22, offset: 31027},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 875, col: 44, offset: 31049},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 875, col: 48, offset: 31053},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 875, col: 57, offset: 31062},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 875, col: 85, offset: 31090},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 883, col: 1, offset: 31297},
			expr: &choiceExpr{
				pos: position{line: 883, col: 15, offset: 31311},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 883, col: 15, offset: 31311},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 883, col: 39, offset: 31335},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 885, col: 1, offset: 31358},
			expr: &actionExpr{
				pos: position{line: 885, col: 26, offset: 31383},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 885, col: 26, offset: 31383},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 885, col: 26, offset: 31383},
							expr: &litMatcher{
								pos:        position{line: 885, col: 27, offset: 31384},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 885, col: 32, offset: 31389},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 885, col: 37, offset: 31394},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 885, col: 46, offset: 31403},
								name: "DoubleQuoteItalicTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 885, col: 76, offset: 31433},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextContent",
			pos:  position{line: 889, col: 1, offset: 31559},
			expr: &seqExpr{
				pos: position{line: 889, col: 33, offset: 31591},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 889, col: 33, offset: 31591},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 889, col: 62, offset: 31620},
						expr: &actionExpr{
							pos: position{line: 889, col: 63, offset: 31621},
							run: (*parser).callonDoubleQuoteItalicTextContent4,
							expr: &seqExpr{
								pos: position{line: 889, col: 63, offset: 31621},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 889, col: 63, offset: 31621},
										expr: &litMatcher{
											pos:        position{line: 889, col: 65, offset: 31623},
											val:        "__",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 889, col: 71, offset: 31629},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 889, col: 80, offset: 31638},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 889, col: 80, offset: 31638},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 889, col: 85, offset: 31643},
													name: "DoubleQuoteItalicTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 893, col: 1, offset: 31737},
			expr: &actionExpr{
				pos: position{line: 893, col: 33, offset: 31769},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 893, col: 33, offset: 31769},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 893, col: 33, offset: 31769},
							expr: &ruleRefExpr{
								pos:  position{line: 893, col: 34, offset: 31770},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 893, col: 42, offset: 31778},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 893, col: 51, offset: 31787},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 893, col: 51, offset: 31787},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 894, col: 11, offset: 31820},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 895, col: 11, offset: 31840},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 896, col: 11, offset: 31864},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 897, col: 11, offset: 31888},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 898, col: 11, offset: 31914},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 899, col: 11, offset: 31937},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 900, col: 11, offset: 31953},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 901, col: 11, offset: 31976},
										name: "NonDoubleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 905, col: 1, offset: 32134},
			expr: &actionExpr{
				pos: position{line: 905, col: 29, offset: 32162},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 905, col: 29, offset: 32162},
					exprs: []interface{}{
						&anyMatcher{
							line: 905, col: 30, offset: 32163,
						},
						&zeroOrMoreExpr{
							pos: position{line: 905, col: 33, offset: 32166},
							expr: &seqExpr{
								pos: position{line: 905, col: 34, offset: 32167},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 905, col: 34, offset: 32167},
										expr: &litMatcher{
											pos:        position{line: 905, col: 35, offset: 32168},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 905, col: 40, offset: 32173},
										expr: &litMatcher{
											pos:        position{line: 905, col: 41, offset: 32174},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 905, col: 45, offset: 32178},
										expr: &litMatcher{
											pos:        position{line: 905, col: 46, offset: 32179},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 905, col: 50, offset: 32183},
										expr: &ruleRefExpr{
											pos:  position{line: 905, col: 51, offset: 32184},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 905, col: 59, offset: 32192,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 909, col: 1, offset: 32252},
			expr: &choiceExpr{
				pos: position{line: 909, col: 26, offset: 32277},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 909, col: 26, offset: 32277},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 909, col: 26, offset: 32277},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 909, col: 26, offset: 32277},
									expr: &litMatcher{
										pos:        position{line: 909, col: 27, offset: 32278},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 909, col: 31, offset: 32282},
									expr: &litMatcher{
										pos:        position{line: 909, col: 32, offset: 32283},
										val:        "__",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 909, col: 37, offset: 32288},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 909, col: 41, offset: 32292},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 909, col: 50, offset: 32301},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 909, col: 80, offset: 32331},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 911, col: 5, offset: 32513},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 911, col: 5, offset: 32513},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 911, col: 5, offset: 32513},
									expr: &litMatcher{
										pos:        position{line: 911, col: 6, offset: 32514},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 911, col: 11, offset: 32519},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 911, col: 16, offset: 32524},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 911, col: 25, offset: 32533},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 911, col: 55, offset: 32563},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextContent",
			pos:  position{line: 915, col: 1, offset: 32825},
			expr: &seqExpr{
				pos: position{line: 915, col: 33, offset: 32857},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 915, col: 33, offset: 32857},
						expr: &ruleRefExpr{
							pos:  position{line: 915, col: 34, offset: 32858},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 915, col: 37, offset: 32861},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 915, col: 66, offset: 32890},
						expr: &actionExpr{
							pos: position{line: 915, col: 67, offset: 32891},
							run: (*parser).callonSingleQuoteItalicTextContent6,
							expr: &seqExpr{
								pos: position{line: 915, col: 67, offset: 32891},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 915, col: 67, offset: 32891},
										expr: &seqExpr{
											pos: position{line: 915, col: 69, offset: 32893},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 915, col: 69, offset: 32893},
													val:        "_",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 915, col: 73, offset: 32897},
													expr: &ruleRefExpr{
														pos:  position{line: 915, col: 74, offset: 32898},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 915, col: 84, offset: 32908},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 915, col: 92, offset: 32916},
											expr: &ruleRefExpr{
												pos:  position{line: 915, col: 92, offset: 32916},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 915, col: 97, offset: 32921},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 915, col: 106, offset: 32930},
											name: "SingleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 919, col: 1, offset: 33023},
			expr: &actionExpr{
				pos: position{line: 919, col: 33, offset: 33055},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 919, col: 33, offset: 33055},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 919, col: 33, offset: 33055},
							expr: &ruleRefExpr{
								pos:  position{line: 919, col: 34, offset: 33056},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 919, col: 42, offset: 33064},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 919, col: 51, offset: 33073},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 919, col: 51, offset: 33073},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 920, col: 11, offset: 33105},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 921, col: 11, offset: 33125},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 922, col: 11, offset: 33149},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 923, col: 11, offset: 33173},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 924, col: 11, offset: 33199},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 925, col: 11, offset: 33222},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 926, col: 11, offset: 33238},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 927, col: 11, offset: 33261},
										name: "NonSingleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 931, col: 1, offset: 33419},
			expr: &actionExpr{
				pos: position{line: 931, col: 29, offset: 33447},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 931, col: 29, offset: 33447},
					exprs: []interface{}{
						&anyMatcher{
							line: 931, col: 30, offset: 33448,
						},
						&zeroOrMoreExpr{
							pos: position{line: 931, col: 33, offset: 33451},
							expr: &seqExpr{
								pos: position{line: 931, col: 34, offset: 33452},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 931, col: 34, offset: 33452},
										expr: &litMatcher{
											pos:        position{line: 931, col: 35, offset: 33453},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 931, col: 39, offset: 33457},
										expr: &ruleRefExpr{
											pos:  position{line: 931, col: 40, offset: 33458},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 931, col: 43, offset: 33461},
										expr: &litMatcher{
											pos:        position{line: 931, col: 44, offset: 33462},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 931, col: 48, offset: 33466},
										expr: &litMatcher{
											pos:        position{line: 931, col: 49, offset: 33467},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 931, col: 53, offset: 33471},
										expr: &ruleRefExpr{
											pos:  position{line: 931, col: 54, offset: 33472},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 931, col: 62, offset: 33480,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 935, col: 1, offset: 33540},
			expr: &choiceExpr{
				pos: position{line: 936, col: 5, offset: 33566},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 936, col: 5, offset: 33566},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 936, col: 5, offset: 33566},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 936, col: 5, offset: 33566},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 936, col: 18, offset: 33579},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 936, col: 40, offset: 33601},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 936, col: 45, offset: 33606},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 936, col: 54, offset: 33615},
										name: "DoubleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 936, col: 84, offset: 33645},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 938, col: 9, offset: 33801},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 938, col: 9, offset: 33801},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 938, col: 9, offset: 33801},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 938, col: 22, offset: 33814},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 938, col: 44, offset: 33836},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 938, col: 49, offset: 33841},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 938, col: 58, offset: 33850},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 938, col: 88, offset: 33880},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 941, col: 9, offset: 34079},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 941, col: 9, offset: 34079},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 941, col: 9, offset: 34079},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 941, col: 22, offset: 34092},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 941, col: 44, offset: 34114},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 941, col: 48, offset: 34118},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 941, col: 57, offset: 34127},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 941, col: 87, offset: 34157},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 948, col: 1, offset: 34366},
			expr: &choiceExpr{
				pos: position{line: 948, col: 18, offset: 34383},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 948, col: 18, offset: 34383},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 948, col: 45, offset: 34410},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 950, col: 1, offset: 34436},
			expr: &actionExpr{
				pos: position{line: 950, col: 29, offset: 34464},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 950, col: 29, offset: 34464},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 950, col: 29, offset: 34464},
							expr: &litMatcher{
								pos:        position{line: 950, col: 30, offset: 34465},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 950, col: 35, offset: 34470},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 950, col: 40, offset: 34475},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 950, col: 49, offset: 34484},
								name: "DoubleQuoteMonospaceTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 950, col: 82, offset: 34517},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextContent",
			pos:  position{line: 954, col: 1, offset: 34646},
			expr: &seqExpr{
				pos: position{line: 954, col: 36, offset: 34681},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 954, col: 36, offset: 34681},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 954, col: 68, offset: 34713},
						expr: &actionExpr{
							pos: position{line: 954, col: 69, offset: 34714},
							run: (*parser).callonDoubleQuoteMonospaceTextContent4,
							expr: &seqExpr{
								pos: position{line: 954, col: 69, offset: 34714},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 954, col: 69, offset: 34714},
										expr: &litMatcher{
											pos:        position{line: 954, col: 71, offset: 34716},
											val:        "``",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 954, col: 77, offset: 34722},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 954, col: 86, offset: 34731},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 954, col: 86, offset: 34731},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 954, col: 91, offset: 34736},
													name: "DoubleQuoteMonospaceTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 958, col: 1, offset: 34833},
			expr: &actionExpr{
				pos: position{line: 958, col: 36, offset: 34868},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 958, col: 36, offset: 34868},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 958, col: 36, offset: 34868},
							expr: &ruleRefExpr{
								pos:  position{line: 958, col: 37, offset: 34869},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 958, col: 45, offset: 34877},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 958, col: 54, offset: 34886},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 958, col: 54, offset: 34886},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 959, col: 11, offset: 34922},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 960, col: 11, offset: 34941},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 961, col: 11, offset: 34963},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 962, col: 11, offset: 34987},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 963, col: 11, offset: 35013},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 964, col: 11, offset: 35036},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 965, col: 11, offset: 35052},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 966, col: 11, offset: 35075},
										name: "NonDoubleQuoteMonospaceText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 970, col: 1, offset: 35236},
			expr: &actionExpr{
				pos: position{line: 970, col: 32, offset: 35267},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 970, col: 32, offset: 35267},
					exprs: []interface{}{
						&anyMatcher{
							line: 970, col: 33, offset: 35268,
						},
						&zeroOrMoreExpr{
							pos: position{line: 970, col: 36, offset: 35271},
							expr: &seqExpr{
								pos: position{line: 970, col: 37, offset: 35272},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 970, col: 37, offset: 35272},
										expr: &litMatcher{
											pos:        position{line: 970, col: 38, offset: 35273},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 970, col: 43, offset: 35278},
										expr: &ruleRefExpr{
											pos:  position{line: 970, col: 44, offset: 35279},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 970, col: 47, offset: 35282},
										expr: &litMatcher{
											pos:        position{line: 970, col: 48, offset: 35283},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 970, col: 52, offset: 35287},
										expr: &litMatcher{
											pos:        position{line: 970, col: 53, offset: 35288},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 970, col: 57, offset: 35292},
										expr: &ruleRefExpr{
											pos:  position{line: 970, col: 58, offset: 35293},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 970, col: 66, offset: 35301,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 974, col: 1, offset: 35361},
			expr: &choiceExpr{
				pos: position{line: 974, col: 29, offset: 35389},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 974, col: 29, offset: 35389},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 974, col: 29, offset: 35389},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 974, col: 29, offset: 35389},
									expr: &litMatcher{
										pos:        position{line: 974, col: 30, offset: 35390},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 974, col: 34, offset: 35394},
									expr: &litMatcher{
										pos:        position{line: 974, col: 35, offset: 35395},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 974, col: 40, offset: 35400},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 974, col: 44, offset: 35404},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 974, col: 53, offset: 35413},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 974, col: 86, offset: 35446},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 976, col: 5, offset: 35631},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 976, col: 5, offset: 35631},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 976, col: 5, offset: 35631},
									expr: &litMatcher{
										pos:        position{line: 976, col: 6, offset: 35632},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 976, col: 11, offset: 35637},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 976, col: 16, offset: 35642},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 976, col: 25, offset: 35651},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 976, col: 58, offset: 35684},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextContent",
			pos:  position{line: 980, col: 1, offset: 35952},
			expr: &seqExpr{
				pos: position{line: 980, col: 36, offset: 35987},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 980, col: 36, offset: 35987},
						expr: &ruleRefExpr{
							pos:  position{line: 980, col: 37, offset: 35988},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 980, col: 40, offset: 35991},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 980, col: 72, offset: 36023},
						expr: &actionExpr{
							pos: position{line: 980, col: 73, offset: 36024},
							run: (*parser).callonSingleQuoteMonospaceTextContent6,
							expr: &seqExpr{
								pos: position{line: 980, col: 73, offset: 36024},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 980, col: 73, offset: 36024},
										expr: &seqExpr{
											pos: position{line: 980, col: 75, offset: 36026},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 980, col: 75, offset: 36026},
													val:        "`",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 980, col: 79, offset: 36030},
													expr: &ruleRefExpr{
														pos:  position{line: 980, col: 80, offset: 36031},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 980, col: 90, offset: 36041},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 980, col: 98, offset: 36049},
											expr: &ruleRefExpr{
												pos:  position{line: 980, col: 98, offset: 36049},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 980, col: 103, offset: 36054},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 980, col: 112, offset: 36063},
											name: "SingleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 984, col: 1, offset: 36159},
			expr: &actionExpr{
				pos: position{line: 984, col: 37, offset: 36195},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 984, col: 37, offset: 36195},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 984, col: 46, offset: 36204},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 984, col: 46, offset: 36204},
								name: "NEWLINE",
							},
							&ruleRefExpr{
								pos:  position{line: 985, col: 11, offset: 36242},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 986, col: 11, offset: 36278},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 987, col: 11, offset: 36298},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 988, col: 11, offset: 36319},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 989, col: 11, offset: 36343},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 990, col: 11, offset: 36369},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 991, col: 11, offset: 36392},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 992, col: 11, offset: 36408},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 993, col: 11, offset: 36431},
								name: "NonSingleQuoteMonospaceText",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 997, col: 1, offset: 36592},
			expr: &actionExpr{
				pos: position{line: 997, col: 32, offset: 36623},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 997, col: 32, offset: 36623},
					exprs: []interface{}{
						&anyMatcher{
							line: 997, col: 33, offset: 36624,
						},
						&zeroOrMoreExpr{
							pos: position{line: 997, col: 36, offset: 36627},
							expr: &seqExpr{
								pos: position{line: 997, col: 37, offset: 36628},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 997, col: 37, offset: 36628},
										expr: &ruleRefExpr{
											pos:  position{line: 997, col: 38, offset: 36629},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 997, col: 41, offset: 36632},
										expr: &litMatcher{
											pos:        position{line: 997, col: 42, offset: 36633},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 997, col: 46, offset: 36637},
										expr: &litMatcher{
											pos:        position{line: 997, col: 47, offset: 36638},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 997, col: 51, offset: 36642},
										expr: &litMatcher{
											pos:        position{line: 997, col: 52, offset: 36643},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 997, col: 56, offset: 36647},
										expr: &ruleRefExpr{
											pos:  position{line: 997, col: 57, offset: 36648},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 997, col: 65, offset: 36656,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1001, col: 1, offset: 36737},
			expr: &choiceExpr{
				pos: position{line: 1002, col: 5, offset: 36766},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1002, col: 5, offset: 36766},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1002, col: 5, offset: 36766},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1002, col: 5, offset: 36766},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1002, col: 18, offset: 36779},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1002, col: 40, offset: 36801},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1002, col: 45, offset: 36806},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1002, col: 54, offset: 36815},
										name: "DoubleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1002, col: 87, offset: 36848},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1004, col: 9, offset: 37004},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1004, col: 9, offset: 37004},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1004, col: 9, offset: 37004},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1004, col: 22, offset: 37017},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1004, col: 44, offset: 37039},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1004, col: 49, offset: 37044},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1004, col: 58, offset: 37053},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1004, col: 91, offset: 37086},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1007, col: 9, offset: 37285},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1007, col: 9, offset: 37285},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1007, col: 9, offset: 37285},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1007, col: 22, offset: 37298},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1007, col: 44, offset: 37320},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1007, col: 48, offset: 37324},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1007, col: 57, offset: 37333},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1007, col: 90, offset: 37366},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1011, col: 1, offset: 37515},
			expr: &actionExpr{
				pos: position{line: 1011, col: 18, offset: 37532},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1011, col: 18, offset: 37532},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1011, col: 18, offset: 37532},
							expr: &litMatcher{
								pos:        position{line: 1011, col: 19, offset: 37533},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1011, col: 23, offset: 37537},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1011, col: 27, offset: 37541},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1011, col: 36, offset: 37550},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1011, col: 58, offset: 37572},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1015, col: 1, offset: 37661},
			expr: &choiceExpr{
				pos: position{line: 1015, col: 25, offset: 37685},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1015, col: 25, offset: 37685},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1015, col: 38, offset: 37698},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1017, col: 1, offset: 37717},
			expr: &actionExpr{
				pos: position{line: 1017, col: 21, offset: 37737},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1017, col: 21, offset: 37737},
					expr: &seqExpr{
						pos: position{line: 1017, col: 22, offset: 37738},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1017, col: 22, offset: 37738},
								expr: &ruleRefExpr{
									pos:  position{line: 1017, col: 23, offset: 37739},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1017, col: 31, offset: 37747},
								expr: &ruleRefExpr{
									pos:  position{line: 1017, col: 32, offset: 37748},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1017, col: 35, offset: 37751},
								expr: &litMatcher{
									pos:        position{line: 1017, col: 36, offset: 37752},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1017, col: 40, offset: 37756,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1021, col: 1, offset: 37789},
			expr: &actionExpr{
				pos: position{line: 1021, col: 25, offset: 37813},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1021, col: 25, offset: 37813},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1021, col: 25, offset: 37813},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1021, col: 38, offset: 37826},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1021, col: 60, offset: 37848},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1021, col: 64, offset: 37852},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1021, col: 73, offset: 37861},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1021, col: 95, offset: 37883},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1025, col: 1, offset: 38012},
			expr: &actionExpr{
				pos: position{line: 1025, col: 20, offset: 38031},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1025, col: 20, offset: 38031},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1025, col: 20, offset: 38031},
							expr: &litMatcher{
								pos:        position{line: 1025, col: 21, offset: 38032},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1025, col: 25, offset: 38036},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1025, col: 29, offset: 38040},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1025, col: 38, offset: 38049},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1025, col: 62, offset: 38073},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1029, col: 1, offset: 38164},
			expr: &choiceExpr{
				pos: position{line: 1029, col: 27, offset: 38190},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1029, col: 27, offset: 38190},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1029, col: 40, offset: 38203},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1031, col: 1, offset: 38224},
			expr: &actionExpr{
				pos: position{line: 1031, col: 23, offset: 38246},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1031, col: 23, offset: 38246},
					expr: &seqExpr{
						pos: position{line: 1031, col: 24, offset: 38247},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1031, col: 24, offset: 38247},
								expr: &ruleRefExpr{
									pos:  position{line: 1031, col: 25, offset: 38248},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1031, col: 33, offset: 38256},
								expr: &ruleRefExpr{
									pos:  position{line: 1031, col: 34, offset: 38257},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1031, col: 37, offset: 38260},
								expr: &litMatcher{
									pos:        position{line: 1031, col: 38, offset: 38261},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1031, col: 42, offset: 38265,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1035, col: 1, offset: 38298},
			expr: &actionExpr{
				pos: position{line: 1035, col: 27, offset: 38324},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1035, col: 27, offset: 38324},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1035, col: 27, offset: 38324},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1035, col: 40, offset: 38337},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1035, col: 62, offset: 38359},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1035, col: 66, offset: 38363},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1035, col: 75, offset: 38372},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1035, col: 99, offset: 38396},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1042, col: 1, offset: 38632},
			expr: &choiceExpr{
				pos: position{line: 1042, col: 16, offset: 38647},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1042, col: 16, offset: 38647},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1042, col: 40, offset: 38671},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1042, col: 64, offset: 38695},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1044, col: 1, offset: 38713},
			expr: &litMatcher{
				pos:        position{line: 1044, col: 32, offset: 38744},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1046, col: 1, offset: 38749},
			expr: &actionExpr{
				pos: position{line: 1046, col: 26, offset: 38774},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1046, col: 26, offset: 38774},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1046, col: 26, offset: 38774},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1046, col: 54, offset: 38802},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1046, col: 63, offset: 38811},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1046, col: 93, offset: 38841},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1046, col: 121, offset: 38869},
							expr: &ruleRefExpr{
								pos:  position{line: 1046, col: 122, offset: 38870},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1050, col: 1, offset: 38969},
			expr: &choiceExpr{
				pos: position{line: 1050, col: 33, offset: 39001},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1050, col: 34, offset: 39002},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1050, col: 34, offset: 39002},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1050, col: 35, offset: 39003},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1050, col: 35, offset: 39003},
											expr: &ruleRefExpr{
												pos:  position{line: 1050, col: 36, offset: 39004},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1050, col: 64, offset: 39032},
											expr: &ruleRefExpr{
												pos:  position{line: 1050, col: 65, offset: 39033},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1050, col: 68, offset: 39036},
											expr: &ruleRefExpr{
												pos:  position{line: 1050, col: 69, offset: 39037},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 1050, col: 77, offset: 39045,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1050, col: 80, offset: 39048},
									expr: &seqExpr{
										pos: position{line: 1050, col: 81, offset: 39049},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1050, col: 81, offset: 39049},
												expr: &seqExpr{
													pos: position{line: 1050, col: 83, offset: 39051},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1050, col: 83, offset: 39051},
															expr: &ruleRefExpr{
																pos:  position{line: 1050, col: 83, offset: 39051},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1050, col: 87, offset: 39055},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1050, col: 116, offset: 39084},
												expr: &ruleRefExpr{
													pos:  position{line: 1050, col: 117, offset: 39085},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1050, col: 145, offset: 39113},
												expr: &ruleRefExpr{
													pos:  position{line: 1050, col: 146, offset: 39114},
													name: "NEWLINE",
												},
											},
											&anyMatcher{
												line: 1050, col: 154, offset: 39122,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1052, col: 7, offset: 39264},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1052, col: 8, offset: 39265},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1052, col: 8, offset: 39265},
									expr: &ruleRefExpr{
										pos:  position{line: 1052, col: 9, offset: 39266},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1052, col: 12, offset: 39269},
									expr: &ruleRefExpr{
										pos:  position{line: 1052, col: 13, offset: 39270},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 1052, col: 21, offset: 39278},
									expr: &ruleRefExpr{
										pos:  position{line: 1052, col: 22, offset: 39279},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1052, col: 50, offset: 39307,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1056, col: 1, offset: 39389},
			expr: &litMatcher{
				pos:        position{line: 1056, col: 32, offset: 39420},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1058, col: 1, offset: 39427},
			expr: &actionExpr{
				pos: position{line: 1058, col: 26, offset: 39452},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1058, col: 26, offset: 39452},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1058, col: 26, offset: 39452},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1058, col: 54, offset: 39480},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1058, col: 63, offset: 39489},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1058, col: 93, offset: 39519},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1058, col: 121, offset: 39547},
							expr: &ruleRefExpr{
								pos:  position{line: 1058, col: 122, offset: 39548},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1062, col: 1, offset: 39647},
			expr: &choiceExpr{
				pos: position{line: 1062, col: 33, offset: 39679},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1062, col: 34, offset: 39680},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1062, col: 34, offset: 39680},
							expr: &seqExpr{
								pos: position{line: 1062, col: 35, offset: 39681},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1062, col: 35, offset: 39681},
										expr: &ruleRefExpr{
											pos:  position{line: 1062, col: 36, offset: 39682},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1062, col: 64, offset: 39710,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1064, col: 7, offset: 39875},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1064, col: 7, offset: 39875},
							expr: &seqExpr{
								pos: position{line: 1064, col: 8, offset: 39876},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1064, col: 8, offset: 39876},
										expr: &ruleRefExpr{
											pos:  position{line: 1064, col: 9, offset: 39877},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1064, col: 12, offset: 39880},
										expr: &ruleRefExpr{
											pos:  position{line: 1064, col: 13, offset: 39881},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1064, col: 21, offset: 39889},
										expr: &ruleRefExpr{
											pos:  position{line: 1064, col: 22, offset: 39890},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1064, col: 50, offset: 39918,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1068, col: 1, offset: 40001},
			expr: &choiceExpr{
				pos: position{line: 1068, col: 21, offset: 40021},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1068, col: 21, offset: 40021},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1068, col: 21, offset: 40021},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1068, col: 21, offset: 40021},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1068, col: 30, offset: 40030},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1068, col: 38, offset: 40038},
										expr: &ruleRefExpr{
											pos:  position{line: 1068, col: 39, offset: 40039},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1068, col: 67, offset: 40067},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1070, col: 5, offset: 40157},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1070, col: 5, offset: 40157},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1070, col: 5, offset: 40157},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1070, col: 15, offset: 40167},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1070, col: 23, offset: 40175},
										expr: &choiceExpr{
											pos: position{line: 1070, col: 24, offset: 40176},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1070, col: 24, offset: 40176},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1070, col: 37, offset: 40189},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1070, col: 65, offset: 40217},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1074, col: 1, offset: 40307},
			expr: &choiceExpr{
				pos: position{line: 1074, col: 31, offset: 40337},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1074, col: 31, offset: 40337},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1074, col: 43, offset: 40349},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1074, col: 52, offset: 40358},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1074, col: 53, offset: 40359},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1074, col: 53, offset: 40359},
									expr: &litMatcher{
										pos:        position{line: 1074, col: 54, offset: 40360},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1074, col: 58, offset: 40364,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1081, col: 1, offset: 40534},
			expr: &choiceExpr{
				pos: position{line: 1081, col: 19, offset: 40552},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1081, col: 19, offset: 40552},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1081, col: 19, offset: 40552},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1081, col: 19, offset: 40552},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1081, col: 24, offset: 40557},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1081, col: 28, offset: 40561},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1081, col: 32, offset: 40565},
									expr: &ruleRefExpr{
										pos:  position{line: 1081, col: 32, offset: 40565},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1081, col: 36, offset: 40569},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1081, col: 40, offset: 40573},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1081, col: 47, offset: 40580},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1081, col: 68, offset: 40601},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1083, col: 5, offset: 40676},
						run: (*parser).callonCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1083, col: 5, offset: 40676},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1083, col: 5, offset: 40676},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1083, col: 10, offset: 40681},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1083, col: 14, offset: 40685},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1083, col: 18, offset: 40689},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1087, col: 1, offset: 40752},
			expr: &actionExpr{
				pos: position{line: 1087, col: 24, offset: 40775},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1087, col: 24, offset: 40775},
					expr: &choiceExpr{
						pos: position{line: 1087, col: 25, offset: 40776},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1087, col: 25, offset: 40776},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1087, col: 37, offset: 40788},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1087, col: 47, offset: 40798},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1087, col: 47, offset: 40798},
										expr: &litMatcher{
											pos:        position{line: 1087, col: 48, offset: 40799},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1087, col: 54, offset: 40805,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1094, col: 1, offset: 40947},
			expr: &actionExpr{
				pos: position{line: 1094, col: 9, offset: 40955},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 1094, col: 9, offset: 40955},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 1094, col: 15, offset: 40961},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1094, col: 15, offset: 40961},
								name: "RelativeLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1094, col: 30, offset: 40976},
								name: "ExternalLink",
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1099, col: 1, offset: 41083},
			expr: &actionExpr{
				pos: position{line: 1099, col: 17, offset: 41099},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1099, col: 17, offset: 41099},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1099, col: 17, offset: 41099},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1099, col: 25, offset: 41107},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1099, col: 30, offset: 41112},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1099, col: 30, offset: 41112},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1099, col: 41, offset: 41123},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1099, col: 55, offset: 41137},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1099, col: 73, offset: 41155},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1103, col: 1, offset: 41273},
			expr: &actionExpr{
				pos: position{line: 1103, col: 17, offset: 41289},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1103, col: 17, offset: 41289},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1103, col: 17, offset: 41289},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1103, col: 22, offset: 41294},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1103, col: 32, offset: 41304},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1103, col: 49, offset: 41321},
								expr: &ruleRefExpr{
									pos:  position{line: 1103, col: 50, offset: 41322},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1107, col: 1, offset: 41415},
			expr: &choiceExpr{
				pos: position{line: 1107, col: 19, offset: 41433},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1107, col: 19, offset: 41433},
						name: "TextOnlyLinkAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 1107, col: 44, offset: 41458},
						name: "TextAndMoreLinkAttributes",
					},
				},
			},
		},
		{
			name: "TextOnlyLinkAttributes",
			pos:  position{line: 1109, col: 1, offset: 41485},
			expr: &actionExpr{
				pos: position{line: 1109, col: 27, offset: 41511},
				run: (*parser).callonTextOnlyLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1109, col: 27, offset: 41511},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1109, col: 27, offset: 41511},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1109, col: 31, offset: 41515},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1109, col: 36, offset: 41520},
								expr: &ruleRefExpr{
									pos:  position{line: 1109, col: 37, offset: 41521},
									name: "LinkTextWithCommaAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1109, col: 66, offset: 41550},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextWithCommaAttribute",
			pos:  position{line: 1113, col: 1, offset: 41612},
			expr: &choiceExpr{
				pos: position{line: 1115, col: 5, offset: 41684},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1115, col: 5, offset: 41684},
						run: (*parser).callonLinkTextWithCommaAttribute2,
						expr: &seqExpr{
							pos: position{line: 1115, col: 5, offset: 41684},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1115, col: 5, offset: 41684},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1115, col: 10, offset: 41689},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1115, col: 19, offset: 41698},
										expr: &seqExpr{
											pos: position{line: 1115, col: 20, offset: 41699},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1115, col: 20, offset: 41699},
													expr: &litMatcher{
														pos:        position{line: 1115, col: 21, offset: 41700},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1115, col: 25, offset: 41704},
													expr: &litMatcher{
														pos:        position{line: 1115, col: 26, offset: 41705},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1115, col: 30, offset: 41709},
													expr: &litMatcher{
														pos:        position{line: 1115, col: 31, offset: 41710},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1115, col: 37, offset: 41716},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1115, col: 37, offset: 41716},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1115, col: 50, offset: 41729},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1115, col: 63, offset: 41742},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1115, col: 73, offset: 41752},
															run: (*parser).callonLinkTextWithCommaAttribute18,
															expr: &seqExpr{
																pos: position{line: 1115, col: 74, offset: 41753},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1115, col: 74, offset: 41753},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1115, col: 75, offset: 41754},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1115, col: 92, offset: 41771,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1117, col: 11, offset: 41840},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1117, col: 16, offset: 41845},
									expr: &ruleRefExpr{
										pos:  position{line: 1117, col: 16, offset: 41845},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1117, col: 24, offset: 41853},
									expr: &notExpr{
										pos: position{line: 1117, col: 26, offset: 41855},
										expr: &litMatcher{
											pos:        position{line: 1117, col: 27, offset: 41856},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1121, col: 5, offset: 41981},
						run: (*parser).callonLinkTextWithCommaAttribute29,
						expr: &seqExpr{
							pos: position{line: 1121, col: 5, offset: 41981},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1121, col: 5, offset: 41981},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1121, col: 14, offset: 41990},
										expr: &seqExpr{
											pos: position{line: 1121, col: 15, offset: 41991},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1121, col: 15, offset: 41991},
													expr: &litMatcher{
														pos:        position{line: 1121, col: 16, offset: 41992},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1121, col: 20, offset: 41996},
													expr: &litMatcher{
														pos:        position{line: 1121, col: 21, offset: 41997},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1121, col: 26, offset: 42002},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1121, col: 26, offset: 42002},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1121, col: 39, offset: 42015},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1121, col: 52, offset: 42028},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1121, col: 62, offset: 42038},
															run: (*parser).callonLinkTextWithCommaAttribute42,
															expr: &seqExpr{
																pos: position{line: 1121, col: 63, offset: 42039},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1121, col: 63, offset: 42039},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1121, col: 64, offset: 42040},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1121, col: 81, offset: 42057,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1123, col: 11, offset: 42126},
									expr: &notExpr{
										pos: position{line: 1123, col: 13, offset: 42128},
										expr: &litMatcher{
											pos:        position{line: 1123, col: 14, offset: 42129},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextAndMoreLinkAttributes",
			pos:  position{line: 1128, col: 1, offset: 42209},
			expr: &actionExpr{
				pos: position{line: 1128, col: 30, offset: 42238},
				run: (*parser).callonTextAndMoreLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1128, col: 30, offset: 42238},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1128, col: 30, offset: 42238},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1128, col: 34, offset: 42242},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1128, col: 39, offset: 42247},
								expr: &ruleRefExpr{
									pos:  position{line: 1128, col: 40, offset: 42248},
									name: "LinkTextAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1128, col: 60, offset: 42268},
							expr: &litMatcher{
								pos:        position{line: 1128, col: 60, offset: 42268},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1128, col: 65, offset: 42273},
							expr: &ruleRefExpr{
								pos:  position{line: 1128, col: 65, offset: 42273},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1128, col: 69, offset: 42277},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1128, col: 80, offset: 42288},
								expr: &ruleRefExpr{
									pos:  position{line: 1128, col: 81, offset: 42289},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1128, col: 100, offset: 42308},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1132, col: 1, offset: 42393},
			expr: &choiceExpr{
				pos: position{line: 1134, col: 5, offset: 42456},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1134, col: 5, offset: 42456},
						run: (*parser).callonLinkTextAttribute2,
						expr: &seqExpr{
							pos: position{line: 1134, col: 5, offset: 42456},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1134, col: 5, offset: 42456},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1134, col: 10, offset: 42461},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1134, col: 19, offset: 42470},
										expr: &seqExpr{
											pos: position{line: 1134, col: 20, offset: 42471},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1134, col: 20, offset: 42471},
													expr: &litMatcher{
														pos:        position{line: 1134, col: 21, offset: 42472},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1134, col: 25, offset: 42476},
													expr: &litMatcher{
														pos:        position{line: 1134, col: 26, offset: 42477},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1134, col: 30, offset: 42481},
													expr: &litMatcher{
														pos:        position{line: 1134, col: 31, offset: 42482},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1134, col: 37, offset: 42488},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1134, col: 37, offset: 42488},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1134, col: 50, offset: 42501},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1134, col: 63, offset: 42514},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1134, col: 73, offset: 42524},
															run: (*parser).callonLinkTextAttribute18,
															expr: &seqExpr{
																pos: position{line: 1134, col: 74, offset: 42525},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1134, col: 74, offset: 42525},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1134, col: 75, offset: 42526},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1134, col: 92, offset: 42543,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1136, col: 11, offset: 42612},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1136, col: 16, offset: 42617},
									expr: &ruleRefExpr{
										pos:  position{line: 1136, col: 16, offset: 42617},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1136, col: 24, offset: 42625},
									expr: &notExpr{
										pos: position{line: 1136, col: 26, offset: 42627},
										expr: &litMatcher{
											pos:        position{line: 1136, col: 27, offset: 42628},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1140, col: 5, offset: 42753},
						run: (*parser).callonLinkTextAttribute29,
						expr: &seqExpr{
							pos: position{line: 1140, col: 5, offset: 42753},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1140, col: 5, offset: 42753},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1140, col: 14, offset: 42762},
										expr: &seqExpr{
											pos: position{line: 1140, col: 15, offset: 42763},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1140, col: 15, offset: 42763},
													expr: &litMatcher{
														pos:        position{line: 1140, col: 16, offset: 42764},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1140, col: 20, offset: 42768},
													expr: &litMatcher{
														pos:        position{line: 1140, col: 21, offset: 42769},
														val:        ",",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1140, col: 25, offset: 42773},
													expr: &litMatcher{
														pos:        position{line: 1140, col: 26, offset: 42774},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1140, col: 31, offset: 42779},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1140, col: 31, offset: 42779},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1140, col: 44, offset: 42792},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1140, col: 57, offset: 42805},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1140, col: 67, offset: 42815},
															run: (*parser).callonLinkTextAttribute44,
															expr: &seqExpr{
																pos: position{line: 1140, col: 68, offset: 42816},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1140, col: 68, offset: 42816},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1140, col: 69, offset: 42817},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1140, col: 86, offset: 42834,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1142, col: 11, offset: 42903},
									expr: &notExpr{
										pos: position{line: 1142, col: 13, offset: 42905},
										expr: &litMatcher{
											pos:        position{line: 1142, col: 14, offset: 42906},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1149, col: 1, offset: 43087},
			expr: &actionExpr{
				pos: position{line: 1149, col: 15, offset: 43101},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1149, col: 15, offset: 43101},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1149, col: 15, offset: 43101},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1149, col: 26, offset: 43112},
								expr: &ruleRefExpr{
									pos:  position{line: 1149, col: 27, offset: 43113},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1149, col: 47, offset: 43133},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1149, col: 57, offset: 43143},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1149, col: 63, offset: 43149},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1149, col: 68, offset: 43154},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1149, col: 86, offset: 43172},
								name: "ImageAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1149, col: 103, offset: 43189},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1153, col: 1, offset: 43301},
			expr: &actionExpr{
				pos: position{line: 1153, col: 16, offset: 43316},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1153, col: 16, offset: 43316},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1153, col: 16, offset: 43316},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1153, col: 25, offset: 43325},
							expr: &litMatcher{
								pos:        position{line: 1153, col: 26, offset: 43326},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1153, col: 30, offset: 43330},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1153, col: 36, offset: 43336},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1153, col: 41, offset: 43341},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1153, col: 59, offset: 43359},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1157, col: 1, offset: 43472},
			expr: &actionExpr{
				pos: position{line: 1157, col: 20, offset: 43491},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1157, col: 20, offset: 43491},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1157, col: 20, offset: 43491},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1157, col: 24, offset: 43495},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1157, col: 28, offset: 43499},
								expr: &ruleRefExpr{
									pos:  position{line: 1157, col: 29, offset: 43500},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1157, col: 46, offset: 43517},
							expr: &litMatcher{
								pos:        position{line: 1157, col: 46, offset: 43517},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1157, col: 51, offset: 43522},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1157, col: 57, offset: 43528},
								expr: &ruleRefExpr{
									pos:  position{line: 1157, col: 58, offset: 43529},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1157, col: 75, offset: 43546},
							expr: &litMatcher{
								pos:        position{line: 1157, col: 75, offset: 43546},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1157, col: 80, offset: 43551},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1157, col: 87, offset: 43558},
								expr: &ruleRefExpr{
									pos:  position{line: 1157, col: 88, offset: 43559},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1157, col: 105, offset: 43576},
							expr: &litMatcher{
								pos:        position{line: 1157, col: 105, offset: 43576},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1157, col: 110, offset: 43581},
							expr: &ruleRefExpr{
								pos:  position{line: 1157, col: 110, offset: 43581},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1157, col: 114, offset: 43585},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1157, col: 125, offset: 43596},
								expr: &ruleRefExpr{
									pos:  position{line: 1157, col: 126, offset: 43597},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1157, col: 145, offset: 43616},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1164, col: 1, offset: 43906},
			expr: &choiceExpr{
				pos: position{line: 1164, col: 19, offset: 43924},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1164, col: 19, offset: 43924},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1164, col: 19, offset: 43924},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1164, col: 19, offset: 43924},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1164, col: 32, offset: 43937},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1164, col: 41, offset: 43946},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1164, col: 58, offset: 43963},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1166, col: 5, offset: 44038},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1166, col: 5, offset: 44038},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1166, col: 5, offset: 44038},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1166, col: 21, offset: 44054},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 26, offset: 44059},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1166, col: 39, offset: 44072},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1166, col: 43, offset: 44076},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 52, offset: 44085},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1166, col: 69, offset: 44102},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1168, col: 5, offset: 44187},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1168, col: 5, offset: 44187},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1168, col: 5, offset: 44187},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1168, col: 21, offset: 44203},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1168, col: 26, offset: 44208},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1168, col: 39, offset: 44221},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1172, col: 1, offset: 44336},
			expr: &actionExpr{
				pos: position{line: 1172, col: 16, offset: 44351},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1172, col: 16, offset: 44351},
					expr: &choiceExpr{
						pos: position{line: 1172, col: 17, offset: 44352},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1172, col: 17, offset: 44352},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1172, col: 29, offset: 44364},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1172, col: 39, offset: 44374},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1172, col: 39, offset: 44374},
										expr: &litMatcher{
											pos:        position{line: 1172, col: 40, offset: 44375},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1172, col: 44, offset: 44379},
										expr: &litMatcher{
											pos:        position{line: 1172, col: 45, offset: 44380},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1172, col: 49, offset: 44384},
										expr: &ruleRefExpr{
											pos:  position{line: 1172, col: 50, offset: 44385},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1172, col: 55, offset: 44390,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1176, col: 1, offset: 44475},
			expr: &actionExpr{
				pos: position{line: 1176, col: 20, offset: 44494},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1176, col: 20, offset: 44494},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1176, col: 29, offset: 44503},
						expr: &seqExpr{
							pos: position{line: 1176, col: 30, offset: 44504},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1176, col: 30, offset: 44504},
									expr: &litMatcher{
										pos:        position{line: 1176, col: 31, offset: 44505},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1176, col: 35, offset: 44509},
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 36, offset: 44510},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1176, col: 40, offset: 44514},
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 40, offset: 44514},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1176, col: 44, offset: 44518},
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 45, offset: 44519},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1176, col: 61, offset: 44535},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1176, col: 75, offset: 44549},
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 75, offset: 44549},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1183, col: 1, offset: 44863},
			expr: &actionExpr{
				pos: position{line: 1183, col: 19, offset: 44881},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1183, col: 19, offset: 44881},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1183, col: 19, offset: 44881},
							expr: &ruleRefExpr{
								pos:  position{line: 1183, col: 20, offset: 44882},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1184, col: 5, offset: 44911},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1184, col: 12, offset: 44918},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1184, col: 12, offset: 44918},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1185, col: 11, offset: 44941},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1186, col: 11, offset: 44965},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1187, col: 11, offset: 44989},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1188, col: 11, offset: 45011},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1189, col: 11, offset: 45033},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1190, col: 11, offset: 45056},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1191, col: 11, offset: 45084},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1192, col: 11, offset: 45100},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1196, col: 1, offset: 45141},
			expr: &choiceExpr{
				pos: position{line: 1196, col: 19, offset: 45159},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1196, col: 19, offset: 45159},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1197, col: 19, offset: 45200},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1198, col: 19, offset: 45240},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1199, col: 19, offset: 45281},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 19, offset: 45322},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1201, col: 19, offset: 45363},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 19, offset: 45401},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1208, col: 1, offset: 45620},
			expr: &seqExpr{
				pos: position{line: 1208, col: 25, offset: 45644},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1208, col: 25, offset: 45644},
						val:        "```",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 31, offset: 45650},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1210, col: 1, offset: 45656},
			expr: &actionExpr{
				pos: position{line: 1210, col: 16, offset: 45671},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1210, col: 16, offset: 45671},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1210, col: 16, offset: 45671},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1210, col: 27, offset: 45682},
								expr: &ruleRefExpr{
									pos:  position{line: 1210, col: 28, offset: 45683},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1210, col: 48, offset: 45703},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1210, col: 69, offset: 45724},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1210, col: 77, offset: 45732},
								expr: &ruleRefExpr{
									pos:  position{line: 1210, col: 78, offset: 45733},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1210, col: 100, offset: 45755},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1210, col: 100, offset: 45755},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1210, col: 123, offset: 45778},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1214, col: 1, offset: 45886},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 23, offset: 45908},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1214, col: 23, offset: 45908},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 35, offset: 45920},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 51, offset: 45936},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 62, offset: 45947},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1217, col: 1, offset: 45987},
			expr: &actionExpr{
				pos: position{line: 1217, col: 25, offset: 46011},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1217, col: 25, offset: 46011},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1217, col: 31, offset: 46017},
						expr: &ruleRefExpr{
							pos:  position{line: 1217, col: 32, offset: 46018},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1221, col: 1, offset: 46131},
			expr: &actionExpr{
				pos: position{line: 1221, col: 29, offset: 46159},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1221, col: 29, offset: 46159},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1221, col: 29, offset: 46159},
							expr: &ruleRefExpr{
								pos:  position{line: 1221, col: 30, offset: 46160},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1221, col: 51, offset: 46181},
							expr: &ruleRefExpr{
								pos:  position{line: 1221, col: 52, offset: 46182},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1221, col: 62, offset: 46192},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1221, col: 68, offset: 46198},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1228, col: 1, offset: 46436},
			expr: &seqExpr{
				pos: position{line: 1228, col: 26, offset: 46461},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1228, col: 26, offset: 46461},
						val:        "----",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1228, col: 33, offset: 46468},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1231, col: 1, offset: 46509},
			expr: &actionExpr{
				pos: position{line: 1231, col: 17, offset: 46525},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1231, col: 17, offset: 46525},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1231, col: 17, offset: 46525},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1231, col: 28, offset: 46536},
								expr: &ruleRefExpr{
									pos:  position{line: 1231, col: 29, offset: 46537},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1231, col: 49, offset: 46557},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1231, col: 71, offset: 46579},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1231, col: 79, offset: 46587},
								expr: &ruleRefExpr{
									pos:  position{line: 1231, col: 80, offset: 46588},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1231, col: 103, offset: 46611},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1231, col: 103, offset: 46611},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1231, col: 127, offset: 46635},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1235, col: 1, offset: 46744},
			expr: &choiceExpr{
				pos: position{line: 1235, col: 24, offset: 46767},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1235, col: 24, offset: 46767},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1235, col: 40, offset: 46783},
						name: "ListingBlockParagraph",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1237, col: 1, offset: 46806},
			expr: &actionExpr{
				pos: position{line: 1237, col: 26, offset: 46831},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1237, col: 26, offset: 46831},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1237, col: 32, offset: 46837},
						expr: &ruleRefExpr{
							pos:  position{line: 1237, col: 33, offset: 46838},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1241, col: 1, offset: 46957},
			expr: &actionExpr{
				pos: position{line: 1241, col: 30, offset: 46986},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1241, col: 30, offset: 46986},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1241, col: 30, offset: 46986},
							expr: &ruleRefExpr{
								pos:  position{line: 1241, col: 31, offset: 46987},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1241, col: 53, offset: 47009},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1241, col: 59, offset: 47015},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1241, col: 59, offset: 47015},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1241, col: 59, offset: 47015},
											expr: &ruleRefExpr{
												pos:  position{line: 1241, col: 60, offset: 47016},
												name: "EOF",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1241, col: 64, offset: 47020},
											expr: &choiceExpr{
												pos: position{line: 1241, col: 65, offset: 47021},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1241, col: 65, offset: 47021},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1241, col: 77, offset: 47033},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1241, col: 87, offset: 47043},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1241, col: 87, offset: 47043},
																expr: &ruleRefExpr{
																	pos:  position{line: 1241, col: 88, offset: 47044},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1241, col: 92, offset: 47048,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1241, col: 128, offset: 47084},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1248, col: 1, offset: 47410},
			expr: &seqExpr{
				pos: position{line: 1248, col: 26, offset: 47435},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1248, col: 26, offset: 47435},
						val:        "====",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 33, offset: 47442},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1250, col: 1, offset: 47448},
			expr: &actionExpr{
				pos: position{line: 1250, col: 17, offset: 47464},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1250, col: 17, offset: 47464},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1250, col: 17, offset: 47464},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1250, col: 28, offset: 47475},
								expr: &ruleRefExpr{
									pos:  position{line: 1250, col: 29, offset: 47476},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1250, col: 49, offset: 47496},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1250, col: 71, offset: 47518},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1250, col: 79, offset: 47526},
								expr: &choiceExpr{
									pos: position{line: 1250, col: 80, offset: 47527},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1250, col: 80, offset: 47527},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1250, col: 92, offset: 47539},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1250, col: 108, offset: 47555},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1250, col: 119, offset: 47566},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1250, col: 145, offset: 47592},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1250, col: 145, offset: 47592},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1250, col: 169, offset: 47616},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1255, col: 1, offset: 47743},
			expr: &actionExpr{
				pos: position{line: 1255, col: 26, offset: 47768},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1255, col: 26, offset: 47768},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1255, col: 32, offset: 47774},
						expr: &ruleRefExpr{
							pos:  position{line: 1255, col: 33, offset: 47775},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1259, col: 1, offset: 47889},
			expr: &actionExpr{
				pos: position{line: 1259, col: 30, offset: 47918},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1259, col: 30, offset: 47918},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1259, col: 30, offset: 47918},
							expr: &ruleRefExpr{
								pos:  position{line: 1259, col: 31, offset: 47919},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1259, col: 53, offset: 47941},
							expr: &ruleRefExpr{
								pos:  position{line: 1259, col: 54, offset: 47942},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1259, col: 64, offset: 47952},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1259, col: 70, offset: 47958},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1266, col: 1, offset: 48194},
			expr: &seqExpr{
				pos: position{line: 1266, col: 24, offset: 48217},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1266, col: 24, offset: 48217},
						val:        "____",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1266, col: 31, offset: 48224},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1268, col: 1, offset: 48255},
			expr: &actionExpr{
				pos: position{line: 1268, col: 15, offset: 48269},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1268, col: 15, offset: 48269},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1268, col: 15, offset: 48269},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1268, col: 26, offset: 48280},
								expr: &ruleRefExpr{
									pos:  position{line: 1268, col: 27, offset: 48281},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1268, col: 47, offset: 48301},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1268, col: 67, offset: 48321},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1268, col: 75, offset: 48329},
								expr: &ruleRefExpr{
									pos:  position{line: 1268, col: 76, offset: 48330},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1268, col: 97, offset: 48351},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1268, col: 97, offset: 48351},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1268, col: 119, offset: 48373},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1272, col: 1, offset: 48480},
			expr: &actionExpr{
				pos: position{line: 1273, col: 5, offset: 48506},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1273, col: 5, offset: 48506},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1273, col: 5, offset: 48506},
							expr: &ruleRefExpr{
								pos:  position{line: 1273, col: 6, offset: 48507},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1273, col: 26, offset: 48527},
							expr: &ruleRefExpr{
								pos:  position{line: 1273, col: 27, offset: 48528},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1273, col: 31, offset: 48532},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1273, col: 40, offset: 48541},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1273, col: 40, offset: 48541},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1274, col: 15, offset: 48566},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1275, col: 15, offset: 48594},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1276, col: 15, offset: 48620},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1277, col: 15, offset: 48643},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1278, col: 15, offset: 48669},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1279, col: 15, offset: 48696},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1280, col: 15, offset: 48723},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1281, col: 15, offset: 48750},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1282, col: 15, offset: 48782},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1283, col: 15, offset: 48808},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1284, col: 15, offset: 48835},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1285, col: 15, offset: 48856},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1286, col: 15, offset: 48884},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1287, col: 15, offset: 48928},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1288, col: 15, offset: 48966},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1289, col: 15, offset: 49001},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1293, col: 1, offset: 49060},
			expr: &actionExpr{
				pos: position{line: 1293, col: 24, offset: 49083},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1293, col: 24, offset: 49083},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1293, col: 30, offset: 49089},
						expr: &ruleRefExpr{
							pos:  position{line: 1293, col: 31, offset: 49090},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1302, col: 1, offset: 49436},
			expr: &actionExpr{
				pos: position{line: 1302, col: 15, offset: 49450},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1302, col: 15, offset: 49450},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1302, col: 15, offset: 49450},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1302, col: 27, offset: 49462},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1303, col: 5, offset: 49486},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1307, col: 5, offset: 49672},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1307, col: 25, offset: 49692},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1307, col: 33, offset: 49700},
								expr: &ruleRefExpr{
									pos:  position{line: 1307, col: 34, offset: 49701},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1307, col: 55, offset: 49722},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1307, col: 55, offset: 49722},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1307, col: 77, offset: 49744},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1311, col: 1, offset: 49859},
			expr: &choiceExpr{
				pos: position{line: 1311, col: 22, offset: 49880},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1311, col: 22, offset: 49880},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1311, col: 41, offset: 49899},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1311, col: 53, offset: 49911},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1313, col: 1, offset: 49932},
			expr: &actionExpr{
				pos: position{line: 1313, col: 21, offset: 49952},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1313, col: 21, offset: 49952},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1313, col: 21, offset: 49952},
							expr: &ruleRefExpr{
								pos:  position{line: 1313, col: 22, offset: 49953},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1313, col: 42, offset: 49973},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1313, col: 51, offset: 49982},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1318, col: 1, offset: 50044},
			expr: &actionExpr{
				pos: position{line: 1318, col: 24, offset: 50067},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1318, col: 24, offset: 50067},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1318, col: 30, offset: 50073},
						expr: &ruleRefExpr{
							pos:  position{line: 1318, col: 31, offset: 50074},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1322, col: 1, offset: 50164},
			expr: &actionExpr{
				pos: position{line: 1322, col: 28, offset: 50191},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1322, col: 28, offset: 50191},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1322, col: 28, offset: 50191},
							expr: &ruleRefExpr{
								pos:  position{line: 1322, col: 29, offset: 50192},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1322, col: 49, offset: 50212},
							expr: &ruleRefExpr{
								pos:  position{line: 1322, col: 50, offset: 50213},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1322, col: 60, offset: 50223},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1322, col: 66, offset: 50229},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1322, col: 66, offset: 50229},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1322, col: 66, offset: 50229},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1322, col: 75, offset: 50238},
												expr: &ruleRefExpr{
													pos:  position{line: 1322, col: 76, offset: 50239},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1322, col: 109, offset: 50272},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1328, col: 1, offset: 50368},
			expr: &actionExpr{
				pos: position{line: 1328, col: 35, offset: 50402},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1328, col: 35, offset: 50402},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1328, col: 35, offset: 50402},
							expr: &ruleRefExpr{
								pos:  position{line: 1328, col: 36, offset: 50403},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1328, col: 40, offset: 50407},
							expr: &ruleRefExpr{
								pos:  position{line: 1328, col: 41, offset: 50408},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1329, col: 5, offset: 50423},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1329, col: 14, offset: 50432},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1329, col: 14, offset: 50432},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1330, col: 11, offset: 50450},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1331, col: 11, offset: 50473},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1332, col: 11, offset: 50489},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1333, col: 11, offset: 50512},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1334, col: 11, offset: 50538},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1335, col: 11, offset: 50565},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1336, col: 11, offset: 50587},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1337, col: 11, offset: 50613},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1338, col: 11, offset: 50654},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1339, col: 11, offset: 50681},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1346, col: 1, offset: 50911},
			expr: &seqExpr{
				pos: position{line: 1346, col: 26, offset: 50936},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1346, col: 26, offset: 50936},
						val:        "****",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1346, col: 33, offset: 50943},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1348, col: 1, offset: 50949},
			expr: &actionExpr{
				pos: position{line: 1348, col: 17, offset: 50965},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1348, col: 17, offset: 50965},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1348, col: 17, offset: 50965},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1348, col: 28, offset: 50976},
								expr: &ruleRefExpr{
									pos:  position{line: 1348, col: 29, offset: 50977},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1348, col: 49, offset: 50997},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1348, col: 71, offset: 51019},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1348, col: 79, offset: 51027},
								expr: &ruleRefExpr{
									pos:  position{line: 1348, col: 80, offset: 51028},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1348, col: 104, offset: 51052},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1348, col: 104, offset: 51052},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1348, col: 128, offset: 51076},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1352, col: 1, offset: 51185},
			expr: &choiceExpr{
				pos: position{line: 1352, col: 24, offset: 51208},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1352, col: 24, offset: 51208},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 36, offset: 51220},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 52, offset: 51236},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 63, offset: 51247},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 81, offset: 51265},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1354, col: 1, offset: 51288},
			expr: &actionExpr{
				pos: position{line: 1354, col: 20, offset: 51307},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1354, col: 20, offset: 51307},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1354, col: 20, offset: 51307},
							expr: &ruleRefExpr{
								pos:  position{line: 1354, col: 21, offset: 51308},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1354, col: 34, offset: 51321},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1354, col: 43, offset: 51330},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1359, col: 1, offset: 51393},
			expr: &actionExpr{
				pos: position{line: 1359, col: 26, offset: 51418},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1359, col: 26, offset: 51418},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1359, col: 32, offset: 51424},
						expr: &ruleRefExpr{
							pos:  position{line: 1359, col: 33, offset: 51425},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1363, col: 1, offset: 51539},
			expr: &actionExpr{
				pos: position{line: 1363, col: 30, offset: 51568},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1363, col: 30, offset: 51568},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1363, col: 30, offset: 51568},
							expr: &ruleRefExpr{
								pos:  position{line: 1363, col: 31, offset: 51569},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1363, col: 53, offset: 51591},
							expr: &ruleRefExpr{
								pos:  position{line: 1363, col: 54, offset: 51592},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1363, col: 64, offset: 51602},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1363, col: 70, offset: 51608},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1371, col: 1, offset: 51839},
			expr: &actionExpr{
				pos: position{line: 1371, col: 10, offset: 51848},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1371, col: 10, offset: 51848},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1371, col: 10, offset: 51848},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1371, col: 21, offset: 51859},
								expr: &ruleRefExpr{
									pos:  position{line: 1371, col: 22, offset: 51860},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1371, col: 42, offset: 51880},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1372, col: 5, offset: 51899},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1372, col: 12, offset: 51906},
								expr: &ruleRefExpr{
									pos:  position{line: 1372, col: 13, offset: 51907},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1373, col: 5, offset: 51929},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1373, col: 11, offset: 51935},
								expr: &ruleRefExpr{
									pos:  position{line: 1373, col: 12, offset: 51936},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1374, col: 6, offset: 51953},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1374, col: 6, offset: 51953},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1374, col: 23, offset: 51970},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1378, col: 1, offset: 52085},
			expr: &seqExpr{
				pos: position{line: 1378, col: 23, offset: 52107},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1378, col: 23, offset: 52107},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1378, col: 27, offset: 52111},
						expr: &ruleRefExpr{
							pos:  position{line: 1378, col: 27, offset: 52111},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1380, col: 1, offset: 52116},
			expr: &seqExpr{
				pos: position{line: 1380, col: 19, offset: 52134},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1380, col: 19, offset: 52134},
						val:        "|===",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1380, col: 26, offset: 52141},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1383, col: 1, offset: 52210},
			expr: &actionExpr{
				pos: position{line: 1383, col: 20, offset: 52229},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1383, col: 20, offset: 52229},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1383, col: 20, offset: 52229},
							expr: &ruleRefExpr{
								pos:  position{line: 1383, col: 21, offset: 52230},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1383, col: 36, offset: 52245},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1383, col: 42, offset: 52251},
								expr: &ruleRefExpr{
									pos:  position{line: 1383, col: 43, offset: 52252},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1383, col: 55, offset: 52264},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1383, col: 59, offset: 52268},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1387, col: 1, offset: 52336},
			expr: &actionExpr{
				pos: position{line: 1387, col: 14, offset: 52349},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1387, col: 14, offset: 52349},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1387, col: 14, offset: 52349},
							expr: &ruleRefExpr{
								pos:  position{line: 1387, col: 15, offset: 52350},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1387, col: 30, offset: 52365},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1387, col: 36, offset: 52371},
								expr: &ruleRefExpr{
									pos:  position{line: 1387, col: 37, offset: 52372},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1387, col: 49, offset: 52384},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1387, col: 53, offset: 52388},
							expr: &ruleRefExpr{
								pos:  position{line: 1387, col: 53, offset: 52388},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1391, col: 1, offset: 52457},
			expr: &actionExpr{
				pos: position{line: 1391, col: 14, offset: 52470},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1391, col: 14, offset: 52470},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1391, col: 14, offset: 52470},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 33, offset: 52489},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1391, col: 42, offset: 52498},
								expr: &seqExpr{
									pos: position{line: 1391, col: 43, offset: 52499},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1391, col: 43, offset: 52499},
											expr: &ruleRefExpr{
												pos:  position{line: 1391, col: 44, offset: 52500},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1391, col: 63, offset: 52519},
											expr: &ruleRefExpr{
												pos:  position{line: 1391, col: 64, offset: 52520},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1391, col: 68, offset: 52524},
											expr: &ruleRefExpr{
												pos:  position{line: 1391, col: 68, offset: 52524},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1391, col: 72, offset: 52528},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1391, col: 86, offset: 52542},
											expr: &ruleRefExpr{
												pos:  position{line: 1391, col: 86, offset: 52542},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1398, col: 1, offset: 52788},
			expr: &litMatcher{
				pos:        position{line: 1398, col: 26, offset: 52813},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1400, col: 1, offset: 52821},
			expr: &actionExpr{
				pos: position{line: 1400, col: 17, offset: 52837},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1400, col: 17, offset: 52837},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1400, col: 17, offset: 52837},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1400, col: 39, offset: 52859},
							expr: &ruleRefExpr{
								pos:  position{line: 1400, col: 39, offset: 52859},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1400, col: 43, offset: 52863},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1400, col: 51, offset: 52871},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1400, col: 59, offset: 52879},
								expr: &ruleRefExpr{
									pos:  position{line: 1400, col: 60, offset: 52880},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1400, col: 81, offset: 52901},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1400, col: 82, offset: 52902},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1400, col: 82, offset: 52902},
											name: "CommentBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1400, col: 104, offset: 52924},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1400, col: 112, offset: 52932},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1404, col: 1, offset: 53038},
			expr: &actionExpr{
				pos: position{line: 1404, col: 21, offset: 53058},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1404, col: 21, offset: 53058},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1404, col: 21, offset: 53058},
							expr: &choiceExpr{
								pos: position{line: 1404, col: 22, offset: 53059},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1404, col: 22, offset: 53059},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1404, col: 34, offset: 53071},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1404, col: 44, offset: 53081},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1404, col: 44, offset: 53081},
												expr: &ruleRefExpr{
													pos:  position{line: 1404, col: 45, offset: 53082},
													name: "CommentBlockDelimiter",
												},
											},
											&notExpr{
												pos: position{line: 1404, col: 67, offset: 53104},
												expr: &ruleRefExpr{
													pos:  position{line: 1404, col: 68, offset: 53105},
													name: "EOL",
												},
											},
											&anyMatcher{
												line: 1404, col: 73, offset: 53110,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1404, col: 78, offset: 53115},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1408, col: 1, offset: 53155},
			expr: &actionExpr{
				pos: position{line: 1408, col: 22, offset: 53176},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1408, col: 22, offset: 53176},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1408, col: 22, offset: 53176},
							expr: &ruleRefExpr{
								pos:  position{line: 1408, col: 23, offset: 53177},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1408, col: 45, offset: 53199},
							expr: &ruleRefExpr{
								pos:  position{line: 1408, col: 45, offset: 53199},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1408, col: 49, offset: 53203},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1408, col: 54, offset: 53208},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1408, col: 63, offset: 53217},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1408, col: 89, offset: 53243},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1412, col: 1, offset: 53308},
			expr: &actionExpr{
				pos: position{line: 1412, col: 29, offset: 53336},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1412, col: 29, offset: 53336},
					expr: &choiceExpr{
						pos: position{line: 1412, col: 30, offset: 53337},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1412, col: 30, offset: 53337},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1412, col: 42, offset: 53349},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1412, col: 52, offset: 53359},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1412, col: 52, offset: 53359},
										expr: &ruleRefExpr{
											pos:  position{line: 1412, col: 53, offset: 53360},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1412, col: 58, offset: 53365,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1420, col: 1, offset: 53674},
			expr: &choiceExpr{
				pos: position{line: 1420, col: 17, offset: 53690},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1420, col: 17, offset: 53690},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1420, col: 49, offset: 53722},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1420, col: 78, offset: 53751},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1422, col: 1, offset: 53787},
			expr: &litMatcher{
				pos:        position{line: 1422, col: 26, offset: 53812},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1425, col: 1, offset: 53884},
			expr: &actionExpr{
				pos: position{line: 1425, col: 31, offset: 53914},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1425, col: 31, offset: 53914},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1425, col: 31, offset: 53914},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1425, col: 42, offset: 53925},
								expr: &ruleRefExpr{
									pos:  position{line: 1425, col: 43, offset: 53926},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1425, col: 63, offset: 53946},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1425, col: 70, offset: 53953},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1430, col: 1, offset: 54183},
			expr: &actionExpr{
				pos: position{line: 1431, col: 5, offset: 54223},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1431, col: 5, offset: 54223},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1431, col: 5, offset: 54223},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1431, col: 16, offset: 54234},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1431, col: 16, offset: 54234},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1431, col: 16, offset: 54234},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1431, col: 19, offset: 54237},
											expr: &choiceExpr{
												pos: position{line: 1431, col: 20, offset: 54238},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1431, col: 20, offset: 54238},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1431, col: 32, offset: 54250},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1431, col: 41, offset: 54259},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1431, col: 42, offset: 54260},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1431, col: 42, offset: 54260},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1431, col: 43, offset: 54261},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1431, col: 48, offset: 54266,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1435, col: 8, offset: 54357},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1436, col: 5, offset: 54420},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1436, col: 16, offset: 54431},
								expr: &actionExpr{
									pos: position{line: 1437, col: 9, offset: 54441},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1437, col: 9, offset: 54441},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1437, col: 9, offset: 54441},
												expr: &ruleRefExpr{
													pos:  position{line: 1437, col: 10, offset: 54442},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1438, col: 9, offset: 54461},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1438, col: 20, offset: 54472},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1438, col: 20, offset: 54472},
														expr: &choiceExpr{
															pos: position{line: 1438, col: 21, offset: 54473},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1438, col: 21, offset: 54473},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1438, col: 33, offset: 54485},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1438, col: 43, offset: 54495},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1438, col: 43, offset: 54495},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1438, col: 44, offset: 54496},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1438, col: 49, offset: 54501,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1440, col: 12, offset: 54558},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1447, col: 1, offset: 54788},
			expr: &actionExpr{
				pos: position{line: 1447, col: 39, offset: 54826},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1447, col: 39, offset: 54826},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1447, col: 39, offset: 54826},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1447, col: 50, offset: 54837},
								expr: &ruleRefExpr{
									pos:  position{line: 1447, col: 51, offset: 54838},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1448, col: 9, offset: 54866},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1448, col: 31, offset: 54888},
							expr: &ruleRefExpr{
								pos:  position{line: 1448, col: 31, offset: 54888},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1448, col: 35, offset: 54892},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1448, col: 43, offset: 54900},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1448, col: 50, offset: 54907},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1448, col: 92, offset: 54949},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1448, col: 93, offset: 54950},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1448, col: 93, offset: 54950},
											name: "LiteralBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1448, col: 115, offset: 54972},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1448, col: 123, offset: 54980},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1453, col: 1, offset: 55139},
			expr: &actionExpr{
				pos: position{line: 1453, col: 44, offset: 55182},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1453, col: 44, offset: 55182},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1453, col: 50, offset: 55188},
						expr: &ruleRefExpr{
							pos:  position{line: 1453, col: 51, offset: 55189},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1457, col: 1, offset: 55273},
			expr: &actionExpr{
				pos: position{line: 1458, col: 5, offset: 55328},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1458, col: 5, offset: 55328},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1458, col: 5, offset: 55328},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1458, col: 11, offset: 55334},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1458, col: 11, offset: 55334},
									expr: &choiceExpr{
										pos: position{line: 1458, col: 12, offset: 55335},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1458, col: 12, offset: 55335},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1458, col: 24, offset: 55347},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1458, col: 34, offset: 55357},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1458, col: 34, offset: 55357},
														expr: &ruleRefExpr{
															pos:  position{line: 1458, col: 35, offset: 55358},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1458, col: 57, offset: 55380},
														expr: &ruleRefExpr{
															pos:  position{line: 1458, col: 58, offset: 55381},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1458, col: 62, offset: 55385,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1460, col: 8, offset: 55434},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1465, col: 1, offset: 55560},
			expr: &actionExpr{
				pos: position{line: 1466, col: 5, offset: 55598},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1466, col: 5, offset: 55598},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1466, col: 5, offset: 55598},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1466, col: 16, offset: 55609},
								expr: &ruleRefExpr{
									pos:  position{line: 1466, col: 17, offset: 55610},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1467, col: 5, offset: 55634},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1474, col: 5, offset: 55848},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1474, col: 12, offset: 55855},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1478, col: 1, offset: 56005},
			expr: &actionExpr{
				pos: position{line: 1478, col: 16, offset: 56020},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1478, col: 16, offset: 56020},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1483, col: 1, offset: 56103},
			expr: &actionExpr{
				pos: position{line: 1483, col: 39, offset: 56141},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1483, col: 39, offset: 56141},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1483, col: 45, offset: 56147},
						expr: &ruleRefExpr{
							pos:  position{line: 1483, col: 46, offset: 56148},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1487, col: 1, offset: 56228},
			expr: &actionExpr{
				pos: position{line: 1487, col: 38, offset: 56265},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1487, col: 38, offset: 56265},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1487, col: 38, offset: 56265},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1487, col: 44, offset: 56271},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1487, col: 44, offset: 56271},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1487, col: 44, offset: 56271},
											expr: &ruleRefExpr{
												pos:  position{line: 1487, col: 46, offset: 56273},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1487, col: 57, offset: 56284},
											expr: &choiceExpr{
												pos: position{line: 1487, col: 58, offset: 56285},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1487, col: 58, offset: 56285},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1487, col: 70, offset: 56297},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1487, col: 80, offset: 56307},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1487, col: 80, offset: 56307},
																expr: &ruleRefExpr{
																	pos:  position{line: 1487, col: 81, offset: 56308},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1487, col: 86, offset: 56313,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1489, col: 4, offset: 56354},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1496, col: 1, offset: 56526},
			expr: &actionExpr{
				pos: position{line: 1496, col: 14, offset: 56539},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1496, col: 14, offset: 56539},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1496, col: 14, offset: 56539},
							expr: &ruleRefExpr{
								pos:  position{line: 1496, col: 15, offset: 56540},
								name: "EOF",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1496, col: 19, offset: 56544},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1503, col: 1, offset: 56692},
			expr: &charClassMatcher{
				pos:        position{line: 1503, col: 13, offset: 56704},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1505, col: 1, offset: 56714},
			expr: &choiceExpr{
				pos: position{line: 1505, col: 16, offset: 56729},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1505, col: 16, offset: 56729},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1505, col: 22, offset: 56735},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1505, col: 28, offset: 56741},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1505, col: 34, offset: 56747},
						val:        "]",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1507, col: 1, offset: 56752},
			expr: &actionExpr{
				pos: position{line: 1507, col: 14, offset: 56765},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1507, col: 14, offset: 56765},
					expr: &charClassMatcher{
						pos:        position{line: 1507, col: 14, offset: 56765},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1511, col: 1, offset: 56811},
			expr: &litMatcher{
				pos:        position{line: 1511, col: 8, offset: 56818},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1513, col: 1, offset: 56823},
			expr: &actionExpr{
				pos: position{line: 1513, col: 15, offset: 56837},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1513, col: 15, offset: 56837},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1513, col: 15, offset: 56837},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1513, col: 25, offset: 56847},
							expr: &choiceExpr{
								pos: position{line: 1513, col: 27, offset: 56849},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1513, col: 27, offset: 56849},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1513, col: 32, offset: 56854},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1518, col: 1, offset: 57119},
			expr: &actionExpr{
				pos: position{line: 1518, col: 14, offset: 57132},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1518, col: 15, offset: 57133},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1518, col: 15, offset: 57133},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1518, col: 27, offset: 57145},
							name: "QuotedTextPrefix",
						},
						&ruleRefExpr{
							pos:  position{line: 1518, col: 46, offset: 57164},
							name: "Parenthesis",
						},
						&oneOrMoreExpr{
							pos: position{line: 1518, col: 60, offset: 57178},
							expr: &actionExpr{
								pos: position{line: 1518, col: 61, offset: 57179},
								run: (*parser).callonOtherWord7,
								expr: &seqExpr{
									pos: position{line: 1518, col: 61, offset: 57179},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1518, col: 62, offset: 57180},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1518, col: 62, offset: 57180},
													expr: &ruleRefExpr{
														pos:  position{line: 1518, col: 63, offset: 57181},
														name: "NEWLINE",
													},
												},
												&notExpr{
													pos: position{line: 1518, col: 71, offset: 57189},
													expr: &ruleRefExpr{
														pos:  position{line: 1518, col: 72, offset: 57190},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1518, col: 75, offset: 57193},
													expr: &ruleRefExpr{
														pos:  position{line: 1518, col: 76, offset: 57194},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1518, col: 80, offset: 57198},
													expr: &ruleRefExpr{
														pos:  position{line: 1518, col: 81, offset: 57199},
														name: "QuotedTextPrefix",
													},
												},
												&anyMatcher{
													line: 1518, col: 98, offset: 57216,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1518, col: 101, offset: 57219},
											expr: &ruleRefExpr{
												pos:  position{line: 1518, col: 101, offset: 57219},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1520, col: 7, offset: 57328},
							expr: &litMatcher{
								pos:        position{line: 1520, col: 7, offset: 57328},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1524, col: 1, offset: 57509},
			expr: &oneOrMoreExpr{
				pos: position{line: 1524, col: 11, offset: 57519},
				expr: &ruleRefExpr{
					pos:  position{line: 1524, col: 11, offset: 57519},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1526, col: 1, offset: 57525},
			expr: &actionExpr{
				pos: position{line: 1526, col: 17, offset: 57541},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1526, col: 17, offset: 57541},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1526, col: 26, offset: 57550},
						expr: &choiceExpr{
							pos: position{line: 1526, col: 27, offset: 57551},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1526, col: 27, offset: 57551},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1526, col: 38, offset: 57562},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1530, col: 1, offset: 57654},
			expr: &actionExpr{
				pos: position{line: 1530, col: 13, offset: 57666},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1530, col: 13, offset: 57666},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1530, col: 23, offset: 57676},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1530, col: 23, offset: 57676},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1530, col: 34, offset: 57687},
								expr: &choiceExpr{
									pos: position{line: 1530, col: 35, offset: 57688},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1530, col: 35, offset: 57688},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1530, col: 46, offset: 57699},
											name: "DocumentAttributeSubstitution",
										},
										&seqExpr{
											pos: position{line: 1530, col: 78, offset: 57731},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1530, col: 78, offset: 57731},
													expr: &ruleRefExpr{
														pos:  position{line: 1530, col: 79, offset: 57732},
														name: "EOL",
													},
												},
												&notExpr{
													pos: position{line: 1530, col: 83, offset: 57736},
													expr: &ruleRefExpr{
														pos:  position{line: 1530, col: 84, offset: 57737},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1530, col: 87, offset: 57740},
													expr: &litMatcher{
														pos:        position{line: 1530, col: 88, offset: 57741},
														val:        "[",
														ignoreCase: false,
													},
												},
												&anyMatcher{
													line: 1530, col: 92, offset: 57745,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1534, col: 1, offset: 57810},
			expr: &oneOrMoreExpr{
				pos: position{line: 1534, col: 13, offset: 57822},
				expr: &choiceExpr{
					pos: position{line: 1534, col: 14, offset: 57823},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1534, col: 14, offset: 57823},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+,_%]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', ',', '_', '%'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1534, col: 99, offset: 57908},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1534, col: 105, offset: 57914},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1536, col: 1, offset: 57955},
			expr: &actionExpr{
				pos: position{line: 1536, col: 8, offset: 57962},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1536, col: 8, offset: 57962},
					expr: &choiceExpr{
						pos: position{line: 1536, col: 9, offset: 57963},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1536, col: 9, offset: 57963},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1536, col: 22, offset: 57976},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1536, col: 22, offset: 57976},
										expr: &ruleRefExpr{
											pos:  position{line: 1536, col: 23, offset: 57977},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1536, col: 31, offset: 57985},
										expr: &ruleRefExpr{
											pos:  position{line: 1536, col: 32, offset: 57986},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1536, col: 35, offset: 57989},
										expr: &litMatcher{
											pos:        position{line: 1536, col: 36, offset: 57990},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1536, col: 40, offset: 57994},
										expr: &litMatcher{
											pos:        position{line: 1536, col: 41, offset: 57995},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1536, col: 46, offset: 58000,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1540, col: 1, offset: 58041},
			expr: &choiceExpr{
				pos: position{line: 1540, col: 15, offset: 58055},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1540, col: 15, offset: 58055},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1540, col: 27, offset: 58067},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1540, col: 40, offset: 58080},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1540, col: 51, offset: 58091},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1540, col: 62, offset: 58102},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1542, col: 1, offset: 58113},
			expr: &actionExpr{
				pos: position{line: 1542, col: 7, offset: 58119},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1542, col: 7, offset: 58119},
					expr: &choiceExpr{
						pos: position{line: 1542, col: 8, offset: 58120},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1542, col: 8, offset: 58120},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1542, col: 21, offset: 58133},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1542, col: 21, offset: 58133},
										expr: &ruleRefExpr{
											pos:  position{line: 1542, col: 22, offset: 58134},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1542, col: 30, offset: 58142},
										expr: &ruleRefExpr{
											pos:  position{line: 1542, col: 31, offset: 58143},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1542, col: 34, offset: 58146},
										expr: &litMatcher{
											pos:        position{line: 1542, col: 35, offset: 58147},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1542, col: 39, offset: 58151},
										expr: &litMatcher{
											pos:        position{line: 1542, col: 40, offset: 58152},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1542, col: 44, offset: 58156},
										expr: &litMatcher{
											pos:        position{line: 1542, col: 45, offset: 58157},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1542, col: 50, offset: 58162},
										expr: &litMatcher{
											pos:        position{line: 1542, col: 51, offset: 58163},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1542, col: 56, offset: 58168},
										expr: &litMatcher{
											pos:        position{line: 1542, col: 57, offset: 58169},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1542, col: 62, offset: 58174,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1546, col: 1, offset: 58215},
			expr: &actionExpr{
				pos: position{line: 1546, col: 10, offset: 58224},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1546, col: 10, offset: 58224},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1550, col: 1, offset: 58266},
			expr: &actionExpr{
				pos: position{line: 1550, col: 11, offset: 58276},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1550, col: 11, offset: 58276},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1550, col: 11, offset: 58276},
							expr: &litMatcher{
								pos:        position{line: 1550, col: 11, offset: 58276},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1550, col: 16, offset: 58281},
							expr: &ruleRefExpr{
								pos:  position{line: 1550, col: 16, offset: 58281},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1554, col: 1, offset: 58333},
			expr: &choiceExpr{
				pos: position{line: 1554, col: 7, offset: 58339},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1554, col: 7, offset: 58339},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1554, col: 13, offset: 58345},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1554, col: 13, offset: 58345},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NEWLINE",
			pos:  position{line: 1558, col: 1, offset: 58386},
			expr: &choiceExpr{
				pos: position{line: 1558, col: 12, offset: 58397},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1558, col: 12, offset: 58397},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1558, col: 21, offset: 58406},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1558, col: 28, offset: 58413},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1560, col: 1, offset: 58419},
			expr: &notExpr{
				pos: position{line: 1560, col: 8, offset: 58426},
				expr: &anyMatcher{
					line: 1560, col: 9, offset: 58427,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1562, col: 1, offset: 58430},
			expr: &choiceExpr{
				pos: position{line: 1562, col: 8, offset: 58437},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1562, col: 8, offset: 58437},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 1562, col: 18, offset: 58447},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOLS",
			pos:  position{line: 1564, col: 1, offset: 58452},
			expr: &seqExpr{
				pos: position{line: 1564, col: 9, offset: 58460},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1564, col: 9, offset: 58460},
						expr: &ruleRefExpr{
							pos:  position{line: 1564, col: 9, offset: 58460},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1564, col: 13, offset: 58464},
						name: "EOL",
					},
				},
			},
		},
	},
}

func (c *current) onDraftAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonDraftAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDraftAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onDraftAsciidocDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonDraftAsciidocDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDraftAsciidocDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onDraftTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonDraftTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDraftTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.(types.InlineElements), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset9(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset9(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID9(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID9(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle5()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSourceAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes8()
}

func (c *current) onSourceAttributes1(language interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttribute2(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)

}

func (p *parser) callonGenericAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute2(stack["key"], stack["value"])
}

func (c *current) onGenericAttribute14(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)

}

func (p *parser) callonGenericAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute14(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	// attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.(types.InlineElements), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.(string), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onLabeledListItemTerm1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1()
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimBlock1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonVerbatimBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimBlock1(stack["elements"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["content"])
}

func (c *current) onDoubleQuoteBoldTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["content"])
}

func (c *current) onSingleQuoteBoldText12(content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, append([]interface{}{types.StringElement{Content: "*"}}, content.([]interface{})...)) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["content"])
}

func (c *current) onSingleQuoteBoldTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteBoldTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", content.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", content.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteItalicText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["content"])
}

func (c *current) onDoubleQuoteItalicTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["content"])
}

func (c *current) onSingleQuoteItalicText12(content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, append([]interface{}{types.StringElement{Content: "_"}}, content.([]interface{})...)) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["content"])
}

func (c *current) onSingleQuoteItalicTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteItalicTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", content.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", content.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteMonospaceText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["content"])
}

func (c *current) onDoubleQuoteMonospaceTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["content"])
}

func (c *current) onSingleQuoteMonospaceText12(content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, append([]interface{}{types.StringElement{Content: "`"}}, content.([]interface{})...)) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["content"])
}

func (c *current) onSingleQuoteMonospaceTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteMonospaceTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", content.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", content.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["content"])
}

func (c *current) onSubscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, content)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["content"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", content)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSuperscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, content)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["content"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", content)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), label.(string))
}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference13(id interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), nil)
}

func (p *parser) callonCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference13(stack["id"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onLink1(link interface{}) (interface{}, error) {
	return link, nil
}

func (p *parser) callonLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onTextOnlyLinkAttributes1(text interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, nil)
}

func (p *parser) callonTextOnlyLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes1(stack["text"])
}

func (c *current) onLinkTextWithCommaAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute18()
}

func (c *current) onLinkTextWithCommaAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute2(stack["elements"])
}

func (c *current) onLinkTextWithCommaAttribute42() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute42()
}

func (c *current) onLinkTextWithCommaAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute29(stack["elements"])
}

func (c *current) onTextAndMoreLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonTextAndMoreLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkTextAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute18()
}

func (c *current) onLinkTextAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute2(stack["elements"])
}

func (c *current) onLinkTextAttribute44() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute44()
}

func (c *current) onLinkTextAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute29(stack["elements"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(string), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(string), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), types.InlineElements{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord7() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord7()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
