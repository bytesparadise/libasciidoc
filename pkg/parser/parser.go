// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocRawDocument",
			pos:  position{line: 17, col: 1, offset: 351},
			expr: &actionExpr{
				pos: position{line: 17, col: 24, offset: 374},
				run: (*parser).callonAsciidocRawDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 24, offset: 374},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 24, offset: 374},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 37, offset: 387},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 37, offset: 387},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 51, offset: 401},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 59, offset: 409},
								name: "AsciidocDocumentRawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 86, offset: 436},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 22, col: 1, offset: 540},
			expr: &actionExpr{
				pos: position{line: 22, col: 21, offset: 560},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 22, col: 21, offset: 560},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 22, col: 21, offset: 560},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 22, col: 29, offset: 568},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 22, col: 50, offset: 589},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawFile",
			pos:  position{line: 27, col: 1, offset: 712},
			expr: &actionExpr{
				pos: position{line: 27, col: 12, offset: 723},
				run: (*parser).callonRawFile1,
				expr: &seqExpr{
					pos: position{line: 27, col: 12, offset: 723},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 27, col: 12, offset: 723},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 20, offset: 731},
								name: "RawFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 27, col: 36, offset: 747},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 33, col: 1, offset: 897},
			expr: &actionExpr{
				pos: position{line: 33, col: 17, offset: 913},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 33, col: 17, offset: 913},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 17, offset: 913},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 33, col: 25, offset: 921},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 33, col: 45, offset: 941},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentRawBlocks",
			pos:  position{line: 40, col: 1, offset: 1129},
			expr: &actionExpr{
				pos: position{line: 40, col: 30, offset: 1158},
				run: (*parser).callonAsciidocDocumentRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 40, col: 30, offset: 1158},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 40, col: 30, offset: 1158},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 40, col: 38, offset: 1166},
								expr: &ruleRefExpr{
									pos:  position{line: 40, col: 38, offset: 1166},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 40, col: 55, offset: 1183},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 40, col: 63, offset: 1191},
								expr: &ruleRefExpr{
									pos:  position{line: 40, col: 63, offset: 1191},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 49, col: 1, offset: 1452},
			expr: &choiceExpr{
				pos: position{line: 50, col: 9, offset: 1482},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 50, col: 9, offset: 1482},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1548},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1570},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1597},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1650},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1669},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1695},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1720},
						name: "RawVerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1749},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1774},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1801},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1831},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 11, offset: 1858},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 63, col: 11, offset: 1894},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 64, col: 11, offset: 1919},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 65, col: 11, offset: 1952},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 66, col: 11, offset: 1979},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 11, offset: 2017},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 68, col: 11, offset: 2043},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 69, col: 11, offset: 2075},
						name: "RawParagraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 71, col: 1, offset: 2091},
			expr: &labeledExpr{
				pos:   position{line: 71, col: 47, offset: 2137},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 71, col: 54, offset: 2144},
					expr: &ruleRefExpr{
						pos:  position{line: 71, col: 55, offset: 2145},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 73, col: 1, offset: 2184},
			expr: &actionExpr{
				pos: position{line: 73, col: 38, offset: 2221},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 73, col: 38, offset: 2221},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 73, col: 38, offset: 2221},
							expr: &ruleRefExpr{
								pos:  position{line: 73, col: 39, offset: 2222},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 74, col: 5, offset: 2232},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 75, col: 9, offset: 2249},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 75, col: 9, offset: 2249},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2271},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2297},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2349},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2374},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2403},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2428},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2455},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 11, offset: 2485},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 84, col: 11, offset: 2512},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 85, col: 11, offset: 2548},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 86, col: 11, offset: 2573},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 87, col: 11, offset: 2606},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 88, col: 11, offset: 2633},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 89, col: 11, offset: 2671},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 90, col: 11, offset: 2697},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 94, col: 1, offset: 2742},
			expr: &labeledExpr{
				pos:   position{line: 94, col: 23, offset: 2764},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 94, col: 30, offset: 2771},
					expr: &ruleRefExpr{
						pos:  position{line: 94, col: 31, offset: 2772},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 96, col: 1, offset: 2795},
			expr: &actionExpr{
				pos: position{line: 96, col: 22, offset: 2816},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 96, col: 22, offset: 2816},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 96, col: 22, offset: 2816},
							expr: &ruleRefExpr{
								pos:  position{line: 96, col: 23, offset: 2817},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 97, col: 5, offset: 2827},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 97, col: 12, offset: 2834},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 97, col: 12, offset: 2834},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 24, offset: 2846},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 104, col: 1, offset: 3002},
			expr: &ruleRefExpr{
				pos:  position{line: 104, col: 16, offset: 3017},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 106, col: 1, offset: 3037},
			expr: &actionExpr{
				pos: position{line: 106, col: 20, offset: 3056},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 106, col: 20, offset: 3056},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 106, col: 20, offset: 3056},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 106, col: 41, offset: 3077},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 106, col: 49, offset: 3085},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 50, offset: 3086},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 106, col: 75, offset: 3111},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 110, col: 1, offset: 3195},
			expr: &seqExpr{
				pos: position{line: 110, col: 26, offset: 3220},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 110, col: 26, offset: 3220},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 110, col: 32, offset: 3226},
						expr: &ruleRefExpr{
							pos:  position{line: 110, col: 32, offset: 3226},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 39, offset: 3233},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 112, col: 1, offset: 3240},
			expr: &actionExpr{
				pos: position{line: 112, col: 27, offset: 3266},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 112, col: 27, offset: 3266},
					expr: &oneOrMoreExpr{
						pos: position{line: 112, col: 28, offset: 3267},
						expr: &seqExpr{
							pos: position{line: 112, col: 29, offset: 3268},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 112, col: 29, offset: 3268},
									expr: &ruleRefExpr{
										pos:  position{line: 112, col: 30, offset: 3269},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 112, col: 51, offset: 3290,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 119, col: 1, offset: 3463},
			expr: &actionExpr{
				pos: position{line: 119, col: 19, offset: 3481},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 119, col: 19, offset: 3481},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 119, col: 19, offset: 3481},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 119, col: 23, offset: 3485},
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 23, offset: 3485},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 30, offset: 3492},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 37, offset: 3499},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 52, offset: 3514},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 119, col: 56, offset: 3518},
								expr: &ruleRefExpr{
									pos:  position{line: 119, col: 56, offset: 3518},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 119, col: 74, offset: 3536},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 9, offset: 3549},
							expr: &choiceExpr{
								pos: position{line: 120, col: 10, offset: 3550},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 120, col: 10, offset: 3550},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 120, col: 30, offset: 3570},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 121, col: 9, offset: 3594},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 121, col: 18, offset: 3603},
								expr: &ruleRefExpr{
									pos:  position{line: 121, col: 18, offset: 3603},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 9, offset: 3631},
							expr: &choiceExpr{
								pos: position{line: 122, col: 10, offset: 3632},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 122, col: 10, offset: 3632},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 122, col: 30, offset: 3652},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 123, col: 9, offset: 3676},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 123, col: 19, offset: 3686},
								expr: &ruleRefExpr{
									pos:  position{line: 123, col: 19, offset: 3686},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 127, col: 1, offset: 3791},
			expr: &choiceExpr{
				pos: position{line: 127, col: 20, offset: 3810},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 127, col: 20, offset: 3810},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 127, col: 48, offset: 3838},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 129, col: 1, offset: 3870},
			expr: &actionExpr{
				pos: position{line: 129, col: 30, offset: 3899},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 129, col: 30, offset: 3899},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 30, offset: 3899},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 30, offset: 3899},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 129, col: 37, offset: 3906},
							expr: &litMatcher{
								pos:        position{line: 129, col: 38, offset: 3907},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 42, offset: 3911},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 129, col: 51, offset: 3920},
								expr: &ruleRefExpr{
									pos:  position{line: 129, col: 51, offset: 3920},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 129, col: 68, offset: 3937},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 133, col: 1, offset: 4011},
			expr: &actionExpr{
				pos: position{line: 133, col: 33, offset: 4043},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 133, col: 33, offset: 4043},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 133, col: 33, offset: 4043},
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 33, offset: 4043},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 133, col: 40, offset: 4050},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 133, col: 51, offset: 4061},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 59, offset: 4069},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 133, col: 75, offset: 4085},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 137, col: 1, offset: 4168},
			expr: &actionExpr{
				pos: position{line: 137, col: 19, offset: 4186},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 137, col: 19, offset: 4186},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 19, offset: 4186},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 19, offset: 4186},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 26, offset: 4193},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 36, offset: 4203},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 56, offset: 4223},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 137, col: 62, offset: 4229},
								expr: &ruleRefExpr{
									pos:  position{line: 137, col: 63, offset: 4230},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 85, offset: 4252},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 85, offset: 4252},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 137, col: 92, offset: 4259},
							expr: &litMatcher{
								pos:        position{line: 137, col: 92, offset: 4259},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 97, offset: 4264},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 97, offset: 4264},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 142, col: 1, offset: 4414},
			expr: &actionExpr{
				pos: position{line: 142, col: 23, offset: 4436},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 142, col: 23, offset: 4436},
					expr: &charClassMatcher{
						pos:        position{line: 142, col: 23, offset: 4436},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 146, col: 1, offset: 4487},
			expr: &actionExpr{
				pos: position{line: 146, col: 24, offset: 4510},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 146, col: 24, offset: 4510},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 146, col: 24, offset: 4510},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 146, col: 28, offset: 4514},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 146, col: 35, offset: 4521},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 146, col: 36, offset: 4522},
									expr: &charClassMatcher{
										pos:        position{line: 146, col: 36, offset: 4522},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 148, col: 4, offset: 4571},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 154, col: 1, offset: 4738},
			expr: &actionExpr{
				pos: position{line: 154, col: 21, offset: 4758},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 154, col: 21, offset: 4758},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 154, col: 21, offset: 4758},
							expr: &ruleRefExpr{
								pos:  position{line: 154, col: 21, offset: 4758},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 154, col: 28, offset: 4765},
							expr: &litMatcher{
								pos:        position{line: 154, col: 29, offset: 4766},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 154, col: 33, offset: 4770},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 155, col: 9, offset: 4790},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 155, col: 10, offset: 4791},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 155, col: 10, offset: 4791},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 155, col: 10, offset: 4791},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 155, col: 21, offset: 4802},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 155, col: 45, offset: 4826},
													expr: &litMatcher{
														pos:        position{line: 155, col: 45, offset: 4826},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 155, col: 50, offset: 4831},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 155, col: 58, offset: 4839},
														expr: &ruleRefExpr{
															pos:  position{line: 155, col: 59, offset: 4840},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 155, col: 82, offset: 4863},
													expr: &litMatcher{
														pos:        position{line: 155, col: 82, offset: 4863},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 155, col: 87, offset: 4868},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 155, col: 97, offset: 4878},
														expr: &ruleRefExpr{
															pos:  position{line: 155, col: 98, offset: 4879},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 157, col: 15, offset: 4998},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 157, col: 15, offset: 4998},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 157, col: 15, offset: 4998},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 157, col: 24, offset: 5007},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 157, col: 46, offset: 5029},
													expr: &litMatcher{
														pos:        position{line: 157, col: 46, offset: 5029},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 157, col: 51, offset: 5034},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 157, col: 61, offset: 5044},
														expr: &ruleRefExpr{
															pos:  position{line: 157, col: 62, offset: 5045},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 159, col: 13, offset: 5156},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 164, col: 1, offset: 5291},
			expr: &choiceExpr{
				pos: position{line: 164, col: 27, offset: 5317},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 164, col: 27, offset: 5317},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 164, col: 27, offset: 5317},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 164, col: 27, offset: 5317},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 164, col: 32, offset: 5322},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 164, col: 39, offset: 5329},
									expr: &charClassMatcher{
										pos:        position{line: 164, col: 39, offset: 5329},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 166, col: 5, offset: 5379},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 166, col: 5, offset: 5379},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 166, col: 5, offset: 5379},
									expr: &litMatcher{
										pos:        position{line: 166, col: 5, offset: 5379},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 166, col: 11, offset: 5385},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 166, col: 18, offset: 5392},
									expr: &charClassMatcher{
										pos:        position{line: 166, col: 18, offset: 5392},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 166, col: 29, offset: 5403},
									expr: &ruleRefExpr{
										pos:  position{line: 166, col: 29, offset: 5403},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 166, col: 36, offset: 5410},
									expr: &litMatcher{
										pos:        position{line: 166, col: 37, offset: 5411},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 170, col: 1, offset: 5455},
			expr: &actionExpr{
				pos: position{line: 170, col: 25, offset: 5479},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 170, col: 25, offset: 5479},
					expr: &charClassMatcher{
						pos:        position{line: 170, col: 25, offset: 5479},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 174, col: 1, offset: 5529},
			expr: &actionExpr{
				pos: position{line: 174, col: 27, offset: 5555},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 174, col: 27, offset: 5555},
					expr: &charClassMatcher{
						pos:        position{line: 174, col: 27, offset: 5555},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 181, col: 1, offset: 5715},
			expr: &actionExpr{
				pos: position{line: 181, col: 25, offset: 5739},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 181, col: 25, offset: 5739},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 181, col: 25, offset: 5739},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 181, col: 29, offset: 5743},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 35, offset: 5749},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 181, col: 50, offset: 5764},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 182, col: 9, offset: 5778},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 182, col: 15, offset: 5784},
								expr: &actionExpr{
									pos: position{line: 182, col: 16, offset: 5785},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 182, col: 17, offset: 5786},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 182, col: 17, offset: 5786},
												expr: &ruleRefExpr{
													pos:  position{line: 182, col: 17, offset: 5786},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 182, col: 24, offset: 5793},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 182, col: 31, offset: 5800},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 184, col: 13, offset: 5876},
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 13, offset: 5876},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 184, col: 20, offset: 5883},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 191, col: 1, offset: 6130},
			expr: &actionExpr{
				pos: position{line: 191, col: 18, offset: 6147},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 191, col: 18, offset: 6147},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 191, col: 18, offset: 6147},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 191, col: 28, offset: 6157},
							expr: &charClassMatcher{
								pos:        position{line: 191, col: 29, offset: 6158},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 195, col: 1, offset: 6210},
			expr: &actionExpr{
				pos: position{line: 195, col: 30, offset: 6239},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 195, col: 30, offset: 6239},
					expr: &charClassMatcher{
						pos:        position{line: 195, col: 30, offset: 6239},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 199, col: 1, offset: 6288},
			expr: &choiceExpr{
				pos: position{line: 199, col: 19, offset: 6306},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 199, col: 19, offset: 6306},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 199, col: 19, offset: 6306},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 199, col: 19, offset: 6306},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 199, col: 24, offset: 6311},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 199, col: 30, offset: 6317},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 199, col: 45, offset: 6332},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 199, col: 49, offset: 6336},
									expr: &ruleRefExpr{
										pos:  position{line: 199, col: 49, offset: 6336},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 199, col: 56, offset: 6343},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 201, col: 5, offset: 6405},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 201, col: 5, offset: 6405},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 201, col: 5, offset: 6405},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 201, col: 9, offset: 6409},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 15, offset: 6415},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 201, col: 30, offset: 6430},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 201, col: 35, offset: 6435},
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 35, offset: 6435},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 201, col: 42, offset: 6442},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "xAttributeSubstitution",
			pos:  position{line: 205, col: 1, offset: 6505},
			expr: &actionExpr{
				pos: position{line: 205, col: 27, offset: 6531},
				run: (*parser).callonxAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 205, col: 27, offset: 6531},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 205, col: 27, offset: 6531},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 205, col: 31, offset: 6535},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 37, offset: 6541},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 205, col: 52, offset: 6556},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 209, col: 1, offset: 6626},
			expr: &choiceExpr{
				pos: position{line: 209, col: 26, offset: 6651},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 209, col: 26, offset: 6651},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 209, col: 39, offset: 6664},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 211, col: 1, offset: 6675},
			expr: &actionExpr{
				pos: position{line: 211, col: 12, offset: 6686},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 211, col: 12, offset: 6686},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 211, col: 12, offset: 6686},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 211, col: 16, offset: 6690},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 211, col: 21, offset: 6695},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 211, col: 35, offset: 6709},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 215, col: 1, offset: 6779},
			expr: &choiceExpr{
				pos: position{line: 215, col: 15, offset: 6793},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 215, col: 15, offset: 6793},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 29, offset: 6807},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 43, offset: 6821},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 61, offset: 6839},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 80, offset: 6858},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 98, offset: 6876},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 217, col: 1, offset: 6896},
			expr: &actionExpr{
				pos: position{line: 217, col: 16, offset: 6911},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 217, col: 16, offset: 6911},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 217, col: 16, offset: 6911},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 217, col: 28, offset: 6923},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 33, offset: 6928},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 217, col: 47, offset: 6942},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 221, col: 1, offset: 7022},
			expr: &actionExpr{
				pos: position{line: 221, col: 16, offset: 7037},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 221, col: 16, offset: 7037},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 221, col: 16, offset: 7037},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 29, offset: 7050},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 34, offset: 7055},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 221, col: 48, offset: 7069},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 225, col: 1, offset: 7148},
			expr: &actionExpr{
				pos: position{line: 225, col: 20, offset: 7167},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 225, col: 20, offset: 7167},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 225, col: 20, offset: 7167},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 225, col: 32, offset: 7179},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 225, col: 37, offset: 7184},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 225, col: 51, offset: 7198},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 225, col: 55, offset: 7202},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 225, col: 61, offset: 7208},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 225, col: 70, offset: 7217},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 229, col: 1, offset: 7299},
			expr: &actionExpr{
				pos: position{line: 229, col: 21, offset: 7319},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 229, col: 21, offset: 7319},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 229, col: 21, offset: 7319},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 229, col: 34, offset: 7332},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 39, offset: 7337},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 229, col: 53, offset: 7351},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 229, col: 57, offset: 7355},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 229, col: 63, offset: 7361},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 229, col: 72, offset: 7370},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 233, col: 1, offset: 7451},
			expr: &actionExpr{
				pos: position{line: 233, col: 20, offset: 7470},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 233, col: 20, offset: 7470},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 233, col: 20, offset: 7470},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 233, col: 32, offset: 7482},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 37, offset: 7487},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 51, offset: 7501},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 233, col: 55, offset: 7505},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 233, col: 60, offset: 7510},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 233, col: 60, offset: 7510},
									expr: &charClassMatcher{
										pos:        position{line: 233, col: 60, offset: 7510},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 108, offset: 7558},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 237, col: 1, offset: 7644},
			expr: &actionExpr{
				pos: position{line: 237, col: 21, offset: 7664},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 237, col: 21, offset: 7664},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 237, col: 21, offset: 7664},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 237, col: 34, offset: 7677},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 39, offset: 7682},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 237, col: 53, offset: 7696},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 237, col: 57, offset: 7700},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 237, col: 62, offset: 7705},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 237, col: 62, offset: 7705},
									expr: &charClassMatcher{
										pos:        position{line: 237, col: 62, offset: 7705},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 237, col: 110, offset: 7753},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 241, col: 1, offset: 7838},
			expr: &actionExpr{
				pos: position{line: 241, col: 15, offset: 7852},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 241, col: 15, offset: 7852},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 241, col: 15, offset: 7852},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 241, col: 21, offset: 7858},
								expr: &ruleRefExpr{
									pos:  position{line: 241, col: 22, offset: 7859},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 241, col: 41, offset: 7878},
							expr: &ruleRefExpr{
								pos:  position{line: 241, col: 41, offset: 7878},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 245, col: 1, offset: 7952},
			expr: &actionExpr{
				pos: position{line: 245, col: 21, offset: 7972},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 245, col: 21, offset: 7972},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 245, col: 21, offset: 7972},
							expr: &choiceExpr{
								pos: position{line: 245, col: 23, offset: 7974},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 245, col: 23, offset: 7974},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 245, col: 29, offset: 7980},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 246, col: 5, offset: 8058},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 246, col: 11, offset: 8064},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 246, col: 11, offset: 8064},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 247, col: 9, offset: 8086},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 248, col: 9, offset: 8111},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 249, col: 9, offset: 8149},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 250, col: 9, offset: 8178},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 251, col: 9, offset: 8207},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 252, col: 9, offset: 8235},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 253, col: 9, offset: 8263},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 254, col: 9, offset: 8301},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 255, col: 9, offset: 8338},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 259, col: 1, offset: 8445},
			expr: &actionExpr{
				pos: position{line: 259, col: 14, offset: 8458},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 259, col: 14, offset: 8458},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 259, col: 14, offset: 8458},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 259, col: 19, offset: 8463},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 259, col: 23, offset: 8467},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 259, col: 27, offset: 8471},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 259, col: 32, offset: 8476},
							expr: &ruleRefExpr{
								pos:  position{line: 259, col: 32, offset: 8476},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 259, col: 39, offset: 8483},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 263, col: 1, offset: 8539},
			expr: &actionExpr{
				pos: position{line: 263, col: 20, offset: 8558},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 263, col: 20, offset: 8558},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 263, col: 20, offset: 8558},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 263, col: 25, offset: 8563},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 263, col: 29, offset: 8567},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 263, col: 33, offset: 8571},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 263, col: 38, offset: 8576},
							expr: &ruleRefExpr{
								pos:  position{line: 263, col: 38, offset: 8576},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 269, col: 1, offset: 8859},
			expr: &actionExpr{
				pos: position{line: 269, col: 17, offset: 8875},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 269, col: 17, offset: 8875},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 269, col: 17, offset: 8875},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 269, col: 21, offset: 8879},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 269, col: 28, offset: 8886},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 269, col: 49, offset: 8907},
							expr: &ruleRefExpr{
								pos:  position{line: 269, col: 49, offset: 8907},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 269, col: 56, offset: 8914},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 273, col: 1, offset: 8976},
			expr: &actionExpr{
				pos: position{line: 273, col: 24, offset: 8999},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 273, col: 24, offset: 8999},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 273, col: 24, offset: 8999},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 273, col: 32, offset: 9007},
							expr: &charClassMatcher{
								pos:        position{line: 273, col: 32, offset: 9007},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 279, col: 1, offset: 9266},
			expr: &actionExpr{
				pos: position{line: 279, col: 31, offset: 9296},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 279, col: 31, offset: 9296},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 279, col: 31, offset: 9296},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 279, col: 35, offset: 9300},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 279, col: 42, offset: 9307},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 279, col: 42, offset: 9307},
										expr: &ruleRefExpr{
											pos:  position{line: 279, col: 42, offset: 9307},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 279, col: 57, offset: 9322},
										expr: &ruleRefExpr{
											pos:  position{line: 279, col: 57, offset: 9322},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 279, col: 69, offset: 9334},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 279, col: 73, offset: 9338},
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 73, offset: 9338},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 279, col: 80, offset: 9345},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 283, col: 1, offset: 9403},
			expr: &choiceExpr{
				pos: position{line: 283, col: 15, offset: 9417},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 283, col: 15, offset: 9417},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 283, col: 31, offset: 9433},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 283, col: 46, offset: 9448},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 287, col: 1, offset: 9680},
			expr: &actionExpr{
				pos: position{line: 287, col: 18, offset: 9697},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 287, col: 18, offset: 9697},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 287, col: 18, offset: 9697},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 287, col: 22, offset: 9701},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 287, col: 29, offset: 9708},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 287, col: 29, offset: 9708},
										expr: &ruleRefExpr{
											pos:  position{line: 287, col: 29, offset: 9708},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 287, col: 45, offset: 9724},
										expr: &ruleRefExpr{
											pos:  position{line: 287, col: 45, offset: 9724},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 287, col: 60, offset: 9739},
										expr: &ruleRefExpr{
											pos:  position{line: 287, col: 60, offset: 9739},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 287, col: 82, offset: 9761},
										expr: &ruleRefExpr{
											pos:  position{line: 287, col: 82, offset: 9761},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 287, col: 104, offset: 9783},
										expr: &ruleRefExpr{
											pos:  position{line: 287, col: 104, offset: 9783},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 287, col: 116, offset: 9795},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 287, col: 120, offset: 9799},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 291, col: 1, offset: 9857},
			expr: &actionExpr{
				pos: position{line: 291, col: 19, offset: 9875},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 291, col: 19, offset: 9875},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 291, col: 25, offset: 9881},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 295, col: 1, offset: 9955},
			expr: &actionExpr{
				pos: position{line: 295, col: 25, offset: 9979},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 295, col: 25, offset: 9979},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 295, col: 25, offset: 9979},
							expr: &ruleRefExpr{
								pos:  position{line: 295, col: 25, offset: 9979},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 295, col: 32, offset: 9986},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 295, col: 36, offset: 9990},
							expr: &ruleRefExpr{
								pos:  position{line: 295, col: 36, offset: 9990},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 295, col: 43, offset: 9997},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 295, col: 49, offset: 10003},
								expr: &ruleRefExpr{
									pos:  position{line: 295, col: 49, offset: 10003},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 302, col: 1, offset: 10160},
			expr: &actionExpr{
				pos: position{line: 302, col: 25, offset: 10184},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 302, col: 25, offset: 10184},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 302, col: 25, offset: 10184},
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 25, offset: 10184},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 302, col: 32, offset: 10191},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 302, col: 36, offset: 10195},
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 36, offset: 10195},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 302, col: 43, offset: 10202},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 302, col: 49, offset: 10208},
								expr: &ruleRefExpr{
									pos:  position{line: 302, col: 49, offset: 10208},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 309, col: 1, offset: 10365},
			expr: &actionExpr{
				pos: position{line: 309, col: 21, offset: 10385},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 309, col: 21, offset: 10385},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 309, col: 21, offset: 10385},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 309, col: 33, offset: 10397},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 33, offset: 10397},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 40, offset: 10404},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 313, col: 1, offset: 10460},
			expr: &actionExpr{
				pos: position{line: 313, col: 30, offset: 10489},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 313, col: 30, offset: 10489},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 313, col: 30, offset: 10489},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 313, col: 39, offset: 10498},
							expr: &ruleRefExpr{
								pos:  position{line: 313, col: 39, offset: 10498},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 313, col: 46, offset: 10505},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 318, col: 1, offset: 10651},
			expr: &actionExpr{
				pos: position{line: 318, col: 30, offset: 10680},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 318, col: 30, offset: 10680},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 318, col: 30, offset: 10680},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 318, col: 34, offset: 10684},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 37, offset: 10687},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 318, col: 53, offset: 10703},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 318, col: 57, offset: 10707},
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 57, offset: 10707},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 318, col: 64, offset: 10714},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 323, col: 1, offset: 10874},
			expr: &actionExpr{
				pos: position{line: 323, col: 21, offset: 10894},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 323, col: 21, offset: 10894},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 323, col: 21, offset: 10894},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 324, col: 5, offset: 10910},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 324, col: 14, offset: 10919},
								expr: &actionExpr{
									pos: position{line: 324, col: 15, offset: 10920},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 324, col: 15, offset: 10920},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 324, col: 15, offset: 10920},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 324, col: 19, offset: 10924},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 324, col: 24, offset: 10929},
													expr: &ruleRefExpr{
														pos:  position{line: 324, col: 25, offset: 10930},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 5, offset: 10986},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 325, col: 12, offset: 10993},
								expr: &actionExpr{
									pos: position{line: 325, col: 13, offset: 10994},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 325, col: 13, offset: 10994},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 325, col: 13, offset: 10994},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 325, col: 17, offset: 10998},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 325, col: 22, offset: 11003},
													expr: &ruleRefExpr{
														pos:  position{line: 325, col: 23, offset: 11004},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 326, col: 5, offset: 11052},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 326, col: 9, offset: 11056},
							expr: &ruleRefExpr{
								pos:  position{line: 326, col: 9, offset: 11056},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 326, col: 16, offset: 11063},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 331, col: 1, offset: 11219},
			expr: &actionExpr{
				pos: position{line: 331, col: 19, offset: 11237},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 331, col: 19, offset: 11237},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 331, col: 19, offset: 11237},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 331, col: 23, offset: 11241},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 331, col: 34, offset: 11252},
								expr: &ruleRefExpr{
									pos:  position{line: 331, col: 35, offset: 11253},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 331, col: 54, offset: 11272},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 331, col: 58, offset: 11276},
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 58, offset: 11276},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 331, col: 65, offset: 11283},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 335, col: 1, offset: 11359},
			expr: &choiceExpr{
				pos: position{line: 335, col: 21, offset: 11379},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 335, col: 21, offset: 11379},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 335, col: 49, offset: 11407},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 337, col: 1, offset: 11439},
			expr: &actionExpr{
				pos: position{line: 337, col: 30, offset: 11468},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 337, col: 30, offset: 11468},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 337, col: 30, offset: 11468},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 337, col: 35, offset: 11473},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 337, col: 49, offset: 11487},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 337, col: 53, offset: 11491},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 337, col: 59, offset: 11497},
								expr: &ruleRefExpr{
									pos:  position{line: 337, col: 60, offset: 11498},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 337, col: 77, offset: 11515},
							expr: &litMatcher{
								pos:        position{line: 337, col: 77, offset: 11515},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 337, col: 82, offset: 11520},
							expr: &ruleRefExpr{
								pos:  position{line: 337, col: 82, offset: 11520},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 341, col: 1, offset: 11623},
			expr: &actionExpr{
				pos: position{line: 341, col: 33, offset: 11655},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 341, col: 33, offset: 11655},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 341, col: 33, offset: 11655},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 341, col: 38, offset: 11660},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 341, col: 52, offset: 11674},
							expr: &litMatcher{
								pos:        position{line: 341, col: 52, offset: 11674},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 341, col: 57, offset: 11679},
							expr: &ruleRefExpr{
								pos:  position{line: 341, col: 57, offset: 11679},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 345, col: 1, offset: 11771},
			expr: &actionExpr{
				pos: position{line: 345, col: 17, offset: 11787},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 345, col: 17, offset: 11787},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 345, col: 17, offset: 11787},
							expr: &litMatcher{
								pos:        position{line: 345, col: 18, offset: 11788},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 345, col: 26, offset: 11796},
							expr: &litMatcher{
								pos:        position{line: 345, col: 27, offset: 11797},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 345, col: 35, offset: 11805},
							expr: &litMatcher{
								pos:        position{line: 345, col: 36, offset: 11806},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 345, col: 46, offset: 11816},
							expr: &oneOrMoreExpr{
								pos: position{line: 345, col: 48, offset: 11818},
								expr: &ruleRefExpr{
									pos:  position{line: 345, col: 48, offset: 11818},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 56, offset: 11826},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 345, col: 61, offset: 11831},
								expr: &charClassMatcher{
									pos:        position{line: 345, col: 61, offset: 11831},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 345, col: 75, offset: 11845},
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 75, offset: 11845},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 349, col: 1, offset: 11892},
			expr: &actionExpr{
				pos: position{line: 349, col: 19, offset: 11910},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 349, col: 19, offset: 11910},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 349, col: 26, offset: 11917},
						expr: &charClassMatcher{
							pos:        position{line: 349, col: 26, offset: 11917},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 353, col: 1, offset: 11972},
			expr: &actionExpr{
				pos: position{line: 353, col: 29, offset: 12000},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 353, col: 29, offset: 12000},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 353, col: 29, offset: 12000},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 353, col: 36, offset: 12007},
								expr: &charClassMatcher{
									pos:        position{line: 353, col: 36, offset: 12007},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 353, col: 50, offset: 12021},
							expr: &litMatcher{
								pos:        position{line: 353, col: 51, offset: 12022},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 357, col: 1, offset: 12192},
			expr: &actionExpr{
				pos: position{line: 357, col: 20, offset: 12211},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 357, col: 20, offset: 12211},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 20, offset: 12211},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 357, col: 29, offset: 12220},
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 29, offset: 12220},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 357, col: 36, offset: 12227},
							expr: &litMatcher{
								pos:        position{line: 357, col: 36, offset: 12227},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 357, col: 41, offset: 12232},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 357, col: 48, offset: 12239},
								expr: &ruleRefExpr{
									pos:  position{line: 357, col: 49, offset: 12240},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 357, col: 66, offset: 12257},
							expr: &litMatcher{
								pos:        position{line: 357, col: 66, offset: 12257},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 357, col: 71, offset: 12262},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 357, col: 77, offset: 12268},
								expr: &ruleRefExpr{
									pos:  position{line: 357, col: 78, offset: 12269},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 357, col: 95, offset: 12286},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 357, col: 99, offset: 12290},
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 99, offset: 12290},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 357, col: 106, offset: 12297},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 361, col: 1, offset: 12370},
			expr: &actionExpr{
				pos: position{line: 361, col: 20, offset: 12389},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 361, col: 20, offset: 12389},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 361, col: 20, offset: 12389},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 361, col: 29, offset: 12398},
							expr: &ruleRefExpr{
								pos:  position{line: 361, col: 29, offset: 12398},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 361, col: 36, offset: 12405},
							expr: &litMatcher{
								pos:        position{line: 361, col: 36, offset: 12405},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 361, col: 41, offset: 12410},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 361, col: 48, offset: 12417},
								expr: &ruleRefExpr{
									pos:  position{line: 361, col: 49, offset: 12418},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 361, col: 66, offset: 12435},
							expr: &litMatcher{
								pos:        position{line: 361, col: 66, offset: 12435},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 361, col: 71, offset: 12440},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 361, col: 77, offset: 12446},
								expr: &ruleRefExpr{
									pos:  position{line: 361, col: 78, offset: 12447},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 361, col: 95, offset: 12464},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 361, col: 99, offset: 12468},
							expr: &ruleRefExpr{
								pos:  position{line: 361, col: 99, offset: 12468},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 361, col: 106, offset: 12475},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 365, col: 1, offset: 12566},
			expr: &actionExpr{
				pos: position{line: 365, col: 19, offset: 12584},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 365, col: 20, offset: 12585},
					expr: &charClassMatcher{
						pos:        position{line: 365, col: 20, offset: 12585},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 369, col: 1, offset: 12638},
			expr: &actionExpr{
				pos: position{line: 369, col: 20, offset: 12657},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 369, col: 20, offset: 12657},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 369, col: 20, offset: 12657},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 369, col: 24, offset: 12661},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 369, col: 31, offset: 12668},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 369, col: 31, offset: 12668},
										expr: &ruleRefExpr{
											pos:  position{line: 369, col: 31, offset: 12668},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 369, col: 51, offset: 12688},
										expr: &ruleRefExpr{
											pos:  position{line: 369, col: 51, offset: 12688},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 369, col: 66, offset: 12703},
										expr: &ruleRefExpr{
											pos:  position{line: 369, col: 66, offset: 12703},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 369, col: 78, offset: 12715},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 373, col: 1, offset: 12773},
			expr: &actionExpr{
				pos: position{line: 373, col: 23, offset: 12795},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 373, col: 23, offset: 12795},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 373, col: 28, offset: 12800},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 377, col: 1, offset: 12872},
			expr: &actionExpr{
				pos: position{line: 377, col: 25, offset: 12896},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 377, col: 25, offset: 12896},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 377, col: 25, offset: 12896},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 377, col: 36, offset: 12907},
								expr: &ruleRefExpr{
									pos:  position{line: 377, col: 37, offset: 12908},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 377, col: 56, offset: 12927},
							expr: &ruleRefExpr{
								pos:  position{line: 377, col: 56, offset: 12927},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 377, col: 67, offset: 12938},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 381, col: 1, offset: 13050},
			expr: &choiceExpr{
				pos: position{line: 381, col: 18, offset: 13067},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 381, col: 18, offset: 13067},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 381, col: 36, offset: 13085},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 381, col: 58, offset: 13107},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 383, col: 1, offset: 13128},
			expr: &actionExpr{
				pos: position{line: 383, col: 24, offset: 13151},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 383, col: 24, offset: 13151},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 383, col: 24, offset: 13151},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 383, col: 28, offset: 13155},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 35, offset: 13162},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 383, col: 50, offset: 13177},
							expr: &charClassMatcher{
								pos:        position{line: 383, col: 51, offset: 13178},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 387, col: 1, offset: 13251},
			expr: &actionExpr{
				pos: position{line: 387, col: 20, offset: 13270},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 387, col: 20, offset: 13270},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 387, col: 20, offset: 13270},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 387, col: 24, offset: 13274},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 27, offset: 13277},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 387, col: 42, offset: 13292},
							expr: &charClassMatcher{
								pos:        position{line: 387, col: 43, offset: 13293},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 391, col: 1, offset: 13358},
			expr: &actionExpr{
				pos: position{line: 391, col: 22, offset: 13379},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 391, col: 22, offset: 13379},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 391, col: 22, offset: 13379},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 391, col: 26, offset: 13383},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 31, offset: 13388},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 391, col: 46, offset: 13403},
							expr: &charClassMatcher{
								pos:        position{line: 391, col: 47, offset: 13404},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 396, col: 1, offset: 13518},
			expr: &actionExpr{
				pos: position{line: 396, col: 20, offset: 13537},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 396, col: 20, offset: 13537},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 396, col: 20, offset: 13537},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 26, offset: 13543},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 396, col: 41, offset: 13558},
							expr: &charClassMatcher{
								pos:        position{line: 396, col: 42, offset: 13559},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineVal",
			pos:  position{line: 400, col: 1, offset: 13608},
			expr: &choiceExpr{
				pos: position{line: 400, col: 14, offset: 13621},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 400, col: 14, offset: 13621},
						name: "AttrEmpty",
					},
					&ruleRefExpr{
						pos:  position{line: 400, col: 26, offset: 13633},
						name: "AttrValSQ",
					},
					&ruleRefExpr{
						pos:  position{line: 400, col: 38, offset: 13645},
						name: "AttrValDQ",
					},
					&ruleRefExpr{
						pos:  position{line: 400, col: 50, offset: 13657},
						name: "AttrValPosFB",
					},
				},
			},
		},
		{
			name: "NamedAttrs",
			pos:  position{line: 402, col: 1, offset: 13673},
			expr: &actionExpr{
				pos: position{line: 402, col: 15, offset: 13687},
				run: (*parser).callonNamedAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 402, col: 15, offset: 13687},
					label: "attrs",
					expr: &zeroOrMoreExpr{
						pos: position{line: 402, col: 21, offset: 13693},
						expr: &ruleRefExpr{
							pos:  position{line: 402, col: 21, offset: 13693},
							name: "NamedAttrPair",
						},
					},
				},
			},
		},
		{
			name: "NamedAttrPair",
			pos:  position{line: 406, col: 1, offset: 13762},
			expr: &actionExpr{
				pos: position{line: 406, col: 18, offset: 13779},
				run: (*parser).callonNamedAttrPair1,
				expr: &seqExpr{
					pos: position{line: 406, col: 18, offset: 13779},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 406, col: 18, offset: 13779},
							expr: &litMatcher{
								pos:        position{line: 406, col: 18, offset: 13779},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 406, col: 23, offset: 13784},
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 23, offset: 13784},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 406, col: 30, offset: 13791},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 32, offset: 13793},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 406, col: 45, offset: 13806},
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 45, offset: 13806},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 406, col: 52, offset: 13813},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 406, col: 56, offset: 13817},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 406, col: 59, offset: 13820},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 406, col: 59, offset: 13820},
										name: "AttrValDQ",
									},
									&ruleRefExpr{
										pos:  position{line: 406, col: 71, offset: 13832},
										name: "AttrValSQ",
									},
									&ruleRefExpr{
										pos:  position{line: 406, col: 83, offset: 13844},
										name: "AttrValNamedFB",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrEmpty",
			pos:  position{line: 411, col: 1, offset: 14038},
			expr: &actionExpr{
				pos: position{line: 411, col: 14, offset: 14051},
				run: (*parser).callonAttrEmpty1,
				expr: &seqExpr{
					pos: position{line: 411, col: 14, offset: 14051},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 411, col: 14, offset: 14051},
							expr: &charClassMatcher{
								pos:        position{line: 411, col: 14, offset: 14051},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 411, col: 21, offset: 14058},
							expr: &charClassMatcher{
								pos:        position{line: 411, col: 22, offset: 14059},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQ",
			pos:  position{line: 417, col: 1, offset: 14201},
			expr: &actionExpr{
				pos: position{line: 417, col: 14, offset: 14214},
				run: (*parser).callonAttrValSQ1,
				expr: &seqExpr{
					pos: position{line: 417, col: 14, offset: 14214},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 417, col: 14, offset: 14214},
							expr: &ruleRefExpr{
								pos:  position{line: 417, col: 14, offset: 14214},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 417, col: 21, offset: 14221},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 417, col: 25, offset: 14225},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 417, col: 29, offset: 14229},
								name: "AttrValSQin",
							},
						},
						&litMatcher{
							pos:        position{line: 417, col: 41, offset: 14241},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 417, col: 45, offset: 14245},
							expr: &ruleRefExpr{
								pos:  position{line: 417, col: 45, offset: 14245},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 417, col: 52, offset: 14252},
							expr: &charClassMatcher{
								pos:        position{line: 417, col: 53, offset: 14253},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQin",
			pos:  position{line: 419, col: 1, offset: 14282},
			expr: &actionExpr{
				pos: position{line: 419, col: 16, offset: 14297},
				run: (*parser).callonAttrValSQin1,
				expr: &labeledExpr{
					pos:   position{line: 419, col: 16, offset: 14297},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 419, col: 20, offset: 14301},
						expr: &choiceExpr{
							pos: position{line: 419, col: 22, offset: 14303},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 419, col: 22, offset: 14303},
									name: "AttrValSQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 419, col: 37, offset: 14318},
									expr: &charClassMatcher{
										pos:        position{line: 419, col: 37, offset: 14318},
										val:        "[^\\r\\n'\\\\]",
										chars:      []rune{'\r', '\n', '\'', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 419, col: 51, offset: 14332},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQEsc",
			pos:  position{line: 421, col: 1, offset: 14374},
			expr: &actionExpr{
				pos: position{line: 421, col: 17, offset: 14390},
				run: (*parser).callonAttrValSQEsc1,
				expr: &litMatcher{
					pos:        position{line: 421, col: 17, offset: 14390},
					val:        "\\'",
					ignoreCase: false,
					want:       "\"\\\\'\"",
				},
			},
		},
		{
			name: "AttrValDQ",
			pos:  position{line: 424, col: 1, offset: 14453},
			expr: &actionExpr{
				pos: position{line: 424, col: 14, offset: 14466},
				run: (*parser).callonAttrValDQ1,
				expr: &seqExpr{
					pos: position{line: 424, col: 14, offset: 14466},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 424, col: 14, offset: 14466},
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 14, offset: 14466},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 424, col: 21, offset: 14473},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 424, col: 25, offset: 14477},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 29, offset: 14481},
								name: "AttrValDQin",
							},
						},
						&litMatcher{
							pos:        position{line: 424, col: 41, offset: 14493},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 424, col: 45, offset: 14497},
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 45, offset: 14497},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQin",
			pos:  position{line: 426, col: 1, offset: 14527},
			expr: &actionExpr{
				pos: position{line: 426, col: 16, offset: 14542},
				run: (*parser).callonAttrValDQin1,
				expr: &labeledExpr{
					pos:   position{line: 426, col: 16, offset: 14542},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 426, col: 20, offset: 14546},
						expr: &choiceExpr{
							pos: position{line: 426, col: 22, offset: 14548},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 426, col: 22, offset: 14548},
									name: "AttrValDQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 426, col: 37, offset: 14563},
									expr: &charClassMatcher{
										pos:        position{line: 426, col: 37, offset: 14563},
										val:        "[^\\r\\n\"\\\\]",
										chars:      []rune{'\r', '\n', '"', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 426, col: 51, offset: 14577},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQEsc",
			pos:  position{line: 428, col: 1, offset: 14619},
			expr: &actionExpr{
				pos: position{line: 428, col: 17, offset: 14635},
				run: (*parser).callonAttrValDQEsc1,
				expr: &litMatcher{
					pos:        position{line: 428, col: 17, offset: 14635},
					val:        "\\\"",
					ignoreCase: false,
					want:       "\"\\\\\\\"\"",
				},
			},
		},
		{
			name: "AttrValPosFB",
			pos:  position{line: 431, col: 1, offset: 14729},
			expr: &actionExpr{
				pos: position{line: 431, col: 17, offset: 14745},
				run: (*parser).callonAttrValPosFB1,
				expr: &seqExpr{
					pos: position{line: 431, col: 17, offset: 14745},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 431, col: 17, offset: 14745},
							expr: &charClassMatcher{
								pos:        position{line: 431, col: 17, offset: 14745},
								val:        "[^,=\\r\\n\\]]",
								chars:      []rune{',', '=', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 431, col: 30, offset: 14758},
							expr: &charClassMatcher{
								pos:        position{line: 431, col: 31, offset: 14759},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValNamedFB",
			pos:  position{line: 434, col: 1, offset: 14873},
			expr: &actionExpr{
				pos: position{line: 434, col: 19, offset: 14891},
				run: (*parser).callonAttrValNamedFB1,
				expr: &seqExpr{
					pos: position{line: 434, col: 19, offset: 14891},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 434, col: 19, offset: 14891},
							expr: &charClassMatcher{
								pos:        position{line: 434, col: 19, offset: 14891},
								val:        "[^,\\r\\n\\]]",
								chars:      []rune{',', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 434, col: 31, offset: 14903},
							expr: &charClassMatcher{
								pos:        position{line: 434, col: 32, offset: 14904},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 436, col: 1, offset: 14963},
			expr: &choiceExpr{
				pos: position{line: 436, col: 19, offset: 14981},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 436, col: 19, offset: 14981},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 436, col: 41, offset: 15003},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 436, col: 65, offset: 15027},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 440, col: 1, offset: 15229},
			expr: &actionExpr{
				pos: position{line: 440, col: 24, offset: 15252},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 440, col: 24, offset: 15252},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 440, col: 24, offset: 15252},
							val:        "[^,\\r\\n\"' \\t.#%=\\]]",
							chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
							ignoreCase: false,
							inverted:   true,
						},
						&zeroOrMoreExpr{
							pos: position{line: 440, col: 45, offset: 15273},
							expr: &choiceExpr{
								pos: position{line: 440, col: 46, offset: 15274},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 440, col: 46, offset: 15274},
										val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
										chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
										ignoreCase: false,
										inverted:   true,
									},
									&seqExpr{
										pos: position{line: 440, col: 68, offset: 15296},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 440, col: 68, offset: 15296},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 440, col: 73, offset: 15301},
												val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
												chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 444, col: 1, offset: 15363},
			expr: &actionExpr{
				pos: position{line: 444, col: 13, offset: 15375},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 444, col: 13, offset: 15375},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 444, col: 13, offset: 15375},
							expr: &seqExpr{
								pos: position{line: 444, col: 15, offset: 15377},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 444, col: 15, offset: 15377},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 444, col: 19, offset: 15381},
										expr: &ruleRefExpr{
											pos:  position{line: 444, col: 19, offset: 15381},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 444, col: 29, offset: 15391},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 444, col: 33, offset: 15395},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 444, col: 46, offset: 15408},
							expr: &ruleRefExpr{
								pos:  position{line: 444, col: 46, offset: 15408},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 444, col: 53, offset: 15415},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 444, col: 57, offset: 15419},
							expr: &ruleRefExpr{
								pos:  position{line: 444, col: 57, offset: 15419},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 444, col: 64, offset: 15426},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 444, col: 70, offset: 15432},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 444, col: 85, offset: 15447},
							expr: &ruleRefExpr{
								pos:  position{line: 444, col: 85, offset: 15447},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 449, col: 1, offset: 15642},
			expr: &actionExpr{
				pos: position{line: 449, col: 17, offset: 15658},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 449, col: 17, offset: 15658},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 449, col: 17, offset: 15658},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 449, col: 26, offset: 15667},
							expr: &charClassMatcher{
								pos:        position{line: 449, col: 26, offset: 15667},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 453, col: 1, offset: 15719},
			expr: &choiceExpr{
				pos: position{line: 453, col: 19, offset: 15737},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 453, col: 19, offset: 15737},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 453, col: 35, offset: 15753},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 453, col: 59, offset: 15777},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 453, col: 83, offset: 15801},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 455, col: 1, offset: 15819},
			expr: &actionExpr{
				pos: position{line: 455, col: 19, offset: 15837},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 455, col: 19, offset: 15837},
					expr: &charClassMatcher{
						pos:        position{line: 455, col: 19, offset: 15837},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 459, col: 1, offset: 15894},
			expr: &actionExpr{
				pos: position{line: 459, col: 26, offset: 15919},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 459, col: 26, offset: 15919},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 459, col: 26, offset: 15919},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 459, col: 30, offset: 15923},
							expr: &charClassMatcher{
								pos:        position{line: 459, col: 30, offset: 15923},
								val:        "[^'\\r\\n]",
								chars:      []rune{'\'', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 459, col: 40, offset: 15933},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 463, col: 1, offset: 15994},
			expr: &actionExpr{
				pos: position{line: 463, col: 26, offset: 16019},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 463, col: 26, offset: 16019},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 463, col: 26, offset: 16019},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 463, col: 31, offset: 16024},
							expr: &charClassMatcher{
								pos:        position{line: 463, col: 31, offset: 16024},
								val:        "[^\"\\r\\n]",
								chars:      []rune{'"', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 463, col: 41, offset: 16034},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 469, col: 1, offset: 16295},
			expr: &actionExpr{
				pos: position{line: 469, col: 18, offset: 16312},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 469, col: 18, offset: 16312},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 477, col: 1, offset: 16502},
			expr: &choiceExpr{
				pos: position{line: 477, col: 17, offset: 16518},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 477, col: 17, offset: 16518},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 477, col: 38, offset: 16539},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 479, col: 1, offset: 16561},
			expr: &actionExpr{
				pos: position{line: 479, col: 23, offset: 16583},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 479, col: 23, offset: 16583},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 479, col: 23, offset: 16583},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 479, col: 46, offset: 16606},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 55, offset: 16615},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 479, col: 82, offset: 16642},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 483, col: 1, offset: 16750},
			expr: &actionExpr{
				pos: position{line: 483, col: 31, offset: 16780},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 483, col: 31, offset: 16780},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 483, col: 41, offset: 16790},
						expr: &ruleRefExpr{
							pos:  position{line: 483, col: 41, offset: 16790},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 487, col: 1, offset: 16872},
			expr: &seqExpr{
				pos: position{line: 487, col: 27, offset: 16898},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 487, col: 27, offset: 16898},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 487, col: 32, offset: 16903},
						expr: &charClassMatcher{
							pos:        position{line: 487, col: 33, offset: 16904},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 489, col: 1, offset: 16917},
			expr: &litMatcher{
				pos:        position{line: 489, col: 25, offset: 16941},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 492, col: 1, offset: 17032},
			expr: &actionExpr{
				pos: position{line: 492, col: 30, offset: 17061},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 492, col: 30, offset: 17061},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 493, col: 9, offset: 17080},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 493, col: 9, offset: 17080},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 493, col: 9, offset: 17080},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 493, col: 19, offset: 17090},
										expr: &ruleRefExpr{
											pos:  position{line: 493, col: 20, offset: 17091},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 494, col: 11, offset: 17148},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 494, col: 11, offset: 17148},
										expr: &ruleRefExpr{
											pos:  position{line: 494, col: 11, offset: 17148},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 494, col: 18, offset: 17155},
										expr: &ruleRefExpr{
											pos:  position{line: 494, col: 19, offset: 17156},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 495, col: 11, offset: 17188},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 495, col: 11, offset: 17188},
										expr: &litMatcher{
											pos:        position{line: 495, col: 12, offset: 17189},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 495, col: 16, offset: 17193},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 496, col: 11, offset: 17242},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 497, col: 11, offset: 17264},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 11, offset: 17287},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 499, col: 11, offset: 17313},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 500, col: 11, offset: 17342},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 501, col: 11, offset: 17358},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 502, col: 11, offset: 17391},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 503, col: 11, offset: 17411},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 504, col: 11, offset: 17433},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 505, col: 11, offset: 17455},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 506, col: 11, offset: 17480},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 507, col: 11, offset: 17507},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 507, col: 11, offset: 17507},
										expr: &litMatcher{
											pos:        position{line: 507, col: 12, offset: 17508},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 507, col: 17, offset: 17513},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 508, col: 11, offset: 17538},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 509, col: 11, offset: 17568},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 510, col: 11, offset: 17597},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 514, col: 1, offset: 17667},
			expr: &choiceExpr{
				pos: position{line: 514, col: 41, offset: 17707},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 514, col: 41, offset: 17707},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 514, col: 55, offset: 17721},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 514, col: 55, offset: 17721},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 514, col: 55, offset: 17721},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 514, col: 59, offset: 17725},
									expr: &litMatcher{
										pos:        position{line: 514, col: 60, offset: 17726},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 518, col: 1, offset: 17789},
			expr: &actionExpr{
				pos: position{line: 518, col: 23, offset: 17811},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 518, col: 23, offset: 17811},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 518, col: 23, offset: 17811},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 518, col: 46, offset: 17834},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 518, col: 55, offset: 17843},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 518, col: 82, offset: 17870},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 522, col: 1, offset: 17978},
			expr: &actionExpr{
				pos: position{line: 522, col: 31, offset: 18008},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 522, col: 31, offset: 18008},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 522, col: 41, offset: 18018},
						expr: &ruleRefExpr{
							pos:  position{line: 522, col: 41, offset: 18018},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 527, col: 1, offset: 18183},
			expr: &actionExpr{
				pos: position{line: 527, col: 30, offset: 18212},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 527, col: 30, offset: 18212},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 528, col: 9, offset: 18231},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 528, col: 9, offset: 18231},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 528, col: 9, offset: 18231},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 528, col: 19, offset: 18241},
										expr: &ruleRefExpr{
											pos:  position{line: 528, col: 20, offset: 18242},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 529, col: 11, offset: 18299},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 529, col: 11, offset: 18299},
										expr: &ruleRefExpr{
											pos:  position{line: 529, col: 11, offset: 18299},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 529, col: 18, offset: 18306},
										expr: &ruleRefExpr{
											pos:  position{line: 529, col: 19, offset: 18307},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 530, col: 11, offset: 18339},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 531, col: 11, offset: 18357},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 532, col: 11, offset: 18379},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 533, col: 11, offset: 18402},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 534, col: 11, offset: 18428},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 535, col: 11, offset: 18457},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 11, offset: 18473},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 537, col: 11, offset: 18506},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 538, col: 11, offset: 18526},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 539, col: 11, offset: 18548},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 540, col: 11, offset: 18570},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 541, col: 11, offset: 18595},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 542, col: 11, offset: 18622},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 542, col: 11, offset: 18622},
										expr: &litMatcher{
											pos:        position{line: 542, col: 12, offset: 18623},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 542, col: 18, offset: 18629},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 543, col: 11, offset: 18654},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 544, col: 11, offset: 18684},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 545, col: 11, offset: 18713},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 549, col: 1, offset: 18791},
			expr: &seqExpr{
				pos: position{line: 549, col: 27, offset: 18817},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 549, col: 27, offset: 18817},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 549, col: 33, offset: 18823},
						expr: &charClassMatcher{
							pos:        position{line: 549, col: 34, offset: 18824},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 551, col: 1, offset: 18837},
			expr: &litMatcher{
				pos:        position{line: 551, col: 25, offset: 18861},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 553, col: 1, offset: 18870},
			expr: &actionExpr{
				pos: position{line: 553, col: 41, offset: 18910},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 553, col: 42, offset: 18911},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 553, col: 42, offset: 18911},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 553, col: 56, offset: 18925},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 553, col: 56, offset: 18925},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 553, col: 60, offset: 18929},
									expr: &litMatcher{
										pos:        position{line: 553, col: 61, offset: 18930},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 560, col: 1, offset: 19102},
			expr: &actionExpr{
				pos: position{line: 560, col: 12, offset: 19113},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 560, col: 12, offset: 19113},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 560, col: 12, offset: 19113},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 560, col: 23, offset: 19124},
								expr: &ruleRefExpr{
									pos:  position{line: 560, col: 24, offset: 19125},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 561, col: 5, offset: 19143},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 561, col: 12, offset: 19150},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 561, col: 12, offset: 19150},
									expr: &litMatcher{
										pos:        position{line: 561, col: 13, offset: 19151},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 565, col: 5, offset: 19246},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 569, col: 5, offset: 19402},
							expr: &ruleRefExpr{
								pos:  position{line: 569, col: 5, offset: 19402},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 569, col: 12, offset: 19409},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 569, col: 19, offset: 19416},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 569, col: 34, offset: 19431},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 569, col: 38, offset: 19435},
								expr: &ruleRefExpr{
									pos:  position{line: 569, col: 38, offset: 19435},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 569, col: 56, offset: 19453},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 573, col: 1, offset: 19563},
			expr: &actionExpr{
				pos: position{line: 573, col: 18, offset: 19580},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 573, col: 18, offset: 19580},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 573, col: 27, offset: 19589},
						expr: &seqExpr{
							pos: position{line: 573, col: 28, offset: 19590},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 573, col: 28, offset: 19590},
									expr: &ruleRefExpr{
										pos:  position{line: 573, col: 29, offset: 19591},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 573, col: 37, offset: 19599},
									expr: &ruleRefExpr{
										pos:  position{line: 573, col: 38, offset: 19600},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 573, col: 54, offset: 19616},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 577, col: 1, offset: 19741},
			expr: &actionExpr{
				pos: position{line: 577, col: 17, offset: 19757},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 577, col: 17, offset: 19757},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 577, col: 26, offset: 19766},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 577, col: 26, offset: 19766},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 578, col: 11, offset: 19782},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 579, col: 11, offset: 19828},
								expr: &ruleRefExpr{
									pos:  position{line: 579, col: 11, offset: 19828},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 580, col: 11, offset: 19847},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 581, col: 11, offset: 19873},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 582, col: 11, offset: 19902},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 583, col: 11, offset: 19924},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 584, col: 11, offset: 19947},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 11, offset: 19963},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 586, col: 11, offset: 19989},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 587, col: 11, offset: 20013},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 588, col: 11, offset: 20035},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 589, col: 11, offset: 20053},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 590, col: 11, offset: 20086},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 591, col: 11, offset: 20115},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 598, col: 1, offset: 20273},
			expr: &seqExpr{
				pos: position{line: 598, col: 31, offset: 20303},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 598, col: 31, offset: 20303},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 598, col: 41, offset: 20313},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 603, col: 1, offset: 20429},
			expr: &actionExpr{
				pos: position{line: 603, col: 19, offset: 20447},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 603, col: 19, offset: 20447},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 603, col: 19, offset: 20447},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 25, offset: 20453},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 603, col: 40, offset: 20468},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 603, col: 45, offset: 20473},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 52, offset: 20480},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 68, offset: 20496},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 75, offset: 20503},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 607, col: 1, offset: 20622},
			expr: &actionExpr{
				pos: position{line: 607, col: 20, offset: 20641},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 607, col: 20, offset: 20641},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 607, col: 20, offset: 20641},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 26, offset: 20647},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 607, col: 41, offset: 20662},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 607, col: 45, offset: 20666},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 52, offset: 20673},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 607, col: 68, offset: 20689},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 75, offset: 20696},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 611, col: 1, offset: 20816},
			expr: &actionExpr{
				pos: position{line: 611, col: 18, offset: 20833},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 611, col: 19, offset: 20834},
					expr: &charClassMatcher{
						pos:        position{line: 611, col: 19, offset: 20834},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 615, col: 1, offset: 20887},
			expr: &actionExpr{
				pos: position{line: 615, col: 19, offset: 20905},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 615, col: 19, offset: 20905},
					expr: &charClassMatcher{
						pos:        position{line: 615, col: 19, offset: 20905},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 619, col: 1, offset: 20957},
			expr: &actionExpr{
				pos: position{line: 619, col: 24, offset: 20980},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 619, col: 24, offset: 20980},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 619, col: 24, offset: 20980},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 619, col: 28, offset: 20984},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 619, col: 34, offset: 20990},
								expr: &ruleRefExpr{
									pos:  position{line: 619, col: 35, offset: 20991},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 619, col: 54, offset: 21010},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 626, col: 1, offset: 21199},
			expr: &actionExpr{
				pos: position{line: 626, col: 18, offset: 21216},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 626, col: 18, offset: 21216},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 626, col: 18, offset: 21216},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 626, col: 24, offset: 21222},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 626, col: 24, offset: 21222},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 626, col: 24, offset: 21222},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 626, col: 36, offset: 21234},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 626, col: 42, offset: 21240},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 626, col: 56, offset: 21254},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 626, col: 74, offset: 21272},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 628, col: 8, offset: 21421},
							expr: &ruleRefExpr{
								pos:  position{line: 628, col: 8, offset: 21421},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 628, col: 15, offset: 21428},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 632, col: 1, offset: 21484},
			expr: &actionExpr{
				pos: position{line: 632, col: 26, offset: 21509},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 632, col: 26, offset: 21509},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 632, col: 26, offset: 21509},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 632, col: 30, offset: 21513},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 632, col: 36, offset: 21519},
								expr: &choiceExpr{
									pos: position{line: 632, col: 37, offset: 21520},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 632, col: 37, offset: 21520},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 632, col: 59, offset: 21542},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 632, col: 80, offset: 21563},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 632, col: 99, offset: 21582},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 636, col: 1, offset: 21658},
			expr: &actionExpr{
				pos: position{line: 636, col: 24, offset: 21681},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 636, col: 24, offset: 21681},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 636, col: 24, offset: 21681},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 636, col: 33, offset: 21690},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 40, offset: 21697},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 636, col: 66, offset: 21723},
							expr: &litMatcher{
								pos:        position{line: 636, col: 66, offset: 21723},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 640, col: 1, offset: 21786},
			expr: &actionExpr{
				pos: position{line: 640, col: 29, offset: 21814},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 640, col: 29, offset: 21814},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 640, col: 29, offset: 21814},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 640, col: 36, offset: 21821},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 640, col: 36, offset: 21821},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 641, col: 11, offset: 21939},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 642, col: 11, offset: 21976},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 643, col: 11, offset: 22003},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 644, col: 11, offset: 22036},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 645, col: 11, offset: 22069},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 646, col: 11, offset: 22097},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 646, col: 31, offset: 22117},
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 31, offset: 22117},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 646, col: 39, offset: 22125},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 646, col: 39, offset: 22125},
									expr: &litMatcher{
										pos:        position{line: 646, col: 40, offset: 22126},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 646, col: 46, offset: 22132},
									expr: &litMatcher{
										pos:        position{line: 646, col: 47, offset: 22133},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 650, col: 1, offset: 22169},
			expr: &actionExpr{
				pos: position{line: 650, col: 23, offset: 22191},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 650, col: 23, offset: 22191},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 650, col: 23, offset: 22191},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 650, col: 30, offset: 22198},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 650, col: 30, offset: 22198},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 650, col: 47, offset: 22215},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 651, col: 5, offset: 22238},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 651, col: 12, offset: 22245},
								expr: &actionExpr{
									pos: position{line: 651, col: 13, offset: 22246},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 651, col: 13, offset: 22246},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 651, col: 13, offset: 22246},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 651, col: 17, offset: 22250},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 651, col: 24, offset: 22257},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 651, col: 24, offset: 22257},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 651, col: 41, offset: 22274},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 657, col: 1, offset: 22418},
			expr: &actionExpr{
				pos: position{line: 657, col: 29, offset: 22446},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 657, col: 29, offset: 22446},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 657, col: 29, offset: 22446},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 657, col: 34, offset: 22451},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 657, col: 41, offset: 22458},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 657, col: 41, offset: 22458},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 657, col: 58, offset: 22475},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 658, col: 5, offset: 22498},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 658, col: 12, offset: 22505},
								expr: &actionExpr{
									pos: position{line: 658, col: 13, offset: 22506},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 658, col: 13, offset: 22506},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 658, col: 13, offset: 22506},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 658, col: 17, offset: 22510},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 658, col: 24, offset: 22517},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 658, col: 24, offset: 22517},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 658, col: 41, offset: 22534},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 660, col: 9, offset: 22589},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 664, col: 1, offset: 22683},
			expr: &actionExpr{
				pos: position{line: 664, col: 19, offset: 22701},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 664, col: 19, offset: 22701},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 664, col: 19, offset: 22701},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 26, offset: 22708},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 664, col: 34, offset: 22716},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 664, col: 39, offset: 22721},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 44, offset: 22726},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 668, col: 1, offset: 22818},
			expr: &actionExpr{
				pos: position{line: 668, col: 25, offset: 22842},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 668, col: 25, offset: 22842},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 668, col: 25, offset: 22842},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 668, col: 30, offset: 22847},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 668, col: 37, offset: 22854},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 668, col: 45, offset: 22862},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 668, col: 50, offset: 22867},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 668, col: 55, offset: 22872},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 668, col: 63, offset: 22880},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 672, col: 1, offset: 22969},
			expr: &actionExpr{
				pos: position{line: 672, col: 20, offset: 22988},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 672, col: 20, offset: 22988},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 672, col: 32, offset: 23000},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 676, col: 1, offset: 23099},
			expr: &actionExpr{
				pos: position{line: 676, col: 26, offset: 23124},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 676, col: 26, offset: 23124},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 676, col: 26, offset: 23124},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 676, col: 31, offset: 23129},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 676, col: 43, offset: 23141},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 676, col: 51, offset: 23149},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 680, col: 1, offset: 23245},
			expr: &actionExpr{
				pos: position{line: 680, col: 23, offset: 23267},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 680, col: 23, offset: 23267},
					expr: &charClassMatcher{
						pos:        position{line: 680, col: 23, offset: 23267},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 684, col: 1, offset: 23316},
			expr: &actionExpr{
				pos: position{line: 684, col: 23, offset: 23338},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 684, col: 23, offset: 23338},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 684, col: 24, offset: 23339},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 684, col: 24, offset: 23339},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 684, col: 34, offset: 23349},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 684, col: 42, offset: 23357},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 48, offset: 23363},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 684, col: 73, offset: 23388},
							expr: &litMatcher{
								pos:        position{line: 684, col: 73, offset: 23388},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 688, col: 1, offset: 23541},
			expr: &actionExpr{
				pos: position{line: 688, col: 28, offset: 23568},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 688, col: 28, offset: 23568},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 688, col: 28, offset: 23568},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 688, col: 35, offset: 23575},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 688, col: 54, offset: 23594},
							expr: &ruleRefExpr{
								pos:  position{line: 688, col: 54, offset: 23594},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 688, col: 62, offset: 23602},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 688, col: 62, offset: 23602},
									expr: &litMatcher{
										pos:        position{line: 688, col: 63, offset: 23603},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 688, col: 69, offset: 23609},
									expr: &litMatcher{
										pos:        position{line: 688, col: 70, offset: 23610},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 692, col: 1, offset: 23646},
			expr: &actionExpr{
				pos: position{line: 692, col: 22, offset: 23667},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 692, col: 22, offset: 23667},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 692, col: 22, offset: 23667},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 29, offset: 23674},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 693, col: 5, offset: 23689},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 693, col: 12, offset: 23696},
								expr: &actionExpr{
									pos: position{line: 693, col: 13, offset: 23697},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 693, col: 13, offset: 23697},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 693, col: 13, offset: 23697},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 693, col: 17, offset: 23701},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 693, col: 24, offset: 23708},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 699, col: 1, offset: 23845},
			expr: &choiceExpr{
				pos: position{line: 699, col: 13, offset: 23857},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 699, col: 13, offset: 23857},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 699, col: 13, offset: 23857},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 699, col: 18, offset: 23862},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 699, col: 18, offset: 23862},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 699, col: 30, offset: 23874},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 701, col: 5, offset: 23944},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 701, col: 5, offset: 23944},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 701, col: 5, offset: 23944},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 701, col: 9, offset: 23948},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 701, col: 14, offset: 23953},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 701, col: 14, offset: 23953},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 701, col: 26, offset: 23965},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 705, col: 1, offset: 24037},
			expr: &actionExpr{
				pos: position{line: 705, col: 16, offset: 24052},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 705, col: 16, offset: 24052},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 705, col: 16, offset: 24052},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 705, col: 23, offset: 24059},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 705, col: 23, offset: 24059},
									expr: &litMatcher{
										pos:        position{line: 705, col: 24, offset: 24060},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 708, col: 5, offset: 24117},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 716, col: 1, offset: 24305},
			expr: &actionExpr{
				pos: position{line: 716, col: 21, offset: 24325},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 716, col: 21, offset: 24325},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 716, col: 21, offset: 24325},
							expr: &ruleRefExpr{
								pos:  position{line: 716, col: 22, offset: 24326},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 716, col: 26, offset: 24330},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 716, col: 35, offset: 24339},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 716, col: 35, offset: 24339},
									expr: &charClassMatcher{
										pos:        position{line: 716, col: 35, offset: 24339},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 718, col: 12, offset: 24403},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawFileContent",
			pos:  position{line: 723, col: 1, offset: 24555},
			expr: &zeroOrMoreExpr{
				pos: position{line: 723, col: 19, offset: 24573},
				expr: &choiceExpr{
					pos: position{line: 723, col: 20, offset: 24574},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 723, col: 20, offset: 24574},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 723, col: 36, offset: 24590},
							name: "RawLine",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 729, col: 1, offset: 24743},
			expr: &actionExpr{
				pos: position{line: 729, col: 21, offset: 24763},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 729, col: 21, offset: 24763},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 729, col: 21, offset: 24763},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 729, col: 29, offset: 24771},
								expr: &choiceExpr{
									pos: position{line: 729, col: 30, offset: 24772},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 729, col: 30, offset: 24772},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 729, col: 53, offset: 24795},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 729, col: 74, offset: 24816},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 729, col: 74, offset: 24816,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 107, offset: 24849},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 733, col: 1, offset: 24924},
			expr: &actionExpr{
				pos: position{line: 733, col: 25, offset: 24948},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 733, col: 25, offset: 24948},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 733, col: 25, offset: 24948},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 733, col: 33, offset: 24956},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 733, col: 38, offset: 24961},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 733, col: 38, offset: 24961},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 733, col: 78, offset: 25001},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 737, col: 1, offset: 25070},
			expr: &actionExpr{
				pos: position{line: 737, col: 23, offset: 25092},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 737, col: 23, offset: 25092},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 737, col: 23, offset: 25092},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 737, col: 31, offset: 25100},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 737, col: 36, offset: 25105},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 737, col: 36, offset: 25105},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 737, col: 76, offset: 25145},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 744, col: 1, offset: 25316},
			expr: &choiceExpr{
				pos: position{line: 744, col: 18, offset: 25333},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 744, col: 18, offset: 25333},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 744, col: 18, offset: 25333},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 744, col: 27, offset: 25342},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 746, col: 9, offset: 25401},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 746, col: 9, offset: 25401},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 746, col: 15, offset: 25407},
								expr: &ruleRefExpr{
									pos:  position{line: 746, col: 16, offset: 25408},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 750, col: 1, offset: 25504},
			expr: &actionExpr{
				pos: position{line: 750, col: 22, offset: 25525},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 750, col: 22, offset: 25525},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 750, col: 22, offset: 25525},
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 23, offset: 25526},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 751, col: 5, offset: 25535},
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 6, offset: 25536},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 752, col: 5, offset: 25552},
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 6, offset: 25553},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 753, col: 5, offset: 25576},
							expr: &ruleRefExpr{
								pos:  position{line: 753, col: 6, offset: 25577},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 754, col: 5, offset: 25604},
							expr: &ruleRefExpr{
								pos:  position{line: 754, col: 6, offset: 25605},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 755, col: 5, offset: 25634},
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 6, offset: 25635},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 756, col: 5, offset: 25662},
							expr: &ruleRefExpr{
								pos:  position{line: 756, col: 6, offset: 25663},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 757, col: 5, offset: 25689},
							expr: &ruleRefExpr{
								pos:  position{line: 757, col: 6, offset: 25690},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 758, col: 5, offset: 25712},
							expr: &ruleRefExpr{
								pos:  position{line: 758, col: 6, offset: 25713},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 759, col: 5, offset: 25733},
							expr: &ruleRefExpr{
								pos:  position{line: 759, col: 6, offset: 25734},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 760, col: 5, offset: 25762},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 760, col: 11, offset: 25768},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 760, col: 11, offset: 25768},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 760, col: 20, offset: 25777},
										expr: &ruleRefExpr{
											pos:  position{line: 760, col: 21, offset: 25778},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 762, col: 12, offset: 25879},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 766, col: 1, offset: 25922},
			expr: &seqExpr{
				pos: position{line: 766, col: 25, offset: 25946},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 766, col: 25, offset: 25946},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 766, col: 29, offset: 25950},
						expr: &ruleRefExpr{
							pos:  position{line: 766, col: 29, offset: 25950},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 766, col: 36, offset: 25957},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 768, col: 1, offset: 26031},
			expr: &actionExpr{
				pos: position{line: 768, col: 29, offset: 26059},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 768, col: 29, offset: 26059},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 768, col: 29, offset: 26059},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 768, col: 50, offset: 26080},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 58, offset: 26088},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 772, col: 1, offset: 26198},
			expr: &actionExpr{
				pos: position{line: 772, col: 29, offset: 26226},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 772, col: 29, offset: 26226},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 772, col: 29, offset: 26226},
							expr: &ruleRefExpr{
								pos:  position{line: 772, col: 30, offset: 26227},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 773, col: 5, offset: 26237},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 773, col: 14, offset: 26246},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 773, col: 14, offset: 26246},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 774, col: 11, offset: 26272},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 775, col: 11, offset: 26297},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 776, col: 11, offset: 26319},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 777, col: 11, offset: 26348},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 778, col: 11, offset: 26373},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 779, col: 11, offset: 26401},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 780, col: 11, offset: 26431},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 782, col: 11, offset: 26498},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 783, col: 11, offset: 26550},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 784, col: 11, offset: 26575},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 785, col: 11, offset: 26608},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 786, col: 11, offset: 26635},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 787, col: 11, offset: 26673},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 788, col: 11, offset: 26699},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 795, col: 1, offset: 26872},
			expr: &actionExpr{
				pos: position{line: 795, col: 20, offset: 26891},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 795, col: 20, offset: 26891},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 795, col: 20, offset: 26891},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 795, col: 26, offset: 26897},
								expr: &ruleRefExpr{
									pos:  position{line: 795, col: 27, offset: 26898},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 795, col: 40, offset: 26911},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 48, offset: 26919},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 795, col: 71, offset: 26942},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 80, offset: 26951},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 799, col: 1, offset: 27090},
			expr: &actionExpr{
				pos: position{line: 800, col: 5, offset: 27121},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 800, col: 5, offset: 27121},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 800, col: 5, offset: 27121},
							expr: &ruleRefExpr{
								pos:  position{line: 800, col: 5, offset: 27121},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 800, col: 12, offset: 27128},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 802, col: 9, offset: 27193},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 802, col: 9, offset: 27193},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 802, col: 9, offset: 27193},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 802, col: 9, offset: 27193},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 802, col: 16, offset: 27200},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 802, col: 16, offset: 27200},
															expr: &litMatcher{
																pos:        position{line: 802, col: 17, offset: 27201},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 806, col: 9, offset: 27305},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 825, col: 11, offset: 28041},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 825, col: 11, offset: 28041},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 825, col: 11, offset: 28041},
													expr: &charClassMatcher{
														pos:        position{line: 825, col: 12, offset: 28042},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 825, col: 20, offset: 28050},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 827, col: 13, offset: 28163},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 827, col: 13, offset: 28163},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 827, col: 14, offset: 28164},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 827, col: 21, offset: 28171},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 829, col: 13, offset: 28287},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 829, col: 13, offset: 28287},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 829, col: 14, offset: 28288},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 829, col: 21, offset: 28295},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 831, col: 13, offset: 28411},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 831, col: 13, offset: 28411},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 831, col: 13, offset: 28411},
													expr: &charClassMatcher{
														pos:        position{line: 831, col: 14, offset: 28412},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 831, col: 22, offset: 28420},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 833, col: 13, offset: 28536},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 833, col: 13, offset: 28536},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 833, col: 13, offset: 28536},
													expr: &charClassMatcher{
														pos:        position{line: 833, col: 14, offset: 28537},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 833, col: 22, offset: 28545},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 835, col: 12, offset: 28660},
							expr: &ruleRefExpr{
								pos:  position{line: 835, col: 12, offset: 28660},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 839, col: 1, offset: 28699},
			expr: &actionExpr{
				pos: position{line: 839, col: 27, offset: 28725},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 839, col: 27, offset: 28725},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 839, col: 37, offset: 28735},
						expr: &ruleRefExpr{
							pos:  position{line: 839, col: 37, offset: 28735},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 846, col: 1, offset: 28942},
			expr: &actionExpr{
				pos: position{line: 846, col: 22, offset: 28963},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 846, col: 22, offset: 28963},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 846, col: 22, offset: 28963},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 846, col: 28, offset: 28969},
								expr: &ruleRefExpr{
									pos:  position{line: 846, col: 29, offset: 28970},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 846, col: 42, offset: 28983},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 846, col: 50, offset: 28991},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 846, col: 75, offset: 29016},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 846, col: 86, offset: 29027},
								expr: &ruleRefExpr{
									pos:  position{line: 846, col: 87, offset: 29028},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 846, col: 117, offset: 29058},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 846, col: 126, offset: 29067},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 850, col: 1, offset: 29224},
			expr: &actionExpr{
				pos: position{line: 851, col: 5, offset: 29257},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 851, col: 5, offset: 29257},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 851, col: 5, offset: 29257},
							expr: &ruleRefExpr{
								pos:  position{line: 851, col: 5, offset: 29257},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 851, col: 12, offset: 29264},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 851, col: 20, offset: 29272},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 853, col: 9, offset: 29331},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 853, col: 9, offset: 29331},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 853, col: 9, offset: 29331},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 853, col: 16, offset: 29338},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 853, col: 16, offset: 29338},
															expr: &litMatcher{
																pos:        position{line: 853, col: 17, offset: 29339},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 857, col: 9, offset: 29443},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 874, col: 14, offset: 30167},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 874, col: 21, offset: 30174},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 874, col: 22, offset: 30175},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 876, col: 13, offset: 30263},
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 13, offset: 30263},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 880, col: 1, offset: 30303},
			expr: &actionExpr{
				pos: position{line: 880, col: 32, offset: 30334},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 880, col: 32, offset: 30334},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 880, col: 32, offset: 30334},
							expr: &litMatcher{
								pos:        position{line: 880, col: 33, offset: 30335},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 880, col: 37, offset: 30339},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 881, col: 7, offset: 30354},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 881, col: 7, offset: 30354},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 881, col: 7, offset: 30354},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 882, col: 7, offset: 30400},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 882, col: 7, offset: 30400},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 883, col: 7, offset: 30444},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 883, col: 7, offset: 30444},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 884, col: 7, offset: 30487},
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 7, offset: 30487},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 888, col: 1, offset: 30533},
			expr: &actionExpr{
				pos: position{line: 888, col: 29, offset: 30561},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 888, col: 29, offset: 30561},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 888, col: 39, offset: 30571},
						expr: &ruleRefExpr{
							pos:  position{line: 888, col: 39, offset: 30571},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 895, col: 1, offset: 30894},
			expr: &actionExpr{
				pos: position{line: 895, col: 20, offset: 30913},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 895, col: 20, offset: 30913},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 895, col: 20, offset: 30913},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 895, col: 26, offset: 30919},
								expr: &ruleRefExpr{
									pos:  position{line: 895, col: 27, offset: 30920},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 40, offset: 30933},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 895, col: 46, offset: 30939},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 75, offset: 30968},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 895, col: 86, offset: 30979},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 112, offset: 31005},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 895, col: 124, offset: 31017},
								expr: &ruleRefExpr{
									pos:  position{line: 895, col: 125, offset: 31018},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 899, col: 1, offset: 31163},
			expr: &seqExpr{
				pos: position{line: 899, col: 26, offset: 31188},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 899, col: 26, offset: 31188},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 899, col: 54, offset: 31216},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 901, col: 1, offset: 31244},
			expr: &choiceExpr{
				pos: position{line: 901, col: 33, offset: 31276},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 901, col: 33, offset: 31276},
						expr: &charClassMatcher{
							pos:        position{line: 901, col: 33, offset: 31276},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 901, col: 45, offset: 31288},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 901, col: 45, offset: 31288},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 901, col: 49, offset: 31292},
								expr: &litMatcher{
									pos:        position{line: 901, col: 50, offset: 31293},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 902, col: 1, offset: 31298},
			expr: &actionExpr{
				pos: position{line: 902, col: 32, offset: 31329},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 902, col: 32, offset: 31329},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 902, col: 42, offset: 31339},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 902, col: 42, offset: 31339},
							expr: &ruleRefExpr{
								pos:  position{line: 902, col: 42, offset: 31339},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 908, col: 1, offset: 31500},
			expr: &actionExpr{
				pos: position{line: 908, col: 24, offset: 31523},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 908, col: 24, offset: 31523},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 908, col: 33, offset: 31532},
						expr: &seqExpr{
							pos: position{line: 908, col: 34, offset: 31533},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 908, col: 34, offset: 31533},
									expr: &ruleRefExpr{
										pos:  position{line: 908, col: 35, offset: 31534},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 908, col: 43, offset: 31542},
									expr: &litMatcher{
										pos:        position{line: 908, col: 44, offset: 31543},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 908, col: 49, offset: 31548},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 912, col: 1, offset: 31679},
			expr: &actionExpr{
				pos: position{line: 912, col: 31, offset: 31709},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 912, col: 31, offset: 31709},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 912, col: 40, offset: 31718},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 912, col: 40, offset: 31718},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 913, col: 11, offset: 31734},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 914, col: 11, offset: 31784},
								expr: &ruleRefExpr{
									pos:  position{line: 914, col: 11, offset: 31784},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 915, col: 11, offset: 31803},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 916, col: 11, offset: 31829},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 917, col: 11, offset: 31859},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 918, col: 11, offset: 31880},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 919, col: 11, offset: 31909},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 920, col: 11, offset: 31931},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 921, col: 11, offset: 31955},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 922, col: 11, offset: 31971},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 923, col: 11, offset: 31997},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 924, col: 11, offset: 32021},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 925, col: 11, offset: 32043},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 926, col: 11, offset: 32061},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 927, col: 11, offset: 32094},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 928, col: 11, offset: 32123},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 932, col: 1, offset: 32166},
			expr: &actionExpr{
				pos: position{line: 933, col: 5, offset: 32200},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 933, col: 5, offset: 32200},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 933, col: 5, offset: 32200},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 933, col: 16, offset: 32211},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 933, col: 16, offset: 32211},
									expr: &litMatcher{
										pos:        position{line: 933, col: 17, offset: 32212},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 936, col: 5, offset: 32273},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 940, col: 6, offset: 32453},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 940, col: 6, offset: 32453},
									expr: &choiceExpr{
										pos: position{line: 940, col: 7, offset: 32454},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 940, col: 7, offset: 32454},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 940, col: 15, offset: 32462},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 940, col: 27, offset: 32474},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 944, col: 1, offset: 32518},
			expr: &actionExpr{
				pos: position{line: 944, col: 31, offset: 32548},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 944, col: 31, offset: 32548},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 944, col: 40, offset: 32557},
						expr: &ruleRefExpr{
							pos:  position{line: 944, col: 41, offset: 32558},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 951, col: 1, offset: 32756},
			expr: &choiceExpr{
				pos: position{line: 951, col: 19, offset: 32774},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 951, col: 19, offset: 32774},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 951, col: 19, offset: 32774},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 953, col: 9, offset: 32822},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 953, col: 9, offset: 32822},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 955, col: 9, offset: 32872},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 955, col: 9, offset: 32872},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 957, col: 9, offset: 32932},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 957, col: 9, offset: 32932},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 959, col: 9, offset: 32988},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 959, col: 9, offset: 32988},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 970, col: 1, offset: 33315},
			expr: &choiceExpr{
				pos: position{line: 972, col: 5, offset: 33367},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 972, col: 5, offset: 33367},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 972, col: 5, offset: 33367},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 972, col: 5, offset: 33367},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 972, col: 16, offset: 33378},
										expr: &ruleRefExpr{
											pos:  position{line: 972, col: 17, offset: 33379},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 972, col: 30, offset: 33392},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 972, col: 33, offset: 33395},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 972, col: 49, offset: 33411},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 972, col: 54, offset: 33416},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 972, col: 60, offset: 33422},
										expr: &ruleRefExpr{
											pos:  position{line: 972, col: 61, offset: 33423},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 976, col: 5, offset: 33610},
						run: (*parser).callonRawParagraph13,
						expr: &seqExpr{
							pos: position{line: 976, col: 5, offset: 33610},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 976, col: 5, offset: 33610},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 976, col: 16, offset: 33621},
										expr: &ruleRefExpr{
											pos:  position{line: 976, col: 17, offset: 33622},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 976, col: 30, offset: 33635},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 976, col: 35, offset: 33640},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 976, col: 44, offset: 33649},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 980, col: 5, offset: 33843},
						run: (*parser).callonRawParagraph21,
						expr: &seqExpr{
							pos: position{line: 980, col: 5, offset: 33843},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 980, col: 5, offset: 33843},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 980, col: 16, offset: 33854},
										expr: &ruleRefExpr{
											pos:  position{line: 980, col: 17, offset: 33855},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 980, col: 30, offset: 33868},
									run: (*parser).callonRawParagraph26,
								},
								&notExpr{
									pos: position{line: 987, col: 7, offset: 34154},
									expr: &ruleRefExpr{
										pos:  position{line: 987, col: 8, offset: 34155},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 987, col: 23, offset: 34170},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 987, col: 31, offset: 34178},
										expr: &ruleRefExpr{
											pos:  position{line: 987, col: 32, offset: 34179},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 991, col: 5, offset: 34366},
						run: (*parser).callonRawParagraph32,
						expr: &seqExpr{
							pos: position{line: 991, col: 5, offset: 34366},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 991, col: 5, offset: 34366},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 991, col: 16, offset: 34377},
										expr: &ruleRefExpr{
											pos:  position{line: 991, col: 17, offset: 34378},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 991, col: 30, offset: 34391},
									expr: &ruleRefExpr{
										pos:  position{line: 991, col: 31, offset: 34392},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 991, col: 46, offset: 34407},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 991, col: 52, offset: 34413},
										expr: &ruleRefExpr{
											pos:  position{line: 991, col: 53, offset: 34414},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 995, col: 1, offset: 34516},
			expr: &oneOrMoreExpr{
				pos: position{line: 995, col: 33, offset: 34548},
				expr: &actionExpr{
					pos: position{line: 995, col: 34, offset: 34549},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 995, col: 34, offset: 34549},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 995, col: 34, offset: 34549},
								expr: &ruleRefExpr{
									pos:  position{line: 995, col: 35, offset: 34550},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 995, col: 45, offset: 34560},
								expr: &litMatcher{
									pos:        position{line: 995, col: 45, offset: 34560},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 995, col: 51, offset: 34566},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 995, col: 60, offset: 34575},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 999, col: 1, offset: 34712},
			expr: &actionExpr{
				pos: position{line: 999, col: 21, offset: 34732},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 999, col: 21, offset: 34732},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 999, col: 21, offset: 34732},
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 22, offset: 34733},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 999, col: 32, offset: 34743},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 41, offset: 34752},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 999, col: 66, offset: 34777},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 1003, col: 1, offset: 34836},
			expr: &actionExpr{
				pos: position{line: 1003, col: 28, offset: 34863},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1003, col: 28, offset: 34863},
					expr: &charClassMatcher{
						pos:        position{line: 1003, col: 28, offset: 34863},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 1009, col: 1, offset: 35068},
			expr: &choiceExpr{
				pos: position{line: 1011, col: 5, offset: 35117},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1011, col: 5, offset: 35117},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 1011, col: 5, offset: 35117},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1011, col: 5, offset: 35117},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1011, col: 16, offset: 35128},
										expr: &ruleRefExpr{
											pos:  position{line: 1011, col: 17, offset: 35129},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1011, col: 30, offset: 35142},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 1011, col: 33, offset: 35145},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 1011, col: 49, offset: 35161},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 1011, col: 54, offset: 35166},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 1011, col: 60, offset: 35172},
										expr: &ruleRefExpr{
											pos:  position{line: 1011, col: 61, offset: 35173},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1015, col: 5, offset: 35363},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 1015, col: 5, offset: 35363},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1015, col: 5, offset: 35363},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1015, col: 16, offset: 35374},
										expr: &ruleRefExpr{
											pos:  position{line: 1015, col: 17, offset: 35375},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1015, col: 30, offset: 35388},
									run: (*parser).callonParagraph18,
								},
								&notExpr{
									pos: position{line: 1022, col: 7, offset: 35674},
									expr: &ruleRefExpr{
										pos:  position{line: 1022, col: 8, offset: 35675},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 1022, col: 23, offset: 35690},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 1022, col: 31, offset: 35698},
										expr: &ruleRefExpr{
											pos:  position{line: 1022, col: 32, offset: 35699},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1026, col: 5, offset: 35883},
						run: (*parser).callonParagraph24,
						expr: &seqExpr{
							pos: position{line: 1026, col: 5, offset: 35883},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1026, col: 5, offset: 35883},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1026, col: 16, offset: 35894},
										expr: &ruleRefExpr{
											pos:  position{line: 1026, col: 17, offset: 35895},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 1026, col: 30, offset: 35908},
									expr: &ruleRefExpr{
										pos:  position{line: 1026, col: 31, offset: 35909},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 1026, col: 46, offset: 35924},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 1026, col: 52, offset: 35930},
										expr: &ruleRefExpr{
											pos:  position{line: 1026, col: 53, offset: 35931},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLine",
			pos:  position{line: 1030, col: 1, offset: 36030},
			expr: &ruleRefExpr{
				pos:  position{line: 1030, col: 18, offset: 36047},
				name: "InlineElements",
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 1032, col: 1, offset: 36065},
			expr: &actionExpr{
				pos: position{line: 1032, col: 34, offset: 36098},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 1032, col: 34, offset: 36098},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1032, col: 34, offset: 36098},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1032, col: 40, offset: 36104},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1032, col: 48, offset: 36112},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1032, col: 49, offset: 36113},
									expr: &charClassMatcher{
										pos:        position{line: 1032, col: 49, offset: 36113},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1034, col: 8, offset: 36165},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 1038, col: 1, offset: 36201},
			expr: &oneOrMoreExpr{
				pos: position{line: 1038, col: 36, offset: 36236},
				expr: &actionExpr{
					pos: position{line: 1038, col: 37, offset: 36237},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 1038, col: 37, offset: 36237},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1038, col: 37, offset: 36237},
								expr: &ruleRefExpr{
									pos:  position{line: 1038, col: 38, offset: 36238},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 1038, col: 48, offset: 36248},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1038, col: 57, offset: 36257},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 1043, col: 1, offset: 36473},
			expr: &actionExpr{
				pos: position{line: 1043, col: 20, offset: 36492},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 1043, col: 20, offset: 36492},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1043, col: 20, offset: 36492},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1043, col: 31, offset: 36503},
								expr: &ruleRefExpr{
									pos:  position{line: 1043, col: 32, offset: 36504},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1044, col: 5, offset: 36523},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 1052, col: 5, offset: 36817},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1052, col: 16, offset: 36828},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1053, col: 5, offset: 36855},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1053, col: 16, offset: 36866},
								expr: &ruleRefExpr{
									pos:  position{line: 1053, col: 17, offset: 36867},
									name: "OtherParagraphRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 1057, col: 1, offset: 37008},
			expr: &actionExpr{
				pos: position{line: 1058, col: 5, offset: 37039},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 1058, col: 5, offset: 37039},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1058, col: 5, offset: 37039},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1058, col: 14, offset: 37048},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 1058, col: 14, offset: 37048},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1058, col: 14, offset: 37048},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 1058, col: 23, offset: 37057},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1058, col: 28, offset: 37062},
											expr: &charClassMatcher{
												pos:        position{line: 1058, col: 28, offset: 37062},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1058, col: 68, offset: 37102},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphRawLine",
			pos:  position{line: 1062, col: 1, offset: 37162},
			expr: &ruleRefExpr{
				pos:  position{line: 1062, col: 26, offset: 37187},
				name: "RawParagraphLine",
			},
		},
		{
			name: "NormalParagraphContent",
			pos:  position{line: 1065, col: 1, offset: 37286},
			expr: &oneOrMoreExpr{
				pos: position{line: 1065, col: 27, offset: 37312},
				expr: &ruleRefExpr{
					pos:  position{line: 1065, col: 27, offset: 37312},
					name: "InlineElements",
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 1072, col: 1, offset: 37530},
			expr: &choiceExpr{
				pos: position{line: 1074, col: 5, offset: 37591},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1074, col: 5, offset: 37591},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 1074, col: 5, offset: 37591},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1074, col: 5, offset: 37591},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1074, col: 16, offset: 37602},
										expr: &ruleRefExpr{
											pos:  position{line: 1074, col: 17, offset: 37603},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1074, col: 30, offset: 37616},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 1074, col: 33, offset: 37619},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 1074, col: 49, offset: 37635},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 1074, col: 54, offset: 37640},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1074, col: 61, offset: 37647},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1078, col: 5, offset: 37854},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 1078, col: 5, offset: 37854},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1078, col: 5, offset: 37854},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1078, col: 16, offset: 37865},
										expr: &ruleRefExpr{
											pos:  position{line: 1078, col: 17, offset: 37866},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1078, col: 30, offset: 37879},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1078, col: 37, offset: 37886},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 1082, col: 1, offset: 37994},
			expr: &actionExpr{
				pos: position{line: 1082, col: 31, offset: 38024},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 1082, col: 31, offset: 38024},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1082, col: 31, offset: 38024},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1082, col: 42, offset: 38035},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1082, col: 65, offset: 38058},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1082, col: 76, offset: 38069},
								expr: &seqExpr{
									pos: position{line: 1082, col: 77, offset: 38070},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1082, col: 77, offset: 38070},
											expr: &ruleRefExpr{
												pos:  position{line: 1082, col: 78, offset: 38071},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1082, col: 99, offset: 38092},
											name: "OtherParagraphRawLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawVerseParagraph",
			pos:  position{line: 1090, col: 1, offset: 38322},
			expr: &actionExpr{
				pos: position{line: 1091, col: 5, offset: 38349},
				run: (*parser).callonRawVerseParagraph1,
				expr: &seqExpr{
					pos: position{line: 1091, col: 5, offset: 38349},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1091, col: 5, offset: 38349},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1091, col: 16, offset: 38360},
								expr: &ruleRefExpr{
									pos:  position{line: 1091, col: 17, offset: 38361},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1092, col: 5, offset: 38379},
							run: (*parser).callonRawVerseParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 1099, col: 5, offset: 38591},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 1099, col: 11, offset: 38597},
								expr: &ruleRefExpr{
									pos:  position{line: 1099, col: 12, offset: 38598},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 1107, col: 1, offset: 38812},
			expr: &actionExpr{
				pos: position{line: 1107, col: 19, offset: 38830},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 1107, col: 19, offset: 38830},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1107, col: 19, offset: 38830},
							expr: &ruleRefExpr{
								pos:  position{line: 1107, col: 20, offset: 38831},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1108, col: 5, offset: 38846},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 1108, col: 15, offset: 38856},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1108, col: 15, offset: 38856},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 1108, col: 15, offset: 38856},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 1108, col: 24, offset: 38865},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 1110, col: 9, offset: 38959},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 1110, col: 9, offset: 38959},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1110, col: 9, offset: 38959},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 1110, col: 18, offset: 38968},
														expr: &ruleRefExpr{
															pos:  position{line: 1110, col: 19, offset: 38969},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1110, col: 35, offset: 38985},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1116, col: 1, offset: 39108},
			expr: &actionExpr{
				pos: position{line: 1117, col: 5, offset: 39132},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1117, col: 5, offset: 39132},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1117, col: 14, offset: 39141},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1117, col: 14, offset: 39141},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1118, col: 11, offset: 39193},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 1119, col: 11, offset: 39239},
								expr: &ruleRefExpr{
									pos:  position{line: 1119, col: 11, offset: 39239},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 1120, col: 11, offset: 39258},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1120, col: 11, offset: 39258},
										expr: &ruleRefExpr{
											pos:  position{line: 1120, col: 12, offset: 39259},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 1121, col: 13, offset: 39278},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1121, col: 13, offset: 39278},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1122, col: 15, offset: 39306},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1123, col: 15, offset: 39332},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1124, col: 15, offset: 39354},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1125, col: 15, offset: 39380},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1126, col: 15, offset: 39408},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1127, col: 15, offset: 39429},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1128, col: 15, offset: 39463},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1129, col: 15, offset: 39494},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1130, col: 15, offset: 39525},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1131, col: 15, offset: 39557},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1132, col: 15, offset: 39595},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1133, col: 15, offset: 39626},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1134, col: 15, offset: 39660},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1135, col: 15, offset: 39685},
												name: "ImpliedApostrophe",
											},
											&ruleRefExpr{
												pos:  position{line: 1136, col: 15, offset: 39718},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1143, col: 1, offset: 39948},
			expr: &actionExpr{
				pos: position{line: 1143, col: 14, offset: 39961},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1143, col: 14, offset: 39961},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1143, col: 14, offset: 39961},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1143, col: 20, offset: 39967},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1143, col: 24, offset: 39971},
							expr: &ruleRefExpr{
								pos:  position{line: 1143, col: 24, offset: 39971},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1143, col: 31, offset: 39978},
							expr: &ruleRefExpr{
								pos:  position{line: 1143, col: 32, offset: 39979},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1150, col: 1, offset: 40270},
			expr: &choiceExpr{
				pos: position{line: 1150, col: 15, offset: 40284},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1150, col: 15, offset: 40284},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1150, col: 41, offset: 40310},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1150, col: 65, offset: 40334},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1152, col: 1, offset: 40355},
			expr: &choiceExpr{
				pos: position{line: 1152, col: 32, offset: 40386},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1152, col: 32, offset: 40386},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1152, col: 32, offset: 40386},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1152, col: 36, offset: 40390},
								expr: &litMatcher{
									pos:        position{line: 1152, col: 37, offset: 40391},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1152, col: 43, offset: 40397},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1152, col: 43, offset: 40397},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1152, col: 47, offset: 40401},
								expr: &litMatcher{
									pos:        position{line: 1152, col: 48, offset: 40402},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1152, col: 54, offset: 40408},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1152, col: 54, offset: 40408},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1152, col: 58, offset: 40412},
								expr: &litMatcher{
									pos:        position{line: 1152, col: 59, offset: 40413},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1152, col: 65, offset: 40419},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1152, col: 65, offset: 40419},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1152, col: 69, offset: 40423},
								expr: &litMatcher{
									pos:        position{line: 1152, col: 70, offset: 40424},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1154, col: 1, offset: 40431},
			expr: &choiceExpr{
				pos: position{line: 1154, col: 34, offset: 40464},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1154, col: 34, offset: 40464},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1154, col: 41, offset: 40471},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1154, col: 48, offset: 40478},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1154, col: 55, offset: 40485},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1154, col: 62, offset: 40492},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1154, col: 68, offset: 40498},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1156, col: 1, offset: 40505},
			expr: &actionExpr{
				pos: position{line: 1156, col: 26, offset: 40530},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1156, col: 26, offset: 40530},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1156, col: 32, offset: 40536},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1156, col: 32, offset: 40536},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1157, col: 15, offset: 40572},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1158, col: 15, offset: 40609},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1159, col: 15, offset: 40646},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1160, col: 15, offset: 40687},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1161, col: 15, offset: 40717},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1162, col: 15, offset: 40749},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1166, col: 1, offset: 40907},
			expr: &choiceExpr{
				pos: position{line: 1166, col: 28, offset: 40934},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1166, col: 28, offset: 40934},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1167, col: 15, offset: 40969},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1168, col: 15, offset: 41006},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1169, col: 15, offset: 41043},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1171, col: 1, offset: 41071},
			expr: &choiceExpr{
				pos: position{line: 1171, col: 22, offset: 41092},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1171, col: 22, offset: 41092},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1172, col: 15, offset: 41124},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1173, col: 15, offset: 41157},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1174, col: 15, offset: 41190},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1175, col: 15, offset: 41227},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1176, col: 15, offset: 41264},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1178, col: 1, offset: 41290},
			expr: &choiceExpr{
				pos: position{line: 1178, col: 33, offset: 41322},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1178, col: 33, offset: 41322},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1178, col: 39, offset: 41328},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1178, col: 39, offset: 41328},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1182, col: 1, offset: 41465},
			expr: &actionExpr{
				pos: position{line: 1182, col: 25, offset: 41489},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1182, col: 25, offset: 41489},
					expr: &litMatcher{
						pos:        position{line: 1182, col: 25, offset: 41489},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1186, col: 1, offset: 41534},
			expr: &actionExpr{
				pos: position{line: 1186, col: 25, offset: 41558},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1186, col: 25, offset: 41558},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1186, col: 25, offset: 41558},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1186, col: 30, offset: 41563},
							expr: &litMatcher{
								pos:        position{line: 1186, col: 30, offset: 41563},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1194, col: 1, offset: 41668},
			expr: &choiceExpr{
				pos: position{line: 1194, col: 13, offset: 41680},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1194, col: 13, offset: 41680},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1194, col: 35, offset: 41702},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1196, col: 1, offset: 41771},
			expr: &actionExpr{
				pos: position{line: 1196, col: 24, offset: 41794},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1196, col: 24, offset: 41794},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1196, col: 24, offset: 41794},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1196, col: 30, offset: 41800},
								expr: &ruleRefExpr{
									pos:  position{line: 1196, col: 31, offset: 41801},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1196, col: 49, offset: 41819},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1196, col: 54, offset: 41824},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1196, col: 64, offset: 41834},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1196, col: 93, offset: 41863},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1200, col: 1, offset: 41954},
			expr: &seqExpr{
				pos: position{line: 1200, col: 32, offset: 41985},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1200, col: 32, offset: 41985},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1200, col: 59, offset: 42012},
						expr: &seqExpr{
							pos: position{line: 1200, col: 60, offset: 42013},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1200, col: 60, offset: 42013},
									expr: &litMatcher{
										pos:        position{line: 1200, col: 62, offset: 42015},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1200, col: 69, offset: 42022},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1200, col: 69, offset: 42022},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1200, col: 77, offset: 42030},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1202, col: 1, offset: 42097},
			expr: &choiceExpr{
				pos: position{line: 1202, col: 31, offset: 42127},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1202, col: 31, offset: 42127},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1203, col: 11, offset: 42143},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1203, col: 11, offset: 42143},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1203, col: 19, offset: 42151},
								expr: &ruleRefExpr{
									pos:  position{line: 1203, col: 20, offset: 42152},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 11, offset: 42171},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1205, col: 11, offset: 42202},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 11, offset: 42226},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1207, col: 11, offset: 42248},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 11, offset: 42270},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1209, col: 11, offset: 42295},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 11, offset: 42320},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1211, col: 11, offset: 42347},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 11, offset: 42365},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 11, offset: 42387},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 11, offset: 42410},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 11, offset: 42426},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1216, col: 11, offset: 42455},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1217, col: 11, offset: 42488},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1218, col: 11, offset: 42517},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1221, col: 1, offset: 42559},
			expr: &choiceExpr{
				pos: position{line: 1222, col: 5, offset: 42604},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1222, col: 5, offset: 42604},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1223, col: 7, offset: 42702},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1223, col: 7, offset: 42702},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1223, col: 7, offset: 42702},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1223, col: 12, offset: 42707},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1227, col: 1, offset: 42874},
			expr: &choiceExpr{
				pos: position{line: 1227, col: 24, offset: 42897},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1227, col: 24, offset: 42897},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1227, col: 24, offset: 42897},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1227, col: 24, offset: 42897},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1227, col: 30, offset: 42903},
										expr: &ruleRefExpr{
											pos:  position{line: 1227, col: 31, offset: 42904},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1227, col: 51, offset: 42924},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1227, col: 51, offset: 42924},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1227, col: 55, offset: 42928},
											expr: &litMatcher{
												pos:        position{line: 1227, col: 56, offset: 42929},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1227, col: 61, offset: 42934},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1227, col: 71, offset: 42944},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1227, col: 100, offset: 42973},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1227, col: 104, offset: 42977},
									expr: &notExpr{
										pos: position{line: 1227, col: 106, offset: 42979},
										expr: &ruleRefExpr{
											pos:  position{line: 1227, col: 107, offset: 42980},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1229, col: 5, offset: 43176},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1229, col: 5, offset: 43176},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1229, col: 5, offset: 43176},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1229, col: 11, offset: 43182},
										expr: &ruleRefExpr{
											pos:  position{line: 1229, col: 12, offset: 43183},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1229, col: 30, offset: 43201},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1229, col: 34, offset: 43205},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1229, col: 44, offset: 43215},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1229, col: 44, offset: 43215},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1229, col: 48, offset: 43219},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1229, col: 77, offset: 43248},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1233, col: 1, offset: 43458},
			expr: &seqExpr{
				pos: position{line: 1233, col: 32, offset: 43489},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1233, col: 32, offset: 43489},
						expr: &ruleRefExpr{
							pos:  position{line: 1233, col: 33, offset: 43490},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1233, col: 39, offset: 43496},
						expr: &ruleRefExpr{
							pos:  position{line: 1233, col: 39, offset: 43496},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1235, col: 1, offset: 43527},
			expr: &choiceExpr{
				pos: position{line: 1235, col: 31, offset: 43557},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1235, col: 31, offset: 43557},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1236, col: 11, offset: 43573},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1236, col: 11, offset: 43573},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1236, col: 19, offset: 43581},
								expr: &ruleRefExpr{
									pos:  position{line: 1236, col: 20, offset: 43582},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1237, col: 11, offset: 43601},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1238, col: 11, offset: 43632},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1239, col: 11, offset: 43656},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1239, col: 11, offset: 43656},
								expr: &ruleRefExpr{
									pos:  position{line: 1239, col: 11, offset: 43656},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1239, col: 18, offset: 43663},
								expr: &seqExpr{
									pos: position{line: 1239, col: 19, offset: 43664},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1239, col: 19, offset: 43664},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1239, col: 23, offset: 43668},
											expr: &litMatcher{
												pos:        position{line: 1239, col: 24, offset: 43669},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1240, col: 11, offset: 43686},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1241, col: 11, offset: 43708},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1242, col: 11, offset: 43730},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1243, col: 11, offset: 43755},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1244, col: 11, offset: 43780},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1245, col: 11, offset: 43807},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 11, offset: 43825},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1247, col: 11, offset: 43847},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 11, offset: 43871},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 11, offset: 43889},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 11, offset: 43918},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1251, col: 11, offset: 43951},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 11, offset: 43980},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1254, col: 1, offset: 44020},
			expr: &choiceExpr{
				pos: position{line: 1255, col: 5, offset: 44065},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1255, col: 5, offset: 44065},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1256, col: 7, offset: 44163},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1256, col: 7, offset: 44163},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1256, col: 7, offset: 44163},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1256, col: 11, offset: 44167},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1260, col: 1, offset: 44334},
			expr: &choiceExpr{
				pos: position{line: 1261, col: 5, offset: 44359},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1261, col: 5, offset: 44359},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1261, col: 5, offset: 44359},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1261, col: 5, offset: 44359},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1261, col: 18, offset: 44372},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1261, col: 40, offset: 44394},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1261, col: 45, offset: 44399},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1261, col: 55, offset: 44409},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1261, col: 84, offset: 44438},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1263, col: 9, offset: 44597},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1263, col: 9, offset: 44597},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1263, col: 9, offset: 44597},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1263, col: 22, offset: 44610},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1263, col: 44, offset: 44632},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1263, col: 49, offset: 44637},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1263, col: 59, offset: 44647},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1263, col: 88, offset: 44676},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1266, col: 9, offset: 44879},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1266, col: 9, offset: 44879},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1266, col: 9, offset: 44879},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1266, col: 22, offset: 44892},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1266, col: 44, offset: 44914},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1266, col: 48, offset: 44918},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1266, col: 58, offset: 44928},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1266, col: 87, offset: 44957},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1274, col: 1, offset: 45173},
			expr: &choiceExpr{
				pos: position{line: 1274, col: 15, offset: 45187},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1274, col: 15, offset: 45187},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1274, col: 39, offset: 45211},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1276, col: 1, offset: 45236},
			expr: &actionExpr{
				pos: position{line: 1276, col: 26, offset: 45261},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1276, col: 26, offset: 45261},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1276, col: 26, offset: 45261},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1276, col: 32, offset: 45267},
								expr: &ruleRefExpr{
									pos:  position{line: 1276, col: 33, offset: 45268},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1276, col: 51, offset: 45286},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1276, col: 56, offset: 45291},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1276, col: 66, offset: 45301},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1276, col: 97, offset: 45332},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1280, col: 1, offset: 45470},
			expr: &seqExpr{
				pos: position{line: 1280, col: 34, offset: 45503},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1280, col: 34, offset: 45503},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1280, col: 63, offset: 45532},
						expr: &seqExpr{
							pos: position{line: 1280, col: 64, offset: 45533},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1280, col: 64, offset: 45533},
									expr: &litMatcher{
										pos:        position{line: 1280, col: 66, offset: 45535},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1280, col: 73, offset: 45542},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1280, col: 73, offset: 45542},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1280, col: 81, offset: 45550},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1282, col: 1, offset: 45619},
			expr: &choiceExpr{
				pos: position{line: 1282, col: 33, offset: 45651},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1282, col: 33, offset: 45651},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1283, col: 11, offset: 45667},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1283, col: 11, offset: 45667},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1283, col: 19, offset: 45675},
								expr: &ruleRefExpr{
									pos:  position{line: 1283, col: 20, offset: 45676},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1284, col: 11, offset: 45695},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1285, col: 11, offset: 45728},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1286, col: 11, offset: 45752},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1287, col: 11, offset: 45772},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1288, col: 11, offset: 45794},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 11, offset: 45819},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1290, col: 11, offset: 45844},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1291, col: 11, offset: 45871},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1292, col: 11, offset: 45889},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 11, offset: 45911},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 11, offset: 45935},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1295, col: 11, offset: 45952},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 11, offset: 45981},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 11, offset: 46010},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1299, col: 1, offset: 46052},
			expr: &choiceExpr{
				pos: position{line: 1300, col: 5, offset: 46099},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1300, col: 5, offset: 46099},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1301, col: 7, offset: 46199},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1301, col: 7, offset: 46199},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1301, col: 7, offset: 46199},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1301, col: 12, offset: 46204},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1305, col: 1, offset: 46373},
			expr: &choiceExpr{
				pos: position{line: 1305, col: 26, offset: 46398},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1305, col: 26, offset: 46398},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1305, col: 26, offset: 46398},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1305, col: 26, offset: 46398},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1305, col: 32, offset: 46404},
										expr: &ruleRefExpr{
											pos:  position{line: 1305, col: 33, offset: 46405},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1305, col: 52, offset: 46424},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1305, col: 52, offset: 46424},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1305, col: 56, offset: 46428},
											expr: &litMatcher{
												pos:        position{line: 1305, col: 57, offset: 46429},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1305, col: 62, offset: 46434},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1305, col: 72, offset: 46444},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1305, col: 103, offset: 46475},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1307, col: 5, offset: 46667},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1307, col: 5, offset: 46667},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1307, col: 5, offset: 46667},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1307, col: 11, offset: 46673},
										expr: &ruleRefExpr{
											pos:  position{line: 1307, col: 12, offset: 46674},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1307, col: 30, offset: 46692},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1307, col: 34, offset: 46696},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1307, col: 44, offset: 46706},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1307, col: 44, offset: 46706},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1307, col: 48, offset: 46710},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1307, col: 79, offset: 46741},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1311, col: 1, offset: 46955},
			expr: &seqExpr{
				pos: position{line: 1311, col: 34, offset: 46988},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1311, col: 34, offset: 46988},
						expr: &ruleRefExpr{
							pos:  position{line: 1311, col: 35, offset: 46989},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1311, col: 41, offset: 46995},
						expr: &ruleRefExpr{
							pos:  position{line: 1311, col: 41, offset: 46995},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1313, col: 1, offset: 47028},
			expr: &choiceExpr{
				pos: position{line: 1313, col: 33, offset: 47060},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1313, col: 33, offset: 47060},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1314, col: 11, offset: 47076},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1314, col: 11, offset: 47076},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1314, col: 19, offset: 47084},
								expr: &ruleRefExpr{
									pos:  position{line: 1314, col: 20, offset: 47085},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1315, col: 11, offset: 47104},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1316, col: 11, offset: 47137},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1317, col: 11, offset: 47161},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1317, col: 11, offset: 47161},
								expr: &ruleRefExpr{
									pos:  position{line: 1317, col: 11, offset: 47161},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1317, col: 18, offset: 47168},
								expr: &seqExpr{
									pos: position{line: 1317, col: 19, offset: 47169},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1317, col: 19, offset: 47169},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1317, col: 23, offset: 47173},
											expr: &litMatcher{
												pos:        position{line: 1317, col: 24, offset: 47174},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1318, col: 11, offset: 47191},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1319, col: 11, offset: 47211},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1320, col: 11, offset: 47233},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1321, col: 11, offset: 47258},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1322, col: 11, offset: 47283},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1323, col: 11, offset: 47310},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1324, col: 11, offset: 47328},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1325, col: 11, offset: 47350},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1326, col: 11, offset: 47374},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1327, col: 11, offset: 47392},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1328, col: 11, offset: 47422},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1329, col: 11, offset: 47455},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 11, offset: 47484},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1332, col: 1, offset: 47526},
			expr: &choiceExpr{
				pos: position{line: 1333, col: 5, offset: 47573},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1333, col: 5, offset: 47573},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1334, col: 7, offset: 47673},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1334, col: 7, offset: 47673},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1334, col: 7, offset: 47673},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1334, col: 11, offset: 47677},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1338, col: 1, offset: 47847},
			expr: &choiceExpr{
				pos: position{line: 1339, col: 5, offset: 47874},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1339, col: 5, offset: 47874},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1339, col: 5, offset: 47874},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1339, col: 5, offset: 47874},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1339, col: 18, offset: 47887},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1339, col: 40, offset: 47909},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1339, col: 45, offset: 47914},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1339, col: 55, offset: 47924},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1339, col: 86, offset: 47955},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1341, col: 9, offset: 48114},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1341, col: 9, offset: 48114},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1341, col: 9, offset: 48114},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1341, col: 22, offset: 48127},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1341, col: 44, offset: 48149},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1341, col: 49, offset: 48154},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1341, col: 59, offset: 48164},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1341, col: 90, offset: 48195},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1344, col: 9, offset: 48398},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1344, col: 9, offset: 48398},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1344, col: 9, offset: 48398},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1344, col: 22, offset: 48411},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1344, col: 44, offset: 48433},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1344, col: 48, offset: 48437},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1344, col: 58, offset: 48447},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1344, col: 89, offset: 48478},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1351, col: 1, offset: 48695},
			expr: &choiceExpr{
				pos: position{line: 1351, col: 18, offset: 48712},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1351, col: 18, offset: 48712},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1351, col: 45, offset: 48739},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1353, col: 1, offset: 48767},
			expr: &actionExpr{
				pos: position{line: 1353, col: 29, offset: 48795},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1353, col: 29, offset: 48795},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1353, col: 29, offset: 48795},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1353, col: 35, offset: 48801},
								expr: &ruleRefExpr{
									pos:  position{line: 1353, col: 36, offset: 48802},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1353, col: 54, offset: 48820},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1353, col: 59, offset: 48825},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1353, col: 69, offset: 48835},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1353, col: 103, offset: 48869},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1357, col: 1, offset: 49010},
			expr: &seqExpr{
				pos: position{line: 1357, col: 37, offset: 49046},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1357, col: 37, offset: 49046},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1357, col: 69, offset: 49078},
						expr: &seqExpr{
							pos: position{line: 1357, col: 70, offset: 49079},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1357, col: 70, offset: 49079},
									expr: &litMatcher{
										pos:        position{line: 1357, col: 72, offset: 49081},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1357, col: 79, offset: 49088},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1357, col: 79, offset: 49088},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1357, col: 87, offset: 49096},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1359, col: 1, offset: 49167},
			expr: &choiceExpr{
				pos: position{line: 1359, col: 36, offset: 49202},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1359, col: 36, offset: 49202},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1360, col: 11, offset: 49218},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1360, col: 11, offset: 49218},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1360, col: 19, offset: 49226},
								expr: &ruleRefExpr{
									pos:  position{line: 1360, col: 20, offset: 49227},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1361, col: 11, offset: 49246},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1362, col: 11, offset: 49264},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1363, col: 11, offset: 49300},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1364, col: 11, offset: 49324},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1365, col: 11, offset: 49344},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1366, col: 11, offset: 49366},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1367, col: 11, offset: 49388},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1368, col: 11, offset: 49413},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1369, col: 11, offset: 49440},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 11, offset: 49462},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 11, offset: 49485},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1372, col: 11, offset: 49501},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1373, col: 11, offset: 49531},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1374, col: 11, offset: 49560},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1376, col: 1, offset: 49605},
			expr: &choiceExpr{
				pos: position{line: 1377, col: 5, offset: 49655},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1377, col: 5, offset: 49655},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1378, col: 7, offset: 49758},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1378, col: 7, offset: 49758},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1378, col: 7, offset: 49758},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1378, col: 12, offset: 49763},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1382, col: 1, offset: 49935},
			expr: &choiceExpr{
				pos: position{line: 1382, col: 29, offset: 49963},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1382, col: 29, offset: 49963},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1382, col: 29, offset: 49963},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1382, col: 29, offset: 49963},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1382, col: 35, offset: 49969},
										expr: &ruleRefExpr{
											pos:  position{line: 1382, col: 36, offset: 49970},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1382, col: 55, offset: 49989},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1382, col: 55, offset: 49989},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1382, col: 59, offset: 49993},
											expr: &litMatcher{
												pos:        position{line: 1382, col: 60, offset: 49994},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1382, col: 65, offset: 49999},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1382, col: 75, offset: 50009},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1382, col: 109, offset: 50043},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1384, col: 5, offset: 50238},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1384, col: 5, offset: 50238},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1384, col: 5, offset: 50238},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1384, col: 11, offset: 50244},
										expr: &ruleRefExpr{
											pos:  position{line: 1384, col: 12, offset: 50245},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1384, col: 30, offset: 50263},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1384, col: 34, offset: 50267},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1384, col: 44, offset: 50277},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1384, col: 44, offset: 50277},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1384, col: 48, offset: 50281},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1384, col: 82, offset: 50315},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1388, col: 1, offset: 50533},
			expr: &seqExpr{
				pos: position{line: 1388, col: 37, offset: 50569},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1388, col: 37, offset: 50569},
						expr: &ruleRefExpr{
							pos:  position{line: 1388, col: 38, offset: 50570},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1388, col: 44, offset: 50576},
						expr: &ruleRefExpr{
							pos:  position{line: 1388, col: 44, offset: 50576},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1390, col: 1, offset: 50612},
			expr: &choiceExpr{
				pos: position{line: 1390, col: 37, offset: 50648},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1390, col: 37, offset: 50648},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1391, col: 11, offset: 50664},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1391, col: 11, offset: 50664},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1391, col: 19, offset: 50672},
								expr: &ruleRefExpr{
									pos:  position{line: 1391, col: 20, offset: 50673},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1392, col: 11, offset: 50692},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1393, col: 11, offset: 50728},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1394, col: 11, offset: 50752},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1394, col: 11, offset: 50752},
								expr: &ruleRefExpr{
									pos:  position{line: 1394, col: 11, offset: 50752},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1394, col: 18, offset: 50759},
								expr: &seqExpr{
									pos: position{line: 1394, col: 19, offset: 50760},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1394, col: 19, offset: 50760},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1394, col: 23, offset: 50764},
											expr: &litMatcher{
												pos:        position{line: 1394, col: 24, offset: 50765},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1395, col: 11, offset: 50894},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1396, col: 11, offset: 50914},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1397, col: 11, offset: 50936},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1398, col: 11, offset: 50958},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1399, col: 11, offset: 50983},
						name: "SuperscriptText",
					},
					&seqExpr{
						pos: position{line: 1400, col: 11, offset: 51010},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1400, col: 11, offset: 51010},
								expr: &litMatcher{
									pos:        position{line: 1400, col: 12, offset: 51011},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1400, col: 16, offset: 51015},
								name: "Symbol",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1401, col: 11, offset: 51033},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1402, col: 11, offset: 51055},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1403, col: 11, offset: 51079},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1404, col: 11, offset: 51096},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1405, col: 11, offset: 51126},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1406, col: 11, offset: 51159},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 11, offset: 51188},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1409, col: 1, offset: 51233},
			expr: &choiceExpr{
				pos: position{line: 1410, col: 5, offset: 51283},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1410, col: 5, offset: 51283},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1411, col: 7, offset: 51386},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1411, col: 7, offset: 51386},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1411, col: 7, offset: 51386},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1411, col: 11, offset: 51390},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1415, col: 1, offset: 51563},
			expr: &choiceExpr{
				pos: position{line: 1416, col: 5, offset: 51593},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1416, col: 5, offset: 51593},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1416, col: 5, offset: 51593},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1416, col: 5, offset: 51593},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1416, col: 18, offset: 51606},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1416, col: 40, offset: 51628},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1416, col: 45, offset: 51633},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1416, col: 55, offset: 51643},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1416, col: 89, offset: 51677},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1418, col: 9, offset: 51836},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1418, col: 9, offset: 51836},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1418, col: 9, offset: 51836},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1418, col: 22, offset: 51849},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1418, col: 44, offset: 51871},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1418, col: 49, offset: 51876},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1418, col: 59, offset: 51886},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1418, col: 93, offset: 51920},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1421, col: 9, offset: 52123},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1421, col: 9, offset: 52123},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1421, col: 9, offset: 52123},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1421, col: 22, offset: 52136},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1421, col: 44, offset: 52158},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1421, col: 48, offset: 52162},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1421, col: 58, offset: 52172},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1421, col: 92, offset: 52206},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1429, col: 1, offset: 52422},
			expr: &choiceExpr{
				pos: position{line: 1429, col: 15, offset: 52436},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1429, col: 15, offset: 52436},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1429, col: 39, offset: 52460},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1431, col: 1, offset: 52485},
			expr: &actionExpr{
				pos: position{line: 1431, col: 26, offset: 52510},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1431, col: 26, offset: 52510},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1431, col: 26, offset: 52510},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1431, col: 32, offset: 52516},
								expr: &ruleRefExpr{
									pos:  position{line: 1431, col: 33, offset: 52517},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1431, col: 51, offset: 52535},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1431, col: 56, offset: 52540},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1431, col: 66, offset: 52550},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1431, col: 97, offset: 52581},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1435, col: 1, offset: 52719},
			expr: &seqExpr{
				pos: position{line: 1435, col: 34, offset: 52752},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1435, col: 34, offset: 52752},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1435, col: 63, offset: 52781},
						expr: &seqExpr{
							pos: position{line: 1435, col: 64, offset: 52782},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1435, col: 64, offset: 52782},
									expr: &litMatcher{
										pos:        position{line: 1435, col: 66, offset: 52784},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1435, col: 73, offset: 52791},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1435, col: 73, offset: 52791},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1435, col: 81, offset: 52799},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1437, col: 1, offset: 52868},
			expr: &choiceExpr{
				pos: position{line: 1437, col: 33, offset: 52900},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1437, col: 33, offset: 52900},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1438, col: 11, offset: 52916},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1439, col: 11, offset: 52949},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1439, col: 11, offset: 52949},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1439, col: 19, offset: 52957},
								expr: &ruleRefExpr{
									pos:  position{line: 1439, col: 20, offset: 52958},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1440, col: 11, offset: 52977},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1441, col: 11, offset: 53001},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1442, col: 11, offset: 53021},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1443, col: 11, offset: 53043},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1444, col: 11, offset: 53068},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1445, col: 11, offset: 53093},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1446, col: 11, offset: 53120},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1447, col: 11, offset: 53138},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1448, col: 11, offset: 53160},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1449, col: 11, offset: 53183},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1450, col: 11, offset: 53199},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1451, col: 11, offset: 53228},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1452, col: 11, offset: 53257},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1454, col: 1, offset: 53299},
			expr: &choiceExpr{
				pos: position{line: 1455, col: 5, offset: 53346},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1455, col: 5, offset: 53346},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1456, col: 7, offset: 53446},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1456, col: 7, offset: 53446},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1456, col: 7, offset: 53446},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1456, col: 12, offset: 53451},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1460, col: 1, offset: 53620},
			expr: &choiceExpr{
				pos: position{line: 1460, col: 26, offset: 53645},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1460, col: 26, offset: 53645},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1460, col: 26, offset: 53645},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1460, col: 26, offset: 53645},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1460, col: 32, offset: 53651},
										expr: &ruleRefExpr{
											pos:  position{line: 1460, col: 33, offset: 53652},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1460, col: 52, offset: 53671},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1460, col: 52, offset: 53671},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1460, col: 56, offset: 53675},
											expr: &litMatcher{
												pos:        position{line: 1460, col: 57, offset: 53676},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1460, col: 62, offset: 53681},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1460, col: 72, offset: 53691},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1460, col: 103, offset: 53722},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1462, col: 5, offset: 53914},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1462, col: 5, offset: 53914},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1462, col: 5, offset: 53914},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1462, col: 11, offset: 53920},
										expr: &ruleRefExpr{
											pos:  position{line: 1462, col: 12, offset: 53921},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1462, col: 30, offset: 53939},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1462, col: 34, offset: 53943},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1462, col: 44, offset: 53953},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1462, col: 44, offset: 53953},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1462, col: 48, offset: 53957},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1462, col: 79, offset: 53988},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1466, col: 1, offset: 54201},
			expr: &seqExpr{
				pos: position{line: 1466, col: 34, offset: 54234},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1466, col: 34, offset: 54234},
						expr: &ruleRefExpr{
							pos:  position{line: 1466, col: 35, offset: 54235},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1466, col: 41, offset: 54241},
						expr: &ruleRefExpr{
							pos:  position{line: 1466, col: 41, offset: 54241},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1468, col: 1, offset: 54274},
			expr: &choiceExpr{
				pos: position{line: 1468, col: 33, offset: 54306},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1468, col: 33, offset: 54306},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1469, col: 11, offset: 54322},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1470, col: 11, offset: 54355},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1470, col: 11, offset: 54355},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1470, col: 19, offset: 54363},
								expr: &ruleRefExpr{
									pos:  position{line: 1470, col: 20, offset: 54364},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1471, col: 11, offset: 54383},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1472, col: 11, offset: 54407},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1472, col: 11, offset: 54407},
								expr: &ruleRefExpr{
									pos:  position{line: 1472, col: 11, offset: 54407},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1472, col: 18, offset: 54414},
								expr: &seqExpr{
									pos: position{line: 1472, col: 19, offset: 54415},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1472, col: 19, offset: 54415},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1472, col: 23, offset: 54419},
											expr: &litMatcher{
												pos:        position{line: 1472, col: 24, offset: 54420},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1473, col: 11, offset: 54437},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1474, col: 11, offset: 54457},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1475, col: 11, offset: 54479},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1476, col: 11, offset: 54504},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1477, col: 11, offset: 54529},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1478, col: 11, offset: 54556},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1479, col: 11, offset: 54574},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1480, col: 11, offset: 54596},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1481, col: 11, offset: 54619},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1482, col: 11, offset: 54635},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1483, col: 11, offset: 54664},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1484, col: 11, offset: 54697},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1485, col: 11, offset: 54726},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1487, col: 1, offset: 54768},
			expr: &choiceExpr{
				pos: position{line: 1488, col: 5, offset: 54815},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1488, col: 5, offset: 54815},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1489, col: 7, offset: 54913},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1489, col: 7, offset: 54913},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1489, col: 7, offset: 54913},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1489, col: 11, offset: 54917},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1493, col: 1, offset: 55084},
			expr: &choiceExpr{
				pos: position{line: 1494, col: 5, offset: 55110},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1494, col: 5, offset: 55110},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1494, col: 5, offset: 55110},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1494, col: 5, offset: 55110},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1494, col: 18, offset: 55123},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1494, col: 40, offset: 55145},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1494, col: 45, offset: 55150},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1494, col: 55, offset: 55160},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1494, col: 86, offset: 55191},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1496, col: 9, offset: 55350},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1496, col: 9, offset: 55350},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1496, col: 9, offset: 55350},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1496, col: 22, offset: 55363},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1496, col: 44, offset: 55385},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1496, col: 49, offset: 55390},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1496, col: 59, offset: 55400},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1496, col: 90, offset: 55431},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1499, col: 9, offset: 55634},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1499, col: 9, offset: 55634},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1499, col: 9, offset: 55634},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1499, col: 22, offset: 55647},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1499, col: 44, offset: 55669},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1499, col: 48, offset: 55673},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1499, col: 58, offset: 55683},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1499, col: 89, offset: 55714},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1504, col: 1, offset: 55869},
			expr: &actionExpr{
				pos: position{line: 1504, col: 18, offset: 55886},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1504, col: 18, offset: 55886},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1504, col: 18, offset: 55886},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1504, col: 24, offset: 55892},
								expr: &ruleRefExpr{
									pos:  position{line: 1504, col: 25, offset: 55893},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1504, col: 43, offset: 55911},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1504, col: 47, offset: 55915},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1504, col: 56, offset: 55924},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1504, col: 78, offset: 55946},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1508, col: 1, offset: 56046},
			expr: &choiceExpr{
				pos: position{line: 1508, col: 25, offset: 56070},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1508, col: 25, offset: 56070},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1508, col: 38, offset: 56083},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1510, col: 1, offset: 56104},
			expr: &actionExpr{
				pos: position{line: 1510, col: 21, offset: 56124},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1510, col: 21, offset: 56124},
					expr: &charClassMatcher{
						pos:        position{line: 1510, col: 21, offset: 56124},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1514, col: 1, offset: 56205},
			expr: &actionExpr{
				pos: position{line: 1514, col: 25, offset: 56229},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1514, col: 25, offset: 56229},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1514, col: 25, offset: 56229},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1514, col: 38, offset: 56242},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1514, col: 60, offset: 56264},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1514, col: 64, offset: 56268},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1514, col: 73, offset: 56277},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1514, col: 95, offset: 56299},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1518, col: 1, offset: 56432},
			expr: &actionExpr{
				pos: position{line: 1518, col: 20, offset: 56451},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1518, col: 20, offset: 56451},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1518, col: 20, offset: 56451},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1518, col: 26, offset: 56457},
								expr: &ruleRefExpr{
									pos:  position{line: 1518, col: 27, offset: 56458},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1518, col: 45, offset: 56476},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1518, col: 49, offset: 56480},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1518, col: 58, offset: 56489},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1518, col: 82, offset: 56513},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1522, col: 1, offset: 56615},
			expr: &choiceExpr{
				pos: position{line: 1522, col: 27, offset: 56641},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1522, col: 27, offset: 56641},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1522, col: 40, offset: 56654},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1524, col: 1, offset: 56677},
			expr: &actionExpr{
				pos: position{line: 1524, col: 23, offset: 56699},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1524, col: 23, offset: 56699},
					expr: &charClassMatcher{
						pos:        position{line: 1524, col: 23, offset: 56699},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1528, col: 1, offset: 56780},
			expr: &actionExpr{
				pos: position{line: 1528, col: 27, offset: 56806},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1528, col: 27, offset: 56806},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1528, col: 27, offset: 56806},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1528, col: 40, offset: 56819},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1528, col: 62, offset: 56841},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1528, col: 66, offset: 56845},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1528, col: 75, offset: 56854},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1528, col: 99, offset: 56878},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1535, col: 1, offset: 57127},
			expr: &choiceExpr{
				pos: position{line: 1535, col: 22, offset: 57148},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1535, col: 22, offset: 57148},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1535, col: 46, offset: 57172},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1535, col: 70, offset: 57196},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1537, col: 1, offset: 57216},
			expr: &litMatcher{
				pos:        position{line: 1537, col: 32, offset: 57247},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1539, col: 1, offset: 57254},
			expr: &actionExpr{
				pos: position{line: 1539, col: 26, offset: 57279},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1539, col: 26, offset: 57279},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1539, col: 26, offset: 57279},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1539, col: 54, offset: 57307},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1539, col: 63, offset: 57316},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1539, col: 93, offset: 57346},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1539, col: 121, offset: 57374},
							expr: &ruleRefExpr{
								pos:  position{line: 1539, col: 122, offset: 57375},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1543, col: 1, offset: 57484},
			expr: &choiceExpr{
				pos: position{line: 1543, col: 33, offset: 57516},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1543, col: 34, offset: 57517},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1543, col: 34, offset: 57517},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1543, col: 35, offset: 57518},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1543, col: 35, offset: 57518},
											expr: &ruleRefExpr{
												pos:  position{line: 1543, col: 36, offset: 57519},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1543, col: 64, offset: 57547},
											expr: &ruleRefExpr{
												pos:  position{line: 1543, col: 65, offset: 57548},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1543, col: 71, offset: 57554},
											expr: &ruleRefExpr{
												pos:  position{line: 1543, col: 72, offset: 57555},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1543, col: 80, offset: 57563,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1543, col: 83, offset: 57566},
									expr: &seqExpr{
										pos: position{line: 1543, col: 84, offset: 57567},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1543, col: 84, offset: 57567},
												expr: &seqExpr{
													pos: position{line: 1543, col: 86, offset: 57569},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1543, col: 86, offset: 57569},
															expr: &ruleRefExpr{
																pos:  position{line: 1543, col: 86, offset: 57569},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1543, col: 93, offset: 57576},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1543, col: 122, offset: 57605},
												expr: &ruleRefExpr{
													pos:  position{line: 1543, col: 123, offset: 57606},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1543, col: 151, offset: 57634},
												expr: &ruleRefExpr{
													pos:  position{line: 1543, col: 152, offset: 57635},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1543, col: 160, offset: 57643,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1545, col: 7, offset: 57787},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1545, col: 8, offset: 57788},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1545, col: 8, offset: 57788},
									expr: &ruleRefExpr{
										pos:  position{line: 1545, col: 9, offset: 57789},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1545, col: 15, offset: 57795},
									expr: &ruleRefExpr{
										pos:  position{line: 1545, col: 16, offset: 57796},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1545, col: 24, offset: 57804},
									expr: &ruleRefExpr{
										pos:  position{line: 1545, col: 25, offset: 57805},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1545, col: 53, offset: 57833,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1549, col: 1, offset: 57919},
			expr: &litMatcher{
				pos:        position{line: 1549, col: 32, offset: 57950},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1551, col: 1, offset: 57959},
			expr: &actionExpr{
				pos: position{line: 1551, col: 26, offset: 57984},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1551, col: 26, offset: 57984},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1551, col: 26, offset: 57984},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1551, col: 54, offset: 58012},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1551, col: 63, offset: 58021},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1551, col: 93, offset: 58051},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1551, col: 121, offset: 58079},
							expr: &ruleRefExpr{
								pos:  position{line: 1551, col: 122, offset: 58080},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1555, col: 1, offset: 58189},
			expr: &choiceExpr{
				pos: position{line: 1555, col: 33, offset: 58221},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1555, col: 34, offset: 58222},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1555, col: 34, offset: 58222},
							expr: &seqExpr{
								pos: position{line: 1555, col: 35, offset: 58223},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1555, col: 35, offset: 58223},
										expr: &ruleRefExpr{
											pos:  position{line: 1555, col: 36, offset: 58224},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1555, col: 64, offset: 58252,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1557, col: 7, offset: 58419},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1557, col: 7, offset: 58419},
							expr: &seqExpr{
								pos: position{line: 1557, col: 8, offset: 58420},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1557, col: 8, offset: 58420},
										expr: &ruleRefExpr{
											pos:  position{line: 1557, col: 9, offset: 58421},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1557, col: 15, offset: 58427},
										expr: &ruleRefExpr{
											pos:  position{line: 1557, col: 16, offset: 58428},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1557, col: 24, offset: 58436},
										expr: &ruleRefExpr{
											pos:  position{line: 1557, col: 25, offset: 58437},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1557, col: 53, offset: 58465,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1561, col: 1, offset: 58552},
			expr: &choiceExpr{
				pos: position{line: 1561, col: 21, offset: 58572},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1561, col: 21, offset: 58572},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1561, col: 21, offset: 58572},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1561, col: 21, offset: 58572},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1561, col: 30, offset: 58581},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1561, col: 38, offset: 58589},
										expr: &ruleRefExpr{
											pos:  position{line: 1561, col: 39, offset: 58590},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1561, col: 67, offset: 58618},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1563, col: 5, offset: 58716},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1563, col: 5, offset: 58716},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1563, col: 5, offset: 58716},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1563, col: 15, offset: 58726},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1563, col: 23, offset: 58734},
										expr: &choiceExpr{
											pos: position{line: 1563, col: 24, offset: 58735},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1563, col: 24, offset: 58735},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1563, col: 37, offset: 58748},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1563, col: 65, offset: 58776},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1567, col: 1, offset: 58876},
			expr: &actionExpr{
				pos: position{line: 1567, col: 30, offset: 58905},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1567, col: 30, offset: 58905},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1574, col: 1, offset: 59085},
			expr: &choiceExpr{
				pos: position{line: 1574, col: 19, offset: 59103},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1574, col: 19, offset: 59103},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1574, col: 44, offset: 59128},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1576, col: 1, offset: 59155},
			expr: &choiceExpr{
				pos: position{line: 1576, col: 27, offset: 59181},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1576, col: 27, offset: 59181},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1576, col: 27, offset: 59181},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1576, col: 27, offset: 59181},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1576, col: 32, offset: 59186},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1576, col: 36, offset: 59190},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1576, col: 40, offset: 59194},
									expr: &ruleRefExpr{
										pos:  position{line: 1576, col: 40, offset: 59194},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1576, col: 47, offset: 59201},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1576, col: 51, offset: 59205},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1576, col: 58, offset: 59212},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1576, col: 79, offset: 59233},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1578, col: 5, offset: 59318},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1578, col: 5, offset: 59318},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1578, col: 5, offset: 59318},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1578, col: 10, offset: 59323},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1578, col: 14, offset: 59327},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1578, col: 18, offset: 59331},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1582, col: 1, offset: 59407},
			expr: &actionExpr{
				pos: position{line: 1582, col: 27, offset: 59433},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1582, col: 27, offset: 59433},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1582, col: 27, offset: 59433},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1582, col: 35, offset: 59441},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1582, col: 40, offset: 59446},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1582, col: 54, offset: 59460},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1582, col: 72, offset: 59478},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1586, col: 1, offset: 59605},
			expr: &ruleRefExpr{
				pos:  position{line: 1586, col: 24, offset: 59628},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1591, col: 1, offset: 59755},
			expr: &choiceExpr{
				pos: position{line: 1591, col: 9, offset: 59763},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1591, col: 9, offset: 59763},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1591, col: 24, offset: 59778},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1594, col: 1, offset: 59862},
			expr: &actionExpr{
				pos: position{line: 1594, col: 17, offset: 59878},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1594, col: 17, offset: 59878},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1594, col: 17, offset: 59878},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1594, col: 25, offset: 59886},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1594, col: 30, offset: 59891},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1594, col: 40, offset: 59901},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1594, col: 58, offset: 59919},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1598, col: 1, offset: 60034},
			expr: &actionExpr{
				pos: position{line: 1598, col: 17, offset: 60050},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1598, col: 17, offset: 60050},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1598, col: 17, offset: 60050},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1598, col: 22, offset: 60055},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1598, col: 42, offset: 60075},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1598, col: 59, offset: 60092},
								expr: &ruleRefExpr{
									pos:  position{line: 1598, col: 60, offset: 60093},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1602, col: 1, offset: 60190},
			expr: &actionExpr{
				pos: position{line: 1602, col: 19, offset: 60208},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1602, col: 19, offset: 60208},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1602, col: 19, offset: 60208},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1602, col: 23, offset: 60212},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1602, col: 33, offset: 60222},
								expr: &ruleRefExpr{
									pos:  position{line: 1602, col: 34, offset: 60223},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1603, col: 5, offset: 60256},
							expr: &ruleRefExpr{
								pos:  position{line: 1603, col: 5, offset: 60256},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1603, col: 12, offset: 60263},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1603, col: 23, offset: 60274},
								expr: &ruleRefExpr{
									pos:  position{line: 1603, col: 24, offset: 60275},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1603, col: 43, offset: 60294},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1607, col: 1, offset: 60415},
			expr: &actionExpr{
				pos: position{line: 1607, col: 30, offset: 60444},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1607, col: 30, offset: 60444},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1609, col: 5, offset: 60497},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1609, col: 6, offset: 60498},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1609, col: 6, offset: 60498},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1609, col: 6, offset: 60498},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1609, col: 11, offset: 60503},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1609, col: 20, offset: 60512},
												expr: &choiceExpr{
													pos: position{line: 1609, col: 21, offset: 60513},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1609, col: 21, offset: 60513},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1609, col: 36, offset: 60528},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1609, col: 49, offset: 60541},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1609, col: 71, offset: 60563},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1609, col: 76, offset: 60568},
											expr: &notExpr{
												pos: position{line: 1609, col: 78, offset: 60570},
												expr: &litMatcher{
													pos:        position{line: 1609, col: 79, offset: 60571},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1609, col: 84, offset: 60576},
											expr: &litMatcher{
												pos:        position{line: 1609, col: 84, offset: 60576},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1613, col: 6, offset: 60707},
								run: (*parser).callonFirstLinkAttributeElement19,
								expr: &seqExpr{
									pos: position{line: 1613, col: 6, offset: 60707},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1613, col: 6, offset: 60707},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1613, col: 15, offset: 60716},
												expr: &choiceExpr{
													pos: position{line: 1613, col: 16, offset: 60717},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1613, col: 16, offset: 60717},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1613, col: 31, offset: 60732},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1613, col: 44, offset: 60745},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1613, col: 68, offset: 60769},
											expr: &notExpr{
												pos: position{line: 1613, col: 70, offset: 60771},
												expr: &litMatcher{
													pos:        position{line: 1613, col: 71, offset: 60772},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1613, col: 76, offset: 60777},
											expr: &litMatcher{
												pos:        position{line: 1613, col: 76, offset: 60777},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1619, col: 1, offset: 60897},
			expr: &actionExpr{
				pos: position{line: 1619, col: 18, offset: 60914},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1619, col: 18, offset: 60914},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1623, col: 1, offset: 61004},
			expr: &actionExpr{
				pos: position{line: 1623, col: 24, offset: 61027},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1623, col: 24, offset: 61027},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1627, col: 1, offset: 61124},
			expr: &actionExpr{
				pos: position{line: 1627, col: 26, offset: 61149},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1627, col: 26, offset: 61149},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1632, col: 1, offset: 61310},
			expr: &actionExpr{
				pos: position{line: 1633, col: 5, offset: 61330},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1633, col: 5, offset: 61330},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1633, col: 5, offset: 61330},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1633, col: 14, offset: 61339},
								expr: &choiceExpr{
									pos: position{line: 1633, col: 15, offset: 61340},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1633, col: 15, offset: 61340},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 1634, col: 11, offset: 61356},
											name: "Symbol",
										},
										&oneOrMoreExpr{
											pos: position{line: 1635, col: 11, offset: 61374},
											expr: &ruleRefExpr{
												pos:  position{line: 1635, col: 11, offset: 61374},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1636, col: 11, offset: 61393},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1637, col: 11, offset: 61418},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1638, col: 11, offset: 61441},
											name: "ImpliedApostrophe",
										},
										&ruleRefExpr{
											pos:  position{line: 1639, col: 11, offset: 61470},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1640, col: 11, offset: 61489},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1640, col: 21, offset: 61499},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1644, col: 1, offset: 61573},
			expr: &choiceExpr{
				pos: position{line: 1644, col: 17, offset: 61589},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1644, col: 17, offset: 61589},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1644, col: 40, offset: 61612},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1647, col: 1, offset: 61743},
			expr: &actionExpr{
				pos: position{line: 1647, col: 25, offset: 61767},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1647, col: 25, offset: 61767},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1647, col: 25, offset: 61767},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1647, col: 33, offset: 61775},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1647, col: 38, offset: 61780},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1647, col: 38, offset: 61780},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1647, col: 57, offset: 61799},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1647, col: 79, offset: 61821},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1647, col: 97, offset: 61839},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1651, col: 1, offset: 61954},
			expr: &actionExpr{
				pos: position{line: 1651, col: 25, offset: 61978},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1651, col: 25, offset: 61978},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1651, col: 25, offset: 61978},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1651, col: 30, offset: 61983},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1651, col: 48, offset: 62001},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1651, col: 65, offset: 62018},
								expr: &ruleRefExpr{
									pos:  position{line: 1651, col: 66, offset: 62019},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1658, col: 1, offset: 62221},
			expr: &actionExpr{
				pos: position{line: 1658, col: 15, offset: 62235},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1658, col: 15, offset: 62235},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1658, col: 15, offset: 62235},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1658, col: 26, offset: 62246},
								expr: &ruleRefExpr{
									pos:  position{line: 1658, col: 27, offset: 62247},
									name: "BlockImageAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1658, col: 45, offset: 62265},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1658, col: 55, offset: 62275},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1658, col: 61, offset: 62281},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1658, col: 71, offset: 62291},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1658, col: 84, offset: 62304},
								name: "InlineImageAttrs",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1658, col: 102, offset: 62322},
							expr: &ruleRefExpr{
								pos:  position{line: 1658, col: 102, offset: 62322},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1658, col: 109, offset: 62329},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1662, col: 1, offset: 62440},
			expr: &actionExpr{
				pos: position{line: 1662, col: 16, offset: 62455},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1662, col: 16, offset: 62455},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1662, col: 16, offset: 62455},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1662, col: 25, offset: 62464},
							expr: &litMatcher{
								pos:        position{line: 1662, col: 26, offset: 62465},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1662, col: 30, offset: 62469},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1662, col: 36, offset: 62475},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1662, col: 46, offset: 62485},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1662, col: 59, offset: 62498},
								name: "InlineImageAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttrs",
			pos:  position{line: 1666, col: 1, offset: 62612},
			expr: &actionExpr{
				pos: position{line: 1666, col: 21, offset: 62632},
				run: (*parser).callonInlineImageAttrs1,
				expr: &seqExpr{
					pos: position{line: 1666, col: 21, offset: 62632},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1666, col: 21, offset: 62632},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1666, col: 25, offset: 62636},
							label: "alt",
							expr: &ruleRefExpr{
								pos:  position{line: 1666, col: 29, offset: 62640},
								name: "ImageAltInline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1666, col: 44, offset: 62655},
							label: "w",
							expr: &ruleRefExpr{
								pos:  position{line: 1666, col: 46, offset: 62657},
								name: "ImageWidth",
							},
						},
						&labeledExpr{
							pos:   position{line: 1666, col: 57, offset: 62668},
							label: "h",
							expr: &ruleRefExpr{
								pos:  position{line: 1666, col: 59, offset: 62670},
								name: "ImageHeight",
							},
						},
						&labeledExpr{
							pos:   position{line: 1666, col: 71, offset: 62682},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1666, col: 74, offset: 62685},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1666, col: 85, offset: 62696},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImageAttrs",
			pos:  position{line: 1670, col: 1, offset: 62762},
			expr: &choiceExpr{
				pos: position{line: 1670, col: 20, offset: 62781},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1670, col: 20, offset: 62781},
						name: "ImageAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 1670, col: 36, offset: 62797},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 1670, col: 51, offset: 62812},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1672, col: 1, offset: 62825},
			expr: &actionExpr{
				pos: position{line: 1672, col: 18, offset: 62842},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1672, col: 18, offset: 62842},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1672, col: 18, offset: 62842},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1672, col: 22, offset: 62846},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1672, col: 29, offset: 62853},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1672, col: 29, offset: 62853},
										expr: &ruleRefExpr{
											pos:  position{line: 1672, col: 29, offset: 62853},
											name: "ImageAltAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1672, col: 43, offset: 62867},
										expr: &ruleRefExpr{
											pos:  position{line: 1672, col: 43, offset: 62867},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1672, col: 58, offset: 62882},
										expr: &ruleRefExpr{
											pos:  position{line: 1672, col: 58, offset: 62882},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1672, col: 74, offset: 62898},
										expr: &ruleRefExpr{
											pos:  position{line: 1672, col: 74, offset: 62898},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1672, col: 91, offset: 62915},
										expr: &ruleRefExpr{
											pos:  position{line: 1672, col: 91, offset: 62915},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1672, col: 103, offset: 62927},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1672, col: 107, offset: 62931},
							expr: &ruleRefExpr{
								pos:  position{line: 1672, col: 107, offset: 62931},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1672, col: 114, offset: 62938},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageAltInline",
			pos:  position{line: 1676, col: 1, offset: 62996},
			expr: &actionExpr{
				pos: position{line: 1676, col: 19, offset: 63014},
				run: (*parser).callonImageAltInline1,
				expr: &labeledExpr{
					pos:   position{line: 1676, col: 19, offset: 63014},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1676, col: 25, offset: 63020},
						expr: &ruleRefExpr{
							pos:  position{line: 1676, col: 25, offset: 63020},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1680, col: 1, offset: 63103},
			expr: &actionExpr{
				pos: position{line: 1680, col: 15, offset: 63117},
				run: (*parser).callonImageWidth1,
				expr: &seqExpr{
					pos: position{line: 1680, col: 15, offset: 63117},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1680, col: 15, offset: 63117},
							expr: &litMatcher{
								pos:        position{line: 1680, col: 15, offset: 63117},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1680, col: 20, offset: 63122},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1680, col: 26, offset: 63128},
								expr: &ruleRefExpr{
									pos:  position{line: 1680, col: 26, offset: 63128},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1684, col: 1, offset: 63208},
			expr: &actionExpr{
				pos: position{line: 1684, col: 16, offset: 63223},
				run: (*parser).callonImageHeight1,
				expr: &seqExpr{
					pos: position{line: 1684, col: 16, offset: 63223},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1684, col: 16, offset: 63223},
							expr: &litMatcher{
								pos:        position{line: 1684, col: 16, offset: 63223},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1684, col: 21, offset: 63228},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1684, col: 27, offset: 63234},
								expr: &ruleRefExpr{
									pos:  position{line: 1684, col: 27, offset: 63234},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttr",
			pos:  position{line: 1688, col: 1, offset: 63320},
			expr: &actionExpr{
				pos: position{line: 1688, col: 17, offset: 63336},
				run: (*parser).callonImageAltAttr1,
				expr: &seqExpr{
					pos: position{line: 1688, col: 17, offset: 63336},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1688, col: 17, offset: 63336},
							expr: &ruleRefExpr{
								pos:  position{line: 1688, col: 17, offset: 63336},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1688, col: 24, offset: 63343},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1688, col: 30, offset: 63349},
								name: "PositionalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1688, col: 46, offset: 63365},
							expr: &ruleRefExpr{
								pos:  position{line: 1688, col: 46, offset: 63365},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttr",
			pos:  position{line: 1692, col: 1, offset: 63454},
			expr: &actionExpr{
				pos: position{line: 1692, col: 19, offset: 63472},
				run: (*parser).callonImageWidthAttr1,
				expr: &seqExpr{
					pos: position{line: 1692, col: 19, offset: 63472},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1692, col: 19, offset: 63472},
							expr: &ruleRefExpr{
								pos:  position{line: 1692, col: 19, offset: 63472},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1692, col: 26, offset: 63479},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1692, col: 30, offset: 63483},
							expr: &ruleRefExpr{
								pos:  position{line: 1692, col: 30, offset: 63483},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1692, col: 37, offset: 63490},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1692, col: 43, offset: 63496},
								expr: &ruleRefExpr{
									pos:  position{line: 1692, col: 43, offset: 63496},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttr",
			pos:  position{line: 1699, col: 1, offset: 63647},
			expr: &actionExpr{
				pos: position{line: 1699, col: 20, offset: 63666},
				run: (*parser).callonImageHeightAttr1,
				expr: &seqExpr{
					pos: position{line: 1699, col: 20, offset: 63666},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1699, col: 20, offset: 63666},
							expr: &ruleRefExpr{
								pos:  position{line: 1699, col: 20, offset: 63666},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1699, col: 27, offset: 63673},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1699, col: 31, offset: 63677},
							expr: &ruleRefExpr{
								pos:  position{line: 1699, col: 31, offset: 63677},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1699, col: 38, offset: 63684},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1699, col: 44, offset: 63690},
								expr: &ruleRefExpr{
									pos:  position{line: 1699, col: 44, offset: 63690},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1710, col: 1, offset: 64044},
			expr: &actionExpr{
				pos: position{line: 1710, col: 15, offset: 64058},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1710, col: 15, offset: 64058},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1710, col: 15, offset: 64058},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1710, col: 23, offset: 64066},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1710, col: 29, offset: 64072},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1710, col: 29, offset: 64072},
									expr: &charClassMatcher{
										pos:        position{line: 1710, col: 29, offset: 64072},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1710, col: 73, offset: 64116},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1710, col: 80, offset: 64123},
								name: "IconAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttrs",
			pos:  position{line: 1714, col: 1, offset: 64209},
			expr: &actionExpr{
				pos: position{line: 1714, col: 14, offset: 64222},
				run: (*parser).callonIconAttrs1,
				expr: &seqExpr{
					pos: position{line: 1714, col: 14, offset: 64222},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1714, col: 14, offset: 64222},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1714, col: 18, offset: 64226},
							label: "size",
							expr: &ruleRefExpr{
								pos:  position{line: 1714, col: 23, offset: 64231},
								name: "IconSize",
							},
						},
						&labeledExpr{
							pos:   position{line: 1714, col: 32, offset: 64240},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1714, col: 35, offset: 64243},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1714, col: 46, offset: 64254},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1718, col: 1, offset: 64315},
			expr: &actionExpr{
				pos: position{line: 1718, col: 13, offset: 64327},
				run: (*parser).callonIconSize1,
				expr: &labeledExpr{
					pos:   position{line: 1718, col: 13, offset: 64327},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1718, col: 19, offset: 64333},
						expr: &ruleRefExpr{
							pos:  position{line: 1718, col: 19, offset: 64333},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1725, col: 1, offset: 64616},
			expr: &choiceExpr{
				pos: position{line: 1725, col: 19, offset: 64634},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1725, col: 19, offset: 64634},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1725, col: 19, offset: 64634},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1725, col: 19, offset: 64634},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1725, col: 32, offset: 64647},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1725, col: 41, offset: 64656},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1725, col: 58, offset: 64673},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1727, col: 5, offset: 64743},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1727, col: 5, offset: 64743},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1727, col: 5, offset: 64743},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1727, col: 17, offset: 64755},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1727, col: 22, offset: 64760},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1727, col: 35, offset: 64773},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1727, col: 39, offset: 64777},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1727, col: 47, offset: 64785},
										expr: &ruleRefExpr{
											pos:  position{line: 1727, col: 48, offset: 64786},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1727, col: 66, offset: 64804},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1731, col: 1, offset: 64869},
			expr: &ruleRefExpr{
				pos:  position{line: 1731, col: 16, offset: 64884},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1733, col: 1, offset: 64897},
			expr: &actionExpr{
				pos: position{line: 1733, col: 20, offset: 64916},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1733, col: 20, offset: 64916},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1733, col: 29, offset: 64925},
						expr: &seqExpr{
							pos: position{line: 1733, col: 30, offset: 64926},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1733, col: 30, offset: 64926},
									expr: &litMatcher{
										pos:        position{line: 1733, col: 31, offset: 64927},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1733, col: 35, offset: 64931},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1740, col: 1, offset: 65262},
			expr: &actionExpr{
				pos: position{line: 1740, col: 19, offset: 65280},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1740, col: 19, offset: 65280},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1740, col: 19, offset: 65280},
							expr: &ruleRefExpr{
								pos:  position{line: 1740, col: 20, offset: 65281},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1741, col: 5, offset: 65370},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1741, col: 12, offset: 65377},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1741, col: 12, offset: 65377},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1742, col: 11, offset: 65401},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1743, col: 11, offset: 65426},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1744, col: 11, offset: 65451},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1745, col: 11, offset: 65473},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1746, col: 11, offset: 65497},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1747, col: 11, offset: 65526},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1748, col: 11, offset: 65554},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1749, col: 11, offset: 65571},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1753, col: 1, offset: 65616},
			expr: &choiceExpr{
				pos: position{line: 1753, col: 19, offset: 65634},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1753, col: 19, offset: 65634},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1753, col: 19, offset: 65634},
								expr: &ruleRefExpr{
									pos:  position{line: 1753, col: 21, offset: 65636},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1753, col: 31, offset: 65646},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1754, col: 19, offset: 65718},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1755, col: 19, offset: 65759},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1756, col: 19, offset: 65801},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1757, col: 19, offset: 65843},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1758, col: 19, offset: 65885},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1759, col: 19, offset: 65924},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1760, col: 19, offset: 65965},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "DelimitedBlockRawLine",
			pos:  position{line: 1762, col: 1, offset: 65994},
			expr: &choiceExpr{
				pos: position{line: 1762, col: 26, offset: 66019},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1762, col: 26, offset: 66019},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1762, col: 42, offset: 66035},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 1764, col: 1, offset: 66046},
			expr: &actionExpr{
				pos: position{line: 1764, col: 12, offset: 66057},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 1764, col: 12, offset: 66057},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1764, col: 12, offset: 66057},
							expr: &ruleRefExpr{
								pos:  position{line: 1764, col: 13, offset: 66058},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1764, col: 17, offset: 66062},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1764, col: 26, offset: 66071},
								name: "RawLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1764, col: 42, offset: 66087},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawLineContent",
			pos:  position{line: 1768, col: 1, offset: 66171},
			expr: &actionExpr{
				pos: position{line: 1768, col: 19, offset: 66189},
				run: (*parser).callonRawLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1768, col: 19, offset: 66189},
					expr: &charClassMatcher{
						pos:        position{line: 1768, col: 19, offset: 66189},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1772, col: 1, offset: 66240},
			expr: &ruleRefExpr{
				pos:  position{line: 1772, col: 20, offset: 66259},
				name: "VerbatimLine",
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1774, col: 1, offset: 66275},
			expr: &actionExpr{
				pos: position{line: 1774, col: 17, offset: 66291},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1774, col: 17, offset: 66291},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1774, col: 17, offset: 66291},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1774, col: 26, offset: 66300},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1774, col: 47, offset: 66321},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1774, col: 56, offset: 66330},
								expr: &ruleRefExpr{
									pos:  position{line: 1774, col: 57, offset: 66331},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1774, col: 68, offset: 66342},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1778, col: 1, offset: 66416},
			expr: &actionExpr{
				pos: position{line: 1778, col: 24, offset: 66439},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1778, col: 24, offset: 66439},
					expr: &seqExpr{
						pos: position{line: 1778, col: 25, offset: 66440},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1778, col: 25, offset: 66440},
								expr: &ruleRefExpr{
									pos:  position{line: 1778, col: 26, offset: 66441},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1778, col: 36, offset: 66451},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1778, col: 36, offset: 66451},
										expr: &ruleRefExpr{
											pos:  position{line: 1778, col: 36, offset: 66451},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1778, col: 45, offset: 66460},
										expr: &charClassMatcher{
											pos:        position{line: 1778, col: 45, offset: 66460},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1782, col: 1, offset: 66514},
			expr: &oneOrMoreExpr{
				pos: position{line: 1782, col: 13, offset: 66526},
				expr: &ruleRefExpr{
					pos:  position{line: 1782, col: 13, offset: 66526},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1784, col: 1, offset: 66538},
			expr: &actionExpr{
				pos: position{line: 1784, col: 12, offset: 66549},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1784, col: 12, offset: 66549},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1784, col: 12, offset: 66549},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1784, col: 16, offset: 66553},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1784, col: 21, offset: 66558},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1784, col: 21, offset: 66558},
									expr: &charClassMatcher{
										pos:        position{line: 1784, col: 21, offset: 66558},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1784, col: 69, offset: 66606},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1784, col: 73, offset: 66610},
							expr: &ruleRefExpr{
								pos:  position{line: 1784, col: 73, offset: 66610},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1784, col: 80, offset: 66617},
							expr: &choiceExpr{
								pos: position{line: 1784, col: 82, offset: 66619},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1784, col: 82, offset: 66619},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1784, col: 88, offset: 66625},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1788, col: 1, offset: 66682},
			expr: &actionExpr{
				pos: position{line: 1788, col: 20, offset: 66701},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1788, col: 20, offset: 66701},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1788, col: 20, offset: 66701},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1788, col: 25, offset: 66706},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1788, col: 48, offset: 66729},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1788, col: 61, offset: 66742},
								expr: &ruleRefExpr{
									pos:  position{line: 1788, col: 61, offset: 66742},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1792, col: 1, offset: 66843},
			expr: &actionExpr{
				pos: position{line: 1792, col: 26, offset: 66868},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1792, col: 26, offset: 66868},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1792, col: 26, offset: 66868},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1792, col: 30, offset: 66872},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1792, col: 35, offset: 66877},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1792, col: 35, offset: 66877},
									expr: &charClassMatcher{
										pos:        position{line: 1792, col: 35, offset: 66877},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1792, col: 83, offset: 66925},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1792, col: 87, offset: 66929},
							expr: &ruleRefExpr{
								pos:  position{line: 1792, col: 87, offset: 66929},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1799, col: 1, offset: 67163},
			expr: &seqExpr{
				pos: position{line: 1799, col: 25, offset: 67187},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1799, col: 25, offset: 67187},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1799, col: 31, offset: 67193},
						expr: &ruleRefExpr{
							pos:  position{line: 1799, col: 31, offset: 67193},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1799, col: 38, offset: 67200},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1801, col: 1, offset: 67262},
			expr: &seqExpr{
				pos: position{line: 1801, col: 30, offset: 67291},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1801, col: 30, offset: 67291},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1801, col: 36, offset: 67297},
						expr: &ruleRefExpr{
							pos:  position{line: 1801, col: 36, offset: 67297},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1801, col: 43, offset: 67304},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1803, col: 1, offset: 67311},
			expr: &choiceExpr{
				pos: position{line: 1803, col: 28, offset: 67338},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1803, col: 29, offset: 67339},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1803, col: 29, offset: 67339},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1803, col: 35, offset: 67345},
								expr: &ruleRefExpr{
									pos:  position{line: 1803, col: 35, offset: 67345},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1803, col: 42, offset: 67352},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1803, col: 49, offset: 67359},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1805, col: 1, offset: 67366},
			expr: &actionExpr{
				pos: position{line: 1805, col: 16, offset: 67381},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1805, col: 16, offset: 67381},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1805, col: 16, offset: 67381},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1805, col: 27, offset: 67392},
								expr: &ruleRefExpr{
									pos:  position{line: 1805, col: 28, offset: 67393},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1805, col: 41, offset: 67406},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1805, col: 67, offset: 67432},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1805, col: 76, offset: 67441},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1805, col: 99, offset: 67464},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1809, col: 1, offset: 67583},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1809, col: 26, offset: 67608},
				expr: &actionExpr{
					pos: position{line: 1809, col: 27, offset: 67609},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1809, col: 27, offset: 67609},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1809, col: 27, offset: 67609},
								expr: &ruleRefExpr{
									pos:  position{line: 1809, col: 28, offset: 67610},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1809, col: 52, offset: 67634},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1809, col: 58, offset: 67640},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1816, col: 1, offset: 67987},
			expr: &seqExpr{
				pos: position{line: 1816, col: 26, offset: 68012},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1816, col: 26, offset: 68012},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1816, col: 33, offset: 68019},
						expr: &ruleRefExpr{
							pos:  position{line: 1816, col: 33, offset: 68019},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1816, col: 40, offset: 68026},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1818, col: 1, offset: 68033},
			expr: &seqExpr{
				pos: position{line: 1818, col: 31, offset: 68063},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1818, col: 31, offset: 68063},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1818, col: 38, offset: 68070},
						expr: &ruleRefExpr{
							pos:  position{line: 1818, col: 38, offset: 68070},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1818, col: 45, offset: 68077},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1820, col: 1, offset: 68084},
			expr: &choiceExpr{
				pos: position{line: 1820, col: 29, offset: 68112},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1820, col: 30, offset: 68113},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1820, col: 30, offset: 68113},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1820, col: 37, offset: 68120},
								expr: &ruleRefExpr{
									pos:  position{line: 1820, col: 37, offset: 68120},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1820, col: 44, offset: 68127},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1820, col: 51, offset: 68134},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1822, col: 1, offset: 68141},
			expr: &actionExpr{
				pos: position{line: 1822, col: 17, offset: 68157},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1822, col: 17, offset: 68157},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1822, col: 17, offset: 68157},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1822, col: 28, offset: 68168},
								expr: &ruleRefExpr{
									pos:  position{line: 1822, col: 29, offset: 68169},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1822, col: 42, offset: 68182},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1822, col: 69, offset: 68209},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1822, col: 78, offset: 68218},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1822, col: 102, offset: 68242},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1826, col: 1, offset: 68363},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1826, col: 27, offset: 68389},
				expr: &actionExpr{
					pos: position{line: 1826, col: 28, offset: 68390},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1826, col: 28, offset: 68390},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1826, col: 28, offset: 68390},
								expr: &ruleRefExpr{
									pos:  position{line: 1826, col: 29, offset: 68391},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1826, col: 54, offset: 68416},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1826, col: 60, offset: 68422},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1833, col: 1, offset: 68769},
			expr: &seqExpr{
				pos: position{line: 1833, col: 26, offset: 68794},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1833, col: 26, offset: 68794},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1833, col: 33, offset: 68801},
						expr: &ruleRefExpr{
							pos:  position{line: 1833, col: 33, offset: 68801},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1833, col: 40, offset: 68808},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1835, col: 1, offset: 68815},
			expr: &seqExpr{
				pos: position{line: 1835, col: 31, offset: 68845},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1835, col: 31, offset: 68845},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1835, col: 38, offset: 68852},
						expr: &ruleRefExpr{
							pos:  position{line: 1835, col: 38, offset: 68852},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1835, col: 45, offset: 68859},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1837, col: 1, offset: 68866},
			expr: &choiceExpr{
				pos: position{line: 1837, col: 29, offset: 68894},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1837, col: 30, offset: 68895},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1837, col: 30, offset: 68895},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1837, col: 37, offset: 68902},
								expr: &ruleRefExpr{
									pos:  position{line: 1837, col: 37, offset: 68902},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1837, col: 44, offset: 68909},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1837, col: 51, offset: 68916},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1839, col: 1, offset: 68923},
			expr: &actionExpr{
				pos: position{line: 1839, col: 17, offset: 68939},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1839, col: 17, offset: 68939},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1839, col: 17, offset: 68939},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1839, col: 28, offset: 68950},
								expr: &ruleRefExpr{
									pos:  position{line: 1839, col: 29, offset: 68951},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1839, col: 42, offset: 68964},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1839, col: 69, offset: 68991},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1839, col: 78, offset: 69000},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1839, col: 102, offset: 69024},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1843, col: 1, offset: 69145},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1843, col: 27, offset: 69171},
				expr: &actionExpr{
					pos: position{line: 1843, col: 28, offset: 69172},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1843, col: 28, offset: 69172},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1843, col: 28, offset: 69172},
								expr: &ruleRefExpr{
									pos:  position{line: 1843, col: 29, offset: 69173},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1843, col: 54, offset: 69198},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1843, col: 60, offset: 69204},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1850, col: 1, offset: 69549},
			expr: &seqExpr{
				pos: position{line: 1850, col: 24, offset: 69572},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1850, col: 24, offset: 69572},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1850, col: 31, offset: 69579},
						expr: &ruleRefExpr{
							pos:  position{line: 1850, col: 31, offset: 69579},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1850, col: 38, offset: 69586},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1852, col: 1, offset: 69618},
			expr: &seqExpr{
				pos: position{line: 1852, col: 29, offset: 69646},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1852, col: 29, offset: 69646},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1852, col: 36, offset: 69653},
						expr: &ruleRefExpr{
							pos:  position{line: 1852, col: 36, offset: 69653},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1852, col: 43, offset: 69660},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1854, col: 1, offset: 69692},
			expr: &choiceExpr{
				pos: position{line: 1854, col: 27, offset: 69718},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1854, col: 28, offset: 69719},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1854, col: 28, offset: 69719},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1854, col: 35, offset: 69726},
								expr: &ruleRefExpr{
									pos:  position{line: 1854, col: 35, offset: 69726},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1854, col: 42, offset: 69733},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1854, col: 49, offset: 69740},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1856, col: 1, offset: 69772},
			expr: &actionExpr{
				pos: position{line: 1856, col: 15, offset: 69786},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1856, col: 15, offset: 69786},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1856, col: 15, offset: 69786},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1856, col: 26, offset: 69797},
								expr: &ruleRefExpr{
									pos:  position{line: 1856, col: 27, offset: 69798},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1856, col: 40, offset: 69811},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1856, col: 65, offset: 69836},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1856, col: 74, offset: 69845},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1856, col: 101, offset: 69872},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1860, col: 1, offset: 69989},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1860, col: 30, offset: 70018},
				expr: &actionExpr{
					pos: position{line: 1860, col: 31, offset: 70019},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1860, col: 31, offset: 70019},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1860, col: 31, offset: 70019},
								expr: &ruleRefExpr{
									pos:  position{line: 1860, col: 32, offset: 70020},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1860, col: 55, offset: 70043},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1860, col: 61, offset: 70049},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1867, col: 1, offset: 70396},
			expr: &seqExpr{
				pos: position{line: 1867, col: 26, offset: 70421},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1867, col: 26, offset: 70421},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1867, col: 33, offset: 70428},
						expr: &ruleRefExpr{
							pos:  position{line: 1867, col: 33, offset: 70428},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1867, col: 40, offset: 70435},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1869, col: 1, offset: 70442},
			expr: &seqExpr{
				pos: position{line: 1869, col: 31, offset: 70472},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1869, col: 31, offset: 70472},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1869, col: 38, offset: 70479},
						expr: &ruleRefExpr{
							pos:  position{line: 1869, col: 38, offset: 70479},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1869, col: 45, offset: 70486},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1871, col: 1, offset: 70493},
			expr: &choiceExpr{
				pos: position{line: 1871, col: 29, offset: 70521},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1871, col: 30, offset: 70522},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1871, col: 30, offset: 70522},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1871, col: 37, offset: 70529},
								expr: &ruleRefExpr{
									pos:  position{line: 1871, col: 37, offset: 70529},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1871, col: 44, offset: 70536},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1871, col: 51, offset: 70543},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1873, col: 1, offset: 70550},
			expr: &actionExpr{
				pos: position{line: 1873, col: 17, offset: 70566},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1873, col: 17, offset: 70566},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1873, col: 17, offset: 70566},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1873, col: 28, offset: 70577},
								expr: &ruleRefExpr{
									pos:  position{line: 1873, col: 29, offset: 70578},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1873, col: 42, offset: 70591},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1873, col: 69, offset: 70618},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1873, col: 78, offset: 70627},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1873, col: 102, offset: 70651},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1877, col: 1, offset: 70772},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1877, col: 27, offset: 70798},
				expr: &actionExpr{
					pos: position{line: 1877, col: 28, offset: 70799},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1877, col: 28, offset: 70799},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1877, col: 28, offset: 70799},
								expr: &ruleRefExpr{
									pos:  position{line: 1877, col: 29, offset: 70800},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1877, col: 54, offset: 70825},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1877, col: 60, offset: 70831},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1884, col: 1, offset: 71182},
			expr: &seqExpr{
				pos: position{line: 1884, col: 30, offset: 71211},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1884, col: 30, offset: 71211},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1884, col: 37, offset: 71218},
						expr: &ruleRefExpr{
							pos:  position{line: 1884, col: 37, offset: 71218},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1884, col: 44, offset: 71225},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1886, col: 1, offset: 71232},
			expr: &seqExpr{
				pos: position{line: 1886, col: 35, offset: 71266},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1886, col: 35, offset: 71266},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1886, col: 42, offset: 71273},
						expr: &ruleRefExpr{
							pos:  position{line: 1886, col: 42, offset: 71273},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1886, col: 49, offset: 71280},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1888, col: 1, offset: 71287},
			expr: &choiceExpr{
				pos: position{line: 1888, col: 33, offset: 71319},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1888, col: 34, offset: 71320},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1888, col: 34, offset: 71320},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1888, col: 41, offset: 71327},
								expr: &ruleRefExpr{
									pos:  position{line: 1888, col: 41, offset: 71327},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1888, col: 48, offset: 71334},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1888, col: 55, offset: 71341},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1890, col: 1, offset: 71348},
			expr: &actionExpr{
				pos: position{line: 1890, col: 21, offset: 71368},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1890, col: 21, offset: 71368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1890, col: 21, offset: 71368},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1890, col: 32, offset: 71379},
								expr: &ruleRefExpr{
									pos:  position{line: 1890, col: 33, offset: 71380},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1890, col: 46, offset: 71393},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1890, col: 77, offset: 71424},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1890, col: 86, offset: 71433},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1890, col: 114, offset: 71461},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1894, col: 1, offset: 71590},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1894, col: 31, offset: 71620},
				expr: &actionExpr{
					pos: position{line: 1894, col: 32, offset: 71621},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1894, col: 32, offset: 71621},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1894, col: 32, offset: 71621},
								expr: &ruleRefExpr{
									pos:  position{line: 1894, col: 33, offset: 71622},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1894, col: 62, offset: 71651},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1894, col: 68, offset: 71657},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1899, col: 1, offset: 71824},
			expr: &actionExpr{
				pos: position{line: 1899, col: 18, offset: 71841},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1899, col: 18, offset: 71841},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1899, col: 19, offset: 71842},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1899, col: 19, offset: 71842},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1899, col: 27, offset: 71850},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1899, col: 37, offset: 71860},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1899, col: 45, offset: 71868},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1899, col: 55, offset: 71878},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1899, col: 63, offset: 71886},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1899, col: 72, offset: 71895},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1908, col: 1, offset: 72201},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1908, col: 23, offset: 72223},
				expr: &ruleRefExpr{
					pos:  position{line: 1908, col: 23, offset: 72223},
					name: "NormalElement",
				},
			},
		},
		{
			name: "NormalElement",
			pos:  position{line: 1910, col: 1, offset: 72241},
			expr: &actionExpr{
				pos: position{line: 1911, col: 5, offset: 72264},
				run: (*parser).callonNormalElement1,
				expr: &seqExpr{
					pos: position{line: 1911, col: 5, offset: 72264},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1911, col: 5, offset: 72264},
							expr: &ruleRefExpr{
								pos:  position{line: 1911, col: 6, offset: 72265},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1911, col: 10, offset: 72269},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1911, col: 19, offset: 72278},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1911, col: 19, offset: 72278},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1912, col: 15, offset: 72304},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1913, col: 15, offset: 72333},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1914, col: 15, offset: 72359},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1915, col: 15, offset: 72388},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1916, col: 15, offset: 72420},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1917, col: 15, offset: 72454},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1918, col: 15, offset: 72486},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1919, col: 15, offset: 72526},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1920, col: 15, offset: 72556},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1921, col: 15, offset: 72585},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1922, col: 15, offset: 72622},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1923, col: 15, offset: 72653},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1924, col: 15, offset: 72695},
										name: "StandaloneAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 1925, col: 15, offset: 72731},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1930, col: 1, offset: 72849},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1930, col: 22, offset: 72870},
				expr: &ruleRefExpr{
					pos:  position{line: 1930, col: 22, offset: 72870},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1932, col: 1, offset: 72892},
			expr: &actionExpr{
				pos: position{line: 1932, col: 22, offset: 72913},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1932, col: 22, offset: 72913},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1932, col: 22, offset: 72913},
							expr: &ruleRefExpr{
								pos:  position{line: 1932, col: 23, offset: 72914},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1932, col: 27, offset: 72918},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1932, col: 36, offset: 72927},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1932, col: 36, offset: 72927},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1932, col: 48, offset: 72939},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1936, col: 1, offset: 72993},
			expr: &actionExpr{
				pos: position{line: 1936, col: 24, offset: 73016},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1936, col: 24, offset: 73016},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1936, col: 30, offset: 73022},
						expr: &ruleRefExpr{
							pos:  position{line: 1936, col: 31, offset: 73023},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1940, col: 1, offset: 73117},
			expr: &actionExpr{
				pos: position{line: 1940, col: 28, offset: 73144},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1940, col: 28, offset: 73144},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1940, col: 28, offset: 73144},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1940, col: 37, offset: 73153},
								expr: &ruleRefExpr{
									pos:  position{line: 1940, col: 38, offset: 73154},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1940, col: 54, offset: 73170},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1947, col: 1, offset: 73419},
			expr: &actionExpr{
				pos: position{line: 1947, col: 10, offset: 73428},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1947, col: 10, offset: 73428},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1947, col: 10, offset: 73428},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1947, col: 16, offset: 73434},
								expr: &zeroOrMoreExpr{
									pos: position{line: 1947, col: 17, offset: 73435},
									expr: &ruleRefExpr{
										pos:  position{line: 1947, col: 17, offset: 73435},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1947, col: 31, offset: 73449},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1948, col: 5, offset: 73469},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1948, col: 12, offset: 73476},
								expr: &ruleRefExpr{
									pos:  position{line: 1948, col: 13, offset: 73477},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1949, col: 5, offset: 73500},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1949, col: 11, offset: 73506},
								expr: &ruleRefExpr{
									pos:  position{line: 1949, col: 12, offset: 73507},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1950, col: 6, offset: 73525},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1950, col: 6, offset: 73525},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1950, col: 23, offset: 73542},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1954, col: 1, offset: 73656},
			expr: &seqExpr{
				pos: position{line: 1954, col: 23, offset: 73678},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1954, col: 23, offset: 73678},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1954, col: 27, offset: 73682},
						expr: &ruleRefExpr{
							pos:  position{line: 1954, col: 27, offset: 73682},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1956, col: 1, offset: 73692},
			expr: &seqExpr{
				pos: position{line: 1956, col: 19, offset: 73710},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1956, col: 19, offset: 73710},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1956, col: 26, offset: 73717},
						expr: &ruleRefExpr{
							pos:  position{line: 1956, col: 26, offset: 73717},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1956, col: 33, offset: 73724},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1959, col: 1, offset: 73795},
			expr: &actionExpr{
				pos: position{line: 1959, col: 20, offset: 73814},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1959, col: 20, offset: 73814},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1959, col: 20, offset: 73814},
							expr: &ruleRefExpr{
								pos:  position{line: 1959, col: 21, offset: 73815},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1959, col: 36, offset: 73830},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1959, col: 42, offset: 73836},
								expr: &ruleRefExpr{
									pos:  position{line: 1959, col: 43, offset: 73837},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1959, col: 55, offset: 73849},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1959, col: 59, offset: 73853},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1963, col: 1, offset: 73925},
			expr: &actionExpr{
				pos: position{line: 1963, col: 14, offset: 73938},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1963, col: 14, offset: 73938},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1963, col: 14, offset: 73938},
							expr: &ruleRefExpr{
								pos:  position{line: 1963, col: 15, offset: 73939},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1963, col: 30, offset: 73954},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1963, col: 36, offset: 73960},
								expr: &ruleRefExpr{
									pos:  position{line: 1963, col: 37, offset: 73961},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1963, col: 49, offset: 73973},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1963, col: 53, offset: 73977},
							expr: &ruleRefExpr{
								pos:  position{line: 1963, col: 53, offset: 73977},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1967, col: 1, offset: 74050},
			expr: &actionExpr{
				pos: position{line: 1967, col: 14, offset: 74063},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1967, col: 14, offset: 74063},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1967, col: 14, offset: 74063},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1967, col: 33, offset: 74082},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1967, col: 42, offset: 74091},
								expr: &seqExpr{
									pos: position{line: 1967, col: 43, offset: 74092},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1967, col: 43, offset: 74092},
											expr: &ruleRefExpr{
												pos:  position{line: 1967, col: 44, offset: 74093},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1967, col: 63, offset: 74112},
											expr: &ruleRefExpr{
												pos:  position{line: 1967, col: 64, offset: 74113},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1967, col: 68, offset: 74117},
											expr: &ruleRefExpr{
												pos:  position{line: 1967, col: 68, offset: 74117},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1967, col: 75, offset: 74124},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1967, col: 89, offset: 74138},
											expr: &ruleRefExpr{
												pos:  position{line: 1967, col: 89, offset: 74138},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1974, col: 1, offset: 74394},
			expr: &seqExpr{
				pos: position{line: 1974, col: 26, offset: 74419},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1974, col: 26, offset: 74419},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1974, col: 33, offset: 74426},
						expr: &ruleRefExpr{
							pos:  position{line: 1974, col: 33, offset: 74426},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1974, col: 40, offset: 74433},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1976, col: 1, offset: 74440},
			expr: &seqExpr{
				pos: position{line: 1976, col: 31, offset: 74470},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1976, col: 31, offset: 74470},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1976, col: 38, offset: 74477},
						expr: &ruleRefExpr{
							pos:  position{line: 1976, col: 38, offset: 74477},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1976, col: 45, offset: 74484},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1978, col: 1, offset: 74491},
			expr: &choiceExpr{
				pos: position{line: 1978, col: 29, offset: 74519},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1978, col: 30, offset: 74520},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1978, col: 30, offset: 74520},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1978, col: 37, offset: 74527},
								expr: &ruleRefExpr{
									pos:  position{line: 1978, col: 37, offset: 74527},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1978, col: 44, offset: 74534},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1978, col: 51, offset: 74541},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1980, col: 1, offset: 74548},
			expr: &actionExpr{
				pos: position{line: 1980, col: 17, offset: 74564},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1980, col: 17, offset: 74564},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1980, col: 17, offset: 74564},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1980, col: 44, offset: 74591},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1980, col: 53, offset: 74600},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1980, col: 78, offset: 74625},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 1984, col: 1, offset: 74739},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1984, col: 27, offset: 74765},
				expr: &actionExpr{
					pos: position{line: 1984, col: 28, offset: 74766},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1984, col: 28, offset: 74766},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1984, col: 28, offset: 74766},
								expr: &ruleRefExpr{
									pos:  position{line: 1984, col: 29, offset: 74767},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1984, col: 54, offset: 74792},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1984, col: 60, offset: 74798},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1988, col: 1, offset: 74946},
			expr: &actionExpr{
				pos: position{line: 1988, col: 22, offset: 74967},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1988, col: 22, offset: 74967},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1988, col: 22, offset: 74967},
							expr: &ruleRefExpr{
								pos:  position{line: 1988, col: 23, offset: 74968},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1988, col: 45, offset: 74990},
							expr: &ruleRefExpr{
								pos:  position{line: 1988, col: 45, offset: 74990},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1988, col: 52, offset: 74997},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1988, col: 57, offset: 75002},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1988, col: 66, offset: 75011},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1988, col: 92, offset: 75037},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1992, col: 1, offset: 75106},
			expr: &actionExpr{
				pos: position{line: 1992, col: 29, offset: 75134},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1992, col: 29, offset: 75134},
					expr: &charClassMatcher{
						pos:        position{line: 1992, col: 29, offset: 75134},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 2000, col: 1, offset: 75455},
			expr: &choiceExpr{
				pos: position{line: 2000, col: 17, offset: 75471},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2000, col: 17, offset: 75471},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 2000, col: 49, offset: 75503},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 2000, col: 78, offset: 75532},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 2002, col: 1, offset: 75570},
			expr: &litMatcher{
				pos:        position{line: 2002, col: 26, offset: 75595},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 2005, col: 1, offset: 75670},
			expr: &actionExpr{
				pos: position{line: 2005, col: 31, offset: 75700},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 2005, col: 31, offset: 75700},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2005, col: 31, offset: 75700},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2005, col: 42, offset: 75711},
								expr: &ruleRefExpr{
									pos:  position{line: 2005, col: 43, offset: 75712},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2005, col: 56, offset: 75725},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2005, col: 63, offset: 75732},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 2010, col: 1, offset: 75967},
			expr: &actionExpr{
				pos: position{line: 2011, col: 5, offset: 76008},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 2011, col: 5, offset: 76008},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2011, col: 5, offset: 76008},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 2011, col: 16, offset: 76019},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 2011, col: 16, offset: 76019},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2011, col: 16, offset: 76019},
											expr: &ruleRefExpr{
												pos:  position{line: 2011, col: 16, offset: 76019},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2011, col: 23, offset: 76026},
											expr: &charClassMatcher{
												pos:        position{line: 2011, col: 23, offset: 76026},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2013, col: 8, offset: 76081},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 2014, col: 5, offset: 76145},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2014, col: 16, offset: 76156},
								expr: &actionExpr{
									pos: position{line: 2015, col: 9, offset: 76167},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 2015, col: 9, offset: 76167},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2015, col: 9, offset: 76167},
												expr: &ruleRefExpr{
													pos:  position{line: 2015, col: 10, offset: 76168},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 2016, col: 9, offset: 76188},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 2016, col: 20, offset: 76199},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 2016, col: 20, offset: 76199},
														expr: &charClassMatcher{
															pos:        position{line: 2016, col: 20, offset: 76199},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 2018, col: 12, offset: 76262},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 2025, col: 1, offset: 76499},
			expr: &actionExpr{
				pos: position{line: 2025, col: 39, offset: 76537},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 2025, col: 39, offset: 76537},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2025, col: 39, offset: 76537},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2025, col: 50, offset: 76548},
								expr: &ruleRefExpr{
									pos:  position{line: 2025, col: 51, offset: 76549},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2026, col: 9, offset: 76571},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2026, col: 31, offset: 76593},
							expr: &ruleRefExpr{
								pos:  position{line: 2026, col: 31, offset: 76593},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2026, col: 38, offset: 76600},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 2026, col: 46, offset: 76608},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2026, col: 53, offset: 76615},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 2026, col: 95, offset: 76657},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2026, col: 96, offset: 76658},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2026, col: 96, offset: 76658},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2026, col: 118, offset: 76680},
											expr: &ruleRefExpr{
												pos:  position{line: 2026, col: 118, offset: 76680},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2026, col: 125, offset: 76687},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2026, col: 132, offset: 76694},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2031, col: 1, offset: 76858},
			expr: &actionExpr{
				pos: position{line: 2031, col: 44, offset: 76901},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2031, col: 44, offset: 76901},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2031, col: 50, offset: 76907},
						expr: &ruleRefExpr{
							pos:  position{line: 2031, col: 51, offset: 76908},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2035, col: 1, offset: 76996},
			expr: &actionExpr{
				pos: position{line: 2036, col: 5, offset: 77052},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2036, col: 5, offset: 77052},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2036, col: 5, offset: 77052},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2036, col: 11, offset: 77058},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2036, col: 11, offset: 77058},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2036, col: 11, offset: 77058},
											expr: &ruleRefExpr{
												pos:  position{line: 2036, col: 12, offset: 77059},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2036, col: 34, offset: 77081},
											expr: &charClassMatcher{
												pos:        position{line: 2036, col: 34, offset: 77081},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2038, col: 8, offset: 77136},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2043, col: 1, offset: 77267},
			expr: &actionExpr{
				pos: position{line: 2044, col: 5, offset: 77306},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2044, col: 5, offset: 77306},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2044, col: 5, offset: 77306},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2044, col: 16, offset: 77317},
								expr: &ruleRefExpr{
									pos:  position{line: 2044, col: 17, offset: 77318},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2045, col: 5, offset: 77336},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2052, col: 5, offset: 77550},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2052, col: 12, offset: 77557},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2056, col: 1, offset: 77711},
			expr: &actionExpr{
				pos: position{line: 2056, col: 16, offset: 77726},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2056, col: 16, offset: 77726},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 2061, col: 1, offset: 77814},
			expr: &actionExpr{
				pos: position{line: 2061, col: 39, offset: 77852},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 2061, col: 39, offset: 77852},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 2061, col: 45, offset: 77858},
						expr: &ruleRefExpr{
							pos:  position{line: 2061, col: 46, offset: 77859},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 2065, col: 1, offset: 77943},
			expr: &actionExpr{
				pos: position{line: 2065, col: 38, offset: 77980},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 2065, col: 38, offset: 77980},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2065, col: 38, offset: 77980},
							expr: &ruleRefExpr{
								pos:  position{line: 2065, col: 39, offset: 77981},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2065, col: 49, offset: 77991},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2065, col: 58, offset: 78000},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2065, col: 58, offset: 78000},
									expr: &charClassMatcher{
										pos:        position{line: 2065, col: 58, offset: 78000},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2067, col: 4, offset: 78047},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2074, col: 1, offset: 78240},
			expr: &actionExpr{
				pos: position{line: 2074, col: 14, offset: 78253},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2074, col: 14, offset: 78253},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2074, col: 14, offset: 78253},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2074, col: 19, offset: 78258},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2074, col: 25, offset: 78264},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2074, col: 43, offset: 78282},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2078, col: 1, offset: 78351},
			expr: &actionExpr{
				pos: position{line: 2078, col: 21, offset: 78371},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2078, col: 21, offset: 78371},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2078, col: 30, offset: 78380},
						expr: &choiceExpr{
							pos: position{line: 2078, col: 31, offset: 78381},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2078, col: 31, offset: 78381},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2078, col: 38, offset: 78388},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2078, col: 53, offset: 78403},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2078, col: 66, offset: 78416},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 2078, col: 74, offset: 78424},
									run: (*parser).callonIndexTermContent9,
									expr: &seqExpr{
										pos: position{line: 2078, col: 75, offset: 78425},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2078, col: 75, offset: 78425},
												expr: &litMatcher{
													pos:        position{line: 2078, col: 76, offset: 78426},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2078, col: 81, offset: 78431,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2084, col: 1, offset: 78543},
			expr: &actionExpr{
				pos: position{line: 2084, col: 23, offset: 78565},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2084, col: 23, offset: 78565},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2084, col: 23, offset: 78565},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2084, col: 29, offset: 78571},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2084, col: 36, offset: 78578},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2085, col: 5, offset: 78611},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2085, col: 11, offset: 78617},
								expr: &actionExpr{
									pos: position{line: 2085, col: 12, offset: 78618},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2085, col: 12, offset: 78618},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2085, col: 12, offset: 78618},
												expr: &ruleRefExpr{
													pos:  position{line: 2085, col: 12, offset: 78618},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2085, col: 19, offset: 78625},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2085, col: 23, offset: 78629},
												expr: &ruleRefExpr{
													pos:  position{line: 2085, col: 23, offset: 78629},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2085, col: 30, offset: 78636},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2085, col: 39, offset: 78645},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2086, col: 5, offset: 78704},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2086, col: 11, offset: 78710},
								expr: &actionExpr{
									pos: position{line: 2086, col: 12, offset: 78711},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2086, col: 12, offset: 78711},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2086, col: 12, offset: 78711},
												expr: &ruleRefExpr{
													pos:  position{line: 2086, col: 12, offset: 78711},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2086, col: 19, offset: 78718},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2086, col: 23, offset: 78722},
												expr: &ruleRefExpr{
													pos:  position{line: 2086, col: 23, offset: 78722},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2086, col: 30, offset: 78729},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2086, col: 39, offset: 78738},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2087, col: 5, offset: 78797},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2091, col: 1, offset: 78880},
			expr: &actionExpr{
				pos: position{line: 2091, col: 30, offset: 78909},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2091, col: 30, offset: 78909},
					expr: &choiceExpr{
						pos: position{line: 2091, col: 31, offset: 78910},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2091, col: 31, offset: 78910},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2091, col: 42, offset: 78921},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2098, col: 1, offset: 79077},
			expr: &actionExpr{
				pos: position{line: 2098, col: 14, offset: 79090},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2098, col: 14, offset: 79090},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2098, col: 14, offset: 79090},
							expr: &ruleRefExpr{
								pos:  position{line: 2098, col: 15, offset: 79091},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2098, col: 19, offset: 79095},
							expr: &ruleRefExpr{
								pos:  position{line: 2098, col: 19, offset: 79095},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2098, col: 26, offset: 79102},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2106, col: 1, offset: 79255},
			expr: &choiceExpr{
				pos: position{line: 2106, col: 11, offset: 79265},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2106, col: 11, offset: 79265},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2106, col: 24, offset: 79278},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2106, col: 36, offset: 79290},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2106, col: 48, offset: 79302},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2106, col: 61, offset: 79315},
						name: "Ellipsis",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2108, col: 1, offset: 79327},
			expr: &actionExpr{
				pos: position{line: 2108, col: 15, offset: 79341},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2108, col: 15, offset: 79341},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2111, col: 1, offset: 79397},
			expr: &actionExpr{
				pos: position{line: 2111, col: 14, offset: 79410},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2111, col: 14, offset: 79410},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2114, col: 1, offset: 79467},
			expr: &actionExpr{
				pos: position{line: 2114, col: 14, offset: 79480},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2114, col: 14, offset: 79480},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2117, col: 1, offset: 79538},
			expr: &actionExpr{
				pos: position{line: 2117, col: 15, offset: 79552},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2117, col: 15, offset: 79552},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2120, col: 1, offset: 79609},
			expr: &actionExpr{
				pos: position{line: 2120, col: 13, offset: 79621},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2120, col: 13, offset: 79621},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2128, col: 1, offset: 79904},
			expr: &actionExpr{
				pos: position{line: 2128, col: 22, offset: 79925},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2128, col: 22, offset: 79925},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2128, col: 22, offset: 79925},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2128, col: 31, offset: 79934},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2128, col: 35, offset: 79938},
							expr: &charClassMatcher{
								pos:        position{line: 2128, col: 36, offset: 79939},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2135, col: 1, offset: 80126},
			expr: &charClassMatcher{
				pos:        position{line: 2135, col: 13, offset: 80138},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2137, col: 1, offset: 80150},
			expr: &choiceExpr{
				pos: position{line: 2137, col: 16, offset: 80165},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2137, col: 16, offset: 80165},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2137, col: 22, offset: 80171},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2137, col: 28, offset: 80177},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2137, col: 34, offset: 80183},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2137, col: 40, offset: 80189},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2137, col: 46, offset: 80195},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2139, col: 1, offset: 80203},
			expr: &actionExpr{
				pos: position{line: 2139, col: 14, offset: 80216},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2139, col: 14, offset: 80216},
					expr: &charClassMatcher{
						pos:        position{line: 2139, col: 14, offset: 80216},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2143, col: 1, offset: 80266},
			expr: &choiceExpr{
				pos: position{line: 2147, col: 5, offset: 80597},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2147, col: 5, offset: 80597},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2147, col: 5, offset: 80597},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2147, col: 5, offset: 80597},
									expr: &charClassMatcher{
										pos:        position{line: 2147, col: 5, offset: 80597},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2147, col: 15, offset: 80607},
									expr: &choiceExpr{
										pos: position{line: 2147, col: 17, offset: 80609},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2147, col: 17, offset: 80609},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2147, col: 30, offset: 80622},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2149, col: 9, offset: 80694},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2149, col: 9, offset: 80694},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2149, col: 9, offset: 80694},
									expr: &charClassMatcher{
										pos:        position{line: 2149, col: 9, offset: 80694},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2149, col: 19, offset: 80704},
									expr: &seqExpr{
										pos: position{line: 2149, col: 20, offset: 80705},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2149, col: 20, offset: 80705},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2149, col: 27, offset: 80712},
												expr: &charClassMatcher{
													pos:        position{line: 2149, col: 27, offset: 80712},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2153, col: 1, offset: 80792},
			expr: &choiceExpr{
				pos: position{line: 2154, col: 5, offset: 80874},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2154, col: 5, offset: 80874},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2154, col: 5, offset: 80874},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2154, col: 5, offset: 80874},
									expr: &charClassMatcher{
										pos:        position{line: 2154, col: 5, offset: 80874},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2154, col: 19, offset: 80888},
									expr: &choiceExpr{
										pos: position{line: 2154, col: 21, offset: 80890},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2154, col: 21, offset: 80890},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2154, col: 31, offset: 80900},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2156, col: 9, offset: 80971},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2159, col: 1, offset: 81074},
			expr: &actionExpr{
				pos: position{line: 2159, col: 12, offset: 81085},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2159, col: 12, offset: 81085},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2163, col: 1, offset: 81154},
			expr: &actionExpr{
				pos: position{line: 2163, col: 17, offset: 81170},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2163, col: 17, offset: 81170},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2163, col: 22, offset: 81175},
						expr: &choiceExpr{
							pos: position{line: 2163, col: 23, offset: 81176},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2163, col: 23, offset: 81176},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2163, col: 34, offset: 81187},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2167, col: 1, offset: 81275},
			expr: &actionExpr{
				pos: position{line: 2167, col: 25, offset: 81299},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2167, col: 25, offset: 81299},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2167, col: 30, offset: 81304},
						expr: &charClassMatcher{
							pos:        position{line: 2167, col: 31, offset: 81305},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2171, col: 1, offset: 81381},
			expr: &actionExpr{
				pos: position{line: 2171, col: 13, offset: 81393},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2171, col: 13, offset: 81393},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2171, col: 13, offset: 81393},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2171, col: 20, offset: 81400},
								expr: &ruleRefExpr{
									pos:  position{line: 2171, col: 21, offset: 81401},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2171, col: 34, offset: 81414},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2171, col: 39, offset: 81419},
								expr: &choiceExpr{
									pos: position{line: 2171, col: 40, offset: 81420},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2171, col: 40, offset: 81420},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2171, col: 51, offset: 81431},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2175, col: 1, offset: 81523},
			expr: &actionExpr{
				pos: position{line: 2175, col: 23, offset: 81545},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2175, col: 23, offset: 81545},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2175, col: 23, offset: 81545},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2175, col: 31, offset: 81553},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2175, col: 43, offset: 81565},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2175, col: 48, offset: 81570},
								expr: &choiceExpr{
									pos: position{line: 2175, col: 49, offset: 81571},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2175, col: 49, offset: 81571},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2175, col: 60, offset: 81582},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2179, col: 1, offset: 81674},
			expr: &oneOrMoreExpr{
				pos: position{line: 2179, col: 13, offset: 81686},
				expr: &charClassMatcher{
					pos:        position{line: 2179, col: 14, offset: 81687},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2181, col: 1, offset: 81823},
			expr: &actionExpr{
				pos: position{line: 2181, col: 21, offset: 81843},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2181, col: 21, offset: 81843},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2181, col: 21, offset: 81843},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2181, col: 29, offset: 81851},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2181, col: 41, offset: 81863},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2181, col: 47, offset: 81869},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2186, col: 1, offset: 82122},
			expr: &oneOrMoreExpr{
				pos: position{line: 2186, col: 22, offset: 82143},
				expr: &charClassMatcher{
					pos:        position{line: 2186, col: 23, offset: 82144},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2188, col: 1, offset: 82278},
			expr: &actionExpr{
				pos: position{line: 2188, col: 9, offset: 82286},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2188, col: 9, offset: 82286},
					expr: &charClassMatcher{
						pos:        position{line: 2188, col: 9, offset: 82286},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2192, col: 1, offset: 82338},
			expr: &choiceExpr{
				pos: position{line: 2192, col: 15, offset: 82352},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2192, col: 15, offset: 82352},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2192, col: 27, offset: 82364},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2192, col: 40, offset: 82377},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2192, col: 51, offset: 82388},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2192, col: 62, offset: 82399},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2194, col: 1, offset: 82412},
			expr: &actionExpr{
				pos: position{line: 2194, col: 7, offset: 82418},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2194, col: 7, offset: 82418},
					expr: &charClassMatcher{
						pos:        position{line: 2194, col: 7, offset: 82418},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2198, col: 1, offset: 82547},
			expr: &actionExpr{
				pos: position{line: 2198, col: 10, offset: 82556},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2198, col: 10, offset: 82556},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2202, col: 1, offset: 82602},
			expr: &actionExpr{
				pos: position{line: 2202, col: 11, offset: 82612},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2202, col: 11, offset: 82612},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2202, col: 11, offset: 82612},
							expr: &litMatcher{
								pos:        position{line: 2202, col: 11, offset: 82612},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2202, col: 16, offset: 82617},
							expr: &ruleRefExpr{
								pos:  position{line: 2202, col: 16, offset: 82617},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2206, col: 1, offset: 82673},
			expr: &choiceExpr{
				pos: position{line: 2206, col: 10, offset: 82682},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2206, col: 10, offset: 82682},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2206, col: 16, offset: 82688},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2206, col: 16, offset: 82688},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2210, col: 1, offset: 82733},
			expr: &choiceExpr{
				pos: position{line: 2210, col: 12, offset: 82744},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2210, col: 12, offset: 82744},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2210, col: 21, offset: 82753},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2210, col: 28, offset: 82760},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2212, col: 1, offset: 82768},
			expr: &notExpr{
				pos: position{line: 2212, col: 8, offset: 82775},
				expr: &anyMatcher{
					line: 2212, col: 9, offset: 82776,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2214, col: 1, offset: 82781},
			expr: &choiceExpr{
				pos: position{line: 2214, col: 8, offset: 82788},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2214, col: 8, offset: 82788},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2214, col: 18, offset: 82798},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {

	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onRawFile1(blocks interface{}) (interface{}, error) {

	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonRawFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawFile1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {

	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentRawBlocks1(header, others interface{}) (interface{}, error) {

	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentRawBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {

	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {

	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {

	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {

	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {

	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {

	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {

	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {

	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onxAttributeSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonxAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onxAttributeSubstitution1(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {

	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {

	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {

	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {

	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {

	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {

	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {

	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {

	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {

	return types.NewElementStyle(style.(string))
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional2, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional3, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {

	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {

	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {

	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {

	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {

	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {

	return types.NewElementOption(option.(string))
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {

	return value.(string), nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedAttrs1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonNamedAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrs1(stack["attrs"])
}

func (c *current) onNamedAttrPair1(n, v interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(n.(string), v.(string))
}

func (p *parser) callonNamedAttrPair1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrPair1(stack["n"], stack["v"])
}

func (c *current) onAttrEmpty1() (interface{}, error) {

	return nil, nil
}

func (p *parser) callonAttrEmpty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrEmpty1()
}

func (c *current) onAttrValSQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValSQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQ1(stack["val"])
}

func (c *current) onAttrValSQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValSQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQin1(stack["val"])
}

func (c *current) onAttrValSQEsc1() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonAttrValSQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQEsc1()
}

func (c *current) onAttrValDQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValDQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQ1(stack["val"])
}

func (c *current) onAttrValDQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValDQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQin1(stack["val"])
}

func (c *current) onAttrValDQEsc1() (interface{}, error) {
	return `"`, nil
}

func (p *parser) callonAttrValDQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQEsc1()
}

func (c *current) onAttrValPosFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValPosFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValPosFB1()
}

func (c *current) onAttrValNamedFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValNamedFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValNamedFB1()
}

func (c *current) onShortHandValuePlain1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1()
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(key.(string), value.(string))
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted1() (interface{}, error) {

	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1()
}

func (c *current) onAttrValueDoubleQuoted1() (interface{}, error) {

	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1()
}

func (c *current) onAttrValueNone1() (interface{}, error) {

	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {

	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {

	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {

	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {

	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {

	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {

	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {

	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {

	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {

	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {

	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {

	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {

	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {

	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {

	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {

	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {

	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {

	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {

	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {

	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {

	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonRawParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph26(stack["attributes"])
}

func (c *current) onRawParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph32(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph32(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph18(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph18(stack["attributes"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph24(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph24(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {

	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {

	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onRawVerseParagraph6(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonRawVerseParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph6(stack["attributes"])
}

func (c *current) onRawVerseParagraph1(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawVerseParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {

	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {

	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {

	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {

	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement19(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement19(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttrs interface{}) (interface{}, error) {

	return types.NewImageBlock(path.(types.Location), inlineAttrs.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImage1(path, inlineAttrs interface{}) (interface{}, error) {

	return types.NewInlineImage(path.(types.Location), inlineAttrs.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImageAttrs1(alt, w, h, nv interface{}) (interface{}, error) {

	return types.NewElementAttributes(alt, w, h, nv)
}

func (p *parser) callonInlineImageAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttrs1(stack["alt"], stack["w"], stack["h"], stack["nv"])
}

func (c *current) onImageAttrList1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["attrs"])
}

func (c *current) onImageAltInline1(value interface{}) (interface{}, error) {

	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltInline1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltInline1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {

	return types.NewInlineAttribute(types.AttrWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {

	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onImageAltAttr1(value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(types.AttrImageAlt, value.(string))
}

func (p *parser) callonImageAltAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttr1(stack["value"])
}

func (c *current) onImageWidthAttr1(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrWidth, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageWidthAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttr1(stack["value"])
}

func (c *current) onImageHeightAttr1(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageHeight, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageHeightAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttr1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attrs interface{}) (interface{}, error) {

	return types.NewIcon(icon.(string), attrs.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attrs"])
}

func (c *current) onIconAttrs1(size, nv interface{}) (interface{}, error) {

	return types.NewElementAttributes(size, nv)
}

func (p *parser) callonIconAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttrs1(stack["size"], stack["nv"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {

	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {

	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {

	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLineContent1()
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {

	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {

	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {

	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {

	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["line"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onThematicBreak1() (interface{}, error) {

	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onNormalElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNormalElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {

	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {

	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {

	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {

	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent9() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonIndexTermContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {

	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {

	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {

	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {

	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {

	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {

	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {

	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {

	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onAlphanums1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {

	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
