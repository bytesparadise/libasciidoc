// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
	log "github.com/sirupsen/logrus"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "RawSource",
			pos:  position{line: 17, col: 1, offset: 336},
			expr: &actionExpr{
				pos: position{line: 17, col: 14, offset: 349},
				run: (*parser).callonRawSource1,
				expr: &labeledExpr{
					pos:   position{line: 17, col: 14, offset: 349},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 17, col: 20, offset: 355},
						expr: &choiceExpr{
							pos: position{line: 17, col: 21, offset: 356},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 17, col: 21, offset: 356},
									name: "AttributeDeclaration",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 44, offset: 379},
									name: "RawSection",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 57, offset: 392},
									name: "FileInclusion",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 73, offset: 408},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawSection",
			pos:  position{line: 22, col: 1, offset: 553},
			expr: &actionExpr{
				pos: position{line: 23, col: 5, offset: 572},
				run: (*parser).callonRawSection1,
				expr: &seqExpr{
					pos: position{line: 23, col: 5, offset: 572},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 23, col: 5, offset: 572},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 23, col: 12, offset: 579},
								run: (*parser).callonRawSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 23, col: 12, offset: 579},
									expr: &litMatcher{
										pos:        position{line: 23, col: 13, offset: 580},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 27, col: 5, offset: 671},
							run: (*parser).callonRawSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 31, col: 5, offset: 823},
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 5, offset: 823},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 31, col: 12, offset: 830},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 19, offset: 837},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 31, col: 36, offset: 854},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 35, col: 1, offset: 924},
			expr: &actionExpr{
				pos: position{line: 35, col: 20, offset: 943},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 35, col: 20, offset: 943},
					expr: &charClassMatcher{
						pos:        position{line: 35, col: 20, offset: 943},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 39, col: 1, offset: 990},
			expr: &actionExpr{
				pos: position{line: 39, col: 12, offset: 1001},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 39, col: 12, offset: 1001},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 39, col: 12, offset: 1001},
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 13, offset: 1002},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 39, col: 17, offset: 1006},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 39, col: 26, offset: 1015},
								run: (*parser).callonRawLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 39, col: 26, offset: 1015},
									expr: &charClassMatcher{
										pos:        position{line: 39, col: 26, offset: 1015},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 41, col: 8, offset: 1070},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawDocument",
			pos:  position{line: 48, col: 1, offset: 1349},
			expr: &actionExpr{
				pos: position{line: 48, col: 16, offset: 1364},
				run: (*parser).callonRawDocument1,
				expr: &seqExpr{
					pos: position{line: 48, col: 16, offset: 1364},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 48, col: 16, offset: 1364},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 48, col: 29, offset: 1377},
								expr: &ruleRefExpr{
									pos:  position{line: 48, col: 29, offset: 1377},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 48, col: 43, offset: 1391},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 51, offset: 1399},
								name: "RawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 62, offset: 1410},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawBlocks",
			pos:  position{line: 55, col: 1, offset: 1599},
			expr: &actionExpr{
				pos: position{line: 55, col: 14, offset: 1612},
				run: (*parser).callonRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 55, col: 14, offset: 1612},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 55, col: 14, offset: 1612},
							expr: &ruleRefExpr{
								pos:  position{line: 55, col: 14, offset: 1612},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 23, offset: 1621},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 55, col: 31, offset: 1629},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 31, offset: 1629},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 48, offset: 1646},
							label: "blocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 55, col: 56, offset: 1654},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 56, offset: 1654},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 64, col: 1, offset: 1906},
			expr: &actionExpr{
				pos: position{line: 65, col: 9, offset: 1935},
				run: (*parser).callonDocumentRawBlock1,
				expr: &labeledExpr{
					pos:   position{line: 65, col: 9, offset: 1935},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 65, col: 16, offset: 1942},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 65, col: 16, offset: 1942},
								name: "LabeledListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 66, col: 11, offset: 2007},
								name: "SimpleRawParagraph",
							},
							&ruleRefExpr{
								pos:  position{line: 67, col: 11, offset: 2036},
								name: "BlankLine",
							},
							&ruleRefExpr{
								pos:  position{line: 68, col: 11, offset: 2088},
								name: "Section",
							},
							&ruleRefExpr{
								pos:  position{line: 69, col: 11, offset: 2106},
								name: "DelimitedBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 70, col: 11, offset: 2131},
								name: "ImageBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 71, col: 11, offset: 2152},
								name: "SingleLineComment",
							},
							&ruleRefExpr{
								pos:  position{line: 72, col: 11, offset: 2180},
								name: "Table",
							},
							&ruleRefExpr{
								pos:  position{line: 73, col: 11, offset: 2196},
								name: "ThematicBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 74, col: 11, offset: 2220},
								name: "OrderedListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 75, col: 11, offset: 2246},
								name: "UnorderedListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 76, col: 11, offset: 2275},
								name: "CalloutListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 77, col: 11, offset: 2301},
								name: "ContinuedListItemElement",
							},
							&ruleRefExpr{
								pos:  position{line: 78, col: 11, offset: 2336},
								name: "LiteralBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 79, col: 11, offset: 2360},
								name: "AttributeDeclaration",
							},
							&ruleRefExpr{
								pos:  position{line: 80, col: 11, offset: 2392},
								name: "AttributeReset",
							},
							&ruleRefExpr{
								pos:  position{line: 81, col: 11, offset: 2418},
								name: "TableOfContentsPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 82, col: 11, offset: 2455},
								name: "UserMacroBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 83, col: 11, offset: 2480},
								name: "RawParagraph",
							},
							&ruleRefExpr{
								pos:  position{line: 84, col: 11, offset: 2503},
								name: "StandaloneAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 92, col: 1, offset: 2712},
			expr: &ruleRefExpr{
				pos:  position{line: 92, col: 16, offset: 2727},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 94, col: 1, offset: 2745},
			expr: &actionExpr{
				pos: position{line: 94, col: 20, offset: 2764},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 94, col: 20, offset: 2764},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 94, col: 20, offset: 2764},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 94, col: 41, offset: 2785},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 94, col: 49, offset: 2793},
								expr: &ruleRefExpr{
									pos:  position{line: 94, col: 50, offset: 2794},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 75, offset: 2819},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 98, col: 1, offset: 2899},
			expr: &seqExpr{
				pos: position{line: 98, col: 26, offset: 2924},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 98, col: 26, offset: 2924},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 98, col: 32, offset: 2930},
						expr: &ruleRefExpr{
							pos:  position{line: 98, col: 32, offset: 2930},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 39, offset: 2937},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 100, col: 1, offset: 2942},
			expr: &actionExpr{
				pos: position{line: 100, col: 27, offset: 2968},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 100, col: 27, offset: 2968},
					expr: &oneOrMoreExpr{
						pos: position{line: 100, col: 28, offset: 2969},
						expr: &seqExpr{
							pos: position{line: 100, col: 29, offset: 2970},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 100, col: 29, offset: 2970},
									expr: &ruleRefExpr{
										pos:  position{line: 100, col: 30, offset: 2971},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 100, col: 51, offset: 2992,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 107, col: 1, offset: 3158},
			expr: &actionExpr{
				pos: position{line: 107, col: 19, offset: 3176},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 107, col: 19, offset: 3176},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 107, col: 19, offset: 3176},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 107, col: 23, offset: 3180},
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 23, offset: 3180},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 30, offset: 3187},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 37, offset: 3194},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 52, offset: 3209},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 107, col: 56, offset: 3213},
								expr: &ruleRefExpr{
									pos:  position{line: 107, col: 56, offset: 3213},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 74, offset: 3231},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 9, offset: 3243},
							expr: &choiceExpr{
								pos: position{line: 108, col: 10, offset: 3244},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 108, col: 10, offset: 3244},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 108, col: 10, offset: 3244},
												expr: &ruleRefExpr{
													pos:  position{line: 108, col: 10, offset: 3244},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 108, col: 17, offset: 3251},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 108, col: 37, offset: 3271},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 109, col: 9, offset: 3294},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 109, col: 18, offset: 3303},
								expr: &ruleRefExpr{
									pos:  position{line: 109, col: 18, offset: 3303},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 9, offset: 3330},
							expr: &choiceExpr{
								pos: position{line: 110, col: 10, offset: 3331},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 110, col: 10, offset: 3331},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 110, col: 10, offset: 3331},
												expr: &ruleRefExpr{
													pos:  position{line: 110, col: 10, offset: 3331},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 110, col: 17, offset: 3338},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 110, col: 37, offset: 3358},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 9, offset: 3381},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 111, col: 19, offset: 3391},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 19, offset: 3391},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 115, col: 1, offset: 3492},
			expr: &choiceExpr{
				pos: position{line: 115, col: 20, offset: 3511},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 115, col: 20, offset: 3511},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 115, col: 48, offset: 3539},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 117, col: 1, offset: 3569},
			expr: &actionExpr{
				pos: position{line: 117, col: 30, offset: 3598},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 117, col: 30, offset: 3598},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 117, col: 30, offset: 3598},
							expr: &ruleRefExpr{
								pos:  position{line: 117, col: 30, offset: 3598},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 117, col: 37, offset: 3605},
							expr: &litMatcher{
								pos:        position{line: 117, col: 38, offset: 3606},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 117, col: 42, offset: 3610},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 117, col: 51, offset: 3619},
								expr: &ruleRefExpr{
									pos:  position{line: 117, col: 51, offset: 3619},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 117, col: 68, offset: 3636},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 121, col: 1, offset: 3706},
			expr: &actionExpr{
				pos: position{line: 121, col: 33, offset: 3738},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 121, col: 33, offset: 3738},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 33, offset: 3738},
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 33, offset: 3738},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 121, col: 40, offset: 3745},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 121, col: 51, offset: 3756},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 59, offset: 3764},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 75, offset: 3780},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 125, col: 1, offset: 3859},
			expr: &actionExpr{
				pos: position{line: 125, col: 19, offset: 3877},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 125, col: 19, offset: 3877},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 19, offset: 3877},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 19, offset: 3877},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 26, offset: 3884},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 36, offset: 3894},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 56, offset: 3914},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 125, col: 62, offset: 3920},
								expr: &ruleRefExpr{
									pos:  position{line: 125, col: 63, offset: 3921},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 85, offset: 3943},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 85, offset: 3943},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 125, col: 92, offset: 3950},
							expr: &litMatcher{
								pos:        position{line: 125, col: 92, offset: 3950},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 97, offset: 3955},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 97, offset: 3955},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 130, col: 1, offset: 4100},
			expr: &actionExpr{
				pos: position{line: 130, col: 23, offset: 4122},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 130, col: 23, offset: 4122},
					expr: &charClassMatcher{
						pos:        position{line: 130, col: 23, offset: 4122},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 134, col: 1, offset: 4169},
			expr: &actionExpr{
				pos: position{line: 134, col: 24, offset: 4192},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 134, col: 24, offset: 4192},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 134, col: 24, offset: 4192},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 134, col: 28, offset: 4196},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 134, col: 35, offset: 4203},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 134, col: 36, offset: 4204},
									expr: &charClassMatcher{
										pos:        position{line: 134, col: 36, offset: 4204},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 136, col: 4, offset: 4251},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 142, col: 1, offset: 4412},
			expr: &actionExpr{
				pos: position{line: 142, col: 21, offset: 4432},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 142, col: 21, offset: 4432},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 142, col: 21, offset: 4432},
							expr: &ruleRefExpr{
								pos:  position{line: 142, col: 21, offset: 4432},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 142, col: 28, offset: 4439},
							expr: &litMatcher{
								pos:        position{line: 142, col: 29, offset: 4440},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 142, col: 33, offset: 4444},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 143, col: 9, offset: 4463},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 143, col: 10, offset: 4464},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 143, col: 10, offset: 4464},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 143, col: 10, offset: 4464},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 143, col: 21, offset: 4475},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 143, col: 45, offset: 4499},
													expr: &litMatcher{
														pos:        position{line: 143, col: 45, offset: 4499},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 143, col: 50, offset: 4504},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 143, col: 58, offset: 4512},
														expr: &ruleRefExpr{
															pos:  position{line: 143, col: 59, offset: 4513},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 143, col: 82, offset: 4536},
													expr: &litMatcher{
														pos:        position{line: 143, col: 82, offset: 4536},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 143, col: 87, offset: 4541},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 143, col: 97, offset: 4551},
														expr: &ruleRefExpr{
															pos:  position{line: 143, col: 98, offset: 4552},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 145, col: 15, offset: 4669},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 145, col: 15, offset: 4669},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 145, col: 15, offset: 4669},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 145, col: 24, offset: 4678},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 145, col: 46, offset: 4700},
													expr: &litMatcher{
														pos:        position{line: 145, col: 46, offset: 4700},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 145, col: 51, offset: 4705},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 145, col: 61, offset: 4715},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 62, offset: 4716},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 13, offset: 4825},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 152, col: 1, offset: 4955},
			expr: &choiceExpr{
				pos: position{line: 152, col: 27, offset: 4981},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 152, col: 27, offset: 4981},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 152, col: 27, offset: 4981},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 152, col: 27, offset: 4981},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 152, col: 32, offset: 4986},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 152, col: 39, offset: 4993},
									expr: &charClassMatcher{
										pos:        position{line: 152, col: 39, offset: 4993},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 154, col: 5, offset: 5041},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 154, col: 5, offset: 5041},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 154, col: 5, offset: 5041},
									expr: &litMatcher{
										pos:        position{line: 154, col: 5, offset: 5041},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 11, offset: 5047},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 154, col: 18, offset: 5054},
									expr: &charClassMatcher{
										pos:        position{line: 154, col: 18, offset: 5054},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 154, col: 29, offset: 5065},
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 29, offset: 5065},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 154, col: 36, offset: 5072},
									expr: &litMatcher{
										pos:        position{line: 154, col: 37, offset: 5073},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 158, col: 1, offset: 5113},
			expr: &actionExpr{
				pos: position{line: 158, col: 25, offset: 5137},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 158, col: 25, offset: 5137},
					expr: &charClassMatcher{
						pos:        position{line: 158, col: 25, offset: 5137},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 162, col: 1, offset: 5183},
			expr: &actionExpr{
				pos: position{line: 162, col: 27, offset: 5209},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 162, col: 27, offset: 5209},
					expr: &charClassMatcher{
						pos:        position{line: 162, col: 27, offset: 5209},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 169, col: 1, offset: 5362},
			expr: &actionExpr{
				pos: position{line: 169, col: 25, offset: 5386},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 169, col: 25, offset: 5386},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 169, col: 25, offset: 5386},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 169, col: 29, offset: 5390},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 169, col: 35, offset: 5396},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 169, col: 50, offset: 5411},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 9, offset: 5424},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 170, col: 15, offset: 5430},
								expr: &ruleRefExpr{
									pos:  position{line: 170, col: 16, offset: 5431},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 170, col: 44, offset: 5459},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 177, col: 1, offset: 5732},
			expr: &actionExpr{
				pos: position{line: 177, col: 18, offset: 5749},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 177, col: 18, offset: 5749},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 177, col: 18, offset: 5749},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 177, col: 28, offset: 5759},
							expr: &charClassMatcher{
								pos:        position{line: 177, col: 29, offset: 5760},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 181, col: 1, offset: 5808},
			expr: &actionExpr{
				pos: position{line: 181, col: 30, offset: 5837},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 181, col: 30, offset: 5837},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 181, col: 30, offset: 5837},
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 30, offset: 5837},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 181, col: 37, offset: 5844},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 181, col: 46, offset: 5853},
								expr: &choiceExpr{
									pos: position{line: 182, col: 5, offset: 5859},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 182, col: 6, offset: 5860},
											run: (*parser).callonAttributeDeclarationValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 182, col: 6, offset: 5860},
												expr: &charClassMatcher{
													pos:        position{line: 182, col: 6, offset: 5860},
													val:        "[^\\r\\n{]",
													chars:      []rune{'\r', '\n', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 185, col: 5, offset: 5939},
											name: "AttributeSubstitution",
										},
										&actionExpr{
											pos: position{line: 186, col: 6, offset: 5968},
											run: (*parser).callonAttributeDeclarationValue12,
											expr: &litMatcher{
												pos:        position{line: 186, col: 6, offset: 5968},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 193, col: 1, offset: 6135},
			expr: &choiceExpr{
				pos: position{line: 193, col: 19, offset: 6153},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 193, col: 19, offset: 6153},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 193, col: 19, offset: 6153},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 193, col: 19, offset: 6153},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 193, col: 24, offset: 6158},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 30, offset: 6164},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 193, col: 45, offset: 6179},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 193, col: 49, offset: 6183},
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 49, offset: 6183},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 193, col: 56, offset: 6190},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 195, col: 5, offset: 6250},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 195, col: 5, offset: 6250},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 195, col: 5, offset: 6250},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 195, col: 9, offset: 6254},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 195, col: 15, offset: 6260},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 195, col: 30, offset: 6275},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 195, col: 35, offset: 6280},
									expr: &ruleRefExpr{
										pos:  position{line: 195, col: 35, offset: 6280},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 195, col: 42, offset: 6287},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 199, col: 1, offset: 6346},
			expr: &choiceExpr{
				pos: position{line: 199, col: 26, offset: 6371},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 199, col: 26, offset: 6371},
						name: "CounterSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 48, offset: 6393},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 201, col: 1, offset: 6402},
			expr: &actionExpr{
				pos: position{line: 201, col: 12, offset: 6413},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 201, col: 12, offset: 6413},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 201, col: 12, offset: 6413},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 201, col: 16, offset: 6417},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 21, offset: 6422},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 201, col: 35, offset: 6436},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution",
			pos:  position{line: 206, col: 1, offset: 6551},
			expr: &choiceExpr{
				pos: position{line: 206, col: 24, offset: 6574},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 206, col: 24, offset: 6574},
						name: "CounterSubstitution1",
					},
					&ruleRefExpr{
						pos:  position{line: 206, col: 47, offset: 6597},
						name: "CounterSubstitution2",
					},
				},
			},
		},
		{
			name: "CounterSubstitution1",
			pos:  position{line: 208, col: 1, offset: 6733},
			expr: &actionExpr{
				pos: position{line: 208, col: 25, offset: 6757},
				run: (*parser).callonCounterSubstitution11,
				expr: &seqExpr{
					pos: position{line: 208, col: 25, offset: 6757},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 208, col: 25, offset: 6757},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 208, col: 37, offset: 6769},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 208, col: 42, offset: 6774},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 208, col: 56, offset: 6788},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 208, col: 62, offset: 6794},
								expr: &ruleRefExpr{
									pos:  position{line: 208, col: 63, offset: 6795},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 208, col: 78, offset: 6810},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubstitution2",
			pos:  position{line: 212, col: 1, offset: 6888},
			expr: &actionExpr{
				pos: position{line: 212, col: 25, offset: 6912},
				run: (*parser).callonCounterSubstitution21,
				expr: &seqExpr{
					pos: position{line: 212, col: 25, offset: 6912},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 212, col: 25, offset: 6912},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 212, col: 38, offset: 6925},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 212, col: 43, offset: 6930},
								name: "AttributeName",
							},
						},
						&labeledExpr{
							pos:   position{line: 212, col: 57, offset: 6944},
							label: "start",
							expr: &zeroOrOneExpr{
								pos: position{line: 212, col: 63, offset: 6950},
								expr: &ruleRefExpr{
									pos:  position{line: 212, col: 64, offset: 6951},
									name: "CounterStart",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 212, col: 79, offset: 6966},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterStart",
			pos:  position{line: 216, col: 1, offset: 7041},
			expr: &actionExpr{
				pos: position{line: 216, col: 17, offset: 7057},
				run: (*parser).callonCounterStart1,
				expr: &seqExpr{
					pos: position{line: 216, col: 17, offset: 7057},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 216, col: 17, offset: 7057},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 216, col: 21, offset: 7061},
							label: "start",
							expr: &choiceExpr{
								pos: position{line: 216, col: 28, offset: 7068},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 216, col: 28, offset: 7068},
										run: (*parser).callonCounterStart6,
										expr: &charClassMatcher{
											pos:        position{line: 216, col: 28, offset: 7068},
											val:        "[A-Za-z]",
											ranges:     []rune{'A', 'Z', 'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 218, col: 9, offset: 7122},
										run: (*parser).callonCounterStart8,
										expr: &oneOrMoreExpr{
											pos: position{line: 218, col: 9, offset: 7122},
											expr: &charClassMatcher{
												pos:        position{line: 218, col: 9, offset: 7122},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 224, col: 1, offset: 7219},
			expr: &actionExpr{
				pos: position{line: 224, col: 20, offset: 7238},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 224, col: 20, offset: 7238},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 224, col: 20, offset: 7238},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 224, col: 25, offset: 7243},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 224, col: 29, offset: 7247},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 224, col: 33, offset: 7251},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 224, col: 38, offset: 7256},
							expr: &ruleRefExpr{
								pos:  position{line: 224, col: 38, offset: 7256},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeKey",
			pos:  position{line: 228, col: 1, offset: 7395},
			expr: &actionExpr{
				pos: position{line: 228, col: 27, offset: 7421},
				run: (*parser).callonStandaloneAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 228, col: 27, offset: 7421},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 228, col: 27, offset: 7421},
							expr: &litMatcher{
								pos:        position{line: 228, col: 28, offset: 7422},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 228, col: 36, offset: 7430},
							expr: &litMatcher{
								pos:        position{line: 228, col: 37, offset: 7431},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 228, col: 45, offset: 7439},
							expr: &litMatcher{
								pos:        position{line: 228, col: 46, offset: 7440},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 228, col: 56, offset: 7450},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 228, col: 61, offset: 7455},
								name: "NamedAttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 228, col: 80, offset: 7474},
							expr: &seqExpr{
								pos: position{line: 228, col: 81, offset: 7475},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 228, col: 81, offset: 7475},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 228, col: 85, offset: 7479},
										expr: &ruleRefExpr{
											pos:  position{line: 228, col: 85, offset: 7479},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 235, col: 1, offset: 7689},
			expr: &actionExpr{
				pos: position{line: 236, col: 5, offset: 7713},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 236, col: 5, offset: 7713},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 236, col: 16, offset: 7724},
						expr: &choiceExpr{
							pos: position{line: 238, col: 9, offset: 7791},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 238, col: 10, offset: 7792},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 238, col: 10, offset: 7792},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 238, col: 10, offset: 7792},
												label: "anchor",
												expr: &ruleRefExpr{
													pos:  position{line: 238, col: 18, offset: 7800},
													name: "ShortHandAnchor",
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 238, col: 35, offset: 7817},
												expr: &seqExpr{
													pos: position{line: 238, col: 36, offset: 7818},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 238, col: 36, offset: 7818},
															expr: &ruleRefExpr{
																pos:  position{line: 238, col: 36, offset: 7818},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 238, col: 43, offset: 7825},
															name: "Newline",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 242, col: 12, offset: 7945},
									run: (*parser).callonBlockAttributes14,
									expr: &seqExpr{
										pos: position{line: 242, col: 12, offset: 7945},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 242, col: 12, offset: 7945},
												label: "title",
												expr: &ruleRefExpr{
													pos:  position{line: 242, col: 19, offset: 7952},
													name: "ShortHandTitle",
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 242, col: 35, offset: 7968},
												expr: &seqExpr{
													pos: position{line: 242, col: 36, offset: 7969},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 242, col: 36, offset: 7969},
															expr: &ruleRefExpr{
																pos:  position{line: 242, col: 36, offset: 7969},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 242, col: 43, offset: 7976},
															name: "Newline",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 246, col: 12, offset: 8066},
									run: (*parser).callonBlockAttributes23,
									expr: &seqExpr{
										pos: position{line: 246, col: 12, offset: 8066},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 246, col: 12, offset: 8066},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 246, col: 24, offset: 8078},
													name: "LongHandAttributes",
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 246, col: 44, offset: 8098},
												expr: &seqExpr{
													pos: position{line: 246, col: 45, offset: 8099},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 246, col: 45, offset: 8099},
															expr: &ruleRefExpr{
																pos:  position{line: 246, col: 45, offset: 8099},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 246, col: 52, offset: 8106},
															name: "Newline",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 253, col: 1, offset: 8246},
			expr: &actionExpr{
				pos: position{line: 254, col: 5, offset: 8270},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 254, col: 5, offset: 8270},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 254, col: 5, offset: 8270},
							run: (*parser).callonInlineAttributes3,
						},
						&litMatcher{
							pos:        position{line: 257, col: 5, offset: 8321},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 258, col: 5, offset: 8329},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 258, col: 16, offset: 8340},
								expr: &choiceExpr{
									pos: position{line: 258, col: 17, offset: 8341},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 258, col: 17, offset: 8341},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 258, col: 37, offset: 8361},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 259, col: 5, offset: 8382},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 264, col: 1, offset: 8516},
			expr: &actionExpr{
				pos: position{line: 264, col: 25, offset: 8540},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 264, col: 25, offset: 8540},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 264, col: 25, offset: 8540},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 264, col: 37, offset: 8552},
								name: "BlockAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 264, col: 54, offset: 8569},
							expr: &ruleRefExpr{
								pos:  position{line: 264, col: 54, offset: 8569},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAnchor",
			pos:  position{line: 269, col: 1, offset: 8662},
			expr: &actionExpr{
				pos: position{line: 270, col: 4, offset: 8684},
				run: (*parser).callonShortHandAnchor1,
				expr: &seqExpr{
					pos: position{line: 270, col: 4, offset: 8684},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 270, col: 4, offset: 8684},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 271, col: 5, offset: 8694},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 272, col: 9, offset: 8707},
								run: (*parser).callonShortHandAnchor5,
								expr: &labeledExpr{
									pos:   position{line: 272, col: 9, offset: 8707},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 272, col: 18, offset: 8716},
										expr: &choiceExpr{
											pos: position{line: 273, col: 13, offset: 8730},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 273, col: 14, offset: 8731},
													run: (*parser).callonShortHandAnchor9,
													expr: &oneOrMoreExpr{
														pos: position{line: 273, col: 14, offset: 8731},
														expr: &charClassMatcher{
															pos:        position{line: 273, col: 14, offset: 8731},
															val:        "[^=\\r\\n\\uFFFD{\\]]",
															chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 276, col: 13, offset: 8898},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 277, col: 13, offset: 8931},
													name: "AttrSub",
												},
												&actionExpr{
													pos: position{line: 278, col: 14, offset: 8954},
													run: (*parser).callonShortHandAnchor14,
													expr: &litMatcher{
														pos:        position{line: 278, col: 14, offset: 8954},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 284, col: 5, offset: 9140},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandTitle",
			pos:  position{line: 289, col: 1, offset: 9241},
			expr: &actionExpr{
				pos: position{line: 289, col: 19, offset: 9259},
				run: (*parser).callonShortHandTitle1,
				expr: &seqExpr{
					pos: position{line: 289, col: 19, offset: 9259},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 289, col: 19, offset: 9259},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 289, col: 23, offset: 9263},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 290, col: 5, offset: 9275},
								run: (*parser).callonShortHandTitle5,
								expr: &seqExpr{
									pos: position{line: 290, col: 5, offset: 9275},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 290, col: 5, offset: 9275},
											expr: &charClassMatcher{
												pos:        position{line: 290, col: 6, offset: 9276},
												val:        "[. ]",
												chars:      []rune{'.', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 291, col: 5, offset: 9388},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 291, col: 14, offset: 9397},
												expr: &choiceExpr{
													pos: position{line: 292, col: 9, offset: 9407},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 292, col: 10, offset: 9408},
															run: (*parser).callonShortHandTitle12,
															expr: &oneOrMoreExpr{
																pos: position{line: 292, col: 10, offset: 9408},
																expr: &charClassMatcher{
																	pos:        position{line: 292, col: 10, offset: 9408},
																	val:        "[^\\r\\n\\uFFFD{]",
																	chars:      []rune{'\r', '\n', '�', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 295, col: 9, offset: 9506},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 296, col: 9, offset: 9535},
															name: "AttrSub",
														},
														&actionExpr{
															pos: position{line: 297, col: 10, offset: 9554},
															run: (*parser).callonShortHandTitle17,
															expr: &litMatcher{
																pos:        position{line: 297, col: 10, offset: 9554},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 308, col: 1, offset: 9954},
			expr: &actionExpr{
				pos: position{line: 309, col: 5, offset: 9980},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 309, col: 5, offset: 9980},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 309, col: 5, offset: 9980},
							run: (*parser).callonLongHandAttributes3,
						},
						&litMatcher{
							pos:        position{line: 312, col: 5, offset: 10031},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 314, col: 5, offset: 10097},
							label: "firstPositionalAttribute",
							expr: &zeroOrOneExpr{
								pos: position{line: 314, col: 30, offset: 10122},
								expr: &ruleRefExpr{
									pos:  position{line: 314, col: 31, offset: 10123},
									name: "FirstPositionalAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 315, col: 5, offset: 10154},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 315, col: 21, offset: 10170},
								expr: &choiceExpr{
									pos: position{line: 315, col: 22, offset: 10171},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 315, col: 22, offset: 10171},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 315, col: 44, offset: 10193},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 316, col: 5, offset: 10214},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttribute",
			pos:  position{line: 327, col: 1, offset: 10671},
			expr: &actionExpr{
				pos: position{line: 328, col: 5, offset: 10704},
				run: (*parser).callonFirstPositionalAttribute1,
				expr: &seqExpr{
					pos: position{line: 328, col: 5, offset: 10704},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 328, col: 5, offset: 10704},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 328, col: 10, offset: 10709},
								expr: &ruleRefExpr{
									pos:  position{line: 329, col: 9, offset: 10719},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 331, col: 5, offset: 10749},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 331, col: 12, offset: 10756},
								expr: &choiceExpr{
									pos: position{line: 332, col: 9, offset: 10767},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 332, col: 9, offset: 10767},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 333, col: 11, offset: 10799},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 334, col: 11, offset: 10834},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 335, col: 8, offset: 10867},
							expr: &seqExpr{
								pos: position{line: 335, col: 9, offset: 10868},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 335, col: 9, offset: 10868},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 335, col: 13, offset: 10872},
										expr: &ruleRefExpr{
											pos:  position{line: 335, col: 13, offset: 10872},
											name: "Space",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 336, col: 5, offset: 10886},
							run: (*parser).callonFirstPositionalAttribute17,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 350, col: 1, offset: 11243},
			expr: &actionExpr{
				pos: position{line: 350, col: 25, offset: 11267},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 350, col: 25, offset: 11267},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 350, col: 25, offset: 11267},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 29, offset: 11271},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 33, offset: 11275},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 358, col: 1, offset: 11438},
			expr: &actionExpr{
				pos: position{line: 358, col: 23, offset: 11460},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 358, col: 23, offset: 11460},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 358, col: 30, offset: 11467},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 367, col: 1, offset: 11685},
			expr: &actionExpr{
				pos: position{line: 367, col: 30, offset: 11714},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 367, col: 30, offset: 11714},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 367, col: 30, offset: 11714},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 367, col: 34, offset: 11718},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 40, offset: 11724},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 372, col: 1, offset: 11838},
			expr: &actionExpr{
				pos: position{line: 372, col: 29, offset: 11866},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 372, col: 29, offset: 11866},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 372, col: 29, offset: 11866},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 372, col: 33, offset: 11870},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 372, col: 41, offset: 11878},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 377, col: 1, offset: 11983},
			expr: &choiceExpr{
				pos: position{line: 378, col: 5, offset: 12015},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 378, col: 5, offset: 12015},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 379, col: 7, offset: 12049},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 380, col: 7, offset: 12083},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 380, col: 7, offset: 12083},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 380, col: 7, offset: 12083},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 380, col: 16, offset: 12092},
										expr: &choiceExpr{
											pos: position{line: 383, col: 5, offset: 12262},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 383, col: 6, offset: 12263},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 383, col: 6, offset: 12263},
														expr: &charClassMatcher{
															pos:        position{line: 383, col: 6, offset: 12263},
															val:        "[^,=.%# \\r\\n\\uFFFD{\\]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 386, col: 5, offset: 12357},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 387, col: 5, offset: 12382},
													name: "AttrSub",
												},
												&actionExpr{
													pos: position{line: 388, col: 6, offset: 12397},
													run: (*parser).callonShortHandAttributeValue14,
													expr: &litMatcher{
														pos:        position{line: 388, col: 6, offset: 12397},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 390, col: 10, offset: 12467},
									expr: &charClassMatcher{
										pos:        position{line: 390, col: 11, offset: 12468},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 394, col: 1, offset: 12544},
			expr: &choiceExpr{
				pos: position{line: 394, col: 24, offset: 12567},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 395, col: 5, offset: 12573},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 395, col: 5, offset: 12573},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 395, col: 5, offset: 12573},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 395, col: 12, offset: 12580},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 395, col: 29, offset: 12597},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 395, col: 29, offset: 12597},
											expr: &seqExpr{
												pos: position{line: 395, col: 30, offset: 12598},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 395, col: 30, offset: 12598},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 395, col: 34, offset: 12602},
														expr: &ruleRefExpr{
															pos:  position{line: 395, col: 34, offset: 12602},
															name: "Space",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 395, col: 45, offset: 12613},
											expr: &litMatcher{
												pos:        position{line: 395, col: 46, offset: 12614},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 404, col: 6, offset: 12865},
						run: (*parser).callonPositionalAttribute14,
						expr: &seqExpr{
							pos: position{line: 404, col: 6, offset: 12865},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 404, col: 6, offset: 12865},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 404, col: 13, offset: 12872},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 404, col: 13, offset: 12872},
												expr: &ruleRefExpr{
													pos:  position{line: 404, col: 13, offset: 12872},
													name: "Space",
												},
											},
											&choiceExpr{
												pos: position{line: 404, col: 21, offset: 12880},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 404, col: 22, offset: 12881},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 404, col: 22, offset: 12881},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 404, col: 26, offset: 12885},
																expr: &ruleRefExpr{
																	pos:  position{line: 404, col: 26, offset: 12885},
																	name: "Space",
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 404, col: 36, offset: 12895},
														expr: &litMatcher{
															pos:        position{line: 404, col: 37, offset: 12896},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 405, col: 5, offset: 12906},
									run: (*parser).callonPositionalAttribute27,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 420, col: 1, offset: 13341},
			expr: &actionExpr{
				pos: position{line: 420, col: 19, offset: 13359},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 420, col: 19, offset: 13359},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 420, col: 19, offset: 13359},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 24, offset: 13364},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 420, col: 43, offset: 13383},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 420, col: 47, offset: 13387},
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 47, offset: 13387},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 420, col: 54, offset: 13394},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 61, offset: 13401},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 420, col: 77, offset: 13417},
							expr: &seqExpr{
								pos: position{line: 420, col: 78, offset: 13418},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 420, col: 78, offset: 13418},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 420, col: 82, offset: 13422},
										expr: &ruleRefExpr{
											pos:  position{line: 420, col: 82, offset: 13422},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 429, col: 1, offset: 13735},
			expr: &actionExpr{
				pos: position{line: 429, col: 22, offset: 13756},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 429, col: 22, offset: 13756},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 429, col: 22, offset: 13756},
							expr: &ruleRefExpr{
								pos:  position{line: 429, col: 23, offset: 13757},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 429, col: 29, offset: 13763},
							expr: &charClassMatcher{
								pos:        position{line: 429, col: 29, offset: 13763},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 429, col: 42, offset: 13776},
							expr: &ruleRefExpr{
								pos:  position{line: 429, col: 42, offset: 13776},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 433, col: 1, offset: 13838},
			expr: &actionExpr{
				pos: position{line: 434, col: 5, offset: 13861},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 434, col: 5, offset: 13861},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 434, col: 5, offset: 13861},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 435, col: 9, offset: 13877},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 435, col: 9, offset: 13877},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 436, col: 11, offset: 13915},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 437, col: 11, offset: 13953},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 439, col: 5, offset: 13987},
							expr: &notExpr{
								pos: position{line: 439, col: 7, offset: 13989},
								expr: &seqExpr{
									pos: position{line: 439, col: 9, offset: 13991},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 439, col: 9, offset: 13991},
											expr: &ruleRefExpr{
												pos:  position{line: 439, col: 9, offset: 13991},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 439, col: 16, offset: 13998},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 443, col: 1, offset: 14039},
			expr: &actionExpr{
				pos: position{line: 444, col: 5, offset: 14074},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 444, col: 5, offset: 14074},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 444, col: 5, offset: 14074},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 445, col: 5, offset: 14083},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 445, col: 14, offset: 14092},
								expr: &choiceExpr{
									pos: position{line: 446, col: 9, offset: 14102},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 446, col: 10, offset: 14103},
											run: (*parser).callonSingleQuotedAttributeValue7,
											expr: &oneOrMoreExpr{
												pos: position{line: 446, col: 10, offset: 14103},
												expr: &charClassMatcher{
													pos:        position{line: 446, col: 10, offset: 14103},
													val:        "[^'\\r\\n\\uFFFD\\\\{]",
													chars:      []rune{'\'', '\r', '\n', '�', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 449, col: 11, offset: 14249},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 450, col: 11, offset: 14278},
											name: "AttrSub",
										},
										&choiceExpr{
											pos: position{line: 451, col: 12, offset: 14297},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 451, col: 12, offset: 14297},
													run: (*parser).callonSingleQuotedAttributeValue13,
													expr: &litMatcher{
														pos:        position{line: 451, col: 12, offset: 14297},
														val:        "\\'",
														ignoreCase: false,
														want:       "\"\\\\'\"",
													},
												},
												&litMatcher{
													pos:        position{line: 454, col: 11, offset: 14389},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 454, col: 17, offset: 14395},
													run: (*parser).callonSingleQuotedAttributeValue16,
													expr: &litMatcher{
														pos:        position{line: 454, col: 17, offset: 14395},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 458, col: 5, offset: 14484},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 462, col: 1, offset: 14540},
			expr: &actionExpr{
				pos: position{line: 463, col: 5, offset: 14575},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 463, col: 5, offset: 14575},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 463, col: 5, offset: 14575},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 464, col: 5, offset: 14585},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 464, col: 14, offset: 14594},
								expr: &choiceExpr{
									pos: position{line: 465, col: 9, offset: 14604},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 465, col: 10, offset: 14605},
											run: (*parser).callonDoubleQuotedAttributeValue7,
											expr: &oneOrMoreExpr{
												pos: position{line: 465, col: 10, offset: 14605},
												expr: &charClassMatcher{
													pos:        position{line: 465, col: 10, offset: 14605},
													val:        "[^\\r\\n\\uFFFD\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 468, col: 11, offset: 14751},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 469, col: 11, offset: 14780},
											name: "AttrSub",
										},
										&choiceExpr{
											pos: position{line: 470, col: 12, offset: 14799},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 470, col: 12, offset: 14799},
													run: (*parser).callonDoubleQuotedAttributeValue13,
													expr: &litMatcher{
														pos:        position{line: 470, col: 12, offset: 14799},
														val:        "\\\"",
														ignoreCase: false,
														want:       "\"\\\\\\\"\"",
													},
												},
												&litMatcher{
													pos:        position{line: 473, col: 11, offset: 14891},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 473, col: 17, offset: 14897},
													run: (*parser).callonDoubleQuotedAttributeValue16,
													expr: &litMatcher{
														pos:        position{line: 473, col: 17, offset: 14897},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 477, col: 5, offset: 14986},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 482, col: 1, offset: 15121},
			expr: &actionExpr{
				pos: position{line: 483, col: 5, offset: 15152},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 483, col: 5, offset: 15152},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 483, col: 5, offset: 15152},
							expr: &ruleRefExpr{
								pos:  position{line: 483, col: 6, offset: 15153},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 484, col: 5, offset: 15163},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 484, col: 14, offset: 15172},
								expr: &choiceExpr{
									pos: position{line: 485, col: 9, offset: 15182},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 485, col: 10, offset: 15183},
											run: (*parser).callonUnquotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 485, col: 10, offset: 15183},
												expr: &charClassMatcher{
													pos:        position{line: 485, col: 10, offset: 15183},
													val:        "[^,=\\r\\n\\uFFFD{\\]]",
													chars:      []rune{',', '=', '\r', '\n', '�', '{', ']'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 488, col: 11, offset: 15285},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 489, col: 11, offset: 15314},
											name: "AttrSub",
										},
										&actionExpr{
											pos: position{line: 490, col: 12, offset: 15333},
											run: (*parser).callonUnquotedAttributeValue13,
											expr: &litMatcher{
												pos:        position{line: 490, col: 12, offset: 15333},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 494, col: 5, offset: 15421},
							run: (*parser).callonUnquotedAttributeValue15,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 505, col: 1, offset: 15722},
			expr: &actionExpr{
				pos: position{line: 505, col: 12, offset: 15733},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 505, col: 12, offset: 15733},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 505, col: 12, offset: 15733},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 505, col: 23, offset: 15744},
								expr: &ruleRefExpr{
									pos:  position{line: 505, col: 24, offset: 15745},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 506, col: 5, offset: 15767},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 506, col: 12, offset: 15774},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 506, col: 12, offset: 15774},
									expr: &litMatcher{
										pos:        position{line: 506, col: 13, offset: 15775},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 510, col: 5, offset: 15866},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 514, col: 5, offset: 16018},
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 5, offset: 16018},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 514, col: 12, offset: 16025},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 19, offset: 16032},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 514, col: 34, offset: 16047},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 514, col: 38, offset: 16051},
								expr: &ruleRefExpr{
									pos:  position{line: 514, col: 38, offset: 16051},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 514, col: 56, offset: 16069},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 518, col: 1, offset: 16175},
			expr: &actionExpr{
				pos: position{line: 518, col: 18, offset: 16192},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 518, col: 18, offset: 16192},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 518, col: 27, offset: 16201},
						expr: &seqExpr{
							pos: position{line: 518, col: 28, offset: 16202},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 518, col: 28, offset: 16202},
									expr: &ruleRefExpr{
										pos:  position{line: 518, col: 29, offset: 16203},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 518, col: 37, offset: 16211},
									expr: &ruleRefExpr{
										pos:  position{line: 518, col: 38, offset: 16212},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 518, col: 54, offset: 16228},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 522, col: 1, offset: 16349},
			expr: &actionExpr{
				pos: position{line: 522, col: 17, offset: 16365},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 522, col: 17, offset: 16365},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 522, col: 26, offset: 16374},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 522, col: 26, offset: 16374},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 523, col: 11, offset: 16389},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 524, col: 11, offset: 16434},
								expr: &ruleRefExpr{
									pos:  position{line: 524, col: 11, offset: 16434},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 525, col: 11, offset: 16452},
								name: "ElementPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 526, col: 11, offset: 16481},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 533, col: 1, offset: 16632},
			expr: &seqExpr{
				pos: position{line: 533, col: 31, offset: 16662},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 533, col: 31, offset: 16662},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 533, col: 41, offset: 16672},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 538, col: 1, offset: 16783},
			expr: &actionExpr{
				pos: position{line: 538, col: 19, offset: 16801},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 538, col: 19, offset: 16801},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 538, col: 19, offset: 16801},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 25, offset: 16807},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 538, col: 40, offset: 16822},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 538, col: 45, offset: 16827},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 52, offset: 16834},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 538, col: 68, offset: 16850},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 86, offset: 16868},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 542, col: 1, offset: 16991},
			expr: &actionExpr{
				pos: position{line: 542, col: 20, offset: 17010},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 542, col: 20, offset: 17010},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 542, col: 20, offset: 17010},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 542, col: 26, offset: 17016},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 542, col: 41, offset: 17031},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 542, col: 45, offset: 17035},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 542, col: 52, offset: 17042},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 542, col: 68, offset: 17058},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 542, col: 86, offset: 17076},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 546, col: 1, offset: 17200},
			expr: &actionExpr{
				pos: position{line: 546, col: 18, offset: 17217},
				run: (*parser).callonUserMacroName1,
				expr: &seqExpr{
					pos: position{line: 546, col: 18, offset: 17217},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 546, col: 18, offset: 17217},
							expr: &litMatcher{
								pos:        position{line: 546, col: 19, offset: 17218},
								val:        "include",
								ignoreCase: false,
								want:       "\"include\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 546, col: 30, offset: 17229},
							expr: &charClassMatcher{
								pos:        position{line: 546, col: 30, offset: 17229},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 550, col: 1, offset: 17278},
			expr: &actionExpr{
				pos: position{line: 550, col: 19, offset: 17296},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 550, col: 19, offset: 17296},
					expr: &charClassMatcher{
						pos:        position{line: 550, col: 19, offset: 17296},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 557, col: 1, offset: 17455},
			expr: &actionExpr{
				pos: position{line: 558, col: 5, offset: 17477},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 558, col: 5, offset: 17477},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 558, col: 5, offset: 17477},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 559, col: 9, offset: 17492},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 559, col: 9, offset: 17492},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 559, col: 9, offset: 17492},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 560, col: 9, offset: 17513},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 560, col: 15, offset: 17519},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 561, col: 9, offset: 17542},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 561, col: 27, offset: 17560},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 565, col: 5, offset: 17720},
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 5, offset: 17720},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 565, col: 12, offset: 17727},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 569, col: 1, offset: 17787},
			expr: &ruleRefExpr{
				pos:  position{line: 569, col: 26, offset: 17812},
				name: "LongHandAttributes",
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 572, col: 1, offset: 17852},
			expr: &actionExpr{
				pos: position{line: 572, col: 15, offset: 17866},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 572, col: 15, offset: 17866},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 572, col: 15, offset: 17866},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 572, col: 22, offset: 17873},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 572, col: 22, offset: 17873},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 573, col: 11, offset: 17903},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 574, col: 11, offset: 17929},
										name: "SingleLineRange",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 575, col: 11, offset: 17956},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 579, col: 1, offset: 18038},
			expr: &actionExpr{
				pos: position{line: 579, col: 23, offset: 18060},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 579, col: 23, offset: 18060},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 579, col: 23, offset: 18060},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 579, col: 30, offset: 18067},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 579, col: 30, offset: 18067},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 579, col: 47, offset: 18084},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 580, col: 5, offset: 18106},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 580, col: 12, offset: 18113},
								expr: &actionExpr{
									pos: position{line: 581, col: 9, offset: 18123},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 581, col: 9, offset: 18123},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 581, col: 10, offset: 18124},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 581, col: 10, offset: 18124},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 581, col: 16, offset: 18130},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 582, col: 9, offset: 18241},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 582, col: 16, offset: 18248},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 582, col: 16, offset: 18248},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 582, col: 33, offset: 18265},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 588, col: 1, offset: 18407},
			expr: &actionExpr{
				pos: position{line: 588, col: 19, offset: 18425},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 588, col: 19, offset: 18425},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 588, col: 19, offset: 18425},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 588, col: 26, offset: 18432},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 588, col: 34, offset: 18440},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 588, col: 39, offset: 18445},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 588, col: 44, offset: 18450},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 592, col: 1, offset: 18538},
			expr: &actionExpr{
				pos: position{line: 592, col: 20, offset: 18557},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 592, col: 20, offset: 18557},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 592, col: 32, offset: 18569},
						name: "Number",
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 597, col: 1, offset: 18684},
			expr: &actionExpr{
				pos: position{line: 597, col: 14, offset: 18697},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 597, col: 14, offset: 18697},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 597, col: 14, offset: 18697},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 21, offset: 18704},
								name: "MultipleTagRanges",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 597, col: 40, offset: 18723},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 601, col: 1, offset: 18805},
			expr: &actionExpr{
				pos: position{line: 601, col: 22, offset: 18826},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 601, col: 22, offset: 18826},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 601, col: 22, offset: 18826},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 29, offset: 18833},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 602, col: 5, offset: 18847},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 602, col: 12, offset: 18854},
								expr: &actionExpr{
									pos: position{line: 603, col: 9, offset: 18864},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 603, col: 9, offset: 18864},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 603, col: 10, offset: 18865},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 603, col: 10, offset: 18865},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 603, col: 16, offset: 18871},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 604, col: 9, offset: 18982},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 604, col: 16, offset: 18989},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 610, col: 1, offset: 19124},
			expr: &choiceExpr{
				pos: position{line: 610, col: 13, offset: 19136},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 610, col: 13, offset: 19136},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 610, col: 13, offset: 19136},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 610, col: 18, offset: 19141},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 610, col: 18, offset: 19141},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 610, col: 30, offset: 19153},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 612, col: 5, offset: 19221},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 612, col: 5, offset: 19221},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 612, col: 5, offset: 19221},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 612, col: 9, offset: 19225},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 612, col: 14, offset: 19230},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 612, col: 14, offset: 19230},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 612, col: 26, offset: 19242},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 616, col: 1, offset: 19310},
			expr: &actionExpr{
				pos: position{line: 616, col: 16, offset: 19325},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 616, col: 16, offset: 19325},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 616, col: 16, offset: 19325},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 616, col: 23, offset: 19332},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 616, col: 23, offset: 19332},
									expr: &litMatcher{
										pos:        position{line: 616, col: 24, offset: 19333},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 619, col: 5, offset: 19387},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 629, col: 1, offset: 19681},
			expr: &actionExpr{
				pos: position{line: 629, col: 21, offset: 19701},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 629, col: 21, offset: 19701},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 629, col: 21, offset: 19701},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 629, col: 29, offset: 19709},
								expr: &choiceExpr{
									pos: position{line: 629, col: 30, offset: 19710},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 629, col: 30, offset: 19710},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 629, col: 53, offset: 19733},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 629, col: 74, offset: 19754},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 629, col: 74, offset: 19754,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 629, col: 107, offset: 19787},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 633, col: 1, offset: 19858},
			expr: &actionExpr{
				pos: position{line: 633, col: 25, offset: 19882},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 633, col: 25, offset: 19882},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 633, col: 25, offset: 19882},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 633, col: 33, offset: 19890},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 633, col: 38, offset: 19895},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 633, col: 38, offset: 19895},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 633, col: 78, offset: 19935},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 637, col: 1, offset: 20000},
			expr: &actionExpr{
				pos: position{line: 637, col: 23, offset: 20022},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 637, col: 23, offset: 20022},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 637, col: 23, offset: 20022},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 637, col: 31, offset: 20030},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 637, col: 36, offset: 20035},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 637, col: 36, offset: 20035},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 637, col: 76, offset: 20075},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 644, col: 1, offset: 20239},
			expr: &choiceExpr{
				pos: position{line: 644, col: 18, offset: 20256},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 644, col: 18, offset: 20256},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 644, col: 18, offset: 20256},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 27, offset: 20265},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 646, col: 9, offset: 20322},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 646, col: 9, offset: 20322},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 646, col: 15, offset: 20328},
								expr: &ruleRefExpr{
									pos:  position{line: 646, col: 16, offset: 20329},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 650, col: 1, offset: 20421},
			expr: &actionExpr{
				pos: position{line: 650, col: 22, offset: 20442},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 650, col: 22, offset: 20442},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 650, col: 22, offset: 20442},
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 23, offset: 20443},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 651, col: 5, offset: 20451},
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 6, offset: 20452},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 652, col: 5, offset: 20466},
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 6, offset: 20467},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 653, col: 5, offset: 20489},
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 6, offset: 20490},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 654, col: 5, offset: 20516},
							expr: &ruleRefExpr{
								pos:  position{line: 654, col: 6, offset: 20517},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 655, col: 5, offset: 20545},
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 6, offset: 20546},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 656, col: 5, offset: 20572},
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 6, offset: 20573},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 657, col: 5, offset: 20598},
							expr: &ruleRefExpr{
								pos:  position{line: 657, col: 6, offset: 20599},
								name: "BlockAttributes",
							},
						},
						&notExpr{
							pos: position{line: 658, col: 5, offset: 20619},
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 6, offset: 20620},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 659, col: 5, offset: 20639},
							expr: &ruleRefExpr{
								pos:  position{line: 659, col: 6, offset: 20640},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 660, col: 5, offset: 20667},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 660, col: 11, offset: 20673},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 660, col: 11, offset: 20673},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 660, col: 11, offset: 20673},
											expr: &ruleRefExpr{
												pos:  position{line: 660, col: 11, offset: 20673},
												name: "Space",
											},
										},
										&labeledExpr{
											pos:   position{line: 660, col: 18, offset: 20680},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 660, col: 27, offset: 20689},
												expr: &ruleRefExpr{
													pos:  position{line: 660, col: 28, offset: 20690},
													name: "InlineElement",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 662, col: 12, offset: 20789},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 666, col: 1, offset: 20828},
			expr: &seqExpr{
				pos: position{line: 666, col: 25, offset: 20852},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 666, col: 25, offset: 20852},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 666, col: 29, offset: 20856},
						expr: &ruleRefExpr{
							pos:  position{line: 666, col: 29, offset: 20856},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 666, col: 36, offset: 20863},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 668, col: 1, offset: 20935},
			expr: &actionExpr{
				pos: position{line: 668, col: 29, offset: 20963},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 668, col: 29, offset: 20963},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 668, col: 29, offset: 20963},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 668, col: 50, offset: 20984},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 668, col: 58, offset: 20992},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 672, col: 1, offset: 21098},
			expr: &actionExpr{
				pos: position{line: 672, col: 29, offset: 21126},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 672, col: 29, offset: 21126},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 672, col: 29, offset: 21126},
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 30, offset: 21127},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 673, col: 5, offset: 21136},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 673, col: 14, offset: 21145},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 673, col: 14, offset: 21145},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 674, col: 11, offset: 21170},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 675, col: 11, offset: 21198},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 11, offset: 21214},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 677, col: 11, offset: 21235},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 678, col: 11, offset: 21259},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 679, col: 11, offset: 21286},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 680, col: 11, offset: 21315},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 681, col: 11, offset: 21342},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 682, col: 11, offset: 21393},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 683, col: 11, offset: 21417},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 684, col: 11, offset: 21449},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 685, col: 11, offset: 21475},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 686, col: 11, offset: 21512},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 11, offset: 21537},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 694, col: 1, offset: 21703},
			expr: &actionExpr{
				pos: position{line: 694, col: 20, offset: 21722},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 694, col: 20, offset: 21722},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 694, col: 20, offset: 21722},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 694, col: 31, offset: 21733},
								expr: &ruleRefExpr{
									pos:  position{line: 694, col: 32, offset: 21734},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 694, col: 50, offset: 21752},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 694, col: 58, offset: 21760},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 694, col: 81, offset: 21783},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 694, col: 90, offset: 21792},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 698, col: 1, offset: 21932},
			expr: &actionExpr{
				pos: position{line: 699, col: 5, offset: 21962},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 699, col: 5, offset: 21962},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 699, col: 5, offset: 21962},
							expr: &ruleRefExpr{
								pos:  position{line: 699, col: 5, offset: 21962},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 699, col: 12, offset: 21969},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 701, col: 9, offset: 22032},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 701, col: 9, offset: 22032},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 701, col: 9, offset: 22032},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 701, col: 9, offset: 22032},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 701, col: 16, offset: 22039},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 701, col: 16, offset: 22039},
															expr: &litMatcher{
																pos:        position{line: 701, col: 17, offset: 22040},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 705, col: 9, offset: 22140},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 724, col: 11, offset: 22857},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 724, col: 11, offset: 22857},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 724, col: 11, offset: 22857},
													expr: &charClassMatcher{
														pos:        position{line: 724, col: 12, offset: 22858},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 724, col: 20, offset: 22866},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 726, col: 13, offset: 22977},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 726, col: 13, offset: 22977},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 726, col: 14, offset: 22978},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 726, col: 21, offset: 22985},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 728, col: 13, offset: 23099},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 728, col: 13, offset: 23099},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 728, col: 14, offset: 23100},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 728, col: 21, offset: 23107},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 730, col: 13, offset: 23221},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 730, col: 13, offset: 23221},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 730, col: 13, offset: 23221},
													expr: &charClassMatcher{
														pos:        position{line: 730, col: 14, offset: 23222},
														val:        "[ivxdlcm]",
														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 730, col: 26, offset: 23234},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 732, col: 13, offset: 23348},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 732, col: 13, offset: 23348},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 732, col: 13, offset: 23348},
													expr: &charClassMatcher{
														pos:        position{line: 732, col: 14, offset: 23349},
														val:        "[IVXDLCM]",
														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 732, col: 26, offset: 23361},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 734, col: 12, offset: 23474},
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 12, offset: 23474},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 738, col: 1, offset: 23509},
			expr: &actionExpr{
				pos: position{line: 738, col: 27, offset: 23535},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 738, col: 27, offset: 23535},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 738, col: 37, offset: 23545},
						expr: &ruleRefExpr{
							pos:  position{line: 738, col: 37, offset: 23545},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 745, col: 1, offset: 23745},
			expr: &actionExpr{
				pos: position{line: 746, col: 5, offset: 23771},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 746, col: 5, offset: 23771},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 746, col: 5, offset: 23771},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 746, col: 16, offset: 23782},
								expr: &ruleRefExpr{
									pos:  position{line: 746, col: 17, offset: 23783},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 747, col: 5, offset: 23806},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 13, offset: 23814},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 748, col: 5, offset: 23844},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 748, col: 16, offset: 23855},
								expr: &ruleRefExpr{
									pos:  position{line: 748, col: 17, offset: 23856},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 749, col: 5, offset: 23891},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 749, col: 14, offset: 23900},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 753, col: 1, offset: 24066},
			expr: &actionExpr{
				pos: position{line: 754, col: 5, offset: 24098},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 754, col: 5, offset: 24098},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 754, col: 5, offset: 24098},
							expr: &ruleRefExpr{
								pos:  position{line: 754, col: 5, offset: 24098},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 754, col: 12, offset: 24105},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 754, col: 20, offset: 24113},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 756, col: 9, offset: 24170},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 756, col: 9, offset: 24170},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 756, col: 9, offset: 24170},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 756, col: 16, offset: 24177},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 756, col: 16, offset: 24177},
															expr: &litMatcher{
																pos:        position{line: 756, col: 17, offset: 24178},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 760, col: 9, offset: 24278},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 777, col: 14, offset: 24985},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 777, col: 21, offset: 24992},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 777, col: 22, offset: 24993},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 779, col: 13, offset: 25079},
							expr: &ruleRefExpr{
								pos:  position{line: 779, col: 13, offset: 25079},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 783, col: 1, offset: 25115},
			expr: &actionExpr{
				pos: position{line: 783, col: 32, offset: 25146},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 783, col: 32, offset: 25146},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 783, col: 32, offset: 25146},
							expr: &litMatcher{
								pos:        position{line: 783, col: 33, offset: 25147},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 783, col: 37, offset: 25151},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 784, col: 7, offset: 25165},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 784, col: 7, offset: 25165},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 784, col: 7, offset: 25165},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 785, col: 7, offset: 25210},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 785, col: 7, offset: 25210},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 786, col: 7, offset: 25253},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 786, col: 7, offset: 25253},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 787, col: 7, offset: 25295},
							expr: &ruleRefExpr{
								pos:  position{line: 787, col: 7, offset: 25295},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 791, col: 1, offset: 25337},
			expr: &actionExpr{
				pos: position{line: 791, col: 29, offset: 25365},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 791, col: 29, offset: 25365},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 791, col: 39, offset: 25375},
						expr: &ruleRefExpr{
							pos:  position{line: 791, col: 39, offset: 25375},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 798, col: 1, offset: 25691},
			expr: &actionExpr{
				pos: position{line: 798, col: 20, offset: 25710},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 798, col: 20, offset: 25710},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 798, col: 20, offset: 25710},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 798, col: 31, offset: 25721},
								expr: &ruleRefExpr{
									pos:  position{line: 798, col: 32, offset: 25722},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 798, col: 50, offset: 25740},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 798, col: 56, offset: 25746},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 798, col: 85, offset: 25775},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 798, col: 96, offset: 25786},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 798, col: 122, offset: 25812},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 798, col: 134, offset: 25824},
								expr: &ruleRefExpr{
									pos:  position{line: 798, col: 135, offset: 25825},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 802, col: 1, offset: 25971},
			expr: &seqExpr{
				pos: position{line: 802, col: 26, offset: 25996},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 802, col: 26, offset: 25996},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 802, col: 54, offset: 26024},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 804, col: 1, offset: 26050},
			expr: &choiceExpr{
				pos: position{line: 804, col: 33, offset: 26082},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 804, col: 33, offset: 26082},
						expr: &charClassMatcher{
							pos:        position{line: 804, col: 33, offset: 26082},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 804, col: 45, offset: 26094},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 804, col: 45, offset: 26094},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 804, col: 49, offset: 26098},
								expr: &litMatcher{
									pos:        position{line: 804, col: 50, offset: 26099},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 805, col: 1, offset: 26103},
			expr: &actionExpr{
				pos: position{line: 805, col: 32, offset: 26134},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 805, col: 32, offset: 26134},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 805, col: 42, offset: 26144},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 805, col: 42, offset: 26144},
							expr: &ruleRefExpr{
								pos:  position{line: 805, col: 42, offset: 26144},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 812, col: 1, offset: 26319},
			expr: &actionExpr{
				pos: position{line: 812, col: 24, offset: 26342},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 812, col: 24, offset: 26342},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 812, col: 33, offset: 26351},
						expr: &seqExpr{
							pos: position{line: 812, col: 34, offset: 26352},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 812, col: 34, offset: 26352},
									expr: &ruleRefExpr{
										pos:  position{line: 812, col: 35, offset: 26353},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 812, col: 43, offset: 26361},
									expr: &litMatcher{
										pos:        position{line: 812, col: 44, offset: 26362},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 812, col: 49, offset: 26367},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 816, col: 1, offset: 26464},
			expr: &actionExpr{
				pos: position{line: 816, col: 31, offset: 26494},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 816, col: 31, offset: 26494},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 816, col: 40, offset: 26503},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 816, col: 40, offset: 26503},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 817, col: 11, offset: 26518},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 818, col: 11, offset: 26567},
								expr: &ruleRefExpr{
									pos:  position{line: 818, col: 11, offset: 26567},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 819, col: 11, offset: 26585},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 820, col: 11, offset: 26610},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 821, col: 11, offset: 26639},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 822, col: 11, offset: 26659},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 823, col: 11, offset: 26748},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 824, col: 11, offset: 26769},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 825, col: 11, offset: 26792},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 826, col: 11, offset: 26807},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 827, col: 11, offset: 26832},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 828, col: 11, offset: 26855},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 829, col: 11, offset: 26876},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 830, col: 11, offset: 26903},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 831, col: 11, offset: 26920},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 832, col: 11, offset: 26952},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 836, col: 1, offset: 26991},
			expr: &actionExpr{
				pos: position{line: 837, col: 5, offset: 27024},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 837, col: 5, offset: 27024},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 837, col: 5, offset: 27024},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 837, col: 16, offset: 27035},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 837, col: 16, offset: 27035},
									expr: &litMatcher{
										pos:        position{line: 837, col: 17, offset: 27036},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 840, col: 5, offset: 27094},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 844, col: 6, offset: 27270},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 844, col: 6, offset: 27270},
									expr: &choiceExpr{
										pos: position{line: 844, col: 7, offset: 27271},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 844, col: 7, offset: 27271},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 844, col: 15, offset: 27279},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 844, col: 27, offset: 27291},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 848, col: 1, offset: 27331},
			expr: &actionExpr{
				pos: position{line: 848, col: 31, offset: 27361},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 848, col: 31, offset: 27361},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 848, col: 40, offset: 27370},
						expr: &ruleRefExpr{
							pos:  position{line: 848, col: 41, offset: 27371},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 855, col: 1, offset: 27562},
			expr: &choiceExpr{
				pos: position{line: 855, col: 19, offset: 27580},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 855, col: 19, offset: 27580},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 855, col: 19, offset: 27580},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 857, col: 5, offset: 27618},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 857, col: 5, offset: 27618},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 859, col: 5, offset: 27658},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 859, col: 5, offset: 27658},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 861, col: 5, offset: 27708},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 861, col: 5, offset: 27708},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 863, col: 5, offset: 27754},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 863, col: 5, offset: 27754},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 875, col: 1, offset: 28134},
			expr: &choiceExpr{
				pos: position{line: 877, col: 6, offset: 28185},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 877, col: 6, offset: 28185},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 877, col: 6, offset: 28185},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 877, col: 6, offset: 28185},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 877, col: 17, offset: 28196},
										expr: &ruleRefExpr{
											pos:  position{line: 877, col: 18, offset: 28197},
											name: "BlockAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 877, col: 36, offset: 28215},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 877, col: 39, offset: 28218},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 877, col: 55, offset: 28234},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 877, col: 60, offset: 28239},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 877, col: 66, offset: 28245},
										expr: &choiceExpr{
											pos: position{line: 877, col: 67, offset: 28246},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 877, col: 67, offset: 28246},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 877, col: 87, offset: 28266},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 882, col: 5, offset: 28487},
						run: (*parser).callonRawParagraph15,
						expr: &seqExpr{
							pos: position{line: 882, col: 5, offset: 28487},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 882, col: 5, offset: 28487},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 882, col: 16, offset: 28498},
										expr: &ruleRefExpr{
											pos:  position{line: 882, col: 17, offset: 28499},
											name: "BlockAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 882, col: 35, offset: 28517},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 882, col: 40, offset: 28522},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 882, col: 49, offset: 28531},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 886, col: 5, offset: 28704},
						run: (*parser).callonRawParagraph23,
						expr: &seqExpr{
							pos: position{line: 886, col: 5, offset: 28704},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 886, col: 5, offset: 28704},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 886, col: 16, offset: 28715},
										expr: &ruleRefExpr{
											pos:  position{line: 886, col: 17, offset: 28716},
											name: "BlockAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 886, col: 35, offset: 28734},
									run: (*parser).callonRawParagraph28,
								},
								&labeledExpr{
									pos:   position{line: 889, col: 7, offset: 28912},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 889, col: 15, offset: 28920},
										expr: &ruleRefExpr{
											pos:  position{line: 889, col: 16, offset: 28921},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 893, col: 5, offset: 29087},
						run: (*parser).callonRawParagraph32,
						expr: &seqExpr{
							pos: position{line: 893, col: 5, offset: 29087},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 893, col: 5, offset: 29087},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 893, col: 16, offset: 29098},
										expr: &ruleRefExpr{
											pos:  position{line: 893, col: 17, offset: 29099},
											name: "BlockAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 893, col: 35, offset: 29117},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 893, col: 41, offset: 29123},
										expr: &choiceExpr{
											pos: position{line: 893, col: 42, offset: 29124},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 893, col: 42, offset: 29124},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 893, col: 62, offset: 29144},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 897, col: 1, offset: 29242},
			expr: &oneOrMoreExpr{
				pos: position{line: 897, col: 33, offset: 29274},
				expr: &actionExpr{
					pos: position{line: 897, col: 34, offset: 29275},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 897, col: 34, offset: 29275},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 897, col: 34, offset: 29275},
								expr: &ruleRefExpr{
									pos:  position{line: 897, col: 35, offset: 29276},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 897, col: 45, offset: 29286},
								expr: &litMatcher{
									pos:        position{line: 897, col: 45, offset: 29286},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 897, col: 51, offset: 29292},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 897, col: 60, offset: 29301},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 901, col: 1, offset: 29342},
			expr: &actionExpr{
				pos: position{line: 901, col: 21, offset: 29362},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 901, col: 21, offset: 29362},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 901, col: 21, offset: 29362},
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 22, offset: 29363},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 902, col: 5, offset: 29383},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 902, col: 14, offset: 29392},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 902, col: 39, offset: 29417},
							name: "EOL",
						},
						&andCodeExpr{
							pos: position{line: 902, col: 43, offset: 29421},
							run: (*parser).callonRawParagraphLine8,
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 912, col: 1, offset: 29656},
			expr: &actionExpr{
				pos: position{line: 912, col: 28, offset: 29683},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 912, col: 28, offset: 29683},
					expr: &charClassMatcher{
						pos:        position{line: 912, col: 28, offset: 29683},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SimpleRawParagraph",
			pos:  position{line: 917, col: 1, offset: 29800},
			expr: &actionExpr{
				pos: position{line: 917, col: 23, offset: 29822},
				run: (*parser).callonSimpleRawParagraph1,
				expr: &seqExpr{
					pos: position{line: 917, col: 23, offset: 29822},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 917, col: 23, offset: 29822},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 917, col: 34, offset: 29833},
								expr: &ruleRefExpr{
									pos:  position{line: 917, col: 35, offset: 29834},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 918, col: 5, offset: 29857},
							run: (*parser).callonSimpleRawParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 921, col: 5, offset: 29969},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 921, col: 16, offset: 29980},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 922, col: 5, offset: 30006},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 922, col: 16, offset: 30017},
								expr: &choiceExpr{
									pos: position{line: 922, col: 17, offset: 30018},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 922, col: 17, offset: 30018},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 922, col: 37, offset: 30038},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 926, col: 1, offset: 30170},
			expr: &actionExpr{
				pos: position{line: 927, col: 5, offset: 30200},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 927, col: 5, offset: 30200},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 927, col: 5, offset: 30200},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 927, col: 14, offset: 30209},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 927, col: 14, offset: 30209},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 927, col: 14, offset: 30209},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 927, col: 23, offset: 30218},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 927, col: 28, offset: 30223},
											expr: &charClassMatcher{
												pos:        position{line: 927, col: 28, offset: 30223},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 927, col: 68, offset: 30263},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 938, col: 1, offset: 30515},
			expr: &choiceExpr{
				pos: position{line: 940, col: 5, offset: 30574},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 940, col: 5, offset: 30574},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 940, col: 5, offset: 30574},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 940, col: 5, offset: 30574},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 940, col: 16, offset: 30585},
										expr: &ruleRefExpr{
											pos:  position{line: 940, col: 17, offset: 30586},
											name: "BlockAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 940, col: 35, offset: 30604},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 940, col: 38, offset: 30607},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 940, col: 54, offset: 30623},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 940, col: 59, offset: 30628},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 940, col: 66, offset: 30635},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 944, col: 5, offset: 30824},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 944, col: 5, offset: 30824},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 944, col: 5, offset: 30824},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 944, col: 16, offset: 30835},
										expr: &ruleRefExpr{
											pos:  position{line: 944, col: 17, offset: 30836},
											name: "BlockAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 944, col: 35, offset: 30854},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 944, col: 42, offset: 30861},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 948, col: 1, offset: 30965},
			expr: &actionExpr{
				pos: position{line: 948, col: 31, offset: 30995},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 948, col: 31, offset: 30995},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 948, col: 31, offset: 30995},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 948, col: 42, offset: 31006},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 948, col: 65, offset: 31029},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 948, col: 76, offset: 31040},
								expr: &actionExpr{
									pos: position{line: 948, col: 77, offset: 31041},
									run: (*parser).callonContinuedRawParagraphLines7,
									expr: &seqExpr{
										pos: position{line: 948, col: 77, offset: 31041},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 948, col: 77, offset: 31041},
												expr: &ruleRefExpr{
													pos:  position{line: 948, col: 78, offset: 31042},
													name: "ListItemContinuation",
												},
											},
											&labeledExpr{
												pos:   position{line: 948, col: 99, offset: 31063},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 948, col: 105, offset: 31069},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 948, col: 105, offset: 31069},
															name: "SingleLineComment",
														},
														&ruleRefExpr{
															pos:  position{line: 948, col: 125, offset: 31089},
															name: "RawParagraphLine",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 956, col: 1, offset: 31331},
			expr: &actionExpr{
				pos: position{line: 956, col: 19, offset: 31349},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 956, col: 19, offset: 31349},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 956, col: 19, offset: 31349},
							expr: &ruleRefExpr{
								pos:  position{line: 956, col: 20, offset: 31350},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 957, col: 5, offset: 31364},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 957, col: 15, offset: 31374},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 957, col: 15, offset: 31374},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 957, col: 15, offset: 31374},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 957, col: 24, offset: 31383},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 959, col: 9, offset: 31475},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 959, col: 9, offset: 31475},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 959, col: 9, offset: 31475},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 959, col: 18, offset: 31484},
														expr: &ruleRefExpr{
															pos:  position{line: 959, col: 19, offset: 31485},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 959, col: 35, offset: 31501},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 965, col: 1, offset: 31618},
			expr: &actionExpr{
				pos: position{line: 966, col: 5, offset: 31641},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 966, col: 5, offset: 31641},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 966, col: 14, offset: 31650},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 966, col: 14, offset: 31650},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 967, col: 11, offset: 31711},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 968, col: 11, offset: 31756},
								expr: &ruleRefExpr{
									pos:  position{line: 968, col: 11, offset: 31756},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 969, col: 11, offset: 31774},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 969, col: 11, offset: 31774},
										expr: &ruleRefExpr{
											pos:  position{line: 969, col: 12, offset: 31775},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 970, col: 13, offset: 31793},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 970, col: 13, offset: 31793},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 971, col: 15, offset: 31820},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 972, col: 15, offset: 31845},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 973, col: 15, offset: 31870},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 974, col: 15, offset: 31897},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 975, col: 15, offset: 31917},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 976, col: 15, offset: 32010},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 977, col: 15, offset: 32040},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 978, col: 15, offset: 32108},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 979, col: 15, offset: 32139},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 980, col: 15, offset: 32160},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 981, col: 15, offset: 32191},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 982, col: 15, offset: 32228},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 983, col: 15, offset: 32258},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 984, col: 15, offset: 32291},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 985, col: 15, offset: 32315},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 986, col: 15, offset: 32348},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 993, col: 1, offset: 32571},
			expr: &actionExpr{
				pos: position{line: 993, col: 14, offset: 32584},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 993, col: 14, offset: 32584},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 993, col: 14, offset: 32584},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 993, col: 20, offset: 32590},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 993, col: 24, offset: 32594},
							expr: &ruleRefExpr{
								pos:  position{line: 993, col: 24, offset: 32594},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 993, col: 31, offset: 32601},
							expr: &ruleRefExpr{
								pos:  position{line: 993, col: 32, offset: 32602},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1000, col: 1, offset: 32886},
			expr: &choiceExpr{
				pos: position{line: 1000, col: 15, offset: 32900},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1000, col: 15, offset: 32900},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1000, col: 41, offset: 32926},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1000, col: 65, offset: 32950},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1002, col: 1, offset: 32969},
			expr: &choiceExpr{
				pos: position{line: 1002, col: 32, offset: 33000},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1002, col: 32, offset: 33000},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1002, col: 32, offset: 33000},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1002, col: 36, offset: 33004},
								expr: &litMatcher{
									pos:        position{line: 1002, col: 37, offset: 33005},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1002, col: 43, offset: 33011},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1002, col: 43, offset: 33011},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1002, col: 47, offset: 33015},
								expr: &litMatcher{
									pos:        position{line: 1002, col: 48, offset: 33016},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1002, col: 54, offset: 33022},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1002, col: 54, offset: 33022},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1002, col: 58, offset: 33026},
								expr: &litMatcher{
									pos:        position{line: 1002, col: 59, offset: 33027},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1002, col: 65, offset: 33033},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1002, col: 65, offset: 33033},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1002, col: 69, offset: 33037},
								expr: &litMatcher{
									pos:        position{line: 1002, col: 70, offset: 33038},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1004, col: 1, offset: 33043},
			expr: &choiceExpr{
				pos: position{line: 1004, col: 34, offset: 33076},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1004, col: 34, offset: 33076},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1004, col: 41, offset: 33083},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1004, col: 48, offset: 33090},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1004, col: 55, offset: 33097},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1004, col: 62, offset: 33104},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1004, col: 68, offset: 33110},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1006, col: 1, offset: 33115},
			expr: &actionExpr{
				pos: position{line: 1006, col: 26, offset: 33140},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1006, col: 26, offset: 33140},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1006, col: 32, offset: 33146},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1006, col: 32, offset: 33146},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1007, col: 15, offset: 33181},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1008, col: 15, offset: 33217},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1009, col: 15, offset: 33253},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1010, col: 15, offset: 33293},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1011, col: 15, offset: 33322},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1012, col: 15, offset: 33353},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1016, col: 1, offset: 33507},
			expr: &choiceExpr{
				pos: position{line: 1016, col: 28, offset: 33534},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1016, col: 28, offset: 33534},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1017, col: 15, offset: 33568},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1018, col: 15, offset: 33604},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1019, col: 15, offset: 33640},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1021, col: 1, offset: 33666},
			expr: &choiceExpr{
				pos: position{line: 1021, col: 22, offset: 33687},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1021, col: 22, offset: 33687},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1022, col: 15, offset: 33718},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1023, col: 15, offset: 33750},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1024, col: 15, offset: 33782},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 15, offset: 33818},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1026, col: 15, offset: 33854},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1028, col: 1, offset: 33878},
			expr: &choiceExpr{
				pos: position{line: 1028, col: 33, offset: 33910},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1028, col: 33, offset: 33910},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1028, col: 39, offset: 33916},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1028, col: 39, offset: 33916},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1032, col: 1, offset: 34049},
			expr: &actionExpr{
				pos: position{line: 1032, col: 25, offset: 34073},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1032, col: 25, offset: 34073},
					expr: &litMatcher{
						pos:        position{line: 1032, col: 25, offset: 34073},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1036, col: 1, offset: 34114},
			expr: &actionExpr{
				pos: position{line: 1036, col: 25, offset: 34138},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1036, col: 25, offset: 34138},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1036, col: 25, offset: 34138},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1036, col: 30, offset: 34143},
							expr: &litMatcher{
								pos:        position{line: 1036, col: 30, offset: 34143},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1044, col: 1, offset: 34240},
			expr: &choiceExpr{
				pos: position{line: 1044, col: 13, offset: 34252},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1044, col: 13, offset: 34252},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1044, col: 35, offset: 34274},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1046, col: 1, offset: 34341},
			expr: &actionExpr{
				pos: position{line: 1046, col: 24, offset: 34364},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1046, col: 24, offset: 34364},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1046, col: 24, offset: 34364},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1046, col: 35, offset: 34375},
								expr: &ruleRefExpr{
									pos:  position{line: 1046, col: 36, offset: 34376},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1046, col: 57, offset: 34397},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1046, col: 62, offset: 34402},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1046, col: 72, offset: 34412},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1046, col: 101, offset: 34441},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1050, col: 1, offset: 34533},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1050, col: 32, offset: 34564},
				expr: &ruleRefExpr{
					pos:  position{line: 1050, col: 32, offset: 34564},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1052, col: 1, offset: 34595},
			expr: &actionExpr{
				pos: position{line: 1052, col: 31, offset: 34625},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1052, col: 31, offset: 34625},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1052, col: 31, offset: 34625},
							expr: &litMatcher{
								pos:        position{line: 1052, col: 33, offset: 34627},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1052, col: 39, offset: 34633},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1052, col: 48, offset: 34642},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1052, col: 48, offset: 34642},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1053, col: 11, offset: 34657},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1054, col: 11, offset: 34706},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1054, col: 11, offset: 34706},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1054, col: 19, offset: 34714},
												expr: &ruleRefExpr{
													pos:  position{line: 1054, col: 20, offset: 34715},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1055, col: 11, offset: 34733},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1056, col: 11, offset: 34763},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1057, col: 11, offset: 34786},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1058, col: 11, offset: 34807},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1059, col: 11, offset: 34828},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1060, col: 11, offset: 34852},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1061, col: 11, offset: 34876},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1062, col: 11, offset: 34902},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1063, col: 11, offset: 34931},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1067, col: 1, offset: 34998},
			expr: &choiceExpr{
				pos: position{line: 1068, col: 5, offset: 35042},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1068, col: 5, offset: 35042},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1069, col: 7, offset: 35139},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1069, col: 7, offset: 35139},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1069, col: 7, offset: 35139},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1069, col: 12, offset: 35144},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1073, col: 1, offset: 35307},
			expr: &choiceExpr{
				pos: position{line: 1073, col: 24, offset: 35330},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1073, col: 24, offset: 35330},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1073, col: 24, offset: 35330},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1073, col: 24, offset: 35330},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1073, col: 35, offset: 35341},
										expr: &ruleRefExpr{
											pos:  position{line: 1073, col: 36, offset: 35342},
											name: "LongHandAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1073, col: 59, offset: 35365},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1073, col: 59, offset: 35365},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1073, col: 63, offset: 35369},
											expr: &litMatcher{
												pos:        position{line: 1073, col: 64, offset: 35370},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1073, col: 69, offset: 35375},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1073, col: 79, offset: 35385},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1073, col: 108, offset: 35414},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1073, col: 112, offset: 35418},
									expr: &notExpr{
										pos: position{line: 1073, col: 114, offset: 35420},
										expr: &ruleRefExpr{
											pos:  position{line: 1073, col: 115, offset: 35421},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1075, col: 5, offset: 35620},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1075, col: 5, offset: 35620},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1075, col: 5, offset: 35620},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1075, col: 16, offset: 35631},
										expr: &ruleRefExpr{
											pos:  position{line: 1075, col: 17, offset: 35632},
											name: "LongHandAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1075, col: 38, offset: 35653},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1075, col: 42, offset: 35657},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1075, col: 52, offset: 35667},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1075, col: 52, offset: 35667},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1075, col: 56, offset: 35671},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1075, col: 85, offset: 35700},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1079, col: 1, offset: 35911},
			expr: &seqExpr{
				pos: position{line: 1079, col: 32, offset: 35942},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1079, col: 32, offset: 35942},
						expr: &ruleRefExpr{
							pos:  position{line: 1079, col: 33, offset: 35943},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1079, col: 39, offset: 35949},
						expr: &ruleRefExpr{
							pos:  position{line: 1079, col: 39, offset: 35949},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1081, col: 1, offset: 35978},
			expr: &choiceExpr{
				pos: position{line: 1081, col: 31, offset: 36008},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1081, col: 31, offset: 36008},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1082, col: 11, offset: 36023},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1082, col: 11, offset: 36023},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1082, col: 19, offset: 36031},
								expr: &ruleRefExpr{
									pos:  position{line: 1082, col: 20, offset: 36032},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1083, col: 11, offset: 36050},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1084, col: 11, offset: 36080},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1085, col: 11, offset: 36103},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1085, col: 11, offset: 36103},
								expr: &ruleRefExpr{
									pos:  position{line: 1085, col: 11, offset: 36103},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1085, col: 18, offset: 36110},
								expr: &seqExpr{
									pos: position{line: 1085, col: 19, offset: 36111},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1085, col: 19, offset: 36111},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1085, col: 23, offset: 36115},
											expr: &litMatcher{
												pos:        position{line: 1085, col: 24, offset: 36116},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1086, col: 11, offset: 36132},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1087, col: 11, offset: 36153},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1088, col: 11, offset: 36174},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1089, col: 11, offset: 36198},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1090, col: 11, offset: 36222},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1091, col: 11, offset: 36248},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1092, col: 11, offset: 36277},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1094, col: 1, offset: 36315},
			expr: &choiceExpr{
				pos: position{line: 1095, col: 5, offset: 36359},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1095, col: 5, offset: 36359},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1096, col: 7, offset: 36456},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1096, col: 7, offset: 36456},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1096, col: 7, offset: 36456},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1096, col: 11, offset: 36460},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1100, col: 1, offset: 36623},
			expr: &choiceExpr{
				pos: position{line: 1101, col: 5, offset: 36647},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1101, col: 5, offset: 36647},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1101, col: 5, offset: 36647},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1101, col: 5, offset: 36647},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1101, col: 18, offset: 36660},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1101, col: 40, offset: 36682},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1101, col: 45, offset: 36687},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1101, col: 55, offset: 36697},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1101, col: 84, offset: 36726},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1103, col: 9, offset: 36883},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1103, col: 9, offset: 36883},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1103, col: 9, offset: 36883},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1103, col: 22, offset: 36896},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1103, col: 44, offset: 36918},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1103, col: 49, offset: 36923},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1103, col: 59, offset: 36933},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1103, col: 88, offset: 36962},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1106, col: 9, offset: 37162},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1106, col: 9, offset: 37162},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1106, col: 9, offset: 37162},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 22, offset: 37175},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1106, col: 44, offset: 37197},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1106, col: 48, offset: 37201},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 58, offset: 37211},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1106, col: 87, offset: 37240},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1114, col: 1, offset: 37448},
			expr: &choiceExpr{
				pos: position{line: 1114, col: 15, offset: 37462},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1114, col: 15, offset: 37462},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1114, col: 39, offset: 37486},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1116, col: 1, offset: 37509},
			expr: &actionExpr{
				pos: position{line: 1116, col: 26, offset: 37534},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1116, col: 26, offset: 37534},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1116, col: 26, offset: 37534},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1116, col: 37, offset: 37545},
								expr: &ruleRefExpr{
									pos:  position{line: 1116, col: 38, offset: 37546},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1116, col: 59, offset: 37567},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1116, col: 64, offset: 37572},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1116, col: 74, offset: 37582},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1116, col: 105, offset: 37613},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1120, col: 1, offset: 37752},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1120, col: 34, offset: 37785},
				expr: &ruleRefExpr{
					pos:  position{line: 1120, col: 34, offset: 37785},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1122, col: 1, offset: 37817},
			expr: &actionExpr{
				pos: position{line: 1122, col: 33, offset: 37849},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1122, col: 33, offset: 37849},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1122, col: 33, offset: 37849},
							expr: &litMatcher{
								pos:        position{line: 1122, col: 35, offset: 37851},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1122, col: 41, offset: 37857},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1122, col: 50, offset: 37866},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1122, col: 50, offset: 37866},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1123, col: 11, offset: 37881},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1124, col: 11, offset: 37930},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1124, col: 11, offset: 37930},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1124, col: 19, offset: 37938},
												expr: &ruleRefExpr{
													pos:  position{line: 1124, col: 20, offset: 37939},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1125, col: 11, offset: 37957},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1126, col: 11, offset: 37989},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1127, col: 11, offset: 38012},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1128, col: 11, offset: 38031},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1129, col: 11, offset: 38052},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1130, col: 11, offset: 38076},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1131, col: 11, offset: 38100},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1132, col: 11, offset: 38126},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1133, col: 11, offset: 38155},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1137, col: 1, offset: 38224},
			expr: &choiceExpr{
				pos: position{line: 1138, col: 5, offset: 38270},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1138, col: 5, offset: 38270},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1139, col: 7, offset: 38369},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1139, col: 7, offset: 38369},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1139, col: 7, offset: 38369},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1139, col: 12, offset: 38374},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1143, col: 1, offset: 38539},
			expr: &choiceExpr{
				pos: position{line: 1143, col: 26, offset: 38564},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1143, col: 26, offset: 38564},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1143, col: 26, offset: 38564},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1143, col: 26, offset: 38564},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1143, col: 37, offset: 38575},
										expr: &ruleRefExpr{
											pos:  position{line: 1143, col: 38, offset: 38576},
											name: "LongHandAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1143, col: 60, offset: 38598},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1143, col: 60, offset: 38598},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1143, col: 64, offset: 38602},
											expr: &litMatcher{
												pos:        position{line: 1143, col: 65, offset: 38603},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1143, col: 70, offset: 38608},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1143, col: 80, offset: 38618},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1143, col: 111, offset: 38649},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1145, col: 5, offset: 38844},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1145, col: 5, offset: 38844},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1145, col: 5, offset: 38844},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1145, col: 16, offset: 38855},
										expr: &ruleRefExpr{
											pos:  position{line: 1145, col: 17, offset: 38856},
											name: "LongHandAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1145, col: 38, offset: 38877},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1145, col: 42, offset: 38881},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1145, col: 52, offset: 38891},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1145, col: 52, offset: 38891},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1145, col: 56, offset: 38895},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1145, col: 87, offset: 38926},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1149, col: 1, offset: 39141},
			expr: &seqExpr{
				pos: position{line: 1149, col: 34, offset: 39174},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1149, col: 34, offset: 39174},
						expr: &ruleRefExpr{
							pos:  position{line: 1149, col: 35, offset: 39175},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1149, col: 41, offset: 39181},
						expr: &ruleRefExpr{
							pos:  position{line: 1149, col: 41, offset: 39181},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1151, col: 1, offset: 39212},
			expr: &choiceExpr{
				pos: position{line: 1151, col: 33, offset: 39244},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1151, col: 33, offset: 39244},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1152, col: 11, offset: 39259},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1152, col: 11, offset: 39259},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1152, col: 19, offset: 39267},
								expr: &ruleRefExpr{
									pos:  position{line: 1152, col: 20, offset: 39268},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1153, col: 11, offset: 39286},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1154, col: 11, offset: 39318},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1155, col: 11, offset: 39341},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1155, col: 11, offset: 39341},
								expr: &ruleRefExpr{
									pos:  position{line: 1155, col: 11, offset: 39341},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1155, col: 18, offset: 39348},
								expr: &seqExpr{
									pos: position{line: 1155, col: 19, offset: 39349},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1155, col: 19, offset: 39349},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1155, col: 23, offset: 39353},
											expr: &litMatcher{
												pos:        position{line: 1155, col: 24, offset: 39354},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1156, col: 11, offset: 39370},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1157, col: 11, offset: 39389},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1158, col: 11, offset: 39410},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1159, col: 11, offset: 39434},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1160, col: 11, offset: 39458},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1161, col: 11, offset: 39484},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1162, col: 11, offset: 39513},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1164, col: 1, offset: 39553},
			expr: &choiceExpr{
				pos: position{line: 1165, col: 5, offset: 39599},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1165, col: 5, offset: 39599},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1166, col: 7, offset: 39698},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1166, col: 7, offset: 39698},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1166, col: 7, offset: 39698},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1166, col: 11, offset: 39702},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1170, col: 1, offset: 39868},
			expr: &choiceExpr{
				pos: position{line: 1171, col: 5, offset: 39894},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1171, col: 5, offset: 39894},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1171, col: 5, offset: 39894},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1171, col: 5, offset: 39894},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1171, col: 18, offset: 39907},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1171, col: 40, offset: 39929},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1171, col: 45, offset: 39934},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1171, col: 55, offset: 39944},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1171, col: 86, offset: 39975},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1173, col: 9, offset: 40132},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1173, col: 9, offset: 40132},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1173, col: 9, offset: 40132},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1173, col: 22, offset: 40145},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1173, col: 44, offset: 40167},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1173, col: 49, offset: 40172},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1173, col: 59, offset: 40182},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1173, col: 90, offset: 40213},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1176, col: 9, offset: 40413},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1176, col: 9, offset: 40413},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1176, col: 9, offset: 40413},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 22, offset: 40426},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1176, col: 44, offset: 40448},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1176, col: 48, offset: 40452},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 58, offset: 40462},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1176, col: 89, offset: 40493},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1183, col: 1, offset: 40703},
			expr: &choiceExpr{
				pos: position{line: 1183, col: 18, offset: 40720},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1183, col: 18, offset: 40720},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1183, col: 45, offset: 40747},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1185, col: 1, offset: 40773},
			expr: &actionExpr{
				pos: position{line: 1185, col: 29, offset: 40801},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1185, col: 29, offset: 40801},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1185, col: 29, offset: 40801},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1185, col: 40, offset: 40812},
								expr: &ruleRefExpr{
									pos:  position{line: 1185, col: 41, offset: 40813},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1185, col: 62, offset: 40834},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 67, offset: 40839},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 77, offset: 40849},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1185, col: 111, offset: 40883},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1189, col: 1, offset: 41025},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1189, col: 37, offset: 41061},
				expr: &ruleRefExpr{
					pos:  position{line: 1189, col: 37, offset: 41061},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1191, col: 1, offset: 41128},
			expr: &actionExpr{
				pos: position{line: 1191, col: 36, offset: 41163},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1191, col: 36, offset: 41163},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1191, col: 36, offset: 41163},
							expr: &litMatcher{
								pos:        position{line: 1191, col: 38, offset: 41165},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1191, col: 44, offset: 41171},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1191, col: 53, offset: 41180},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1191, col: 53, offset: 41180},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1192, col: 11, offset: 41195},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1193, col: 11, offset: 41244},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1193, col: 11, offset: 41244},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1193, col: 19, offset: 41252},
												expr: &ruleRefExpr{
													pos:  position{line: 1193, col: 20, offset: 41253},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1194, col: 11, offset: 41271},
										name: "QuotedString",
									},
									&actionExpr{
										pos: position{line: 1195, col: 11, offset: 41294},
										run: (*parser).callonDoubleQuoteMonospaceTextElement14,
										expr: &ruleRefExpr{
											pos:  position{line: 1195, col: 11, offset: 41294},
											name: "Apostrophe",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1199, col: 11, offset: 41478},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1200, col: 11, offset: 41513},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1201, col: 11, offset: 41532},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1202, col: 11, offset: 41553},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1203, col: 11, offset: 41574},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1204, col: 11, offset: 41598},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1205, col: 11, offset: 41624},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1206, col: 11, offset: 41653},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1210, col: 1, offset: 41725},
			expr: &choiceExpr{
				pos: position{line: 1211, col: 5, offset: 41774},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1211, col: 5, offset: 41774},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1212, col: 7, offset: 41876},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1212, col: 7, offset: 41876},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1212, col: 7, offset: 41876},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1212, col: 12, offset: 41881},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1216, col: 1, offset: 42049},
			expr: &choiceExpr{
				pos: position{line: 1216, col: 29, offset: 42077},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1216, col: 29, offset: 42077},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1216, col: 29, offset: 42077},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1216, col: 29, offset: 42077},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1216, col: 40, offset: 42088},
										expr: &ruleRefExpr{
											pos:  position{line: 1216, col: 41, offset: 42089},
											name: "LongHandAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1216, col: 63, offset: 42111},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1216, col: 63, offset: 42111},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1216, col: 67, offset: 42115},
											expr: &litMatcher{
												pos:        position{line: 1216, col: 68, offset: 42116},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1216, col: 73, offset: 42121},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1216, col: 83, offset: 42131},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1216, col: 117, offset: 42165},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1218, col: 5, offset: 42363},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1218, col: 5, offset: 42363},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1218, col: 5, offset: 42363},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1218, col: 16, offset: 42374},
										expr: &ruleRefExpr{
											pos:  position{line: 1218, col: 17, offset: 42375},
											name: "LongHandAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1218, col: 38, offset: 42396},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1218, col: 42, offset: 42400},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1218, col: 52, offset: 42410},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1218, col: 52, offset: 42410},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1218, col: 56, offset: 42414},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1218, col: 90, offset: 42448},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1222, col: 1, offset: 42667},
			expr: &seqExpr{
				pos: position{line: 1222, col: 37, offset: 42703},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1222, col: 37, offset: 42703},
						expr: &ruleRefExpr{
							pos:  position{line: 1222, col: 38, offset: 42704},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1222, col: 44, offset: 42710},
						expr: &ruleRefExpr{
							pos:  position{line: 1222, col: 44, offset: 42710},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1224, col: 1, offset: 42744},
			expr: &choiceExpr{
				pos: position{line: 1224, col: 37, offset: 42780},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1224, col: 37, offset: 42780},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1225, col: 11, offset: 42795},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1225, col: 11, offset: 42795},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1225, col: 19, offset: 42803},
								expr: &ruleRefExpr{
									pos:  position{line: 1225, col: 20, offset: 42804},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1226, col: 11, offset: 42822},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1227, col: 11, offset: 42857},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1228, col: 11, offset: 42880},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1228, col: 11, offset: 42880},
								expr: &ruleRefExpr{
									pos:  position{line: 1228, col: 11, offset: 42880},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1228, col: 18, offset: 42887},
								expr: &seqExpr{
									pos: position{line: 1228, col: 19, offset: 42888},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1228, col: 19, offset: 42888},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1228, col: 23, offset: 42892},
											expr: &litMatcher{
												pos:        position{line: 1228, col: 24, offset: 42893},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1229, col: 11, offset: 43021},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 11, offset: 43040},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1231, col: 11, offset: 43061},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1232, col: 11, offset: 43082},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1233, col: 11, offset: 43106},
						name: "SuperscriptText",
					},
					&actionExpr{
						pos: position{line: 1234, col: 11, offset: 43132},
						run: (*parser).callonSingleQuoteMonospaceTextElement22,
						expr: &ruleRefExpr{
							pos:  position{line: 1234, col: 11, offset: 43132},
							name: "Apostrophe",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1238, col: 11, offset: 43273},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1239, col: 11, offset: 43302},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1241, col: 1, offset: 43345},
			expr: &choiceExpr{
				pos: position{line: 1242, col: 5, offset: 43394},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1242, col: 5, offset: 43394},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1243, col: 7, offset: 43496},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1243, col: 7, offset: 43496},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1243, col: 7, offset: 43496},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1243, col: 11, offset: 43500},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1247, col: 1, offset: 43669},
			expr: &choiceExpr{
				pos: position{line: 1248, col: 5, offset: 43698},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1248, col: 5, offset: 43698},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1248, col: 5, offset: 43698},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1248, col: 5, offset: 43698},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1248, col: 18, offset: 43711},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1248, col: 40, offset: 43733},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1248, col: 45, offset: 43738},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1248, col: 55, offset: 43748},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1248, col: 89, offset: 43782},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1250, col: 9, offset: 43939},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1250, col: 9, offset: 43939},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1250, col: 9, offset: 43939},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1250, col: 22, offset: 43952},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1250, col: 44, offset: 43974},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1250, col: 49, offset: 43979},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1250, col: 59, offset: 43989},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1250, col: 93, offset: 44023},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1253, col: 9, offset: 44223},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1253, col: 9, offset: 44223},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1253, col: 9, offset: 44223},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1253, col: 22, offset: 44236},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1253, col: 44, offset: 44258},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1253, col: 48, offset: 44262},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1253, col: 58, offset: 44272},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1253, col: 92, offset: 44306},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1261, col: 1, offset: 44631},
			expr: &choiceExpr{
				pos: position{line: 1261, col: 17, offset: 44647},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1261, col: 17, offset: 44647},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1261, col: 38, offset: 44668},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1263, col: 1, offset: 44688},
			expr: &actionExpr{
				pos: position{line: 1263, col: 23, offset: 44710},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1263, col: 23, offset: 44710},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1263, col: 23, offset: 44710},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1263, col: 46, offset: 44733},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1263, col: 55, offset: 44742},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1263, col: 82, offset: 44769},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1267, col: 1, offset: 44873},
			expr: &actionExpr{
				pos: position{line: 1267, col: 31, offset: 44903},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1267, col: 31, offset: 44903},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1267, col: 41, offset: 44913},
						expr: &ruleRefExpr{
							pos:  position{line: 1267, col: 41, offset: 44913},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1271, col: 1, offset: 44991},
			expr: &seqExpr{
				pos: position{line: 1271, col: 27, offset: 45017},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1271, col: 27, offset: 45017},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1271, col: 32, offset: 45022},
						expr: &charClassMatcher{
							pos:        position{line: 1271, col: 33, offset: 45023},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1273, col: 1, offset: 45034},
			expr: &litMatcher{
				pos:        position{line: 1273, col: 25, offset: 45058},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1276, col: 1, offset: 45146},
			expr: &actionExpr{
				pos: position{line: 1276, col: 30, offset: 45175},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1276, col: 30, offset: 45175},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1277, col: 9, offset: 45193},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1277, col: 9, offset: 45193},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1277, col: 9, offset: 45193},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1277, col: 19, offset: 45203},
										expr: &ruleRefExpr{
											pos:  position{line: 1277, col: 20, offset: 45204},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1278, col: 11, offset: 45260},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1278, col: 11, offset: 45260},
										expr: &ruleRefExpr{
											pos:  position{line: 1278, col: 11, offset: 45260},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1278, col: 18, offset: 45267},
										expr: &ruleRefExpr{
											pos:  position{line: 1278, col: 19, offset: 45268},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1279, col: 11, offset: 45299},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1279, col: 11, offset: 45299},
										expr: &litMatcher{
											pos:        position{line: 1279, col: 12, offset: 45300},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1279, col: 16, offset: 45304},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1280, col: 11, offset: 45352},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1281, col: 11, offset: 45371},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1282, col: 11, offset: 45392},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1283, col: 11, offset: 45413},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1284, col: 11, offset: 45437},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1285, col: 11, offset: 45463},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1285, col: 11, offset: 45463},
										expr: &litMatcher{
											pos:        position{line: 1285, col: 12, offset: 45464},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1285, col: 17, offset: 45469},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1286, col: 11, offset: 45493},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1287, col: 11, offset: 45522},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1291, col: 1, offset: 45588},
			expr: &choiceExpr{
				pos: position{line: 1291, col: 41, offset: 45628},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1291, col: 41, offset: 45628},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1291, col: 55, offset: 45642},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1291, col: 55, offset: 45642},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1291, col: 55, offset: 45642},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1291, col: 59, offset: 45646},
									expr: &litMatcher{
										pos:        position{line: 1291, col: 60, offset: 45647},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1295, col: 1, offset: 45706},
			expr: &actionExpr{
				pos: position{line: 1295, col: 23, offset: 45728},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1295, col: 23, offset: 45728},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1295, col: 23, offset: 45728},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1295, col: 46, offset: 45751},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1295, col: 55, offset: 45760},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1295, col: 82, offset: 45787},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1299, col: 1, offset: 45891},
			expr: &actionExpr{
				pos: position{line: 1299, col: 31, offset: 45921},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1299, col: 31, offset: 45921},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1299, col: 41, offset: 45931},
						expr: &ruleRefExpr{
							pos:  position{line: 1299, col: 41, offset: 45931},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1304, col: 1, offset: 46091},
			expr: &actionExpr{
				pos: position{line: 1304, col: 30, offset: 46120},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1304, col: 30, offset: 46120},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1305, col: 9, offset: 46138},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1305, col: 9, offset: 46138},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1305, col: 9, offset: 46138},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1305, col: 19, offset: 46148},
										expr: &ruleRefExpr{
											pos:  position{line: 1305, col: 20, offset: 46149},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1306, col: 11, offset: 46205},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1306, col: 11, offset: 46205},
										expr: &ruleRefExpr{
											pos:  position{line: 1306, col: 11, offset: 46205},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1306, col: 18, offset: 46212},
										expr: &ruleRefExpr{
											pos:  position{line: 1306, col: 19, offset: 46213},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1307, col: 11, offset: 46244},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1308, col: 11, offset: 46263},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1309, col: 11, offset: 46284},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1310, col: 11, offset: 46305},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1311, col: 11, offset: 46329},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1312, col: 11, offset: 46355},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1312, col: 11, offset: 46355},
										expr: &litMatcher{
											pos:        position{line: 1312, col: 12, offset: 46356},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1312, col: 18, offset: 46362},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1313, col: 10, offset: 46385},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1314, col: 11, offset: 46414},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1318, col: 1, offset: 46488},
			expr: &seqExpr{
				pos: position{line: 1318, col: 27, offset: 46514},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1318, col: 27, offset: 46514},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1318, col: 33, offset: 46520},
						expr: &charClassMatcher{
							pos:        position{line: 1318, col: 34, offset: 46521},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1320, col: 1, offset: 46532},
			expr: &litMatcher{
				pos:        position{line: 1320, col: 25, offset: 46556},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1322, col: 1, offset: 46563},
			expr: &actionExpr{
				pos: position{line: 1322, col: 41, offset: 46603},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1322, col: 42, offset: 46604},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1322, col: 42, offset: 46604},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1322, col: 56, offset: 46618},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1322, col: 56, offset: 46618},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1322, col: 60, offset: 46622},
									expr: &litMatcher{
										pos:        position{line: 1322, col: 61, offset: 46623},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1331, col: 1, offset: 46743},
			expr: &choiceExpr{
				pos: position{line: 1331, col: 15, offset: 46757},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1331, col: 15, offset: 46757},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 39, offset: 46781},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1333, col: 1, offset: 46804},
			expr: &actionExpr{
				pos: position{line: 1333, col: 26, offset: 46829},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1333, col: 26, offset: 46829},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1333, col: 26, offset: 46829},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1333, col: 37, offset: 46840},
								expr: &ruleRefExpr{
									pos:  position{line: 1333, col: 38, offset: 46841},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1333, col: 59, offset: 46862},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1333, col: 64, offset: 46867},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1333, col: 74, offset: 46877},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1333, col: 105, offset: 46908},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1337, col: 1, offset: 47047},
			expr: &seqExpr{
				pos: position{line: 1337, col: 34, offset: 47080},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1337, col: 34, offset: 47080},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1337, col: 63, offset: 47109},
						expr: &seqExpr{
							pos: position{line: 1337, col: 64, offset: 47110},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1337, col: 64, offset: 47110},
									expr: &litMatcher{
										pos:        position{line: 1337, col: 66, offset: 47112},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1337, col: 73, offset: 47119},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1337, col: 73, offset: 47119},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1337, col: 81, offset: 47127},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1339, col: 1, offset: 47194},
			expr: &choiceExpr{
				pos: position{line: 1339, col: 33, offset: 47226},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1339, col: 33, offset: 47226},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1340, col: 11, offset: 47241},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1341, col: 11, offset: 47273},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1341, col: 11, offset: 47273},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1341, col: 19, offset: 47281},
								expr: &ruleRefExpr{
									pos:  position{line: 1341, col: 20, offset: 47282},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1342, col: 11, offset: 47300},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1343, col: 11, offset: 47323},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1344, col: 11, offset: 47342},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1345, col: 11, offset: 47363},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1346, col: 11, offset: 47387},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1347, col: 11, offset: 47411},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1348, col: 11, offset: 47437},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1349, col: 11, offset: 47466},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1351, col: 1, offset: 47506},
			expr: &choiceExpr{
				pos: position{line: 1352, col: 5, offset: 47552},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1352, col: 5, offset: 47552},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1353, col: 7, offset: 47651},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1353, col: 7, offset: 47651},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1353, col: 7, offset: 47651},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1353, col: 12, offset: 47656},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1357, col: 1, offset: 47821},
			expr: &choiceExpr{
				pos: position{line: 1357, col: 26, offset: 47846},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1357, col: 26, offset: 47846},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1357, col: 26, offset: 47846},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1357, col: 26, offset: 47846},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1357, col: 37, offset: 47857},
										expr: &ruleRefExpr{
											pos:  position{line: 1357, col: 38, offset: 47858},
											name: "LongHandAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1357, col: 60, offset: 47880},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1357, col: 60, offset: 47880},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1357, col: 64, offset: 47884},
											expr: &litMatcher{
												pos:        position{line: 1357, col: 65, offset: 47885},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1357, col: 70, offset: 47890},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1357, col: 80, offset: 47900},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1357, col: 111, offset: 47931},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1359, col: 5, offset: 48126},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1359, col: 5, offset: 48126},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1359, col: 5, offset: 48126},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1359, col: 16, offset: 48137},
										expr: &ruleRefExpr{
											pos:  position{line: 1359, col: 17, offset: 48138},
											name: "LongHandAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1359, col: 38, offset: 48159},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1359, col: 42, offset: 48163},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1359, col: 52, offset: 48173},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1359, col: 52, offset: 48173},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1359, col: 56, offset: 48177},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1359, col: 87, offset: 48208},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1363, col: 1, offset: 48422},
			expr: &seqExpr{
				pos: position{line: 1363, col: 34, offset: 48455},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1363, col: 34, offset: 48455},
						expr: &ruleRefExpr{
							pos:  position{line: 1363, col: 35, offset: 48456},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1363, col: 41, offset: 48462},
						expr: &ruleRefExpr{
							pos:  position{line: 1363, col: 41, offset: 48462},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1365, col: 1, offset: 48493},
			expr: &choiceExpr{
				pos: position{line: 1365, col: 33, offset: 48525},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1365, col: 33, offset: 48525},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1366, col: 11, offset: 48540},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1367, col: 11, offset: 48572},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1367, col: 11, offset: 48572},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1367, col: 19, offset: 48580},
								expr: &ruleRefExpr{
									pos:  position{line: 1367, col: 20, offset: 48581},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1368, col: 11, offset: 48599},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1369, col: 11, offset: 48622},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1369, col: 11, offset: 48622},
								expr: &ruleRefExpr{
									pos:  position{line: 1369, col: 11, offset: 48622},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1369, col: 18, offset: 48629},
								expr: &seqExpr{
									pos: position{line: 1369, col: 19, offset: 48630},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1369, col: 19, offset: 48630},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1369, col: 23, offset: 48634},
											expr: &litMatcher{
												pos:        position{line: 1369, col: 24, offset: 48635},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 11, offset: 48651},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 11, offset: 48670},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1372, col: 11, offset: 48691},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1373, col: 11, offset: 48715},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1374, col: 11, offset: 48739},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1375, col: 11, offset: 48765},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1376, col: 11, offset: 48794},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1378, col: 1, offset: 48834},
			expr: &choiceExpr{
				pos: position{line: 1379, col: 5, offset: 48880},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1379, col: 5, offset: 48880},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1380, col: 7, offset: 48977},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1380, col: 7, offset: 48977},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1380, col: 7, offset: 48977},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1380, col: 11, offset: 48981},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1384, col: 1, offset: 49144},
			expr: &choiceExpr{
				pos: position{line: 1385, col: 5, offset: 49169},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1385, col: 5, offset: 49169},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1385, col: 5, offset: 49169},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1385, col: 5, offset: 49169},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1385, col: 18, offset: 49182},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1385, col: 40, offset: 49204},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1385, col: 45, offset: 49209},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1385, col: 55, offset: 49219},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1385, col: 86, offset: 49250},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1387, col: 9, offset: 49407},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1387, col: 9, offset: 49407},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1387, col: 9, offset: 49407},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1387, col: 22, offset: 49420},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1387, col: 44, offset: 49442},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1387, col: 49, offset: 49447},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1387, col: 59, offset: 49457},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1387, col: 90, offset: 49488},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1390, col: 9, offset: 49688},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1390, col: 9, offset: 49688},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1390, col: 9, offset: 49688},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1390, col: 22, offset: 49701},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1390, col: 44, offset: 49723},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1390, col: 48, offset: 49727},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1390, col: 58, offset: 49737},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1390, col: 89, offset: 49768},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1395, col: 1, offset: 49918},
			expr: &actionExpr{
				pos: position{line: 1395, col: 18, offset: 49935},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1395, col: 18, offset: 49935},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1395, col: 18, offset: 49935},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1395, col: 29, offset: 49946},
								expr: &ruleRefExpr{
									pos:  position{line: 1395, col: 30, offset: 49947},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1395, col: 51, offset: 49968},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1395, col: 55, offset: 49972},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1395, col: 64, offset: 49981},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1395, col: 86, offset: 50003},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1399, col: 1, offset: 50104},
			expr: &choiceExpr{
				pos: position{line: 1399, col: 25, offset: 50128},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1399, col: 25, offset: 50128},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1399, col: 38, offset: 50141},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1401, col: 1, offset: 50160},
			expr: &actionExpr{
				pos: position{line: 1401, col: 21, offset: 50180},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1401, col: 21, offset: 50180},
					expr: &charClassMatcher{
						pos:        position{line: 1401, col: 21, offset: 50180},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1405, col: 1, offset: 50257},
			expr: &actionExpr{
				pos: position{line: 1405, col: 25, offset: 50281},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1405, col: 25, offset: 50281},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1405, col: 25, offset: 50281},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1405, col: 38, offset: 50294},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1405, col: 60, offset: 50316},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1405, col: 64, offset: 50320},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1405, col: 73, offset: 50329},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1405, col: 95, offset: 50351},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1409, col: 1, offset: 50480},
			expr: &actionExpr{
				pos: position{line: 1409, col: 20, offset: 50499},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1409, col: 20, offset: 50499},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1409, col: 20, offset: 50499},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1409, col: 31, offset: 50510},
								expr: &ruleRefExpr{
									pos:  position{line: 1409, col: 32, offset: 50511},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1409, col: 53, offset: 50532},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1409, col: 57, offset: 50536},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1409, col: 66, offset: 50545},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1409, col: 90, offset: 50569},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1413, col: 1, offset: 50672},
			expr: &choiceExpr{
				pos: position{line: 1413, col: 27, offset: 50698},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1413, col: 27, offset: 50698},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1413, col: 40, offset: 50711},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1415, col: 1, offset: 50732},
			expr: &actionExpr{
				pos: position{line: 1415, col: 23, offset: 50754},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1415, col: 23, offset: 50754},
					expr: &charClassMatcher{
						pos:        position{line: 1415, col: 23, offset: 50754},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1419, col: 1, offset: 50831},
			expr: &actionExpr{
				pos: position{line: 1419, col: 27, offset: 50857},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1419, col: 27, offset: 50857},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1419, col: 27, offset: 50857},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1419, col: 40, offset: 50870},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1419, col: 62, offset: 50892},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1419, col: 66, offset: 50896},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1419, col: 75, offset: 50905},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1419, col: 99, offset: 50929},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1426, col: 1, offset: 51171},
			expr: &choiceExpr{
				pos: position{line: 1426, col: 22, offset: 51192},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1426, col: 22, offset: 51192},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1426, col: 46, offset: 51216},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1426, col: 70, offset: 51240},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1428, col: 1, offset: 51258},
			expr: &litMatcher{
				pos:        position{line: 1428, col: 32, offset: 51289},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1430, col: 1, offset: 51294},
			expr: &actionExpr{
				pos: position{line: 1430, col: 26, offset: 51319},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1430, col: 26, offset: 51319},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1430, col: 26, offset: 51319},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1430, col: 54, offset: 51347},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1430, col: 63, offset: 51356},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1430, col: 93, offset: 51386},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1430, col: 121, offset: 51414},
							expr: &ruleRefExpr{
								pos:  position{line: 1430, col: 122, offset: 51415},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1434, col: 1, offset: 51520},
			expr: &choiceExpr{
				pos: position{line: 1434, col: 33, offset: 51552},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1434, col: 34, offset: 51553},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1434, col: 34, offset: 51553},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1434, col: 35, offset: 51554},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1434, col: 35, offset: 51554},
											expr: &ruleRefExpr{
												pos:  position{line: 1434, col: 36, offset: 51555},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1434, col: 64, offset: 51583},
											expr: &ruleRefExpr{
												pos:  position{line: 1434, col: 65, offset: 51584},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1434, col: 71, offset: 51590},
											expr: &ruleRefExpr{
												pos:  position{line: 1434, col: 72, offset: 51591},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1434, col: 80, offset: 51599,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1434, col: 83, offset: 51602},
									expr: &seqExpr{
										pos: position{line: 1434, col: 84, offset: 51603},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1434, col: 84, offset: 51603},
												expr: &seqExpr{
													pos: position{line: 1434, col: 86, offset: 51605},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1434, col: 86, offset: 51605},
															expr: &ruleRefExpr{
																pos:  position{line: 1434, col: 86, offset: 51605},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1434, col: 93, offset: 51612},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1434, col: 122, offset: 51641},
												expr: &ruleRefExpr{
													pos:  position{line: 1434, col: 123, offset: 51642},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1434, col: 151, offset: 51670},
												expr: &ruleRefExpr{
													pos:  position{line: 1434, col: 152, offset: 51671},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1434, col: 160, offset: 51679,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1436, col: 7, offset: 51821},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1436, col: 8, offset: 51822},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1436, col: 8, offset: 51822},
									expr: &ruleRefExpr{
										pos:  position{line: 1436, col: 9, offset: 51823},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1436, col: 15, offset: 51829},
									expr: &ruleRefExpr{
										pos:  position{line: 1436, col: 16, offset: 51830},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1436, col: 24, offset: 51838},
									expr: &ruleRefExpr{
										pos:  position{line: 1436, col: 25, offset: 51839},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1436, col: 53, offset: 51867,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1440, col: 1, offset: 51949},
			expr: &litMatcher{
				pos:        position{line: 1440, col: 32, offset: 51980},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1442, col: 1, offset: 51987},
			expr: &actionExpr{
				pos: position{line: 1442, col: 26, offset: 52012},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1442, col: 26, offset: 52012},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1442, col: 26, offset: 52012},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1442, col: 54, offset: 52040},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1442, col: 63, offset: 52049},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1442, col: 93, offset: 52079},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1442, col: 121, offset: 52107},
							expr: &ruleRefExpr{
								pos:  position{line: 1442, col: 122, offset: 52108},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1446, col: 1, offset: 52213},
			expr: &choiceExpr{
				pos: position{line: 1446, col: 33, offset: 52245},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1446, col: 34, offset: 52246},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1446, col: 34, offset: 52246},
							expr: &seqExpr{
								pos: position{line: 1446, col: 35, offset: 52247},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1446, col: 35, offset: 52247},
										expr: &ruleRefExpr{
											pos:  position{line: 1446, col: 36, offset: 52248},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1446, col: 64, offset: 52276,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1448, col: 7, offset: 52441},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1448, col: 7, offset: 52441},
							expr: &seqExpr{
								pos: position{line: 1448, col: 8, offset: 52442},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1448, col: 8, offset: 52442},
										expr: &ruleRefExpr{
											pos:  position{line: 1448, col: 9, offset: 52443},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1448, col: 15, offset: 52449},
										expr: &ruleRefExpr{
											pos:  position{line: 1448, col: 16, offset: 52450},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1448, col: 24, offset: 52458},
										expr: &ruleRefExpr{
											pos:  position{line: 1448, col: 25, offset: 52459},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1448, col: 53, offset: 52487,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1452, col: 1, offset: 52570},
			expr: &choiceExpr{
				pos: position{line: 1452, col: 21, offset: 52590},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1452, col: 21, offset: 52590},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1452, col: 21, offset: 52590},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1452, col: 21, offset: 52590},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1452, col: 30, offset: 52599},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1452, col: 38, offset: 52607},
										expr: &ruleRefExpr{
											pos:  position{line: 1452, col: 39, offset: 52608},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1452, col: 67, offset: 52636},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1454, col: 5, offset: 52732},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1454, col: 5, offset: 52732},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1454, col: 5, offset: 52732},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1454, col: 15, offset: 52742},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1454, col: 23, offset: 52750},
										expr: &choiceExpr{
											pos: position{line: 1454, col: 24, offset: 52751},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1454, col: 24, offset: 52751},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1454, col: 37, offset: 52764},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1454, col: 65, offset: 52792},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1458, col: 1, offset: 52888},
			expr: &actionExpr{
				pos: position{line: 1458, col: 30, offset: 52917},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1458, col: 30, offset: 52917},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1465, col: 1, offset: 53090},
			expr: &choiceExpr{
				pos: position{line: 1465, col: 19, offset: 53108},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1465, col: 19, offset: 53108},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1465, col: 44, offset: 53133},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1467, col: 1, offset: 53158},
			expr: &choiceExpr{
				pos: position{line: 1467, col: 27, offset: 53184},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1467, col: 27, offset: 53184},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1467, col: 27, offset: 53184},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1467, col: 27, offset: 53184},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1467, col: 32, offset: 53189},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1467, col: 36, offset: 53193},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1467, col: 40, offset: 53197},
									expr: &ruleRefExpr{
										pos:  position{line: 1467, col: 40, offset: 53197},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1467, col: 47, offset: 53204},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1467, col: 51, offset: 53208},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1467, col: 58, offset: 53215},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1467, col: 79, offset: 53236},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1469, col: 5, offset: 53301},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1469, col: 5, offset: 53301},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1469, col: 5, offset: 53301},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1469, col: 10, offset: 53306},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1469, col: 14, offset: 53310},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 1469, col: 18, offset: 53314},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1473, col: 1, offset: 53377},
			expr: &actionExpr{
				pos: position{line: 1473, col: 27, offset: 53403},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1473, col: 27, offset: 53403},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1473, col: 27, offset: 53403},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1473, col: 35, offset: 53411},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1473, col: 40, offset: 53416},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1473, col: 54, offset: 53430},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1473, col: 72, offset: 53448},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1477, col: 1, offset: 53573},
			expr: &oneOrMoreExpr{
				pos: position{line: 1477, col: 24, offset: 53596},
				expr: &choiceExpr{
					pos: position{line: 1478, col: 5, offset: 53602},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 1478, col: 6, offset: 53603},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &seqExpr{
								pos: position{line: 1478, col: 6, offset: 53603},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 1478, col: 6, offset: 53603},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 1478, col: 14, offset: 53611},
										expr: &charClassMatcher{
											pos:        position{line: 1478, col: 14, offset: 53611},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1481, col: 5, offset: 53806},
							name: "AttrSub",
						},
						&actionExpr{
							pos: position{line: 1482, col: 6, offset: 53821},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 1482, col: 6, offset: 53821},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1490, col: 1, offset: 53998},
			expr: &choiceExpr{
				pos: position{line: 1490, col: 9, offset: 54006},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1490, col: 9, offset: 54006},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1490, col: 24, offset: 54021},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1493, col: 1, offset: 54102},
			expr: &actionExpr{
				pos: position{line: 1493, col: 17, offset: 54118},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1493, col: 17, offset: 54118},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1493, col: 17, offset: 54118},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1493, col: 25, offset: 54126},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1493, col: 30, offset: 54131},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1493, col: 40, offset: 54141},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1493, col: 58, offset: 54159},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1497, col: 1, offset: 54272},
			expr: &actionExpr{
				pos: position{line: 1497, col: 17, offset: 54288},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1497, col: 17, offset: 54288},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1497, col: 17, offset: 54288},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1497, col: 22, offset: 54293},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1497, col: 42, offset: 54313},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1497, col: 59, offset: 54330},
								expr: &ruleRefExpr{
									pos:  position{line: 1497, col: 60, offset: 54331},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1504, col: 1, offset: 54528},
			expr: &actionExpr{
				pos: position{line: 1505, col: 5, offset: 54547},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1505, col: 5, offset: 54547},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1505, col: 5, offset: 54547},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1505, col: 16, offset: 54558},
								expr: &ruleRefExpr{
									pos:  position{line: 1505, col: 17, offset: 54559},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1506, col: 5, offset: 54582},
							run: (*parser).callonImageBlock6,
						},
						&litMatcher{
							pos:        position{line: 1510, col: 5, offset: 54715},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1510, col: 15, offset: 54725},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1510, col: 21, offset: 54731},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1510, col: 31, offset: 54741},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1510, col: 49, offset: 54759},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1510, col: 67, offset: 54777},
							expr: &ruleRefExpr{
								pos:  position{line: 1510, col: 67, offset: 54777},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1510, col: 74, offset: 54784},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1515, col: 1, offset: 54999},
			expr: &actionExpr{
				pos: position{line: 1515, col: 16, offset: 55014},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1515, col: 16, offset: 55014},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1515, col: 16, offset: 55014},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1515, col: 25, offset: 55023},
							expr: &litMatcher{
								pos:        position{line: 1515, col: 26, offset: 55024},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1515, col: 30, offset: 55028},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1515, col: 36, offset: 55034},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1515, col: 46, offset: 55044},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1515, col: 64, offset: 55062},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1522, col: 1, offset: 55397},
			expr: &actionExpr{
				pos: position{line: 1522, col: 15, offset: 55411},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1522, col: 15, offset: 55411},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1522, col: 15, offset: 55411},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1522, col: 23, offset: 55419},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1522, col: 29, offset: 55425},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1522, col: 29, offset: 55425},
									expr: &charClassMatcher{
										pos:        position{line: 1522, col: 29, offset: 55425},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1522, col: 73, offset: 55469},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1522, col: 85, offset: 55481},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1529, col: 1, offset: 55753},
			expr: &choiceExpr{
				pos: position{line: 1529, col: 19, offset: 55771},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1529, col: 19, offset: 55771},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1529, col: 19, offset: 55771},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1529, col: 19, offset: 55771},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1529, col: 32, offset: 55784},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1529, col: 41, offset: 55793},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1529, col: 58, offset: 55810},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1531, col: 5, offset: 55878},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1531, col: 5, offset: 55878},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1531, col: 5, offset: 55878},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1531, col: 17, offset: 55890},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1531, col: 22, offset: 55895},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1531, col: 35, offset: 55908},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1531, col: 39, offset: 55912},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1531, col: 47, offset: 55920},
										expr: &ruleRefExpr{
											pos:  position{line: 1531, col: 48, offset: 55921},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1531, col: 66, offset: 55939},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1535, col: 1, offset: 56000},
			expr: &ruleRefExpr{
				pos:  position{line: 1535, col: 16, offset: 56015},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1537, col: 1, offset: 56026},
			expr: &actionExpr{
				pos: position{line: 1537, col: 20, offset: 56045},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1537, col: 20, offset: 56045},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1537, col: 29, offset: 56054},
						expr: &seqExpr{
							pos: position{line: 1537, col: 30, offset: 56055},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1537, col: 30, offset: 56055},
									expr: &litMatcher{
										pos:        position{line: 1537, col: 31, offset: 56056},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1537, col: 35, offset: 56060},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1545, col: 1, offset: 56376},
			expr: &actionExpr{
				pos: position{line: 1545, col: 12, offset: 56387},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1545, col: 12, offset: 56387},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1545, col: 12, offset: 56387},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1545, col: 16, offset: 56391},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1545, col: 21, offset: 56396},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1545, col: 21, offset: 56396},
									expr: &charClassMatcher{
										pos:        position{line: 1545, col: 21, offset: 56396},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1545, col: 69, offset: 56444},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1545, col: 73, offset: 56448},
							expr: &ruleRefExpr{
								pos:  position{line: 1545, col: 73, offset: 56448},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1545, col: 80, offset: 56455},
							expr: &choiceExpr{
								pos: position{line: 1545, col: 82, offset: 56457},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1545, col: 82, offset: 56457},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1545, col: 88, offset: 56463},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1549, col: 1, offset: 56516},
			expr: &actionExpr{
				pos: position{line: 1549, col: 20, offset: 56535},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1549, col: 20, offset: 56535},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1549, col: 20, offset: 56535},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1549, col: 25, offset: 56540},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1549, col: 48, offset: 56563},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1549, col: 61, offset: 56576},
								expr: &ruleRefExpr{
									pos:  position{line: 1549, col: 61, offset: 56576},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1553, col: 1, offset: 56673},
			expr: &actionExpr{
				pos: position{line: 1553, col: 26, offset: 56698},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1553, col: 26, offset: 56698},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1553, col: 26, offset: 56698},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1553, col: 30, offset: 56702},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1553, col: 35, offset: 56707},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1553, col: 35, offset: 56707},
									expr: &charClassMatcher{
										pos:        position{line: 1553, col: 35, offset: 56707},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1553, col: 83, offset: 56755},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1553, col: 87, offset: 56759},
							expr: &ruleRefExpr{
								pos:  position{line: 1553, col: 87, offset: 56759},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1562, col: 1, offset: 57006},
			expr: &actionExpr{
				pos: position{line: 1562, col: 18, offset: 57023},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1562, col: 18, offset: 57023},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1562, col: 19, offset: 57024},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1562, col: 19, offset: 57024},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1562, col: 27, offset: 57032},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1562, col: 37, offset: 57042},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1562, col: 45, offset: 57050},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1562, col: 55, offset: 57060},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1562, col: 63, offset: 57068},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1562, col: 72, offset: 57077},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1572, col: 1, offset: 57327},
			expr: &actionExpr{
				pos: position{line: 1572, col: 19, offset: 57345},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1572, col: 19, offset: 57345},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1572, col: 19, offset: 57345},
							expr: &ruleRefExpr{
								pos:  position{line: 1572, col: 20, offset: 57346},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1573, col: 5, offset: 57434},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1573, col: 12, offset: 57441},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1573, col: 12, offset: 57441},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1574, col: 11, offset: 57464},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1575, col: 11, offset: 57488},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1576, col: 11, offset: 57512},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1577, col: 11, offset: 57533},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1578, col: 11, offset: 57554},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1579, col: 11, offset: 57577},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1580, col: 11, offset: 57604},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1584, col: 1, offset: 57645},
			expr: &choiceExpr{
				pos: position{line: 1584, col: 19, offset: 57663},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1584, col: 19, offset: 57663},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1584, col: 19, offset: 57663},
								expr: &ruleRefExpr{
									pos:  position{line: 1584, col: 21, offset: 57665},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1584, col: 31, offset: 57675},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1585, col: 19, offset: 57746},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1586, col: 19, offset: 57786},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1587, col: 19, offset: 57827},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1588, col: 19, offset: 57868},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1589, col: 19, offset: 57909},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1590, col: 19, offset: 57947},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1591, col: 19, offset: 57987},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1596, col: 1, offset: 58210},
			expr: &actionExpr{
				pos: position{line: 1596, col: 17, offset: 58226},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1596, col: 17, offset: 58226},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1596, col: 17, offset: 58226},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1596, col: 28, offset: 58237},
								expr: &ruleRefExpr{
									pos:  position{line: 1596, col: 29, offset: 58238},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1596, col: 47, offset: 58256},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1596, col: 74, offset: 58283},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 1596, col: 82, offset: 58291},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1596, col: 106, offset: 58315},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1600, col: 1, offset: 58414},
			expr: &seqExpr{
				pos: position{line: 1600, col: 26, offset: 58439},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1600, col: 26, offset: 58439},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1600, col: 33, offset: 58446},
						expr: &ruleRefExpr{
							pos:  position{line: 1600, col: 33, offset: 58446},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1600, col: 40, offset: 58453},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1602, col: 1, offset: 58458},
			expr: &seqExpr{
				pos: position{line: 1602, col: 31, offset: 58488},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1602, col: 31, offset: 58488},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1602, col: 38, offset: 58495},
						expr: &ruleRefExpr{
							pos:  position{line: 1602, col: 38, offset: 58495},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1602, col: 45, offset: 58502},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1604, col: 1, offset: 58507},
			expr: &choiceExpr{
				pos: position{line: 1604, col: 29, offset: 58535},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1604, col: 30, offset: 58536},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1604, col: 30, offset: 58536},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1604, col: 37, offset: 58543},
								expr: &ruleRefExpr{
									pos:  position{line: 1604, col: 37, offset: 58543},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1604, col: 44, offset: 58550},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1604, col: 51, offset: 58557},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1606, col: 1, offset: 58562},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1606, col: 27, offset: 58588},
				expr: &actionExpr{
					pos: position{line: 1607, col: 8, offset: 58597},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1607, col: 8, offset: 58597},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1607, col: 8, offset: 58597},
								expr: &ruleRefExpr{
									pos:  position{line: 1607, col: 9, offset: 58598},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1608, col: 8, offset: 58631},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1608, col: 17, offset: 58640},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1608, col: 17, offset: 58640},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1609, col: 15, offset: 58664},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1610, col: 15, offset: 58689},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1611, col: 15, offset: 58717},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1612, col: 15, offset: 58748},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1613, col: 15, offset: 58781},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1614, col: 15, offset: 58812},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1615, col: 15, offset: 58851},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1616, col: 15, offset: 58878},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1617, col: 15, offset: 58906},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1618, col: 15, offset: 58931},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1619, col: 15, offset: 58956},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1620, col: 15, offset: 58983},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1621, col: 15, offset: 59015},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1622, col: 15, offset: 59046},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1623, col: 15, offset: 59066},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1624, col: 15, offset: 59093},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1625, col: 15, offset: 59121},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1626, col: 15, offset: 59148},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1633, col: 1, offset: 59404},
			expr: &actionExpr{
				pos: position{line: 1633, col: 15, offset: 59418},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1633, col: 15, offset: 59418},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1633, col: 15, offset: 59418},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1633, col: 26, offset: 59429},
								expr: &ruleRefExpr{
									pos:  position{line: 1633, col: 27, offset: 59430},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1634, col: 5, offset: 59453},
							run: (*parser).callonQuoteBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1642, col: 5, offset: 59763},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1642, col: 30, offset: 59788},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1642, col: 39, offset: 59797},
								name: "QuoteBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1642, col: 61, offset: 59819},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1646, col: 1, offset: 59923},
			expr: &seqExpr{
				pos: position{line: 1646, col: 24, offset: 59946},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1646, col: 24, offset: 59946},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1646, col: 31, offset: 59953},
						expr: &ruleRefExpr{
							pos:  position{line: 1646, col: 31, offset: 59953},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1646, col: 38, offset: 59960},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1648, col: 1, offset: 59990},
			expr: &seqExpr{
				pos: position{line: 1648, col: 29, offset: 60018},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1648, col: 29, offset: 60018},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1648, col: 36, offset: 60025},
						expr: &ruleRefExpr{
							pos:  position{line: 1648, col: 36, offset: 60025},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1648, col: 43, offset: 60032},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1650, col: 1, offset: 60062},
			expr: &choiceExpr{
				pos: position{line: 1650, col: 27, offset: 60088},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1650, col: 28, offset: 60089},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1650, col: 28, offset: 60089},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1650, col: 35, offset: 60096},
								expr: &ruleRefExpr{
									pos:  position{line: 1650, col: 35, offset: 60096},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1650, col: 42, offset: 60103},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1650, col: 49, offset: 60110},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlockRawContent",
			pos:  position{line: 1652, col: 1, offset: 60140},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1652, col: 25, offset: 60164},
				expr: &actionExpr{
					pos: position{line: 1653, col: 8, offset: 60173},
					run: (*parser).callonQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1653, col: 8, offset: 60173},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1653, col: 8, offset: 60173},
								expr: &ruleRefExpr{
									pos:  position{line: 1653, col: 9, offset: 60174},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1654, col: 8, offset: 60205},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1654, col: 17, offset: 60214},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1654, col: 17, offset: 60214},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1655, col: 15, offset: 60238},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1656, col: 15, offset: 60263},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1657, col: 15, offset: 60291},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1658, col: 15, offset: 60322},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1659, col: 15, offset: 60355},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1660, col: 15, offset: 60386},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1661, col: 15, offset: 60425},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1662, col: 15, offset: 60452},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1663, col: 15, offset: 60480},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1664, col: 15, offset: 60505},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1665, col: 15, offset: 60532},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1666, col: 15, offset: 60559},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1667, col: 15, offset: 60591},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1668, col: 15, offset: 60622},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1669, col: 15, offset: 60642},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1670, col: 15, offset: 60669},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1671, col: 15, offset: 60697},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1672, col: 15, offset: 60724},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1679, col: 1, offset: 60982},
			expr: &actionExpr{
				pos: position{line: 1679, col: 17, offset: 60998},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1679, col: 17, offset: 60998},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1679, col: 17, offset: 60998},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1679, col: 28, offset: 61009},
								expr: &ruleRefExpr{
									pos:  position{line: 1679, col: 29, offset: 61010},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1679, col: 47, offset: 61028},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1679, col: 74, offset: 61055},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1679, col: 83, offset: 61064},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1679, col: 107, offset: 61088},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1683, col: 1, offset: 61188},
			expr: &seqExpr{
				pos: position{line: 1683, col: 26, offset: 61213},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1683, col: 26, offset: 61213},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1683, col: 33, offset: 61220},
						expr: &ruleRefExpr{
							pos:  position{line: 1683, col: 33, offset: 61220},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1683, col: 40, offset: 61227},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1685, col: 1, offset: 61232},
			expr: &seqExpr{
				pos: position{line: 1685, col: 31, offset: 61262},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1685, col: 31, offset: 61262},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1685, col: 38, offset: 61269},
						expr: &ruleRefExpr{
							pos:  position{line: 1685, col: 38, offset: 61269},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1685, col: 45, offset: 61276},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1687, col: 1, offset: 61281},
			expr: &choiceExpr{
				pos: position{line: 1687, col: 29, offset: 61309},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1687, col: 30, offset: 61310},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1687, col: 30, offset: 61310},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1687, col: 37, offset: 61317},
								expr: &ruleRefExpr{
									pos:  position{line: 1687, col: 37, offset: 61317},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1687, col: 44, offset: 61324},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1687, col: 51, offset: 61331},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1689, col: 1, offset: 61336},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1689, col: 27, offset: 61362},
				expr: &actionExpr{
					pos: position{line: 1690, col: 8, offset: 61371},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1690, col: 8, offset: 61371},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1690, col: 8, offset: 61371},
								expr: &ruleRefExpr{
									pos:  position{line: 1690, col: 9, offset: 61372},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1691, col: 8, offset: 61405},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1691, col: 17, offset: 61414},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1691, col: 17, offset: 61414},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1692, col: 15, offset: 61438},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1693, col: 15, offset: 61463},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1694, col: 15, offset: 61491},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1695, col: 15, offset: 61522},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1696, col: 15, offset: 61555},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1697, col: 15, offset: 61586},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1698, col: 15, offset: 61625},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1699, col: 15, offset: 61652},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1700, col: 15, offset: 61679},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1701, col: 15, offset: 61705},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1702, col: 15, offset: 61732},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1703, col: 15, offset: 61757},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1704, col: 15, offset: 61789},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1705, col: 15, offset: 61820},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1706, col: 15, offset: 61840},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1707, col: 15, offset: 61867},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1708, col: 15, offset: 61895},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1709, col: 15, offset: 61922},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1716, col: 1, offset: 62179},
			expr: &actionExpr{
				pos: position{line: 1716, col: 16, offset: 62194},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1716, col: 16, offset: 62194},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1716, col: 16, offset: 62194},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1716, col: 27, offset: 62205},
								expr: &ruleRefExpr{
									pos:  position{line: 1716, col: 28, offset: 62206},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1716, col: 46, offset: 62224},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1716, col: 72, offset: 62250},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1716, col: 81, offset: 62259},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1716, col: 104, offset: 62282},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1720, col: 1, offset: 62380},
			expr: &seqExpr{
				pos: position{line: 1720, col: 25, offset: 62404},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1720, col: 25, offset: 62404},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1720, col: 31, offset: 62410},
						expr: &ruleRefExpr{
							pos:  position{line: 1720, col: 31, offset: 62410},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1720, col: 38, offset: 62417},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1722, col: 1, offset: 62477},
			expr: &seqExpr{
				pos: position{line: 1722, col: 30, offset: 62506},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1722, col: 30, offset: 62506},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1722, col: 36, offset: 62512},
						expr: &ruleRefExpr{
							pos:  position{line: 1722, col: 36, offset: 62512},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1722, col: 43, offset: 62519},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1724, col: 1, offset: 62524},
			expr: &choiceExpr{
				pos: position{line: 1724, col: 28, offset: 62551},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1724, col: 29, offset: 62552},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1724, col: 29, offset: 62552},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1724, col: 35, offset: 62558},
								expr: &ruleRefExpr{
									pos:  position{line: 1724, col: 35, offset: 62558},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1724, col: 42, offset: 62565},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1724, col: 49, offset: 62572},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1726, col: 1, offset: 62577},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1726, col: 26, offset: 62602},
				expr: &actionExpr{
					pos: position{line: 1726, col: 27, offset: 62603},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1726, col: 27, offset: 62603},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1726, col: 27, offset: 62603},
								expr: &ruleRefExpr{
									pos:  position{line: 1726, col: 28, offset: 62604},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1726, col: 52, offset: 62628},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1726, col: 58, offset: 62634},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1733, col: 1, offset: 62868},
			expr: &actionExpr{
				pos: position{line: 1733, col: 17, offset: 62884},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1733, col: 17, offset: 62884},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1733, col: 17, offset: 62884},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1733, col: 28, offset: 62895},
								expr: &ruleRefExpr{
									pos:  position{line: 1733, col: 29, offset: 62896},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1733, col: 47, offset: 62914},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1733, col: 74, offset: 62941},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1733, col: 83, offset: 62950},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1733, col: 107, offset: 62974},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1737, col: 1, offset: 63074},
			expr: &seqExpr{
				pos: position{line: 1737, col: 26, offset: 63099},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1737, col: 26, offset: 63099},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1737, col: 33, offset: 63106},
						expr: &ruleRefExpr{
							pos:  position{line: 1737, col: 33, offset: 63106},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1737, col: 40, offset: 63113},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1739, col: 1, offset: 63118},
			expr: &seqExpr{
				pos: position{line: 1739, col: 31, offset: 63148},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1739, col: 31, offset: 63148},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1739, col: 38, offset: 63155},
						expr: &ruleRefExpr{
							pos:  position{line: 1739, col: 38, offset: 63155},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1739, col: 45, offset: 63162},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1741, col: 1, offset: 63167},
			expr: &choiceExpr{
				pos: position{line: 1741, col: 29, offset: 63195},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1741, col: 30, offset: 63196},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1741, col: 30, offset: 63196},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1741, col: 37, offset: 63203},
								expr: &ruleRefExpr{
									pos:  position{line: 1741, col: 37, offset: 63203},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1741, col: 44, offset: 63210},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1741, col: 51, offset: 63217},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1743, col: 1, offset: 63222},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1743, col: 27, offset: 63248},
				expr: &actionExpr{
					pos: position{line: 1743, col: 28, offset: 63249},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1743, col: 28, offset: 63249},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1743, col: 28, offset: 63249},
								expr: &ruleRefExpr{
									pos:  position{line: 1743, col: 29, offset: 63250},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1743, col: 54, offset: 63275},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1743, col: 60, offset: 63281},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1750, col: 1, offset: 63513},
			expr: &actionExpr{
				pos: position{line: 1750, col: 15, offset: 63527},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1750, col: 15, offset: 63527},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1750, col: 15, offset: 63527},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1750, col: 26, offset: 63538},
								expr: &ruleRefExpr{
									pos:  position{line: 1750, col: 27, offset: 63539},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1751, col: 5, offset: 63562},
							run: (*parser).callonVerseBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1755, col: 5, offset: 63723},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1755, col: 30, offset: 63748},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1755, col: 39, offset: 63757},
								name: "VerseBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1755, col: 61, offset: 63779},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockRawContent",
			pos:  position{line: 1759, col: 1, offset: 63883},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1759, col: 25, offset: 63907},
				expr: &actionExpr{
					pos: position{line: 1759, col: 26, offset: 63908},
					run: (*parser).callonVerseBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1759, col: 26, offset: 63908},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1759, col: 26, offset: 63908},
								expr: &ruleRefExpr{
									pos:  position{line: 1759, col: 27, offset: 63909},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1759, col: 50, offset: 63932},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1759, col: 56, offset: 63938},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1766, col: 1, offset: 64176},
			expr: &actionExpr{
				pos: position{line: 1766, col: 21, offset: 64196},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1766, col: 21, offset: 64196},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1766, col: 21, offset: 64196},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1766, col: 32, offset: 64207},
								expr: &ruleRefExpr{
									pos:  position{line: 1766, col: 33, offset: 64208},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1766, col: 51, offset: 64226},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1766, col: 82, offset: 64257},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1766, col: 91, offset: 64266},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1766, col: 119, offset: 64294},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1770, col: 1, offset: 64402},
			expr: &seqExpr{
				pos: position{line: 1770, col: 30, offset: 64431},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1770, col: 30, offset: 64431},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1770, col: 37, offset: 64438},
						expr: &ruleRefExpr{
							pos:  position{line: 1770, col: 37, offset: 64438},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1770, col: 44, offset: 64445},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1772, col: 1, offset: 64450},
			expr: &seqExpr{
				pos: position{line: 1772, col: 35, offset: 64484},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1772, col: 35, offset: 64484},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1772, col: 42, offset: 64491},
						expr: &ruleRefExpr{
							pos:  position{line: 1772, col: 42, offset: 64491},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1772, col: 49, offset: 64498},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1774, col: 1, offset: 64503},
			expr: &choiceExpr{
				pos: position{line: 1774, col: 33, offset: 64535},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1774, col: 34, offset: 64536},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1774, col: 34, offset: 64536},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1774, col: 41, offset: 64543},
								expr: &ruleRefExpr{
									pos:  position{line: 1774, col: 41, offset: 64543},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1774, col: 48, offset: 64550},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1774, col: 55, offset: 64557},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1776, col: 1, offset: 64562},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1776, col: 31, offset: 64592},
				expr: &actionExpr{
					pos: position{line: 1776, col: 32, offset: 64593},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1776, col: 32, offset: 64593},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1776, col: 32, offset: 64593},
								expr: &ruleRefExpr{
									pos:  position{line: 1776, col: 33, offset: 64594},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1776, col: 62, offset: 64623},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1776, col: 68, offset: 64629},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1783, col: 1, offset: 64863},
			expr: &seqExpr{
				pos: position{line: 1783, col: 26, offset: 64888},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1783, col: 26, offset: 64888},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1783, col: 33, offset: 64895},
						expr: &ruleRefExpr{
							pos:  position{line: 1783, col: 33, offset: 64895},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1783, col: 40, offset: 64902},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1785, col: 1, offset: 64907},
			expr: &seqExpr{
				pos: position{line: 1785, col: 31, offset: 64937},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1785, col: 31, offset: 64937},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1785, col: 38, offset: 64944},
						expr: &ruleRefExpr{
							pos:  position{line: 1785, col: 38, offset: 64944},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1785, col: 45, offset: 64951},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1787, col: 1, offset: 64956},
			expr: &choiceExpr{
				pos: position{line: 1787, col: 29, offset: 64984},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1787, col: 30, offset: 64985},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1787, col: 30, offset: 64985},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1787, col: 37, offset: 64992},
								expr: &ruleRefExpr{
									pos:  position{line: 1787, col: 37, offset: 64992},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1787, col: 44, offset: 64999},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1787, col: 51, offset: 65006},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1789, col: 1, offset: 65011},
			expr: &actionExpr{
				pos: position{line: 1789, col: 17, offset: 65027},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1789, col: 17, offset: 65027},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1789, col: 17, offset: 65027},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1789, col: 44, offset: 65054},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1789, col: 53, offset: 65063},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1789, col: 78, offset: 65088},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 1793, col: 1, offset: 65181},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1793, col: 27, offset: 65207},
				expr: &actionExpr{
					pos: position{line: 1793, col: 28, offset: 65208},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1793, col: 28, offset: 65208},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1793, col: 28, offset: 65208},
								expr: &ruleRefExpr{
									pos:  position{line: 1793, col: 29, offset: 65209},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1793, col: 54, offset: 65234},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1793, col: 60, offset: 65240},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1797, col: 1, offset: 65278},
			expr: &actionExpr{
				pos: position{line: 1797, col: 22, offset: 65299},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1797, col: 22, offset: 65299},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1797, col: 22, offset: 65299},
							expr: &ruleRefExpr{
								pos:  position{line: 1797, col: 23, offset: 65300},
								name: "CommentBlockDelimiter",
							},
						},
						&litMatcher{
							pos:        position{line: 1797, col: 45, offset: 65322},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1797, col: 50, offset: 65327},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1797, col: 59, offset: 65336},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1797, col: 85, offset: 65362},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1801, col: 1, offset: 65427},
			expr: &actionExpr{
				pos: position{line: 1801, col: 29, offset: 65455},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1801, col: 29, offset: 65455},
					expr: &charClassMatcher{
						pos:        position{line: 1801, col: 29, offset: 65455},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineMacros",
			pos:  position{line: 1809, col: 1, offset: 65744},
			expr: &choiceExpr{
				pos: position{line: 1809, col: 17, offset: 65760},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1809, col: 17, offset: 65760},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1810, col: 19, offset: 65789},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1811, col: 19, offset: 65820},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1812, col: 19, offset: 65844},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1813, col: 19, offset: 65881},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 1814, col: 19, offset: 65915},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1815, col: 19, offset: 65949},
						name: "InlineUserMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1816, col: 19, offset: 65984},
						name: "InlineElementID",
					},
					&ruleRefExpr{
						pos:  position{line: 1817, col: 19, offset: 66018},
						name: "ConcealedIndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 1818, col: 19, offset: 66055},
						name: "IndexTerm",
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 1820, col: 1, offset: 66066},
			expr: &actionExpr{
				pos: position{line: 1820, col: 23, offset: 66088},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 1820, col: 23, offset: 66088},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1820, col: 23, offset: 66088},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 1820, col: 32, offset: 66097},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1820, col: 37, offset: 66102},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1820, col: 37, offset: 66102},
									expr: &charClassMatcher{
										pos:        position{line: 1820, col: 37, offset: 66102},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1820, col: 76, offset: 66141},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthroughSubs",
			pos:  position{line: 1825, col: 1, offset: 66293},
			expr: &seqExpr{
				pos: position{line: 1826, col: 5, offset: 66323},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1826, col: 5, offset: 66323},
						expr: &choiceExpr{
							pos: position{line: 1826, col: 6, offset: 66324},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1826, col: 6, offset: 66324},
									name: "InlinePassthrough",
								},
								&ruleRefExpr{
									pos:  position{line: 1827, col: 11, offset: 66353},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1828, col: 11, offset: 66414},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1829, col: 11, offset: 66443},
									expr: &ruleRefExpr{
										pos:  position{line: 1829, col: 11, offset: 66443},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1830, col: 11, offset: 66461},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1831, col: 11, offset: 66479},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1831, col: 21, offset: 66489},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SpecialCharacterSubs",
			pos:  position{line: 1834, col: 1, offset: 66610},
			expr: &seqExpr{
				pos: position{line: 1835, col: 5, offset: 66639},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1835, col: 5, offset: 66639},
						expr: &choiceExpr{
							pos: position{line: 1835, col: 6, offset: 66640},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1835, col: 6, offset: 66640},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1836, col: 11, offset: 66701},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 1837, col: 11, offset: 66728},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1838, col: 11, offset: 66757},
									expr: &ruleRefExpr{
										pos:  position{line: 1838, col: 11, offset: 66757},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1839, col: 11, offset: 66774},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1840, col: 11, offset: 66792},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1840, col: 21, offset: 66802},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuotedTextSubs",
			pos:  position{line: 1843, col: 1, offset: 66856},
			expr: &seqExpr{
				pos: position{line: 1844, col: 5, offset: 66879},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1844, col: 5, offset: 66879},
						expr: &choiceExpr{
							pos: position{line: 1844, col: 6, offset: 66880},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1844, col: 6, offset: 66880},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1845, col: 11, offset: 66941},
									expr: &ruleRefExpr{
										pos:  position{line: 1845, col: 11, offset: 66941},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1846, col: 11, offset: 66959},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1847, col: 11, offset: 66981},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1848, col: 11, offset: 67004},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1849, col: 11, offset: 67033},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1850, col: 11, offset: 67051},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1850, col: 21, offset: 67061},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "AttributeSubs",
			pos:  position{line: 1853, col: 1, offset: 67119},
			expr: &seqExpr{
				pos: position{line: 1854, col: 5, offset: 67141},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1854, col: 5, offset: 67141},
						expr: &choiceExpr{
							pos: position{line: 1854, col: 6, offset: 67142},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1854, col: 6, offset: 67142},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1855, col: 11, offset: 67203},
									expr: &ruleRefExpr{
										pos:  position{line: 1855, col: 11, offset: 67203},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1856, col: 11, offset: 67221},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1857, col: 11, offset: 67253},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1858, col: 11, offset: 67282},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1859, col: 11, offset: 67300},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1859, col: 21, offset: 67310},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "InlineMacroSubs",
			pos:  position{line: 1862, col: 1, offset: 67364},
			expr: &seqExpr{
				pos: position{line: 1863, col: 5, offset: 67388},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1863, col: 5, offset: 67388},
						expr: &choiceExpr{
							pos: position{line: 1863, col: 6, offset: 67389},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1863, col: 6, offset: 67389},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1864, col: 11, offset: 67450},
									expr: &ruleRefExpr{
										pos:  position{line: 1864, col: 11, offset: 67450},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1865, col: 11, offset: 67468},
									name: "InlineMacros",
								},
								&ruleRefExpr{
									pos:  position{line: 1866, col: 11, offset: 67491},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1867, col: 11, offset: 67520},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1868, col: 11, offset: 67538},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1868, col: 21, offset: 67548},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "MarkdownQuoteMacroSubs",
			pos:  position{line: 1871, col: 1, offset: 67628},
			expr: &actionExpr{
				pos: position{line: 1871, col: 27, offset: 67654},
				run: (*parser).callonMarkdownQuoteMacroSubs1,
				expr: &seqExpr{
					pos: position{line: 1871, col: 27, offset: 67654},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1871, col: 27, offset: 67654},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1871, col: 33, offset: 67660},
								expr: &ruleRefExpr{
									pos:  position{line: 1871, col: 34, offset: 67661},
									name: "MarkdownQuoteLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1871, col: 54, offset: 67681},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteLine",
			pos:  position{line: 1875, col: 1, offset: 67748},
			expr: &actionExpr{
				pos: position{line: 1876, col: 5, offset: 67774},
				run: (*parser).callonMarkdownQuoteLine1,
				expr: &seqExpr{
					pos: position{line: 1876, col: 5, offset: 67774},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1876, col: 5, offset: 67774},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1876, col: 14, offset: 67783},
								expr: &choiceExpr{
									pos: position{line: 1876, col: 15, offset: 67784},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1876, col: 15, offset: 67784},
											name: "InlineWord",
										},
										&oneOrMoreExpr{
											pos: position{line: 1877, col: 11, offset: 67845},
											expr: &ruleRefExpr{
												pos:  position{line: 1877, col: 11, offset: 67845},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1878, col: 11, offset: 67863},
											name: "InlineMacros",
										},
										&ruleRefExpr{
											pos:  position{line: 1879, col: 11, offset: 67886},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1880, col: 11, offset: 67915},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1880, col: 21, offset: 67925},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 1884, col: 1, offset: 67996},
			expr: &actionExpr{
				pos: position{line: 1884, col: 29, offset: 68024},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 1884, col: 29, offset: 68024},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1884, col: 29, offset: 68024},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1884, col: 35, offset: 68030},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1884, col: 43, offset: 68038},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1884, col: 44, offset: 68039},
									expr: &charClassMatcher{
										pos:        position{line: 1884, col: 44, offset: 68039},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1886, col: 8, offset: 68089},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ReplacementSubs",
			pos:  position{line: 1891, col: 1, offset: 68176},
			expr: &seqExpr{
				pos: position{line: 1892, col: 5, offset: 68200},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1892, col: 5, offset: 68200},
						expr: &choiceExpr{
							pos: position{line: 1892, col: 6, offset: 68201},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1892, col: 6, offset: 68201},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1893, col: 11, offset: 68262},
									expr: &ruleRefExpr{
										pos:  position{line: 1893, col: 11, offset: 68262},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1894, col: 11, offset: 68280},
									name: "Symbol",
								},
								&ruleRefExpr{
									pos:  position{line: 1895, col: 11, offset: 68298},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1896, col: 11, offset: 68327},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1897, col: 11, offset: 68345},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1897, col: 21, offset: 68355},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PostReplacementSubs",
			pos:  position{line: 1901, col: 1, offset: 68503},
			expr: &seqExpr{
				pos: position{line: 1901, col: 24, offset: 68526},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1901, col: 24, offset: 68526},
						expr: &choiceExpr{
							pos: position{line: 1902, col: 5, offset: 68532},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1902, col: 5, offset: 68532},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1903, col: 7, offset: 68589},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1904, col: 7, offset: 68614},
									name: "LineBreak",
								},
								&oneOrMoreExpr{
									pos: position{line: 1905, col: 7, offset: 68657},
									expr: &ruleRefExpr{
										pos:  position{line: 1905, col: 7, offset: 68657},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1906, col: 7, offset: 68671},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1907, col: 7, offset: 68685},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1907, col: 17, offset: 68695},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CalloutSubs",
			pos:  position{line: 1910, col: 1, offset: 68752},
			expr: &seqExpr{
				pos: position{line: 1911, col: 5, offset: 68772},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1911, col: 5, offset: 68772},
						expr: &choiceExpr{
							pos: position{line: 1911, col: 6, offset: 68773},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1911, col: 6, offset: 68773},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1912, col: 11, offset: 68834},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1913, col: 11, offset: 68863},
									expr: &ruleRefExpr{
										pos:  position{line: 1913, col: 11, offset: 68863},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1914, col: 11, offset: 68880},
									name: "Callout",
								},
								&ruleRefExpr{
									pos:  position{line: 1915, col: 11, offset: 68898},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1916, col: 11, offset: 68916},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1916, col: 21, offset: 68926},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "NoneSubs",
			pos:  position{line: 1919, col: 1, offset: 68978},
			expr: &seqExpr{
				pos: position{line: 1919, col: 13, offset: 68990},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1919, col: 13, offset: 68990},
						expr: &choiceExpr{
							pos: position{line: 1920, col: 5, offset: 68996},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1920, col: 5, offset: 68996},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 1921, col: 8, offset: 69023},
									run: (*parser).callonNoneSubs5,
									expr: &seqExpr{
										pos: position{line: 1921, col: 8, offset: 69023},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1921, col: 8, offset: 69023},
												expr: &ruleRefExpr{
													pos:  position{line: 1921, col: 9, offset: 69024},
													name: "EOF",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1921, col: 13, offset: 69028},
												expr: &charClassMatcher{
													pos:        position{line: 1921, col: 13, offset: 69028},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1921, col: 22, offset: 69037},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1923, col: 10, offset: 69142},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1928, col: 1, offset: 69335},
			expr: &actionExpr{
				pos: position{line: 1928, col: 10, offset: 69344},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1928, col: 10, offset: 69344},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1928, col: 10, offset: 69344},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1928, col: 21, offset: 69355},
								expr: &ruleRefExpr{
									pos:  position{line: 1928, col: 22, offset: 69356},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1928, col: 40, offset: 69374},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1929, col: 5, offset: 69393},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1929, col: 12, offset: 69400},
								expr: &ruleRefExpr{
									pos:  position{line: 1929, col: 13, offset: 69401},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1930, col: 5, offset: 69423},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1930, col: 11, offset: 69429},
								expr: &ruleRefExpr{
									pos:  position{line: 1930, col: 12, offset: 69430},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1931, col: 6, offset: 69447},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1931, col: 6, offset: 69447},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1931, col: 23, offset: 69464},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1935, col: 1, offset: 69583},
			expr: &seqExpr{
				pos: position{line: 1935, col: 23, offset: 69605},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1935, col: 23, offset: 69605},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1935, col: 27, offset: 69609},
						expr: &ruleRefExpr{
							pos:  position{line: 1935, col: 27, offset: 69609},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1937, col: 1, offset: 69617},
			expr: &seqExpr{
				pos: position{line: 1937, col: 19, offset: 69635},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1937, col: 19, offset: 69635},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1937, col: 26, offset: 69642},
						expr: &ruleRefExpr{
							pos:  position{line: 1937, col: 26, offset: 69642},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1937, col: 33, offset: 69649},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1940, col: 1, offset: 69717},
			expr: &actionExpr{
				pos: position{line: 1940, col: 20, offset: 69736},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1940, col: 20, offset: 69736},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1940, col: 20, offset: 69736},
							expr: &ruleRefExpr{
								pos:  position{line: 1940, col: 21, offset: 69737},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1940, col: 36, offset: 69752},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1940, col: 42, offset: 69758},
								expr: &ruleRefExpr{
									pos:  position{line: 1940, col: 43, offset: 69759},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1940, col: 55, offset: 69771},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1940, col: 59, offset: 69775},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1944, col: 1, offset: 69843},
			expr: &actionExpr{
				pos: position{line: 1944, col: 14, offset: 69856},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1944, col: 14, offset: 69856},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1944, col: 14, offset: 69856},
							expr: &ruleRefExpr{
								pos:  position{line: 1944, col: 15, offset: 69857},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1944, col: 30, offset: 69872},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1944, col: 36, offset: 69878},
								expr: &ruleRefExpr{
									pos:  position{line: 1944, col: 37, offset: 69879},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1944, col: 49, offset: 69891},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1944, col: 53, offset: 69895},
							expr: &ruleRefExpr{
								pos:  position{line: 1944, col: 53, offset: 69895},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1948, col: 1, offset: 69964},
			expr: &actionExpr{
				pos: position{line: 1948, col: 14, offset: 69977},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1948, col: 14, offset: 69977},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1948, col: 14, offset: 69977},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1948, col: 33, offset: 69996},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1948, col: 42, offset: 70005},
								expr: &seqExpr{
									pos: position{line: 1948, col: 43, offset: 70006},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1948, col: 43, offset: 70006},
											expr: &ruleRefExpr{
												pos:  position{line: 1948, col: 44, offset: 70007},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1948, col: 63, offset: 70026},
											expr: &ruleRefExpr{
												pos:  position{line: 1948, col: 64, offset: 70027},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1948, col: 68, offset: 70031},
											expr: &ruleRefExpr{
												pos:  position{line: 1948, col: 68, offset: 70031},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1948, col: 75, offset: 70038},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1948, col: 89, offset: 70052},
											expr: &ruleRefExpr{
												pos:  position{line: 1948, col: 89, offset: 70052},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1955, col: 1, offset: 70378},
			expr: &choiceExpr{
				pos: position{line: 1955, col: 17, offset: 70394},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1955, col: 17, offset: 70394},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1955, col: 49, offset: 70426},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1955, col: 78, offset: 70455},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1957, col: 1, offset: 70491},
			expr: &litMatcher{
				pos:        position{line: 1957, col: 26, offset: 70516},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1960, col: 1, offset: 70588},
			expr: &actionExpr{
				pos: position{line: 1960, col: 31, offset: 70618},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1960, col: 31, offset: 70618},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1960, col: 31, offset: 70618},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1960, col: 42, offset: 70629},
								expr: &ruleRefExpr{
									pos:  position{line: 1960, col: 43, offset: 70630},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1960, col: 61, offset: 70648},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1960, col: 68, offset: 70655},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1965, col: 1, offset: 70885},
			expr: &actionExpr{
				pos: position{line: 1966, col: 5, offset: 70925},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1966, col: 5, offset: 70925},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1966, col: 5, offset: 70925},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1966, col: 16, offset: 70936},
								name: "ParagraphWithHeadingSpacesLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1967, col: 5, offset: 70972},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1967, col: 16, offset: 70983},
								expr: &ruleRefExpr{
									pos:  position{line: 1967, col: 17, offset: 70984},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLine",
			pos:  position{line: 1971, col: 1, offset: 71093},
			expr: &actionExpr{
				pos: position{line: 1971, col: 35, offset: 71127},
				run: (*parser).callonParagraphWithHeadingSpacesLine1,
				expr: &seqExpr{
					pos: position{line: 1971, col: 35, offset: 71127},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1971, col: 35, offset: 71127},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1971, col: 41, offset: 71133},
								run: (*parser).callonParagraphWithHeadingSpacesLine4,
								expr: &seqExpr{
									pos: position{line: 1971, col: 41, offset: 71133},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1971, col: 41, offset: 71133},
											expr: &ruleRefExpr{
												pos:  position{line: 1971, col: 41, offset: 71133},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1971, col: 48, offset: 71140},
											expr: &charClassMatcher{
												pos:        position{line: 1971, col: 48, offset: 71140},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1973, col: 8, offset: 71206},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1978, col: 1, offset: 71346},
			expr: &actionExpr{
				pos: position{line: 1978, col: 39, offset: 71384},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1978, col: 39, offset: 71384},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1978, col: 39, offset: 71384},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1978, col: 50, offset: 71395},
								expr: &ruleRefExpr{
									pos:  position{line: 1978, col: 51, offset: 71396},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1979, col: 9, offset: 71422},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1979, col: 31, offset: 71444},
							expr: &ruleRefExpr{
								pos:  position{line: 1979, col: 31, offset: 71444},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1979, col: 38, offset: 71451},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1979, col: 46, offset: 71459},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1979, col: 53, offset: 71466},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1979, col: 95, offset: 71508},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1979, col: 96, offset: 71509},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1979, col: 96, offset: 71509},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1979, col: 118, offset: 71531},
											expr: &ruleRefExpr{
												pos:  position{line: 1979, col: 118, offset: 71531},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1979, col: 125, offset: 71538},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1979, col: 132, offset: 71545},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1984, col: 1, offset: 71704},
			expr: &actionExpr{
				pos: position{line: 1984, col: 44, offset: 71747},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1984, col: 44, offset: 71747},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1984, col: 50, offset: 71753},
						expr: &ruleRefExpr{
							pos:  position{line: 1984, col: 51, offset: 71754},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1988, col: 1, offset: 71838},
			expr: &actionExpr{
				pos: position{line: 1989, col: 5, offset: 71893},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1989, col: 5, offset: 71893},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1989, col: 5, offset: 71893},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1989, col: 11, offset: 71899},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1989, col: 11, offset: 71899},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1989, col: 11, offset: 71899},
											expr: &ruleRefExpr{
												pos:  position{line: 1989, col: 12, offset: 71900},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1989, col: 34, offset: 71922},
											expr: &charClassMatcher{
												pos:        position{line: 1989, col: 34, offset: 71922},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1991, col: 8, offset: 71988},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1996, col: 1, offset: 72114},
			expr: &actionExpr{
				pos: position{line: 1997, col: 5, offset: 72152},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1997, col: 5, offset: 72152},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1997, col: 5, offset: 72152},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1997, col: 16, offset: 72163},
								expr: &ruleRefExpr{
									pos:  position{line: 1997, col: 17, offset: 72164},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1998, col: 5, offset: 72186},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2001, col: 5, offset: 72297},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 2001, col: 11, offset: 72303},
								expr: &ruleRefExpr{
									pos:  position{line: 2001, col: 12, offset: 72304},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2005, col: 1, offset: 72441},
			expr: &actionExpr{
				pos: position{line: 2005, col: 16, offset: 72456},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2005, col: 16, offset: 72456},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "LiteralParagraphLine",
			pos:  position{line: 2009, col: 1, offset: 72502},
			expr: &actionExpr{
				pos: position{line: 2009, col: 25, offset: 72526},
				run: (*parser).callonLiteralParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 2009, col: 25, offset: 72526},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2009, col: 25, offset: 72526},
							expr: &ruleRefExpr{
								pos:  position{line: 2009, col: 26, offset: 72527},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2009, col: 36, offset: 72537},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2009, col: 45, offset: 72546},
								run: (*parser).callonLiteralParagraphLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2009, col: 45, offset: 72546},
									expr: &charClassMatcher{
										pos:        position{line: 2009, col: 45, offset: 72546},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2011, col: 4, offset: 72604},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2018, col: 1, offset: 72781},
			expr: &actionExpr{
				pos: position{line: 2018, col: 14, offset: 72794},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2018, col: 14, offset: 72794},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2018, col: 14, offset: 72794},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2018, col: 19, offset: 72799},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2018, col: 25, offset: 72805},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2018, col: 43, offset: 72823},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2022, col: 1, offset: 72888},
			expr: &actionExpr{
				pos: position{line: 2022, col: 21, offset: 72908},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2022, col: 21, offset: 72908},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2022, col: 30, offset: 72917},
						expr: &choiceExpr{
							pos: position{line: 2022, col: 31, offset: 72918},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2022, col: 31, offset: 72918},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2022, col: 38, offset: 72925},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2022, col: 53, offset: 72940},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2022, col: 66, offset: 72953},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 2022, col: 74, offset: 72961},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 2022, col: 93, offset: 72980},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2022, col: 114, offset: 73001},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 2022, col: 115, offset: 73002},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2022, col: 115, offset: 73002},
												expr: &litMatcher{
													pos:        position{line: 2022, col: 116, offset: 73003},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2022, col: 121, offset: 73008,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2028, col: 1, offset: 73114},
			expr: &actionExpr{
				pos: position{line: 2028, col: 23, offset: 73136},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2028, col: 23, offset: 73136},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2028, col: 23, offset: 73136},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2028, col: 29, offset: 73142},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2028, col: 36, offset: 73149},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2029, col: 5, offset: 73181},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2029, col: 11, offset: 73187},
								expr: &actionExpr{
									pos: position{line: 2029, col: 12, offset: 73188},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2029, col: 12, offset: 73188},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2029, col: 12, offset: 73188},
												expr: &ruleRefExpr{
													pos:  position{line: 2029, col: 12, offset: 73188},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2029, col: 19, offset: 73195},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2029, col: 23, offset: 73199},
												expr: &ruleRefExpr{
													pos:  position{line: 2029, col: 23, offset: 73199},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2029, col: 30, offset: 73206},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2029, col: 39, offset: 73215},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2030, col: 5, offset: 73273},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2030, col: 11, offset: 73279},
								expr: &actionExpr{
									pos: position{line: 2030, col: 12, offset: 73280},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2030, col: 12, offset: 73280},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2030, col: 12, offset: 73280},
												expr: &ruleRefExpr{
													pos:  position{line: 2030, col: 12, offset: 73280},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2030, col: 19, offset: 73287},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2030, col: 23, offset: 73291},
												expr: &ruleRefExpr{
													pos:  position{line: 2030, col: 23, offset: 73291},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2030, col: 30, offset: 73298},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2030, col: 39, offset: 73307},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2031, col: 5, offset: 73365},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2035, col: 1, offset: 73444},
			expr: &actionExpr{
				pos: position{line: 2035, col: 30, offset: 73473},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2035, col: 30, offset: 73473},
					expr: &choiceExpr{
						pos: position{line: 2035, col: 31, offset: 73474},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2035, col: 31, offset: 73474},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2035, col: 42, offset: 73485},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2042, col: 1, offset: 73634},
			expr: &actionExpr{
				pos: position{line: 2042, col: 14, offset: 73647},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2042, col: 14, offset: 73647},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2042, col: 14, offset: 73647},
							expr: &ruleRefExpr{
								pos:  position{line: 2042, col: 15, offset: 73648},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2042, col: 19, offset: 73652},
							expr: &ruleRefExpr{
								pos:  position{line: 2042, col: 19, offset: 73652},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2042, col: 26, offset: 73659},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2050, col: 1, offset: 73804},
			expr: &choiceExpr{
				pos: position{line: 2050, col: 11, offset: 73814},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2050, col: 11, offset: 73814},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2050, col: 24, offset: 73827},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2050, col: 36, offset: 73839},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2050, col: 48, offset: 73851},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2050, col: 61, offset: 73864},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 2050, col: 72, offset: 73875},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2052, col: 1, offset: 73894},
			expr: &actionExpr{
				pos: position{line: 2052, col: 15, offset: 73908},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2052, col: 15, offset: 73908},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2055, col: 1, offset: 73961},
			expr: &actionExpr{
				pos: position{line: 2055, col: 14, offset: 73974},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2055, col: 14, offset: 73974},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2058, col: 1, offset: 74028},
			expr: &actionExpr{
				pos: position{line: 2058, col: 14, offset: 74041},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2058, col: 14, offset: 74041},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2061, col: 1, offset: 74096},
			expr: &actionExpr{
				pos: position{line: 2061, col: 15, offset: 74110},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2061, col: 15, offset: 74110},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2064, col: 1, offset: 74164},
			expr: &actionExpr{
				pos: position{line: 2064, col: 13, offset: 74176},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2064, col: 13, offset: 74176},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2072, col: 1, offset: 74453},
			expr: &actionExpr{
				pos: position{line: 2072, col: 22, offset: 74474},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2072, col: 22, offset: 74474},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2072, col: 22, offset: 74474},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2072, col: 31, offset: 74483},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2072, col: 35, offset: 74487},
							expr: &charClassMatcher{
								pos:        position{line: 2072, col: 36, offset: 74488},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 2081, col: 1, offset: 74850},
			expr: &choiceExpr{
				pos: position{line: 2081, col: 21, offset: 74870},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2081, col: 21, offset: 74870},
						run: (*parser).callonSpecialCharacter2,
						expr: &ruleRefExpr{
							pos:  position{line: 2081, col: 21, offset: 74870},
							name: "InternalCrossReference",
						},
					},
					&actionExpr{
						pos: position{line: 2084, col: 9, offset: 75033},
						run: (*parser).callonSpecialCharacter4,
						expr: &choiceExpr{
							pos: position{line: 2084, col: 10, offset: 75034},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2084, col: 10, offset: 75034},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&litMatcher{
									pos:        position{line: 2084, col: 16, offset: 75040},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&litMatcher{
									pos:        position{line: 2084, col: 22, offset: 75046},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2091, col: 1, offset: 75224},
			expr: &charClassMatcher{
				pos:        position{line: 2091, col: 13, offset: 75236},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2093, col: 1, offset: 75246},
			expr: &choiceExpr{
				pos: position{line: 2093, col: 16, offset: 75261},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2093, col: 16, offset: 75261},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2093, col: 22, offset: 75267},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2093, col: 28, offset: 75273},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2093, col: 34, offset: 75279},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2093, col: 40, offset: 75285},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2093, col: 46, offset: 75291},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2095, col: 1, offset: 75297},
			expr: &actionExpr{
				pos: position{line: 2095, col: 14, offset: 75310},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2095, col: 14, offset: 75310},
					expr: &charClassMatcher{
						pos:        position{line: 2095, col: 14, offset: 75310},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2099, col: 1, offset: 75356},
			expr: &choiceExpr{
				pos: position{line: 2103, col: 5, offset: 75683},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2103, col: 5, offset: 75683},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2103, col: 5, offset: 75683},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2103, col: 5, offset: 75683},
									expr: &charClassMatcher{
										pos:        position{line: 2103, col: 5, offset: 75683},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2103, col: 15, offset: 75693},
									expr: &choiceExpr{
										pos: position{line: 2103, col: 17, offset: 75695},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2103, col: 17, offset: 75695},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2103, col: 30, offset: 75708},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2105, col: 9, offset: 75778},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2105, col: 9, offset: 75778},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2105, col: 9, offset: 75778},
									expr: &charClassMatcher{
										pos:        position{line: 2105, col: 9, offset: 75778},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2105, col: 19, offset: 75788},
									expr: &seqExpr{
										pos: position{line: 2105, col: 20, offset: 75789},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2105, col: 20, offset: 75789},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2105, col: 27, offset: 75796},
												expr: &charClassMatcher{
													pos:        position{line: 2105, col: 27, offset: 75796},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2109, col: 1, offset: 75883},
			expr: &choiceExpr{
				pos: position{line: 2110, col: 5, offset: 75964},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2110, col: 5, offset: 75964},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2110, col: 5, offset: 75964},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2110, col: 5, offset: 75964},
									expr: &charClassMatcher{
										pos:        position{line: 2110, col: 5, offset: 75964},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2110, col: 19, offset: 75978},
									expr: &choiceExpr{
										pos: position{line: 2110, col: 21, offset: 75980},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2110, col: 21, offset: 75980},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2110, col: 31, offset: 75990},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2112, col: 9, offset: 76059},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2115, col: 1, offset: 76159},
			expr: &actionExpr{
				pos: position{line: 2115, col: 12, offset: 76170},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2115, col: 12, offset: 76170},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2119, col: 1, offset: 76235},
			expr: &actionExpr{
				pos: position{line: 2119, col: 17, offset: 76251},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2119, col: 17, offset: 76251},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2119, col: 22, offset: 76256},
						expr: &choiceExpr{
							pos: position{line: 2119, col: 23, offset: 76257},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2119, col: 23, offset: 76257},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 2119, col: 34, offset: 76268},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2123, col: 1, offset: 76349},
			expr: &actionExpr{
				pos: position{line: 2123, col: 13, offset: 76361},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2123, col: 13, offset: 76361},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2123, col: 13, offset: 76361},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2123, col: 20, offset: 76368},
								expr: &ruleRefExpr{
									pos:  position{line: 2123, col: 21, offset: 76369},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2123, col: 30, offset: 76378},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2123, col: 35, offset: 76383},
								expr: &choiceExpr{
									pos: position{line: 2123, col: 36, offset: 76384},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2123, col: 36, offset: 76384},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2123, col: 47, offset: 76395},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2127, col: 1, offset: 76480},
			expr: &actionExpr{
				pos: position{line: 2127, col: 23, offset: 76502},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2127, col: 23, offset: 76502},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2127, col: 23, offset: 76502},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2127, col: 31, offset: 76510},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 2127, col: 39, offset: 76518},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2127, col: 44, offset: 76523},
								expr: &choiceExpr{
									pos: position{line: 2127, col: 45, offset: 76524},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2127, col: 45, offset: 76524},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2127, col: 56, offset: 76535},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 2131, col: 1, offset: 76620},
			expr: &actionExpr{
				pos: position{line: 2131, col: 13, offset: 76632},
				run: (*parser).callonFilename1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2131, col: 13, offset: 76632},
					expr: &charClassMatcher{
						pos:        position{line: 2131, col: 14, offset: 76633},
						val:        "[^\\r\\n[\\]\\uFFFD ]",
						chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 2135, col: 1, offset: 76755},
			expr: &choiceExpr{
				pos: position{line: 2135, col: 11, offset: 76765},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2135, col: 11, offset: 76765},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2135, col: 23, offset: 76777},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2135, col: 36, offset: 76790},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2135, col: 47, offset: 76801},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2135, col: 58, offset: 76812},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 2137, col: 1, offset: 76823},
			expr: &actionExpr{
				pos: position{line: 2137, col: 7, offset: 76829},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2137, col: 7, offset: 76829},
					expr: &charClassMatcher{
						pos:        position{line: 2137, col: 7, offset: 76829},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 2141, col: 1, offset: 76954},
			expr: &actionExpr{
				pos: position{line: 2141, col: 10, offset: 76963},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 2141, col: 10, offset: 76963},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 2145, col: 1, offset: 77005},
			expr: &actionExpr{
				pos: position{line: 2145, col: 11, offset: 77015},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 2145, col: 11, offset: 77015},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2145, col: 11, offset: 77015},
							expr: &litMatcher{
								pos:        position{line: 2145, col: 11, offset: 77015},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2145, col: 16, offset: 77020},
							expr: &ruleRefExpr{
								pos:  position{line: 2145, col: 16, offset: 77020},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2149, col: 1, offset: 77072},
			expr: &choiceExpr{
				pos: position{line: 2149, col: 10, offset: 77081},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2149, col: 10, offset: 77081},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2149, col: 16, offset: 77087},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2149, col: 16, offset: 77087},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2153, col: 1, offset: 77128},
			expr: &choiceExpr{
				pos: position{line: 2153, col: 12, offset: 77139},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2153, col: 12, offset: 77139},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2153, col: 21, offset: 77148},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2153, col: 28, offset: 77155},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2155, col: 1, offset: 77161},
			expr: &notExpr{
				pos: position{line: 2155, col: 8, offset: 77168},
				expr: &anyMatcher{
					line: 2155, col: 9, offset: 77169,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2157, col: 1, offset: 77172},
			expr: &choiceExpr{
				pos: position{line: 2157, col: 8, offset: 77179},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2157, col: 8, offset: 77179},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2157, col: 18, offset: 77189},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onRawSource1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonRawSource1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource1(stack["lines"])
}

func (c *current) onRawSection4() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonRawSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection4()
}

func (c *current) onRawSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonRawSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection7(stack["level"])
}

func (c *current) onRawSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.(string))
}

func (p *parser) callonRawSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onRawLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine6()
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onRawBlocks1(header, blocks interface{}) (interface{}, error) {
	if header != nil && blocks != nil {
		return append([]interface{}{header}, blocks.([]interface{})...), nil
	} else if blocks != nil {
		return blocks.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawBlocks1(stack["header"], stack["blocks"])
}

func (c *current) onDocumentRawBlock1(block interface{}) (interface{}, error) {
	log.Debugf("new raw block of kind '%T'", block)
	return block, nil
}

func (p *parser) callonDocumentRawBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue8()
}

func (c *current) onAttributeDeclarationValue12() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue12()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSubstitution11(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubstitution11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution11(stack["name"], stack["start"])
}

func (c *current) onCounterSubstitution21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSubstitution21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubstitution21(stack["name"], stack["start"])
}

func (c *current) onCounterStart6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCounterStart6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart6()
}

func (c *current) onCounterStart8() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart8()
}

func (c *current) onCounterStart1(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonCounterStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterStart1(stack["start"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onStandaloneAttributeKey1(key interface{}) (interface{}, error) {
	// value is not defined
	return types.NewNamedAttribute(key.(string), nil)
}

func (p *parser) callonStandaloneAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeKey1(stack["key"])
}

func (c *current) onBlockAttributes5(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes14(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes14(stack["title"])
}

func (c *current) onBlockAttributes23(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes23(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes3() error {
	return initPositionalIndex(c)

}

func (p *parser) callonInlineAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes3()
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {

	return attributes, nil
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAnchor9() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor9()
}

func (c *current) onShortHandAnchor14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor14()
}

func (c *current) onShortHandAnchor5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAnchor5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor5(stack["elements"])
}

func (c *current) onShortHandAnchor1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandAnchor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor1(stack["id"])
}

func (c *current) onShortHandTitle12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle12()
}

func (c *current) onShortHandTitle17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle17()
}

func (c *current) onShortHandTitle5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle5(stack["elements"])
}

func (c *current) onShortHandTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonShortHandTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle1(stack["title"])
}

func (c *current) onLongHandAttributes3() error {
	return initPositionalIndex(c)

}

func (p *parser) callonLongHandAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes3()
}

func (c *current) onLongHandAttributes1(firstPositionalAttribute, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttribute != nil {
		attributes = append(attributes, firstPositionalAttribute.([]interface{})...)
	}
	attributes = append(attributes, otherAttributes.([]interface{})...)
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttribute"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttribute17(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttribute17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttribute17(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttribute1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	attrs = append(attrs, extras.([]interface{})...)
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttribute1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	_, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewIDAttribute(id)
}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	i, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewPositionalAttribute(i, value)
}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)
}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)
}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue14()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {

	i, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewPositionalAttribute(i, value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute27(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in which case, `c.text` contains the char sequence of the previous
	// rule that matched)
	v := types.Merge(value)
	return len(v) > 0, nil

}

func (p *parser) callonPositionalAttribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute27(stack["value"])
}

func (c *current) onPositionalAttribute14(value interface{}) (interface{}, error) {

	i, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewPositionalAttribute(i, nil)

}

func (p *parser) callonPositionalAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute14(stack["value"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	_, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewNamedAttribute(key.(string), value)
}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue7() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue7()
}

func (c *current) onSingleQuotedAttributeValue13() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonSingleQuotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue13()
}

func (c *current) onSingleQuotedAttributeValue16() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue16()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue7() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue7()
}

func (c *current) onDoubleQuotedAttributeValue13() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonDoubleQuotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue13()
}

func (c *current) onDoubleQuotedAttributeValue16() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue16()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue8()
}

func (c *current) onUnquotedAttributeValue13() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue13()
}

func (c *current) onUnquotedAttributeValue15(elements interface{}) (bool, error) {
	// empty string is not a valid value
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonUnquotedAttributeValue15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue15(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil
}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil
}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)

}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(string), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph15(attributes, content interface{}) (interface{}, error) {
	return types.NewMarkdownQuoteBlock(content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph15(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph28(attributes interface{}) (bool, error) {
	// verify that one of the attributes is `kind:passthrough`
	return types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Passthrough), nil

}

func (p *parser) callonRawParagraph28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph28(stack["attributes"])
}

func (c *current) onRawParagraph23(attributes, content interface{}) (interface{}, error) {

	return types.NewPassthroughBlock(content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph23(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph32(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph32(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine8(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonRawParagraphLine8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine8(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onSimpleRawParagraph6(attributes interface{}) (bool, error) {
	return !types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Literal), nil

}

func (p *parser) callonSimpleRawParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph6(stack["attributes"])
}

func (c *current) onSimpleRawParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleRawParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(string), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines7(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonContinuedRawParagraphLines7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines7(stack["line"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attributes, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	// must be before SingleQuoteMonospaceText
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement14()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement22() (interface{}, error) {
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement22()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onDoubleQuoteMarkedText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attributes, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attributes, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attributes"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attributes, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attributes, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attributes"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock6(attributes interface{}) (bool, error) {
	// AttrPositional1 must not be set
	return types.HasNotAttribute(attributes, types.AttrPositional1), nil

}

func (p *parser) callonImageBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock6(stack["attributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onExampleBlock1(attributes, blocks interface{}) (interface{}, error) {
	return types.NewExampleBlock(blocks.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["blocks"])
}

func (c *current) onExampleBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["element"])
}

func (c *current) onQuoteBlock6(attributes interface{}) (bool, error) {
	// AttrPositional1 may be missing or must be equal to `quote`
	if types.HasNotAttribute(attributes, types.AttrPositional1) ||
		types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Quote) {
		return true, nil
	}
	return false, nil

}

func (p *parser) callonQuoteBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock6(stack["attributes"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewQuoteBlock(content.([]interface{}), attributes)

}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent2(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewSidebarBlock(content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["element"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewFencedBlock(content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewListingBlock(content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onVerseBlock6(attributes interface{}) (bool, error) {
	// AttrPositional1 must be equal to `verse`
	return types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Verse), nil

}

func (p *parser) callonVerseBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock6(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewVerseBlock(content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonVerseBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewPassthroughBlock(content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onMarkdownQuoteMacroSubs1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonMarkdownQuoteMacroSubs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteMacroSubs1(stack["lines"])
}

func (c *current) onMarkdownQuoteLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonMarkdownQuoteLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine1(stack["elements"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onNoneSubs5() (interface{}, error) {
	// just text, including empty lines
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneSubs5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubs5()
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)

}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithHeadingSpacesLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithHeadingSpacesLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine4()
}

func (c *current) onParagraphWithHeadingSpacesLine1(line interface{}) (interface{}, error) {
	// do not include the trailing 'EOL' on the first line
	return line, nil
}

func (p *parser) callonParagraphWithHeadingSpacesLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	return types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Literal), nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onLiteralParagraphLine6() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonLiteralParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine6()
}

func (c *current) onLiteralParagraphLine1(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonLiteralParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onSpecialCharacter2() (interface{}, error) {
	// if we have a InternalCrossReference we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter2()
}

func (c *current) onSpecialCharacter4() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter4()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename1() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1()
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
